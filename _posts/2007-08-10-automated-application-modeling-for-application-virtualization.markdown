---

title: Automated application modeling for application virtualization
abstract: Automated application modeling for application virtualization (auto-modeling) may be incorporated into an application installer and/or other suitable component of a computer operating system. Auto-modeling may be performed by an auto-modeling agent. The auto-modeling agent may employ one or more of multiple auto-modeling strategies. The auto-modeling agent may assess one or more of a particular application, application installation package and/or application environment in order to determine a suitable auto-modeling strategy. Auto-modeling strategies may include active auto-modeling and passive auto-modeling. Active auto-modeling strategies may require at least partial installation and/or execution of the application to be modeled, whereas passive auto-modeling may generate corresponding auto-modeling data independent of application installation and/or execution, for example, by obtaining suitable data from a corresponding application installation package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667482&OS=08667482&RS=08667482
owner: Microsoft Corporation
number: 08667482
owner_city: Redmond
owner_country: US
publication_date: 20070810
---
The provisioning of computing services to groups of people is a complex problem with a variety of solutions. One conventional solution is to install a particular set of applications at a personal computer PC of each person in the group. However this can become unmanageable even for relatively small groups as for example particular specialists start demanding different application sets and or maintenance tasks such as security updates bug fix patches operating system service packs and the like begin to mount up.

A thin client approach to the problem can provide some relief. A relatively simple i.e. thin client program may be installed at each PC that provides user input to one or more central servers where the applications largely reside and execute i.e. to one or more application servers . The servers may maintain a corresponding terminal session for each client connection provide the user input to one or more applications of choice and return the results e.g. an updated graphical user interface or data corresponding thereto back to the user. The thin client approach can ease management and maintenance burdens but it has its own problems as well.

In particular many applications are designed to operate under the initial scenario i.e. the full install at PC scenario and include behavior that can cause problems in other execution environments for example when multiple application instances execute simultaneously at one of the central servers. Such problems can range from outright failure to execute more than one application instance e.g. because of a global name space conflict to more subtle security issues such as unintended information leakage through the shared execution environment. To avoid often costly application redesign such problems are commonly addressed with some level of isolating virtualization at the server.

There are numerous varieties of virtualization however for the purposes of this description it will be sufficient to highlight two types namely operating system virtualization and application virtualization. Under operating system virtualization multiple operating system instances may be maintained at a single hardware server. Under application virtualization relatively fine grained aspects of a single operating system instance may be replicated with lightweight copy on write techniques. Not only is application virtualization typically much more resource efficient than operating system virtualization but operating system virtualization can reintroduce management and maintenance burdens that the thin client architecture is designed to ease in the first place. However robust high performance application virtualization typically requires a substantial modeling process for each application that in effect audits the application s impact on the host operating system. Even larger organizations can lack the time and or resources to perform such application modeling and may be therefore denied the benefits of application virtualization and full benefits of the thin client architecture.

Application modeling for application virtualization may be automated. In particular automated application modeling for application virtualization auto modeling may be incorporated into an application installer and or other suitable component of a computer operating system. Auto modeling may be performed by an auto modeling agent. The auto modeling agent may employ one or more of multiple auto modeling strategies. The auto modeling agent may assess one or more of a particular application application installation package and or application environment in which the application is to be installed in order to determine a suitable auto modeling strategy.

Auto modeling strategies may include active auto modeling and passive auto modeling. Active auto modeling strategies may require at least partial installation and or execution of the application to be modeled for virtualization whereas passive auto modeling may generate corresponding auto modeling data independent of application installation and or execution for example by obtaining suitable data from a corresponding application installation package. In particular The auto modeling agent may perform active auto modeling by directing an independent application modeler and or an application installer for example in accordance with an auto modeling rulebase.

Active auto modeling may include the insertion of one or more application programming interface API hooks into one or more application programming interface elements. Calls to hooked application programming interface elements e.g. by the application installer may be intercepted and suitable data collected that may be transformed to generate application modeling data for virtualization. In particular active auto modeling utilizing application programming interface hooks may be suitable for incorporation into an install mode of a terminal services component of a computer operating system.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Same numbers are used throughout the disclosure and figures to reference like components and features.

In an embodiment of the invention application modeling for application virtualization may be automated. In particular automated application modeling for application virtualization auto modeling may be incorporated into an application installer and or other suitable component of a computer operating system. An auto modeling agent may assess a particular application application installation package and or an application environment in which the application is to be installed and determine a suitable auto modeling strategy. Auto modeling strategies may include active auto modeling and passive auto modeling. Active auto modeling may require that the application be at least partially installed and or executed in the application environment in order to generate application modeling data used for robust and high performance application virtualization. In contrast passive auto modeling may collect information required to generate the application modeling data from a suitable application installation package and independent of application installation and or execution.

The auto modeling agent may direct an application modeler for example in accordance with an auto modeling rulebase. The auto modeling rulebase may be updated from a central auto modeling repository for example located on a public computer network. The auto modeling agent may insert application programming interface API hooks or shims for example into application programming interfaces of the computer operating system. The auto modeling agent may use the application programming interface hooks to collect information required to generate the application modeling data. The use of application programming interface hooks may be particularly suitable when auto modeling is incorporated into an install mode of a terminal services component of the computer operating system.

During active auto modeling changes made to an application environment by an application installation process may be monitored. Moreover the choice of application environment may determine what changes are made. In an embodiment of the invention active auto modeling takes place relative to an application environment chosen from a specified set of one or more application environments including a default or baseline application environment corresponding to an expected minimum of pre existing computing services such as a minimum set of services provided by the computer operating system. Conventional application modeling for application virtualization typically may include further monitoring changes to the application environment made by the installed application during one or more initial executions of the application. In an embodiment of the invention such further monitoring may be avoided by collecting corresponding information from application meta data and or a runtime auto isolation policy.

Before describing aspects of auto modeling in accordance with an embodiment to the invention in more detail it will be helpful to have reference to an example computing environment suitable for incorporating such. depicts a suitable computing environment . The computing environment depicts four computers connected by a network . For clarity two of the computers are designated as servers and two of the computers are designated as clients. Embodiments of the invention are not so limited and may include any suitable number of computers servers and or clients. Furthermore as will be apparent to one of skill in the art any of the computers may perform in multiple roles so that for example the computer may change roles to become a client or act as both server and client simultaneously.

The computers may be any suitable computing device. Examples of suitable computing devices include mainframes minicomputers desktop computers personal computers PCs workstations portable computers laptop computers tablet computers personal digital assistants PDAs mobile telephones programmable consumer electronics devices routers gateways switches hubs and suitable combinations thereof. The computers may include one or more processing units capable of executing instructions to perform tasks as well as one or more types of computer readable media such as volatile and or non volatile memory capable of storing data computer programs and or computer program components. Such computer programs and components may include executable instructions structured data and or unstructured data organized into modules routines and or any suitable programmatic object. Such computer programs and components may be created by and or incorporate any suitable computer programming language.

The computers may include a wide variety of input output I O devices not shown in such as keyboards keypads touchpads mice trackballs pens joysticks gamepads scanners cameras microphones monitors liquid crystal displays LCDs light emitting diodes LEDs printers and or speakers. Examples of computer readable media suitable for reading by the computers include any one or more of magnetic media such as hard disks optical media such as compact disks CDs and communication media. Communication media may include any one or more of wired communication media such as copper wire coaxial cable and optical fiber as well as wireless communication media such as electro magnetic media including radio microwave infra red and laser light. In an embodiment of the invention computer readable media is tangible.

For clarity embodiments of the invention may be described herein with reference to symbolic operations such as those of a computer programming language. Such symbolic operations and any data that they act upon correspond to physical states of components and changes in components of computing devices such as the computers in a manner well understood by one of skill in the art. In an embodiment of the invention each such operation and its associated data may be fully implemented in hardware.

The network may include any suitable network element and or communication media. A computing device is an example of a suitable network element. The network may incorporate any suitable network topology. Examples of suitable network topologies include simple point to point star topology self organizing peer to peer topologies and combinations thereof. Furthermore the network may employ any suitable network protocol to establish and or maintain connectivity between the computers . Examples of suitable network protocols include transmission control protocols TCP internet protocols IP remote desktop protocols RDP and suitable combinations thereof.

Auto modeling may be incorporated into any suitable computer such as computers . However in an embodiment of the invention auto modeling provides greater benefits when incorporated into a server and particularly an application server at least by enabling automated application virtualization for served applications. Furthermore in an embodiment of the invention the server example includes more features and the description therefore proceeds in the context of the server example with the understanding that various described features will be applicable to other examples. depicts an example server incorporating auto modeling in accordance with an embodiment of the invention. The server may incorporate any suitable feature of the servers .

The server may include an application installer capable of installing an application for example from an application installation package . For clarity this example shows only one application and one corresponding application installation package . However each embodiment of the invention is not so limited and the server may include any suitable number of applications and application installation packages. Furthermore the correspondence between applications and application installation packages need not be one to one for example a single application installation package may correspond to multiple installed applications and a single application may require multiple application installation packages for installation. The application installation package may include the application installer and or data corresponding thereto for example a self installing or bootstrap portion that installs and or instantiates the application installer . The application may be any suitable computing application.

The server may further include an application modeler capable of modeling the application for virtualization and producing corresponding application modeling data . The application modeling data may include structured data used by an application virtualization service to provide application virtualization for the application . Application modelers such as application sequencers capable of application sequencing application modeling data such as sequencing data generated by application sequencers and application virtualization services such as application virtualization services that virtualize applications based at least in part on sequencing data are well known in the art and only some of their details are highlighted herein. For example the application modeling data may include one or more structured data files corresponding to the application . The application modeling data may further include structured data not directly relevant to application virtualization.

The server may still further include a terminal services component capable of providing clients such as the clients with access to functionality of the application . Terminal services such as those provided by the terminal services component are well known in the art and only some of their details are highlighted herein. Each client may establish one or more terminal sessions with the terminal services component for accessing application functionality. From within the terminal sessions the clients may request an instance of the application with which to interact. In response the terminal services component may instantiate i.e. open load associate with a process begin a thread of execution etc the application . In an embodiment of the invention the terminal services component may virtualize the application based on the application modeling data . For example the terminal services component may instantiate the application within and or place an application instance within an isolating application virtualization instance a virtualization bubble instantiated by the application virtualization service based on the application modeling data for the application . In an embodiment of the invention the terminal services component may incorporate the application virtualization service .

In an embodiment of the invention the server includes an auto modeling agent . The auto modeling agent may generate and or cause to be generated the application modeling data for the application . The auto modeling agent may operate in a passive mode i.e. perform passive auto modeling generating the application modeling data based on the application installation package without requiring that the application be installed. The auto modeling agent may operate in an active mode i.e. perform active auto modeling for example configuring and or directing the application installer and the application modeler to generate the application modeling data .

The auto modeling agent may be incorporated into the application installer and or the application modeler . Alternatively the auto modeling agent may interact with and or be incorporated into the terminal services component and in particular provide services during an install mode of the terminal services component e.g. a mode of operation in which the terminal services component allows system level modifications to the server from within one of the terminal sessions . The auto modeling agent may insert application programming interface API hooks into selected application programming interfaces of an operating system not shown in of the server for example in response to an application installation event such as the start of application installation by the application installer or the terminal services component transitioning to the install mode. The application installer may access i.e. call the operating system application programming interfaces to install the application . The inserted application programming interface hooks may enable the auto modeling agent to intercept application programming interface calls by the application installer and or the application and thereby collect information required to generate the application modeling data .

During active auto modeling the installation process for the application may be monitored for example by the application modeler . As part of the installation process an application environment into which the application is to be installed may be assessed for example by the application installer . The application environment may include the particular configuration of the operating system of the server as well as any applications services device drivers service packs patches and so on that may be already installed and any suitable aspect of the server that may impact installed application behavior. The application environment assessment may significantly influence actions taken and therefore monitored during installation which may in turn influence the quality of the application modeling data generated for the application .

For example the application environment may be assessed as including a particular set of components needed by the application . Since the application environment already includes the set of components the application installer may not install them and as a result the application modeling data may not reference the components. If the application modeling data does not reference the components a corresponding application virtualization instance instantiated by the application virtualization service may not provide adequate virtualization with respect to the components and or system i.e. server resources referenced by the components. For example the application virtualization instance may not be able to compensate if the components are updated or deleted compromising application integrity.

In an embodiment of the invention the auto modeling agent may direct an application environment baseline module to instantiate a baseline i.e. well defined and typically minimal application environment in which application installation takes place. For example the application environment baseline module may direct a virtual operating system OS module to instantiate an operating system instance independent from the operating system of the server i.e. a virtual operating system using operating system virtualization techniques. Such operating system virtualization techniques are well known in the art and only some of their details are highlighted herein.

The application environment baseline module may have reference to an application environment database storing one or more application environment specifications . The application environment baseline module may direct the virtual operating system module to instantiate and may further configure the virtual operating system in accordance with one of the application environment specifications . Application environment specifications may specify any suitable aspect of application environments that may impact installed application behavior. Application environments may be created updated and or deleted by the application environment baseline module in accordance with an application environment policy .

The application environment baseline module may further create new application environment specifications from existing application environments. For example the application environment baseline module may collect data from a particular application environment in accordance with an application environment snapshot inventory . The application environment snapshot inventory may reference aspects of the application environment for which a corresponding statement of the new application environment specification should be generated. The application environment snapshot inventory may further include search or query statements that may be used to search application environment namespaces for candidate system resources for inclusion in the new application environment specification. The application environment snapshot inventory may still further include filters to reduce and or enhance the set of candidate system resources to be specified. The search or query statements may be specified with any suitable query language. The filters may include any suitable set filter.

For some applications installation monitoring may be sufficient for the application modeler to generate application modeling data usable by the application virtualization service to create high quality application virtualization instances. However for other applications installation monitoring alone may be insufficient. In particular higher quality application virtualization instances may be created for some applications if the application modeler further monitors changes to the application environment made by the application during a first instantiation and execution i.e. a first run of the application or for example the first several runs. In an embodiment of the invention however it is desirable to avoid running the application during auto modeling and in particular during passive auto modeling.

To avoid running the application to collect additional application modeling data i.e. runtime application modeling data the auto modeling agent may collect data corresponding to the runtime application modeling data or some suitable subset thereof from an alternate source. For example the application installation package may include explicit specification of such data and or a runtime auto isolation policy may specify such data for the particular application installation package or a class of application installation packages to which the application installation package belongs. The auto modeling agent may transform the alternatively collected data to generate the additional runtime application modeling data for the application modeling data set or in an embodiment of the invention to generate runtime auto isolation data for the application independent of the application modeling data .

The server may maintain one or more namespaces that organize e.g. hierarchically names referencing system i.e. server resources. For example file systems registries of configuration information distributed common object models DCOM and system wide object managers in general may each have an associated namespace. In particular the runtime auto isolation data may specify one or more system namespaces to be protected for example write protected and or virtualized to varying degrees.

The terminal services component may include a runtime auto isolation module capable of using the runtime auto isolation data to provide for runtime aspects of application virtualization and in particular for virtualization of specified protected namespaces. For example the runtime auto isolation module may detect access attempts for specified protected namespaces and depending on the access type e.g. write attempt and or the access attempt result e.g. access denied may redirect the access attempt to a lightweight application instance specific replica of the namespace and or resource s referenced by the namespace implemented with copy on write techniques. The runtime auto isolation module may utilize aspects of the application virtualization service to implement aspects of protected namespace virtualization and in an embodiment of the invention the runtime auto isolation module may be incorporated into the application virtualization service .

Before describing procedures that may be performed by the components depicted in in more detail it will be helpful to describe additional details of the auto modeling agent . Accordingly depicts an example architecture for an auto modeling agent . In an embodiment of the invention the example architecture is suitable for the auto modeling agent of .

The auto modeling agent may include an active auto modeling module for performing aspects of active auto modeling a passive auto modeling module for performing aspects of passive auto modeling and a terminal services TS auto modeling plug in for integrating aspects of auto modeling with the terminal services component . An auto modeling agent in accordance with an embodiment of the invention need not include each of these three and may include any suitable combination thereof. The active auto modeling module the passive auto modeling module and the terminal service auto modeling plug in are described below in more detail with reference to and respectively.

The auto modeling agent may determine which type of auto modeling to use e.g. passive auto modeling or active auto modeling based on for example a type of the application installation package presence of one or more server components e.g. the terminal services component and or any suitable aspect of the application installation environment i.e. the application environment of the application installer . The auto modeling agent may include an application installation package classifier to facilitate application installation package type determination. The application installation package classifier may parse the application installation package to obtain application installation package classification data.

The application installation package classifier may determine an application installation package signature based on the application installation package classification data. The application installation package classifier may attempt to match the determined application installation package signature against application installation package signatures in a package signature database . A resulting match may be associated with a package signature database record specifying a particular application installation package classification or for example further application installation package classification data. If there is no match or a match that does not result in an immediate classification the application installation package classifier may use the collected application installation package classification data to determine the application installation package classification in accordance with a package classification rulebase .

The package classification rulebase may include package classification rules specified with any suitable rule specification language including any suitable programming language. The package classification rulebase may include conditional rules having conditions dependent on the collected application installation package classification data. The package classification rulebase may further include rules independent of the collected application installation package classification data and in particular a default rule such as a rule corresponding to by default use active auto modeling. 

The auto modeling agent may further include a package databases updater capable of updating the package signature database and the package classification rulebase from an auto modeling repository not shown in for example according to an update schedule or in response to an update event. The auto modeling repository may be located at a server remote from the server and in particular at a server accessible over a public network. For example if the server corresponds to the server the auto modeling repository may be located at the server and the network may be a public network such as the internet. An example auto modeling repository is described below in more detail with reference to .

It may be that the auto modeling agent determines that active auto modeling should be used to model the application for virtualization for example based on the application installation package classification determined by the application installation package classifier for the application installation package . depicts an example active auto modeling module in accordance with an embodiment of the invention. The active auto modeling module is an example of the active auto modeling module of .

The active auto modeling module may include a modeler interface capable of interfacing with the application modeler . The modeler interface may provide access to functionality of the application modeler at any suitable level. For example the application modeler may expose one or more application programming interfaces providing access to application modeler functionality and the modeler interface may translate auto modeling commands instructions and or directions auto modeling directions to corresponding application modeler application programming interface calls. Alternatively the application modeler may provide access to functionality at a user interface level for example through user editable configuration files and or graphical user interface dialogs. The modeler interface may translate auto modeling directions to corresponding user interface commands actions edits instructions and or directions.

The modeler interface may similarly receive and translate feedback from the application modeler for example responsive to the auto modeling directions as well as subscribe to application modeler events. The active auto modeling module may issue auto modeling directions and or respond to application modeler feedback or events in accordance with an auto modeling rulebase . The auto modeling rulebase may include auto modeling rules specified with any suitable rule specification language including any suitable programming language. The auto modeling rulebase may be updated for example from the auto modeling repository by a rulebase updater . Rulebase updates may occur according to an update schedule or for example responsive to an update event.

One or more rules of the auto modeling rulebase for example conditional rules may depend upon a state of an application installation process performed by the application installer and or a state of an application modeling process performed by the application modeler . The active auto modeling module may maintain a corresponding auto modeling state for example based on feedback and or events received by the modeler interface . The auto modeling rulebase may include one or more auto modeling rules for updating the auto modeling state .

It may be that the auto modeling agent determines that passive auto modeling should be used to model the application for virtualization for example based on the application installation package classification determined by the application installation package classifier for the application installation package . depicts an example passive auto modeling module in accordance with an embodiment of the invention. The passive auto modeling module is an example of the passive auto modeling module of .

The passive auto modeling module may include one or more application installation package parsers capable of parsing application installation packages such as the application installation package for data corresponding to application modeling data . The application installation packages parsers may include package parsers for any suitable application installation package including compressed e.g. zipped application installation packages archived application installation packages e.g. with a unix tar command application installation packages with particular formats such as Microsoft Windows Installer format i.e. MSI format and or any suitable combination thereof. The passive auto modeling module may make the application installation package parsers available to other components of the auto modeling agent for example the application installation package classifier .

The passive auto modeling module may further include a parsed data transformer for transforming data parsed from the application installation package into one or more data structures more suitable for formatting into the application modeling data . The parsed data transformer may apply any suitable data transformation including linear data mappings and translations as well as more sophisticated multiple pass transformations. The transformed data may be formatted by an application modeling data formatter into a suitable application modeling data format for example an application modeling data format corresponding to a format of application modeling data generated by the application modeler and or used by the application virtualization service to instantiate an application virtualization instance suitable for the application .

It may be that the auto modeling agent determines that the terminal services auto modeling plug in should be used to model the application for virtualization for example based on detection of and or a request by the terminal services component . depicts an example terminal services auto modeling plug in in accordance with an embodiment of the invention. The terminal services auto modeling plug in is an example of the terminal services auto modeling plug in of .

The terminal services auto modeling plug in may include a terminal services interface capable of interfacing with the terminal services component . For example the terminal services interface may utilize one or more application programming interfaces exposed by the terminal services component to access terminal services component functionality. Furthermore the terminal services interface may expose one or more auto modeling application programming interfaces for use by the terminal services component . Such auto modeling application programming interfaces may provide access to any suitable aspect of auto modeling agent functionality and in particular may enable the terminal services component to direct the terminal services auto modeling plug in to take steps to generate the application modeling data for the application .

The terminal services auto modeling plug in may subscribe to terminal services component events and in particular to notifications of transition to and from the install mode of the terminal services component . For terminal services component events of interest to the terminal services auto modeling plug in that are not explicitly published by the terminal services component the terminal services auto modeling plug in may insert application programming interface hooks into elements of corresponding terminal services component application programming interfaces and generate the events when the hooked application programming interface elements are called.

The terminal services auto modeling plug in may include a hook manager capable of inserting and deleting application programming interface hooks into and from elements of application programming interfaces. For example responsive to detection of the terminal services component transitioning to the install mode the hook manager may insert application programming interface hooks into one or more elements of one or more application programming interfaces of the application environment into which the application is to be installed such as application programming interfaces of the operating system of the server . Similarly responsive to detection of the terminal services component transitioning from the install mode the hook manager may delete the previously inserted application programming interface hooks.

The hook manager may insert and or delete application programming interface hooks in accordance with entries in a hook specification database . For example the hook specification database may include sets of application programming interface hook specifications corresponding to particular directions and or events that may be received from the terminal services component and responsive to a particular direction and or event the hook manager may insert or delete as appropriate an application programming interface hook corresponding to each application programming interface hook specification in the associated set. As further examples the hook specification database may include sets of application programming interface hook specifications corresponding to classes of application installation packages for example as determined by the application installation package classifier and or any suitable aspect of the application environment into which the application is is to be installed. The terminal services auto modeling plug in may further include a database updater capable of updating the hook specification database for example from the auto modeling repository.

The terminal services auto modeling plug in may intercept calls to application programming interface elements with inserted application programming interface hooks i.e. hooked application programming interface elements . In particular a call data collector of the terminal services auto modeling plug in may examine parameters of calls to hooked elements before the calls are passed on to their original destination. The call data collector may collect i.e. select copy etc ones of the call parameters to store in a call data collection . In particular the call data collector may collect call parameters to store in the call data collection that may be used to generate application modeling data for the application e.g. during installation of the application . Each application programming interface hook specification may include specification of one or more call parameters to be collected by the call data collector .

The terminal services auto modeling plug in may further a call data transformer capable of transforming the call data collection into one or more data structures suitable for formatting into the application modeling data . The call data transformer may apply any suitable data transformation to the call data collection including linear data mappings and translations as well as more sophisticated multiple pass transformations. The transformed data may be formatted by an application modeling data formatter into a suitable application modeling data format for example an application modeling data format corresponding to a format of application modeling data generated by the application modeler and or used by the application virtualization service to instantiate an application virtualization instance suitable for the application . The application modeling data formatter may be a replica of the application modeling data formatter or a same component shared by the terminal services auto modeling plug in and the passive auto modeling module .

As described above each of the auto modeling agent the active auto modeling module and the terminal services auto modeling plug in include a database and or rulebase that may be updated from an auto modeling repository that may be located at a server remote from the server . depicts an example auto modeling repository in accordance with an embodiment of the invention. The auto modeling repository may be hosted by a server that may be different from the server . For example the server may correspond to the server and the server may correspond to the server . Alternatively the auto modeling repository may be a distributed database i.e. distributed across two or more servers for example implemented with peer to peer or overlay network techniques well known in the art.

The auto modeling repository may include one or more package databases from which the package signature database and or the package classification rulebase may be updated for example by the package databases updater . The auto modeling repository may include an auto modeling rulebase from which the auto modeling rulebase may be updated for example by the rulebase updater . The auto modeling repository may include a hook specification database from which the hook specification database may be updated for example by the database updater . The auto modeling repository may further include an application environment database from which the application environment database may be updated for example by the application environment baseline module .

The auto modeling repository databases may have a same format as corresponding databases and that update from the auto modeling repository . However each embodiment of the invention is not so limited and the auto modeling repository databases may have any suitable format including for example a format optimized for updating and or synchronization. The auto modeling repository may be configured to accept and process update requests for example from the database updaters . In addition the database updaters may be configured to accept and process update notifications from the auto modeling repository . For example update notifications may include database updates and or trigger an update request from the notified database updater .

Having described structural aspects of architectures and components in accordance with an embodiment of the invention in some detail the description now turns to procedures and steps that may be performed for example by the architectures and or components. depicts steps that are part of a relatively complex example that will serve to illustrate aspects of application auto modeling in accordance with an embodiment of the invention. In this example both passive auto modeling and active auto modeling are available and a choice between them is made based on information corresponding to the application installation package . Furthermore auto modeling takes place as part of the install mode of the terminal services component .

As described above the terminal services component may manage access to a set of applications such as the application from within terminal sessions . Furthermore the terminal services component may have an install mode for managing changes to the set of applications. For example when in the install mode the terminal services component may allow changes to the configuration of the server that affect each of the terminal sessions whereas when in an operating or execute mode the terminal services component may limit changes to the configuration of the server to changes that affect only a particular one of the terminal sessions . In particular in the install mode the terminal services component may allow installation of a new application e.g. the application accessible from each of the terminal sessions . In some instances installation outside the install mode may not be prevented but may result in undesirable e.g. unmanaged modifications to the configuration of the server .

In the example described with reference to the application environment into which the application is installed includes at least some aspects of the server . Multiple unrelated processes may occur during installation and or modeling of the application each of which may make changes to aspects of the server . Such unrelated changes may contaminate the modeling of the application and lower its quality. In an embodiment of the invention the install mode of the terminal services component may insulate the application modeler from detecting changes to the application environment that are unrelated to installation of the application for example using application virtualization techniques.

At step the terminal services component may transition to the install mode. For example the terminal services component may transition to the install mode in response to an explicit request or command of a user of the server . At step an application installation may be requested for example the user of the server may request the application installer to install the application from the application installation package . The request to transition to the install mode and the request to install the application may be independent or they may be integral. For example the application installer may automatically request that the terminal services component transition to the install mode responsive to the request to install the application and or detection of the terminal services component .

At step the application installation package may be accessed for example by the auto modeling agent . The auto modeling agent may access the application installation package for example responsive to a request by the application installer the terminal services component or to detection of the transition to install mode by the terminal services component . Accessing the application installation package may for example include locating opening and or reading elements of the application installation package .

At step the application installation package may be identified. For example the auto modeling agent may associate the application installation package with a unique identifier. The auto modeling agent may identify the application installation package with the package signature database . For example the package signature database may be searched for an identifying match with information corresponding to the application installation package obtained at step .

At step the application installation package may be classified. For example the auto modeling agent may associate the application installation package with one or more application installation package classifications including classifications corresponding to suitable for passive auto modeling and suitable for active auto modeling. The auto modeling agent may classify the application installation package according to the package classification rulebase and or the identification obtained at step . If the application installation package is classified as suitable for passive auto modeling a procedure incorporating the steps depicted in may progress to step . Otherwise the procedure may progress to step .

At step passive auto modeling may be performed. For example the auto modeling agent may passively auto model the application using information from the application installation package . Passive auto modeling in accordance with an embodiment of the invention is described in more detail below with reference to . At step active auto modeling may be performed. For example the auto modeling agent may actively auto model the application during installation of the application by the application installer from the application installation package . Active auto modeling in accordance with an embodiment of the invention is described below in more detail with reference to and .

At step the terminal service component may transition to the execute mode. For example the terminal services component may transition to the execute mode in response to an explicit request or command of the user of the server . Alternatively the terminal services component may transition to the execute mode responsive to a request or command automatically issued by the application installer for example on completion of application installation and or auto modeling.

Passive auto modeling and active auto modeling may differ significantly. Active auto modeling will be described first in more detail as it is the more complex auto modeling example and will provide additional context. and depict example steps for active auto modeling in accordance with an embodiment of the invention. depicts example alternative steps for active auto modeling in accordance with an embodiment of the invention.

Various databases and rulebases may be accessed as part of active auto modeling. As described above such databases and rulebases may be updated from the auto modeling repository . Updates may occur for example according to an update schedule and or responsive to auto modeling events such as active auto modeling initiation. At step it may be determined if it is appropriate to check for a repository update. For example the active auto modeling module may check if an event has occurred that indicates an update from the auto modeling repository may be desirable. Such events may include an update schedule event an auto modeling event such as auto modeling initiation and or receipt of a notification from the auto modeling repository . The application environment baseline module and the terminal services auto modeling plug in may make similar checks. If it is determined that it is appropriate to check for a repository update a procedure incorporating the steps depicted in may progress to step . Otherwise the procedure may progress to step .

At step it may be determined if a repository update is required. For example the rulebase updater of the active auto modeling module may determine if the auto modeling rulebase at the auto modeling repository has changed since the auto modeling rulebase was last updated. If the auto modeling repository has not provided a notification indicating such a change the rulebase updater and the auto modeling repository may exchange messages enabling comparison of a state of the auto modeling rulebase and the auto modeling rulebase for example the rulebase updater or the auto modeling repository may compare timestamps cryptographic signatures and or any suitable auto modeling rulebase characteristic. Similarly the application environment baseline module may determine if the application environment database has changed since the application environment database was updated and the database updater of the terminal services auto modeling plug in may determine if the hook specification database has changed since the hook specification database was last updated. If it is determined that a repository update is required the procedure may progress to step . Otherwise the procedure may progress to step .

At step one or more databases and or rulebases may be updated. For example the rulebase updater of the active auto modeling module may update the auto modeling rulebase from the auto modeling rulebase at the auto modeling repository . Similarly the application environment baseline module may update the application environment database from the application environment database and the database updater of the terminal services auto modeling plug in may update the hook specification database from the hook specification database . Database and or rulebase updates may be implemented with any suitable database update and or synchronization technique including simple copy transmission of differences only and distributed replication techniques.

The active auto modeling module may be configured to actively auto model the application relative to an application environment that is independent of a default application environment provided by the server . At step it may be determined if such an independent application environment is desired for application installation. For example the auto modeling rulebase may specify whether or not such an independent application environment is desirable for the application application installation package and or class of application installation package as determined by the application installation package classifier . Alternatively or in addition the determination may be based on the application environment policy . If the independent application environment is desired the procedure may progress to step . Otherwise the procedure may progress to step .

At step the independent application environment may be instantiated. For example the application environment baseline module may direct the virtual operating system module to instantiate the independent application environment in accordance with one or more application environment specifications and or the application environment policy . The application environment baseline module may chose a particular one of the application environment specifications for instantiation based on information from the auto modeling agent such as one or more classifications of the application installation package information from the active auto modeling module such as an application environment designation specified by the auto modeling rulebase and or information from the application environment policy such as a designation of a baseline application environment to be instantiated.

At step the application modeler may be started. For example the active auto modeling module may direct the application modeler to start. Starting the application modeler may include accessing opening loading and or running the application modeler . At step the application modeler may be configured. For example the active auto modeling module may configure the application modeler to model the application as it is installed from the application installation package . The active auto modeling module may configure the application modeler according to one or more auto modeling rules in the auto modeling rulebase that are associated with the application and or the application installation package . In particular the application modeler may be configured to ignore for modeling purposes aspects of the application environment into which the application is to be installed e.g. the application environment instantiated at step .

The circle is a diagrammatic device connecting the steps depicted by and the steps depicted by . In particular the circle indicates that the procedure may progress from step to step . At step the application modeler may be directed to start monitoring application installation. For example the application modeler may have an explicit monitoring mode in which the application modeler monitors changes made to the application environment during installation of the application and the active auto modeling module may direct the application modeler to transition to the monitoring mode.

At step one or more pre installation actions may be performed. For example the active auto modeling module may perform one or more pre installation actions in accordance with one or more auto modeling rules of the auto modeling rulebase that are associated with the application and or the application installation package . Pre installation actions may include application environment configuration file system modification modifications to one or more registries of configuration information installation of patches security updates and or service packs and or any suitable action preparing the application environment for installation.

At step application installation may be initiated. For example the active auto modeling module may direct the application installer to begin installing the application from the application installation package . Initiating application installation may include accessing opening loading and or running the application installer .

At step the active auto modeling procedure may wait for an installation event. For example the active auto modeling module may wait for the application installer to request direction. Installation events may include actions performed by the application installer the application the application environment into which the application is being installed the application modeler the terminal services component and or components thereof. In particular installation events may include requests for direction for example requests corresponding to graphical user interface GUI dialogs that would normally e.g. without the active auto modeling module require response by a user of the server . The installation events may further include an indication that the installation is finished that is that the application has been installed. For example the indication may be that the application installer started at step may exit.

At step it may be determined if the installation has finished. For example the active auto modeling module may detect the indication that the installation is finished i.e. the install finished installation event . If the installation has finished the procedure may progress to step . Otherwise the procedure may progress to step .

At step an auto modeling state may be updated. For example the active auto modeling module may update the auto modeling state in accordance with the installation event and or one or more auto modeling rules of the auto modeling rulebase . At step a response to the installation event may be made. For example the active auto modeling module may respond to the installation event in accordance with one or more auto modeling rules of the auto modeling rulebase and or the auto modeling state . In particular the active auto modeling module may respond to requests for direction for example by the auto modeling agent . Such response may be effected with a component interface of any suitable level including an application programming interface an application configuration interface such as a registry of configuration information and or a configuration file and or a user interface such as a graphical user interface. Such response may include a restart of the operating system of the server and or of the independent application environment instantiated at step .

Having responded the procedure may return to step to wait for the next installation event. At some point the install finished installation event will occur by means of an installation timeout if not otherwise and the procedure may progress to step . At step one or more post installation actions may be performed. For example the active auto modeling module may perform one or more post installation actions in accordance with one or more auto modeling rules of the auto modeling rulebase that are associated with the application and or the application installation package . Post installation actions may include application environment configuration file system modification modifications to one or more registries of configuration information installation of patches security updates and or service packs running the application and or any suitable server component and or utility and or any suitable action facilitating high quality modeling of the application .

The circle is a diagrammatic device connecting the steps depicted by and the steps depicted by . In particular the circle indicates that the procedure may progress from step to step . At step the application modeler may be directed to stop monitoring application installation. For example the active auto modeling module may direct the application modeler to transition from the monitoring mode entered at step . In an embodiment of the invention maintaining the application modeler monitoring mode while the pre install and post install actions of steps and are performed enables higher quality modeling of the application .

At step the application modeler may be directed to generate application modeling data for the application . For example the active auto modeling module may so direct the application modeler . It may be that the application modeler generates the application modeling data automatically upon transitioning from the monitoring mode in which case step incorporates step . At step the application modeler may be stopped. For example the active auto modeling module may direct the application modeler to stop. Stopping the application modeler may include ceasing to run the application modeler and or unloading the application modeler from server memory.

At step it may be determined if an independent application environment was instantiated for example at step . The application environment baseline module may keep track of application environments instantiated by the virtual operating system module and particularly application environments instantiated by the virtual operating system module at the direction of the application environment baseline module . If an independent application environment was instantiated the procedure may progress to step . Otherwise the procedure may progress to steps beyond those depicted in and .

At step it may be determined if the application environment specification corresponding to the instantiated application environment should be updated for example to reflect one or more of the changes made to the instantiated application environment during installation of the application and or to include the newly installed application itself. The application environment policy may include one or more application environment policy elements specifying whether and how to update the application environment specification corresponding to the instantiated application environment and the determination of step may be made in accordance with the application environment policy . If it is determined that the application environment specification corresponding to the instantiated application environment should be updated the procedure may progress to step . Otherwise the procedure may progress to step .

At step the application environment specification corresponding to the instantiated application environment may be updated. For example the application environment baseline module may update the application environment specification corresponding to the instantiated application environment in accordance with the application environment policy . At step the instantiated application environment may be deleted. For example the application environment baseline module may direct the virtual operating system module to delete the application environment instance instantiated at step .

As described above information required for generating the application modeling data may alternately or in addition be collected with one or more application programming interface hooks. depicts example steps for active auto modeling using application programming interface hooks in accordance with an embodiment of the invention. At step one or more auto modeling associated databases and or rulebases may be updated from the auto modeling repository . For example the database updater of the terminal services auto modeling plug in may update the hook specification database from the hook specification database at the auto modeling repository . Step may incorporate steps similar to steps and or described above with reference to .

At step one or more application programming interface API hooks may be inserted. For example the hook manager of the terminal services auto modeling plug in may insert one or more application programming hooks into one or more application programming interface elements as specified by one or more entries in the hook specification database . In particular the application programming interface elements into which application programming interface hooks are inserted i.e. the hooked application programming interface elements may include elements of application programming interfaces required by the application installer to install the application .

At step a procedure incorporating steps depicted by may wait for a call to one of the hooked application programming interface elements. For example the procedure may wait for one of the application programming interface calls made by the application installer to install the application . As will be apparent to one of skill in the art the wait need not occur in an independent thread of execution and may correspond to a thread of execution of the calling application encountering the application programming interface hook or intercept point.

A particular class of calls e.g. as determined by call parameters to a particular set of application programming interface elements e.g. as specified by the hook specification database of may indicate that installation of the application has finished. For example a call to an operating system application programming interface to exit the application installer may indicate that installation of the application has finished. At step it may be determined whether installation has finished. For example the terminal services auto modeling plug in may intercept a call to one of the hooked application programming interface elements that indicates that installation of the application has finished. If it is determined that the installation has finished the procedure may progress to step . Otherwise the procedure may progress to step .

At step the call data collection may be updated. For example the terminal service auto modeling plug in may update the call data collection with one or more parameters of the most recently intercepted application programming interface call. The call parameters and or other suitable call data to be collected from the intercepted application programming interface call may be specified by the hook specification database and in particular by elements of the hook specification database corresponding the application programming interface hook that intercepted the application programming interface call. Having updated the call data collection the procedure may return to step to wait for the next application programming interface call.

At some point it will be determined at step that the installation has finished by means of an installation timeout if not otherwise and the procedure may progress to step . At step the application programming interface hooks inserted at step may be removed. For example the hook manager of the terminal services auto modeling plug in may track application programming interface hooks inserted at step and remove them at step .

At step the call data collection may be transformed. For example the call data transformer may transform the call data collection into one or more data structures suitable for input to the application modeling data formatter . At step the application modeling data for the application may be generated. For example the application modeling data formatter may generate the application modeling data by formatting the transformed call data collection into an appropriate application modeling data format.

As described above it may be that active auto modeling is unnecessary and that passive auto modeling is an option. depicts example steps for passive auto modeling in accordance with an embodiment of the invention. For example the steps depicted in may be used to passively generate application modeling data for the application that corresponds to application modeling data generated by active modeling and or auto modeling.

At step the application installation package may be parsed for data suitable for generating corresponding application modeling data . For example the application installation package may be parsed by one or more application installation package parsers of the passive auto modeling module . At step the parsed data may be transformed. For example the parsed data transformer may transform the parsed data into one or more data structures suitable for input to the application modeling data formatter . At step the application modeling data may be generated. For example the application modeling data formatter may generate the application modeling data by suitably formatting the transformed data output by the parsed data transformer .

As described above it may be desirable to instantiate a particular application environment for active auto modeling. Application environments may be specified by application environment specifications and application environment specifications may be automatically created for given application environments. depicts example steps for automatically creating an application environment specification in accordance with an embodiment of the invention.

At step a desired application environment may be established. For example a user of the server may configure the server to have the desired application environment. Alternatively the desired application environment may be established at a computer independent of the server . In another alternative the desired application environment may be a distributed application environment incorporating several computers and or network elements.

At step an application environment snapshot may be requested. For example the user of the server may request that a new one of the application environment specifications be created for the application environment established at step . The application environment baseline module may include facilities to receive and process such requests. The request may include a label for the desired application environment.

At step information required to create the new one of the application environment specifications may be gathered from the desired application environment. For example the application environment baseline module may gather the information from the application environment established at step . The information to be gathered from the application environment may be specified by the application environment snapshot inventory .

At step a new application environment specification corresponding to the desired application environment may be added to the application environment database . For example the application environment baseline module may create a new one of the application environment specifications with the information gathered at step . The new one of the application environment specifications may be associated with a label corresponding to the label provided with the request of step . Each of the application environment specifications may be associated with a unique identifier.

As described above higher quality application virtualization may at times be achieved if auto modeling accounts not only for application environment changes made during application installation but also for changes made during one or more initial or first runs of the application that is if auto modeling includes a runtime auto modeling component. Furthermore it may be desirable to avoid actually running the application even during active auto modeling that is that the runtime auto modeling be passive. depicts example steps for passive runtime auto modeling in accordance with an embodiment of the invention.

At step the application installation package may be parsed. For example the auto modeling agent may parse the application installation package for runtime auto modeling i.e. first run metadata. The application installation package may include explicit first run metadata. The application installation package may include implicit first run metadata that requires extraction at step . Alternately the application installation package may fail to include sufficient first run metadata.

At step it may be determined if the application installation package includes sufficient first run metadata. For example the auto modeling agent may determine if the application installation package includes sufficient first run metadata based on one or more results of the parsing of step . If it is determined that the application installation package includes sufficient first run metadata a procedure incorporating steps depicted in may progress to step . Otherwise the procedure may progress to step .

If the application installation package fails to include sufficient first run metadata default first run metadata including supplementary default first run metadata may be obtained from one or more alternate sources. The runtime auto isolation policy may specify default first run metadata. The runtime auto isolation policy may further specify one or more alternate sources of default first run metadata. At step it may be determined if default first run metadata is available. For example the auto modeling agent may check the runtime auto isolation policy for default first run metadata and or one or more alternate sources as specified by the runtime auto isolation policy . If it is determined that default first run metadata is available the procedure may progress to step . Otherwise passive runtime auto modeling may not continue and the procedure may progress to steps other than those depicted in .

Additional runtime application modeling data may be generated for the application modeling data based on the first run metadata. Alternatively runtime auto isolation data independent of the application modeling data may be generated based on the first run metadata. The runtime auto isolation policy may specify which type or format of runtime application modeling data to generate. At step the format of runtime application modeling data to generate may be determined. For example the auto modeling agent may determine which runtime application modeling data format to generate in accordance with the runtime auto isolation policy . If it is determined that additional runtime application modeling data is to be generated for the application modeling data the procedure may progress to step . Otherwise the procedure may progress to step .

At step additional runtime application modeling data may be generated for the application modeling data . For example the auto modeling agent may generate the additional runtime application modeling data based on the first run metadata including parsed and or default first run metadata. The auto modeling agent may use passive auto modeling module functionality to generate the additional runtime application modeling data including functionality of the application installation package parsers the parsed data transformer and or the application modeling data transformer .

At step the runtime auto isolation data may be generated. For example the auto modeling agent may generate the runtime auto isolation data based on the first run metadata including parsed and or default first run metadata. The auto modeling agent may utilize functionality corresponding to the application installation package parsers the parsed data transformer and or the application modeling data transformer of the passive auto modeling module to generate the runtime auto isolation data .

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and or were set forth in its entirety herein.

The use of the terms a and an and the and similar referents in the specification and in the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms having including containing and similar referents in the specification and in the following claims are to be construed as open ended terms e.g. meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely indented to serve as a shorthand method of referring individually to each separate value inclusively falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation to the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to an embodiment of the invention.

Preferred embodiments of the invention are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the specification. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as explicitly described herein. Accordingly embodiments of the invention include all modifications and equivalents of the subject matter recited in the following claims as permitted by applicable law.

