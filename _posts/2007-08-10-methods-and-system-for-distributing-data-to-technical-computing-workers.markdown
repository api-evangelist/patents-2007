---

title: Methods and system for distributing data to technical computing workers
abstract: A method and system is disclosed for providing a distributed technical computing environment for distributing technical computing tasks from a technical computing client to technical computing workers for execution of the tasks on one or more computers systems. Tasks can be defined on a technical computing client, and the tasks organized into jobs. The technical computing client can directly distribute tasks to one or more technical computing workers. Furthermore, the technical computing client can submit tasks, or jobs comprising tasks, to an automatic task distribution mechanism that distributes the tasks automatically to one or more technical computing workers providing technical computing services. The technical computing worker performs technical computing of tasks and the results of the execution of tasks may be provided to the technical computing client. Data associated with the tasks is managed by a programmable interface associated with a data storage repository. The interface allows the various entities of the distributed technical computing environment to access data services performable by the interface or by a file system or a database and database management system associated with the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08032582&OS=08032582&RS=08032582
owner: The MathWorks, Inc.
number: 08032582
owner_city: Natick
owner_country: US
publication_date: 20070810
---
This application is a continuation of pending U.S. patent application Ser. No. 11 195 927 filed Aug. 2 2005. The contents of the aforementioned patent application are incorporated herein in its entirety by reference.

The present invention generally relates to technical computing and more particularly distributing technical computing processing to multiple computers in a network in a distributed technical computing environment.

MATLAB is a product of The MathWorks Inc. of Natick Mass. which provides engineers scientists mathematicians and educators across a diverse range of industries with an environment for technical computing applications. MATLAB is an intuitive high performance language and technical computing environment that provides mathematical and graphical tools for mathematical computation data analysis visualization and algorithm development. MATLAB integrates numerical analysis matrix computation signal processing and graphics in an easy to use environment where problems and solutions are expressed in familiar mathematical notation without traditional programming. MATLAB is used to solve complex engineering and scientific problems by developing mathematical models that simulate the problem. A model is prototyped tested and analyzed by running the model under multiple boundary conditions data parameters or just a number of initial guesses. In MATLAB one can easily modify the model plot a new variable or reformulate the problem in a rapid interactive fashion that is typically not feasible in a non interpreted programming such as Fortran or C.

As a desktop application MATLAB allows scientists and engineers to interactively perform complex analysis and modeling in their familiar workstation environment. However a single workstation can be limiting to the size of the problem that can be solved because of the relationship of the computing power of the workstation to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time.

For example a simulation of a large complex aircraft model may take a reasonable time to run with a single computation with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters e.g. at one hundred different altitude levels and fifty different aircraft weights to understand the behavior of the model under varied conditions. This would require five thousand computations to analyze the problem as desired and the single computer would take an unreasonable or undesirable amount of time to perform these simulations. In this case the single computer would be allocated full time to performing the computation while many computer resources on the network may be idle. Additionally the benefit of the interactive features of the software is reduced as the computation time increases.

With many engineering and scientific problems requiring larger and more complex modeling computations accordingly become more resource intensive and time consuming. When a computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single computer distributed computing in a distributed technical computing environment for example Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine provides a solution to decrease the computation time as needed.

In such distributed technical computing environments a scheduler such as a load sharing facility LSF a portable batch system PBS a high throughput computing HTC environment such as Condor Microsoft Cluster Manager and the like manage distribution of tasks within the distributed technical computing environment. Although such schedulers distribute tasks to the various computational devices in the distributed technical computing environment the data associated with such tasks is stored in a shared file system accessible to those computational devices. This severely limits the types of clients and workers that can work with Distributed Computing Toolbox. Moreover this limits the abilities of programs using the scheduler to the capabilities of the file system with respect to being informed of changes and other events. Still further it requires the data validation occur in the process generating the file. Accordingly there exists a need to improve the management and handling of data associated with distributed tasks in the distributed technical computing environment.

The present invention provides methods and a system for managing distribution of data associated with distributed technical computing tasks in a distributed technical computing environment. A technical computing client may define a job comprising one or more tasks. The technical computing client through an intermediary such as a scheduler can distribute these tasks to technical computing workers for technical computing of the task. The technical computing workers perform technical computing of the task and may provide a result of the task for the technical computing client. An interface associated with a data repository holding the data allows programmatic control of the interface and provides a mechanism for informing interested entities of desired data events and for performing other data operations for example ensuring data integrity. As such the present invention improves the ability of a scheduler associated with the distributed technical computing environment to manage and distribute tasks amongst multiple computing resources to perform technical computing of tasks. Further the present invention is well suited for use with a number of different data repository types. Suitable data repository types include but are not limited to a file system a database a remote storage array memory and the like.

In one illustrative embodiment of the present invention a method of transferring data from a first computational engine to a second computational engine in a distributed environment having a plurality of computational engines is disclosed. Performance of the method instructs an interface associated with a data repository to transfer to the second of the computational engines data associated with a task distributed from the first of the computational engines. Upon processing of the instructions the interface transfers the data from the interface to the second of the computational engines. Performance of the method communicates with the interface to establish a communications channel with the data repository.

Instructing the interface can invoke a method of the interface to perform a pre defined operation. The method can take an action to notify an entity of receipt of the data by the interface. The method can take an action to maintain integrity of the data. The method can also take an action to update a data structure held by the data repository.

The method of taking an action to update a data structure can include the step of sending a query language command to a database management system managing the data structure. Additionally the method of taking an action to update a data structure can include the step of calling a function associated with the interface.

In another illustrative embodiment of the present invention a system for distributing data in a distributed environment is disclosed. The system includes amongst other items a first computational engine a data storage mechanism and an interface. The first computational engine is configured to submit a task to distribute for processing in the computing environment. The task includes at least one action to perform by the computing environment. The data storage mechanism is configured to hold data associated with the task in communication with the computing environment. The interface is configured to manage transfer of the data associated with the task between the data storage mechanism and a second computational engine performing the processing in the computing environment.

The system can further include an automatic task distribution mechanism in communication with the first computational engine. The automatic task distribution mechanism receives the task submitted by the first computational engine and makes the task available to one or more other computational engines associated with the computing environment.

In one embodiment of the system the interface can manage transfer of the data by notifying selected entities associated with the computing environment of an event relating to the data the task or both. The event can include one of a change in a data value a change in a data type a change in a dimension of the data receipt of the data by the interface transfer of the data from the interface to one of the computational engines or other like events.

In another embodiment of the system the interface can manage transfer of the data by providing data integrity. In other embodiments the interface performs other management operations and functions to manage distribution of data in the computing environment. In one embodiment of the system the computing environment is a distributed technical computing environment.

In one embodiment of the present invention a computer readable medium holding computer executable instructions for performing a method of transferring data from a first computational engine to a second computational engine in a distributed environment having a plurality of computational engines is disclosed. Execution of the instructions instructs an interface associated with a data repository to transfer to the second of the computational engines data associated with a task distributed from the first of the computational engines. The interface in turn transfers the data from the interface to the second of the computational engines.

Additionally execution of the instructions causes a computer to communicate with the interface to establish a communications channel with the data repository.

In one embodiment of the present invention instructing the interface invokes a method of the interface to perform a pre defined operation. In one instance the method performs the step of taking an action to notify an entity of receipt of the data by the interface. In another instance the method performs the step of taking an action to maintain integrity of the data. In still another instance the method performs the step of taking an action to update a data structure held by the data repository.

The step of taking an action to update the data structure held by the data repository includes the step of sending a query language command to a database management system managing the data structure. In another instance the step of taking an action to update the data structure held by the data repository includes the step of calling a function associated with the interface. The distributed environment can include a distributed technical computing environment.

The illustrative embodiment of the present invention provides programmatic control of an interface connecting computational devices in a distributed technical computing environment to data held by a data repository associated with the distributed technical computing environment. Programmatic control of the interface allows the distributed technical computing environment to improve management of distributed tasks and associated data. The interface provides the distributed technical computing environment with the capability of amongst other things notifying entities of the distributed technical computing environment when a predefined data event occurs with data associated with a task in the distributed technical computing environment. Consequently the interface improves the ability of a scheduler associated with the distributed technical computing environment to manage distribution of tasks and associated data amongst the computational devices of the distributed technical computing environment.

Moreover the illustrative embodiment of the present invention is configurable to work with a variety of data repositories such as a database a storage array and the like. It is not limited to a shared file system. Further the programmatic control of an interface connecting computational devices in a distributed technical computing environment to data held by a data repository associated with the distributed technical computing environment provided by the illustrative embodiment of the present invention is well suited to work with a number of different schedulers. For example schedulers such as LSF PBS HTC type schedulers such as Condor Microsoft Cluster Manager and the like.

The term task or tasks can be declared on a computational device in a distributed environment and defines a command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. A task can be directly distributed by the technical computing client to one or more technical computing workers. A technical computing worker performs technical computing on a task and may return a result to the technical computing client. Additionally a task or a group of tasks in a job can be submitted to an automatic task distribution mechanism to distribute the one or more tasks automatically to one or more technical computing workers providing technical computing services. The technical computing client does not need to specify or have knowledge of the technical computing workers in order for the task to be distributed to and computed by a technical computing worker. Tasks can be organized into jobs.

The term job refers to a logical unit of activities or tasks that are processed and or managed collectively such as a group of one or more tasks.

The term automatic task distribution mechanism or scheduler refers to a mechanism that can distribute tasks to technical computing workers that are anonymous to any technical computing clients. The technical computing workers perform the task and may return as a result the output data generated from the execution of the task. The result may be returned to a data repository which in turn the interface of the present invention may provide the result to the technical computing client.

As used herein the term data repository refers to a data structure suitable for holding data. Such suitable structures include but are not limited to a file system a database and associated database management system DBMS memory and the like.

As used herein the term pre defined data event or data event refers to an action occurrence or non occurrence to data of concern to a member or entity of the distributed technical computing environment and to an action occurrence or non occurrence to a task or job. Such actions occurrences or non occurrence can include but are not limited to a read operation to read the data from the data repository a write operation to write the data to the data repository a save operation to save the data to the data repository receipt of the data by an entity of the distributed technical computing environment forwarding or transmission of the data by entity of the distributed technical computing environment an operation performed on or with the data by an entity of the distributed technical computing environment reporting on the progress of a task or job and the like.

As used herein the term storage device refers to a server or other electronic device capable of storing data. The storage device can store the data in any type of memory on a magnetic disk or tape on an optical type disk or any combination thereof.

As used herein the term computational engine refers to a hardware device or multiple hardware devices capable of performing instructions in a defined manner. A computational engine or computational engines may be co located on a single hardware device such as a microprocessor or controller having multiple cores or multiple threads or may be configured as multiple hardware devices interconnected by a serial or parallel bus interconnection structure.

As used herein the term computational device refers to a system on which a computational engine or computational engines reside. A computational device can include one or more computational engines. The illustrative embodiment of the present invention is described solely for illustrative purposes relative to a distributed computing with MATLAB technical computing environment which includes Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine. Those skilled in the art will appreciate the Distributed Computing Toolbox for MATLAB and a client and client machine can be used to define and submit a task tasks job or jobs for execution and the MATLAB Distributed Computing Engine executes the task tasks job or jobs on a worker machine such as a technical computing worker. Although the illustrative embodiment of the present invention is described relative to a distributed computing with MATLAB based application one of ordinary skill in the art will appreciate that the present invention may be applied to distributing the processing of technical computing tasks with other technical computing environments such as technical computing environments using software products of LabView or MATRIXx from National Instruments Inc. or Mathematica from Wolfram Research Inc. or MathCAD of Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc. or Octave.

The memory may comprise a computer system memory or random access memory such as DRAM SRAM EDO RAM etc. The memory may comprise other types of memory as well or combinations thereof. A human user may interact with the client machine through a visual display device such as a computer monitor which may render a graphical user interface GUI . The client machine may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . The client machine may include other suitable conventional I O peripherals. The client machine may support any suitable installation medium a CD ROM floppy disks tape device USB device hard drive or any other device suitable for installing software programs such as Distributed computing with MATLAB . The client machine may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software and for storing application software programs such as Distributed computing with MATLAB of the present invention. Additionally the client machine may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the client machine may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one embodiment each of the client server and workstation are configured to and capable of running at least a portion of the Distributed computing with MATLAB . As a distributed software application Distributed computing with MATLAB has one or more software components that run on each of the client server and workstation respectively and work in communication and in collaboration with each other to meet the functionality of the overall application. For example the client may hold a graphical modeling environment that is capable of specifying block diagram models and technical computing tasks to analyze the model. The client may have software components configured to and capable of submitting the tasks to the server i.e. Distributed Computing Toolbox for MATLAB . The server may have software components configured to and capable of receiving the tasks submitted by the client and for determining a workstation to assign the task for technical computing. The workstation may hold software components capable of providing a technical computing environment to perform technical computing of the tasks assigned from the server and submitted by the client i.e. MATLAB Distributed Computing Engine . In summary the technical computing environment and software components of the Distributed computing with MATLAB application may be deployed across one or more different computing devices in various network topologies and configurations.

With an application programming interface and or programming language of the technical computing client functions can be defined representing a technical computing task to be executed by either a technical computing environment local to the client computer or remote on the workstation . The local technical computing environment may be part of the technical computing client or a technical computing worker running on the client computer . The programming language includes mechanisms described below in more detail to define a task to be distributed to a technical computing environment and to communicate the task to the technical computing worker on the workstation or alternatively on the client . For example the technical computing client may declare a function to generate a random set of ten numbers and further delegate that the technical computing worker running on the workstation execute the function. Also the application programming interface and programming language of the Distributed Computing Toolbox for MATLAB running on technical computing client includes mechanisms described in more detail below to receive a result from the execution of technical computing of the task from another technical computing environment. For example the technical computing client may declare a variable to hold a result returned from the technical computing worker performing technical computing of the random generation function or the technical computing client can identify one or more locations within a file system or database to hold the results returned from the technical computing worker .

The distributed functionality features of the programming languages of Distributed Computing Toolbox for MATLAB on the technical computing client allows the technical computing client to use the computing resources that may be available from a technical computing worker on the workstation to perform technical computing of the task. This frees up the technical computing client to perform other tasks or the client computer to execute other software applications.

The technical computing worker of the system can be a technical computing software application that provides a technical computing environment for performing technical computing of tasks such as those tasks defined or created by the technical computing client . The technical computing worker can be a MATLAB Distributed Computing Engine application module service software component or a session which includes support for technical computing of functions defined in the programming language of MATLAB . A session is an instance of a running technical computing worker by which a technical computing client can connect and access its functionality. The technical computing worker can include all the functionality and software components of the technical computing client or it can just include those software components it may need to perform technical computing of tasks it receives for execution. The technical computing worker may be configured to and capable of running any of the modules libraries or software components of the MATLAB product family. As such the technical computing worker may have all or a portion of the software components of MATLAB installed on the workstation or alternatively accessible on another system in the network . The technical computing worker has mechanisms described in detail later to receive a task distributed from the technical computing client . The technical computing worker is capable of performing technical computing of the task as if the technical computing client was performing the technical computing in its own technical computing environment. The technical computing worker also has mechanisms to return a result generated by the technical computing of the task to the technical computing client .

The technical computing worker can be available on an as needed basis to the technical computing client . When not performing technical computing of tasks from the technical computing client the workstation of the technical computing worker can be executing other software programs or the technical computing worker can perform technical computing of tasks from other technical computing clients. The multi tier distributed system includes a technical computing client running on a client computer in communications over a network communication channel to a server and to a storage device on a network . The server comprises an automatic task distribution mechanism . The storage device includes an interface and a file system a database management system and an associate database or both. The interface receives communications such as data and instructions from the technical computing client the automatic task distribution mechanism and the technical computing worker to connect each entity to the file system and the database management system . The technical computing client the automatic task distribution mechanism and the technical computing worker can communicate with the interface on a dedicated communication line or via network or network over the network communication channel . The interface can also send or forward communications such as data and instructions to the technical computing client the automatic task distribution mechanism and the technical computing worker to amongst other things connect each entity to the file system and the database management system .

The automatic task distribution mechanism communicates over a network communication channel on the network to the technical computing worker on the workstation .

The automatic task distribution mechanism comprises one or more software components to provide for the automatic distribution of tasks from the technical computing client to the technical computing worker . The automatic task distribution mechanism allows the technical computing client to delegate the management of task distribution to the automatic task distribution mechanism . For example with the programming language of Distributed Computing Toolbox for MATLAB a task can be defined and submitted to the automatic task distribution mechanism without specifying which technical computing worker is to perform the technical computing of the task. The technical computing client does not need to know the specifics of the technical computing worker .

The technical computing client can define a function to submit the task to the automatic task distribution mechanism and get a result of the task from the automatic task distribution mechanism . As such the automatic task distribution mechanism provides a level of indirection between the technical computing client and the technical computing worker .

The interface includes one or more software components to provide connectivity between the technical computing client the technical computing worker the automatic task distribution the file system and the database management system . The interface is able to monitor and manage the transfer of data associated with tasks between any or all of the technical computing client the technical computing worker and the storage device . The associated data can be a result or results from a task performed by the technical computing worker or data needed by the technical computing worker to complete a task requested by the technical computing client .

The interface can operate and perform tasks in a platform independent manner using the concept of a virtual machine to help avoid cross platform compatibility issues should the client be a first platform and the workstation a second platform different from the first. For example the client can be a Windows based platform and the workstation can be a UNIX based platform. Those skilled in the art will appreciate that other suitable platforms exist for example DOS based platform Solaris based platform Mac based platform Linux based platform and the like.

The platform independent nature of the interface allows the technical computing client the technical computing worker and if desired the automatic task distribution mechanism to access the file system and the database either directly or indirectly for example through the database management system regardless of cross platform compatibility issues that may exist between the various entities in the distributed technical computing environment . In one embodiment of the present invention the interface encodes access request statements in structured query language SQL and passes them to the database management system to perform a desired method. Such methods can include but are not limited to creating tables modifying tables reading data writing data comparing data to earlier data versions providing data integrity to ensure the entities of the distributed technical computing environment perform tasks in a manner to avoid the use of or creation of corrupted data and other like methods. In another embodiment of the present invention the interface abstracts file system dependencies associated with file system to provide data from the file system in a format understandable by the technical computing client or the technical computing worker . Further the technical computing client and the technical computing worker are each able to interact with the file system and the database with API calls to the interface .

The interface can include a registry to allow entities of the distributed technical computing environment to register with the interface to receive notice of an occurrence of one or more pre defined data events. Such pre defined data events include but are not limited to receipt of data at the interface from the technical computing client receipt of data at interface from the technical computing worker transmission of data from the interface to the technical computing worker transmission of data from the interface to the technical computing client notice that one or more values in a data structure have changed notice that the interface did not receive data from the technical computing client notice that the interface did not receive data from the technical computing worker notice that the interface received incomprehensible data from the technical computing worker for example data of a wrong data type format length and the like notice that the interface received incomprehensible data from the technical computing client notice that the file system or the database is nearing storage capacity and the like.

Entities of the distributed technical computing environment can include but are not limited to the technical computing client the automatic task distribution mechanism and the technical computing worker . Further entities can be software based or hardware based. The interface eases the distributed programming and integration burden on the distributed technical computing environment . The interface allows the automatic task distribution mechanism to improve its ability of monitoring managing and distributing tasks among the computational devices of the distributed technical computing environment . Typically the tasks distributed by the automatic task distribution mechanism identify a location in either the file system or the database of the data needed to perform the task or the location to place a result of the task. The automatic task distribution mechanism manages distribution of tasks but does not manage and monitor the distribution of data associated with the tasks. As such with the addition of the interface the automatic task distribution mechanism can register with the registry to help determine when tasks are complete and help determine which tasks are still being performed in an effort to improve load balancing of tasks among the various computational devices performing in the distributed technical computing environment .

Further the interface in combination with the automatic task distribution mechanism eases the distributed programming and integration burden on the technical computing client . The technical computing client does not need to have prior knowledge of the availability of the technical computing worker . For multiple task submissions from the technical computing client the automatic task distribution mechanism can manage and handle the delegations of the tasks to the same technical computing worker or to other technical computing workers and the storage device can hold the results of the tasks on behalf of the technical computing client for retrieval after the completion of technical computing of all the distributed tasks.

Referring now to an exemplary embodiment of the present invention is shown with multiple technical computing workers A N hosted on a plurality of workstations A N. The technical computing client may be in communication through the network communication channel on the network with one some or all of the technical computing workers A N. In a similar manner the interface and the automatic task distribution mechanism may be in communication through the network communication channel on the network with one some or all of the technical computing workers A N. As such the technical computing client the interface and the automatic task distribution mechanism can distribute tasks and associated data to multiple technical computing workers A N to scale the distributed system and decrease computation time of tasks. As also shown in the technical computing workers A B can be hosted on the same workstation A or a single technical computing worker C can have a dedicated workstation B. Alternatively one or more of the technical computing workers A N can be hosted on either the client or the server .

The client machines depicted in can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Solaris Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Furthermore the software components of Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine can be capable of and configured to operate on the operating system that may be running on any of the client or worker machines respectively e.g. .

Additionally each of the client the server and the workstation can be running the same or different operating systems. For example the client can be running Microsoft Windows the server can be running a version of UNIX and the workstation a version of Linux. Alternatively each of the client the server and the workstation can be running Microsoft Windows. Additionally the software components of Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine can be capable of and configured to operate on and take advantage of different processors of any of the client or worker machines respectively e.g. . For example Distributed Computing Toolbox for MATLAB or MATLAB Distributed Computing Engine can run on a 32 bit processor of one computing device and a 64 bit processor of another computing device . In a distributed system such as the system depicted in Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine can operate on client or worker machines respectively that can be running on different processor architectures in addition to different operating systems. One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the client or worker machines and .

As such the interface is configurable as an object oriented interface that can provide or be programmed to define a set of object oriented classes that allow a programmer to configure the interface to translate the request of the technical computing client and the technical computing worker into commands understandable by the database management system or the file system . Alternatively the set of object oriented classes provided by the interface or defined by a programmer allow the programmer to generate source code executable by an interpreter.

Although the present invention is discussed above in terms of distributing data and software components of Distributed Computing Toolbox for MATLAB and MATLAB Distributed Computing Engine across the computing devices of a client server and workstation any other system and or deployment architecture that combines and or distributes one or more of the technical computing client automatic task distribution mechanism and technical computing worker across any other computing devices and operating systems available in the network may be used. Alternatively all the software components of Distributed Computing Toolbox for MATLAB can run on a single client machine such as the client server or the workstation .

Those skilled in the art will appreciate the distribution of tasks and associated data among the computing devices forming the distributed computing environment can occur in a number of suitable manners. One suitable methodology is referred to as a direct distribution mode which is intended for those users who desire a high level of control over which technical computing worker executes a particular task. Another suitable manner to distribute tasks and associated data among the computational devices of the distributed technical computing environment is often referred to as an automatic distribution mode. The automatic distribution mode provides a configuration and methodology suitable for use by a user that does not want to control which computational device of the distributed technical computing environment executes a particular task. Another suitable manner for distributing data and associated tasks is known as a batch mode or automated distribution. The batch mode or automated distribution allows the automatic distribution mechanism to be configured to allow a user to specify a group of related tasks as a job and to provide the batch of tasks or the job to the automatic task distribution mechanism . Those skilled in the art will also appreciate that whichever task distribution mode is selected in the distributed technical computing environment the interface connects the technical computing client and the technical computing worker to the file system and the database to manage distribution of data associated with the distributed tasks.

Referring now to an illustrative flow chart depicts steps taken by one embodiment of the present invention to distribute a task from a technical computing client to a technical computing worker in a distributed technical computing environment. A technical computing worker registers to receive notification of one or more tasks step becoming available or appearing in the automatic task distribution mechanism . In turn the automatic task distribution mechanism registers the technical computing worker as an available worker step . The technical computing client defines a task comprising an operation for technical computing step . The technical computing client then submits the task to the automatic task distribution mechanism step . The automatic task distribution mechanism receives the task and makes the task available for distribution to a technical computing worker step .

The technical computing client registers with the registry of the interface for notification of desired data events step . Such data events can include but are not limited to a change in a value of data held at a specified location in the file system or the database receipt of a request from a technical computing worker to retrieve data receipt of a request from a technical computing worker to store data and the like in this manner the technical computing client is better able to track and if desired predict the progress and stage of a job or task. Other data events which the technical computing client can register for include but are not limited to notification of an occurrence of a time out in communications between the interface and a technical computing worker the receipt by interface of corrupted data from the technical computing worker notification from the interface that certain data is inaccessible because another technical computing worker or another technical computing client is using or is intending to use the data and the like. Other data events can indicate the interface is in receipt of a request from a technical computing client to register with the registry for notification of certain data events. In turn the interface registers the technical computing client with the registry step . Those skilled in the art will appreciate that the technical computing client can register with the interface before a task is defined or at any time thereafter. Further those skilled in the art will appreciate that the registry can be physically or logically located outside the interface .

Likewise the automatic task distribution mechanism can register with the interface for notification of certain data events step . The data events of concern to the automatic task distribution mechanism include but are not limited to those data events discussed above in relation to step . The interface in turn registers the task distribution mechanism for notification of the certain pre defined data events step . Those skilled in the art will appreciate the automatic task distribution mechanism can register with the interface at any time after initialization of the distributed technical computing environment. Additionally those skilled in the art will appreciate the automatic task distribution mechanism to register with the interface on a per task or per job basis and can register for a one time occurrence of a task or a job or register in a manner that carries over to each current task or current job associated with the data of concern.

The automatic task distribution mechanism provides the task to the technical computing worker step . In turn the technical computing worker receives the task from the automatic task distribution mechanism step . The technical computing worker examines or interrogates the received task to determine what if any data is required for the technical computing worker to perform the received task. Upon determining the data necessary to perform the received task the technical computing worker requests the interface to provide the necessary data step . The interface upon receipt of the request from the technical computing worker step retrieves the requested data from either the file system or the database by invoking a method or calling a function identified in the request. The method or function can encode access request statements identified by the request into a format understandable by the file system or the database management system step . Once the requested data is retrieved the interface forwards the requested data to the technical computing worker step . The technical computing worker in turn receives the requested data step . At this point the interface can take an action to notify those entities registered with the registry to receive notification of a data request from the technical computing worker or to receive notification of the forwarding of the requested data to the technical computing worker and other like data events associated with receipt of a request for data from a technical computing worker taking steps to retrieve the requested data and forwarding the requested data to the requestor step . The registered entities include any entity of the distributed technical computing environment including but not limited to software components hardware components the technical computing client the automatic task distribution mechanism the technical computing worker and the like.

The technical computing worker can request the interface to retrieve or perform another operation on the desired data in a number of suitable manners. One suitable example for the technical computing worker to request the interface to retrieve or perform another operation on the desired data is through a remote method invocation RMI that include one or more objects passed along with the request that include information for retrieving the desired data. The information included in the one or more objects can include a method with statements to send or construct structured query language SQL statements to the database management system . Another suitable method for the technical computing worker to request the interface to retrieve the desired data is through a remote procedure called RPC . Another suitable method for the technical computing worker to request the interface to retrieve or perform another operation with the desired data is via a function call to a function associated with the interface . Those skilled in the art will appreciate that other entities of the distributed technical computing environment for example the technical computing client and the automatic task distribution mechanism can communicate with the interface in any of the just described manners.

The technical computing worker performs the requested technical computing on the function or command as defined by the task step . In performing the technical computing on the task an associated result is likely generated step . Those skilled in the art will appreciate that in some instances either no result is generated or the result is not required to be returned to the technical computing client .

After generating the result from computing the task the technical computing worker forwards data associated with the task or the result of the task or both to the interface with a request to store the data or perform some other operation on the data in either the file system or the database step . The interface receives the data and the request from the technical computing worker step . If configured to do so the interface performs data validation on the received data to at least validate the data has a proper format and is comprehensible step . That is the interface can be configured to interrogate the received data to determine which values changed since forwarding the data to the technical computing worker and to further determine if the data received from the technical computing worker conforms to the requirement specified for that data. For example the interface can determine if the data is the appropriate data type is of the appropriate length and the like. If the interface determines the data is valid step the interface stores the data in either the file system or the database at the appropriate storage location step . If the interface determines the data is not valid for example the data is considered corrupted because it does not conform to a pre defined format for the data step the interface can notify entities registered with the registry to receive notification if such a data event occurs step . Those skilled in the art will appreciate that the interface can perform other data validation operations such as verification of a checksum or a CRC and other like data validation operations.

After generating the result from computing the task the technical computing worker provides the result to the automatic task distribution mechanism step . After obtaining the result from the technical computing worker step the automatic task distribution mechanism can hold the result until the interface validates the data step . As such the automatic task distribution mechanism is configurable to hold the result until the interface validates the data. If the automatic task distribution mechanism is configured in this manner it holds the result until notified by the interface the data is valid step . Otherwise the automatic task distribution mechanism provides the result to the technical computing client step . The technical computing client receives the result provided by the automatic task distribution mechanism step .

The technical computing client requests the interface to retrieve the data associated with the results from either the file system or the database step . The interface receives the request step and in response retrieves the requested data step . The interface after retrieving the requested data forwards the data to the technical computing client step and the technical computing client in turn receives the requested data step .

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. For example the present invention is well suited for use with any scheduler or job manager including but not limited to schedulers such as LSF PBS HTC type schedulers such as Condor Microsoft Cluster Manager and the like Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

