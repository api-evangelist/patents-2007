---

title: System and method for providing information tagging in a networked system
abstract: A computer-implemented system and method for providing information tagging in a networked system is disclosed. The apparatus in an example embodiment includes a tag engine configured to process a database of categorized product listings; to receive a user-provided tag associated with at least one of the product listings; to retain the user-provided tag; and to serve the user-provided tag to a user viewing at least one of the product listings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09324082&OS=09324082&RS=09324082
owner: eBay Inc.
number: 09324082
owner_city: San Jose
owner_country: US
publication_date: 20071226
---
This non provisional patent application claims the benefit of the filing date of U.S. Provisional Patent Application Ser. No. 60 948 253 filed Jul. 6 2007 and entitled INFORMATION TAGGING SYSTEM the content of which is incorporated by reference herein.

This non provisional patent application claims the benefit of the filing date of U.S. Provisional Patent Application Ser. No. 60 952 729 filed Jul. 30 2007 and entitled IMPROVING ACCURACIES OF CORRELATIONS PROVIDED IN AN ELECTRONIC PUBLICATION SYSTEM the content of which is incorporated by reference herein.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document Copyright 2006 2007 eBay Inc. All Rights Reserved.

This disclosure relates to methods and systems supporting online searching and transactions. More particularly the present disclosure relates to providing information tagging in a networked system.

Electronic shopping systems currently exist which permit merchants to sell inventory to consumers over a computer network. Merchants now use computers to publish information about their products on one or more electronic pages e.g. text and graphics displayable on a computer screen and to elicit product orders from consumers. Likewise consumers use computers to access information describing products and to communicate orders to a merchant.

With the increasing popularity and accessibility of the Internet and particularly the World Wide Web the number of merchants using and desiring to use the World Wide Web to advertise and sell products is growing rapidly. The World Wide Web is a global information system in which information is exchanged over the Internet using a set of standard protocols. An existing Web based electronic store typically comprises a collection of Web pages which describe inventory and which include on line forms allowing consumers to place orders or bids. Consumers use Web browsers to access the Web pages of electronic stores to examine information about available products and to submit product orders.

Merchants attempt to accurately describe their products or services in listings so the listings will be found by a high percentage of potential buyers who may be searching for similar products using network search engines. However sellers often do not describe their offerings in a manner that maximizes their exposure to a large number of buyers. Further on line searching can be complicated by the large number of sellers large number of product service offerings and the rapidly changing e commerce marketplace.

U.S. Pat. No. 6 484 149 describes a system and method for designing and operating an electronic store to 1 permit a merchant to organize and advertise descriptions of product inventory over the Internet 2 permit Web page information to be extracted on demand from a product inventory database and 3 permit Web pages to be automatically customized to fit shopping behaviors of individual consumers. A graphical store design user interface of a Web browser displays a hierarchical representation of products and product groups of an electronic store. A user manipulates icons of the Web browser store design user interface to cause a Web server to modify relationships between products and product groups stored in a product information database. A store designer creates HTML template files embeds database and customize references within the template files and assigns template files to groups or products of the electronic store.

U.S. Pat. No. 6 038 668 describes a networked catalog search retrieval and information correlation and matching system. The system allows suppliers to publish information in electronic catalogs structure the information in an object oriented representation distributed across a network of computers for example the Internet. The system also enables customers to search and retrieve information on products and suppliers which match dynamically specified customer requirements. Through retrieving compliant HTML pages a search engine forwards retrieved pages to an object oriented database which sorts received information by the information s internal organization structure. By searching the information as stored in the knowledge base a user may quickly retrieve the stored information as highly tailored to the user s search strategy.

Thus a computer implemented system and method for providing information tagging in a networked system is needed.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of some example embodiments. It will be evident however to one of ordinary skill in the art that the present invention may be practiced without these specific details.

As described further below according to various example embodiments of the disclosed subject matter described and claimed herein there is provided a computer implemented system and method for providing information tagging in a networked system. The example system includes an information tagging generator to obtain user input and to generate information tags based on the user information. Various embodiments are described below in connection with the figures provided herein.

Seller Tagging according to an example embodiment provides a method for recommending name value pairs e.g. tags for publications e.g. listings across all categories on a host site . An example seller tagging system may provide both scalability and responsiveness. The seller tagging infrastructure achieves this by creating a machine learning system that is trained and tuned by data collected from both sellers and buyers.

 Seller Tags may in an example embodiment constitute name value pairs of item attributes that sellers can use to describe their listings. The new tag system may allow a community to determine what tags may be used as well as providing a basis for recommending tags to subsequent sellers. The community data may be used by a machine learning system to auto tag listings with tag information.

Using the functionality described in the various embodiments provided herein community members users can tag i.e. classify with a keyword or phrase an object e.g. an item or listing on a host site. For example a seller can tag an item s he is offering for sale as vase Fenton or vintage item. Someone viewing the item at the host site can add the tag of for example red . Other users can similarly add tags to further describe or classify the item on the host site as offered by the seller. In this manner an object can be associated with a plurality of tags provided by a plurality of users. The tags provided by the community members users can be public or private tags. A public tag is visible to any community members user. A private tag is visible only to the tag creator or someone authorized by the tag creator to view the private tag. Private tags can be used to create lists e.g. wish lists . Additionally private tags can be created by a user for an authorized audience e.g. friends fans subscribers to a favorite seller list or items found by a personal shopper for a client .

Tags may be defined independently by sellers community members or may be provided as recommendations. Tags may also be inferred by a publication or host system e.g. eBay and written to items in the background. Sellers may have the ability to choose from existing tag names and values or create new names and values. In a particular embodiment tags may also be implemented with several additional features as defined below 

Each tag may be stored with associated information denoted as tag metadata. The metadata associated with each tag may include descriptors for the name and or the value of the tag. The various tag descriptor metadata in a particular embodiment includes the following 

Referring to within the seller tag namespace of a particular embodiment we can define a concept of the full set of tags names and values and a subset of the set of tags names and values which may be referred to as the Graduated Tag namespace. It is this set of tags that may be leveraged for recommendations indexing and in subsequent phases navigation. In order to steer convergence towards good tags we may create a graduated tag namespace . This pool of tags may be a subset of the full tag namespace and used for making recommendations to sellers as well as deciding which tags may be indexed as keywords. When tags become available to navigation only graduated tags may be available for navigation.

Graduation and demotion of tags may be performed as an offline process where it is decided which tags may be included and excluded from the graduated set. This process is where supply and demand data are leveraged for the purpose of updating the graduated set. In a particular embodiment the offline process may be run once a day. The high level operations performed during this process in a particular embodiment are as follows 

Supply and demand data are valuable sources of information as we decide which tags may be graduated and demoted. Supply data may be gathered by looking at occurrences of a given name or value over all listings within a given category. By doing this we are able to mitigate spam or irrelevant tags. Demand data may be addressed by looking at successfully completed listings only. Looking at successfully completed listings only may provide some measure that the information on the item was of good quality and not misleading thereby helping us to mitigate spam or irrelevant tags.

In order to identify which tags qualify for graduation we may in an example embodiment look at the following data elements 

These elements may enable us to identify if a given name or value meets the graduation threshold. Depending on whether or not a given tag meets the graduation threshold the tag may be eligible for no action graduation or demotion. In a particular embodiment the graduation threshold may be based on the following two variables 

These variables among others used in alternative embodiments provide information related to the ubiquity of a particular tag and the degree to which users have used the tags. This information can be used to weed out unpopular or unhelpful tags from the graduated set. Configuration of the threshold may be global and not category specific. An example illustrating the graduation threshold is provided below. For this example assume there may be 100 total listings in a product category called Widget . As part of this category there may be several values for the example Brand tag as set forth below.

Statistical analysis techniques may be used to process the data as in the example above. Using these techniques we can determine that most of the item counts and popularity scores for the data samples cluster between 10 and 20. In the example above we may define our threshold popularity score of 8 or higher AND a minimum item count of 12. Based on this example threshold the tag values of Foo and Zap only may be eligible for graduation. Tag value Howza would have met the popularity score threshold but not the minimum item count threshold. As such this tag may not be eligible for either a graduation or demotion action. Tag value Gazz would not have met either of the thresholds and therefore may be subject to demotion. Exact configuration of the graduation threshold may take place within the tag engine described in more detail below.

Once we have identified which names and values meet our graduation threshold we make updates to the graduated set by performing the following actions 

Referring now to the tag engine in an example embodiment includes a naive Bayes classifier as part of tag generator . A naive Bayes classifier is a conventional probabilistic classifier based on applying the well known Bayes theorem with strong naive independence assumptions. Depending on the precise nature of the probability model naive Bayes classifiers can be trained very efficiently in a supervised learning setting. In many practical applications parameter estimation for naive Bayes models uses the method of maximum likelihood in other words one can work with the naive Bayes model without believing in Bayesian probability or using any Bayesian methods. The particular application of this technique is used to classify tags as described herein. In a particular embodiment given a set of training data items together with their tags a probabilistic model can be formed that may allow us to make correlations between items and tags. As more data is made available to the system the classifier becomes more effective and the recommendations produced by the classifier become better.

Each of these components of the tag engine of a particular embodiment are described in more detail below.

The tag generator in an example embodiment includes a correlation engine or classifier that implements a process during which name value pairs may become associated with keywords . The keywords may be entered by users of a host system during product service searches or purchase bidding transactions. Portions of the name value pairs can be matched with portions of the keywords or keyword strings. In this manner the correlation engine of the tag generator of a particular embodiment can derive probabilistic matches. The training data used to train the correlation engine may be data similar to the examples described above in relation to graduation. We may leverage successfully completed listings representing demand data as well as counts of names and values on all listings supply data . Once we have this data the system may use statistical correlation to make recommendations for relevant names and values. An example of the processing performed by the correlation engine of the tag generator is illustrated in . As shown in a set of training data with items and associated tags e.g. brand color model and capacity can be used to form corresponding recommendations associated with a new item e.g. Black iPod . The tag generator can use the training data to recommend various tags for the new item based on correlations between the new item title and the training data.

As the model is built by the tag generator the system may also associate a confidence factor with each recommendation the tag generator makes. In the example illustrated in and described above it is likely that black and iPod of the new item may be very confident recommendations because we see a direct correlation of a keyword in the title to an existing value in the training data. The confidence factors for apple and 30 GB would likely be lower because it is a less direct correlation.

As a particular implementation of the tag generator receives more data these correlations grow stronger as they are reinforced by additional listings or weaker if the correlation is not repeated with other listings. Additionally our ability to make confident correlations in what appear to be distant name value pairs may increase as the training set of data grows.

The tag interface of the tag engine in an example embodiment may serve as the interface for all aspects of tag recommendations and normalization outputs produced by the tag engine . These outputs may include the following 

The inputs to the tag engine in an example embodiment can include the following items of information 

In order to provide guidance to sellers regarding which names and values might be most helpful given a listing in a particular category the tag engine can support returning names and values for a given category in a priority order. These names may be returned from the graduated set only.

Because much of a host infrastructure is typically embedded in product service categories product service categories can be used as a reference for names and values. However product service categories may not necessarily be the primary association of a group of listings used to derive recommendations. Our first association of a group of listings used to derive recommendations for the tag engine may be at the domain level. This may be useful to ensure normalization across categories within a domain. An example of this is provided below. In the example below we assume we have two cell phone categories within the cell phone domain. These categories can be 

The example product service categories shown above may not necessarily be the primary association of a group of listings used to derive recommendations.

As described above the tag engine can support returning names and values for a given category in a priority order. In a particular embodiment the tag engine may set priority for listing tag names as follows 

The tag engine may take any combination of the data elements below as inputs for suggesting tags. Typically the more inputs provided to the tag engine the better the recommendations may be.

Because of the frequency and functionality required for getting names and more importantly values lookup tables may be created for this use. As the offline process is run to identify the most current graduated set of tags lookup tables for tag names and values by category domain may also be created. These tables may be leveraged in real time in Sell Your Item SYI seller interface interactions as sellers are typing in names and values. The lookup tables may enable us to provide auto complete functionality to aid sellers converging on common language to describe their items. For a name lookup and given a category identifier names may be returned in priority order and lookup tables to search against may be provided. For a value lookup and given a tag name values may be returned in priority order and lookup tables to search against may be provided.

In some cases the tag engine may only be provided with a category. In these cases the tag engine may return top tag names with top values for each name. The number of names and values may be an input to the application programming interface API and can be configured by the client.

The tag engine may in an example embodiment provide recommendations on names and values for any given listing. This functionality may also allow us to auto tag listings with name value pairs. The way the tag engine goes about creating category specific recommendations is described above. Below we may describe how the results are formulated into usable data for SYI and API interfaces. As explained above SYI and API interfaces are a user web interface Sell Your Item SYI and an application programming interface API for accessing and using a host database of product service information. The inputs from SYI API interfaces may include the following data items 

When prompted for top names by the SYI interface the tag engine may return the top tag names in priority order as described above. When prompted for item level recommendations by SYI interface the tag engine may return up to a pre determined limit e.g. 15 of tags as follows 

When prompted for an item level recommendation by the external API e.g. GetItemRecommendations the tag engine may return up to a pre determined number e.g. 15 of tags as follows 

The tag engine may provide the SYI interface functionality to perform a spell check and provide suggestions to the user as they enter new tag names or values. A conventional spell checker may be leveraged by the tag engine for this purpose. The SYI interface may make a generic normalization call to the tag engine any time a name or value is entered that does not exist in the graduated set of names values. The tag engine may check the string for both spelling and Units of Measure UOM suggestions. If a suggestion exists the tag engine may return the value along with the type of suggestion spelling or UOM .

The interaction with the SYI interface for UOM normalization may work in concert with spell checks and in the manner described above. In order to drive further normalization the most popular among matching normalized values may be identified for display within recommendations. This may be accomplished by looking up by normalized lowercased stripped of some punctuation name in a database of lookup tables and returning the most popular w highest item count display name value associated w the normalized input query.

This normalization is very helpful because we may treat all of these values as a single entity thereby not diluting recommendations. Additionally this may help with navigation as we would not see the various values in navigation. We store the most popular display in this case 

This version may be used in all future recommendations as well be available for display in navigation.

In a particular embodiment the SYI interface interacts with the tag engine using four different types of calls. These SYI tag engine interface calls are listed below 

Because of the use of the item title to make tag recommendations on the page we may update the tag data when the user moves focus out of the title field. As focus leaves title we may provide a visual cue that the tag section is being updated. The inside of the item specifics box may have a semi transparent grey overlay with the loading animated image in the center. An example of the user interface for providing item specifics is illustrated in .

In order to accommodate cases where a seller may enter tags prior to the title or return to edit the title after editing tags we may keep track of activity in the tag interface section as follows 

Tags may be ordered in any manner. In a particular embodiment the top two tags may retain their placement within the interface. The only reason a top two tags would not continue in their location is if the user explicitly removed that tag. Subsequent tags may be ordered with user selected or edited first and additional new tags returned from the tag engine .

In the case where a seller selects to edit the category we may not retain any tag data. After selecting a new category and returning to the Describe Your Item DYI page we may call the tag engine again to get new tag data. From this point all interaction may mirror that of a seller accessing the page from a first pass. If a seller is changing from a category that does not have seller tagging enabled to a category that does have tagging enabled we may call the tag engine as the seller returns to the page. A seller is warned that after they change their category and land on the Describe Your Item DYI page that the resulting change could have affects on their item specifics. An example of this warning message is shown in . The same language as used for attributes may apply as both attributes and tags are referred to as item specifics. This behavior is consistent with how item specifics are treated.

In a particular embodiment a tag interface provides a process by which a user may enter information that describes a product offered for sale and in so doing provides tag information. In a particular embodiment we may modify the order of some sections on the Describe Your Item DYI page. This ordering may apply to versions of the Sell Your Item SYI page with and without seller tagging including attribute enabled categories The order may be as shown in the example user interfaces shown in and summarized below.

In a particular embodiment there are four different sections within the tag interface area as shown in . illustrates an Attribute section. Even though we are targeting seller tagging at categories that are not attribute enabled we may need to make some considerations for categories that have either a global attribute or an attribute such as condition shown. If seller tagging is enabled when there are attributes in the category the attributes may display within the tag section but above all tags. also illustrates a Top Section . This section is where tag names and values are returned. also illustrates a Custom Tag Entry element. This element appears when the seller selects enter a custom detail within the suggested tags section. Additional suggested tag names are shown in the Suggested Tags section as shown in . In the case where the tag engine does not return any names or name value pairs the interface may display an appropriate message informing the user of such. In the case that the tag engine does not return any names or name value pairs but there are attributes for a given category the interface may display an appropriate message informing the user of such. In the case where the tag engine does not have enough recommendations to populate any in the suggested section the interface may display an appropriate message informing the user of such. In the case where the tag engine does not return enough recommendations to fill the suggested section the interface may display an appropriate message informing the user of such. If the tag engine returns a full set of recommendations the display may be as shown in .

Within the SYI interface as well as listings submitted via the API or seller tools we may perform various forms of listing validation. The maximum number of seller confirmed tags that may be written on an item is a pre defined maximum e.g. 15 . This number may be configurable to provide the ability to raise or lower it. In order to enforce this maximum number as soon as 15 tags are inserted into the top section of the interface we may remove the link to add another custom tag and insert a message to the user notifying them of the limit. We may enforce a maximum character count for both names and values for submitted tags. Within the SYI interface this may be enforced by not allowing the user to enter more than the character limit. These limits may be configurable so that they can be raised or lowered at a later date. Users may not be permitted to enter the same tag name more than once. If a seller attempts to enter the same tag name more than once they may be presented with an error message. Users may be restricted from entering profanity or blacklist words in tag fields in the same manner as title and description.

If sellers choose to revise their item and the item is in a non restricted state they may revise tags in the same circumstances that they may revise attributes. If the item is in semi restricted state less then 12 hours left in the listing of a bid or has been purchased the tag interface may be read only. When revise item is selected we may not update recommendations or tags within the tag interface. We may however update tag data including top 10 values per tag as well as suggested tags. If the seller selects to edit the title we may follow the same behavior as SYI and update the tags listed below that were not populated with a value by the seller. Additionally if the seller begins to edit tags we may make real time calls to the tag engine as done at time of initial listing. Upon completion of revising the item it may be re indexed and undergo final classification.

The view item page may be modified to show the seller tags. These may be displayed in a manner similar to the item specifics. Tags may be displayed in the order received from the seller. If attributes exist alongside tags on a given listing attributes may be displayed first. If a tag does not have a value the name may not appear. With attributes if a seller doesn t choose to fill in an attribute the name still appears but the value appears as . If the listing is in a single category which has both attributes and seller tags the name of the attributes domain may be suppressed in the attributes box. An example of a view item page with associated seller tags is shown in .

One example embodiment may provide light editorial control of the seller tag space. The editorial control option can influence the tag engine rather than explicitly defining tags and their display. In this example embodiment the community wisdom of the masses may normalize and converge on a common hierarchy and we may only be providing input to guide that convergence. A View Tag Names function may be created and anchored off of the domain and category explorers. Once the user has selected a domain or category to view all tag names for that domain may be returned. Tags may be ordered by priority as defined by the tag engine . The tag list may have the following columns Tag name Item count Graduated categories and Un graduated categories. When viewing the tags a user may be able to rate any given tag with a Thumbs Up or Thumbs Down selection. The result of giving a thumbs up down selection are as follows. For a Thumbs Up selection the tag name is moved to a top of priority list position for the next pre defined number e.g. 14 days. After the predefined number of days the tag may no longer be forced to the top of the list but may likely be included in the graduated set on its own merit because it has been recommended to the sellers for 14 days. If multiple tag names in a given domain are given a thumbs up selection the secondary sort may be by count and the last sort may be alphabetical. For a Thumbs Down selection the tag name is removed from the graduated set for the next pre defined number e.g. 14 of days.

There may be some cases where early in the life of tag data for a particular domain we may want to manually add a tag name to the graduated set. This could be done if we want to get people to converge on using a synonym for an already graduated set. It may also be done when we have little or no data for a given domain category. In this circumstance we may manually provide a few tags so that the first one of the sellers experience with the tag interface is not completely empty.

In a particular embodiment functionality for entering a tag may be as follows. A user may select a domain and choose to manually enter a tag name. The user can be someone other than the seller or a host site representative. A user allowed to enter or modify a tag can be anyone in the community of users who use the host site. Upon adding the tag the tag name may be treated in the same way as if it already existed and was given a thumbs up selection by other users. This means the new user entered tag name may be placed at the top of the list and included in the graduated set for the next pre defined number e.g. 14 days. After 14 days the tag may either remain in the graduated set by its own merit or be removed from the graduated set.

In a particular embodiment functionality for modifying a tag may be as follows. A user may select a domain and choose an existing tag name. The user can be someone other than the seller or a host site representative. A user allowed to enter or modify a tag can be anyone in the community of users who use the host site. Upon selecting the tag the user can modify the tag as s he wishes. Then the modified tag name may be treated in the same way as if it already existed and was given a thumbs up selection by other users. This means the user modified tag name may be placed at the top of the list and included in the graduated set for the next pre defined number e.g. 14 of days. After 14 days the modified tag may either remain in the graduated set by its own merit or be removed from the graduated set.

An embodiment may provide the ability to publish tags independently of publishing a domain. This may allow for users to make tag changes and not publish the domain and vice versa. After making a tag change a tag publish operation may be required for the change to be pushed live. Tag changes and publishes may be tracked by user. Changes made in a category or domain may not be mapped to the corresponding domain categories until the offline graduation process occurs. Once a change is published it may be picked up by the offline graduation process within the next 24 hours.

An embodiment may provide the service of category to domain mapping for the tag engine . This may allow the tag engine to store tags in a domain centric way while still retaining category driven weighting. Seller tagging data may be downloaded via the standard update process. If the user has already selected categories that s he wants to download the item specifics i.e. tags for the selected categories may be downloaded for the categories manually selected by the user. It may download the graduated set of tags for each category selected. A lookup for the categories the user has listed items templates in may not be performed. If sellers choose to revise their item they may revise tags in the same circumstances that they may revise attributes. When revise item is selected recommendations or tags within the tag interface may or may not be updated. However tag data including top 10 values per tag as well as suggested tags may be updated. If the seller selects to edit the title the same behavior as Create Item may be followed and the tags listed below that were not populated with a value by the seller might be updated. Additionally if the seller begins to edit tags real time calls online mode only to the tag engine might be made as done at time of initial listing. Upon completion of revising the item it may be re indexed and undergo final classification as in the Revise Your Item RYI interface.

Seller tags may be available via a template generator. Files may include information messages related to Seller tags. The Template generator may add a new column for each tag name with the pre fix of T similar to the header of attributes. For example T TagName1 T TagName2 . . . . For each tag name an information message may be added to display the recommend values for the tag. For example 

In a particular embodiment an application programming API interface provides access to tags for particular items. A description of a few of the related API calls is provided below.

This API call provides a tag recommendation portion of the call that may be called independently of other recommendation functions in the call. A user passes in a listing via the call and the API returns recommended tags names and values for that listing. A tag may be a name value pair and may be returned complete with name value or partial name only . The call may accept either a listing that has not yet been created listed on the host site a partial listing template or an existing listing. Existing listings may be able to be referenced by an Item identifier ID .

The tag engine may take any combination of the data elements listed below as inputs in suggesting tags. The more inputs provided to the tag engine the better the recommendations may be. Sellers may pass an entire listing to get tag recommendations back from the tag engine . Inputs to be used for the tag engine include the seller category ID and the Item title. Seller authored tags and product IDs may be additional inputs. Outputs produced by the tag engine include tags returned in priority order by the tag engine . Tags may be returned to the GetItemRecommendation API in a similar manner in which they are returned to SYI interface. Up to a pre determined limit e.g. 10 tags as determined by the tag engine may be returned to the API. Tags may be returned in priority order. An example of the GetItemRecommendation API is provided below.

This API call provides functionality to add an item. The add item family of calls may accept tags. Tags may be contained within one multi value field. Tags may be supplied as text strings in name value format. As with SYI interface listings sent through the AddItem calls may be eligible to list in two categories. The result is that there might be listings with two tag enabled categories 1 tag enabled and 1 attribute enabled etc. At a high level the current conventions may be followed with the following rules for tag enabled categories A given item may have only one set of tags stored on it. This means there may be only one field for tags per listing in the API. A given listing could have attributes and tags if there was a category selected for each.

This API call provides functionality to get an item. The GetItem call may return tags when tags have been supplied by the seller or another user. Confirmed tags may be returned as those are the ones visible on the View Item page. The format of tags returned in GetItem may match that of tags supplied in AddItem calls.

This call provides functionality so that a seller developer or other user may find out what the most relevant tags and values are for a given category. By providing this information we may provide guidance to sellers and users on what may be included in their system as well as help to converge on the language by which sellers describe their items. Unlike the current attribute system there may not be versioning of this new system. Because it is a living breathing hierarchy powered by community data the tag data may be changing on a regular basis. System updates may happen on a daily basis. This means that sellers may have to identify the right timeframe to get regular updates to the data. Inputs to be used for the tag engine include Category ID Timestamp or version Category IDs optional and Title optional . Outputs produced by the tag engine include up to 30 top tag names tag engine may not supply 30 if there are less than 30 graduated tags for a given category and up to 30 top tag values per name. The number of names and values included in the output may be configurable. An example of the GetTagsByCategory API is provided below.

This call may be used to get a full list of values for the name provided. This may be a Public API call. An example of the API call is provided below.

Selected tag values may be indexed into their own namespace and made available to keyword search. Tag indexing can improve search recall and improve finding efficiency conversion. Tag indexing can provide value added benefit to sellers and provide encouragement for feature adoption by sellers. In order to avoid indexing poor or irrelevant tags we may implement rules to choose which tag values are indexed for each item. In a particular embodiment a maximum number e.g. 5 of tag values will be indexed. The tag values may be graduated. An implementation may first select values of the top three names for a category if available . For subsequent tags the next most confident tags may be selected. Values may meet a minimum confidence threshold. Tags may undergo re indexing only when an item is revised or re listed. Even though the graduated set may be changing and an indexed value may no longer be in the set we may not re index all values on each update to the graduated set. Tags may not be changing so frequently that this may be required. Additionally it may be a significant capacity increase with a questionable benefit.

An Application Program Interface API server and a web server are coupled to and provide programmatic and web interfaces respectively to one or more application servers . The application servers host one or more marketplace applications and payment applications . The application servers are in turn shown to be coupled to one or more databases servers that facilitate access to one or more databases .

The marketplace applications may provide a number of marketplace functions and services to users that access the networked system . The payment applications may likewise provide a number of payment services and functions to users. The payment applications may allow users to accumulate value e.g. in a commercial currency such as the U.S. dollar or a proprietary currency such as points in accounts and then later to redeem the accumulated value for products e.g. goods or services that are made available via the marketplace applications . While the marketplace and payment applications and are shown in to both form part of the networked system it will be appreciated that in alternative embodiments the payment applications may form part of a payment service that is separate and distinct from the networked system .

The web client accesses the various marketplace and payment applications and via the web interface supported by the web server . Similarly the programmatic client accesses the various services and functions provided by the marketplace and payment applications and via the programmatic interface provided by the API server . The programmatic client may for example be a seller application e.g. the TurboLister application developed by eBay Inc. of San Jose Calif. to enable sellers to author and manage listings on the networked system in an off line manner and to perform batch mode communications between the programmatic client and the networked system .

The networked system may provide a number of publishing listing and price setting mechanisms whereby a seller may list or publish information concerning goods or services for sale a buyer can express interest in or indicate a desire to purchase such goods or services and a price can be set for a transaction pertaining to the goods or services. To this end the marketplace applications are shown to include at least one publication application and one or more auction applications which support auction format listing and price setting mechanisms e.g. English Dutch Vickrey Chinese Double Reverse auctions etc. . The various auction applications may also provide a number of features in support of such auction format listings such as a reserve price feature whereby a seller may specify a reserve price in connection with a listing and a proxy bidding feature whereby a bidder may invoke automated proxy bidding.

A number of fixed price applications support fixed price listing formats e.g. the traditional classified advertisement type listing or a catalogue listing and buyout type listings. Specifically buyout type listings e.g. including the Buy It Now BIN technology developed by eBay Inc. of San Jose Calif. may be offered in conjunction with auction format listings and allow a buyer to purchase goods or services which are also being offered for sale via an auction for a fixed price that is typically higher than the starting price of the auction.

Store applications allow a seller to group listings within a virtual store which may be branded and otherwise personalized by and for the seller. Such a virtual store may also offer promotions incentives and features that are specific and personalized to a relevant seller.

Reputation applications allow users that transact utilizing the networked system to establish build and maintain reputations which may be made available and published to potential trading partners. Consider that where for example the networked system supports person to person trading users may otherwise have no history or other reference information whereby the trustworthiness and credibility of potential trading partners may be assessed. The reputation applications allow a user for example through feedback provided by other transaction partners to establish a reputation within the networked system over time. Other potential trading partners may then reference such a reputation for the purposes of assessing credibility and trustworthiness.

Personalization applications allow users of the networked system to personalize various aspects of their interactions with the networked system . For example a user may utilizing an appropriate personalization application create a personalized reference page at which information regarding transactions to which the user is or has been a party may be viewed. Further a personalization application may enable a user to personalize listings and other aspects of their interactions with the networked system and other parties.

The networked system may support a number of marketplaces that are customized for example for specific geographic regions. A version of the networked system may be customized for the United Kingdom whereas another version of the networked system may be customized for the United States. Each of these versions may operate as an independent marketplace or may be customized or internationalized presentations of a common underlying marketplace. The networked system may accordingly include a number of internationalization applications that customize information and or the presentation of information by the networked system according to predetermined criteria e.g. geographic demographic or marketplace criteria . For example the internationalization applications may be used to support the customization of information for a number of regional websites that are operated by the networked system and that are accessible via respective web servers .

Navigation of the networked system may be facilitated by one or more navigation applications . For example a search application as an example of a navigation application may enable key word searches of listings published via the networked system . A browse application may allow users to browse various category catalogue or inventory data structures according to which listings may be classified within the networked system . Various other navigation applications may be provided to supplement the search and browsing applications.

In order to make listings available via the networked system as visually informing and attractive as possible the marketplace applications may include one or more imaging applications utilizing which users may upload images for inclusion within listings. An imaging application also operates to incorporate images within viewed listings. The imaging applications may also support one or more promotional features such as image galleries that are presented to potential buyers. For example sellers may pay an additional fee to have an image included within a gallery of images for promoted items.

Listing creation applications allow sellers conveniently to author listings pertaining to goods or services that they wish to transact via the networked system . The above described tag engine in example embodiment forms a component or module of the listing creation applications .

Listing management applications allow sellers to manage such listings. Specifically where a particular seller has authored and or published a large number of listings the management of such listings may present a challenge. The listing management applications provide a number of features e.g. auto relisting inventory level monitors etc. to assist the seller in managing such listings. One or more post listing management applications also assist sellers with a number of activities that typically occur post listing. For example upon completion of an auction facilitated by one or more auction applications a seller may wish to leave feedback regarding a particular buyer. To this end a post listing management application may provide an interface to one or more reputation applications so as to allow the seller conveniently to provide feedback regarding multiple buyers to the reputation applications .

Dispute resolution applications provide mechanisms whereby disputes arising between transacting parties may be resolved. For example the dispute resolution applications may provide guided procedures whereby the parties are guided through a number of steps in an attempt to settle a dispute. In the event that the dispute cannot be settled via the guided procedures the dispute may be escalated to a third party mediator or arbitrator.

A number of fraud prevention applications implement fraud detection and prevention mechanisms to reduce the occurrence of fraud within the networked system . Messaging applications are responsible for the generation and delivery of messages to users of the networked system such messages for example advising users regarding the status of listings at the networked system e.g. providing outbid notices to bidders during an auction process or to provide promotional and merchandising information to users . Respective messaging applications may utilize any one have a number of message delivery networks and platforms to deliver messages to users. For example messaging applications may deliver electronic mail e mail instant message IM Short Message Service SMS text facsimile or voice e.g. Voice over IP VoIP messages via the wired e.g. the Internet Plain Old Telephone Service POTS or wireless e.g. mobile cellular WiFi WiMAX networks.

Merchandising applications support various merchandising functions that are made available to sellers to enable sellers to increase sales via the networked system . The merchandising applications also operate the various merchandising features that may be invoked by sellers and may monitor and track the success of merchandising strategies employed by sellers.

The networked system itself or one or more parties that transact via the networked system may operate loyalty programs that are supported by one or more loyalty promotions applications . For example a buyer may earn loyalty or promotions points for each transaction established and or concluded with a particular seller and be offered a reward for which accumulated loyalty points can be redeemed.

Certain embodiments are described herein as including logic or a number of modules components or mechanisms. A module logic component or mechanism herein after collectively referred to as a module may be a unit capable of performing certain operations and is configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more components of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a module that operates to perform certain operations as described herein.

In various embodiments a module may be implemented mechanically or electronically. For example a module may comprise dedicated circuitry or logic that is permanently configured e.g. within a special purpose processor to perform certain operations. A module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a module mechanically in the dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term module should be understood to encompass a entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which modules or components are temporarily configured e.g. programmed each of the modules or components need not be configured or instantiated at any one instance in time. For example where the modules or components comprise a general purpose processor configured using software the general purpose processor may be configured as respective different modules at different times. Software may accordingly configure the processor to constitute a particular module at one instance of time and to constitute a different module at a different instance of time.

Modules can provide information to and receive information from other modules. Accordingly the described modules may be regarded as being communicatively coupled. Where multiple of such modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example a one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

Example embodiments may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Example embodiments may be implemented using a computer program product e.g. a computer program tangibly embodied in an information carrier e.g. in a machine readable medium for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers.

A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

In example embodiments operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations can also be performed by and apparatus of example embodiments may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In embodiments deploying a programmable computing system it will be appreciated that that both hardware and software architectures require consideration. Specifically it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware e.g. an ASIC in temporarily configured hardware e.g. a combination of software and a programmable processor or a combination permanently and temporarily configured hardware may be a design choice. Below are set out hardware e.g. machine and software architectures that may be deployed in various example embodiments.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium may include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more instructions. The term machine readable medium shall also be taken to include any tangible medium that is capable of storing encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing encoding or carrying data structures utilized by or associated with such instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media. Specific examples of machine readable media include non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks.

The software may further be transmitted or received over a communications network using a transmission medium via the network interface device utilizing any one of a number of well known transfer protocols e.g. HTTP . Examples of communication networks include a local area network LAN a wide area network WAN the Internet mobile telephone networks Plain Old Telephone POTS networks and wireless data networks e.g. WiFi and WiMax networks The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.

In some embodiments the described methods may be implemented using one a distributed or non distributed software application designed under a three tier architecture paradigm. Under this paradigm various parts of computer code or software that instantiate or configure components or modules may be categorized as belonging to one or more of these three tiers. Some embodiments may include a first tier as an interface e.g. an interface tier . Further a second tier may be a logic or application tier that performs application processing of data inputted through the interface level. The logic tier may communicate the results of such processing to the interface tier and or to a backend or storage tier. The processing performed by the logic tier may relate to certain rules or processes that govern the software as a whole. A third storage tier may be a persistent storage medium or a non persistent storage medium. In some cases one or more of these tiers may be collapsed into another resulting in a two tier architecture or even a one tier architecture. For example the interface and logic tiers may be consolidated or the logic and storage tiers may be consolidated as in the case of a software application with an embedded database. The three tier architecture may be implemented using one technology or a variety of technologies. The example three tier architecture and the technologies through which it is implemented may be realized on one or more computer systems operating for example as a standalone system or organized in a server client peer to peer distributed or so some other suitable configuration. Further these three tiers may be distributed between more than one computer systems as various components.

Example embodiments may include the above described tiers and processes or operations about constituting these tiers may be implemented as components. Common too many of these components is the ability to generate use and manipulate data. The components and the functionality associated with each may form part of standalone client server or peer computer systems. The various components may be implemented by a computer system on an as needed basis. These components may include software written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Java Enterprise Beans EJB Component Object Model COM Distributed Component Object Model DCOM or other suitable technique.

Software for these components may further enable communicative coupling to other components e.g. via various Application Programming interfaces APIs and may be compiled into one complete server client and or peer software application. Further these APIs may be able to communicate through various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above described components across a distributed programming environment as distributed computing components. For example an interface component e.g. an interface tier may form part of a first computer system that is remotely located from a second computer system containing a logic component e.g. a logic tier . These first and second computer systems may be configured in a standalone server client peer to peer or some other suitable configuration. Software for the components may be written using the above described object oriented programming techniques and can be written in the same programming language or a different programming language. Various protocols may be implemented to enable these various components to communicate regardless of the programming language used to write these components. For example a component written in C may be able to communicate with another component written in the Java programming language through utilizing a distributed computing protocol such as a Common Object Request Broker Architecture CORBA a Simple Object Access Protocol SOAP or some other suitable protocol. Some embodiments may include the use of one or more of these protocols with the various protocols outlined in the Open Systems Interconnection OSI model or Transmission Control Protocol Internet Protocol TCP IP protocol stack model for defining the protocols used by a network to transmit data.

Although an embodiment has been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show by way of illustration and not of limitation specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived there from such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Such embodiments of the inventive subject matter may be referred to herein individually and or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

Thus a computer implemented system and method for providing information tagging in a networked system is disclosed. While the present invention has been described in terms of several example embodiments those of ordinary skill in the art will recognize that the present invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description herein is thus to be regarded as illustrative instead of limiting.

