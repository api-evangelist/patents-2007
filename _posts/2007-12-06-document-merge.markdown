---

title: Document merge
abstract: Methods and systems of merging a first document with at least a second document to generate a third document. Each of the first and second documents includes at least one data unit. Each data unit is associated with a unit identifier and an edit identifier. The unit identifiers of each of the documents are compared to the unit identifiers of the other document to determine whether each unit identifier is a matching or non-matching unit identifier. Edit identifiers of the data units associated with the matching unit identifiers are compared to each other. Data units associated with the non-matching unit identifiers are inserted directly into the third document. Data units associated with the matching unit identifiers and the matching edit identifiers are inserted directly into the third document. Data units associated with the matching unit identifiers and the non-matching edit identifiers are merged into the third document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028229&OS=08028229&RS=08028229
owner: Microsoft Corporation
number: 08028229
owner_city: Redmond
owner_country: US
publication_date: 20071206
---
Merging is an act of reconciling multiple changes made to different copies of a same document. Most often it is necessary when a document is modified by two people at the same time. Later these changes need to be merged into a single new document reflecting the intent of both authors.

As discussed herein an aspect of some embodiments relates to a method of merging a first document with at least a second document to generate a third document. Each of the first and second documents includes at least one data unit. Each data unit is associated with a unit identifier and an edit identifier. The method includes obtaining the unit identifiers of the data units of the first document. The method also includes obtaining the unit identifiers of the data units of the second document. The unit identifiers of each of the first and second documents are compared to the unit identifiers of the other of the first and second documents to determine whether each of the unit identifiers is a matching unit identifier or a non matching unit identifier. The matching unit identifiers indicate corresponding data units of the first and second documents. Each of the non matching unit identifiers indicates a data unit of one of the first and second documents that does not correspond with any data unit of the other of the first and second documents. Edit identifiers of the data units associated with the matching unit identifiers are compared to each other to ascertain matching edit identifiers. Each of the matching edit identifiers indicates the data unit of one of the first and second documents matches the corresponding data unit of the other of the first and second documents. Data units of the first and second documents associated with non matching unit identifiers are inserted directly into the third document. In addition data units of the first and second documents associated with matching unit identifiers and matching edit identifiers are inserted directly into the third document. Finally data units of the first and second documents associated with matching unit identifiers and non matching edit identifiers are merged into the third document.

Another aspect of some embodiments relates to a document processing system. The document processing system includes a document processing application and a first document. The document processing application is configured to merge together at least two documents to generate a third document. The first document is configured to be processed by the document processing application. The first document stores content and metadata. The content includes at least one data unit. The metadata includes a unit identifier and an edit identifier associated with each data unit. The unit identifier of each data unit is generated when the data unit is created. The edit identifier of each data unit is generated when a modification to the data unit is saved.

Further aspects relate to a computer readable storage medium having computer executable instructions for implementing a method of generating a merged document from a first document and a second document. The method includes determining whether the first document has a first document identifier and whether the second document has a second document identifier. The method also includes obtaining one of the first and second document identifiers if one of the first and second documents has one of the first and second document identifiers. The method further includes comparing the first document identifier of the first document to the second document identifier of the second document. The methods includes performing a conventional merge of the first and second documents to generate the merged document if any of the first and second documents does not have a document identifier. Moreover the method includes performing a conventional merge of the first and second documents to generate the merged document if the first document identifier differs from the second document identifier. Finally the method includes performing an accelerated merge of the first and second documents to generate the merged document if the first document identifier matches the second document identifier.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in any way as to limit the scope of the claimed subject matter.

This disclosure will now more fully describe exemplary embodiments with reference to the accompanying drawings in which specific embodiments are shown. Other aspects may however be embodied many different forms and the inclusion of specific embodiments in the disclosure should not be construed as limiting such aspects to the embodiments set forth herein. Rather the embodiments depicted in the drawings are included to provide a disclosure that is thorough and complete and which fully conveys the intended scope to those skilled in the art. When referring to the figures like structures and elements shown throughout are indicated with like reference numerals.

Embodiments of the present disclosure generally relate to a document merge. In one non limiting example merging a first document with at least a second document to generate a third document is described. Each of the first and second documents includes at least one data unit. Each data unit is associated with a unit identifier and an edit identifier. Further embodiments relate to a document processing system. The document processing system includes a document processing application which is configured to merge together at least two documents to generate a third document.

In one possible embodiment the document processing application is a word processing application such as but not limited to a MICROSOFT Office Word application. In other possible embodiments the document processing system is an image data voice or any other suitable document processing system. Similarly the document processing application can also be an image data voice or any other suitable document processing application such as but not limited to a Microsoft Office POWERPOINT EXCEL VISIO ACCESS and OUTLOOK software application. The documents can be text or rich text documents presentations spreadsheets drawings data emails and any other documents in a suitable format.

The data unit is also assigned an edit identifier when the data unit is created edited or modified. In particular whenever the data unit is created edited or modified a new edit identifier is assigned to the data unit so that the new edit identifier replaces the previous edit identifier if any of the data unit . The new edit identifier is different from the previous edit identifier if any of the data unit . In one possible embodiment the edit identifier is randomly generated.

In example embodiments the document is broken into data units by using a variety of methods. For example if the document is a text document each paragraph of the document can be broken into a separate data unit. In other words in the example of a text document the data unit can also be called a paragraph. In such an example the unit identifiers are referred to as paragraph identifiers. In other types of documents other methods can be used to break the document into data units. For example objects graphics slides or other selectable items within a document can be used to break the document into separate data units.

The unit identifier and the edit identifier can be in any suitable format to identify the data unit . One possible exemplary format of the unit identifier and the edit identifier is a combination of numbers letters and or symbols such as a 32 bit integer. A person skilled in the art will appreciate many other suitable identifier formats for the unit identifier and the edit identifier . The unit identifier and the edit identifier can be stored in the document in a separate file or in any other suitable storable and accessible medium. Some exemplary formats of storing the unit identifier and the edit identifier are discussed below in more detail in .

The document also includes a document identifier to identify the document . In one possible embodiment the document identifier is assigned to the document when the document is newly created. In another possible embodiment the document identifier is assigned to the document when the document has no document identifier. For example a document identifier is assigned to the document when the document is previously edited by an application that does not recognize unit or edit identifiers.

The document identifier is unique and persistent when the document identifier is assigned to the document . In other words the document identifier persists for the life of the document . Even when the document is edited and modified the document identifier does not change. In addition when a separate document is created from the document the document identifier stays with the separate document. This can occur when a user copies a document to a new document or when multiple user copies of the document are created to allow for multiple users to edit the same document.

In an example shown in the first document includes a first document identifier and data units . The first document identifier identifies the first document . Three data units are shown in however the first document may include more or less than three data units. As to the shown data units the data unit has a unit identifier U and an edit identifier E which are associated with the data unit . The data unit has a unit identifier U and an edit identifier E associated with the data unit . The data unit has a unit identifier U and an edit identifier E associated with the data unit

Similarly the second document includes a second document identifier and data units . The second document identifier identifies the second document . Three data units are shown in however the second document may include more or less than three data units. The data unit has a unit identifier U and an edit identifier E associated with the data unit . The data unit has a unit identifier U and an edit identifier E associated with the data unit . As it is noted the edit identifier E of the data unit in the second document is different from the edit identifier E of the data unit in the first document . The data unit has a unit identifier U and an edit identifier E associated with the data unit

In the exemplary merge shown in the first document identifier of the first document is same as the second document identifier of the second document . The first document and the second document are thus performed in an accelerated merge as described in detail as follows. Since the first document and the second document have the same document identifier the first and second documents share a common origin or parent. As such the first document can be merged with the second document using one or more of the accelerated merging processes described below.

The data unit of the first document has a same unit identifier U and edit identifier E as the data unit of the second document . The data unit therefore is indicated as the same as the data unit . In other words the data unit has not been changed or modified from the data unit . Accordingly no merge is needed between the data unit and the data unit . Rather the data unit or the data unit which is same as the data unit is directly inserted into the third document as noted as a data unit . Since there is no merge necessary between the data unit and the data unit the data unit in the merged document i.e. the third document keeps the unit identifier U and the edit identifier E associated with it. This direct insertion without further comparing the contents in the data unit with the contents in the data unit can save time improve efficiency and enhance merge precision.

The data unit and the data unit have a same unit identifier U but have different edit identifiers E E. Different edit identifiers E E indicate that the data unit and the data unit may be different. In other words a merge between the data unit and the data unit is needed. Therefore a data unit in the third document is generated from a merge between the data unit and the data unit . The unit identifier U is kept in the data unit . A new edit identifier E is created in the merge of the two data units and

The data unit of the first document cannot be found to have any data unit in the second document which has a matching unit identifier with the unit identifier U of the data unit . Thus the data unit is directly inserted into the third document without a merge and is noted as a data unit in the third document . The data unit thus includes the unit identifier U and the edit identifier E associated with the date unit . The data unit in the third document is exactly same as the data unit in the first document . In one possible embodiment the data unit is directly attached into the end of the third document . In another possible embodiment the data unit without a merge of contents of the data unit is sorted to be inserted into a proper location of the third document according to relationships among the data units 

Similarly the data unit of the second document cannot be found to have any data unit in the first document which has a matching unit identifier with a unit identifier U of the data unit . Therefore the data unit is directly inserted into the third document without a merge and is noted as a data unit in the third document . The data unit thus includes the unit identifier U and the edit identifier E associated with the date unit . The data unit in the third document is exactly same as the data unit in the second document . In one possible embodiment the data unit is directly attached into the end of the third document . In another possible embodiment the data unit without a merge of contents of the data unit is sorted to be inserted into a proper location of the third document according to relationships among the data units 

The merged document thus includes the data units . Each of the data units is also associated with a unit identifier and an edit identifier. In addition the document identifier or which is same as stays in the merged document and is noted as a document identifier in .

In another possible embodiment if the document identifier of the first document is different from the document identifier of the second document a conventional merge is performed between the first document and the second document. In yet another possible embodiment if any of the first and second documents does not have a document identifier a conventional merge will be performed to generate the third document.

The example in shows merging two documents together to a merged third document. However it is not limited to merging only two documents. Instead the concept and principle illustrated herein can apply to merging more than two documents.

Computing system may also contain communications connection s that allow the computing system to communicate with other devices. Communications connection s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Computing system may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

In some embodiments memory includes one or more of operating system application programs other program modules and program data . For example application programs can include a text or word processing application that is used to create and or merge two or more documents.

At operation the document processing application obtains the unit identifiers of the data units of the first document. In one possible embodiment the unit identifiers are stored within the first document. In another possible embodiment the unit identifiers are stored in a metadata file which is separated from the first document.

Operational flow proceeds to an operation . At the operation the document processing application obtains the unit identifiers of the data units of the second document. In one possible embodiment the unit identifiers are stored within the second document. In another possible embodiment the unit identifiers are stored in a metadata file which is separated from the second document.

Operational flow proceeds to an operation . At the operation the document processing application compares the unit identifiers of each of the first and second documents to the unit identifiers of the other of the first and second documents to determine whether each of the unit identifiers is a matching unit identifier or a non matching unit identifier. A matching unit identifier means that a unit identifier in the first document is found to be same as a unit identifier in the second document. These matching unit identifiers indicate corresponding data units of the first and second documents. A non matching unit identifier means that a unit identifier in one of the first and second documents cannot be found to be same as any unit identifier in the other of the first and second documents. Each of the non matching unit identifiers indicates a data unit of one of the first and second documents that does not correspond with any data unit of the other of the first and second documents.

Operational flow proceeds to a comparison operation . The comparison operation determines whether or not any unit identifier in one of the first and second document matches any unit identifier in the other of the first and second document. If the comparison operation determines that a unit identifier in one of the first and second document does not match any unit identifier in the other of the first and second document then operational flow branches No and operational flow proceeds to an operation . At the operation the data unit associated with the non matching unit identifier is directly inserted into the third document.

If the comparison operation determines that a unit identifier in one of the first and second document matches any unit identifier in the other of the first and second document then operational flow branches Yes and operational flow proceeds to an operation .

At the operation the document processing application compares edit identifiers of the data units associated with the matching unit identifiers to ascertain matching edit identifiers. Each of the matching edit identifiers indicates the data unit of one of the first and second documents matches the corresponding data unit of the other of the first and second documents. On the other hand each of the non matching edit identifiers indicates the data unit of one of the first and second documents does not match the corresponding data unit of the other of the first and second documents.

Operational flow proceeds to a comparison operation . The comparison operation determines whether or not the edit identifiers of the data units associated with the matching unit identifiers match each other. If the comparison operation determines that the edit identifiers match each other then operational flow branches Yes and operational flow proceeds to the operation . At the operation the data unit associated with the matching unit identifiers and the matching edit identifiers is directly inserted into the third document.

If the comparison operation determines that the edit identifiers of the data units associated with the matching unit identifiers do not match each other then operational flow branches No and operational flow proceeds to the operation . At the operation the data units associated with the matching unit identifiers and the non matching edit identifiers are merged into a data unit to the third document. This can be done for example using a convention merging process such as a three way merge algorithm. Other conventional merging processes can also be used.

The example shown in shows a method of merging two documents together to a merged third document. However it is not limited to merging two documents. Instead the concept and principle illustrated herein can apply to merging more than two documents.

Operational flow proceeds to an operation . At the operation the unit identifiers are stored within the document. In one possible embodiment the unit identifiers are stored in a metadata within the document. In another possible embodiment the unit identifiers are stored in a metadata file which is separated from the document.

Operational flow proceeds to an operation . At the operation an edit identifier is assigned to each data unit of the document whenever the data unit is created or edited. Thus the edit identifier indicates that the data unit is newly created or edited. The edit identifier is separated from the unit identifier. The newly assigned edit identifier is different from and replaces previous edit identifier if any of the data unit when the edit identifier is assigned to the data unit. In one possible embodiment the edit identifier is randomly generated. In other words the edit identifier can be assigned with a random identifier.

Operational flow proceeds to an operation . At the operation the edit identifiers are stored within the document. In one possible embodiment the edit identifiers are stored in a metadata within the document. In another possible embodiment the edit identifiers are stored in a metadata file which is separated from the document. In yet another possible embodiment when the user saves the document the edit identifiers are stored therewith.

Operational flow starts at an operation . The operation determines whether the first document has a first document identifier associated with the first document. If the operation determines that the first document does not have a first document identifier associated with it then operational flow branches No and operational flow proceeds to an operation to be discussed in detail below . If the operation determines that the first document has a first document identifier associated with the first document then operational flow branches Yes and operational flow proceeds to an operation . At the operation the first document identifier is obtained from the first document.

Operational flow proceeds to an operation . The operation determines whether the second document has a second document identifier associated with the second document. If the operation determines that the second document does not have a second document identifier associated with the second document then operational flow branches No and operational flow proceeds to an operation . If the operation determines that the second document has a second document identifier associated with the second document then operational flow branches Yes and operational flow proceeds to an operation . At the operation the second document identifier is obtained from the second document.

Operational flow proceeds to a comparison operation . The comparison operation determines whether the first document identifier of the first document matches the second document identifier of the second document. If the comparison operation determines that the first document identifier of the first document matches the second document identifier of the second document then operational flow branches Yes and operational flow proceeds to an operation . At the operation an accelerated document merge is performed as discussed above in . If the comparison operation determines that the first document identifier of the first document does not match the second document identifier of the second document then operational flow branches No and operational flow proceeds to an operation . At the operation a conventional document merge is performed.

After the conventional document merge is completed at the operation . Operational flow proceeds to an operation . At the operation a document identifier is assigned to the merged document. The document identifier is unique and persistent. The document identifier persists for the life of the merged document.

Operational flow proceeds to an operation . At the operation each data unit in the merged document is assigned a unique unit identifier that persists for the life of the data unit. The unit identifier identifies and distinguishes the associated data unit from any other data units in the merged document.

Operational flow proceeds to an operation . At the operation the unit identifiers are stored within the merged document. In one possible embodiment the unit identifiers are stored in a metadata within the document. In another possible embodiment the unit identifiers are stored in a metadata file which is separated from the merged document.

Operational flow proceeds to an operation . At the operation an edit identifier is assigned to each of the data units. The edit identifier indicates that the data unit is newly created or edited. The edit identifier is separated from the unit identifier.

Operational flow proceeds to an operation . At the operation the edit identifiers are stored within the merged document. In one possible embodiment the edit identifiers are stored in a metadata within the merged document. In another possible embodiment the edit identifiers are stored in a metadata file which is separated from the merged document. In yet another possible embodiment the edit identifiers are stored when a user saves the document. In addition an edit identifier can be assigned with a random identifier.

After the operations the merged document is converted into a document which is ready for an accelerated merge when the merged document is edited and or duplicated later. For example if the merged document is modified to a fourth document by one user and to a fifth document by another user the fourth document and the fifth document can be merged in an accelerated merge method as described above.

The example shown in illustrates a method of merging two documents together to a merged third document. However it is not limited to merging two documents only. Instead the concept and principle illustrated herein can apply to merging more than two documents.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

