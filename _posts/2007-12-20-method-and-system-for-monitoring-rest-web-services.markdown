---

title: Method and system for monitoring rest web services
abstract: Generally, the present invention provides a method and computerized system for monitoring REST web services including generating a REST based web service client call operative to be used for monitoring web service activities. The web service client call is then deployed. The method and computerized system further includes monitoring the web service activities via the call invocation and a response analysis. The method and computerized system further includes receiving a plurality of feedback results from the monitoring of the web service functionality and thereupon adjusting the web service parameters based on the aggregated feedback.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08275855&OS=08275855&RS=08275855
owner: Yahoo! Inc.
number: 08275855
owner_city: Sunnyvale
owner_country: US
publication_date: 20071220
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to monitoring web services and more specifically to a system and method for providing the monitoring and tracking of REST based web services in accordance with service level agreements.

Representational State Transfer REST architecture allows for the distribution of hypermedia within the constraints of existing standard web based protocols and encoding for existing operations. REST architecture is in essence a hybrid programming style derived from various network based architectural styles as well including a uniform connector interface. REST includes the four interface constraints of identification of resources manipulation of resources through representations self descriptive messages and hypermedia as the application state.

REST web services provide easier and intuitive interfaces that ease the development of applications interacting with the service. Although it is important when providing these features for the active monitoring of quality of the transmission of the transactions. It is typical for parties to have Service Level Agreements SLAs that define various factors associated with the services provided for potential service consumers and it is important to monitor various factors associated with the transactions to ensure conformity with the correspond SLAs such as to monitor the availability of access to the requested data and the response time in which a data request e.g. requesting a resource representation is answered.

Additionally related to monitoring resources and services are fault handling operations. The quality and effectiveness of REST web services can be very important in commercial grade web service APIs therefore it is very important to not only monitor the REST web service levels but also provide the ability to correct or otherwise conform resources within the terms of the service level agreements.

As such there exists a need for the active monitoring of REST web service activities without the computation and resource overhead of continuous monitoring techniques.

Generally the present invention provides a method and computerized system for monitoring REST web services including generating REST based web service client calls operative to be used for monitoring web service activities. The web service client call is then deployed. The method and computerized system further includes monitoring the web service activities via the call invocation and a response analysis. The method and computerized system further includes receiving a plurality of feedback results from the monitoring of the web service functionality and thereupon adjusting the web service parameters based on the aggregated feedback.

In the following description of the embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration exemplary embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

The web service clients including a browser and command line interface clients can interact with the web service across a networked connection e.g. Internet using HTTP as a protocol for communication. More generally the web service represents a data transmission point whereupon a service is provided or operative to be provided upon further processing to the service clients. The SLAs are metrics that a service provider provides to the service consumer such as response time of the service up time of the service etc. The consumers use web service clients to interact with the web service and the service administrator monitors these parameters and makes sure the service complies to the agreed terms of the SLA. In other words the SLAs are between the service provider and consumer and it is maintained by the service administrator.

The access log processor and the test case executor and validator and monitor manager in the test processor may be one or more processing devices operation to perform computational processing operations in response to executable instructions. The monitoring database and access log store may be one or more data storage devices operative to store corresponding data therein. further illustrates the monitoring system that includes processing elements and interface components as described herein for communication with the web service and subsequent elements and .

The alert system may include one or more processing components operative to perform alerting operations in response to alert conditions as recognized by one having ordinary skill in the art. The test case generator may be a processing component or system operative to in response to executable instructions generate test cases usable for the monitoring calls as described herein. The administrative interface and the monitoring dashboard may provide for the display of components in response to programming instructions for generating and displaying the information where the interface and dashboard upon being displayable on one or more display devices are operative to provide corresponding information to the service administrator .

In this system the administrative interface helps service owners add services for monitoring describes the services defines test cases specifies frequency to run the test cases and configures alerts. As described in further detail below the test cases provide for detecting a service level. The administrative interface operates in response to executable instructions on a local or remote processing device not explicitly shown wherein the service administrator may perform the various operations using the interface. The addition of services for monitoring may include selecting different aspects of the web service provided to the web service clients such as defined by the SLA for example testing response speed and or bandwidth parameters. The configuration of alerts may include defining which types of alerts to generate such as ranking different types of alerts and having different actions for the different alerts such as low level alerts that include a simple electronic mail notification and high level alerts including a more urgent notification. The admin interface is also in operative two way communication with the monitoring database .

The test case generator is operative to in response to executable instructions handle automatic test case generations. The generator reads a service description from the monitoring database and generates the test case from the description constructs the REST service requests and indicates the expected response . For example one technique may include generating a resource lifecycle test case based on the service description from the database . Service descriptions are provided by the service administrator through the admin interface. These give details about a service like the response formats supported by the service request construction details etc. These could be standard web service description languages such as WSDL or proprietary service description formats.

The access log processor is operative to in response to executable instructions also generate test cases similar to the test case generator . The access log processor gets the access log for services from the access log store reads random requests from the access log executes the requests and stores the results in the monitoring database.

The monitor manager is a processing module operative on one or more processing devices and is a cron job that runs at a predefined time interval such as running once every minute. The manager retrieves the service description and a list of test cases from the monitoring database where the list of test cases include test cases to be run in the next instance. In one embodiment each test case has an associated priority. If a stopper test case is encountered other test cases for the service are not executed. For every test case the corresponding test case executor and validator is invoked and the results are obtained. This component manipulates the service state based on the test case results . The service state is updated in the database and also sent to the alert system .

The monitor manager invokes the test case executor and validator . A test case executor and validator is written for each test case including reading test case parameters wherein the module then makes REST service requests and compares the actual response with an expected response. The text case executor and validator then returns the test case results to the monitor manager and the alerts system .

Every test case has an associated test case executor and validator which will be invoked by the service monitor . One aspect may include a ping check which invokes the service with a sample call in the service request to check if the service is alive and returns a valid HTTP code in the service response . This ping check can be defined as a stopper case holding the highest execution priority. The test case executor and validator communicates with the service using the HTTP protocol for request and response.

In one embodiment the test case executor and validator can be used to validate the service response . The response can be checked for full or partial text match by defining appropriate regexes. This can also be used to check if there are n elements in the response for example ten search results by defining regex and the number of expected matches.

Another embodiment may include a response format equivalence test wherein the test case executer and validator converts the service response in various formats into a common format such as PHP arrays for example and compares these for equivalence.

For resource oriented services the test case executor and validator may automatically generate web service calls based on the service description. The test case executor and validator may create a resource using the PUT verb get the resource using the GET verb alter the resource using the POST verb get the resource using the GET verb and drops the resource using the DELETE verb. The system may thereupon check the http codes returned and the response content in each of these steps.

One technique may include an idempotence check through access log requests from the access log store . This adapter uses these request responses replays the request and compares the current output with the stored output.

The access log processor is operative to in one embodiment populate the database with requests and responses of the test cases . The system may use these request responses to replay the request and compare the current output with the stored output. This thereupon provides another technique for determining a system level operating efficiency by providing with idempotent services verifying correctness and consistencies.

The computerized system for monitoring REST web services includes generating a set of monitoring calls and invoking the calls as part of a standard HTTP call invocation framework. However monitoring call generation invocation and analysis includes the following additional REST protocol specific aspects.

A first aspect is the ability to monitor different types of REST web services including the ability to monitor services with various response formats such as XML JSON and serialized PHP. This further includes the ability to monitor both method oriented pseudo REST and resource oriented REST services and the ability to monitor both form POSTed as well as XML POSTed services.

A second aspect is the ability to auto generate a suite of monitoring calls. One technique is based on a REST resource URI. REST web services which are resource oriented are marked by well structured URIs. A resource is acted upon using HTTP verbs PUT to create POST to update GET to read and DELETE to destroy. A single resource URI can therefore generate a full suite of monitoring calls that can periodically test a complete life cycle of a REST service in production. Corresponding to each resource URI four monitoring calls can be generated and applied to check that the REST web services are functioning correctly with respect to the ability to create the resource modify it read its state and destroy it. Another way to generate monitoring probes is to look at actual service requests in production and replay them. Responses can be compared to check consistency of service responses. This technique will work for idempotent service invocations.

A third aspect is the ability to check correctness of a response via a non XML specific validation technique because the response formats in REST could be in any of the various formats such as for example but not limited to XML JSON serialized PHP among other formats. This aspect may include using regular expressions as a REST response matching mechanism comparing actual versus expected results. This aspect may include the ability to match responses in terms of the number of occurrences of a particular element for example a web search result for popular queries should return ten search results for a paginated web service API. This aspect may also include validation by converting service response in various formats like PHP JSON serialized PHP to a common format like PHP data structures and it is used for structural validation and value equivalence comparisons. 

A fourth aspect is the ability to check performance such as the responsiveness in terms of time taken to respond. This technique involves probing a REST web services automatically under different load conditions. A monitoring call can be sent to the service as load conditions vary. Monitoring of load conditions can be done by traditional monitoring methods and this technique builds upon those by sending a monitoring probe under various load conditions to construct a response curve for the web service with variable load.

The storage device may be local or remote to the processing device such as a local or embedded memory or a storage device accessible across a networked connection. The storage device while shown as a single device may also be a combination of multiple storage devices storing various aspects or components of the executable instructions for receipt and processing by the processing device . The processing device may be one or more processing devices in one or more processing locations operative to receive the executable instructions and perform the processing operations as indicated therein. For example one embodiment may include multiple processors at various processing locations performing different processing operations in responses to modules or portions of the executable instructions as received from the storage device .

A first step step is to generate a REST based web service client call to be used for monitoring web service activities. With respect to the web service client call may be generated by the service administrator via the admin interface . The client call includes REST based call requests as described above.

The next step step is to deploy monitoring calls. With respect to in one embodiment this may include service requests provided to the web service browser by the test case executor and validator . The monitoring calls include instructions executable by one or more processing components to receive feedback data usable for determining the operational aspects of the web service in response to the client calls.

A next step step is to monitor the web service activities via the web service invocation and a response analysis. This monitoring includes the access log processor which gets the requested and expected response details from the access log store.

A next step is to receive a plurality of feedback results from the monitoring of the web services. With respect to these feedback results may be received through the test case executor and validator which receives the service response and thereby can measure various metrics of the response of the web service to the service request . The feedback may include examining the correctness of a response to a particular call request. In one embodiment the checking of the correctness of a response may include a non XML specific validation technique.

A next step step is to aggregate the feedback results to determine analytics of the web service functionality. In one embodiment the analytics may include the measurement of the metric information such as the responsive time and correctness of the various activities. The metric aspects can be defined by the various components measured relative to the SLA and the metric aspects can also be defined by the service administrator such as through the admin interface . In the aggregation of the feedback results the monitoring database may also make this information available to the monitoring dashboard such as viewable by the service administrator such as in the exemplary screenshot of .

A next step step is to compare the feedback results to the terms of the service level agreement. This comparison step may be performed again through the dashboard and or via the admin interface . This comparison allows for the direct feedback of the REST web services relative to the defined parameters of the service level agreement made between the service administrator and the service consumer.

If the inquiry to step is in the affirmative the method reverts back to step for additional monitoring of REST web services. If the inquiry to step is no the methodology further includes adjusting web service parameters based on aggregated feedback. This adjustment may be made by the service administrator through the admin interface such as adjusting service parameters consistent with performance aspects determined by the above monitoring operations. Upon adjustment of the web service parameters if any the method again reverts to step for continued monitoring of REST web service in accordance with the technique described herein.

With respect to the access log processor may receive or track the service responses and provide the test case information to the monitoring database . The monitoring system may then monitor the services using these test case information for idempotent behavior and provide feedback to the service administrator such as via the monitoring dashboard step of .

Thereby the present system and method uses the above described operations to monitor REST web services. These REST web services can be monitored relative to service level agreements and provide various feedback aspects for all parties involved. The feedback can be used to adjust or otherwise monitor the system itself as well as to monitor and possibly adjust the terms of a service level agreement. Through this monitoring technique the ability to provide reliable service consistent with customer expectations or demands is thereby enhanced.

In software implementations computer software e.g. programs or other instructions and or data is stored on a machine readable medium as part of a computer program product and is loaded into a computer system or other device or machine via a removable storage drive hard drive or communications interface. Computer programs also called computer control logic or computer readable program code are stored in a main and or secondary memory and executed by one or more processors controllers or the like to cause the one or more processors to perform the functions of the invention as described herein. In this document the terms memory and or storage device may be used to generally refer to media such as a random access memory RAM a read only memory ROM a removable storage unit e.g. a magnetic or optical disc flash memory device or the like a hard disk or the like.

Notably the figures and examples above are not meant to limit the scope of the present invention to a single embodiment as other embodiments are possible by way of interchange of some or all of the described or illustrated elements. Moreover where certain elements of the present invention can be partially or fully implemented using known components only those portions of such known components that are necessary for an understanding of the present invention are described and detailed descriptions of other portions of such known components are omitted so as not to obscure the invention. In the present specification an embodiment showing a singular component should not necessarily be limited to other embodiments including a plurality of the same component and vice versa unless explicitly stated otherwise herein. Moreover applicants do not intend for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such. Further the present invention encompasses present and future known equivalents to the known components referred to herein by way of illustration.

The foregoing description of the specific embodiments so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the relevant art s including the contents of the documents cited and incorporated by reference herein readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Such adaptations and modifications are therefore intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance presented herein in combination with the knowledge of one skilled in the relevant art s .

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example and not limitation. It would be apparent to one skilled in the relevant art s that various changes in form and detail could be made therein without departing from the spirit and scope of the invention. Thus the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

