---

title: Client device configuration with hooks
abstract: Configuring a client device including associating a hook in a configuration bundle with customized programming, downloading the configuration bundle for a client device to a services gateway, and executing the configuration bundle on the services gateway, including calling the hook.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07853673&OS=07853673&RS=07853673
owner: International Business Machines Corporation
number: 07853673
owner_city: Armonk
owner_country: US
publication_date: 20070831
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 10 361 198 filed on Feb. 6 2003 now U.S. Pat. No. 7 398 305.

The field of the invention is data processing or more specifically methods systems and products for configuring client devices.

Often when a networked client device is purchased and installed onto a network such as a home network the client device must be configured to operate properly. When disparate client devices using different protocols are networked together configuring these client devices often requires configuration parameters specific to the user the network on which the client device will operate and the client device. Current configuration techniques are often tedious and require extensive user involvement. In fact in some complicated environments configuration requires a truck roll with a technical installer. Many conventional configuration techniques require the user to access complicated text instructions from a home computer and wade through large amounts of technical data in order to complete the configuration process. Therefore there is a need for an improved method of configuring a client device.

Exemplary embodiments of the invention include methods for configuring a client device. Exemplary embodiments include associating a hook in a configuration bundle with customized programming. Such embodiments include downloading the configuration bundle for a client device to a services gateway and executing the configuration bundle on the services gateway including calling the associated hook.

In exemplary embodiments of the invention associating a hook in a configuration bundle with customized programming includes receiving a description of the hook from a manufacturer. In such embodiments associating a hook in a configuration bundle with customized programming includes integrating the customized programming with the configuration bundle through the hook in dependence upon the description. Typical embodiments include detecting a client device and requesting a configuration bundle for the client device.

Exemplary embodiments of the invention include receiving at a vendor the configuration bundle for a client device. Such embodiments include receiving at a vendor user provided configuration parameters for the client device. Typical embodiments include associating the user provided configuration parameters with the configuration bundle.

Exemplary embodiments of the invention include receiving at a configuration services provider a configuration bundle for a client device. Such embodiments include receiving at a configuration services provider user provided configuration parameters for the client device. Typical embodiments include associating the user provided configuration parameters with the configuration bundle. In exemplary embodiments downloading a configuration bundle for a client device to a services gateway includes downloading a generic configuration bundle to a services gateway. In such embodiments executing the configuration bundle includes executing the generic configuration bundle in which executing the generic configuration bundle includes reading a configuration prompt from a client device providing the configuration prompt to a user receiving configuration parameters from a user and writing the configuration parameters to the client device.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

The present invention is described to a large extent in this specification in terms of methods for configuring a client device. Persons skilled in the art however will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention.

Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention including for example systems comprised of processing units and arithmetic logic circuits coupled to computer memory which systems have the capability of storing in computer memory which computer memory includes electronic circuits configured to store data and program instructions programmed steps of the method of the invention for execution by a processing unit. The invention also may be embodied in a computer program product such as a diskette or other recording medium for use with any suitable data processing system.

Embodiments of a computer program product may be implemented by use of any recording medium for machine readable information including magnetic media optical media or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

 Field In this specification the terms field and data element unless the context indicates otherwise generally are used as synonyms referring to individual elements of digital data. Aggregates of data elements are referred to as records or data structures. Aggregates of records are referred to as tables or files. Aggregates of files or tables are referred to as databases. Complex data structures that include member methods functions or software routines as well as data elements are referred to as classes. Instances of classes are referred to as objects or class objects. 

 802.11 refers to a family of specifications developed by the IEEE for wireless LAN technology. 802.11 specifies an over the air interface between a wireless client and a base station or between two wireless clients.

 API is an abbreviation for application programming interface. An API is a set of routines protocols and tools for building software applications.

 Bluetooth refers to an industrial specification for a short range radio technology for RF couplings among client devices and between client devices and resources on a LAN or other network. An administrative body called the Bluetooth Special Interest Group tests and qualifies devices as Bluetooth compliant. The Bluetooth specification consists of a Foundation Core which provides design specifications and a Foundation Profile which provides interoperability guidelines.

 Browser means a web browser a communications application for locating and displaying web pages. Browsers typically comprise a markup language interpreter web page display routines and an HTTP communications client. Typical browsers today can display text graphics audio and video. Browsers are operative in web enabled devices including wireless web enabled devices. Browsers in wireless web enabled devices often are downsized browsers called microbrowsers. Microbrowsers in wireless web enabled devices often support markup languages other than HTML including for example WML the Wireless Markup Language.

 Coupled for data communications means any form of data communications wireless 802.11b Bluetooth infrared radio internet protocols HTTP protocols email protocols networked direct connections dedicated phone lines dial ups serial connections with RS 232 EIA232 or Universal Serial Buses hard wired parallel port connections network connections according to the Power Line Protocol and other forms of connection for data communications as will occur to those of skill in the art. Couplings for data communications include networked couplings for data communications. Examples of networks useful with various embodiments of the invention include cable networks intranets extranets internets local area networks wide area networks and other network arrangements as will occur to those of skill in the art. The use of any networked coupling among television channels cable channels video providers telecommunications sources and the like is well within the scope of the present invention.

 Driver means a program that controls a device. A device printer disk drive keyboard typically has a driver. A driver acts as translator between the device and software programs that use the device. Each device has a set of specialized commands that its driver knows. Software programs generally access devices by using generic commands. The driver therefore accepts generic commands from a program and then translates them into specialized commands for the device.

 HAVi stands for Home Audio Video interoperability the name of a vendor neutral audio video standard particularly for home entertainment environments. HAVi allows different home entertainment and communication devices such as VCRs televisions stereos security systems and video monitors to be networked together and controlled from one primary device such as a PC or television. Using IEEE 1394 the Firewire specification as the interconnection medium HAVi allows products from different vendors to comply with one another based on defined connection and communication protocols and APIs. Services provided by HAVi s distributed application system include an addressing scheme and message transfer lookup for discovering resources posting and receiving local or remote events and streaming and controlling isochronous data streams.

 Homeplug stands for The HomePlug Powerline Alliance. Homeplug is a not for profit corporation formed to provide a forum for the creation of open specifications for high speed home powerline networking products and services. The homeplug specification is designed for delivery of Internet communications and multimedia to homes through the home power outlet using powerline networking standards.

In this specification a hook in a configuration bundle is a call from within a configuration bundle to one or more executable software programs that are not associated with the call when the call is written into the source code for the bundle. The executable programming may not be associated with the call when the call was written for many reasons. For example the executable programming may be created by an entity that did not manufacture the configuration bundle or the executable programming is written after the configuration bundle is created.

 ID abbreviates identification meaning identification code or identification field. It is a style of reference in this disclosure to refer to user identification codes as user IDs. By convention in this disclosure the field name UserID is used to store a user ID.

 IEEE 1394 is an external bus standard that supports data transfer rates of up to 400 Mbps 400 million bits per second . Products supporting the 1394 standard go under different names depending on the company. Apple which originally developed IEEE 1394 uses the trademarked name FireWire. Other companies use other names such as i.link and Lynx to describe their 1394 products.

A single 1394 port can be used to connect up 63 external devices. In addition to high speed 1394 also supports isochronous data delivering data at a guaranteed rate. This makes it ideal for devices that need to transfer high levels of data in real time such as video.

 The Internet is a global network connecting millions of computers utilizing the internet protocol or IP as the network layer of their networking protocol stacks. The Internet is decentralized by design. Each computer on the Internet is independent. Operators for each computer on the Internet can choose which Internet services to use and which local services to make available to the global Internet community. There are a variety of ways to access the Internet. Many online services such as America Online offer access to some Internet services. It is also possible to gain access through a commercial Internet Service Provider ISP . An internet uncapialized is any network using IP as the network layer in its network protocol stack.

 IP refers to the internet protocol a network layer networking protocol for computer data communications.

 IP address means an identifier for a computer or device on an IP network. Networks using the IP protocol route messages based on the IP address of the destination. The format of an IP address is a 32 bit numeric address written as four numbers separated by periods. Each number can be zero to 255. An example of an IP address is 1.160.10.240.

 ISP means Internet Service Provider a company that provides access to the Internet. For a monthly fee an ISP provides a user identification code often called a username a password and an access phone number or for wide band services an internet protocol address through which to access the Internet. Equipped with proper couplings for data communications such as a modem or cable modem users and companies can then log on to the Internet browse the World Wide Web and access other Internet related services such as USENET and e mail. In servings companies ISPs also provide a direct connection from the company s networks to the Internet.

 JAR is an abbreviation for Java archives JAR is a file format used to bundle components used by a Java applet. JAR files simplify downloading applets because many components .class files images sounds etc. can be packaged into a single file. JAR also supports data compression which further decreases download times. By convention JAR files end with a .jar extension.

 JES stands for Java Embedded Server. JES is a commercial implementation of OSGi that provides a framework for development deployment and installation of applications and services to embedded devices.

 JNI is an abbreviation for Java Native Interface. JNI is a standard programming interface that allows Java code running in a Java Virtual Machine to operate with applications and libraries written in other languages such as C C or assembly language.

 LAN is an abbreviation for local area network. A LAN is a computer network that spans a relatively small area. Many LANs are confined to a single building or group of buildings. However one LAN can be connected to other LANs over any distance via telephone lines and radio waves. A system of LANs connected in this way is called a wide area network WAN . The Internet is an example of a WAN.

 OSGI refers to the Open Services Gateway Initiative an industry organization developing specifications for services gateways including specifications for delivery of service bundles software middleware providing compliant data communications and services through services gateways. The Open Services Gateway specification is a java based application layer framework that gives service providers network operator device makers and appliance manufacturer s vendor neutral application and device layer APIs and functions.

 Server in this specification refers to a computer or device comprising automated computing machinery on a network that manages resources and requests for access to resources. A web server or HTTP server in particular is a server that communicates with browsers by means of HTTP in order to manage and make available to networked computers documents in markup languages like HTML digital objects and other resources. A DMS server in particular is a server that communicates with services gateways to provide service bundles to the services gateways.

 SMF stands for Service Management Framework available from IBM . SMF is a standards based architecture that is designed to be compliant with specifications developed by the cross industry Open Services Gateway Initiative OSGi . SMF is a commercial implementation of OSGi for management of network delivered applications on services gateways.

 TCP refers to the Transmission Control Protocol a transport layer networking protocol for networked computer data communications. TCP provides a so called reliable communications protocol in which a message is broken into packets which are communicated to the message s destination and reassembled into the message completely and in correct sequence. TCP is so often used with IP as its underlying network protocol layer that the two are often spoken of together as the TCP IP protocol suite.

 TCP IP means the Transmission Control Protocol TCP and the Internet Protocol IP operating together. TCP IP is a packet switching protocol suite. TCP establishes a virtual connection between a data source and a data destination. IP specifies that data will be sent from the source to the destination in packets and IP specifies the addressing scheme of the source and the destination. TCP monitors the delivery of the data and the order in which the packets are delivered.

 USB is an abbreviation for universal serial bus. USB is an external bus standard that supports data transfer rates of 12 Mbps. A single USB port can be used to connect up to 127 peripheral devices such as mice modems and keyboards. USB also supports Plug and Play installation and hot plugging.

 WAP refers to the Wireless Application Protocol a protocol for use with handheld wireless devices. Examples of wireless devices useful with WAP include mobile phones pagers two way radios and hand held computers. WAP supports many wireless networks and WAP is supported by many operating systems. Operating systems specifically engineered for handheld devices include PalmOS EPOC Windows CE FLEXOS OS 9 and JavaOS. WAP devices that use displays and access the Internet run microbrowsers. The micrbrowsers use small file sizes that can accommodate the low memory constraints of handheld devices and the low bandwidth constraints of wireless networks.

 World Wide Web or more simply the web refers to a system of internet protocol IP servers that support specially formatted documents documents formatted in markup languages such as HTML HyperText Markup Language XML eXtensible Markup Language WML Wireless Markup Language or HDML Handheld Device Markup Language . The term Web is used in this specification also to refer to any server or connected group or interconnected groups of servers that implement a hyperlinking protocol such as HTTP HyperText Transfer Protocol or WAP Wireless Access Protocol in support of URIs and documents in markup languages regardless of whether such servers or groups of servers are coupled to the World Wide Web as such.

In the exemplary architecture of a client device is coupled for data communication with a services gateway . The services gateway is coupled for data communication WAN . The services gateway provides access for the client device and any LAN on which the client device is operating to a WAN such as the Internet.

A services gateway is in some exemplary architectures an OSGi compatible services gateway . While exemplary embodiments of methods for configuring a client device are described in this specification using OSGi many other applications and frameworks will work to implement the methods of configuring a client device according to the present invention and are therefore also well within the scope of the present invention. Even further commercial implementations of OSGi such as JES and SMF are also useful in implementing methods of configuring client devices according to embodiments of the present invention.

OSGi Stands for Open Services Gateway Initiative. The OSGi specification is a Java based application layer framework that provides vendor neutral application and device layer APIs and functions for various devices using arbitrary communication protocols operating in networks in homes cars and other environments. OSGi works with a variety of networking technologies like Ethernet Bluetooth the Home Audio and Video Interoperability standard HAVi IEEE 1394 Universal Serial Bus USB WAP and powerline communication systems including the Home Powerline Alliance standard known as HomePlug. The OSGi specification is available for free download from the OSGi website at www.osgi.org.

The services gateway of includes a service framework . In many example embodiments the service framework is an OSGi service framework . An OSGi service framework is written in Java and therefore typically runs on a Java Virtual Machine JVM . In OSGi the service framework of is a hosting platform for running services . The term service or services in this disclosure depending on context generally refers to OSGi compliant services.

Services are the main building blocks for creating applications in the OSGi. A service is a group of Java classes and interfaces that implement a certain feature. The OSGi specification provides a number of standard services. For example OSGi provides a standard HTTP service that creates a web server that can respond to requests from HTTP clients.

OSGi also provides a set of standard services called the Device Access Specification. The Device Access Specification DAS provides services to identify a device connected to the services gateway search for a driver for that device and install the driver for the device.

Services in OSGi are packaged with other files images and resources that the services need for execution in a bundle such as the bundle of . A bundle is a Java archive JAR file including one or more services an activator class and a manifest file . An activator class is a Java class that the service framework uses to start and stop a bundle. A manifest file is a standard text file that describes the contents of the bundle .

The services framework in OSGi also includes a service registry . The service registry includes the service s name and an instance of a class that implements the service for each bundle installed on the framework and registered with the service registry . A bundle may request services that are not included in the bundle but are registered on the framework service registry . To find a service a bundle performs a query on the framework s service registry .

The exemplary entities of also include a Device Management Server DMS coupled for data communications with the services gateway though a WAN such as the Internet the World Wide Web or any WAN. The DMS is a server specifically designed to provide retrieve or otherwise deploy bundles to the services gateway . In many typical examples a DMS agent provides protocols for receiving requests for bundles from a gateway authenticating the gateway retrieving a requested bundle and providing the requested bundle to the services gateway.

The exemplary entities of include a Configuration Services Provider CSP . A CSP is a service provider that obtains configuration bundles for client devices and provides them to users. A user is a subscriber or customer of a CSP. A CSP receives configuration parameters from users. When a user or vendor notifies a CSP of the purchase of a client device that needs to be configured the CSP provides an associated configuration bundle for the client device. An associated configuration bundle is a configuration bundle for the client device that has within the bundle configuration parameters necessary for the configuration on the user s services gateway . The CSP of downloads the configuration bundle to the user s services gateway through a DMS. The associated configuration bundle is executed on the services gateway to configure the client device.

The exemplary entities of include a vendor . The vendor sells or otherwise provides client devices to the user. In examples of methods of configuring a client device the vendor also sells or otherwise provides to a user configuration bundles for the client device. In some example embodiments of the present invention the vendor obtains the configuration bundles form a manufacturer of configuration bundles .

The exemplary entities of also include a manufacturer . The manufacturer of is a manufacturer of configuration bundles for use with methods of configuring a client device according to the present invention. The manufacturer of configuration bundles for the client device is in some instances the manufacturer of the client device itself. However the manufacturer of a configuration bundle may be a third party manufacturer of configuration bundles who did not manufacture the client device.

In some examples of the method of the configuration bundle is a configuration bundle specifically designed to configure a particular client device. Because in many examples of the method of the configuration bundles are designed to configure a specific client device various configuration bundles have various designs according to the client device the configuration bundle is designed to configure the network on which the client device will operate the services gateway to which the configuration bundle will be deployed and executed or any other factor that will occur to those of skill in the art.

By contrast in other examples of the method of a device specific configuration bundle cannot be downloaded to the user s services gateway because a device specific configuration bundle is either unavailable or does not exist. In cases where a device specific configuration bundle is unavailable or does not exist the configuration bundle is a generic configuration bundle. The generic configuration bundle includes services and other resources to facilitate the user s entry of configuration parameters to configure the client device on the user services gateway.

The configuration bundle includes a hook . A hook is a call from within a configuration bundle to one or more executable software programs that are not associated with the call when the call is written into the source code for the bundle. The executable programming may not be associated with the call when the call is written for many reasons. For example the executable programming may be created by a different entity from the manufacturer of the configuration bundle or the executable programming is written after the configuration bundle is created. In many typical embodiments the hook is a call to a predefined interface or interface methods and a predefined class. A manufacturer of the configuration bundle provides calls to the predefined interfaces or interface member methods and predefined classes to allow the manufacturer or other entities to integrate customized programming with the configuration bundle such that the customized programming is executed when the hook is called.

Customized programming includes any programming executable by calling the hook. In many typical embodiments of the method of the customized programming includes OSGi services that are executed on a services gateway. In some examples the customized programming includes an OSGi bundle or set of OSGi bundles containing services that carry out customized functions intended by the entity associating the customized programming with the hook. In various alternative embodiments customized programming can be provided by various entities for various purposes such as for example advertisement improved services for configuring client devices monitoring the user s use of the client device facilitating further communication with user or for any other purpose that will occur to those of skill in the art.

Associating customized programming with a hook includes integrating customized programming with the configuration bundle such that when the hook is called the customized programming is executed. Associating customized programming with a hook produces an associated hook. In this specification an associated hook is a hook for which customized programming is available to the configuration bundle for execution when the associated hook is called. If no customized programming is associated with the hook then during execution of the configuration bundle calling the hook does nothing. That is there is no requirement that the hooks in the configuration bundle be associated with executable customized programming. If no customized programming is associated with the hook the hook is called no customized programming is executed and configuration of the client device proceeds without interruption.

In the method of associating customized programming with a hook in a configuration bundle is carried out by a vendor . A vendor associates customized programming with the hook to customize configuration based on services offered by the vendor to advertise for the vendor or provide any other service that will occur to those of skill in the art. In alternative embodiments of the method of associating customized programming with a hook in configuration bundle is carried out by a manufacturer CSP or any other entity that will occur to those of skill in the art.

The method of configuring a client device according to includes downloading a configuration bundle for a client device to a services gateway . In the method of downloading the configuration bundle for the client device to a services gateway includes downloading a configuration bundle from a CSP . In alternative embodiments of the method of downloading the configuration bundle for the client device to a services gateway includes downloading a configuration bundle from a manufacturer a vendor a DMS or any other entity that will occur to those of skill in the art.

In some examples of the method of downloading the configuration bundle to the services gateway includes downloading a configuration bundle having the customized programming stored within the configuration bundle . However in other examples of the method of the customized programming is not stored within the configuration bundle. In such examples the method of includes downloading the customized programming separately from the configuration bundle . In some examples of the method of the customized programming includes an OSGi bundle or set of OSGI bundles that are downloaded separately from the configuration bundle. The OSGi bundles are installed on the services gateway. When the OSGi bundle is downloaded to the services gateway the bundles register their services within the bundle on a services registry. The registered services are available to the configuration bundle and the customized programming.

In some examples of the method of downloading a configuration bundle includes pushing the configuration bundle to the user s services gateway . Pushing means that the CSP knowing the WAN network address of a user s services gateway and being authorized to do so originates a download of a configuration bundle on the CSP s own motion without waiting for a specific request from a user for the download. In various alternative embodiments of the method of pushing the configuration bundle to the user s services gateway is carried out by a vendor manufacturer DMS or any other entity that will occur to those of skill in the art.

The method of includes executing the configuration bundle on the services gateway . Executing the associated configuration results in a configured client device . In many cases the configuration bundle is executed when the client device is detected on the services gateway. That is a service in the configuration bundle polls a configuration port on the services gateway and when it detects the presence of a client device the service is programmed to proceed with configuration at that time. Methods of detecting a client device on a configuration port of a services gateway are described in more detail below.

In other examples executing the configuration bundle includes receiving an instruction from the user to execute the configuration bundle. Using a web browser installed on a computer connected to the services gateway a user through a series of instruction screens instructs the services gateway to execute the configuration bundle. In many embodiments a services gateway according to the present invention has installed directly upon it no user interface hardware no terminal screen no keyboard no mouse although such services gateways do often support HTTP interfaces to services on the gateway. In such embodiments a user can access HTTP screens on the gateway by logging on to a browser on a personal computer or other client device that does support user interface hardware and is coupled to the gateway through a LAN and directing the browser to the services gateway s IP address on the LAN.

In the method of executing the configuration bundle includes calling the associated hook thereby executing the customized programming . In many examples of the method of calling the associated hook includes calling predefined interfaces or interface member methods and a predefined class. If no customized programming is associated with the hook then calling these predefined interfaces or interface member methods and predefined classes does nothing. If no customized programming is associated with the hook the hook is called no customized programming is executed and configuration of the client device proceeds without interruption.

In some examples executing the customized programming occurs transparently to the user. That is the user is not involved in the configuration process and is unaware of the services deployed by calling the customized programming. Consider the following example. A vendor provides an extended warranty for the client device. Customized programming designed to register the client device with the vendor to avail the user of the vendor s extended warranty is associated with the hook. The OSGi framework provides standard services in the DAS to identify the client device by reading information from the client device such as make model and serial number. The OSGi framework also provides a standard HTTP service. Executing the customized programming to register a client device with the vendor includes identifying the make model and serial number of the client device using standard services in the DAS including the make model and serial number of the client device in a pre designed warranty registration and sending the completed pre designed warranty registration to the vendor as an HTML document in an HTTP message. In this example customized programming provides a service to the user that occurs without user intervention.

In other examples of the method of executing the customized programming makes the user aware of the customized programming . For example customized programming provided by a vendor includes advertisements created as HTML documents. The customized programming also includes calls to the standard OSGi HTTP services in the services gateway for purposes of displaying to the user at install time the customized HTML documents. Executing the customized programming calls the standard OSGi HTTP service to send the included HTML documents containing advertisements for the vendor as an HTTP message to a desktop computer on a LAN connected to the services gateway. The user views the HTML document with a web browser installed on the user s desktop computer. By viewing the advertisement from the vendor the user is made aware of the execution of the customized programming.

In the method of associating a hook in a configuration bundle with customized programming includes integrating the customized programming with the configuration bundle through the hook in dependence upon the description of the hook provided by the manufacturer . In some examples of the method of integrating the customized programming with the configuration bundle through the hook includes designing the customized programming having class names and interfaces or interface member methods for the hook that are predetermined by the manufacturer and described in the description of the hook. By designing the customized programming with predefined class names and predefined interfaces or interface member methods received from the manufacturer calling the hook executes the customized programming.

In some example of the method of associating the customized programming with the hook includes entering the customized programming into the configuration bundle. For example a manufacturer receives customized programming from a vendor or CSP and enters the customized programming into the configuration bundle producing a single configuration bundle or set of configuration bundles available for download to the user s services gateway. In other examples of the method of a vendor CSP or any other entity enters the customized programming into the configuration bundle.

In alternate embodiments of the method of the customized programming is not entered into the configuration bundle. In some examples of the method of the customized programming is a separate OSGi bundle or set of OSGi bundles downloadable to the user s services gateway. When the customized programming is installed on the user s services gateway the customized programming registers services within the customized programming with the services registry making the services available for execution by calling the hook.

In some examples the customized programming includes OSGI compliant services and resources programmed in Java. In other examples of the method of the configuration bundle is an OSGi bundle but the customized programming is written in native languages such as C C assembly language or any other language that will occur to those of ordinary skill in the art. One way integrating customized programming written in native languages with an OSGi configuration bundle through a predefined hook includes using the Java Native Interface JNI . JNI provides Java Virtual Machine features to customized programming written in native languages through JNI functions that are called by the native code. The JNI functions called by the native code access the Java Virtual Machine. JNI also includes an Invocation API that allows the Java Virtual Machine to be embedded in the customized programming written in native languages. The Java Virtual Machine that is embedded in the customized programming allows Java code of the OSGi configuration bundle to access libraries and resources in the customized programming written in native languages.

which when included in source code of a configuration bundle will result in a call to a native executable software program named UserHook.exe. The program UserHook.exe need not exist when the configuration bundle is created but is added later by a CSP vendor or manufacturer by integrating the program with the configuration bundle and downloading a copy of the program UserHook.exe in a file system on the services gateway where the configuration bundle is to be executed in a subdirectory named UserHookDirectory. In some alternative examples the program UserHook.exe is entered into the configuration bundle before the configuration bundle is downloaded to the user s services gateway. This pseudocode example includes no provision for error detection. If the program named UserHook.exe is not provided does not exist at configuration time or fails for any reason to execute correctly the configuration bundle is unaware of that fact and continues execution regardless of that fact.

It is useful for explanation to consider an example in C because C is so familiar to persons of skill in the art. Because many configuration bundles according to embodiments of the present invention will be written in Java however it is advantageous also to consider a pseudocode example of a user hook in Java 

The pseudo code example above directs the local JVM to load the class UserHookClass from the directory named UserHookDirectory. The pseudo code instantiates a user hook object named aUserHookObject and executes the public member method named UserHookMethod . A CSP vendor or other manufacturer wishing to integrate customized programming with the configuration bundle provides a class named UserHookClass including a public member method named UserHookMethod . The CSP vendor or manufactuer stores the class UserHookClass in a local subdirectory named UserHookDirectory.

In this example again there is no error check no exception thrown. If UserHookClass is absent or fails to load for any reason a bundle containing such exemplary code simply continues execution unabated. If the new call fails for any reason to instantiate aUserHookObject a bundle containing such exemplary code simply continues execution unabated. If UserHookMethod is missing from the class or fails to execute correctly for any reason a bundle containing such exemplary code simply continues execution unabated.

In the method of detecting a client device is carried out through a polling bundle . In some example embodiments the polling bundle is an OSGi bundle. An OSGi framework provides standard services in the DAS for checking for the connection of devices on the services gateway . In some examples the polling bundle includes specifically programmed polling services within the bundle. In alternative examples the polling bundles queries a services registry on an OSGi framework operating on the services gateway to identify standard OSGi services for checking for the connection of a device on the services gateway. In the example of the polling bundle uses the OSGi standard services to poll the serial interface and detect the client device .

The method of includes reading a client device identifier from the client device when polling detects a client device connected to a serial interface. A client device identifier is any identification that sufficiently identifies the client device such that an appropriate configuration bundle for the client device may be obtained and executed. Exemplary client device identifiers include manufacturer name model name serial number or any other client device identifier as will occur to those of skill in the art.

The client device identifier may be represented in data by a record such as the client device identifier record of . The client device identifier record is stored in non volatile memory on the client device . The client device identifier record includes a deviceID field representing a serial number make and model or any other identification of the device that will occur to those of skill in the art. The device identifier record of also includes a vendorID field identifying the vendor of the client device. In some examples a vendor may place a unique identifier in the vendorID field of the client device before selling the client device or the manufacturer many identify the vendor by vendorID before shipping the client device to the vendor.

In method of a polling bundle carries out reading a client device identifier from the client device . In some example embodiments the polling bundle is an OSGi bundle. An OSGi framework provides standard services in a DAS for reading device identifiers from a device connected to the services gateway . In some exemplary methods of detecting client devices and requesting configuration bundles a polling bundle includes specifically programmed services within the bundle to read the client device identifier. In alternative examples the polling bundle queries a services registry on an OSGi framework operating on the services gateway to identify standard OSGi services for reading a client device identifier. In such embodiments the polling bundle then uses the OSGi standard services to read a client device identifier from the client device.

A DAS in an OSGi framework often also provides standard services to identify and install a driver for the client device. In embodiments that utilize such DAS services when a polling bundle detects a client device and identifies the client device the polling bundle queries the service registry on the service framework of the services gateway to identify standard services to obtain and install a driver to facilitate communication between the services gateway and the client device.

In some exemplary methods of detecting client devices and requesting configuration bundles the configuration bundle for the client device is pushed onto the services gateway . In such exemplary embodiments requesting the configuration bundle includes requesting the configuration bundle stored within the services gateway. In other exemplary embodiments where the configuration bundle is not pushed onto the services gateway requesting a configuration bundle includes requesting a configuration bundle from a DMS.

A request for a configuration bundle can be represented in data as a record such as for example the bundle request record of . The bundle request record includes a deviceID field identifying the client device to be configured. The bundle request record also includes a gatewayID field identifying the gateway requesting the associated configuration bundle. The bundle request record of includes a vendorID field identifying the vendor of the client device . In some examples the gatewayID and the DeviceID together uniquely identify a client device specific configuration bundle for the device. In some cases the client device specific configuration bundle is associated with user provided configuration parameters. In other examples the bundle request record includes a userID identifying the user.

Requesting a configuration bundle in many embodiments of the present invention is carried out by a requesting bundle such as the requesting bundle of . In some exemplary embodiments according to the present invention the requesting bundle is an OSGi bundle including services capable of sending a request for an associated configuration bundle to a DMS. The OSGi framework provides a standard HTTP service. In some examples a requesting bundle sends a bundle request to the DMS as a HTML document in an HTTP message. The method of includes authenticating the services gateway . Authenticating the gateway can be carried out for example by comparing the gatewayID field of the bundle request record with a gateway database . In the method of authenticating the services gateway is carried out by a DMS. The DMS authenticates the services gateway by comparing the services gateway identifier with a database of gateway identifiers registered with the DMS. When the services gateway is authenticated the method of includes retrieving the configuration bundle stored on the DMS. The DMS downloads the configuration bundle to the services gateway for execution.

When the services gateway is authenticated the DMS identifies the configuration bundle for the client device stored on the DMS. The DMS identifies a configuration bundle for the client device in dependence upon the deviceID field and the gatewayID field of the bundle request record . The DMS downloads the identified configuration bundle to the services gateway for execution. Alternatively the DMS requests the configuration bundle from a vendor identified by the vendorID field of the bundle request record .

In the example of the configuration bundle includes services and other resources for configuring the client device in accordance with methods of the present invention. In some cases the configuration bundle includes a driver for the client device . In some examples of configuring a client device according to methods of the present invention the configuration bundle is an OSGi bundle including services for configuring the client device. The OSGi configuration bundle is executed on an OSGi services gateway to configure the client device. Because the in many examples of the method of the configuration bundle is designed to configure a specific client device in many examples various configuration bundles have various designs according to the client device the configuration bundle is designed to configure the network on which the client device will operate the services gateway to which the configuration bundle will be deployed and executed or any other factor that will occur to those of skill in the art.

The configuration bundle includes a hook . A hook is a call from within a configuration bundle to one or more executable software programs that are not associated with the call when the call is written into the source code for the bundle. The executable programming may not be associated with the call when the call is written for many reasons. For example the executable programming may be created by a different entity from the manufacturer of the configuration bundle or the executable programming is written after the configuration bundle is created. In many typical embodiments the hook is a call to a predefined interface or interface methods and a predefined class. A manufacturer of the configuration bundle provides calls to the predefined public member method and predefined class to allow the manufacturer or other entities to integrate customized programming with the configuration bundle such that the customized programming is executed when the hook is called. A manufacturer of the configuration bundle provides hooks to allow the manufacturer or other entities involved in the configuration the flexibility to associate customized programming with the hook at a later time.

In some examples of the method of receiving at the vendor a configuration bundle for the client device from a manufacturer includes individually downloading the configuration bundle from for example a manufacturer s website. Alternatively receiving at the vendor a configuration bundle for the client device from a manufacturer includes receiving configuration bundles as a complete database of configuration bundles indexed for example by make model or client device serial number. In many cases the database is stored on a compact disc or other form of non volatile computer memory. Receiving at the vendor a configuration bundle for the client device from a manufacturer includes receiving updates to configuration bundles previously received at the vendor .

The method of includes receiving at a vendor user provided configuration parameters for the client device from a user . Although a vendor is generally a business organization a vendor as depicted in comprises particularly a vendor s automated computing machinery upon which is carried out processing steps in methods for configuring client devices according to embodiments of the present invention.

User provided configuration parameters typically include configuration parameters known or available to the user that concern the user s services gateway network or other configuration parameters that define the context in which the client device will operate. Examples of user provided configuration parameters include a user s LAN mask a user s IP default gateway address a user s IP address a user s LAN name a user s DMS name a users link type Ethernet Bluetooth 802.11 wireless network name wireless encryption key or any other user provided configuration parameters that will occur to those of skill in the art.

In some embodiments of the present invention some additional configuration parameters such as a client device identifier are made known to the vendor by the purchase of the client device. That is parameters such as serial number make and model of the client device are available to the vendor at the point of sale and therefore the vendor may not receive these configuration parameters from the user.

In the method of receiving at a vendor user provided configuration parameters for the client device includes storing the user provided configuration parameters in a database . By storing user provided configuration parameters the vendor provides an additional service to the user. The user provides the user provided configuration parameters one time to the vendor . The vendor automates the configuration for a user reducing the user s involvement in configuration with each additional client device the user purchases from the vendor. In this way a user is encouraged to continue shopping with the vendor because configuring client devices proceeds automatically for each client device purchased after the vendor received the user provided configuration parameters .

In the method of receiving at the vendor a configuration bundle for the client device from a manufacturer includes storing the configuration bundle in a database . The database of is indexed according to a client device identifier . A vendor receives the configuration bundle from the manufacturer and stores the configuration bundles in a database .

In one example a vendor receives configuration bundles from many manufacturers regardless the user s purchases. The vendor maintains a current database of all the configuration bundles for all the manufacturers whose products the vendor sells. When the vendor sells the client device a configuration bundle for the client device is available in the vendor s database for purchase or for the vendor to provide as an additional customer service.

In the database of the configuration bundles are indexed according to client device identifier . Examples of client device identifiers include manufacturer name and model number serial number or any other client device identifier that will occur to those of skill in the art. By indexing the database by client device identifier the vendor can retrieve the appropriate configuration bundle for the client device when the user purchases the client device.

The method of includes receiving at a vendor a description of the hook. In some examples of the method of a description of the hook includes a predefined interfaces or interface member methods and predefined class names for the hook such that customized programming can be integrated with the configuration bundle through the hook so that calling the associated hook executes the customized programming. In some examples of the method of the description of the hook is included within a specification produced for each configuration bundle manufactured by the manufacturer. A vendor interested in associating customized programming with the hook receives the predefined interfaces or interface member methods and predefined class names for the hook and designs customized programming to be executed when the hook is called.

When the user provided configuration parameters have been associated with the configuration bundle the associated configuration bundle is ready for deployment to the user s services gateway. In many cases more than one configuration bundle are associated to create a complete set of associated configuration bundles such that when the set of configuration bundles are deployed onto the user s services gateway and executed the user s client device is configured.

In the method of associating the user provided configuration parameters with the configuration bundle for the client device is carried out by the vendor . In one example the vendor receives the user provided configuration parameters at the point of sale and receives a configuration bundle from a manufacturer . The vendor associates the user provided configuration parameters with the configuration bundle thereby creating an associated configuration bundle for the user.

Consider an example of a vendor operating a website. A user purchases a client device from the vendor through the vendor s website. During the purchase a vendor s website includes a series of screens requesting user provided configuration parameters . Upon completion of the purchase the vendor receives a configuration bundle from a manufacturer or retrieves a configuration bundle from a database of configuration bundles already received from the manufacturer . The vendor associates the user provided configuration parameters with the configuration bundle .

In the method of associating the user provided configuration parameters for the client device with the configuration bundle for the client device includes retrieving the configuration bundle from a database in dependence upon a client device identifier . When the vendor sells the client device to the user the vendor retrieves the appropriate configuration bundle from the vendor s database .

If the user is a previous customer of the vendor the vendor may have user provided configuration parameters for the user stored in the vendor s database. In the method of associating the user provided configuration parameters for the client device with the configuration bundle for the client device includes retrieving user provided configuration parameters from a database in dependence upon a user identifier and entering the user provided configuration parameters into the configuration bundle .

In the method of associating user provided configuration parameters with the configuration bundle includes entering the user provided configuration parameters into the configuration bundle retrieved from the vendor s database . In one example entering the user provided configuration parameters into the configuration bundle received from the manufacturer is carried out through a website run by the vendor . When a user purchases a client device through the vendor s website the vendor s website provides screens prompting the user to input user provided configuration parameters. The vendor receives the user provided configuration parameters through the web site and the vendor enters the user provided configuration parameters into the configuration bundle . Alternatively the associated configuration bundle is then downloaded to the user s services gateway downloaded to a DMS or stored at the vendor .

The method of includes integrating customized programming with a hook . In some examples of the method of integrating the customized programming with the configuration bundle includes designing customized programming having the predefined class names and predefined interfaces or interface member methods for the hook that are predetermined by the manufacturer and described in the description of the hook. By designing the customized programming with predefined class names and predefined interfaces or interface member methods received from the manufacturer calling the hook executes the customized programming.

In the example of the configuration bundle includes services and other resources for configuring the client device in accordance with methods of the present invention. In some cases the configuration bundle may include a driver for the client device . In some examples of configuring a client device according to methods of the present invention the configuration bundle is an OSGi bundle including services for configuring the client device. The OSGi configuration bundle is executed on an OSGi services gateway to configure the client device. Because in many examples of the method of the configuration bundle is designed to configure a specific client device various configuration bundles have various designs according to the client device the configuration bundle is designed to configure the network on which the client device will operate the services gateway to which the configuration bundle will be deployed and executed or any other factor that will occur to those of skill in the art.

The configuration bundle includes a hook . A hook is a call from within a configuration bundle to one or more executable software programs that are not associated with the call when the call is written into the source code for the bundle. The executable programming may not be associated with the call when the call is written for many reasons. For example the executable programming may be created by a different entity from the manufacturer of the configuration bundle or the executable programming is written after the configuration bundle is created. In many typical embodiments the hook is a call to a predefined interface or interface methods and a predefined class. A manufacturer of the configuration bundle provides calls to the predefined public member method and predefined class to allow the manufacturer or other entities to integrate customized programming with the configuration bundle such that the customized programming is executed when the hook is called. A manufacturer of the configuration bundle provides hooks to allow the manufacturer or other entities involved in the configuration the flexibility to associate customized programming with the hook at a later time.

In the method of receiving the configuration bundle for the client device is carried out by a CSP . The CSP receives configuration bundles for the client device from the manufacturer for a user . A user is typically a subscriber with the CSP . When the user purchases or obtains a client device to be configured the CSP provides the appropriate configuration bundle to the user. A user may request the configuration bundle for the client device from the CSP by calling the CSP sending the CSP an email or any other method of requesting the CSP of the new client device to be configured. Alternately the vendor of the client device notifies the user s CSP of the purchase of the client device .

In some examples of the method of receiving from a manufacturer a configuration bundle for a client device includes individually downloading the configuration bundle from for example a manufacturer s website. Alternatively receiving from a manufacturer a configuration bundle for a client device includes receiving configuration bundles as a complete database of configuration bundles indexed for example by make model or client device serial number. In many cases the database is stored on a compact disc or other form of non volatile computer memory. Receiving from a manufacturer a configuration bundle for a client device also includes receiving updates to configuration bundles previously received by the CSP .

The method of includes receiving from a vendor vendor provided configuration parameters for the client device . A vendor is a seller retailer or provider of the client device to the user. In many examples according to methods of the present invention the vender provided configuration parameters include a client device identifier. A client identifier sufficiently identifies the client device such that the appropriate configuration bundle may be received by for example a CSP. Examples of client device identifiers are manufacturer s name and manufacturer s model number a serial number or any other client device identifier that will occur to those of skill in the art.

In the method of receiving from a vendor vendor provided configuration parameters for the client device is carried out by a CSP . In one example a CSP receives vendor provided configuration parameters such as a client identifier identifying the client device purchased by a user from the vendor at the point of sale by receiving an email telephone call or any other method of receiving vendor provided configuration parameters that will occur to those of skill in the art.

Consider an example of a vendor operating a website. A user purchases a client device from the vendor through the vendor s website. During the purchase a vendor s website includes a screen requesting contact information for the user s CSP . Upon completion of the purchase the vendor provides vendor provided configuration parameters to the CSP . In this way the vendor provides vendor provided configuration parameters to the CSP automatically when the user purchases the client device .

The method of includes receiving from a user user provided configuration parameters for the client device . User provided configuration parameters typically include configuration parameters known or available to the user that concern the user s services gateway network or other configuration parameters that define context in which the client device will operate. Examples of user provided configuration parameters include a user s LAN mask a user s IP default gateway address a user s IP address a user s LAN name a user s DMS name a users link type Ethernet Bluetooth 802.11 wireless network name wireless encryption key or any other user provided configuration parameters that will occur to those of skill in the art.

In many examples of methods of configuring a client device according to the present invention receiving from a user user provided configuration parameters is carried out by a CSP . A CSP receives the user provided configuration parameters one time and stores the user provided configuration parameters in a database. The CSP maintains the user provided configuration parameters for the user. When a user subsequently purchases a client device the user provided configuration parameters are available in the CSP s database. Configuration of the client device therefore is carried out without requiring additional user provided configuration parameters.

In the method of receiving from a manufacturer a configuration bundle for a client device includes storing the configuration bundle in a database . In the method of storing the configuration bundle in a database is carried out by a CSP . A CSP receives the configuration bundle from the manufacturer and stores the configuration bundles in a database . In one example a CSP receives configuration bundles from many manufacturers regardless the CSP s users. The CSP maintains a current database of all the configuration bundles for all the manufacturers that the service provider supports.

In the database of the configuration bundles are indexed according to client device identifier . Examples of client device identifiers include manufacturer name and model number serial number or any other client device identifier that will occur to those of skill in the art. By indexing the database by client device identifier the CSP can retrieve the appropriate configuration bundle for the client device to be configured when the CSP is notified of the client device in need of configuration.

In the method of receiving from a user user provided configuration parameters for the client device includes storing the configuration parameters in a database . In many examples of the method of the present invention storing the configuration parameters in a database is carried out by a CSP. The CSP receives configuration parameters from a user of the configuration services. The CSP receives the user provided configuration parameters one time and stores the user provided configuration parameters.

By storing user provided configuration parameters the CSP automates the configuration for a user reducing the user s involvement in configuration with each additional client device on the user s gateway. Upon receipt of the vendor provided configuration parameters for example a client device identifier the CSP can retrieve the appropriate configuration bundle and the user provided configuration parameters without further user intervention.

In the method of receiving a description of the hook is carried out by the CSP. In some examples of the method of a description of the hook includes predefined interfaces or interface member methods and predefined class names for the hook such that customized programming can be integrated with the configuration bundle through the hook so that calling the associated hook executes the customized programming. In some examples of the method of the description of the hook is included within a specification produced for each configuration bundle manufactured by the manufacturer. A vendor interested in associating customized programming with the hook receives the predefined interfaces or interface member methods and predefined class names for the hook and designs customized programming to be executed when the hook is called.

When the user provided configuration parameters and the vendor provided configuration parameters have been associated with the configuration bundle the associated configuration bundle is ready for deployment to the user s services gateway. In many cases more than one configuration bundle are associated to create a complete set of associated configuration bundles such that when the set of configuration bundles are deployed onto the user s services gateway and executed the user s client device is configured.

In the method of associating the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle for the client device is carried out by a CSP. In some examples the CSP receives a notification that the user has purchased or otherwise obtained a client device . The CSP receives the vendor provided configuration parameters such as a client device identifier. The CSP receives the appropriate configuration bundle for the client device from a manufacturer. The CSP may then retrieve the user provided configuration parameters from a database maintained by the CSP. The CSP then associates the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle for the client device .

In the method of associating the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle for the client device includes retrieving the configuration bundle from a database in dependence upon a client device identifier and retrieving the user configuration parameters from a database in dependence upon a user identifier .

In the method of associating the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle includes entering the user provided configuration parameters into the configuration bundle received from the manufacturer . Associating the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle also includes entering and vendor provided configuration parameters into the configuration bundle received from the manufacturer .

In method of associating the vendor provided configuration parameters and the user provided configuration parameters with the configuration bundle is carried out by a CSP . In one example entering the user provided configuration parameters into the configuration bundle received from the manufacturer and entering and vendor provided configuration parameters into the configuration bundle received from the manufacturer is carried out through a website run by the CSP . Upon purchasing a client device a vendor logs onto the CSP s website. The vendor provides the vendor provided configuration parameters through the web site and the CSP enters the vendor provided configuration parameters into the configuration bundle for the client device . The vendor also identifies the user by userID name or any other user identifier . The CSP retrieves the user provided configuration parameters stored in a database indexed by userID name or any other user identifier and enters the user provided configuration parameters into the configuration bundle for the client device .

If the CSP has not received the user provided configuration parameters from the user the CSP can receive the user provided configuration parameters from the user through the CSP s website. The CSP receives the user provided configuration parameters through the website and enters the user provided configuration parameters into the configuration bundle for the client device .

In another example of the method of includes integrating customized programming with a hook . In some examples of the method of integrating the customized programming with the configuration bundle includes designing the customized programming having the predefined class names and predefined interfaces or interface member methods for the hook that are predetermined by the manufacturer and described in the description of the hook. By designing the customized programming with predefined class names and predefined interfaces or interface member methods received from the manufacturer calling the hook executes the customized programming.

The method of includes detecting the client device . In the method of detecting a client device includes polling a serial interface of a services gateway for the connection of a client device to the services gateway . Polling a serial interface means periodically checking the serial interface for the connection of a client device.

In the method of detecting the client device is carried out through a polling bundle . In some example embodiments the polling bundle is an OSGi bundle. An OSGi framework provides standard services in the DAS for checking for the connection of devices on the services gateway . In some examples the polling bundle includes specifically programmed polling services within the bundle. In alternative examples the polling bundle queries a services registry on an OSGi framework operating on the services gateway to identify standard OSGi services for checking for the connection of a device on the services gateway.

The method of includes reading a client device identifier from the client device . A client device identifier is any identification that sufficiently identifies the client device. Exemplary client device identifiers include manufacturer name model name serial number or any other client device identifier as will occur to those of skill in the art.

The client device identifier may be represented in data by a record such as the client device identifier record of . The client device identifier record is stored in non volatile memory on the client device . The client device identifier record includes a deviceID field representing a serial number make and model or any other identification of the device that will occur to those of skill in the art.

In method of a polling bundle carries out reading a client device identifier from the client device . In some example embodiments the polling bundle is an OSGi bundle. An OSGi framework provides standard services in a DAS for reading device identifiers from a device connected to the services gateway. In some examples according to the method of a polling bundle includes specifically programmed services within the bundle to read the client device identifier. In alternative examples the polling bundle queries a services registry on an OSGi framework operating on the services gateway to identify standard OSGi services for reading a client device identifier. In such embodiments the polling bundle then uses the OSGi standard services to read a client device identifier from the client device.

A DAS in an OSGi framework often also provides standard services to identify and install a driver for the client device. In embodiments that utilize such DAS services when a polling bundle detects a client device and reads the client device identifier the polling bundle queries the service registry on the service framework of the services gateway to identify standard services to obtain and install a driver to facilitate communication between the services gateway and the client device.

The method of includes requesting a configuration bundle for the client device in dependence upon the client device identifier . The configuration bundle includes services and other resources for configuring the client device in accordance with methods of the present invention. In some cases the configuration bundle may include a driver for the client device . In some examples of configuring a client device according to methods of the present invention the configuration bundle is an OSGi bundle including services for configuring the client device. The OSGi configuration bundle is executed on an OSGi services gateway to configure the client device. Because the configuration bundle is designed to configure a specific client device in many examples various configuration bundles have various designs according to the client device the configuration bundle is designed to configure the network on which the client device will operate the services gateway to which the configuration bundle will be deployed and executed or any other factor that will occur to those of skill in the art.

In some examples of the present invention requesting a configuration bundle for the client device includes requesting an associated configuration bundle. An associated configuration bundle is a configuration bundle with user provided configuration parameters contained within the bundle such that when executed on the user s services gateway the associated configuration bundle configures the client device without requiring the user to enter configuration parameters. Examples of user provided configuration parameters include a user s LAN mask a user s IP default gateway address a user s IP address a user s LAN name a user s DMS name a users link type Ethernet Bluetooth 802.11 wireless network name wireless encryption key or any other user provided configuration parameters that will occur to those of skill in the art.

In the method of requesting a configuration bundle for the client device includes requesting the configuration bundle for the client device from a DMS. The DMS is a server specifically designed to provide bundles to the services gateway . Alternatively requesting a configuration bundle for the client device includes requesting an associated configuration bundle from a vendor manufacturer or CSP.

A request for a configuration bundle is represented in a data as a record such as the bundle request record of . The bundle request record includes a deviceID field identifying the client device to be configured. The bundle request record also includes a gatewayID field identifying the gateway requesting the associated configuration bundle. In some examples the gatewayID and the DeviceID together uniquely identify the configuration bundle for the device. In other example the bundle request record includes a userID identifying the user.

Requesting a configuration in many embodiments of the present invention is carried out by a requesting bundle such as the requesting bundle of . In some exemplary embodiments according to the present invention the requesting bundle is an OSGi bundle including services capable of sending a request for an associated configuration bundle to a DMS. The OSGi framework provides a standard HTTP service. In some examples a requesting bundle sends a bundle request to the DMS as a HTML document in an HTTP message.

The method of includes authenticating the services gateway . Authenticating the gateway can be carried out for example by comparing the gatewayID field of the bundle request record with a gateway database . In the method of authenticating the services gateway is carried out by a DMS. The DMS authenticates the services gateway by comparing the services gatewayID with a database of gateway identifiers registered with the DMS. When the services gateway is authenticated the DMS attempts to identify an associated configuration bundle for the client device stored on the DMS or attempts to retrieve an associated configuration bundle from a CSP or vendor.

The method of includes downloading a generic configuration bundle . A generic configuration bundle is a configuration bundle for carrying out methods of configuring a client device in accordance with the present invention when a configuration bundle specific to the client device is not available either because the configuration bundle does not exist or the services gateway does not have access to the associated configuration bundle through a DMS CSP vendor or manufacturer. The generic configuration bundle includes services and other resources to facilitate the user s entry of user provided configuration parameters to configure the client device .

The method of executing the configuration bundle includes executing the generic configuration bundle . In many cases the generic configuration bundle is executed when the client device is detected on the services gateway . In other examples executing the generic configuration bundle includes receiving an instruction from the user to execute the generic configuration bundle . Using a web browser installed on a computer connected to the services gateway a user can through a series of instruction screens instruct the services gateway to execute the generic configuration bundle. In many embodiments a services gateway according to the present invention has installed directly upon it no user interface hardware no terminal screen no keyboard no mouse although such services gateways do often support HTTP interfaces to services on the gateway. In such embodiments a user can access HTTP screens on the gateway by logging on to a browser on a personal computer or other client device that does support user interface hardware and is coupled to the gateway through a LAN and directing the browser to the services gateway s IP address on the LAN.

In the method of executing the configuration bundle includes calling the associated hook . Calling the associated hook executes the customized programming . In many examples of the method of calling the associated hook includes calling predefined interfaces or interface member methods and a predefined class. If no customized programming is associated with the hook then calling these predefined interfaces or interface member methods and predefined classes does nothing. If no customized programming is associated with the hook the hook is called no customized programming is executed and configuration of the client device proceeds without interruption.

In some examples of the method of reading a configuration prompt from a client device is carried out by services in an OSGi framework called by the generic configuration bundle . The generic configuration bundle may call services from within the generic configuration bundle that are programmed specifically to read the configuration prompt from the client device. In alternative examples of the method of the generic configuration bundle queries a services registry on the framework to locate a service or set of services capable of reading the configuration prompt from the client device.

The method of includes providing the configuration prompt to a user . In some embodiments providing the configuration prompt to the user is carried out by providing the prompt in text at a command line prompt such as the one provided by the command cmd.exe in modern versions of Microsoft Windows or any other text based prompt that will occur to those of skill in the art. In many embodiments a services gateway according to the present invention has installed directly upon it no user interface hardware such as a terminal screen keyboard or mouse. In such embodiments providing the prompt to a user includes communicating the prompt across a LAN to another client device such as a personal computer or workstation having connected to it user interface hardware such as a terminal screen keyboard mouse and so on. That is in many example embodiments of the method of providing the configuration prompt to a user includes writing the configuration prompt to a terminal screen on a computer connected to the services gateway across a LAN .

In many examples of the method of configuration prompts stored on the client device are text only prompts. As text only the configuration prompts are in many cases unfriendly or complicated to users unfamiliar with configuring the client device . In the method of providing the configuration prompt to a user includes creating a configuration screen for the configuration prompt read from the client device . The configuration screen of the method of is a user friendly GUI data entry screen designed to facilitate the user s entry of user provided configuration parameters. In many examples of the method of multiple configuration screens are created to walk the user through the configuration process. In some examples of the method of creating the configuration screens includes creating the configuration screen as an HTML document and sending the configuration prompt to the user as an HTML document in an HTTP message.

In many embodiments where the services gateway has no user interface hardware the services gateway does support HTTP. In such embodiments a user can access the HTML configuration screens sent to the user as HTTP messages by logging on to a browser on a personal computer as or other client device that does support user interface hardware and is coupled to the services gateway through a LAN and directing the browser to the services gateway s IP address on the LAN.

In some examples of the method of creating the configuration screens is carried out by OSGi services contained within the generic configuration bundle . In alternative examples the generic configuration bundle queries a services registry on the framework to identify services useful in creating configuration screens .

The method of also includes receiving configuration parameters from a user . In the method of receiving configuration parameters from a user comprises receiving an HTML document in an HTTP message. Using a web browser installed on a computer connected through a LAN to the services gateway a user accesses the configuration screen provided to the user and enters the user provided configuration parameters. Examples of user provided configuration parameters include a user s LAN mask a user s IP default gateway address a user s IP address a user s LAN name a user s DMS name a users link type Ethernet Bluetooth 802.11 wireless network name wireless encryption key or any other user provided configuration parameters that will occur to those of skill in the art.

The method of includes writing the configuration parameters to the client device . In some examples of the method of writing the configuration parameters to the client device is carried out by services in an OSGi framework. That is in such embodiments the generic configuration bundle can query a services registry in an OSGi framework to identify a service or set of services capable of writing the user provided configuration parameters to the client device.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

