---

title: Method and system for managing complex database information
abstract: Methods and systems are described for storage and retrieval of complex data. An example method may store a first data item in a first data table included in a database. An aggregated data object may be generated based on preprocessing the first data table based on satisfying a predefined retrieval query. The aggregated data object may be stored based on a preprocessed format in a cluster table included in the database. The first data table may be updated, and the aggregated data object may be updated in the cluster table based on the update of the first data table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07822775&OS=07822775&RS=07822775
owner: SAP AG
number: 07822775
owner_city: Walldorf
owner_country: DE
publication_date: 20070720
---
Complex data models may include storage of information in a large number of data tables for example in a relational database. Retrieval of needed information may thus require a significant amount of time to retrieve the information from the data tables and to process requested information especially if underlying data models are based on mass data. For example in manufacturing environments such as automotive assembly environments a database may store massive amounts of information associated with various parts that may be needed to assemble automobiles. Further for example many of the parts may vary from one particular model to another. For example a door of a minivan may include very different characteristics from a door of a compact automobile. Additionally a rear door of a hatchback automobile may include very different characteristics and may include very different related parts from a driver side door of a large sedan automobile. Thus an automobile door may include many variations. Databases for storing information associated with such parts may include very large amounts of related information for all variations needed for assembling various models of automobiles with variations within each model. Further such information may change over time and may thus need to be updated within the database.

Integrated Product and Process Engineering iPPE may include a master data model for configurable products materials that have many variants. iPPE may support concurrent product development and production process design which may reduce time to market. It may include the collection of engineering and manufacturing specific information such as bills of materials BOMs routings and line designs in a single integrated model and may be particularly suited to repetitive manufacturing of products with a large number of variants.

However when information is stored in conventional data tables in a database data may need to be retrieved from each table included in the data base that is associated with the data model. A very large application object with massive amounts of data may require processing by multiple interfaces when reading large amounts of this data which may adversely affect performance. For example for retrieval of iPPE data multiple application programming interfaces APIs may be invoked to retrieve all information that may be needed by various applications. The retrieval time and processing time for execution of such APIs in reading information from a database may significantly affect the performance of a system such as a manufacturing system.

Thus it may be desirable to provide techniques for managing storage and retrieval of complex database information.

According to one general aspect a system includes a database storage area including a plurality of data tables configured to store relational database data items and a cluster table configured to store data objects. The system further includes a data hub manager including a data table update processor configured to store a first data item in a first one of the data tables an aggregated object processor configured to generate an aggregated data object based on preprocessing the first data table based on satisfying a predefined retrieval query and a data hub storage manager configured to store the aggregated data object based on a preprocessed format in the cluster table. The data table update processor may be configured to update the first data table and the data hub manager may further include a data hub update processor configured to update the aggregated data object in the cluster table based on the updating the first data table.

According to yet another aspect a method includes storing a first data item in a first data table included in a database. The method further includes generating an aggregated data object based on preprocessing the first data table based on satisfying a predefined retrieval query and storing the aggregated data object based on a preprocessed format in a cluster table included in the database. The method further includes updating the first data table and updating the aggregated data object in the cluster table based on the updating the first data table.

According to yet another aspect a computer program product is tangibly embodied on a computer readable medium and is configured to cause a data processing apparatus to store a first data item in a first data table included in a database. The computer program product is further configured to cause the data processing apparatus to generate an aggregated data object based on preprocessing the first data table based on satisfying a predefined retrieval query and store the aggregated data object based on a preprocessed format in a cluster table included in the database. The computer program product is further configured to cause the data processing apparatus to update the first data table and update the aggregated data object in the cluster table based on the updating of the first data table.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

According to an example embodiment the data hub manager may include a database storage area for storing database information. The database storage area may include data tables configured to store relational database data items and a cluster table configured to store data objects. For example the data tables may be configured to store normal data records associated with a relational database. According to an example embodiment the data tables may be configured to store data items including integrated Product and Process Engineering iPPE objects and the data tables may include iPPE data tables.

According to an example embodiment the cluster table may be configured to store aggregated data objects . For example the aggregated data objects may include data combined from multiple tables such as the data tables into one physical record in the database. For example the aggregated data objects may include data written to the database in compressed form or in a binary format that is not easily interpreted by a human or by programs or applications external to the data hub manager . According to an example embodiment the aggregated data objects may be very large in comparison to any one of the data tables . According to an example embodiment retrieval of data from the cluster table may be very fast if a primary key is known.

According to an example embodiment the cluster table may be defined in the data dictionary as a transparent table. According to an example embodiment special language elements such as EXPORT TO DATABASE IMPORT FROM DATABASE and DELETE FROM DATABASE may be used to process data associated with the cluster table . For example an EXPORT instruction may be used to update the aggregated data object based on data items stored in data tables 

According to an example embodiment the data hub manager may include a data table update processor configured to store data items in the data tables . For example the data table update processor may be configured to store a first data item in a first one of the data tables 

According to an example embodiment the data hub manager may include an aggregated object processor configured to generate an aggregated data object based on preprocessing the first data table based on satisfying a predefined retrieval query. For example the aggregated object processor may be configured to generate one of the aggregated data objects based on preprocessing one or more of the data tables . For example the preprocessing may be based on satisfying a predefined retrieval query. Thus if a particular retrieval query is used many times by a user of a database having mass data the retrieval query may be specified by the user to preprocess data from the normal data tables as well as data from other sources to generate one of the aggregated data objects which may be stored in the cluster table in compressed form.

According to an example embodiment the data hub manager may include a data hub storage manager configured to store the aggregated data objects based on a preprocessed format in the cluster table . Thus when the user needs to retrieve the data based on the retrieval query one of the aggregated data objects may be retrieved as a result of executing one instruction and one fetch from storage instead of executing several instructions to process multiple fetches from the data tables . The data item information may thus be stored simultaneously in the data tables and in the cluster table so that the user may retrieve desired information from the data tables or from the cluster table

According to an example embodiment the data table update processor may be configured to update the data tables and the data hub manager may include a data hub update processor configured to update one of the aggregated data objects in the cluster table based on the update of the data table 

According to an example embodiment the data hub manager may include a database receiving device configured to receive a request based on the predefined retrieval query. For example the request may be received from the user via the user interface . According to an example embodiment the data hub manager may include a data hub retrieval manager configured to retrieve one of the aggregated data objects from the cluster table in response to the request.

According to an example embodiment the database storage area may include a timestamp data table configured to store indicators of times associated with updates of data items in tables. For example the timestamp data table may be configured to store indicators of times associated with updates of data items in the data tables . For example the timestamp data table may be further configured to store indicators of times associated with updates of the cluster table for example updates based on data items from sources external to the data hub.

According to an example embodiment the data table update processor may be configured to update one of the data tables including updating data items in the data tables and storing in the timestamp data table included in the database an indicator indicating a time associated with the update of the data table.

According to an example embodiment the data hub update processor may be configured to update one of the aggregated data objects in the cluster table including retrieving the indicator indicating the time associated with the update of the data table and storing the updated aggregated data object and the indicator indicating the time associated with the update of the data table in the cluster table .

According to an example embodiment the data hub manager may include a data timestamp retrieval manager configured to retrieve an indicator indicating a most recent time associated with the update of the first data table from the timestamp data table. According to an example embodiment the data hub manager may further include a hub timestamp retrieval manager configured to retrieve from the cluster table an indicator indicating the time associated with the update of the data table that is most recently saved in the cluster table .

According to an example embodiment the data hub retrieval manager may be configured to retrieve one of the aggregated data objects from the cluster table in response to a request based on the predefined retrieval query received by the database receiving device based on determining whether the indicator retrieved from the timestamp data table matches the indicator retrieved from the cluster table . For example if the two indicators match the data hub retrieval manager may retrieve one of the aggregated data objects from the cluster table and if the two indicators do not match the data hub retrieval manager may wait for the cluster table to be updated before retrieving one of the aggregated data objects from the cluster table in response to the request.

According to an example embodiment the data hub manager may include an updated object memory configured to temporarily store objects associated with updates of data tables included in the database. For example if one of the data tables is updated via an add modify or delete operation objects associated with the update may be stored in the updated object memory so that the data hub manager may remember the objects associated with the update so that the cluster table may be updated in accordance with the update to the data tables 

According to an example embodiment the data table update processor may be configured to update the data table including saving in the updated object memory an object associated with the update of the data table and the data hub update processor may be configured to update one of the aggregated data objects in the cluster table including selecting the aggregated data object in the cluster table for update based on the object saved in the updated object memory .

According to an example embodiment the updated object memory may be configured to temporarily store objects associated with sources external to the database for further update of the cluster table based on the objects from the external sources. For example the user may request an update of one of the aggregated data objects based on objects from one or more external sources.

According to an example embodiment an external database may be located external to the database included in the data hub manager and the external database may include an external database storage area that may include external data tables and

According to an example embodiment the data hub manager may include an external objects manager configured to process requests to update the aggregated data objects based on one or more data items stored in one or more of the external data tables included in the external database that is located external to the database. According to an example embodiment the data hub update processor may be configured to update the aggregated data objects in the cluster table based on preprocessing one or more of the external data tables based on satisfying the predefined retrieval query. For example the user may need information from external sources in addition to information from the database in order to satisfy one or more frequently used queries and may thus include the external information in the aggregated data objects stored in the cluster table . As discussed previously the special language elements such as EXPORT TO DATABASE IMPORT FROM DATABASE and DELETE FROM DATABASE may be used to process data associated with the cluster table . For example an EXPORT instruction may be used to update the aggregated data object based on data items stored in the external data tables 

According to an example embodiment the external objects manager may be configured to process requests to update the aggregated data objects based on one or more data items stored in one of the external data tables included in the external database that may be located external to the database including storing in the timestamp data table an external update indicator indicating a time associated with the update of one of the aggregated data objects based on the one or more data items.

According to an example embodiment the data hub update processor may be configured to update the aggregated data objects in the cluster table based on preprocessing one of the external data tables based on satisfying the predefined retrieval query. The data hub update processor may then store the updated aggregated data object and the external update indicator in the cluster table . Thus the indicators may be checked for matching values for example by the data hub retrieval manager to ensure retrieval of information based on the most recent updates.

According to an example embodiment the data hub manager may be based on Advanced Business Application Programming ABAP methods and objects.

According to an example embodiment the method may further include generating an aggregated data object based on preprocessing the first data table based on satisfying a predefined retrieval query . For example the aggregated object processor may generate an aggregated data object based on preprocessing the first data table based on satisfying the predefined retrieval query. For example the aggregated object processor discussed previously may be configured to generate one of the aggregated data objects based on preprocessing one or more of the data tables . For example the predefined retrieval query may be provided by the example user .

The method may further include storing the aggregated data object based on a preprocessed format in a cluster table included in the database . For example the data hub storage manager may store one of the aggregated data objects based on a preprocessed format in the cluster table . Thus when the user needs to retrieve the data based on the retrieval query one of the aggregated data objects may be retrieved as a result of executing one instruction and one fetch from storage instead of executing several instructions to process multiple fetches from the data tables . The data item information may thus be stored simultaneously in the data tables and in the cluster table so that the example user may retrieve desired information either from the data tables via multiple fetch operations or from the cluster table via fewer fetch operations.

The method may further include updating the first data table and updating the aggregated data object in the cluster table based on the updating the first data table . According to an example embodiment the data table update processor discussed previously may update one of the data tables and the data hub update processor may update one of the aggregated data objects in the cluster table based on the update of the data table 

According to an example embodiment a request based on the predefined retrieval query may be received. For example the database receiving device may receive the request based on the predefined retrieval query. For example the request may be received from the example user via the user interface .

According to an example embodiment the aggregated data object may be retrieved from the cluster table in response to the request. For example the data hub retrieval manager discussed previously may retrieve one of the aggregated data objects from the cluster table in response to the request.

According to an example embodiment a second data item may be stored in a second data table included in the database and the aggregated data object may be updated in the cluster table based on preprocessing the second data table based on satisfying the predefined retrieval query. For example the data table update processor may store the second data item in one of the data tables as discussed previously and the data hub update processor may update one of the aggregated data objects in the cluster table based on preprocessing the second data table based on satisfying the predefined retrieval query.

According to an example embodiment updating the first data table may include updating the first data item in the first data table and storing in a timestamp data table included in the database an indicator indicating a time associated with the update of the first data table. For example the data table update processor discussed previously may update one of the data tables including updating data items in the data tables and storing in the timestamp data table included in the database an indicator indicating a time associated with the update of the data table.

According to an example embodiment updating the aggregated data object in the cluster table may include retrieving the indicator indicating the time associated with the update of the first data table and storing the updated aggregated data object and the indicator indicating the time associated with the update of the first data table in the cluster table. For example the data hub update processor may update one of the aggregated data objects in the cluster table including retrieving the indicator indicating the time associated with the update of the data table and storing the updated aggregated data object and the indicator indicating the time associated with the update of the data table in the cluster table .

According to an example embodiment updating the first data table may include saving in a memory an object associated with the update of the first data table and updating the aggregated data object in the cluster table may include selecting the aggregated data object in the cluster table for update based on the object saved in the memory. For example if one of the data tables is updated via an add modify or delete operation objects associated with the update may be stored in the updated object memory discussed previously so that the data hub manager may remember the objects associated with the update so that the cluster table may be updated in accordance with the update to the data tables . For example the data table update processor may update the data table including saving in the updated object memory an object associated with the update of the data table and the data hub update processor may update one of the aggregated data objects in the cluster table including selecting the aggregated data object in the cluster table for update based on the object saved in the updated object memory .

According to an example embodiment the method may include processing a request to update the aggregated data object based on one or more data items stored in a third data table included in an external database that is located external to the database and updating the aggregated data object in the cluster table based on preprocessing the third data table based on satisfying the predefined retrieval query. For example the external objects manager discussed previously may process requests to update the aggregated data objects based on one or more data items stored in one or more of the external data tables included in the external database that is located external to the database. According to an example embodiment the data hub update processor may be configured to update the aggregated data objects in the cluster table based on preprocessing one or more of the external data tables based on satisfying the predefined retrieval query. For example the user may need information from external sources in addition to information from the database in order to satisfy one or more frequently used queries and may thus include the external information in the aggregated data objects stored in the cluster table . As discussed previously the special language elements such as EXPORT TO DATABASE IMPORT FROM DATABASE and DELETE FROM DATABASE may be used to process data associated with the cluster table . For example an EXPORT instruction may be used to update the aggregated data object based on data items stored in the external data tables 

According to an example embodiment processing the request may include processing the request to update the aggregated data object based on one or more data items stored in a third data table included in an external database that is located external to the database and storing in a timestamp data table included in the database an external update indicator indicating a time associated with the update of the aggregated data object based the one or more data items stored in the third table. According to an example embodiment updating the aggregated data object in the cluster table may include preprocessing the third data table based on satisfying the predefined retrieval query and storing the updated aggregated data object and the external update indicator in the cluster table.

For example the external objects manager may process the request to update one of the aggregated data objects based on one or more data items stored in one of the external data tables included in the external database that may be located external to the database including storing in the timestamp data table an external update indicator indicating a time associated with the update of one of the aggregated data objects based the one or more data items.

According to an example embodiment the data hub update processor may update one of the aggregated data objects in the cluster table based on preprocessing one of the external data tables based on satisfying the predefined retrieval query and storing the updated aggregated data object and the external update indicator in the cluster table . Thus the indicators may be checked for matching values for example by the data hub retrieval manager to ensure retrieval of information based on the most recent updates.

As shown in the example system may include one or more processors configured to read change create delete iPPE objects. For example the data table update processor discussed previously may read change create delete iPPE objects in iPPE data tables and the timestamp data table . Upon updating one of the iPPE objects a SAVE event associated with saving information in the database storage area may cause objects to be remembered or temporarily stored for example in the updated object memory discussed previously. For example if one of the data tables is updated via an add modify or delete operation objects associated with the update may be stored in the updated object memory so that the data hub manager may remember the objects associated with the update so that the cluster table may be updated in accordance with the update to the data tables . As discussed previously the data table update processor may update the data table including saving in the updated object memory an object associated with the update of the data table.

After updating one of the iPPE objects an AFTER SAVE event may cause objects that have been remembered or temporarily stored for example in the updated object memory by a SAVE event to be used for filling the data hub or updating the cluster table . For example the data hub update processor may update one of the aggregated data objects in the cluster table including selecting the aggregated data object in the cluster table for update based on the object saved in the updated object memory .

According to an example embodiment a manual trigger may also cause data items to be updated in the cluster table . Thus the cluster table may be updated automatically or may be updated based on the manual trigger for example via requests from the example user via the user interface . For example the external objects manager discussed previously may process requests to update the aggregated data objects based on or more one external objects . Further iPPE objects may be retrieved from the cluster table via the manual trigger .

For example if one or more data items stored in one or more of the external data tables included in the external database that is located external to the database are changed the external objects manager may cause updating of the cluster table accordingly. Thus the data hub update processor may update the aggregated data objects in the cluster table based on preprocessing one or more of the external data tables based on satisfying the predefined retrieval query. For example the user may need information from external sources in addition to information from the database in order to satisfy one or more frequently used queries and may thus include the external information in the aggregated data objects stored in the cluster table . As discussed previously the special language elements such as EXPORT TO DATABASE IMPORT FROM DATABASE and DELETE FROM DATABASE may be used to process data associated with the cluster table . For example an EXPORT instruction may be used to update the aggregated data object based on data items stored in the external data tables 

According to an example embodiment the external objects manager may process requests to update the aggregated data objects based on one or more data items stored in one of the external data tables included in the external database that may be located external to the database including storing in the timestamp data table an external update indicator indicating a time associated with the update of one of the aggregated data objects based the one or more data items.

According to an example embodiment the data hub update processor may update the aggregated data objects in the cluster table based on preprocessing one of the external data tables based on satisfying the predefined retrieval query and storing the updated aggregated data object and the external update indicator in the cluster table . Thus the indicators may be checked for matching values for example by the data hub retrieval manager to ensure retrieval of information based on the most recent updates.

According to an example embodiment the data hub or cluster table discussed previously may be included in an iPPE database and may reduce the amount of retrieval time and processing time needed for the amount of data to be read from the data base during a run of an interface to another system. For example the data stored in the data hub may be needed by different systems. Reading the data from multiple IPPE data tables with conventional APIs may adversely affect the performance of the system at least in terms of retrieval time and processing time.

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.

