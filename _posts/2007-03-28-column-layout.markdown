---

title: Column layout
abstract: In one embodiment, a method is illustrated as including displaying an editing window, the editing window being a Graphical User Interface (GUI) used to design an application interface, associating a User Interface (UI) element with a layout element, and generating metadata, the metadata containing data illustrating the association between the UI element and the layout element. Further, another embodiment is illustrated as including receiving a service request relating to an application, the service request including a first set of rendering data illustrating a display area within which a first GUI relating to the application will be displayed, retrieving metadata, the metadata illustrating layout elements and associated UI elements relating to the first GUI, retrieving display logic associated with the metadata, retrieving business logic associated with the metadata, and generating the first GUI, wherein the first GUI is generated using the metadata, display logic and business logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887087&OS=08887087&RS=08887087
owner: SAP SE
number: 08887087
owner_city: Walldorf
owner_country: DE
publication_date: 20070328
---
A portion of the disclosure of this document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots that may be illustrated below and in the drawings that form a part of this document Copyright 2007 SAP AG All Rights Reserved.

The present application relates generally to the technical field of algorithms and programming and in one specific example to the optimization of a Graphical User Interface GUI .

GUIs come in many forms and can be used to facilitate user interaction with for example a distributed computing environment e.g. a web based application or an application residing wholly on a single computer system e.g. a stand alone application . Common to these GUIs is the association of certain functionality with specific regions of the GUI. This functionality may be illustrated to the user via for example various screen objects or widgets.

In the following description for purposes of explanation numerous specific details are set forth to provide a thorough understanding of an embodiment of the present invention. It may be evident however to one skilled in the art that the present invention will be practiced without these specific details.

The leading digit s of reference numbers appearing in the Figures generally corresponds to the Figure number in which that component is first introduced such that the same reference number is used throughout to refer to a component appearing in multiple Figures. Signals and connections may be referred to by the same reference number or label and the actual meaning will be clear from its use in the context of the description.

In some embodiments a system and method is illustrated is to allow users to apply certain principles of declarative programming in the positing or repositioning of UI elements and layout elements within the display area of a GUI. Specifically rather than a user e.g. a software developer having to generate the layout and supporting business logic to position or reposition a UI or layout element a user may just associate the UI element and layout element such that issues relating to how to align certain UI elements within an associated layout element may be automatically addressed. For example if a display area is expanded than certain UI and layout elements may be automatically repositioned to fill the newly available space created by the expansion. If on the other hand the display area is reduced then the UI and layout elements may be automatically repositioned to fill what available space may exist to accommodate these UI and layout elements. This automatic repositioning has applications where the available space within a display area may be limited e.g. the screens of hand held devices etc. Further this positioning or repositioning may include the repositioning of labels associated with a UI or layout element.

Other features may be apparent from the accompanying drawings and from the detailed description that follows.

In some embodiments certain principles of declarative programming are implemented wherein a layout residing as a part of a GUI is divided into various discrete regions through the use of layout elements e.g. columns grids tab strip containers and form panes . Into these layout elements are placed certain screen object and widgets collectively referred to as UI elements each having a particular functionality. By placing these UI elements into a layout element the UI element is effectively associated with the layout element. The placement of these UI elements is facilitated through the use of for example an input device such as a mouse track ball or other suitable device that may for example facilitate the use of a drag and drop feature associated with such an input device. The association of the UI elements and layout elements effectively creates a GUI with certain functionality. This GUI may then be executed as an interface for an application e.g. a browser based or stand alone application .

In some cases groups of UI elements are associated with layout elements. These groups may be containers that include for example form pane headers labels fields buttons text views melting groups check boxes radio buttons drop down list boxes and or any UI elements that have a height of an input field or smaller e.g. rating indicator progress indicator etc. . Through using these containers groups of functionality can be associated with a layout element as opposed to only associating individual UI elements with a layout element. In some cases individual UI elements will only be associated with certain layout elements such that only certain containers e.g. a collection of screen objects or widgets referenced herein as form pane controls will be associated with certain UI elements. For example where five columns are placed into a layout columns one two and five may be reserved for use with form pane controls while columns three or four may be reserved for the use with specific UI elements. Additionally in some embodiments various regions e.g. a space that may or may not be occupied by layout element in a layout may be reserved for labels e.g. if a layout were divided into seven regions then only regions one four and seven may be available for labels . And again example embodiments may include various regions in a layout that may only contain panes that in turn have UI elements e.g. if a layout were divided into seven regions then only regions one four and seven may be available for panes containing UI elements . Further in some cases multiple UI elements may be treated as one UI element.

In some embodiments containers may help to facilitate the interaction between for example various form pane controls. These containers may be placed into a layout and may be associated with one or more columns to form for example a tab strip container that spans from a first column to a second column. This tab strip container may have one or more layers of form pane controls that may be access through for example one or more UI elements e.g. tabs . This layering may be further reflected in the layering of a column on top of a tab strip container where the column may or may not be associated with this tab strip container.

Common to each layout element and UI element are certain values used in some cases to provide a size measurement for the layout element and UI element relative to the display area upon which it appears. In some embodiments these values may include a relative percentage value e.g. a relative percentage value approach denoting the available space within a layout element that a particular UI element may occupy. Some example embodiments may include a What You See Is What You Get WYSIWYG approach e.g. a WYSIWYG approach wherein static values are used to determine the association of a UI element and a layout element. The values used to determine these relative percentage values and or static values may include pixels and or characters e.g. referenced herein as units . In some cases the relative percentage value approach and static approach may be used in combination.

In one example a display area may measure 350 units in height and 750 units in width total area 262500 units while a layout element such as a column contained within this display area may measure 700 units in height and 100 units in width total area 70000 units . Associated with this column e.g. contained within this column may be any number of UI elements. These UI elements may each be a text box radio button scroll down menu a graphic e.g. a Joint Photographic Experts Group JPEG object or some other suitable UI element. As with the layout element these UI elements also use a certain amount of space. For example a text box may take up an area of 50 units in width and 10 units in height total area 500 units . In certain cases the layout element associated with the UI element may have its dimensions changed such that its dimensions may become smaller or larger.

In some cases the dimensions of a layout element may be changed such that the UI elements associated with this layout element may be negatively affected in terms of their ability to facilitate functionality. For example if the width of the above referenced layout element e.g. the column was reduced from 100 units to 40 units then a text box associated with this layout element e.g. the above illustrated text box taking up an area of 50 units in width may fall outside the width of this layout element. In some cases this may result in the UI element not fully rendering in the display area. In other cases as alluded to above this may result in the UI element not being able to use its full functionality. For example where a text box did not fully render on a screen it may not be able to receive input. The reduction in size may be effectuated through the used of an input devices e.g. a mouse trackball or other suitable device to reduce the size of a display area or layout element. This may be considered a problem of truncation.

In other cases the dimensions of a layout may be increased such that an excessive amount of space exists for a UI element and its association with a layout element. For example a layout element may be expanded from having a width of 200 units and a height of 200 units total area 40000 units to having a width of 400 units and a height of 400 units total area 160000 units . Where an associated UI element has a width of 50 units and 20 units in height total area 1000 units such an increase may result in wasted available space. The increase may be effectuated through the used of an input devices e.g. a mouse trackball or other suitable device to increase the size of a display area or layout element. This may be considered a problem of excessive available space.

Where truncation or excessive available space exists a relative percentage value approach and or a WYSIWYG approach may be used as a basis upon which to reposition for example a UI element. In some embodiments a relative percentage value is defined wherein a UI element may be allowed to only occupy some predefined percentage e.g. a predefined minimum percentage of the total area of the associated layout element. For example if a layout element has an area of 150000 units 500 units 300 units and the predefined minimum percentage is 5 then the associated UI element may only be allowed to have an area of 7500 units e.g. 75 units 100 units . If the area of the layout element is reduced and this minimum percentage value violated e.g. the UI elements takes up an area of 7 due to the reduction in size of the layout element then the UI element may be associated with a second layout element that does have an area available to accommodate the UI element. The association with the second layout element may involve the repositioning of the UI element within the second layout element such that for example the UI element is moved from a first column to a second column. Further this relative percentage value approach may require that during repositioning of the UI element that a certain alignment of the UI element and it associated label be observed e.g. all UI elements and labels be uniformly aligned .

In some embodiments a problem of excessive available space may be addressed through associating the UI element with a new layout element such that the UI element is repositioned to fill the excessive available space created by the expansion of one or more layout elements. For example if a layout element has an area of 150000 units 500 units 300 units and the predefined minimum that the UI element can take up is 5 then any reduction in this predefined minimum e.g. the layout area is increased to 200 000 units and then the ratio becomes 4 requires the UI element to be repositioned such that the UI element can again meet its 5 requirement. In this example this predefined minimum may be construed as a predefined maximum value.

Some example embodiments may include the use of a WYSIWYG approach to address the problem of truncation or excessive available space. Specifically in certain instances the association of UI element from some point that is part of the layout element may be used to determine if repositioning is necessary. For example if a container possessing various form pane controls is set e.g. static values generated to be oriented 10 characters from a particular side of a layout element e.g. a column and the column is expanded in size such that the container is 20 characters from the side then the form pane controls may need to be repositioned and associated with another layout element. If this column is reduced in size then repositioning may also need to take place.

Further in some cases the dimensions of a layout may change as a result of the device upon which the GUI is displayed. For example a first monitor may have a viewing area of 1024 units by 1024 units while a second monitor may have a viewing area of 780 units by 480 units. A GUI effectively displayed on the first monitor may not be effectively displayed on the second monitor. That is while the functionality of a UI element appearing on the first monitor may be effectively accomplished with the requisite amount of space this same functionality may be not be effectively accomplished within viewing area of the second monitor. Repositioning of the UI elements may be required.

Repositioning may be limited by issues relating to the type of layout elements involved. For example in some embodiments certain UI elements may only be associated e.g. an association requirement with certain layout elements such that where repositioning is necessary this association requirement must be observed. These association requirements may in some embodiments be determining during the designing of an application GUI.

Further in some embodiments repositioning may be based upon a notion of proportionality. Specifically a UI element may only be repositioned where the repositioning allows for the UI element to be reposition such that the UI element takes up some type of predefined relative percentage value relative to other UI or layout elements. The notion of proportionality will be more fully illustrated below.

Display area in many ways represents a sophisticated example of the use of UI elements in combination with layout elements. This sophistication can include for example the layering of multiple layout elements such that one layout element will be placed upon another. This layering effect is illustrated with for example the nested column that is placed on top of or layered on top of the tab strip container . In some cases the tab strip container may contain a plurality of layers where each layer may be accessed via a tab.

The association between the form pane control and the column may be understood as an association between the two. Form pane control is 120 units e.g. in width and approximately 100 units e.g. in height total area 12000 units . In cases where a UI element is associated with a layout element an association is generated whereby the UI element is oriented to or with various aspects of the layout element. Here for example a space of approximately 100 units e.g. exists between the top of the form pane control and the top of the column . Similarly a space exists between the bottom of the form pane control and the bottom of the column as denoted by . This association between the form pane control and the column is used in some cases to render the form pane control on the display area .

This same association is also used in the case of the UI element graphic. As illustrated in column the UI element is associated with a column such that the UI element takes up 115 units of width and 30 units of height total area of 3450 units of the column . This UI element is oriented such that a space of 135 units e.g. exists between the top of the UI element and top of the column . Further a space of 135 units e.g. exists between the bottom of the UI element and the bottom of the column .

In some embodiments the area that the UI element takes up within for example a layout element e.g. column or is used to address the problem of truncation or additional space. Here for example the form pane control takes up an area of 12000 units within the column . If for example the display area were reduced or expanded in size the form pane control may need to be repositioned. This repositioning may be based upon the aforementioned relative percentage value approach and or a WYSIWYG approach.

Some embodiments may include the observing of a certain alignment by the repositioned UI elements. For example in some cases a UI element and its associated label may be repositioned. Where this repositioning occurs the UI elements may be uniformly aligned e.g. adjusted right left or center as may be their labels. This alignment may to be based upon a relative percentage values such that only a certain percentage of space may be taken up by a UI and or its labels.

Some embodiments may include the generation of the metadata by a user utilizing an editing window while in other embodiments this metadata may be generated by another and stored as a sort of template. For example such a template may be stored as an XML schema e.g. a Document Type Definition DTD and or XML Schema Definition XSD into a table residing on a database e.g. or . In some embodiments this template may be stored locally e.g. residing on one of the devices or may be stored remotely and accessed remotely across a network e.g. network .

In certain cases a user may choose to execute an application that utilizes the metadata . This application may be in the form of for example an application GUI . This application GUI may be accessed via a browser based application or as a stand alone application . This browser based or stand alone application may reside on one or more of the devices and may be accessed across a network such as the Internet. Once accessed this application GUI may reside on a display area that will in many cases reflect the display area and the various UI elements or layout elements associated with this display area. Here for example various UI elements or form pane controls are illustrated wherein various radio buttons are provided that a user may select.

In some embodiments a declarative programming regime is implemented in the example system whereby a user may design a software interface by merely selecting various UI elements. The functionality associated with each of these UI elements may in some cases be supplied automatically or nearly automatically via an application server such as the application server . This application server may automatically generate as previously illustrated the various display and business logic source code such that for example rather than the user having to generate source code facilitating database access or code facilitating certain types of business logic methods this code will be automatically generated by the application server . One result of using this declarative programming regime is that rather than a user having to write or implement a software application from scratch and having to write or implement the functionality associated software application a user may merely use their visual abilities to generate a GUI that will be fully supported on the backend by the requisite display and business logic. Various types of declarative programming regimes include for example WEBDYNAPRO and other suitable declarative programming regimes as are known in the art.

Some embodiments may include a device such as a computer system e.g. a server client or stand alone machine including a display to display an editing window the editing window being a GUI used to design an application GUI an input device to associate a UI element with a layout element and a metadata engine to generate metadata the metadata containing data illustrating the association between the UI element and the layout element. Additionally this computer system may include a receiver to receive the metadata and a source code engine to generate source code from the metadata the source code illustrating a display logic and business logic associated with the data in the metadata. In certain cases the layout element is selected from the group consisting of columns and grids. Further in certain cases the UI element is selected from the group consisting of containers tables graphics item list box explanatory text textboxes button groups radio button groups form pane headers labels fields buttons text views melting groups checkboxes and drop down list boxes.

In cases where a UI element is associated with a layout element various types of association data is generated as a UI data set wherein the UI element uses a certain amount of unit area within the layout element. This unit area is in effect reserved for use by the particular UI element. An area not used by a UI element may be deemed to be available space for utilization by additional UI elements. Once the operation is executed operation is executed that generates metadata illustrating amongst other things the association data contained in the UI data set. This metadata is then provided to for example an application server as an XML MXML and or EBXML formatted data. In some cases an operation is performed at the application server side that receives metadata. Once received the operation is executed that generates supporting source code for this metadata. This source code may be for example ABAP JAVA and or an SWF file. Once this source code is generated it is then stored into a database by an operation . In some cases the operation will generate both the display logic and accompanying business logic used to facilitate the implementation of a UI element and associated layout element.

Some embodiments may include various rendering engines e.g. coupled to the application server . These rendering engines in some cases may or may not reside as a part of the application server . In some cases a first rendering engine may be used to shrink horizontally an input UI to a minimum threshold value wherein this rendering engine only shrinks this input UI until this minimum threshold value is reached. Further in some cases a second rendering engine is executed that allows the field of a UI element to wrap until some minimum threshold value is reached. Moreover in some cases a third rendering engine is executed that allows for the reduction of a form pane header until some minimum threshold value is reached. Additionally a fourth rendering engine may be executed that allows for a horizontal scroll to continue until some threshold value is reached. Put another way using the fourth rendering engine one may be able to scroll some distance that is predefined using some input device. These various rendering engines e.g. may be separate and distinct or in some cases may be combined to form one rendering engine.

In addition to the previously illustrated modules e.g. additional modules may also exist such as for example a second receiver a second transmitter and a third optional receiver . With regard to the second receiver this receiver may be implemented to receive a second set of rendering data wherein this rendering data is used to resize a display area within which for example a GUI may be displayed. The second transmitter may be used for example to transmit a second GUI or an additional GUI that is generated based upon the second dataset received using the second receiver. Further the third receiver may be used to render or otherwise resize a display area within which a GUI is displayed to be larger or even in some cases smaller than some previously displayed display area. Further this device may include an optimizer not pictured which may in some cases optimize a GUI by eliminating an empty column the empty column being empty as a result of a display area size.

Example embodiments may include a device such as a computer system e.g. a server client or stand alone machine that includes a first receiver to receive a service request relating to an application the service request including a first set of rendering data illustrating a display area within which a first GUI relating to the application will be displayed a first rendering engine to retrieve metadata the metadata illustrating layout elements and associated UI elements relating to the first GUI a second rendering engine to retrieve display logic associated with the metadata a third rendering engine to retrieve business logic associated with the metadata and a first transmitter to transmit the first GUI wherein the first GUI is generated using the metadata display logic and business logic. Further this computer system may include an optimizer which may in some cases optimize a GUI by eliminating an empty column the empty column being empty as a result of a display area size. Additionally this computer system may include a second receiver to receive a second set of rendering data the second set of rendering data to resize the display area within which the first GUI is displayed and a second transmitter to transmit a second GUI relating to the application the second GUI being generated using data including the second set of rendering data. Moreover this computer system e.g. a server or client machine may include the third receiver to receive a second set of rendering data that resizes the display area of the first GUI to be smaller than as previously rendered the first rendering engine to shrink horizontally an input UI to a minimum threshold value relating to the input UI is reached a second rendering engine to wrap a UI field until a minimum threshold value relating to a UI field is reached a third rendering engine to reduce a form pane header until a minimum threshold value relating to a form pane header is reached and a fourth rendering engine to force a horizontal scroll until a minimum threshold value relating to a field length is reached. Additionally this computer system may include the third receiver to receive a second set of rendering data to resize the display area of the first GUI to be larger than as previously rendered a first rendering engine expanding an input box field until a maximum threshold value relating to the input box field is reached and the second rendering engine to unwrap a UI label where it is able to render on one line.

In some embodiments once the application GUI is received a decisional operation is executed that checks to determine whether or not a modification has been made to the display area e.g. a display area . As previously illustrated this modification may be made by for example a user using some type of input device such as a mouse to reshape e.g. expand or reduce the size of a display area. In cases where decisional operation evaluates to false then the operation continues to execute such that a GUI is rendered on a display area. In cases where decision operation evaluates to true an operation is executed that transmits the new display area dimensions to the applications server and specifically to the operation presiding on the application server . These new display area dimensions are transmitted as display area parameters . Moreover these display area parameters may be transmitted as a part of for example a web session existing between one or more of the devices and the application server and may be transmitted using any one of a number of suitable protocols used on the Internet e.g. the Transmission Control Protocol Internet Protocol TCP IP and or the User Datagram Protocol Internet Protocol UDP IP . Once the operation receives the display area parameters transmitted by the operation a second application GUI is generated and sent by or otherwise transmitted by the application server to the one or more devices where it was received by operation wherein the operation re renders the application GUI in a display area. As previously illustrated in some cases this rendering is performed via any one of a number of rendering engines. These rendering engines may reside on for example the application server or may reside on the one or more devices .

In cases where decisional operation evaluates to true an operation is executed that may expand an input box field horizontally until some maximum threshold value is reached. Next the operation is executed that may unwrap UI element labels where they are able to render on one line. Collectively these operations e.g. facilitate the repositioning of various UI elements where additional space exists during the expansion of the display area for a particular GUI. For example in certain cases a display area may be expanded such that additional layout elements may exist within a display area e.g. columns pane forms et cetera . Where such an expansion takes place the UI elements may be repositioned to fill otherwise empty or otherwise available space created by the expansion. Once these operations e.g. or are executed new display area parameters are transmitted requesting a second application GUI .

In some embodiments a display area containing various layout and UI elements is rendered such that the UI elements or containers having a plurality of UI elements may need to be repositioned. This repositioning may be the result of truncation or available space considerations. Repositioning may result from the application of a relative percentage value approach. The relative percentage value approach can be illustrated using the following pseudo code 

In some embodiments available space may be defined in terms of proportionality e.g. a notion of proportionality . That is space will only be construed to be available where a UI element may be reposition such that the UI element may be rendered in a manner that meet certain requirements of proportionality. These requirements may be certain predefined mathematical ranges or limits of values set out as rules e.g. if UI element area 1 000 units then no available space . For example if the available space has an area of 10 000 units and the UI element to be repositioned takes up 10 000 units this UI element may appear out of proportion relative to the other UI elements occupying the layout element within which space is available. This may especially be the case where for example the other UI elements only take up an area of 1 000 units. This lack of proportionality may result in no actual space being available.

Some embodiments may include the use of an algorithm to implement a WYSIWYG approach. Specifically rather than using the percentage ratio of space taken up by a UI element in a layout element see the relative percentage value approach above static values are used to determine the association of a UI element to a layout element. These same static values may be used to determine the repositioning of the UI element in cases of truncation or available space. This WYSIWYG approach is reflecting in the following pseudo code 

Some embodiments may include the various databases e.g. or being relational databases or in some cases OLAP based databases. In the case of relational databases various tables of data are created and data is inserted into and or selected from these tables using a Structured Query Language SQL or some other database query language known in the art. In the case of OLAP databases one or more multi dimensional cubes or hyper cubes containing multidimensional data from which data is selected from or inserted into using MDX may be implemented. In the case of a database using tables and SQL a database application such as for example MYSQL SQLSERVER Oracle 8I or 10G or some other suitable database application may be used to manage the data. In this the case of a database using cubes and MDX a database using Multidimensional On Line Analytic Processing MOLAP Relational On Line Analytic Processing ROLAP Hybrid Online Analytic Processing HOLAP or some other suitable database application may be used to manage the data. These tables or cubes are made up of tables in the case of for example ROLAP and are organized into a RDS or Object Relational Data Schema ORDS as is known in the art. These schemas may be normalized using certain normalization algorithms to avoid abnormalities such as non additive joins and other problems. Additionally these normalization algorithms may include Boyce Codd Normal Form or some other normalization optimization algorithm known in the art.

Some example embodiments may include the above illustrated operations written as one or more software components. Common too many of these components are the ability to generate use and manipulate the above illustrated UI elements and layout elements and the data associated therewith. These components and the functionality associated with each may be used by client server or peer computer systems. These various components can be implemented into the system on an as needed basis. These components may be written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Java Enterprise Beans EJB Component Object Model COM or Distributed Component Object Model DCOM or other suitable technique. These components are linked to other components via various APIs and BAPIs and then compiled into one complete server and or client application. The method for using components in the building of client and server applications is well known in the art. Further these components may be linked together via various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a GUI . These first and second computer systems can be configured in a server client peer to peer or some other configuration. These various levels can be written using the above illustrated component design principles and can be written in the same programming language or a different programming language. Various protocols may be implemented to enable these various levels and components contained therein to communicate regardless of the programming language used to write these components. For example an operation written in C using the Common Object Request Broker Architecture CORBA or Simple Object Access Protocol SOAP can communicate with another remote module written in JAVA . These protocols include SOAP and CORBA or some other suitable protocol. These protocols are well known in the art.

The example computer system includes a method or e.g. a Central Processing Unit CPU a Graphics Processing Unit GPU or both a main memory and a static memory that communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor controller e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software may also reside completely or at least partially within the main memory and or within the method or during execution thereof by the computer system the main memory and the method or also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP Session Initiation Protocol SIP .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any of the one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

One exemplary advantage of an embodiment of the present method and system is to allow users to apply certain principles of declarative programming in the positing or repositioning of UI elements and layout elements within the display area of a GUI. Specifically rather than a user having to generate the display and supporting business logic to position or reposition a UI or layout element a user may just associate the UI element and layout element such that issues relating to how to align certain UI elements within an associated layout element may be automatically addressed. For example if a display area is expanded than certain UI and layout elements may be automatically repositioned to fill this newly available space. If on the other hand the display area is reduced then the UI and layout elements may be automatically repositioned to fill what available space may exist to accommodate these UI and layout elements. This automatic repositioning has applications where the available space within a display area may be limited e.g. the screens of hand held devices etc. Further this positioning or repositioning may include the repositioning of labels associated with a UI or layout element.

The above illustrated exemplary advantage may allow a user to more efficiently and more quickly generate UIs that that can be used on a wide variety of devices while at the same time avoiding the problem of the truncation of UI elements or excessive available space. This may allow for UIs to be developed the more efficiently use screen space and which have more universal applicability.

The automatic repositioning of UI elements can be extended to apply to display areas containing a plurality of layout elements layered one on top of another. For example in cases where a tab strip container see e.g. tab strip container is used this tab strip container may have a number of layers with each layer accessible through a separate tab. Each one of these layers may have a tab strip container containing a nested column layout element see e.g. and a number of UI elements e.g. textboxes may be associated with the nested column layout element. In cases where the display area is resized the UI elements at each layer may be re positioned such that available space is used so as to avoid truncation or available space. Rather than having to rewrite the display logic associated with this GUI and fundamentally the display area the display logic may accommodate the resizing automatically.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that may allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it may not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

