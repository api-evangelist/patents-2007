---

title: Executing business logic extensions on a client computing system
abstract: Technologies are described herein for executing business logic extensions on a client computing system. A server platform exposes server-hosted application services to client applications. Calls to the server-hosted application services may be executed along with custom business logic extensions. A client platform is also provided that exposes client-hosted application services to a client application. The same business logic extensions that execute on the server platform can be utilized by the client platform. When a client application is online and connected to the server platform, the client application utilizes the server-hosted application services in the manner described above. When the client application is offline, the client application utilizes the client-hosted application services. The server platform synchronizes the business logic extensions to the client platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060892&OS=08060892&RS=08060892
owner: Microsoft Corporation
number: 08060892
owner_city: Redmond
owner_country: US
publication_date: 20070427
---
In many client server business applications a smart client application is utilized that is capable of functioning both when it is connected to a server computer referred to herein as being online and when it is disconnected from the server computer referred to herein as being offline . Often however the functionality provided by the client application when offline is very limited as compared to the functionality provided by the application when online. This is generally due to the fact that the complete functionality provided by the server computer and a complete data set are not available to the client application when offline.

The functionality provided by a server application in a client server environment may be extended through the use of business logic extensions. Business logic extensions allow the developer of the server application and independent software vendors ISVs to add additional functionality to a business application. Because business logic extensions are implemented on the server computer the functionality provided by such server side extensions is not available to a client application operating offline.

Some efforts have been made to allow the use of custom business logic extensions by an offline client application through the execution of scripts by the client application. Scripts however severely limit the functionality available when the client application is offline due to their limited capabilities and the difficulty in properly integrating their execution with the operation of the client application. In this regard it can also be difficult to deploy these types of business logic extensions to multiple client applications. In many cases ISVs are responsible for deploying the extensions and for managing the versioning and maintenance of the extensions. This process can be complicated expensive and time consuming.

Technologies are described herein for executing business logic extensions in conjunction with a client application executing on a client computing system. Through the utilization of aspects presented herein rich custom business logic can be developed and deeply integrated with both the client and the server of such applications. Moreover such logic can be developed and executed with rich compiled code easily deployed to client applications and seamlessly executed by an application platform regardless of whether the client application is online or offline.

According to one aspect presented herein a server platform is provided that exposes server hosted application services to client applications. The server hosted application services are called by the client applications to access functionality provided by a client server business application. The server hosted application services may be exposed by the server platform as a message based application programming interface API .

According to implementations the server platform can utilize business logic extensions within its execution pipeline. For instance when a call is made to a server hosted application service one or more business logic extensions can be executed in conjunction with core business operations performed by the platform. The business logic extensions are executed on a server computer and may take the form of plug ins to an execution pipeline utilized by the server platform. The plug ins can be executed synchronously with the execution of the pipeline or executed asynchronously at a later time. The plug ins are created and executed using compiled program code and can therefore take advantage of operating system and application libraries.

According to other aspects presented herein a client platform is provided in which the same business logic extensions that execute on the server platform can be utilized. The client platform exposes client hosted application services to a client application. When the client application is online and connected to the server platform the client application utilizes the server hosted application services in the manner described above. However when the client application is offline the client application utilizes the client hosted application services. In one implementation the client hosted application services are exposed to the client application through a message based API that is identical to the API exposed by the server platform. In this manner the client application can utilize the same API regardless of whether it is operating in online or offline mode.

In one implementation the server platform is operative to synchronize a data set and the business logic extensions to the client platform. In this way the same data set and business logic extensions are made available to the client application for use when executing offline. The client platform also includes an execution pipeline for executing the business logic extensions. The business logic extensions may also be executed synchronously or asynchronously by the client platform.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for executing custom business logic extensions at a client computing system. Through the use of the embodiments presented herein a server platform exposes server hosted application services to client applications. The server hosted application services allow custom business logic extensions to be executed. A client platform is also provided that exposes client hosted application services to a client application. The custom business logic extensions utilized by the server platform are synchronized to the client platform and can be utilized therein. When the client application is unable to establish a connection to the server platform the client application will utilize the application services provided by the client platform including execution of any business logic extensions. In this manner a client application can provide a consistent level of functionality regardless of whether it is operating online or offline.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for executing business logic extensions at a client computing system will be described. In particular is a network and software architecture diagram that provides details regarding an illustrative operating environment for the embodiments presented herein along with aspects of several software components presented herein. The illustrative computing system shown in provides a client server business application. In the embodiments presented herein the client server business application provides customer relationship management CRM functionality. It should be appreciated however that any type of client server application may be implemented utilizing the technologies presented herein including other types of hosted client server applications.

The illustrative computing system shown in includes a CRM system . As will be described below with reference to the CRM system includes several groups of server computers that are together operative to provide a multi tenant hosted CRM application the CRM application . The CRM application provides functionality for managing relationships with business customers including the capture storage and analysis of customer information. The CRM application supports concurrent use by multiple organizations referred to herein as tenants. Additional details regarding the hardware and software components making up the CRM system are provided below with respect to .

The CRM functionality provided by the CRM application may be accessed and supplemented through the use of a CRM client application executing on a client computing system such as the CRM client computer . In one implementation the CRM application exposes a web compatible network interface for use by the CRM client application . In this manner the CRM client computer can be utilized to access the functionality provided by the CRM application for creating and viewing customer information for communicating with customers via the CRM application and for performing other CRM related functions.

In one implementation the CRM client application comprises a standard personal information manager PIM application equipped with a plug in software module capable of accessing the CRM application and accessing the functionality provided thereby. It should be appreciated however that any type of client application may utilize the various aspects presented herein. In this regard it should be appreciated that any type of client server application may utilize the functionality described herein and that the appended claims should not be limited to the environment and implementation shown in .

According to various aspects presented herein the CRM client application may operate online or offline from the CRM application . The CRM client application is online when it is able to establish a network connection to the CRM application such as through the network . The network may be any type of suitable data communications network including but not limited to wide area networks local area networks the Internet wireless data communications networks and others. The CRM client application is offline when it is unable to establish a network connection to the CRM application . As will be described in greater detail below the CRM client application includes functionality for determining whether it is online or offline. Depending upon the online or offline state of the CRM client application either application services exposed by the CRM system or application services exposed by other software components executing on the CRM client computer will be utilized. Additional details regarding this process will be provided below with respect to .

Referring now to additional details will be provided regarding a server platform utilized by the CRM system to provide the CRM application and to enable the execution of business logic extensions on a client computing system. The implementation of the CRM system shown in includes an application platform cluster a database server cluster and an asynchronous service cluster . Each of these components is described in detail below.

The application platform cluster includes one or more computing systems that provide message oriented web services an execution pipeline and an eventing framework. In particular the application platform cluster exposes application services to the CRM client application in the form of the CRM web services . The CRM web services accept request messages from the CRM client application . In response to receiving the request messages business logic is executed inside the server platform and the results of the execution are returned to the calling application. The CRM web services may be exposed to the CRM client application as a message based API. Additional details regarding the use of a message based API to extend the functionality of a CRM system can be found in U.S. patent application Ser. No. 11 290 078 Pub. No. US2007 0006237 filed on Nov. 30 2005 and entitled Using Messages to Extend CRM Functionality which is expressly incorporated by reference herein in its entirety.

The execution pipeline is executed within the application platform cluster and is responsible for executing standard and custom business logic. Standard business logic and business logic extensions may be registered with the application platform cluster and configured to execute within the execution pipeline in a variety of ways. For instance as shown in the execution pipeline may include one or more pre events A B that are executed prior to a core business operation performed by the server platform . The execution pipeline may further include one or more post events A B that are executed after the core business operation . According to one implementation the execution pipeline is multi tenant aware and can execute business logic extensions for each tenant separately and in isolation from business logic extensions being executed on behalf of other tenants.

According to other aspects presented herein business logic extensions may be configured and executed by the execution pipeline . In particular according to one implementation presented herein each business logic extension is implemented as a plug in that extends or enriches the basic functionality provided by the CRM application . In this implementation the application platform cluster maintains a plug in library that includes one or more plug ins A N. The plug ins A N comprise compiled software components that can be executed within the execution pipeline in response to request messages received by the CRM web services . The plug ins A N may be configured for execution as pre events A B or as post events A B. Execution of the plug ins A N within the execution of the pipeline in this manner is referred to as synchronous execution. As will be discussed in greater detail below the plug ins A N may also be executed asynchronously outside of the execution of the execution pipeline .

In order to execute the plug ins A N asynchronously an asynchronous queue agent executes on the application platform cluster . When a plug in requires asynchronous execution the asynchronous queue agent creates an entry in the queue indicating that the plug in should be executed asynchronously. The queue manager executing on the asynchronous service cluster periodically dequeues entries from the queue and executes an associated plug in . As shown in the asynchronous service cluster may maintain a plug in library containing asynchronous plug ins A N. Registration and configuration information for the plug ins A N may be stored at the asynchronous service cluster or at the database server cluster . Through the mechanism presented herein for the asynchronous execution of business logic extensions business logic that requires significant processing capabilities can be executed at a later time and out of process from the execution pipeline .

As discussed briefly above the database server cluster stores the queue . The database server cluster may also be utilized to store the plug in library . The plug in library includes the plug ins A N along with metadata including configuration information indicating when and how the plug ins A N should be executed. According to implementations the database server cluster is also utilized to store a CRM database . The CRM database includes data and metadata for each tenant of the CRM application . As will be described in greater detail below the contents of the plug in library and the CRM database may be deployed to the CRM client application and periodically synchronized. In this manner the data and business logic extensions utilized by the server platform are made available for use at the CRM client computer when offline. Additional details regarding processes for extending the functionality provided by a server platform through the use of business logic extensions can be found in U.S. patent application Ser. No. 11 290 157 Pub. No. US2007 0005642 filed on Nov. 30 2005 and entitled Modification of Logic in an Application which is expressly incorporated herein by reference in its entirety.

Turning now to additional details will be provided regarding a client platform provided herein that enables the execution of business logic extensions on a client computing platform. As shown in the client platform utilizes an architecture similar to that of the server platform described above with respect to . The software components utilized in the client platform however are designed to run on a single client computing system such as the CRM client computer rather than in server clusters. The components shown in are designed to be executed performantly on computer systems having specifications lower than that of a server computer while at the same time providing much of the functionality described above with respect to .

As shown in the client platform exposes application services to the CRM client application in the form of the CRM web services . The CRM web services accept request messages from the CRM client application . In response to receiving the request messages business logic is executed inside the client platform and the results of the execution are returned to the calling application. According to one embodiment the CRM web services provides a message based API identical to that of the CRM web services provided by the server platform . As will be described in greater detail below the CRM client application is operative to determine whether it is online or offline. If the CRM client application is online it will utilize the server hosted application services provided by the CRM web services . If the CRM client application is offline it will utilize the client hosted application services provided by the CRM web services . Additional details regarding this process are provided below with respect to .

The execution pipeline is executed by the client platform and is responsible for executing standard and custom business logic. Standard business logic and business logic extensions may be registered with the client platform and configured to execute within the execution pipeline in a manner similar to that described above with respect to the server platform . For instance as shown in the execution pipeline may include one or more pre events A B and one or more post events A B.

According to other aspects presented herein business logic extensions may be configured and executed by the execution pipeline . In particular according to one implementation presented herein each business logic extension is implemented as a plug in that extends or enriches the basic functionality provided by the CRM application . In this implementation the client platform maintains a plug in library that includes the plug ins A N. As mentioned above the plug ins A N are deployed from the server platform to the client platform for execution within the execution pipeline . The plug ins A N may be configured for execution as pre events A N or as post events A N. Execution of the plug ins A N within the execution of the pipeline in this manner is referred to as synchronous execution. As with the server platform described above the plug ins A N may also be executed asynchronously by the client platform outside of the execution of the execution pipeline .

In order to execute the plug ins A N asynchronously an asynchronous queue agent executes on the client platform . When a plug in requires asynchronous execution the asynchronous queue agent creates an entry in the queue indicating that the plug in should be executed asynchronously. The queue manager executing on the client platform periodically dequeues entries from the queue and executes an associated plug in. The client platform may maintain a plug in library containing asynchronous plug ins A N. Registration and configuration information for the plug ins A N may be stored in the client data store . Through the mechanism presented herein for the asynchronous execution of business logic extensions business logic that requires significant processing capabilities can be executed by the client platform at a later time and out of process from the execution pipeline .

The client data store may also be utilized to store the plug in library . The plug in library includes the plug ins A N along with metadata including configuration information indicating when and how the plug ins A N should be executed. The client data store may also be utilized to store all or a portion of the CRM database . According to embodiments the server platform synchronizes appropriate portions of the CRM database to the client data store for use when the CRM client application is offline. The contents of the client data store may be synchronized based upon what a user of the CRM client application requests automatically and when the CRM client computer is going offline. Additional details regarding this process will be provided below.

Turning now to additional details will be provided regarding the embodiments presented herein for executing business logic extensions on a client computing system. In particular is a flow diagram showing a routine that shows aspects of an illustrative process for deploying and synchronizing the contents of the CRM database and the plug in library from the server platform to the client platform in one implementation described herein.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the CRM client application determines if it is online with the server platform . If the CRM client application is offline it is not possible for synchronization to take place. Accordingly if the CRM client application is offline the routine returns to operation . If the CRM client application is online a determination is made through communication with the server platform as to whether the contents of the client data store is out of synchronization from the server platform . In particular a determination is made as to whether the CRM database and the plug in library stored in the client data store need to be updated. If the client data store does not need to be updated the routine returns to operation described above.

If at operation it is determined that the client data store needs to be updated the routine continues from operation to operation . At operation portions of the CRM database at the server platform are utilized to update the contents of the CRM database stored in the client data store . Once the CRM database has been synchronized the routine continues to operation where the contents of the plug in library are synchronized. Once the plug in library has been synchronized the routine returns to operation described above. It should be appreciated that the synchronization process shown in may be performed periodically in an automated fashion or manually in response to a user command. Alternately the process shown in may be performed when the CRM client computer is going offline.

Referring now to an illustrative routine will be described for executing business logic extensions on a client computing system. The routine begins at operation where the CRM client application determines whether it is online or offline. If the CRM client application is online the routine branches from operation to operation where the CRM client application utilizes the server provided application services described above with respect to .

At operation the CRM client application calls the CRM web services with a request. In response thereto the routine continues to operation where the execution pipeline is performed for the request. As a part of the execution of the pipeline any specified plug ins A N are executed on the server platform at operation . Additionally if any plug ins have been configured for asynchronous execution these plug ins are queued in the manner described above with reference to at operation . As discussed above these plug ins may be executed asynchronously at a later time. From operation the routine continues to operation where the server platform returns the results of the operation to the calling CRM application . The routine then continues from operation to operation where it ends.

If at operation the CRM client application determines that it is offline the routine branches from operation to operation where the CRM client application utilizes the client provided application services described above with respect to . In particular at operation the CRM client application calls the CRM web services with a request. In response thereto the routine continues to operation where the execution pipeline is performed for the request. As a part of the execution of the pipeline any specified plug ins A N are executed on the client platform at operation . Additionally if any plug ins have been configured for asynchronous execution these plug ins are queued for execution in the manner described above with reference to at operation . As discussed above these plug ins may be executed asynchronously at a later time by the client platform . From operation the routine continues to operation where the client platform returns the results of the operation to the calling CRM application . The routine then continues from operation to operation where it ends.

Referring now to an illustrative computer architecture for a computer capable of executing the software components described above with respect to will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer and may be utilized to embody any of the computer systems described herein.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the CRM client application the CRM application the plug in library and the CRM database each of which has been described above with reference to . Other program modules described herein may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that technologies for executing business logic extensions on a client computing system are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

