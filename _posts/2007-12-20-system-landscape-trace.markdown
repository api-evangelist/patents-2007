---

title: System landscape trace
abstract: This disclosure provides various implementations for supporting multiple system and application tracing. In one aspect, software can generate a globally unique identifier (GUID) for a first business process associated with a trace and transmit the GUID to a remote computer for association with a second business process related to the first business process. In another aspect, the software can identify a GUID for a trace that is executing for a first business process that is associated with a first application. The software can then associate the GUID with a second trace for a second business process related to the first business process, where the second business process is associated with a second heterogeneous application disparate from the first application. In some instances, the GUID may comprise a combination of a system identifier, a business process identifier, and a time identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510720&OS=08510720&RS=08510720
owner: SAP AG
number: 08510720
owner_city: Walldorf
owner_country: DE
publication_date: 20071220
---
This disclosure relates to methods and software for analyzing business processes and more particularly to methods and software for analyzing business processes distributed over logically and physically separated software systems.

Enterprise Resource Planning ERP systems integrate the data and processes of an organization into a unified system. A typical ERP system can use multiple components of computer software and hardware to achieve the integration. One general task in development and support of ERP systems as well as other types of systems and software is the analysis of various business processes running within the system. In some instances this analysis may be performed by tracing the execution of one or more business processes. While tracing a set of information e.g. SQL statements lock operations communication steps etc. regarding the business process s execution is recorded for future review and analysis. The set of tracing information is typically used by programmers system administrators and advanced users for debugging and diagnosing problems with the traced systems and software. In some instances the set of tracing information may also be used to determine which business processes could be optimized by removing or modifying the actions occurring during each business process s execution. Tracing may be used effectively both during development and after the release of various types of software.

In some modern ERP applications business processes are distributed over a plurality of logically and physically separated software systems. Current ERP systems include tracing tools that allow business processes to be traced when executed on a local system. For distributed software systems however these tracing tools are not able to bridge system borders and provide complete trace records for related business processes executed remotely from the local system. In other words if system tracing is desired in a distributed system each system on which business processes are to be executed must be individually set and manually prepared for tracing prior to performing the trace analysis. Therefore programmers and administrators must have detailed knowledge of each system related to a particular business process in order to collect the set of trace information necessary for a meaningful and complete analysis. Thus automatic tracing of business processes distributed over several separated software systems is not possible using the current available trace tools.

This disclosure provides various implementations of systems software and methods for supporting multiple system or application tracing. In one aspect software can generate a globally unique identifier GUID for a first business process associated with a trace and transmit the GUID to a remote computer for association with a second business process related to the first business process. In another aspect the software can identify a GUID for a trace that is executing for a first business process that is associated with a first application. The software can then associate the GUID with a second trace for a second business process related to the first business process where the second business process is associated with a second heterogeneous application disparate from the first application. In some instances the GUID may comprise a combination of a system identifier a business process identifier and a time identifier.

While generally described as software some or all of these aspects may be further included in respective systems or other devices for executing implementing or otherwise analyzing a suitable system. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the preferred embodiment will be apparent from the description and drawings and from the claims.

This disclosure generally describes implementing or facilitating the tracing and analysis of a plurality of business processes running in a distributed software environment. For example a plurality of business processes are executed across servers or heterogeneous applications can be traced using a multiple or distributed trace framework for tracing recording and collecting information generated by the business processes during their execution. Importantly this solution allows a plurality of related business processes performing interrelated tasks throughout the distributed software environment to be easily traced and tracked even when the plurality of business processes are executed across two or more logically and or physically heterogeneous software systems. In allowing the automatic tracing of a plurality of business processes executed across distributed software systems the present disclosure provides software developers and administrators the ability to perform complex system trace analysis and debugging without requiring extensive prior knowledge of what when where and how the plurality of related business processes execute.

Turning to the example implementation of environment includes or is communicably coupled with one or more clients a first server a second server and a network . In the present implementation each server includes an interface a processor a trace framework a task handler a business application and a memory . Each server comprises electronic computing devices operable to receive transmit process store or manage data associated with the environment . Generally this disclosure provides merely one example of computers that may be used with the disclosure. As used in this document the term computer is intended to encompass any suitable processing device. For example the environment may be implemented using computers other than servers including a server pool. Further either of or both servers and may be adapted to execute any operating system including Linux UNIX Windows Server or any other suitable operating system. According to one embodiment either or both servers and may also include or be communicably coupled with a web server and or a mail server.

The illustrated servers each include an interface for communicating with other computer systems in a client server or other distributed environment such as client or the other servers connected to the network . Generally interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically interface may comprise software supporting one or more communication protocols associated with communications such that the network or hardware is operable to communicate physical signals.

The network facilitates wireless or wireline communications between server and server as well as any other local or remote computer such as client . Indeed while illustrated as a single network network may be a discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network. In some instances a portion of the network may be a VPN merely between the server and the client across a wireline or wireless link. Such an example wireless link may be via 802.11a 802.11b 802.11g 802.20 WiMax or other types of wireless links. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components in the system. The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

Each server also includes a processor . Each processor executes instructions and manipulates data to perform the operations of the associated server such as for example a central processing unit CPU a blade an application specific integrated circuit ASIC or a field programmable gate array FPGA . Although described as a single processor in the servers multiple processors may be used according to particular needs and references to processor are meant to include multiple processors where applicable. In this particular implementation the processors execute particular instances of the business application the trace framework and the task handler .

At a high level business application is any application program module process or other software that may execute change delete generate or otherwise manage business information according to the present disclosure. In certain cases environment may implement a composite business application . For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components and may have the ability to generate run time implementations in different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET. As illustrated in one or more portions of the business application may be stored referenced or executed remotely e.g. business application shown in server and business application shown in server . For example a portion of business application may be a web service that is remotely called while another portion of business application may be an interface object bundled for processing at client . Moreover business application may be a child or sub module of another software module or enterprise application not shown without departing from the scope of this disclosure. Additionally in some instances application may be a hosted solution that allows multiple parties in different locations and associated with different systems to perform the respective processing. For example client or a user local to server may access business application on server or even as a hosted application located over network without departing from the scope of this disclosure. In another example portions of business application may be used by an authorized user working directly at server . Regardless of the particular implementation software may include software firmware wired or programmed hardware or any combination thereof as appropriate. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others.

More specifically business application may be a composite application or an application built on other applications that includes an object access layer OAL and a service layer. In this example business application may execute or provide a number of application services such as customer relationship management CRM systems human resources management HRM systems financial management FM systems project management PM systems knowledge management KM systems and electronic file and mail systems. Such an OAL is operable to exchange data with a plurality of enterprise based systems and to present the data to a composite application through a uniform interface. The example service layer is operable to provide services to the composite application. These layers may help business application to orchestrate a business process in synchronization with other existing processes e.g. native process of enterprise based systems and leverage existing investments in the IT platform. As illustrated in business application may run on a heterogeneous IT platform. In doing so the business application may be cross functional in that it may drive business processes across different applications systems technologies and organizations. Accordingly business application may drive end to end business processes across heterogeneous systems or sub systems.

Business application may also include or be coupled with a persistence layer and one or more application system connectors. Such application system connectors enable data exchange and integration with enterprise sub systems and may include an Enterprise Connector EC interface an Internet Communication Manager Internet Communication Framework ICM ICF interface an Encapsulated PostScript EPS interface and or other interfaces that provide Remote Function Call RFC capability. It will be understood that while this example describes the business application as a composite application the business application may instead be a standalone or relatively simple software program. Regardless business application may also perform processing automatically which may indicate that the appropriate processing is substantially performed by at least one component of environment . It should be understood that this disclosure further contemplates any suitable administrator or other user interaction with application or other components of environment without departing from its original scope.

As illustrated in each portion of the business application i.e. business application and business application is associated with a plurality of business processes . In some instances a first portion of the business application i.e. business application may be located at a first server and associated with a first set of business processes while a second portion of the business application i.e. business application may be located at a second server and associated with a second set of business processes . When viewed as a whole business applications and may represent the entire business application while in other instances they may represent merely a portion of the distributed business application .

In the present disclosure a business process may be any process task method service or interface involved in the performance and operations of the business application . In some instances each business process may be a set of operations and logic related to a specific action or event. In some instances a first business process may be related to a second business process such that the execution of the first business process results in includes or causes a request for the second business process to be executed. The first business process and the second business processes may be associated with two different portions of the business application each portion and therefore each process executing remotely from the other. In those instances the first business process during its execution may send a request for the second business process to be executed. The request may be sent using the first server s inherent functionality to deliver the request across network to the second business application . In other instances the requested second business process may be associated with and local to the first portion of the business application . In those instances the business process may use the internal communications of the business application to request the execution of the local business process. Further in some instances a portion of the first set of business processes may overlap with a portion of the second set of business processes such that one or more business processes may be performed by either the first or second portion of the business application . In other instances however the first set of business processes may be mutually exclusive from the second set of business processes such that each business process may be executed by only one portion of the business application . In those situations each instance of a particular business process must be performed by a particular portion of the business application.

The processor can also execute the trace framework which generally provides tracing tools for the development and analysis of the business application and related business processes . The disclosed trace framework allows developers administrators and users to trace record and analyze the events that occur during the execution of a particular business process including events that occur during the execution of another business process related to the execution of the particular business process . For example one implementation of the trace framework may allow tracing of one or more of the following events occurring during the execution of the business processes associated with business application database accesses database locking activities logical locking activities e.g. SAP locks remote calls of transactions and reports http traffic authorization checks modularization units of the underlying programming language and table buffer calls. In other implementations other types of data and events may be traced. Records of the traced process events may be stored in a trace record . Each trace record may contain information about a specific business process s execution and may be implemented as eXtensible Markup Language XML documents text files flat files comma separated value CSV files or any other format compatible with the trace framework . In some instances the trace record may include event and tracing information for two or more related business processes . For instance when a first business process requests the execution of a second business process the tracing information for both processes may be stored within the trace record associated with the first business process

The trace framework may create the trace records upon activation of a particular trace. After creation and during execution of the one or more business processes the trace records may be updated asynchronously such that the information is generated and stored as runtime files within the trace framework . At various intervals or upon completion of the trace analysis the trace record may be updated and stored. In other instances the trace records may be synchronously updated during execution of the one or more business processes using real time updates to the trace record in memory . The trace framework may further include methods for collecting and retrieving generated trace records from local and remote systems as well as additional methods for analyzing displaying and exporting importing the trace records .

In some instances the trace framework may be implemented as a portion of the business application while in others it may be an agent or module running on the server capable of monitoring the business processes being executed therein. In still other instances the trace framework may be a standalone application located in the server that is separate from yet tightly integrated with the business application . In those instances the trace framework may be an application similar to the business application as described above. The trace framework may also be distributed throughout the environment such that portions of the trace framework e.g. trace framework and are located at each server or sub system where relevant business processes may be executed. Conversely each server may include a unique trace framework and where each server s respective trace framework is capable of communicating with the trace frameworks of other servers via the network . Because each server includes the trace framework operable to perform the necessary tracing functions related business processes executed throughout the distributed system may be traced regardless of where on the system they are actually executed.

The trace framework also include a set of trace information used to store trace records collected after a trace analysis has completed and the various trace records generated are retrieved. In some instances the set of trace information may instead be stored in the memory associated with each traced business process . The set of trace information may be stored as eXtensible Markup Language XML documents text files flat files comma separated value CSV files or any other format compatible with the trace framework . In some instances the set of trace information may be internally indexed or logically stored according to the associated context GUID.

As discussed above the first business process may request the execution of a local or remote second business process . In either situation information describing the requested second business process and on which servers or systems it resides may be maintained for retrieval of the related trace records and information. To store that information each trace framework may include a set of requested process information . The set of requested process information contains a set of information identifying and describing the business processes requested by the first business process . As previously described the first business process in order to perform the task or function for which it is responsible may require results information or other data obtainable after or during the execution of a second business process . For instance during its own execution the first business process may generate a request for the execution of the second business process . If the first business process requests the execution of a second business process that is local to first business application the set of requested process information may include information describing the requested business process including in which portion of the first business application the process is executed. If on the other hand the requested second business process is to be executed at remote server additional information may be stored with the set of requested process information . For instance information identifying the remote server the requested business process the communication protocols used to communicate with the remote server and the requesting business process along with other relevant information may be stored with the set of requested process information . When the trace analysis is complete the trace framework may access the set of requested process information to determine where trace information associated with the first business process and its requested processes may be stored including where and how to collect the trace information.

A trace filter may also be associated with each trace analysis performed by the trace framework . Trace filters help define the set of business process event information to be recorded during the trace analysis. For instance the user may need information regarding only the databases accessed by the first business process . In those instances the trace analysis will only generate and the trace records will only store information related to the databases accessed by the business process . Other data and events may be specified by the user including database locking activities logical locking activities e.g. SAP locks remote calls of reports and transactions Hypertext Transfer Protocol HTTP traffic authorization checks modularization units of the underlying programming language and table buffer calls. Additionally the trace filter may limit the recording of events to those associated with one or more particular users transactions processes or programs. As illustrated in the trace filter may be stored in the trace framework . In other instances however the trace filter may be stored in memory and referenced by the trace framework during the trace analysis.

Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. For example memory may store classes frameworks applications backup data business objects jobs or other information that includes any parameters variables algorithms instructions rules constraints or references thereto. The memory may also include any other appropriate data such as virtual private network VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files HTML files or templates and others. In the present implementation the trace records generated by each trace analysis may be stored within the memory associated with the local trace framework . For instance trace records generated by trace framework may be stored within memory associated with the first server . Trace records generated by the trace framework of server may be stored at memory

In many instances the first business process associated with business application may request the execution of a second business process associated with business application wherein the business application is distributed across logically and or physically separated systems such as servers and of illustrated . Current tracing methods cannot successfully and consistently traverse the divide between the two systems without prior knowledge of which systems the related business processes will be running on. Further even if some information regarding the systems is available current tracing methods do not provide for the automatic tracing for related business processes running on both the local and remote systems. In order to remedy this deficiency the present disclosure introduces the task handler . In some instances the task handler may be a modified task manager a program used to provide information about the processes and programs running on a system including the information regarding the general status of that system. The task handler may also be adapted to terminate processes and programs running on the server as well as change the processes priority. In one implementation the task handler may be the task manager associated with the operating system running at server . For instance in servers running the Microsoft Windows XP operating system the task handler may be the Windows Task Manager. In other implementations the task handler may be a portion module or agent of either the trace framework or the business application . Further the task handler may be a separate standalone process or module operating within each server .

The context GUID list stores a list of the generated context GUIDs and the business processes associated with them. The context GUID list may be used as a centralized storage for the information necessary to trace complex business processes executing in a plurality of environments. The context GUID information stored in the context GUID list includes the business process traced and its associated GUID. shows the context GUID list stored within the task handler . In some instances the context GUID list may be stored in memory and referenced by the task handler when the information is needed. Further in some instances each context GUID list may only store the GUID information related to the business processes executed on the system or server associated with the task handler . In other instances one or more of the context GUID lists may store the GUID for each and every business process executed in the distributed environment . In those implementations a centralized GUID list may provide easier and quicker access to the GUID information for the trace framework at which the trace analysis is requested.

In some implementations the task handler associated with trace framework may be set in an inheriting mode. While in the inheriting mode the task handler can cause business processes related to the first business process to be associated with and inherit the GUID of the first business process . For instance when the first business process requests the execution of a second business process the second task handler may receive the context GUID associated with the first business process from the first task hander . The task handler may then set the GUID associated with the second business process to the GUID associated with the first business process in the context GUID list . The context GUID associated with the first business process along with the trace filter associated with the trace analysis may be communicated to the second task handler using the inherent functionality of the first server the second server and the network . By passing the context GUID to the remote task handler the second business process may be associated with the same context GUID as the first business process . Once the trace analysis is complete the trace framework may collect all local trace records associated with the context GUID of the first business process . The trace records of each related business process both local and remote that inherited that context GUID may then be collected so that all trace information is available to the trace framework and therefore the user.

Further the task handler may include a set of APIs exposing the task handler s functionality to other programs and developers in order to aid in the general performance of the environment . In some instances the APIs may be exposed to remote systems such that the remote systems may using the exposed APIs request the GUID associated with a particular business process . Using the APIs the task handler receiving the request may communicate the requested GUID to the remote system. The remote system may be able to access the functionality of the task handler without additional knowledge regarding the business application or trace framework associated with the task handler .

In certain implementations the network may be a secure network associated with the enterprise and certain local or remote clients . The client is any computing device operable to connect or communicate with servers or the network using a wireline or wireless connection. At a high level each client includes the GUI and in some cases a task manager and development environment . The client comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with the distributed environment of . It will be understood that there may be any number of the clients communicably coupled to the servers . For example the client may include one local client and two external clients to the illustrated portion of the network . Further client developer and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover each client is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers. As used in this disclosure the client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of the servers or the clients including digital data visual information or the GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of the clients through the display namely the GUI . The client may also include a task manager . The task manager may be a program used to provide information about the processes and programs running on the client including the information regarding the general status of the client . Further the task manager may be adapted to terminate processes and programs running on the client as well as change the processes priority. In other instances the task manager may have additional functionality similar to the task handler described above.

GUI comprises a graphical user interface operable to for example allow the developer to interact in a development environment or to provide the client an interface with at least a portion of environment for any suitable purpose. Generally the GUI provides the user with an efficient and user friendly presentation of data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time dashboards where tabs are delineated by key characteristics e.g. site . The GUI is further operable to generate or request historical reports. Generally historical reports provide critical information on what has happened including static or canned reports that require no input from the user and dynamic reports that quickly gather run time information to generate the report. Therefore the GUI contemplates any graphical user interface such as a generic web browser touch screen or command line interface CLI that processes information in environment and efficiently presents the results to the user. The servers can accept data from the client via the web browser e.g. Microsoft Internet Explorer or Mozilla Firefox and return the appropriate HTML or XML responses using the network . The client may also include reference or execute an agent to assist in data gathering. The agent may be any script library object executable service daemon or other process.

The client may also include a development environment . In some instances the development environment may be used to develop create modify or analyze an application using modeling systems. In general these models can specify the types of development objects or components that can be used to build applications such as the business application as well as the relationships that can be used to connect those components. The development environment may be tightly integrated with the trace framework such that additions and modifications to the application may be traced throughout development to analyze the various business processes executed within the environment . The development environment may be an integrated environment for the development of J2EE based multi tiered business applications. It may provide an open and extensible development environment using Java and Web services. Tool sets may be represented as perspectives that control the editors and views displayed thereby allowing developers to switch quickly between perspectives to work on different tasks. Some example perspectives may include 

J2EE perspective Can support the development and deployment of J2EE technologies such as Java Server Pages JSPs servlets and EJBs 

Persistence perspective Can support the creation and definition of database objects such as tables and indexes through the use of the Java Dictionary editors and standards such as SQLJ or Java Data Objects 

Debugging perspective Can support testing of Java applications by checking metrics conventions authorizations and language restrictions and or

Java Development Infrastructure perspective Can provide tools for organizing tracking and synchronizing the work of large groups of developers. The developer infrastructure manages source code incrementally builds new versions and deploys applications on the right server at the right time.

The development environment may also support development kits that contain special tools dedicated to certain components. For example a Mobile Development Kit may integrate tools required to help build and test mobile applications for PDAs and laptops. The development environment may also include tools dedicated to constructing an application s user interface. Some kits may be language agnostic and may support Java ABAP as well as other programming languages.

In another example the development environment may be the technical foundation for enterprise mobility within another development studio and provide the technology that powers composite applications for a mobile business. With this development environment the business may mobilize quickly taking advantage of existing IT infrastructure and extending tried and true business processes within and beyond enterprise boundaries. This example development environment may comprise three mobile client technologies to enable standardized mobile business solutions as well as customer specific developments. These clients may be optimized for specific user roles and target devices. For example the modules may include 

Mobile Java client Can be optimized for personal digital assisted PDA or handheld devices that display occasionally connected applications such as mobile asset management 

Mobile .NET client Can be designed for Microsoft Windows based devices that display occasionally connected CRM field applications with a rich function set and or Mobile browser client Can be designed for mobile devices that are connected to a web server using various technology.

As an integrated component of another development studio the development environment may potentially leverage the overall platform benefits. For example mobile business may operate in both connected and disconnected modes because development environment may provide a local run time environment employees can perform their jobs whether disconnected or connected to the systems at their main office. With solutions powered by this development environment employees may store data offline on their mobile device and then synchronize information on back end systems as needed. This development environment may provide a mobile development kit that helps developers build and customize mobile solutions that are tightly integrated with the back end system. As described above the development environment is often used for customizing or enhancing business application or a related framework.

In alternative implementations as shown in more than two servers may be present. For instance illustrates a third server with a third portion of the business application and an associated set of business processes . Similar to the implementation of the illustrated environment of involves a distributed software environment wherein the business application is further distributed across the additional server . Of note the first business process may request for several reasons that a second business process be executed. When the request is sent to the second server from the first business process along with the context GUID associated with the first business process and the trace filter the trace framework of the first server may store the information regarding the execution request in the set of requested process information . The request along with the context GUID and the trace filter may then be received at the second server where the second business application may execute the second business process . The task handler may then associate the context GUID of the first business process with the second business process such that the second business process inherits the context GUID of the first business process . Additionally the trace filter of the first trace framework may be set as the trace filter for the second trace framework

Similar to the first business process the second business process may during its own execution request the execution of the third business process associated with the third portion of the business application . When that request is made the information associated with the request to the third server may be stored within the second trace framework s set of requested process information . Along with the request the context GUID associated with the second business process and therefore the first business process and the trace filter may be passed to the third server . The task handler of the third server allows the third business process to inherit the context GUID of the related first and second business processes and . Further the third portion of the trace framework sets the received trace filter as the new trace filter . Additional iterations of the same process may be performed if additional servers are associated with the network and additional related business processes are requested and executed in the distributed environment . Therefore each business process related to the first business process either directly or indirectly may be associated with the same context GUID and trace filter of the first business process such that each trace record associated with the first business process is associated with a single context GUID.

Once the particular business process is chosen the user may select the type of information to be traced. As illustrated the Choose Trace Type table provides users with the option to select the types of business process events to be traced. In the present implementation four trace types are available for selection and include a SQL Trace a Database Locking Trace an RFC Trace and a Table Buffer Trace. Additional trace types relevant to the type of business processes generally executed within the particular environment may be available in other implementations. Using the radio buttons of table the user may select one or more of the trace types. The selections made from the Choose Trace Type table may be associated with the trace filter of so that only business process events matching the types specified are recorded during the trace analysis. In some instances additional filters may be enabled by activating the Enable Trace Filter button . This button may provide the user with more detailed tracing criteria thus allowing users to further limit the information recorded. Some additional criteria that may be used to limit the trace analysis may include one or more of the following the actions executed by a specific user the use of a particular transaction process or program or the accessing of a particular file. The additional filter criteria may allow users to more finely focus the trace analysis on particular operations and tasks of the business process .

Once the filters and the business process to be traced are set the user may enable the trace by activating the Enable Trace button . Once enabled the Trace Status Display may show that a trace is active. As illustrated the Trace Status Display shows that no trace is active. The initial screen also provides a Stop Trace button . When activated the Stop Trace button can end the current trace analysis regardless of whether the business processes being traced have completed their operations. Finally the initial screen may also include the Collect and Display Trace button . When activated the Collect and Display Trace button may send the user to the Collect and Display Trace interface illustrated in . At this screen the user may collect display and analyze the recorded trace records .

Returning to a context GUID is associated with the business process at step after the trace is activated. In most cases the context GUID is associated with the business process either simultaneously with or immediately after the trace is activated in step in order to avoid omitting any business process events occurring shortly after the trace analysis is activated. In those alternative implementations where the trace analysis is activated for and associated with the first business application then at step the context GUID is instead associated with the first business application . At step the trace analysis process identifies an event associated with the business process . In some instances this event may include the accessing of a particular database the use of a SQL statement or some other task associated with the business process

At step the process determines whether the business process event identified is a request for the execution of a remote business process . If the identified event is not a request for the execution of the remote business process the process continues to step . However if the identified event is such a request then at step the server transmits the global trace information e.g. the context GUID and trace filter associated with the business process to a remote system or server e.g. server where the remote business process is to be executed. Further at step the server stores the information describing the remote system or server to which the trace information is sent. This remote system information may be stored in either the memory or the trace framework and is important for the overall tracing of the related business processes executed remotely from the server Once the information has been stored process continues to step .

At step it is determined whether the business process event identified in step satisfies the trace filter associated with the first business process If the identified business process event does not satisfy the trace filter criteria the process continues at step . However if the identified business process event does satisfy the trace filter criteria then a business process event record may be generated and associated with the business process at step . Examples of the information stored in a business process event record may include the event s name the start and stop times of the event the result and whether the event was successful. Additionally in some instances the trace filter may be set so that requests for the execution of remote business processes are also recorded during the trace analysis.

At step the process determines whether a command to stop the trace analysis has been received. In some instances the stop command may be automatically generated based on one or more events occurring during the execution of the first business process while in other instances the stop command may be manually generated by the user activating the Stop Trace button of . If a stop command has been received process may move to step where the trace analysis is stopped. If no stop command is received however process continues at step where a determination is made as to whether the first business process is complete. If the first business process is not complete then process may return to step at which the next business process event is identified. However if the business process is complete then the trace analysis is stopped at step . Once the trace analysis is stopped the trace record associated with the business process may optionally be stored in memory at step . In some instances the trace record may be a runtime file populated with the process event records generated by the trace analysis. In those instances the runtime files may be stored at the completion of the trace analysis so the trace record can be reviewed and analyzed at a later time. In other implementations the trace record may be stored in memory at all times and updated with each new business process event. In those instances step is superfluous and may be omitted.

At step the task handler determines whether it has received a request from the first business process to execute the second business process on remote server has been identified. If no such request is identified task handler may return to its normal functions at step . However if the task handler identifies a request for the execution of the second business process then at step the task handler may cause the communication of the context GUID associated with the first business process and in some cases the trace filter to the remote server . In some implementations the task handler may communicate the information to the remote server itself. In other instances the task handler may cause another component application or process of the first server to communicate the information. Once the proper information is provided to the remote server process returns to step .

At step the trace framework identifies a global trace filter . In some instances the trace filter may be defined by a user interacting with the trace framework e.g. via the visual interface of while in other instances the trace filter may be set to a default value determined by the trace framework . In some instances the default value may be the criteria applied in to the previous trace analysis. In still other instances the default value may be a predefined set of criteria used as the general trace filter when no other values are provided. Once the trace filter is set the trace framework creates a trace file to store the information recorded during the trace analysis at step . In the implementation of the trace file is a runtime file stored within the trace framework . In other implementations the trace file may be created and stored in memory . As more business process events occur during the trace analysis the trace file may be updated either synchronously or asynchronously.

At step the trace framework identifies a business process event occurring during the execution of the first business process . The identified process event may be any operation performed by the identified business process including as examples the accessing of a database an RFC call or a request to execute a remote business process . After identifying the event at step the trace framework determines whether the business process event satisfies the criteria of the trace filter . For instance the trace filter may be set to only record events where a database is accessed. Thus if the identified event is an RFC call the trace filter criteria will not have been met and the trace analysis process will continue to step . However when the identified event satisfies the trace filter criteria the trace framework generates a business process event record within the trace file at step . The event record includes relevant information regarding the identified event including for example one or more of the following the user associated with the event the transaction process or program associated with the event the time elapsed during the event including the event start and stop times and any output or result of the event. The information may be stored in the trace file created at step .

At step the trace framework determines whether a stop trace command has been received. If the stop trace command is received then at step the trace analysis is stopped. If a stop trace command is not received then at step the trace framework determines whether the first business process is complete. If the first business process is not complete then the trace analysis process may return to step and identify the next process event. However if the business process is complete then the trace analysis is stopped at step . If the trace file is a runtime file then at step the trace file may be permanently stored as the trace record . If the trace framework saved information to the trace record during the analysis the connections to the trace record may be closed and the trace record stored.

Turning to at step the server receives a request to execute a second business process from server wherein the requested second business process is related to the first business process of server . At step the server receives a set of trace information from the requesting server the trace information including the context GUID of the first business process and the global trace filter . In some instances the server may set trace filter to the criteria of the received global trace filter . In some instances the request and trace information received in steps and respectively may be received simultaneously in a single message or other communication. At step a trace analysis on the second business process may be activated. In some instances the trace analysis may be automatically activated based upon the requests received from the first server . In one example either the request for the execution of the second business process received at step or the set of trace information received at step may include a command to activate a trace analysis on the second business process . In other instances the trace analysis may be manually activated by a local user of server . Once the trace is activated then the trace analysis and in effect the second business process may be associated with the context GUID at step . The association of the context GUID with the trace analysis of the second business process allows the relevant trace records related to the first business process to be easily identified and in turn collected. The methods used to collect the trace analysis results may retrieve all trace records with the context GUID associated with trace analysis of the first business process

At step an event associated with the second business process is identified. Once identified at step it is determined whether the business process event is a request for the execution of an additional remote business process . In some instances the additional remote business process may be business process at server as illustrated in . In other instances the remote business process requested may be a business process executed at the first server other than the first business process . If the business process event is not a request for an additional remote business process process continues at step . However if the process event is a request for the execution of a new remote business process then at step the trace information which includes the trace filter and the global context GUID associated with the trace analysis are transmitted to the remote system where the requested business process will be run. At step information regarding the new system may be stored. Once the information has been stored process may continue at step .

At step a determination as to whether the identified business process event satisfies the trace filter is made. If the identified process event does not satisfy the filter then process moves to step . However if the identified event does satisfy the filter at step a business process event record may be generated that describes the event in detail. Once the event record is generated process continues to step where it is determined whether a stop trace command has been received. If a stop trace command has been received then process continues to step . If a stop trace command has not been received then process continues at step where it is determined whether the second business process is complete. If the second business process is not complete then process may return to step and identify a new business process event. However if the business process is complete then process continues to step where the trace analysis is stopped. Once the trace is stopped the business process event records are stored at step as part of the trace record at memory

At step the trace framework identifies a business process event. Using the trace filter at step the trace framework determines whether the business process event satisfies the trace filter s criteria. If the event does not meet the criteria of the trace filter then process continues at step . If the event does meet the criteria of the trace filter then at step the trace framework generates a business process event record in the trace file. Once the record is generated process moves to step where the trace framework determines whether a stop trace command has been received. In some instances the stop trace command may be sent from the server after it receives a stop trace command from the first business process or a user local to the first server while in other instances a local user of server may manually generate the stop trace command. If a stop trace command is received then process continues at step . Otherwise process moves to step where the trace framework determines whether the second business process is complete. If the second business process is not complete then process returns to step where a new business process event may be identified. However if the second business process is complete then the trace analysis is stopped at step . Once the trace analysis is stopped then the trace file is permanently stored in the trace record at step .

Once the related business processes and the trace analyses are completed trace records associated with the plurality of related business processes may be located throughout the distributed environment . describe the processes used to collect the sets of trace records associated with the trace analysis of the first business process from each location in the distributed environment where such information may be located. describes the process from the perspective of the trace framework associated with the first business process while describes the process from the perspective of the trace framework associated with a related but remotely executed second business process

Beginning with the trace framework receives a request to collect trace records associated with a particular business process in this instance the first business process at step . In some instances the request may be generated by a user who manually selected the first business process using the first business process s name context GUID description start time stop time or other identifying information recorded during the trace analysis. In other instances the trace framework or another software module using the trace framework may request or perform the collection process. In those cases the collection processes and may be an extension of the trace analysis processes described in .

Once a business process has been selected the user may use the Choose Display Type box to select the type of record display to be shown. As illustrated the box provides users with the option of selecting a general trace list or a detailed trace list. The general trace list may display information such as the transaction process identification number process type client and user name. Additionally information on the duration of the event the operation name and the statement description may also be displayed. The detailed trace list provides some additional information to the general trace list for instance the time at which the record was executed the name of the program that executed the recorded statement and information on any cursor used to access database entries. In other implementations additional display types may be present. The radio buttons associated with the Choose Display Type box may be changed through user interaction such as a mouse click or keyboard input.

Further the Trace Period box allows users to specify a set of time criteria for limiting the events displayed. Users may specify a starting date and time as well as an ending date and time so that only events occurring between those values are shown when the trace analysis is displayed to the user. Once the user has completed specifying which trace analysis to collect and display the Display button may be activated. Upon activation the trace analysis information may be presented to the user at the GUI . If the information entered by the user is incorrect however the user may activate the Clear button to empty all fields of the user interface . In some implementations the information in the Select Trace Analysis box may be pre filled with the context GUID process name or program associated with the last executed trace analysis. In that way users may easily collect the information on a previously run trace analysis without needing to know the associated context GUID process name or application involved.

Returning to at step the trace framework retrieves the context GUID associated with the requested first business process . In instances where the context GUID is stored by the task handler the trace framework may send a request to the task handler for the context GUID associated with the first business process . In other instances the context GUID may be stored locally at the trace framework and retrieved from the trace framework s internal storage. Once the context GUID has been retrieved at step the trace framework uses the context GUID to retrieve the trace records present in the local system i.e. server . To retrieve the local records the trace framework may access memory using a query for the trace records associated with the context GUID. Once the local trace records associated with the context GUID are received the trace framework may store or persist the records internally in the set of trace information

At step the trace framework determines whether during the trace analysis for the first business process any remote business processes were requested by the first business process . If no remote business processes were requested then collection process may continue at step . However if one or more remote business processes were requested then the trace framework determines the remote systems involved in the trace analysis at step . In some instances the remote systems involved may be known such that the remote systems may be determined manually by a user. In other instances the list of remote systems involved may be stored in a test framework or environment. Further the remote systems involved in the trace analysis may be automatically derived by the trace framework . To do so the trace framework may access the set of requested business process information associated with the first business process that is stored within the trace framework . The set of requested process information can include information related to the requests for remote business processes made by various business processes as they were traced. In some instances the information in the set of requested process information may include the identity of the first business process the remote business processes requested the communication protocols used to request the remote business process and the remote systems with which the first business process communicated. Each record in the set of requested business process information may be associated with the context GUID of the business process for which the request was generated. Thus the trace framework may query the set of requested process information using the context GUID associated with the trace analysis of the first business process to determine which remote systems should be contacted to retrieve additional related trace records .

At step the trace framework requests trace records associated with the first business process s context GUID from a first remote system determined in step . In the present implementation the first remote system is the second server . Further description of the collection process from the perspective of the second server is provided below in relation to . At step the trace framework receives the trace records associated with the first business process s context GUID from the second server . At step the trace records received from the second server may be persisted with the local trace records in the set of trace information . In some instances the received trace records may be stored in memory instead of the set of trace information . At step the trace framework determines whether additional remote business processes at other remote systems e.g. server of were requested by the first business process . If no additional business processes were requested the process may continue at step . If additional systems were used then process returns to step and the trace framework may perform steps through for the additional system. Once the collection is complete and no additional remote systems are left for retrieval then at step the trace framework may store the complete set of trace information in memory . In other instances the collected trace records may be kept within the set of trace information of the trace framework . In some instances the collected set of trace records may be maintained for a certain period of time such that the collection process does not need to be run again during that period. By maintaining the collected trace records users may review the results of the trace analysis without running multiple collection processes each time the information is requested.

At step the trace framework sends a request to one of the determined remote systems such as server of for the trace records associated with the context GUID of the second business process and by association of the first business process . At step the trace framework receives the set of requested trace records from the remote system. The trace framework persists the received trace records at step . In some instances persisting the received trace records may mean that the received trace records are stored in the set of trace information with the collected local trace records . In other instances the received trace records may be stored in memory with other trace records associated with the second server . At step the trace framework determines whether any additional remote systems through requests for the execution of remote business processes were involved in the trace analysis. If additional remote systems were involved then process returns to step to request the records from those additional remote systems. If the trace framework has completed the collection and no additional remote systems remain then at step the local trace records and the records collected from the one or more remote systems are transmitted to the system from which the collection request of step was sent. In this particular instance the collected trace records may be supplied to server . For example step of describes the trace framework of the first server receiving the collected trace records transmitted from the trace framework of the second server

While the present disclosure uses a plurality of flowcharts and accompanying descriptions to illustrate the example techniques associated with various processes of environment contemplates using or implementing any suitable technique for performing these and other tasks. It will be understood that these techniques are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these flowcharts may take place simultaneously and or in different orders than as shown and described. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the processes remain appropriate.

Although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. For instance the first business process may request for the execution of not only additional remote business processes but also business processes local to server . Additionally the distributed environment may include more systems than shown in either such that process is performed by a plurality of trace frameworks associated with each of the plurality of systems. In still other instances the context GUID may not be directly associated with an individual business process . Instead the context GUID may be associated with a business application . In those instances a new context of the trace framework may be created and set to the inheriting mode. Next a particular business application may be started in the this newly created context in order to be traced. Once the particular business application is started the trace framework may begin to trace the particular business application . The trace framework may then receive a context GUID associated with the business application from the task hander . Next the trace framework may associate the received context GUID with the trace framework header data included in each generated trace record . From there the processes described in may occur during the execution of the particular business application such that a set of trace records related to the execution of the particular business application are generated including those trace records generated by the execution of other business applications related to the particular business application . This alternative provides the ability to trace every part or portion of a business application without the need to predefine which of the one or more business processes related to the business application to trace. Using this solution each business process executed by and related to the particular business application may be traced. When starting the trace of the particular business application the initial screen of may provide a field that would allow users to provide a short description of the trace or trace measurements for later identification and review instead of the currently illustrated use of field namely selecting the business process that is to be trace . Additionally in the Collect and Display Trace interface of it may be possible to present a list of trace descriptions or trace measurements e.g. trace header data containing the context GUID for identification of a single trace record from where users could select from and display the various trace analyses. Accordingly the above description of example implementations does not define or constrain the disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure and such changes substitutions and alterations may be included within the scope of the claims included herewith.

