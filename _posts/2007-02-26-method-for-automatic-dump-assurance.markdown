---

title: Method for automatic dump assurance
abstract: A computer implemented method, an apparatus, and a computer usable program product are provided for adjusting a dump file space in a data processing system. Events with a potential to cause a dump are detected in a data processing system. A dump file size is estimated based on the detected events. The estimated dump file size is compared to the size of an allocated dump file space. A value results from the comparison reflecting the difference between the estimated dump file size and the size of the allocated dump file space. If the allocated dump file space is insufficient to hold a dump file of the estimated size, storage space is reclaimed and the allocated dump file space is expanded to at least the estimated size.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836344&OS=07836344&RS=07836344
owner: International Business Machines Corporation
number: 07836344
owner_city: Armonk
owner_country: US
publication_date: 20070226
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method and apparatus for managing error data. Still more particularly the present invention relates to a computer implemented method an apparatus and a computer usable program product for storing a dump file generated in response to an error in the data processing system.

Data processing systems occasionally encounter error conditions which limit the ability of the data processing system to continue performing the data processing system s normal functions. Under certain error conditions the data processing system may become unstable stop responding lose data and or even crash requiring a restart. Severe errors are error conditions that cause these and other similar effects on a data processing system.

An operating system is a collection of software programs that enables a data processing system to perform the data processing system s intended functions. Most operating systems provide a mechanism to save the information which exists in a data processing system at the time of encountering an error condition. The saved information is useful in diagnosis of the error condition. Users such as system administrators or software engineers may also use this type of information to reconstruct the error condition perform a post facto analysis of the cause of the error and restore all or part of the data that was in use on the data processing system at the time of the error condition. A dump is the act or process of saving this information. The result of a dump is a dump file that contains the saved information.

Frequently a dump file may require space on a data processing system storage device in an amount that reduces performance or storage capability for other purposes. For example a dump file may be so large as to require several hard disk accesses to read or write the dump file causing other applications that also need to access the hard disk to wait for their turn to access the hard drive resulting in the other applications slowing down.

Dump file space is the space that the operating system of a data processing system allocates for a dump file. In most cases although not necessarily the dump file and other data on the data processing system share the data processing system s storage devices. Several factors affect the allocation of the dump file space such as the overall available space on the storage device and the size of other data occupying the storage space.

Presently at the startup of a data processing system a user usually the system administrator initializes the space for the dump file at some predetermined size. As the data processing system runs over time the expected size of the dump file changes depending on factors such as which applications and how many applications are running at a given time. Generally as the number of running applications increases larger amounts of data are in use resulting in more pieces of information being present to be saved in case of an error and thereby resulting in a larger dump file.

Presently after initializing the dump file space to some predetermined size the user periodically adjusts the size of the dump file space using the user s judgment and experience with the data processing system. The user performs this adjustment of the space allocated for the dump file manually. In this adjustment process the user uses the available space on the storage device manipulates other data stored on the storage device to make space available and may also add new storage devices to the data processing system according to the user s judgment.

As applications run and the data processing system operates this manual process requires a user to constantly monitor for events occurring on the data processing system. Some of these events have the potential to cause an error condition on the data processing system and are thus events with the potential to cause a dump. For example two different users on the same data processing system may start two applications that are incompatible with each other thereby creating a potential for a dump. An event in this example is a user starting an application that conflicts with another application. This type of event is one that may cause a dump and thus is an event with the potential to cause a dump.

Similarly when the number of active processes or threads exceeds a predetermined threshold the demand on the resources of the data processing system increases beyond what a user deems a safe resource usage. Starting those additional processes or threads is also an event with the potential to cause a dump.

The illustrative embodiments provide a computer implemented method an apparatus and a computer usable program product for adjusting a dump file space in a data processing system. A dump file size is estimated. The estimated dump file size is compared to the size of an allocated dump file space. A value results from the comparison reflecting the difference between the estimated dump file size and the size of the allocated dump file space. The allocated dump file space is selectively adjusted in response to the comparison.

With reference now to the figures and in particular with reference to the figure provides an exemplary diagram of a data processing environment for implementing illustrative embodiments. Note that is only exemplary and does not assert or imply any limitation with regard to the environments for implementing different embodiments. One of ordinary skill in the art may make many modifications to the depicted environments.

Turning now to the figure depicts a diagram of a data processing system in accordance with an illustrative embodiment. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. Memory in these examples may be for example a random access memory. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may be for example a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above.

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. I O unit inputs and outputs data with other devices that may be connected to data processing system . For example I O unit may provide a connection for user input though a keyboard and mouse. Further I O unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system the object oriented programming system and applications or programs are located on persistent storage . These instructions may be loaded into memory and processor unit executes these instructions. Processor unit performs the processes of the different embodiments using computer implemented instructions which may be located in a memory such as memory .

In some illustrative examples data processing system may be a personal digital assistant PDA which generally includes a flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may comprise one or more buses such as a system bus an I O bus and a PCI bus. Of course one may implement the bus system using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in a bridge or memory controller hub. A processing unit may include one or more processors.

When a data processing system encounters error conditions the data processing system may become unstable stop responding lose data and or even crash. When such errors occur a risk of data loss exists in the data processing system.

Most operating systems provide a mechanism to save the information existing at the time of encountering error conditions in dump files. Depending on the configuration of the operating system the dump files can contain system wide information application specific information user specific information current state of the system memory error causing instruction and many other details. Naturally a collection of all this detailed information can result in a dump file having a size that reduces performance in the data processing system or reduces the amount of other data that may be stored on a storage device.

The different embodiments recognize that one reason the dump file is important is because a user such as a system administrator a software engineer or some other user with appropriate privileges may use the dump file to diagnose the error condition restore lost data and take steps that will reduce the chances of the error condition occurring again. Because the users of the dump file can use the data in the dump file for maintaining the data processing system in a proper operating condition in this manner the users can better perform these steps if more data is available in the dump file.

The illustrative embodiments recognize that sometimes a dump file remains incomplete because the space allocated for writing the dump file is insufficient for storing all of the information put into the dump file when a dump occurs. When the space allocated for the dump file is insufficient at the time of an error condition critical system data may be lost and be unavailable to the user later. Without the needed information to analyze the error condition the purpose of creating the dump file is defeated.

A user may select the space allocated for a dump file according to his her judgment. Alternatively the user may utilize guidelines provided by the various applications and operating systems for allocating the dump file space. Operating systems can also automatically allocate a dump file space of a default size at system startup and then allow a user to adjust that size as needed.

The illustrative embodiments further recognize that having a user manually adjust the size of the dump file space is slow and error prone because of the amount of data that the user needs to oversee collect and manipulate. Therefore the manual adjustment of the size of the allocated dump file space fails to meet the dump file size requirements in many instances. For example the illustrative embodiments recognize that the user may not be able to monitor the state of the data processing system all the time that the data processing system is in operation. As a result the user may not timely catch an event with the potential to cause a dump. Consequently the user may not be able to increase the dump file space in time to save a dump file larger than the previously allocated dump file space.

As a second example the illustrative examples recognize that the user may be aware that the dump file space should be increased but may not be able to increase the size of the dump file space because no free space is available on the storage device. In this case the user has to determine how to reclaim storage space before the user can increase the dump file space. Such a manual determination is time consuming and error prone partially due to the amount of data that needs to be handled during the reclaiming actions. Reclaiming of storage space is freeing up storage space that is otherwise occupied by data such as files and directories in a data processing system. Reclaiming actions are actions on the files and directories to free up at least some of the storage space the files and directories occupy. Some examples of reclaiming actions are purging compressing and relocating files in a data processing system. Purging involves actions such as deletion of files compressing involves actions such as making the files smaller by using a data compression technique and relocating involves actions such as moving the files to a new location possibly on another storage device to free up storage space where the files are stored.

Therefore the different embodiments recognize that a computer implemented method an apparatus and a computer program product for automatic adjustment of dump file space to assure that a dump file fits completely in the dump file space would be useful for managing data for later analysis when an error requiring a dump of data occurs. The illustrative embodiments describe such a computer implemented method an apparatus and a computer program product below.

With reference now to the figure depicts a block diagram of a system for automatic adjustment of dump file space in accordance with an illustrative embodiment. The block diagram shows the components of system for automatic adjustment of dump file space. One of ordinary skill in the art can implement system in software that can run under an operating system in a data processing system. is only an exemplary depiction of the system for automatic adjustment of dump file space in software and does not limit the illustrative embodiment. From this disclosure one of ordinary skill in the art will be able to implement the depicted components in software hardware or a combination thereof to operate under a given operating system for specific data processing system configurations.

Component provides the system management user interfaces including but not limited to those illustrated in . Event scanner component scans for events that have the potential for causing a dump. Event scanner component may additionally monitor the system resources by utilizing a system monitoring API through system monitor component .

Event scanner component and system monitor component may be the same component or distinct components in specific implementations. In specific configurations components and may also monitor for relevant events according to the schedule specified by a user or continuously monitor events as they occur in a data processing system.

Components and together or separately also estimate the size of the dump file expected based on the events components and detect. Space reclaiming component uses this estimate to determine how much storage space to reclaim if at all.

Space reclaiming component reclaims storage space by performing reclaiming actions such as purging compressing and relocating on the files and directories indicated by the user. Space reclaiming component reclaims storage space when needed for increasing the dump file space on the storage device. In specific implementations reclaiming can stop when space reclaiming component has reclaimed enough storage space to sufficiently to hold the estimated size of the dump file. Notification component provides support for notifying one or more users through the preferred mode of communication for example as indicated in fields in below.

This illustration of components only describes the functionality of the system for automatic adjustment of dump file space in an exemplary way and is not limiting on the illustrative embodiments. Those of ordinary skill in the art will find other ways of creating the various components are implementation dependent and apparent from this disclosure.

With reference now to the figure depicts a block diagram of a storage device in accordance with an illustrative embodiment. depicts the block diagram of the storage device in a conceptual manner in order to facilitate the description of the illustrative embodiment. The depiction does not reflect the actual organization of data in a storage device. One can implement storage device using persistent storage in data processing system in .

Storage device provides storage space for storage of data on a data processing system. Generally any combination of the users of the data processing system applications loaded on the data processing system or the operating system and other miscellaneous usages can share storage space . The miscellaneous usages include the dump file space. At any given time storage space may contain dump file space of a selected size. The selected size may be for example user selected a default size or selected by a program or process.

At the same time storage space may also store user data application data and other data as depicts in the conceptual block diagram. Storage space may also contain free space . The operating system or a user such as a system administrator a software engineer or a user with appropriate privileges may allocate free space for any use such as giving more space to a user or expanding the dump file space to accommodate a larger dump file.

The specific types of data and their relative organizations described above are only exemplary and are not limiting on the illustrative embodiments. Nature of data stored and the organization thereof on a storage device is implementation specific on each data processing system. Those of ordinary skill in the art can conceive many variations of the same from this disclosure.

Furthermore the storage space may span more than one storage device. The illustrative embodiments equally apply to data processing system configurations that use multiple storage devices to provide the necessary storage space.

With reference now to this figure depicts a logical view of a storage device in accordance with an illustrative embodiment. Logical view shows a directory structure of a file system located on a storage device such as storage device in . shows file which is a dump file as residing in a directory in the file system with a logical path in this exemplary depiction as home db2 sqllib db2dump 1234.0000. Logical view corresponds to storage device shown in . User data in can appear in user directory in logical view . Similarly application data in can appear in home directory . Likewise other data in can appear in etc directory .

Again the file system the directories and the files including dump file in are only exemplary and are not limiting on the illustrative embodiments. A user can create a dump file in any directory of choice in a given file system subject to the limitations imposed by the operating system in a given implementation.

A part of the system for automatic adjustment of dump file space such as system for automatic adjustment of dump file space in can also be an application that resides on the storage space. For example components in can reside on the storage space such as in application data in storage device in . These components can then appear separately or in a combined representation under home directory in logical view in . The system for automatic adjustment of dump file space provides a user interface for configuring the data processing system to utilize the illustrative embodiments.

With reference now to the figure depicts an exemplary graphical user interface in accordance with an illustrative embodiment. Graphical user interface contains data fields for use by a user to configure the data processing system to use the system for automatic adjustment of dump file space such as system for automatic adjustment of dump file space in . System management user interface component in can present graphical user interface .

As an example of the data fields graphical user interface contains field which a user can use for specifying the period at which the system for automatic adjustment of dump file space should scan the data processing system for events with the potential to cause a dump. Events with potential to cause a dump can be specific operating system events or events resulting from user actions. In addition to the above examples of events with a potential to cause a dump other examples of such events can be a hung process and expanding use of memory by a process beyond a predetermined period of time. In the case when the scan identifies one or more events a user can choose to receive a notification by indicating in field .

The scan can cover numerous types of events. For example the specific operating system supports certain events users create other events and applications running on the data processing system provide still more events. These events are only exemplary for describing the illustrative embodiments. Those of ordinary skill in the art will be able to conceive many other events from this disclosure.

Graphical user interface contains data field for specifying the period at which the system for automatic adjustment of dump file space should scan the data processing system s storage space. The system for automatic adjustment of dump file space such as system in uses this scan to determine if free space is available on the storage device should the dump file space need to be expanded. If available free space is insufficient for accommodating the dump file the system for automatic adjustment of dump file space determines how to reclaim the storage space. To wit the system for automatic adjustment of dump file space determines which files or directories can be purged compressed or relocated to create sufficient space for dump file space expansion.

Again the user can choose to be notified about the actions of the system for automatic adjustment of dump file space during the storage space scans by selecting field . The description of below shows one way of determining the files and directories to purge compress or relocate in accordance with an illustrative embodiment.

Continuing with the description of the user can indicate how the user should be notified by entering appropriate information such as an email address or a telephone number in field . Specific implementations of the illustrative embodiments may support more than one contact and more types of contact information such as a pager an instant message or a facsimile.

The system for automatic adjustment of dump file space such as system in determines if and when storage space should be reclaimed based on the information indicated above. Additionally the user can indicate by using field whether to free the space automatically or alert the user and let the user manually control the process of freeing up the storage space.

A further distinction is possible between groups of data in how each group is treated for freeing up storage space and what reclaiming actions are actionable on each group. For example if user data such as user data in is to be purged compressed or relocated the user can indicate using field whether to automatically take the action notify the user or take another action such as notify the owner of the user data and let he she take the reclaiming action.

Additionally most operating systems provide some resource management functionality through an application programming interface API . As an alternative a user can indicate in field whether the illustrative embodiment should use the operating system API to gain information about system resource usage. For example Advanced Interactive eXecutive AIX operating system manufactured by International Business Machines Corporation IBM provides a Workload Manager application WLM with API that can provide such information. Typically an operating system can provide information about the number of applications currently running and amount of memory used and loaded on the processor through such API.

Through such API the operating system can also inform about the number of applications running in the operating system kernel space and the application space. Illustrative embodiments recognize the higher number of applications that are running in the kernel space the higher the chances of a system crash resulting in a dump. Thus the information received through such API indicates events including events with the potential to cause a dump in a data processing system. Consequently illustrative embodiments can utilize the API to detect events that have the potential to cause a dump while scanning for events according to the user s specification in field .

Generally the system for automatic adjustment of dump file space such as system in detects the events for computing the estimated size of the dump file if one of those events should cause a dump. For example by detecting an event about the number of running applications exceeding a threshold the system for automatic adjustment of dump file space can estimate the size of the dump file to be at least the total size of data in the memory the size of data in the paging space and the size of uncommitted data elsewhere in the data processing system. The system for automatic adjustment of dump file space may estimate the size of the dump file differently for each event taking into account the nature of the event and the data that has to be saved in the dump file.

The fields in graphical user interface are exemplary and are not limiting on the illustrative embodiments. depicts the fields in order to illustrate the specific details of the system for automatic adjustment of dump file space in accordance with an illustrative embodiment. Those of ordinary skill in the art will find many other data fields useful to a user in a given data processing system configuration apparent from this disclosure.

With reference now to the figure depicts a graphical user interface showing a modified logical view of a storage device such as logical view in in accordance with an illustrative embodiment. System management user interface component in can present this graphical user interface. depicts modifications to the logical view of the storage device to include data fields along side each file or directory in graphical user interface . A user may enter data into data fields to specify how the system for automatic adjustment of dump file space is to treat the associated directory or file for reclaiming storage space.

The user may specify this information for a set of files. In these examples a set of files is a group of zero or more data files and directories in a data processing system. For example data field is associated with the root directory data field is associated with the home directory data field is associated with a file abc.db2 data field is associated with the user directory and data field is associated with the system directory. A user can input a numeric value in each of these data fields for example ranging from 1 to 3 where the numbers indicate the relative priority of the directories or files. A user can similarly provide a numeric value in the data fields adjacent to all the directories and files that the user wants to scan during storage space scan. The user can configure the illustrative embodiment such that the system for automatic adjustment of dump file space such as system in does not purge compress or relocate the files and directories with priority 1 compresses or relocates as needed those files and directories with priority 2 and purges those files and directories with priority 3.

Alternatively the user can specify other indicators in the data fields such as data fields . Through these indicators the user can specify whether the system can purge compress relocate or should not touch the associated file or directory. The user can use numeric symbolic alphanumeric or any combination thereof of any length as the indicators for this purpose.

The above examples of these indications are not limiting on the illustrative embodiments. Many other ways of indicating the actions that are allowed on files and directories in the storage space are possible according to specific implementations.

Generally the graphical user interfaces and the fields depicted therein in only describe the functioning of the illustrative embodiments in exemplary ways. Those of ordinary skill in the art will find many refinements additions and modifications to the interfaces apparent from this disclosure.

With reference now to the figure depicts a flowchart of a process of automatic adjustment of dump file space in accordance with an illustrative embodiment. One of ordinary skill in the art can implement the process in the system for automatic adjustment of dump file space in .

The process begins by scanning for events that can cause a dump. The process performs the scan for events on a scheduled basis step . The process also continuously monitors for events generated by the operating system depending on the workload for example the number of applications running in kernel and application spaces and system resource usage step . Based on the result of the scheduled scan and continuous monitoring for events that have the potential to cause a dump the process estimates a size of the dump file should a dump create a dump file step .

Next based on the estimate generated in step the process determines if sufficient storage space is available on the storage device to store the dump file if a dump creates a dump file step . If the process determines that the space available on the storage device is sufficient for this purpose the process returns to scanning for events with the potential to cause a dump yes output to step .

If the process determines in step that the storage space on the storage device is insufficient to hold the dump file of the estimated size the process proceeds to the next step in the process no output to step . Following the no path of step the process reclaims storage space step . As described with respect to and above the reclaiming step can proceed by purging compressing or relocating files and directories for which the user has set appropriate indications.

Reclaimed storage space or reclaimed space is the storage space reclaimed in this manner. Once the process has reclaimed sufficient storage space to hold a dump file of the size estimated in step the process increases the allocated dump file space step .

The process can continue in a loop in this manner for as long as a user requires the process to run. The process determines whether the process should continue or end step . To make this determination the process can receive an input from a user who may be monitoring the process or the process can simply repeat based on a rule a policy or a condition. If the process continues the process runs again as described above no output to step . Otherwise the process ends yes output to step .

The process can notify a user at any step in the process step . shows the process can generate a notification of step if the process detects an event with the potential to cause a dump during a scheduled scan. The process can also generate the notification if an event with the potential to cause a dump is detected during the continuous monitoring of workload events.

Furthermore the process can generate the notification of step upon estimating the size of the dump file. If the storage space available is insufficient to hold the estimated size of the dump file the process can generate the notification again.

Similarly when the process is reclaiming storage space the process can generate notifications to the users. The process can also generate the notification of step upon identification of directories and files to be reclaimed but before purging compressing or relocating those directories and files. The process can also generate the notification of step once the storage space is reclaimed.

The process can also generate the notification of step once the process has increased the dump file space to a size that can hold the estimated size of the dump file. Particular implementations of the process of can break down each shown step further into a series of more granular steps. Conversely an implementation of the process can also combine various steps. depicts the functioning of the process of automatic adjustment of dump file space and not a specific way to implement the process and therefore is not limiting on the illustrative embodiments.

Thus a data processing system can benefit from having a system for automatic adjustment of dump file space as described above. An automatic process for adjusting the dump file space provides assurance that sufficient space will be available to hold an estimated size of a complete dump file should a dump occur in the data processing system. Illustrative embodiments provide a computer implemented method and apparatus for automatic adjustment of dump file space. Illustrative embodiments estimate the size of the dump file if one can be created and compare the estimated size to the allocated dump file space. Illustrative embodiments then take steps to reclaim additional storage space for expanding the allocated dump file space if the allocated dump file space is insufficient to hold a dump file of the estimated size.

Such an automatic process also frees the user from continuously monitoring for events and adjusting storage space manually. Additionally the illustrative embodiments remove or reduce the risk of loss of dump file data that is otherwise present when a user manually adjusts the dump file space.

The illustrative embodiments can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the illustrative embodiments has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

