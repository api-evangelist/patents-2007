---

title: Techniques for managing configuration information among different physical devices
abstract: A technique involves managing configuration information used by an application. The technique involves disposing a first file in a first physical device. The first file includes first configuration information. The technique further involves disposing a second file in a second physical device. The second file includes second configuration information. The second physical device is different than the first physical device. The technique further involves providing access to a top level file having a first path string to the first file in the first physical device and a second path string to the second file in the second physical device. The top level file in combination with the first and second files operates as a single virtual document which includes the first configuration information of the first file and the second configuration information of the second file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680832&OS=07680832&RS=07680832
owner: EMC Corporation
number: 07680832
owner_city: Hopkinton
owner_country: US
publication_date: 20070629
---
Extensible Markup Language XML is a markup language which was developed by the World Wide Web Consortium W3C . A traditional XML document has an .xml file extension and typically includes XML tags which are defined by the document s author. Such a document enables the author to describe data in a manner that complements but does not replace Hyper Text Markup Language HTML which is commonly used for web pages.

In a typical XML document opening and closing tags delimit elements. In particular each XML document contains a root element and other elements nested within this root element. Furthermore parent elements can have child or sub elements which are nested within these parent elements.

A variety of tools exist which enable the author to navigate through an XML document. For example the XML Document Object Model XML DOM defines a standard way to access and manipulate XML documents. In particular the XML DOM presents an XML document as an inverted tree having elements attributes and text defined as nodes of the inverted tree. The author is capable of traversing and accessing components within the XML document using a set of standard functions.

Unfortunately accessing components within XML documents using an XML DOM and a set of standard functions is awkward and cumbersome. For example accessing a single data element requires traversing the inverted tree and making numerous function calls even if only a single item of data is needed. Such an approach is prone to error due to the number of steps required. Moreover an attempt to group data into separately maintained files would prove to be extremely costly in terms of the number of function calls and the effort needed to carry this out.

In contrast to conventional approaches improved techniques manage configuration information within separate files residing on different physical devices or memory partitions but enable a user to view these separate files as a single virtual document e.g. a general purpose configuration library without having to change the method of accessing the information for each physical device. In particular such techniques enable the use of an application programming interface API having standard function calls which reference the files using unique path strings. Accordingly most information can be accessed using a single simple function call regardless of where the information is stored e.g. hard disk flash memory volatile semiconductor memory etc. or how it is actually retrieved e.g. from a local drive from main memory over the Internet etc. . As a result the configuration information is easily accessible via particular path strings.

One embodiment is directed to a technique which involves managing configuration information used by an application. The technique involves disposing a first file in a first physical device e.g. SDRAM . The first file includes first configuration information. The technique further involves disposing a second file in a second physical device e.g. flash memory . The second file includes second configuration information. The second physical device is different than the first physical device. The technique further involves providing access to a top level file e.g. stored on disk having a first path string to the first file in the first physical device and a second path string to the second file in the second physical device. The top level file in combination with the first and second files operates as a single virtual document which includes the first configuration information of the first file and the second configuration information of the second file. Such a technique can be built on top of XML while nevertheless preserving the flexibility and standards based approach of an XML configuration file.

An improve technique involves managing configuration information within separate files residing on different physical devices or memory partitions but enables a user to view these separate files as a single virtual document e.g. a general purpose configuration library without having to change the method of accessing the information for each physical device. In particular such a technique enables the use of an application programming interface API having standard function calls which reference the files using unique path strings. Accordingly most information is accessible using a single simple function call regardless of where the information is stored e.g. hard disk flash memory volatile semiconductor memory etc. or how it is actually retrieved e.g. from a local drive from main memory over the Internet etc. . Thus the configuration information is easily accessible via particular path strings.

By way of example the device includes volatile semiconductor memory e.g. SDRAM having a configuration file . The device includes flash memory configuration file . The device includes magnetic disk drive memory configuration file . The device includes CD ROM memory configuration file . The device includes Internet accessible memory e.g. a remote computer a storage appliance etc. configuration file . The system is capable of including other memory based physical devices having additional files as well such as magnetic tape devices DVD readers writers disk arrays floppy drives mirrored storage combinations thereof etc.

A top level file links to the multiple files . . . collectively files using respective path strings. A path string is a string of characters which uniquely identifies a particular file on a particular device . A suitable format for a path string is the format xxx yyy zzz wherein is a separator xxx and yyy are elements and zzz is an attribute. The top level file can reside within any of the devices e.g. the hard disk device . Upon initialization of a library with the top level file the system is able to provide access to the configuration information by presenting the files to an application as a single virtual document e.g. a single virtual configuration file and allowing the application to store and retrieve the configuration information via an API i.e. the API is illustrated by the dashed line in .

It should be understood that the configuration information on each physical device is capable of being tailored to the memory characteristics of that device . Along these lines suppose that the controller is implemented using the processing circuitry of a computer i.e. one or more processors running code . In this example the particular configuration information in the file of the volatile semiconductor memory of the physical device enjoys quick accessibility e.g. fast reads and writes . Additionally the particular configuration information stored in the file on the magnetic disk drive memory of the physical device enjoys non volatility and may be rather sizable without greatly consuming other computer resources e.g. main memory which is thus available for other uses . Furthermore the particular configuration information stored in the file of a flash memory read only partition of the physical device is accessible in a manner that is faster than disk drive access times but also safe since the read only partition prevents the configuration information within the file from being changed. Further details will now be provided with reference to .

At this point it should be understood that each file is preferably a separate XML document stored in the memory of a particular physical device . Due to the high level flexibility and extensibility provided by XML as well as XML s ability to be used with standard parsing libraries XML documents are well suited for use as the files . To further illustrate the path string features of the system the following example will now be provided in the context of XML documents as the files .

In some arrangements a library parses the XML on input and formats the XML for output. An external method is capable of identifying the root configuration file e.g. file.conf . On input the entire top level file is read into memory. However the secondary files . . . are read as they are accessed in the tree.

The following example will now be provided with reference to . illustrate how a user is able to access certain configuration information with extremely simple function calls that alleviate the need for extensive complex and burdensome device specific considerations.

Suppose that we want to organize configuration information into broad categories such as processes system and administrators. The API of the system is capable of providing configuration information using simple standard function calls such as cfgGetBuffer to read configuration information from the files within the system and cfgSetBuffer to write configuration information to the files within the system . The system is arranged to support these function calls regardless of the particular type of device or memory partition thus enabling users e.g. developers the freedom to access configuration information without having to change the method of accessing the information for each physical device as in conventional approaches to managing configuration data. Rather the function calls provided by the API enable the users to carryout access to any and all of the files via particular path strings .

Along these lines suppose that the file is stored in main memory i.e. the physical device and contains information about active processes. Here by way of example the file A is given the filename cfgprocess.xml and is accessible using the path string A tmp cfgprocess.xml . The system populates the file A with the active process information as each process starts. By way of example the contents of the file A are as follows.

Additionally suppose that the file B is stored in a read only partition of flash memory i.e. the physical device and contains information about available time zones. Here by way of example the file B is given the filename cfgdate.xml and is accessible using the path string B mnt flash0 cfgdate.xml . The system reliably stores this information in a safe manner since the file B resides in a read only partition. By way of example the contents of the file B are as follows.

In contrast suppose that the file C is stored in a read write partition of the flash memory i.e. the physical device and contains current time zone information for the system . Here by way of example the file C is given the filename cfgdateval.xml and is accessible using the path string C mnt flash1 cfgdateval.xml . The system stores this currently selected time zone information in the file C are as follows.

At this point it should be understood that the top level file conveniently includes path strings A B C to respective files A B and C . The top level file is further capable of providing access to configuration information in other files D E on other devices hard disks Internet accessible files etc. using other path strings D E and so on. In this example the top level file looks like this 

Based on the above provided example details one will appreciate that an application is capable of the accessing the configuration information without the complexities of traversing the files using an XML DOM and numerous function calls as would be required in a conventional approach. Rather the system offers access to the configuration information via simple function calls.

As another example and as illustrated in the following command provides a process name to the application 

Again the type of memory storing the file A and the particular physical device on which the file A is stored is transparent to the user.

As yet another example and as illustrated in the following commands enable a user to set the current time zone.

The cfgLock and cfgCommit commands reliably enable the configuration information to be set without other threads or processes intervening. In particular the command cfgLock obtains a lock on the top level file and the file B being changed i.e. cfgdateval.xml the command cfgSetBuffer sets the current time zone information within the cfgdateval.xml file and the command cfgCommit writes the appropriate data and releases the file locks.

As described above the configuration information is accessible by the user through the API without concern over device specific details that would otherwise increase the burden on the user and the likelihood of error. It should be understood that the configuration information can even be disposed remotely and transparently on a remote physical device e.g. another computer see the device in . A summary of procedure performed by the system will now be provided with reference to .

In step the controller disposes a second file in a second physical device the second file including second configuration information. Again in the above provided example the controller handles management of the time zone information stored in flash memory.

In step the controller provides access to a top level file having a first path string to the first file in the first physical device and a second path string to the second file in the second physical device. Conveniently the top level file in combination with the first and second files operate as a single virtual document which includes the first configuration information of the first file and the second configuration information of the second file. In the above provided example the user is able to subsequently access the process and time zone information using simple function calls provided by the API as if the user were simply accessing a single virtual document.

As described above an improve technique involves managing configuration information within separate files residing on different physical devices or memory partitions but enables the user to view these separate files as a single virtual document without having to change the method of accessing the information for each physical device see the logical diagram in . In particular such a technique enables the use of an API having standard function calls which reference the files using unique path strings . Accordingly most information is accessible using a single simple function call regardless of where the information is stored e.g. hard disk flash memory volatile semiconductor memory etc. or how it is actually retrieved e.g. from a local drive from main memory over the Internet etc. . Therefore the configuration information is easily accessible via particular path strings .

While various embodiments of the invention have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

For example the devices were described above as being separate physical devices for illustration purposes. It should be understood that the various file locations can be separate partitions e.g. the application read only partition the flash read write partition the tmp memory partition the RAID set read write partition and so on.

Additionally the system was described above as using XML documents as the files by way of example only. Other types of files are suitable for use as well such as Extensible Hypertext Markup Language XHTML RSS and Atom among others.

