---

title: Heterogeneous architecture in pooling management
abstract: A method, system, and computer program product for managing a heterogeneous connection pooling structure. The heterogeneous architecture of pooling management comprises connections having different connection attributes (i.e. different data source properties) that can share a same connection pool (i.e. same connection pool data source). An application requests a connection from data source having a specified data source property. An application server searches a pool module for an available cached connection. If a cached connection is available, the cached connection is automatically selected as a returned connection. A connection reuse protocol and a statement reuse protocol is determined and invoked to reconfigure the cached connection for reuse as a connection between the application and a database server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539504&OS=08539504&RS=08539504
owner: International Business Machines Corporation
number: 08539504
owner_city: Armonk
owner_country: US
publication_date: 20070830
---
The present invention generally relates to computer systems and in particular to connection pooling management architecture in computer systems.

The connection pooling management structure using a common application programming interface API such as Java Database Connectivity JDBC describes a standard interaction among an application an application server and a database driver. The application can request a connection from a data source using the application server. The application server may in turn either i return a cached connection from the application server s own connection pool module or ii get a new connection from a connection pool data source using the database driver. Database drivers are available for most database platforms so that applications can invoke the API to retrieve the information stored in a database. The common implementation of this dichotomy of data sources connection pool modules and connection pool data sources is the homogeneous connection pooling model which naturally treats the data source and the connection pool data source as one and the same. Moreover the homogenous connection pooling model provides only one connection pool module per data source i.e. a 1 1 correspondence between the data source and the connection pooling data source and does not support connections to be cached across multiple data sources having different data source properties. Therefore the homogeneous connection pooling model does not exploit the full potential of the connection pooling management structure especially when those multiple data sources represent the same underlying database server with only some different property settings.

Furthermore as described by the connection pooling management structure using JDBC the application should not see any difference between the data source that is accessed with connection pooling implementation and the data source that is not accessed with connection pooling implementation. Stated differently the application should always receive a clean connection whose connection attributes match the data source properties specified on the data source where the connection originates from. However under the homogeneous connection pooling model the connection is taken or reused from the connection pool module of an application server without any cleanup of the connection attributes of the connection from previous reuses of the connection. Instead special registers and global temp tables from the previous use of the connection remain in effect for the new use of the connection.

To alleviate this problem of an unclean connection the application server often needs to impose a constraint such that data source properties cannot change for the connection pool module. Despite the imposition of these constraints the application may still encounter the problem of an unclean connection if the special registers and global temp tables are set through runtime interfaces rather than as data source properties. Under such circumstance where the special registers and global temp tables are set through runtime interfaces the application has to perform the cleanup after the application is done using the connection. The above scenario provides an extra burden and overhead for the application since the application must insert code to reset the application s own special registers and global temp tables such that the values of the data source properties are properly passed and there are no inconsistencies between a database server and the database driver.

Disclosed are a method system and computer program product for managing a heterogeneous connection pooling structure. The heterogeneous architecture of pooling management comprises connections having different connection attributes i.e. different data source properties that can share the same connection pool i.e. same connection pool data source . A new set of reuse and recycle interfaces is added onto the database driver for interaction between the connection pool module of the application server and the database driver. The new set of interfaces are used for a cached connection during the cached connection s life cycle as the cached connection is taken or reused from and returned or recycled to a connection pool module.

In addition two new pooling parameters a connection reuse protocol and a statement reuse protocol are introduced on a connection pool data source to configure how cached connections and statements are reset i.e. clean up and reconfigure the data source properties associated with the reused cached connection for reuse. Once an application server finds an available cached connection from a connection pool module the cached connection is automatically selected as the returned connection and a connection reuse protocol and a statement reuse protocol is determined to establish a connection between the application and a database server. The method employed by the invention provides support for a rich selection of pooling semantics. In this regard the application server can choose from the most intelligent reuse protocols that impose the fewest constraints burdens i.e. the most flexible yet least efficient reuse protocol on an application or the most efficient protocols that impose greater constraints on the application. The heterogeneous connection pooling model enhances the current homogenous connection pooling model by increasing the reusability of pooled connections across heterogeneous data sources. Notably the heterogeneous connection pooling model also alleviates the application of the extra burden and overhead that results from this increased efficiency.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The illustrative embodiments provide a method system and computer program product for managing a heterogeneous connection pooling architecture in accordance with one embodiment of the invention. As utilized herein a heterogeneous connection pooling architecture is a type of database management architecture in which connections with different connection attributes can share the same connection pool and thus can be cached across multiple data sources containing different data source properties. Also as utilized herein a connection attribute is a value associated with a connection that allows for the proper access of a database. Further as utilized herein a connection pool is a cache of database connections maintained in an application server s memory so that the connections can be reused when the application server receives future requests to establish connections. Connection pools are used to enhance the performance of executing commands on a database. Opening and maintaining a database connection for each user such as requests made to a dynamic database driven Web application is costly and wastes resources. In connection pooling after a connection is created the connection is placed in the connection pool i.e. recycled and is used over again i.e. reused so that a new connection does not have to be established. If all the connections are being used a new connection is made and is added to the pool. Connection pooling also cuts down on the amount of time a user must wait to establish a connection to the database.

In the following detailed description of exemplary embodiments of the invention specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical architectural programmatic mechanical electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

It is understood that the use of specific component device and or parameter names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology utilized to describe the components devices parameters herein without limitation. Each term utilized herein is to be given its broadest interpretation given the context in which that term is utilized.

With reference now to depicted is a block diagram representation of a data processing system DPS and connected network . DPS comprises at least one processor or central processing unit CPU connected to system memory via system interconnect bus . Also connected to system bus is I O controller which provides connectivity and control for input devices of which pointing device or mouse and keyboard are illustrated and output devices of which display is illustrated. Additionally a multimedia drive e.g. CDRW or DVDRW drive and Universal Serial Bus USB hub are illustrated coupled to I O controller . Multimedia drive and USB hub may operate as both input and output storage mechanisms. DPS also comprises storage within which data instructions code may be stored. DPS is also illustrated with a network interface device NID coupled to system bus . NID enables DPS to connect to one or more remote servers via an access network such as the Internet.

In the described embodiments when access network is the Internet access network represents a worldwide collection of networks and gateways that utilize the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. Of course network access may also be provided via a number of different types of networks such as an intranet an Ethernet a Local Area Network LAN a Virtual Private Network VPN or other Wide Area Network WAN other than the Internet for example.

Notably in addition to the above described hardware components of DPS various features of the invention are completed via software or firmware code or logic stored within system memory or other storage e.g. storage and executed by CPU . In one embodiment data instructions code from storage populates the system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory not shown including but not limited to cache memory registers and buffers. Thus illustrated within system memory are a number of software firmware components including operating system OS e.g. Microsoft Windows a trademark of Microsoft Corp or GNU Linux registered trademarks of the Free Software Foundation and The Linux Mark Institute or Advanced Interactive eXecutive AIX registered trademark of International Business Machines IBM applications APP and Heterogeneous Connection Pooling Management HCPM utility . In actual implementation components or code of OS may be combined with those of HCPM utility collectively providing the various functional features of the invention when the corresponding code is executed by the CPU . For simplicity HCPM utility is illustrated and described as a stand alone or separate software firmware component which is added to an existing OS to provide support the specific novel functions described herein.

CPU executes HCPM utility as well as OS which supports the user interface UI features of HCPM utility . In the illustrative embodiment HCPM utility manages a heterogeneous architecture for connection pooling. Among the software code instructions provided by HCPM utility and which are specific to the invention are a requesting a connection from a data source having a specified data source property b searching a pool module for a cached connection c returning either the cached connection or a new connection from the application server to the application as a returned connection d if the cached connection is available in the pool module the cached connection is automatically selected as the returned connection and a connection reuse protocol and a statement reuse protocol is determined to connect the application to a database server e utilizing the returned connection to access the database server f terminating a use of the returned connection by the application g invoking a recycle interface by the application server on the returned connection h communicating a release request to release a set of selective resources e.g. cursors and transactions associated with the returned connection to the database server and i placing the returned connection into the corresponding pool module. For simplicity of the description the collective body of code that enables these various features is referred to herein as HCPM utility . According to the illustrative embodiment when CPU executes HCPM utility DPS initiates a series of functional processes that enable the above functional features as well as additional features functionality which are described below within the description of .

Those of ordinary skill in the art will appreciate that the hardware and basic configuration depicted in may vary. For example other devices components may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. The data processing system depicted in may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the AIX operating system or LINUX operating system.

Within the descriptions of the figures similar elements are provided similar names and reference numerals as those of the previous figure s . Where a later figure utilizes the element in a different context or with different functionality the element is provided a different leading numeral representative of the figure number e.g. for for . The specific numerals assigned to the elements are provided solely to aid in the description and not meant to imply any limitations structural or functional on the invention.

With reference now to an exemplary connection pooling model according to one embodiment of the invention. The connection pooling model contains an application an application server associated with a connection pool module a set of data sources and a set of connection pooling data sources a database driver and a database server .

Application interfaces with application server . Application server is a software engine that handles most if not all of the data access of application . One benefit of an application server is the ease of application development since applications need not be programmed instead applications are assembled from building blocks provided by the application server . Application utilizes data source as a bridge to interface with application server . In addition application server maintains connection pool module . Connection pool module contains a cache of pooled connection objects that can be reused when requested by application . Moreover a connection pool data source is used as a bridge by application server to interface with database driver . The database driver e.g. Java Database Connectivity JDBC driver is responsible for establishing the actual physical connection to the database server .

The process of begins at initiator block and proceeds to block at which application requests a connection from data source via application server . Data source has a specified set of data source properties. Application server searches connection pool module for an available cached connection as depicted in block . A determination is then made as to whether there is an available cached connection in connection pool module as depicted in decision block . If there is no cached connection available in connection pool module the application server requests a new connection with the specified data source property from a connection pool data source using database driver as depicted in block . After block the method proceeds to block in which a new connection is established from the database server using the specified data source properties and the connection is returned to application server . The method continues on through steps as is depicted in and described hereafter.

Referring again to block if there is a cached connection available in connection pool module one of three possible connection reuse protocols will be applied i.e. dirty reuse optimistic reuse or clean reuse . The connection reuse protocols are used to configure how the connection is reset for reuse. Application or application server determines which connection reuse protocols are to be applied to the cached connection.

If the reuse protocol to be applied is a dirty reuse protocol as determined from decision block the connection attributes of the previously used cached connection are not cleaned up and all previous connection attributes remain in effect. The method continues on to the application of one of four statement reuse protocols i.e. no describe on reuse describe on reuse conditional describe on reuse and no reuse which are each illustrated in and will be described in more detail below. However if the requisite reuse interface protocol to be applied is not a dirty reuse protocol HCPM utility triggers database driver to reinitialize the connection attributes of the cached connection with the data source properties as depicted in block . Note the process described in block is applicable to both optimistic reuse and clean reuse protocols.

With reference now to the method continues to decision block in which a determination is made as to whether the reuse protocol to be applied is an optimistic reuse protocol. Under an optimistic reuse protocol the clean up of the data source properties is only performed on the database driver side. Moreover special registers and global temp tables can be changed as data source properties but should not be set through runtime interfaces i.e. utilizing runtime interfaces bypasses the database driver to avoid inconsistencies in data source property values between database server and database driver . If an optimistic reuse protocol is utilized the method continues on to the application of one of four statement reuse protocols i.e. no describe on reuse describe on reuse conditional describe on reuse and no reuse which are each illustrated in and will be described in more detail below.

Referring again to block if the requisite connection reuse protocol is not an optimistic reuse protocol then the method proceeds to block under the assumption that the only remaining connection reuse protocol that can be applied is a clean reuse protocol. Under a clean reuse protocol database driver will perform two steps pertaining to database driver side clean up. First database driver will reinitialize the connection attributes of the cached connection with data source properties passed in from connection pool module as described previously in block . Second as depicted in block database driver resets the connection attributes of the cached connection to their default values for those data source properties that are not explicitly passed in by connection pool module . In addition to database driver side clean up the clean reuse protocol performs database server side clean up as depicted in block . In this regard the database driver i propagates a request to reset the underlying cached connection to the targeted database server and ii propagates a request to reinitialize the data source properties of the cached connection as shown in block .

Thus the clean reuse protocol is applied when maximum flexibility of the heterogeneous connection pooling architecture is sought. When applying a clean reuse protocol it becomes immaterial whether special registers and global temp tables have been set through runtime interfaces i.e. database driver is bypassed or through data source properties i.e. database driver is not bypassed . Having finished applying the clean reuse connection reuse protocol the method continues on to the application of one of four statement reuse protocols i.e. no describe on reuse describe on reuse conditional describe on reuse and no reuse which are each illustrated in and will be described in more detail below.

With reference now to blocks of the method continues with the application of one of four statement reuse protocols. A statement reuse protocol is applied when a previously used statement must be reset for reuse or not reset for reuse. Similar to the connection reuse protocols the statement reuse protocols are also determined by application or application server depending on whether the describe information needs to be kept discarded or replaced. As used herein a statement enables the flow of a Structured Query Language SQL command on through to database server . Moreover each statement corresponds to a particular SQL command. There are four types of statement reuse protocols no describe on reuse describe on reuse conditional describe on reuse and no reuse . Each statement reuse protocol will be described in greater detail over the course of the flow diagram in .

Referring now to decision block a determination is made as to whether the requisite statement reuse protocol is characterized for no reuse . If a no reuse protocol is specified database driver closes all open statements associated with the cached connection and the cached connection is recycled to connection pool module block . As a result a new statement object must be created such that a SQL command can be executed. The process then continues through the steps depicted in blocks of which will be discussed hereafter.

With reference now to decision block if the statement reuse protocol is one of some level of reuse i.e. no reuse protocol is not applied a determination is made as to whether the requisite statement reuse protocol is characterized as no describe on reuse . If the statement reuse protocol is a no describe on reuse protocol schema consistency is assumed across statement uses. As used herein schema refers to the structure of a database system described in a formal language supported by the database management system DBMS . In a relational database the schema defines the tables the fields in each table and the relationships between fields and tables. As a result of a no describe on reuse statement reuse protocol previous describe information will always be retained block and no new describe information will need to flow. The process then continues through the steps depicted in blocks of .

With reference now to decision block if the statement reuse protocol is not characterized as no describe on reuse a determination is made as to whether the requisite statement reuse protocol is characterized as a conditional describe on reuse . If the statement reuse protocol is a conditional describe on reuse database driver will intelligently determine in decision block whether critical properties e.g. schema and SQL ID have changed. As used herein SQL ID defines an authorization ID which determines the set of privileges associated with a dynamic SQL command. If i database driver determines that a change of a critical property has occurred or ii that statement reuse protocol is not conditional describe on reuse the statement reuse protocol that is then applied is describe on reuse as shown in block . Under describe on reuse statement protocol schema consistency is not assumed between the first execution of the SQL command from the previous statement use and the subsequent execution of the SQL command to be reused. Since schema consistency is not assumed database driver marks all open statements associated with the cached connection as requiring describe information. The describe information provides a set of metadata information for the dynamic SQL command as depicted in block . However if the critical properties have not changed new describe information is not required and the process then continues through the steps depicted in blocks of .

Referring now to the method continues to block whereby application server returns the cached or new connection to application . Application utilizes the cached or new connection to access database server as depicted in block . Once application no longer requires the use of the cached or new connection application server invokes the recycle interface on the connection as depicted in block . Under the recycle interface database driver communicates a request to release selective resources to database server as depicted in block . The selective resources include but are not limited to cursors and transactions. Lastly application server places the used connection back into the connection s corresponding connection pool module as depicted in block . The process terminates at block .

In the flow chart above one or more of the methods are embodied in a computer readable medium containing computer readable code such that a series of steps are performed when the computer readable code is executed on a computing device. In some implementations certain steps of the methods are combined performed simultaneously or in a different order or perhaps omitted without deviating from the spirit and scope of the invention. Thus while the method steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

As will be further appreciated the processes in embodiments of the present invention may be implemented using any combination of software firmware or hardware. As a preparatory step to practicing the invention in software the programming code whether software or firmware will typically be stored in one or more machine readable storage mediums such as fixed hard drives diskettes optical disks magnetic tape semiconductor memories such as ROMs PROMs etc. thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the programming code is used by either executing the code directly from the storage device by copying the code from the storage device into another storage device such as a hard disk RAM etc. or by transmitting the code for remote execution using transmission type media such as digital and analog communication links. The methods of the invention may be practiced by combining one or more machine readable storage devices containing the code according to the present invention with appropriate processing hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more processing devices and storage systems containing or having network access to program s coded in accordance with the invention.

Thus it is important that while an illustrative embodiment of the present invention is described in the context of a fully functional computer server system with installed or executed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution. By way of example a non exclusive list of types of media includes recordable type tangible media such as floppy disks thumb drives hard disk drives CD ROMs DVD ROMs and transmission type media such as digital and analog communication links.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular system device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

