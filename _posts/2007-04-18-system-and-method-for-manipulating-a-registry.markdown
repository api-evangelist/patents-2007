---

title: System and method for manipulating a registry
abstract: A system, method and facility for manipulating registries on a computer system. The system includes a generic registry facility, which features functions classified according to the breadth of their applicability to varying types of registries. The registries may be classified as file-based and proprietary. The file-based registries may be binary or text-based. The generic registry facility provides a library of generic registry facility functions that may be included in a specific registry manipulation module through which a computer program can manipulate a specific registry. The generic registry facility functions may be customized by the developer of the registry manipulation module for a specific registry. The functions may include an action verification function that includes a commit sequence for ensuring that requested changes to a registry are made successfully. The functions may also include a trigger function for triggering events upon the occurrence of a change to a registry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08244683&OS=08244683&RS=08244683
owner: International Business Machines Corporation
number: 08244683
owner_city: Armonk
owner_country: US
publication_date: 20070418
---
Under 35 U.S.C. 120 this divisional application claims the benefit of co pending U.S. application Ser. No. 10 424 201 filed on Apr. 25 2003 and entitled Method and System for Manipulating a Registry which claims the benefit under 35 U.S.C. 120 of Canadian application 2 384 181 filed on Apr. 29 2002 and entitled System and Method for Manipulating A Registry all of which are herein incorporated by reference.

The present invention relates to computer systems and in particular to a system and method for manipulating a registry.

With almost any computer program it is necessary to manipulate information stored on a persistent media from time to time. Usually the information is stored in some type of registry which could be a typical file for a particular operating system. Other than a typical flat file a registry could be a proprietary storage mechanism such as the Windows registry on the Microsoft Windows operating system which may be manipulated using particular application programming interfaces.

A registry in this context stores a set of information that the computer program may wish to read add to delete or otherwise manipulate. The information is typically configuration information for the computer hardware the operating system the computer program or any other computer software or services. For example on Unix based operating system the etc services registry stores configuration information for the services and protocols assigned to particular ports such as telnet ftp or other services.

In order to manipulate a particular registry the developer of a computer program must provide the computer program with the functionality necessary to perform the registry level functions needed to access and manipulate the particular registry. Because even amongst file based registries the registries can vary as to type i.e. binary or text based and can further vary as to specific format the computer program must contain code for manipulating each individual registry. As a result the developer is required to duplicate a large amount of code and must devote time and effort to developing individual portions of code specific to each registry.

When manipulating a registry containing configuration information a developer must be cautious to ensure that any changes to the registry do not cause problems for the availability of the computer system or any active processes. Changes to a registry can render a system unstable or unusable under some circumstances. Developers may also be concerned that other active processes that rely upon the registry being manipulated receive adequate notice of any changes. This is particularly difficult if the configuration information is common across multiple systems such as in a cluster network. Additionally developers may need to ensure that any manipulation of sensitive configuration information has been performed correctly before the manipulated configuration information is used by other processes or systems.

Accordingly it would be advantageous to provide a set of generic tools for developers to use in accessing and manipulating registries of all types and formats so as to reduce the time and effort expended in creating computer programs that interact with multiple registries.

The present invention provides a generic registry facility that permits the encapsulation of access and manipulation actions for a specific registry. Registry specific information needed to customize particular manipulation actions to the specific registry are provided through a registry manipulation module. The invention thereby permits any controlling product to access and manipulate the specific registry using generic commands without requiring intimate knowledge of the particular actions necessary to access and manipulate the specific registry.

In a further aspect the present invention provides a registry manipulation system for use by a computer program in manipulating a specific registry on a computer system. The registry manipulation system includes a registry manipulation facility which itself includes a plurality of generic functions for manipulating registries the generic functions being defined within classes. The classes include a first level class and a second level class wherein the second level class inherits the generic functions of the first level class. The system also includes a registry manipulation module that includes a registry specific definition for the specific registry. The registry manipulation module inherits the generic functions of the second level class. The first level class provides an interface usable by the computer program to manipulate the specific registry and the second level class provides support for the type of storage for the specific registry.

In another aspect the present invention provides a computer program product that includes a computer readable medium having a program means thereon. The program means includes code means for providing the registry manipulation facility and the registry manipulation module.

In another aspect the present invention provides a registry manipulation facility having generic functions that include a manipulation function for performing a requested change to the specific registry and a verify action function for verifying that the requested change was successful. The manipulation function includes creating a temporary registry the temporary registry being a copy of the specific registry and causing the requested change to be made to the temporary registry. The verify action function includes comparing the temporary registry to the specific registry to identify a difference between them comparing the difference to the requested change to determine if the difference and the requested change match and for replacing the specific registry with the temporary registry when the difference matches the requested change.

In another aspect the present invention provides a registry manipulation facility having generic functions that include a manipulation function for performing a requested change to the specific registry and a trigger function for performing an action in response to the performance of the requested change to the specific registry.

In yet another aspect the present invention provides a method for implementing a requested change to a registry on a computer system. The method includes the steps of creating a temporary registry the temporary registry being a copy of the registry causing the requested change to be made to the temporary registry comparing the temporary registry to the registry to identify a difference between them comparing the difference to the requested change to determine if the difference and the requested change match and replacing the registry with the temporary registry if the difference and the requested change match.

Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.

Reference is first made to which shows in block diagram form a generic registry facility and a registry manipulation module according to the present invention in use with a computer program to manipulate a registry .

The registry specific details of the module are selected by the developer of the module for the specific registry . The registry manipulation module contains registry specific information in order to customize the operation of the generic registry facility to the specific registry . The computer program may call functions provided by the generic registry facility and customized to the specific registry using the registry manipulation module . As will be understood by those skilled in the art the computer program may be developed so as to integrally contain the module although they are depicted separately in . It will also be understood that a single computer program may interact with a facility having a plurality of registry manipulation modules so as to manipulate a plurality of registries . The computer program may include any object process or service that is intended to manipulate a registry in some way.

The effect of the generic registry facility and the registry manipulation module is to encapsulate the detailed operations involved in manipulating a specific registry within a set of abstracted function calls. Accordingly a computer program may manipulate a specific registry without requiring the developer of the computer program to devote significant time to the procedural and logistical niceties involved in accessing or manipulating the registry .

The generic registry facility provides the abstracted function calls that may be used to manipulate the registry . These generic functions provide the basic operations which a computer program may wish to perform upon the registry including adding a record retrieving a record searching for a record and deleting a record. The registry manipulation module may as part of the implementation of some generic functions include additional operations so as to customize the generic functions to the specific registry . This customization may include specifying record structures for the specific registry or any other registry specific details of implementation.

The generic registry facility is designed to accommodate the development of a variety of modules developed to manipulate a variety of registries . Some of the operations particular to the manipulation of one registry will differ from the operations necessary to perform the same manipulation of a different registry . In order to provide for functions that operate effectively for all registries the generic registry facility recognizes a classification of registries. The specificity of a generic function depends upon whether the operation being performed can be generalized to a wider class of registries. In some cases a generic function is defined in broad terms at a high level and is further defined in lower levels where more specific operations are added to the function. This provides the facility with the flexibility to grow at lower levels to accommodate a greater variety of registries.

Referring to another variation of another preferred embodiment of the present invention is the inclusion of some or all of the class hierarchy and between the base class and the registry module layer into either the base class or the registry module. For example if the implementation of the invention is limited to a file based storage only the file storage related functions from could be included into the base class . Yet another variation of the preferred embodiment of the present invention is the exclusion of either the binary or text classes. If a specific implementation only requires support for binary based registries class could be excluded. Similarly if a specific implementation only requires support for text based registries class could be excluded. In this form of the invention the functions for the remaining class could be moved into the file based class or into the registry module layer .

Reference is now made to which shows a diagrammatic representation of a class structure for classification of registries according to the present invention. The class structure may include four levels of categorization. The first level or base level applies to all registries and provides the basic interface for interaction with the computer program .

The second level or registry class level classifies the registries according to the type of storage used for the registry. In one embodiment the registries are classified as file based or proprietary . File based registries are registries created as typical flat files recognizable and manipulable using the operating system of the computer. These registries have an open protocol and are stored in known manner on the operating system file system. Proprietary registries include registries manipulated using proprietary application programming interfaces whereby the proprietary APIs provide a layer of abstraction or insulation from the detailed operations. An example of proprietary registries is the Windows registry on the Microsoft Windows operating system.

The class structure may include a third level or type level which further classifies the registries contained in the classes and at the registry class level . For example as shown in the file based registries from the registry class level may be further classified at the type level as either binary registries or text registries . This classification of file based registries into binary or text registries may be necessary because of the different operations involved in some manipulations of these two types of file based registry . With a text registry functions such as adding a record deleting a record or retrieving a record will require additional operations to parse a line into a data structure and format a data structure into a line. Binary registries do not require the parsing of lines into data structures and accordingly the implementation of functions such as adding deleting or retrieving will be different as between binary and text registries.

At the fourth level or registry specific level the registries contained in each of the classes and of the type level are further classified as specific registries. For example the binary registries may include any number of specific binary registries including a binary variable equals value BinVarVal registry . Similarly the text registries may include a number of specific text registries including a text variable equals value TextVarVal registry . As a further example the text registries may include a services registry such as the etc services registry found on Unix based operating systems.

The generic registry facility groups its generic functions based upon the level of classification to which they may be generalized. For example at the base level functions or definitions common to all registries may be defined such as whether to allow duplicates in a registry or whether certain features are enabled such as an action verification feature. The generic functions for manipulating a registry may be included at the base level to provide for a basic interface for the computer program to utilize in manipulating registries.

At the registry class level the generic functions specific to a type of storage mechanism used for a registry are included or further defined. For example with file based registries the registry class level functions may include those functions that are common to file based registries irrespective of whether they are text registries or binary registries or their specific record structure. These registry class level functions may include opening a file locking a file or operations in relation to the naming or renaming of a file. Further registry class level functions or operations will be understood by those skilled in the art.

Functions for manipulating file based registries that are specific to either a binary registry or a text registry may be grouped at the type level . These type level functions may include functions for adding a record deleting a record changing a record and retrieving a record. As discussed above some of the operations needed to implement these functions may differ depending upon whether the registry is a binary registry or a text registry .

Finally the registry specific level contains the specific implementation of any of the functions contained in the first three levels. To the extent required any necessary customization of the generic registry facility functions is provided by the module . For example the services registry will have a specific record structure that many of the generic functions will need to recognize and reference in order to perform their operations. Accordingly this structure is defined in the module .

Advantageously the generic registry facility provides a flexible set of appropriately classified generic functions of varying specificity for the manipulation of a specific registry . The module provides registry specific level information for customizing the operation of generic functions to the extent necessary to the specific registry . The computer program may then manipulate the registry through the generic registry facility using the generic function calls. The developer of the computer program and the developer of the module need not devote time and energy to the logistical and procedural mechanisms involved in manipulating a registry. For example the developer need only call an Add command relying upon the generic control facility to ensure that the registry is appropriately locked and if desired that no duplicate entries are found before adding the new record. The developer of the module need not be concerned with the mechanics of opening closing and locking files or with adding getting or changing records in a file. The developer of the module simply specifies the structure of the records in the file and adds any customization necessary to the generic registry functions.

In one embodiment of the present invention there is provided a header file and class module for each of the base level the registry class level and the type level . An embodiment of these class modules is detailed below. For example there may be a base class module in which there may be a registry status definition defining a number of states for a registry such as closed open read write locked loaded or scan mode. The base class module may also define types of locks such as exclusive locks or shared locks and may define categories of registries such as binary file based text file based or proprietary registries. The base class module may also provide a mechanism for defining what features are enabled for a module for a particular registry . In one embodiment the base class module defines the following format for a Features variable 

Using the foregoing definition if for example the Features variable for a particular registry has its second bit set then duplicate records are allowed to appear in the registry . Similarly the Features variable may indicate whether a verification feature is enabled whether binary records are to be packed and whether a trigger feature is enabled. Further details of the verification feature and the trigger feature are provided later.

As will be understood by one skilled in the art the functions and definitions provided in the above class definition are independent of how or where the registry is stored. They are independent of whether the registry is a file based registry a Windows registry or another proprietary registry. The Registry Action functions are defined at the base level and provide an interface through which the computer program may manipulate the registry . These functions may be further defined in classes inheriting from this base class so as to provide the specific functionality necessary to perform these functions for a particular class or type of registry. The FieldSpec parameter passed into the Registry Action functions is a variable in which each bit represents a field in the record affected by the action. If the bit is set then the action is intended to affect that field in the record.

In the above base class module variables are defined for communicating the status of the registry the features enabled for the registry and the type of registry. These variables can be consulted by other functions for determining a course of action to take. For example the implementation of an add function may check the Features variable to determine whether duplicate records are permitted. If they are not permitted then the add function would perform a check to ensure the added record would not result in a duplicate record.

The base class module provides a set of functions for reading and changing the Features variable including an isFeatureSet function a setFeature function and a unsetFeature function. The parameter featureToCheck for the first function is an integer having a bit set at the location in the structure of the Features variable corresponding to the feature being checked. For example the second bit corresponds to whether duplicates are allowed in the registry. The isFeatureSet function then performs a logical AND to determine if the feature is set. Similarly the setFeature function and the unsetFeature function perform bit wise operations to set or unset bits within the Features variable.

The base class module also provides a definition for a Lock function and an UnLock function. The Lock function is passed an integer indicating the particular registry action that has requested that the registry be locked. The type of action being performed may affect the type of lock applied to the registry. For example if the Lock function was called by an Add function then the lock applied to the registry would need to be an exclusive read write lock whereas if the Lock function were called by a Get function then the lock applied could be a shared read registry lock. The Lock function may also receive a timeout value. The UnLock function unlocks a locked registry. Like the Registry Action Features these two functions may be further defined in a lower level class inheriting the base class.

The functions and variables defined in the above class module are all specific to file based registries . They are independent of whether the registry is a binary file or a text file .

The file class definition contains the Lock and UnLock functions first defined in the base class. At this level the functions are implemented with operations specific to file based registries.

The above file class module also provides for OpenScan CloseScan and Rewind functions for use in connection with the GetNext function. In combination these functions are used to retrieve successive records in the registry. These functions provide more detailed control over retrieving records than is available using the Get function which is defined in a type level class module such as GenRegText or GenRegBin to perform locking opening reading closing and unlocking of the registry automatically. The OpenScan function performs the locking and opening of the registry and the CloseScan closes and unlocks the registry. While the registry is open the GetNext function may be called successively to advance through matching records in the registry. The Rewind function is provided to move the file pointer back to the beginning of the registry to start looking for matching records again. The OpenScan CloseScan and Rewind functions are implemented within the file class at the registry class level because they are common to text and binary registries. The other Registry Action Functions are implemented at the type level as they are specific to text or binary registries.

Both the text and the binary class modules contain implementations of the Registry Action functions Add Change Get Delete GetNext and Verify although the implementation will vary between the two modules. For example in the text module the Add function will include code to convert a data structure to a text line. The text module also defines two virtual functions FormatLine and ParseLine for use in converting data structures into text lines and text lines into data structures respectively. Accordingly the Registry Action functions will call upon these virtual functions in order to interact with the text records of a text registry. The virtual functions will be further defined in a registry manipulation module at the registry specific level where the format of the specific records will be known.

The binary module contains WriteRecord and ReadRecord functions for writing to and reading from persistent storage. The implementation of these functions for binary registries differs from the writing to and reading from persistent storage for text registries. For example it is typical with binary registries to first read a field size in order to determine how large the following field is. The binary module also provides functions for packing binary records if desired.

Both the text module and the binary module include a verify function which will be described in detail later.

As will be understood by those skilled in the art the above class modules may contain additional definitions and functions.

The above described embodiment of the generic registry facility may be used to manipulate a registry in conjunction with a registry manipulation module . A registry manipulation module is a module at the registry specific level . It may be a subclass that inherits from a class at the type level such as the text class or the binary class. The registry manipulation module is tailored to a specific registry or a registry having a specific record format such as the binary variable equals value registry the variable equals value registry and the etc services registry .

The registry manipulation module may include field definitions that will be used in the FieldSpec parameter and a record structure definition to provide the generic registry facility functions with information about the structure of each record in the registry. The registry manipulation module may also contain a class definition implementing registry specific functions such as ParseLine and FormatLine .

By way of example a registry manipulation module for manipulating the etc services registry on Unix based operating systems Services may include the following field definitions and a maximum number of aliases definition 

The above structure defines what each etc services record may contain. The structure is completely self contained having no pointers that point to data outside of the structure. This provides the structure with the internal integrity that permits it to be passed as a generic block of data into various functions in the generic registry facility . The ServRec structure is a standard structure defined by the operating system. It contains pointers to the service field a port field and a list of optional aliases which point to the character string Buffer. Similarly the Comment pointer points to a location in Buffer at which a comment may be found if any. The array of pointers PtrBfr is used in conjunction with the aliases member of ServRec to point to any aliases that are present in Buffer.

A computer program may then manipulate the etc services registry using the generic registry facility functions which will reference the Service module for record specific structure information. For example if the computer program needs to get a record from the etc services registry it would call the Get function. The etc servicesGenRegServices inherits from GenRegText which inherits from GenRegFile which inherits from GenRegBase. The Get function is provided in GenRegBase and further defined in GenRegText. The Get function defined in GenRegText would handle the opening and locking of the etc services registry. It does so by calling the opening and locking functions implemented within GenRegFile the module above GenRegText. The Get function would then require the use of the MatchRecord function and the ParseLine function implemented within GenRegServices to find and parse the record. The computer program would simply receive back a pointer to the record which will have been parsed into an appropriate data structure.

In another aspect of the present invention the GenRegText and GenRegBin modules define a Verify function. One of the bits of the Features variable defined in the base class related to whether the verify action feature was enabled. The Verify function is an embodiment of the verify action feature.

The verify action feature is a method of confirming that a change to a registry has been completed successfully before the change is implemented. As shown above in one embodiment the feature may be enabled or disabled through the Features variable defined in the base class. If the feature is enabled then the Registry Action functions which are designed to change the registry such as the Add function the Change or the Delete function will each call the Verify function. In one embodiment the Registry Action functions will first assess whether the verify action feature is enabled. If it is not enabled then the function performs the requested action upon the registry . If enabled then the function performs the requested action upon a temporary registry and calls the Verify function to determine whether the action was performed successfully and to overwrite the registry with the temporary registry if it was.

Reference is now made to which shows a method for verifying a requested change to a registry on a computer system according to the present invention. The method begins in step with the call of a generic registry facility function by the computer program that would cause a change to the registry . In step the Features variable is checked to see if the verify action feature is enabled. If the feature is not enabled then the method proceeds to step where the requested change to the registry is implemented directly. Following step the method returns control to the computer program .

If the verify action feature is enabled then following step the method proceeds to step wherein a temporary registry is created. The temporary registry is a copy of the registry. The requested change to be made by the generic registry facility function such as adding a record deleting a record or changing a record is then made to the temporary registry in step .

Once the change is made to the temporary registry then in step beginning with the first line of the registry and the first line of the temporary registry a line of the registry and a line of the temporary registry are compared. This portion of the method attempts to locate the change made to the temporary registry by identifying the point of difference between it and the registry . If in step the line of the registry and the line of the temporary registry are identical then the method proceeds to step where the lines being considered are incremented. This may be implemented using a pointer to a line in the registry and a pointer to a corresponding line in the temporary registry wherein the pointers can be incremented in step . In step the method evaluates whether the end of the registry has been reached. If it has then the verify action feature has been unable to locate the change that was supposed to be made to the temporary registry in step . Accordingly in step the return code of the verify action function is set to indicate failure and the method returns control to the computer program . Otherwise following step the method loops to step to compare the next lines of the registry and the temporary registry.

If the method locates a difference between the registry and the temporary registry in step then in step it compares the difference to the change that had been requested. Step is a decision based upon the comparison of step . If the difference found in the temporary registry corresponds to the requested change then the Registry Action function performed successfully and the method advances to step . If the difference does not correspond to the requested change then the function was performed incorrectly and at step the method sets the return code of the verify action function to indicate failure and returns control to the computer program .

At step the verification of the change has been successful so the method performs a commit sequence. In step the path to a back up copy of the registry is unlinked. Then in step the path to the back up copy of the registry is linked to the registry . The temporary registry is then renamed in step as the registry . Effectively the temporary registry having the change made to it becomes the registry while the unchanged registry becomes the new back up of the registry. Accordingly the back up copy of the registry will always be one change removed from the current registry . Following the commit sequence of steps and the method returns control to the computer program .

The commit sequence and is a safe method of managing the change to the registry because any user or process actively viewing the original registry is not affected by the commit sequence and . While the other user or process is viewing the registry the location that the registry path is linked to will have changed. Once the user exits and subsequently tries to view the registry again the registry path will be linked to the new changed version of the registry.

An example implementation of the commit sequence developed for use with Unix based operating systems is as follows 

In yet another aspect of the present invention there is provided a trigger feature. In one embodiment the trigger feature is provided through a Trigger function. Although not shown in the above described embodiment of the type level binary or text class modules the Trigger function may be defined at the type level . If this feature is enabled then the Trigger function may be called by a Registry Action function after a successful change is made to the registry . Alternatively it may be called by the Verify function. In one embodiment the Trigger function is passed the parameters long long FieldSpec int Action and void Record.

The trigger feature provides the ability to trigger an event in response to a change to the registry. The Trigger function can be configured within the registry manipulation module to perform whatever specific task is required as a result of the change.

By way of example the Trigger function may send an alert to other processes each time the registry changes. Alternatively the Trigger function may evaluate the nature of the change and send an alert to another process or to an administrator depending upon the type of change made. In one embodiment the GenRegServices module for the manipulation of the etc services registry may include a Trigger function configured to send a signal to a running process each time an entry is changed in the etc services registry. The running process would then know that the etc services registry was updated and that it needs to be re read to ensure that it is operating with accurate information.

The Trigger function may be used advantageously in the context of a cluster environment. In the event configuration information is changed in a registry the Trigger function could be used to send an alert to processes running on other systems in the cluster to ensure that the corresponding change is made to corresponding registries on the other systems. In this manner the Trigger function may be used to propagate changes across a network having multiple registries that require consistency.

Using the foregoing specification the invention may be implemented as a machine process or article of manufacture by using standard programming and or engineering techniques to produce programming software firmware hardware or any combination thereof.

Any resulting program s having computer readable program code may be embodied within one or more computer usable media such as memory devices transmitting devices or electrical or optical signals thereby making a computer program product or article of manufacture according to the invention. The terms article of manufacture and computer program product as used herein are intended to encompass a computer program existent permanently temporarily or transitorily on any computer usable medium.

A machine embodying the invention may involve one or more processing systems including but not limited to central processing unit s memory storage devices communication links communication transmitting devices servers I O devices or any subcomponents or individual parts of one or more processing systems including software firmware hardware or any combination or sub combination thereof which embody the invention as set forth in the claims.

One skilled the art of computer science will be able to combine the software created as described with appropriate general purpose or special purpose computer hardware to create a computer system and or computer sub components embodying the invention and to create a computer system and or computer sub components for carrying out the method of the invention.

The present invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Certain adaptations and modifications of the invention will be obvious to those skilled in the art. Therefore the above discussed embodiments are considered to be illustrative and not restrictive the scope of the invention being indicated by the appended claims rather than the foregoing description and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.

