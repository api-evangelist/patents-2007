---

title: Systems and methods of using an IP ID field for automatic WAN/LAN detection
abstract: The solution of the present invention provides systems and methods for encoding information into an Internet Protocol identification field (IPID) of an IP layer header of a network packet in a manner acceptable to many or all of the network devices that encounter the encoded packet. In one embodiment, the solution described herein encodes the IP identification field of the IPID header with information to be communicated between devices. Appliances may use the encoded IP field as a signal or a means for a low-bandwidth subcarrier of data between the appliances that is transparent to any intervening network equipment. For example, the encoded field may be used to announce or probe the presence of a device, a functionality or capability of device or to indicate a type or speed of a network connection of a port on a device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664857&OS=07664857&RS=07664857
owner: Citrix Systems, Inc.
number: 07664857
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20070312
---
This present application is a continuation in part of and claims priority to U.S. patent application Ser. No. 11 627 707 entitled Systems And Methods For Preserving Transport Layer Protocol Options and filed Jan. 26 2007 which is incorporated herein by reference.

This application generally relates to data communication networks and in particular to systems and methods for encoding an Internet Protocol identified field IP ID for a transparent signaling scheme between devices.

In a network environment devices such as a client and server may communicate via a transport layer connection. In a TCP IP network a client and server may establish a transport control protocol TCP connection and communicate by transmitting TCP packets. With TCP the client and server may exchange transport control protocol information by optional information in headers of TCP packets referred to as TCP header options. For example a client and server may negotiate the internet protocol segment size by using the maximum segment size option field in a TCP synchronization packet known as a TCP SYN packet. In another example the client and server may use a TCP packet selective acknowledgement mechanism implemented with TCP header options to communicate which packets have been received. In other examples devices may use TCP header options to exchange proprietary control information.

One problem with using TCP header options is that is only works for TCP packets and not other IP protocols. In an IP network other protocols may be used to communicate between devices and therefore do not support the use of TCP header options. Another problem is the limited space available in the TCP header option. In some cases it may be necessary to remove a desired TCP option in the header to make space available for inserting another TCP option. Additionally by adding options to the TCP header the length of the TCP packet increases. This may result in packet fragmentation and other length related issues. Yet another issue with TCP header options is related to traversing firewalls or other network devices. For example some firewall devices may reject unknown options or reject options the firewall considers to be unacceptable malicious or unfamiliar. Also the TCP header options a firewall may accept or reject can be arbitrary and subject to change. This can further challenge the use of TCP options in a network environment.

Thus it is desirable to provide systems and methods to communicate information between devices in a manner more compatible with and transparent to various network devices and protocols.

The solution of the present invention provides systems and methods for encoding information into an Internet Protocol identified field IP ID field of an IP layer header of a network packet in a manner acceptable to many or all of the network devices that encounter the encoded packet. In one embodiment the solution described herein encodes the IP identification field of the IP header with information to be communicated between devices. In other embodiments the solution described herein encodes an option field of the IP header or IP option with information to communication to another device. Devices may use the encoded IP field as a signal or as a low bandwidth subcarrier of data between the devices that is transparent to any intervening network equipment. For example the encoded field may be used to announce or probe the presence of a device a functionality or capability of a device or to indicate a type or speed of a network connection of a port on a device.

In one aspect the present invention is related to a method of a first intermediary to detect an announcement of presence of a second intermediary. The method includes transmitting via a first intermediary a transport layer connection request. The transmission of the transport layer connection request traverses a second intermediary. The method includes intercepting by the first intermediary a packet having an identification field of an internet protocol layer header encoded with a value by the second intermediary. The value of the identification field is encoded by performing a predetermined operation on an initial sequence number for the transport layer connection. The first intermediary detects presence of the second intermediary by determining the value of the identification field of the internet protocol layer header of the intercepted packet comprises the initial sequence number for the transport layer connection encoded by the predetermined operation. In some embodiments the first intermediary is a client agent or an appliance. In other embodiments the second intermediary is a client agent or an appliance.

In one embodiment the method includes encoding by the second intermediary the value of the identification field to comprise the initial sequence number adjusted by the predetermined operation. In another embodiment the method includes encoding by the second intermediary the value of the identification field as an option of the internet protocol layer header of the transport layer connection request. In some embodiments the initial sequence number for the transport layer connection is an initial sequence number requested by a client via the transport layer connection request. In other embodiments the initial sequence number for the transport layer connection is an initial sequence number requested by a server via an acknowledgement to the transport layer connection request.

In yet one embodiment the second intermediary intercepts a second packet having the value of the identification field of the internet protocol layer header encoded by the first intermediary. The value the identification field is encoded by performing the predetermined operation on the initial sequence number requested by a client or a server for the transport layer connection. The second intermediary detects presence of the first intermediary by determining the identification field of the internet protocol layer header of the intercepted second packet is equal to the initial sequence number for the transport layer connection encoded by the predetermined operation.

In some embodiments the first intermediary or the second intermediary encodes the value of the identification field equal to the initial sequence number multiplied by a predetermined factor. The first intermediary or the second intermediary may encode the initial sequence number by performing the predetermined operation of addition subtraction multiplication or division on an initial sequence number requested by a client or a server for the transport layer connection.

In other embodiments the first intermediary or the second intermediary identifies a source internet protocol address and a destination internet protocol address of intercepted packets as a connection to be accelerated by the first intermediary or the second intermediary. The first intermediary or the second intermediary may associate the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. The first intermediary or the second intermediary may also monitor transport layer connection requests between a client and a server and determine that a predetermined number of retransmissions failed to open a connection. The first or second intermediary may identify a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated.

In one aspect the present invention relates to a method of a first appliance to detect an announcement of the presence of a second appliance. The method includes transmitting via a transport layer connection request such as a TCP connection request from a client to a server via a first appliance. The transmission of the transport layer connection request traverses a second appliance. The second appliance intercepts a packet from the server acknowledging the transport layer connection request such as a TCP SYN ACK packet. The packet may identify an initial sequence number ISN requested by the server. The method also includes establishing by the second appliance a value of an identification field of an internet protocol IP layer of the packet to be the ISN adjusted by a predetermined factor. For example the IP ID option field of the IP packet may be set to ISN 5. The method further includes the first appliance intercepting the packet transmitted by the second appliance to the client and detecting the presence of the second appliance by determining the identification field of the intercepted packet had the initial sequence number of the acknowledgement from the server e.g. the IP ID option has the ISN value encoded.

In some embodiments of the method the first appliance determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined factor. In other embodiments the method includes setting the value of the identification field equal to the initial sequence number multiplied by the predetermined factor e.g. ISN 5. In one embodiment the predetermined factor is an integer value.

In another embodiment the method includes the second appliance adjusting the initial sequence number by performing any operation such as addition subtraction multiplication or division on the initial sequence number ISN . In yet another embodiment the second appliance adjusts the initial sequence number by performing a predetermined function on the initial sequence number.

In some embodiments the method includes identifying by the first appliance a source internet protocol address and a destination internet protocol address of the intercepted packet as a connection to be accelerated by the first appliance or the second appliance. In one embodiment the first appliance associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration e.g. a whitelist . In another embodiment the first appliance monitors transport layer connection requests of the client to the server determines a predetermined number of retransmissions failed to open a connection and identifies a source internet protocol address and a destination internet protocol address of the transport layer connection requests that are not be accelerated. For example the source and destination pair may be put on a blacklist or removed or excluded from the whitelist . In one embodiment the first appliance determines a type of network connection of a port on the first appliance in response to detecting the presence of the second appliance. The first appliance may determine the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In another embodiment the first appliance determines the port is connected to a device providing one or more Wide Area Network WAN optimization techniques.

In still another embodiment the method includes a step in which the second appliance establishes the value of the identification field of an internet protocol layer header to include the initial sequence number adjusted by the predetermined operation. In some other embodiments the identification field includes an option field of a header of the internet protocol layer.

In another aspect the present invention is related to a method of a second appliance to detect an announcement of presence of a first appliance via a transport layer connection request. The method includes a first appliance that intercepts a transport layer connection request from a client to a server. The method also includes a first appliance that establishes a value of an identification field of an internet protocol layer of the transport layer connection request to specify an initial sequence number adjusted by a predetermined operation. The first appliance transmits a value of an identification field of an internet protocol layer of the transport layer connection request to specify an initial sequence number adjusted by a predetermined operation. The method also includes a second appliance that intercepts the transport layer connection request. The second appliance detects the presence of the first appliance by determining the identification field of the intercepted transport layer connection request includes the initial sequence number adjusted by the predetermined operation.

In one embodiment the method includes a step in which the second appliance determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined operation. In other embodiments the method includes a step in which the method sets the value of the identification field equal to the initial sequence number multiplied by a predetermined factor. In some embodiments the predetermined factor is an integer value. In other embodiments the first appliance adjusts the initial sequence number by performing the predetermined operation of one of addition subtraction multiplication or division on the initial sequence number.

In another embodiment the second appliance identifies a source internet protocol address and a destination internet protocol address of the transport layer connection request as a connection to be accelerated by one of the first appliance or the second appliance. In some embodiments the second appliance associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In some other embodiments the second appliance monitors the transport layer connection requests of the client to the server determining a predetermined number of retransmissions failed to open a connection and identifying a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated. In other embodiments the second appliance determines a type of network connection of a port on the second appliance in response to detecting the presence of the first appliance. In some embodiments the second appliance determines whether the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In other embodiments the second appliance determines whether the port is connected to a device providing one or more Wide Area Network WAN optimization techniques.

In still another embodiment the method includes a step in which the first appliance establishes the value of the identification field of an internet protocol layer header to specify the initial sequence number adjusted by a predetermined operation. In some other embodiments the identification field includes an option field of a header of the internet protocol layer.

In still another aspect the present invention is related to a method of a client to detect an announcement of presence of an appliance based on acknowledgement of a transport layer connection request. The method includes transmitting via a client agent a transport layer connection request from a client to a server transmission of the transport layer connection request traversing an appliance. The appliance intercepts a packet from the server acknowledging the transport layer connection request the packet identifying an initial sequence number requested by the server. The appliance establishes a value of an identification field of an internet protocol layer of the packet to specify the initial sequence number adjusted by a predetermined operation. The client agent intercepts the packet transmitted by the appliance to the client. The client agent detects the presence of the appliance by determining the identification field of the intercepted packet includes the initial sequence number adjusted by the predetermined operation.

In one embodiment the client agent determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined operation. In some embodiments the method includes a step in which the method sets the value of the identification field equal to the initial sequence number multiplied by a predetermined factor. In some embodiments the predetermined factor is an integer value. In other embodiments the appliance adjusts the initial sequence number by performing the predetermined operation of one of addition subtraction multiplication or division on the initial sequence number.

In another embodiment either the client agent or the appliance identifies a source internet protocol address and a destination internet protocol address of the packet as a connection to be accelerated by one of the appliance or the client agent. In other embodiments either the client agent or the appliance associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In some other embodiments either the client agent or the appliance monitors the transport layer connection requests of the client to the server determining a predetermined number of retransmissions failed to open a connection and identifying a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated.

In still another embodiment the appliance establishes the value of the identification field of an internet protocol layer header to specify the initial sequence number adjusted by the predetermined operation. In some embodiments the identification field includes an option field of a header of the internet protocol layer.

In another aspect the present invention is related to a method of an appliance to detect an announcement of presence of a client agent via a transport layer connection request. In one embodiment the method includes a client intercepting a transport layer connection request from a client to a server. The client agent establishes a value of an identification field of an internet protocol layer of the transport layer connection request to include an initial sequence number adjusted by a predetermined operation. The client agent transmits the transport layer connection request to the server transmission of the transport layer connection request traversing an appliance. The appliance intercepts the transport layer connection request. The appliance detects the presence of the client agent by determining the identification field of the intercepted transport layer connection request includes the initial sequence number adjusted by the predetermined operation.

In another embodiment the method includes a step in which the appliance determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined operation. In other embodiments the method includes a step in which the method sets the value of the identification field equal to the initial sequence number multiplied by a predetermined factor. In some other embodiments the predetermined factor is an integer value. In some embodiments the client agent adjusts the initial sequence number by performing the predetermined operation of addition subtraction multiplication or division on the initial sequence number.

In still another embodiment either the client agent or the appliance identifies a source internet protocol address and a destination internet protocol address of the transport layer connection request as a connection to be accelerated by one of the appliance or the client agent. In some other embodiments either client agent or the appliance associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In some embodiments either the client agent or the appliance monitors the transport layer connection requests of the client to the server determining a predetermined number of retransmissions failed to open a connection and identifying a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated.

In another embodiment the appliance determines a type of network connection of a port on the second appliance in response to detecting the presence of the client agent. In some embodiments the appliance determines the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In still other embodiments the appliance determines the port is connected to the client agent providing one or more Wide Area Network WAN optimization techniques.

In still another embodiment the client agent establishes the value of the identification field of an internet protocol layer header to specify the initial sequence number adjusted by a predetermined operation. In some embodiment the identification field includes an option field of a header of the internet protocol layer.

In another aspect the present invention is related to a system for detecting by a first appliance an announcement of presence of a second appliance. The system includes a first appliance forwarding a transport layer connection request from a client to a server. The system also includes a second appliance intercepting a packet from the server acknowledging the forwarded transport layer connection request and identifying an initial sequence number ISN requested by the server. The second appliance has a tagging engine to establish a value of an identification field of an internet protocol IP layer of the packet to the ISN adjusted by a predetermined factor such as the ISN multiplied by a non zero integer value. The first appliance intercepts the packet transmitted by the second appliance to the client and detects a presence of the second appliance by determining the identification field of the intercepted packet includes the initial sequence number of the acknowledgement.

In one embodiment of the system the first appliance determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined factor. In some embodiments the tagging engine sets the value of the identification field equal to the initial sequence number multiplied by the predetermined factor such as ISN 5. In one embodiment the predetermined factor is an integer value. The second appliance may adjust the initial sequence number by performing an operation such as addition subtraction multiplication or division on the initial sequence number. In another embodiment the second appliance adjusts the initial sequence number by performing a predetermined function on the initial sequence number.

In some embodiments of the system the tagging engine identifies a source internet protocol address and a destination internet protocol address of the intercepted packet as a connection to be accelerated by the first appliance and or the second appliance.

In one embodiment the tagging engine associates the source internet protocol address and the destination internet protocol address with a list whitelist of connections identified for acceleration. Furthermore the first appliance may monitor transport layer connection requests of the client to the server determine a predetermined number of retransmissions failed to open a connection and identify that a source internet protocol address and a destination internet protocol address of the transport layer connection requests should not be accelerated. For example the source and destination pair may be removed from the whitelist or placed on a blacklist .

In some embodiments the first appliance determines a type of network connection of a port on the first appliance in response to detecting the presence of the second appliance. The first appliance may determine the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In some cases the first appliance determines the port is connected to a device providing one or more Wide Area Network WAN optimization techniques.

In another aspect the present invention is related to a system for detecting by a second appliance an announcement of presence of a first appliance. In one embodiment the system includes a first appliance forwarding a transport layer connection request from a client to a server. The first appliance includes a tagging engine to establish a value of an identification field of an internet protocol layer of the transport layer connection request to include the initial sequence number requested by the client adjusted by a predetermined operation. The system also includes a second appliance. The second appliance intercepts the transport layer connection request and identifying the initial sequence number requested by the client. The second appliance detects a presence of the first appliance by determining whether the identification field of the transport layer connection request includes the initial sequence number requested by the client adjusted by the predetermined operation.

In another embodiment the second appliance determines whether the identification field is equal to the value of the initial sequence number adjusted by the predetermined factor. In some embodiments the tagging engine sets the value of the identification field equal to the value of the initial sequence number adjusted by the predetermined operation. In other embodiments the predetermined factor is an integer value. In some other embodiments the first appliance adjusts the initial sequence number by performing the predetermined operation which is either an addition subtraction multiplication or division operation on the initial sequence number. In other embodiments the second appliance adjusts the initial sequence number by performing a predetermined function on the initial sequence number.

In still another embodiment the tagging engine identifies a source internet protocol address and a destination internet protocol address of the intercepted packet as a connection to be accelerated by either the first appliance or the second appliance. In some other embodiments the tagging engine associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In some embodiments either the first or second appliance monitors acknowledgements for transport layer connection requests from the server to the client determines a predetermined number of retransmissions failed to open a connection and identifies a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated.

In another embodiment the second appliance determines a type of network connection of a port on the second appliance in response to detecting the presence of the first appliance. In other embodiment the second appliance determines the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In some other embodiments the second appliance determines the port is connected to a device providing one or more Wide Area Network WAN optimization techniques.

In another aspect the present invention is related to a system for detecting by a client agent an announcement of presence of an appliance. In one embodiment the system includes a client transmitting a transport layer connection request from a client to a server. The system also includes an appliance intercepting a packet from the server acknowledging the transport layer connection request and identifying an initial sequence number requested by the server. The appliance includes a tagging engine to establish a value of an identification field of an internet protocol layer of the packet to specify the initial sequence number adjusted by a predetermined operation. The client agent intercepts the packet transmitted by the appliance and detecting the presence of the appliance by determining the identification field of the intercepted packet specifying the initial sequence number of the acknowledgement adjusted by the predetermined operation.

In another embodiment the client agent determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined operation. In some other embodiments the tagging engine sets the value of the identification field equal to the initial sequence number multiplied by the predetermined factor. In some embodiments the predetermined factor is an integer value. In other embodiments the appliance performs a predetermined operation of addition subtraction multiplication or division operation on the initial sequence number. In some embodiments the appliance adjusts the initial sequence number by performing a predetermined function on the initial sequence number.

In still another embodiment the tagging engine identifies a source internet protocol address and a destination internet protocol address of the intercepted packet as a connection to be accelerated by either the client agent or the appliance. In some other embodiments the tagging engine associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In other embodiments either the appliance or the client agent monitors acknowledgements of transport layer connection requests from the server determines a predetermined number of retransmissions failed to open a connection and identifies a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated. In another embodiment the client agent determines that the client is connected to the appliance providing one or more Wide Area Network WAN optimization techniques.

In another aspect the present invention is related to a system for detecting by an appliance an announcement of presence of a client agent. In one embodiment the system includes a client agent intercepting a transport layer connection request from a client to a server. The client agent includes a tagging engine to establish a value of an identification field of an internet protocol layer of the packet to specify an initial sequence number of the transport layer connection request adjusted by a predetermined operation. The system also includes an appliance intercepting the transport layer connection request from the client requesting the identifying the initial sequence number requested by the client. The appliance detects presence of the client agent by determining the identification field of the intercepted transport layer connection request includes the initial sequence number of adjusted by the predetermined operation.

In one embodiment the appliance determines the identification field is equal to the value of the initial sequence number adjusted by the predetermined operation. In some embodiments the tagging engine sets the value of the identification field equal to the initial sequence number multiplied by the predetermined factor. In some embodiments the predetermined factor is an integer value. In other embodiments the client agent adjusts the initial sequence number by performing the predetermined operation which is either an addition subtraction multiplication or division operation on the initial sequence number. In some other embodiments the appliance adjusts the initial sequence number by performing a predetermined function on the initial sequence number.

In another embodiment the tagging engine identifies a source internet protocol address and a destination internet protocol address of the intercepted packet as a connection to be accelerated by one of the client agent or the appliance. In some embodiments the tagging engine associates the source internet protocol address and the destination internet protocol address with a list of connections identified for acceleration. In some other embodiments either the client agent or the appliance monitors requests of transport layer connections from the client determines a predetermined number of retransmissions failed to open a connection and identifies a source internet protocol address and a destination internet protocol address of the transport layer connection requests as not to be accelerated.

In still another embodiment the appliance determines a type of network connection of a port on the appliance in response to detecting the presence of the client agent. In some embodiments the appliance determines the port is connected to a Local Area Network LAN or a Wide Area Network WAN . In other embodiments the appliance determines the port is connected to a device providing one or more Wide Area Network WAN optimization techniques.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention described below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed.

Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks . In some embodiments one or more of the clients communicates with any of the servers via one or more appliances such as appliance and appliance . In some embodiments the appliance is a Wide Area Network WAN optimization controller or appliance and the appliance is a transport control protocol terminating device such as a firewall.

Although shows a network network and network generally referred to as network s between the clients and the servers the clients and the servers may be on the same network . The networks can be the same type of network or different types of networks. The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. The networks can be a private or public network. In one embodiment network or network may be a private network and network may be a public network. In some embodiments network may be a private network and network and or network a public network. In another embodiment networks may be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located on a corporate LAN in a corporate data center.

The network may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network may be a bus star or ring network topology. The network and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in a first appliance which also may be referred to as an interface unit gateway or network device is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center.

A second appliance is also shown in between the networks and . In one embodiment a first appliance communicates with a second appliance . In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In one embodiment the appliance is on the same network as appliance . In another embodiment the appliance is on a different network as appliance . In yet another embodiment a plurality of appliances and may be deployed on network . In some embodiments a plurality of appliances and may be deployed on network . In other embodiments the appliance or could be a part of any client or server on the same or different network as the client . One or more appliances and may be located at any point in the network or network communications path between a client and a server .

A first appliance may include any type and form of transport control protocol or transport layer terminating device such as a gateway or firewall device. In one embodiment the appliance terminates the transport control protocol by establishing a first transport control protocol connection with the client and a second transport control connection with the second appliance or server. In another embodiment the appliance terminates the transport control protocol by changing managing or controlling the behavior of the transport control protocol connection between the client and the server or second appliance. For example the appliance may change queue forward or transmit network packets in a manner to effectively terminate the transport control protocol connection or to act or simulate as terminating the connection.

In one embodiment the first appliance provides a virtual private network VPN connection. In some embodiments the first appliance provides a Secure Socket Layer VPN SSL VPN connection. In other embodiments the first appliance provides an IPsec Internet Protocol Security based VPN connection. In some embodiments the first appliance provides any one or more of the following functionality compression acceleration load balancing switching routing caching and Transport Control Protocol TCP acceleration. In one embodiment the first appliance is any of the product embodiments referred to as Access Gateway Application Firewall Application Gateway or NetScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In some embodiments the first appliance is a performance enhancing proxy.

In one embodiment the second appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic. The second appliance may include an acceleration or optimization device such as any type and form of WAN optimization device. In some embodiments the second appliance is a performance enhancing proxy. In some embodiments the second appliance provides compression of application network traffic. In other embodiments the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In one embodiment the second appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

Although generally referred to as a first appliance and a second appliance the first and second appliance may be the same type and form of appliance. In one embodiment the second appliance may perform the same functionality or portion thereof as the first appliance and vice versa. For example the first appliance and second appliance may both provide acceleration techniques. In one embodiment the first appliance may perform LAN acceleration while the second appliance performs WAN acceleration or vice versa. In another example the second appliance may also be a transport control protocol terminating device.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In some embodiments one or more servers provide for a Common Internet File System CIFS and or communicate using the CIFS protocol. In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Although depicts a network environment having a first appliance and a second appliance the network environment may have multiple appliances and or . Referring now to another embodiment of a network environment is depicted in which multiple WAN optimization devices are deployed in conjunction with at least one transport layer termination appliance . In brief overview a first WAN optimization device and a second WAN optimization device may be deployed in a network environment. In some embodiments the first WAN optimization device works in conjunction or cooperation with the second WAN optimization device . In these embodiments the WAN optimization devices as will be described in further detail below communicate via information in tagged network packets transmitted via the appliances. An appliance such as a firewall or LAN acceleration device may be deployed in the network between the client and server and or between the first WAN optimization device and the second WAN optimization device . By way of example in view of embodiments of appliances manufactured by Citrix Systems Inc. the first and second WAN optimization devices is a WANScaler appliance and appliance is a NetScaler appliance.

A client server appliance and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing any of the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. The device includes one or more network ports in communications with the network interface for transmitting and receiving data over a network . The network port provides a physical and or logical interface between the device and a network or another device for transmitting and receiving network communications. The network port includes software hardware or any combination of software and hardware. The type and form of the network port depends on the type and form of network and type of medium for connecting to the network.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS 2003 WINDOWS XP and WINDOWS VISTA all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS and OS X manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system such as those versions of Unix referred to as Solaris Sparc Solaris x86 AIX IBM HP UX and SGI Silicon Graphics among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. In another example the computing device may be a WinCE or PocketPC device with an ARM Advanced RISC Machine type of processor. In one example the computing device includes a Series 80 Nokia 9500 or Nokia 9300 type of smart phone manufactured by Nokia of Finland which may run the Symbian OS or EPOC mobile operating system manufactured by Symbian Software Limited of London United Kingdom. In another example the computing device may include a FOMA M100 brand smart phone manufactured by Motorola Inc. of Schaumburg Ill. and operating the EPOC or Symbian OS operating system. In yet another example the computing device includes a Sony Ericsson P800 P900 or P910 Alpha model phone manufactured by Sony Ericsson Mobile Communications USA Inc. of Research Triangle Park N.C. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone smart phone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliances and . In some embodiments a second appliance may be deployed. For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client includes a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The application and or data file of the computing environment may be delivered via the appliance and or the server .

In some embodiments the appliance and or accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of a company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance or provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In one embodiment the appliance terminates a first transport layer connection to the client . In some embodiments the appliance establishes a second transport layer connection to the server or to the appliance . For example the appliance may comprise a transport layer termination device such as a firewall or a SSL VPN device. A client may request to establish a transport layer connection with a server via the appliance . In response to the request the appliance establishes or terminates a first transport layer connection with the client and establishes or uses a second transport layer connection to the server . The appliance provides transport layer communications between the client and server via the first and second transport layer connections.

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. For example the application delivery system may transmit an application or data file via the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another example the application delivery system may transmit an application or data file via the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. In one embodiment the application delivery system may transmit the computing environment or any portion thereof via streaming.

In some embodiments the application delivery system includes a policy engine for controlling and managing the access to and selection of application execution methods and the delivery of applications. In some embodiments the policy engine provides for authentication authorization and auditing of users and clients. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the client to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client or computing environment may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol or the Remote Desktop Protocol RDP . The application can use any type of protocol and it can be for example an HTTP client an FTP client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the client agent is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack includes any type and form of interface for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack provides an application programming interface API . The interface may also include any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers . In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers . Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode.

The network packet capture mechanism also referred to as an interceptor or the network capture mechanism may comprise software hardware or any combination of software and hardware. In one embodiment the network capture mechanism intercepts a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the network capture mechanism or client agent . For example the network capture mechanism may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network.

In some embodiments the network capture mechanism comprises any type and form of a driver such as a network driver constructed and designed to interface and work with the network stack . In other embodiments the client agent and or network capture mechanism operates at one or more layers of the network stack such as at the transport layer. In one embodiment the network capture mechanism comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the network capture mechanism interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the network capture mechanism may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the network capture mechanism may comprise a mini filter or a mini port driver. In one embodiment the network capture mechanism or portion thereof operates in kernel mode. In another embodiment the network capture mechanism or portion thereof operates in user mode. In some embodiments a portion of the network capture mechanism operates in kernel mode while another portion of the network capture mechanism operates in user mode. In other embodiments the client agent operates in user mode but interfaces via the network capture mechanism to a kernel mode driver program process service thread task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the network capture mechanism is a user mode application or program.

The client agent or network packet capturing mechanism may include a network filter . The network filter includes any type and form of filtering or hooking mechanism to intercept a network packet at any layer of network stack provide one or more transport layer options such as TCP options to the packet. In one embodiment the network filter comprises any of the embodiments of the network packet capturing mechanism or any portion thereof as described above. In some embodiments the network filter operates at a layer of the network stack above the layer the network packet capture mechanism . For example the network filter may operate at an application layer and the network packet capture mechanism at the transport layer. In another embodiment the network filter may operate at the transport layer and the network packet capture mechanism at the network layer. For example the network filter may include a Transport Driver Interface TDI and the network packet capture mechanism an NDIS driver. In yet other embodiments the network filter operates at the same layer of the network stack but is called or executed prior to the network packet capture mechanism . In some embodiments the network filter intercepts the network packet prior to the network packet capture mechanism . In one embodiment the network filter captures a network packet transparently to the network packet capture mechanism .

The network filter may insert attach add modify or otherwise provide one or more transport layer options to a network packet. In one embodiment the network filter adds or attaches a TCP option to the TCP header of the packet. In another embodiment the network filter modifies a TCP option of the TCP header of the packet. In some embodiments the network filter removes a TCP option to the TCP header of the packet. The network filter may operate on any portion of the bytes or set of bytes at the end of the TCP header identified as TCP options. In one embodiment the TCP options may include 40 bytes. In some embodiments the TCP options have option ids such as ids . In one embodiment the network filter uses one of the option ids from 1 26. In another embodiment the network filter use an option id greater than 26 such any options with ids in the range of 27 99.

In one embodiment the network filter provides a TCP header option to pass proprietary control information between the client and an appliance . In other embodiments the network filter provides a TCP header option to announce a presence of the client client agent or appliance. As discussed above in conjunction with TCP options may be used for automatic WAN and or LAN detection by an appliance. In another embodiment the network filter provides a TCP header option to identify or specify available functionality service or capability of a client client agent or appliance. In some embodiments the network filter provides a TCP header option to identify WAN optimization or acceleration functionality is available on the client client agent or appliance.

The client agent may also include a secure access proxy to provide for communications between the client and an appliance or server . The secure access proxy may operate in user mode. In other embodiments the secure access proxy may operate in kernel mode. In still other embodiments a first portion of the secure access proxy may operate in user mode while a second portion operates in kernel mode.

In some embodiments the secure access proxy establishes a transport layer connection such as via TCP or UDP with the appliance . In one embodiment the secure access proxy provides a secure socket layer virtual private network connection between the client and the appliance or server . In another embodiment the secure access proxy provides a tunnel for or otherwise tunnels communications of the client to a server via the appliance . In some embodiments the secure access proxy transmits to and or receives from the appliance commands control information configuration information and data from a connection with the appliance . In one embodiment the secure access proxy and the appliance communicate via control packets or packets having any type and form of structure to exchange control information. In some embodiments the control packets are in the form of HTTP request responses having commands data and information understood by the secure access proxy and the appliance .

In some embodiments the secure access proxy works in conjunction with the network packet capture mechanism to intercept networks packets of an application and transmit the network packets to the appliance or server via the secure network proxy . In one embodiment the network capture mechanism intercepts any transport layer connection requests. In these embodiments the network capture mechanism execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the network capture mechanism intercepts and redirects the transport layer connection to a IP address and port controlled or managed by secure access proxy or client agent . In one embodiment the network capture mechanism sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the secure access proxy may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the secure access proxy then communicates the redirected transport layer communication to the appliance .

In some embodiments the network capture mechanism intercepts a Domain Name Service DNS request. In one embodiment the client agent and or network capture mechanism resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance or for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise a network capture mechanism operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or any portion thereof may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the network capture mechanism operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the network capture mechanism . As such the client agent can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent or any portion thereof may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or any portion thereof may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or network capture mechanism . As such in some embodiments the client agent and or any portion thereof is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the network capture mechanism .

In some embodiments the appliance or appliance uses a technique with transport control protocol header options or tagged packets to automatically identify and determine the type or speed of a network connection of a port. In one embodiment the appliance automatically detects a slow side connection e.g. a wide area network WAN connection and a fast side connection e.g. a local area network LAN connection . The apparatus includes two or more ports with a first port connectable to one network and a second port connectable to another network. The device is configured to monitor network traffic on the first port and the second port to detect a synchronization packet. The device is also configured to identify receipt of a synchronization packet that is tagged with an acknowledgement packet and on which port it is received. The device then configures itself to operate the identified port on which the tagged synchronization packet arrived so that the speed on that port is set to be the speed associated with the network connected to that port. The other port is then set to the speed associated with the network connected to that port.

Referring now to C and D a system and methods for automatically detecting a type or speed of a network connection of a port of an appliance are described. illustrates an embodiment of communication between devices in a network over a wide area network. The network includes a first local system or client a first WAN optimization appliance B a second WAN optimization appliance C and a second local system or server . The client is communicatively coupled to the first appliance B through a network e.g. a local area network or LAN and the server is communicatively coupled to the second appliance C through another network e.g. another LAN. The two appliances B and C are communicatively coupled with each other through a wide area network e.g. the Internet. In one embodiment the appliance B and appliance C may be configured so that each is aware of the other s presence. In some embodiments the appliances B and C are configured to accelerate transmission control protocol TCP connections on Internet Protocol IP networks.

In one embodiment the configuration illustrated in may be structured to allow for auto discovery by an appliance e.g. appliance B and or appliance C of a network to which it connects. For example an auto discovery mechanism in operation in accordance with functions as follows appliance B and appliance C are placed in line with the connection linking end nodes A and D. The appliance B and appliance C are at the ends of a low speed link e.g. Internet connecting two LANs. In one example embodiment appliance B and appliance C each include two ports one to connect with the low speed link and the other to connect with a high speed link e.g. a LAN. Any packet arriving at one port is copied to the other port. Thus appliance B and appliance C are each configured to function as a bridge between the two networks.

When an end node such as the client opens a new TCP connection with another end node such as the server the end node addresses a TCP packet with a synchronization SYN header bit set to the other end node. In the present example the end node of client opens a connection to end node of the server . When the SYN packet passes through appliance B the appliance attaches or otherwise provides a characteristic TCP header option to the packet which announces its presence. If the packet happens to pass through a second appliance in this example appliance C the second appliance C notes the header option on the tagged SYN packet . The server responds to the SYN packet with a synchronization acknowledgment SYN ACK packet. When the SYN ACK packet passes through appliance C a TCP header option is tagged e.g. attached to the SYN ACK packet to announce appliance C s presence to appliance B. Any type form or content of a TCP header option may be included in the packet to identify or announce the presence of appliance C. When appliance B receives this packet both appliances are now aware of each other and the connection can be appropriately accelerated.

Turning now to a method for detecting fast and slow sides of a network using a SYN packet is illustrated in view of . At step the method includes SYN processing by the appliance followed by determination of whether the SYN packet is tagged with an acknowledgement ACK at step . If the SYN packet is tagged the method identifies at step or configures the port receiving the tagged SYN packet as the slow side. In some embodiments the method may optionally remove at step the ACK tag from the packet before copying the packet to the other port at step . If the method determines at step that the packet is not tagged the method identifies at step or configures the port receiving the untagged packet as the fast side. In one embodiment the method then tags at step the SYN packet and copies the packet to the other port at step .

Referring next to an embodiments of steps of a method for detecting fast and slow sides of a network using a SYN ACK packet is illustrated. The method includes at step SYN ACK processing by the appliance followed by determination at step of whether the SYN ACK packet is tagged with an acknowledgement ACK . If the packet is tagged the method at step identifies or configures the port receiving the tagged SYN packet SYN ACK as the slow side. In one embodiment the method optionally removes the ACK tag from the packet at step before copying the packet to the other port at step . If the method determines at step that the packet is not tagged the method identifies at step or configures the port receiving the untagged packet as the fast side. The method determines at step whether the SYN packet was tagged. In some embodiments a packet may be tagged if the packet includes any predetermined type form or content of a TCP header option. If the SYN packet was not tagged the SYN ACK packet is copied at step to the other port. If the SYN packet was tagged the method tags the SYN ACK packet at step before copying the packet to the other port at step .

An advantage of these techniques described herein is that particular ports e.g. of an apparatus need not be unnecessarily predetermined to be dedicated to one network or another via pre configured software or hardware. Such configuration often results in confusion if not properly labeled or network failure if not properly connected to the appropriate networks. A configuration in accordance with the systems and methods described herein eliminate these and other issues in a network. Additionally automated assignment of ports can occur whenever a device performs different functions on different ports where the assignment of a port to a task can be made during the unit s operation and or the nature of the network segment on each port is discoverable by software.

Although the techniques above are generally described in connection with automatic WAN and LAN detection between appliances these techniques are applicable in non appliance implementations. For example these technique can be applied between a client and an appliance a client and a server and a server and an appliance. Furthermore these techniques are not limited to automatic WAN and LAN port detection or detecting presence of another device but the technique of tagging packets can be used for detecting capability functionality or services available or the presence thereof between one or more clients servers or appliances. Additionally the tagged packets may be used to share announce or exchange parameters between devices such as WAN optimization related parameters.

Referring now to and A B techniques for preserving transport layer options communicated between a transport layer terminating device are described. As described above appliances and a client and appliance client and server or server and appliance may use transport layer options to identify presence capability or functions between devices such as automatic WAN LAN port detection or WAN optimization capabilities. As illustrated in or B a transport layer protocol terminating device may be in the network path between appliances and or between the client and server. With the techniques to be described below the transport layer terminating device seamlessly and transparently handles manages or otherwise provides for the transmission of transport layer options between devices over multiple transport layer connections. For example the appliance may terminate a first transport layer connection with the client and a second transport layer connection with the server. Using a transport layer option preservation technique the appliance maintains transport layer options established by the client or appliance transmitted to a server via the appliance . Likewise the appliance may maintain transport layer options established by the server or appliance transmitted to a client via the appliance . This allows the appliance client and or server that support the TCP option tagging described above to work in an environment having a transport protocol layer terminating device such as a firewall.

Referring now to a technique for preserving transport layer options on the client via a terminated transport layer connection is depicted. In some embodiments the client agent terminates a first transport layer connection with an application and establishes a second transport layer connection with an appliance . An embodiment of method of will be discussed in conjunction with the embodiment of the client illustrated in .

In brief overview of method at step an application on the client generates a transport layer connection request network packet such as a packet for a TCP connection request. At step the network filter intercepts the generated network packet and adds a TCP header option. At step the network packet capture mechanism intercepts the network packet and identifies and stores the TCP header option. At step the network packet capture mechanism communicates the TCP header options to the secure access proxy . At step the secure access proxy transmits a connection request to the appliance identifying the TCP header option. The appliance terminates a TCP connection with the client . At step the secure access proxy receives a response from the appliance to the connect request. The response may include any remote TCP options such as a TCP option established by the server or appliance . At step the secure access proxy stores any remote TCP header options s . At step the secure access proxy indicates to the network packet capture mechanism the requested transport layer connection has been established. At step the secure access proxy responses to the application s TCP connection request. At step the network packet capture mechanism adds TCP header options such as remote TCP options or existing TCP options and the secure access proxy provides the response to the application.

In further detail at step an application on the client requests a transport layer connection to a server . In making the request the application causes a connection request network packet to be generated on the network stack . The application may use any interfaces or application programming interfaces such as a socket API for example WinSock API to the network stack to make a transport layer connection request. In one embodiment the application requests a TCP connection to a server . For example the generated network packet may comprise a TCP SYN packet for a TCP connection request. In another embodiment the application requests a UDP connection to the server .

At step the network filter intercepts or otherwise receives the generated network packet identifying the transport layer connection request of the application. In one embodiment the network filter adds or provides TCP header options to the intercepted connection request. In one embodiment the network filter adds or provides one TCP header option. In another embodiment the network filter adds or provides multiple TCP header options. In some embodiments the network filter puts the modified network packet with the TCP options on the network stack or otherwise allows the modified network packet to continue traversing the network stack . In other embodiments the network filter communicates the modified network packet to the network packet capture mechanism .

At step the network packet capture mechanism intercepts from the network stack or otherwise receives the network packet from step . In one embodiment the network packet capture mechanism identifies the TCP header option s added to or provided with the network packet. In another embodiment network packet capture mechanism identifies the TCP header option s is from an applications of the client or a local user application. In some embodiments the network packet capture mechanism stores the identified TCP header option s to storage or memory.

For example in one embodiment the network packet capture mechanism stores or copies a TCP header option into a buffer in storage or memory such as any type and form of data structure. In one embodiment the network packet capture mechanism stores these TCP options in a table such as filter table in association with the TCP session. For example the network packet capture mechanism stores TCP options in association with any combination of source IP address source port destination IP address and destination port. In another example the network packet capture mechanism stores TCP options in context with the TCP session or with a TCP session identifier. In yet another example the network packet capture mechanism stores TCP options in association with an application identifier or process id. In some embodiments the buffer is of variable length anywhere between 8 and 40 bytes or to a predetermined length or size of transport layer options supported by the transport layer protocol. In one embodiment the buffer is aligned on a 32 bit boundary. In these cases valid buffer lengths are 8 16 24 32 or 40 bytes. In another embodiment the network capture mechanism stores to the buffer all TCP options added to the packet up to the point of interception.

At step the network packet capture mechanism communicates the TCP options s to a secure proxy process . In some embodiments the network packet capture mechanism communicates the TCP option s via UDP control packets to the secure access proxy . In one embodiment the network packet capture mechanism communicates to the secure access proxy via a port listened on local host by the secure access proxy . The network packet capture mechanism may communicate control information or data such as via a control packet structure having information to identify the presence and length of the optionally included TCP header options. In one embodiment the control packet includes the variable bytes of TCP header options.

At step the secure access proxy adds the received TCP header options from the control packet to a connect request message sent to the appliance . In one embodiment the secure access proxy sends a connect request to the appliance via an application layer protocol. As such in some embodiments the application s intercepted TCP connection request is transmitted to the appliance via an application layer protocol. For example in one embodiment the secure access proxy sends an HTTP based CONNECT message to the appliance and the CONNECT message identifies the TCP header options as parameters in the HTTP message.

At step the appliance transmits a response to the CONNECT message sent by the secure access proxy . In one embodiment the appliance transmits a standard HTTP response 200 OK if the appliance establishes a transport layer connection with the server requested by the application on the client. In another embodiment the appliance transmits an error message if the appliance is not able to establish a transport layer connection with the server requested by the application on the client. In the case of an error the end to end connection may be terminated e.g. the local user application will report connection failure. In the case of a successful connection the appliance may transmit the additional TCP header options added by an appliance or server from the remote end of the connection. For example the appliance may add TCP options to the TCP SYN ACK packets as discussed above in connection with .

At step the secure access proxy receives TCP options from the response from the appliance . In some embodiments the secure access proxy stores these TCP options in storage or memory of the client . In one embodiment the secure access proxy stores these TCP options in a table such as filter table in association with the TCP session. For example the secure access proxy stores TCP options in association with any combination of source IP address source port destination IP address and destination port. In another example the secure access proxy stores TCP options in context with the TCP session or with a TCP session identifier. In yet another example the secure access proxy stores TCP options in association with an application identifier or process id. In one embodiment secure access proxy copies these TCP options from the user space of the secure access proxy to the kernel. In some embodiments the secure access proxy transmits the TCP options received from the appliance to the network packet capture mechanism .

At step in some embodiments the secure access gateway indicates to the network packet capture mechanism the requested transport layer connection of the application has been established. In some embodiments the secure access gateway communicates a control message via a UDP connection to the network packet capture mechanism . In one embodiment the control message identifies to the network packet capture mechanism the port listened to by the secure access gateway is ready for communicating over the established transport layer connection. The secure access proxy may communicate control information or data such as via a control packet structure having information to identify the presence and length of the optionally included TCP header options. In one embodiment the control packet includes the variable bytes of TCP header options. In some embodiments this message informs the network packet capture mechanism that the connection to the remote end point is established and that it can release the previously captured TCP SYN. In one embodiment the SYN message is redirected to the secure access proxy but will not be released until the network packet capture mechanism or driver has stored the remote TCP SYN ACK options for further processing. Once released the driver waits for the local TCP SYN ACK from the access secure proxy .

At step the secure access proxy responds to the application s transport layer connection request. In one embodiment the secure access proxy generates or otherwise provides a network packet on the network stack having a response to the transport layer connection request such as a SYN ACK. In other embodiments the network packet capture mechanism responds to the application s transport layer connection request with a SYN ACK. In yet another embodiment the secure access proxy or network packet capture mechanism responds to the application s transport layer connection request with an error message.

At step in one embodiment once the secure access proxy responds to the application s TCP SYN with a local TCP SYN ACK message the network packet capture mechanism looks in storage or memory such as in a filter table to determine if a remote TCP SYN ACK option has been stored for this TCP session. For example the network packet capture mechanism may have stored remote TCP options from a previous control message as described above at step . In one embodiment if there is a remote SYN ACK option associated with this TCP connection the network packet capture mechanism adds attaches or otherwise provides the options to the local SYN ACK packet prior to releasing the packet to the local user application. In one embodiment the network packet capture mechanism appends a predetermined maximum of bytes sometimes 32 bit aligned of TCP header options to the local SYN ACK packet.

In some embodiments the adding of remote TCP options to any TCP options already in the TCP header would exceed the maximum number of options or maximum byte size of the TCP options. In these embodiments the network packet capture mechanism may append the remote TCP options to the difference of the existing options and the maximum number of bytes. In some embodiments the network packet capture mechanism may give precedence to well known TCP options of standard TCP headers over proprietary unknown TCP options. In other embodiments the network packet capture mechanism may override any portion of the TCP options with any portion or all of the remote TCP options.

Referring now to a technique for preserving transport layer options via an appliance terminating a transport layer connection with a client or server is depicted. In some embodiments the appliance terminates a first transport layer connection with the client and establishes a second transport layer connection with a server . In other embodiments the appliance terminates a first transport layer connection with the server and establishes a second transport layer connection with a client . An embodiment of method of will be discussed in conjunction with the embodiment of the system and environment illustrated in .

In brief overview of method at step the appliance receives a first connection request from the client such as via the secure access proxy . At step the appliance identifies the TCP header option s in the connection request and transmits a second connection request to the server using the identified TCP header option s . At step a second appliance receives or intercepts the second connection request and identifies the TCP header option s in the request. Upon identifying the TCP header option s the second appliance may take an action such as WAN LAN port detection or perform a WAN optimization technique such as compression or data flow optimization. At step the TCP connection is established with the server . At step the second appliance intercepts or receives the server s response to the connection request such as TCP SYN ACK packet and adds TCP options to the packet. The second appliance forwards this tagged SYN ACK packet to the client via the first appliance . At step the first appliance extracts the remote TCP options received from the second appliance and transmits a response to the client including the remote TCP options. At step the client such as via the secure access proxy receives the response from the first appliance including the remote TCP options. For example the client receives a connection established response identifying the remote TCP options provided by the second appliance .

In further details at step the appliance intercepts or otherwise receives a request transmitted by the client to establish a transport layer connection with a server . In some embodiments the appliance receives the request via a first transport layer connection with the client or secure access proxy. In another embodiment the appliance receives the connection request as the end point of a transport layer connection with the client or secure access proxy . In one embodiment the secure access proxy transmits the connection request. In another embodiment the client agent or any portion thereof transmits the connection request. In other embodiments the client transmits the request via an application layer protocol over a TCP or UDP connection already established between the client and the appliance . In other embodiments the appliance receives a first message from the client having the connect request and a second message from the client identifying the TCP option s .

In one embodiment the secure access proxy transmits an HTTP type command or message to the appliance . As illustrated in for example the secure access proxy may transmit a CONNECT message to the appliance identifying one or more of the following in association with the request version of HTTP username password or cookie value and Machine Access Control MAC address of the client. In some embodiments the CONNECT message identifies TCP options and the data contents thereof to the appliance . For example the secure access proxy may transmit any TCP options established by the network filter and identified by network packet capture mechanism as described above in connection with .

At step the appliance identifies the TCP header option s in the connection request. In one embodiment the appliance receives the CONNECT message of the secure access proxy and identifies reads or parses the message to determine the TCP options attached to or available in the message. In some embodiments the appliance makes an application programming interface API call to obtain the TCP options received with the message.

In other embodiments the appliance transmits a second transport layer connection request to the server using the identified TCP header option s . In one embodiment the appliance generates a TCP connection request packet and adds inserts attaches or otherwise provides the TCP option s identified in the connection request from the client to the generated packet. In some embodiments the appliance makes a kernel level application programming interface API call to provide the TCP options to the TCP header of the TCP connection request packet. In one embodiment the appliance generates a TCP connection request packet or otherwise a transport layer connection request using the IP address and port of the server identifying in the connection message from the secure access proxy .

At step the appliance transmits a transport layer connection request to the server that traverses appliance for example a SYN network packet for a TCP connection request. In some embodiments the appliance intercepts or otherwise receives the connection request of the appliance . In one embodiment the appliance identifies the TCP option s in the TCP connection request. In another embodiment the appliance determines that the TCP connection request network packet or SYN packet includes TCP option s in the TCP header. In response to the detection or identification of the TCP option s the appliance may perform any of the techniques described herein for automatic WAN LAN port detection the detection of the presence capability or function of another appliance or device on the network or to configure itself to perform WAN based acceleration or optimization techniques.

At step the server responds to the transport layer connection request of the appliance . In some embodiments the server transmits a SYN ACK network packet in response to the SYN network packet transmitted by the appliance . In one embodiment the server is accepting the transport layer connection request. In another embodiment the server establishes the transport layer connection request and transmits an acknowledgment of the establishment. In some embodiments the server refuses rejects or otherwise does not accept the transport layer connection request. The response by the server may traverse the appliance .

In some embodiments the appliance intercepts or otherwise receives the server s response to the connection request. In one embodiment the appliance intercepts or otherwise receives a TCP SYN ACK packet transmitted by the server. In some embodiments the appliance adds attaches inserts or otherwise provides TCP option s to the intercepts SYN ACK packet. The appliance may provide or establish TCP option s to the SYN ACK packet to announce the presence capability or function of the appliance for example as discussed above in conjunction with . In one embodiment the appliance forwards the intercepted SYN ACK packet to appliance In another embodiment the appliance transmits the intercepted SYN ACK packet to the client and the transmission traverses appliance .

At step the appliance receives or intercepts the SYN ACK packet forwarded or transmitted by appliance . In some embodiments the appliance identifies or determines that TCP option s are included in the SYN ACK packet. In one embodiment the appliance identifies these TCP option s as remote TCP option s of an appliance or another device . In another embodiment the appliance identifies or determines these TCP option s are custom or proprietary options established by another appliance or device . For example in one embodiment the appliance identifies or determines the TCP option s have an option identifier within or above a predetermined range such as greater than option id .

The appliance extracts parses or otherwise reads the TCP option s from the SYN ACK packet and provides the TCP option s or any portion thereof in a message transmitted to the client . In one embodiment the appliance generates an HTTP 200 OK message in response to the client s CONNECT message transmitted at step . In some embodiments the appliance generates an error response to the client s CONNECT message transmitted at step . In one embodiment the appliance transmits one or more messages identifying the connection has been established and the remote TCP option s if any via an application layer protocol over an established transport layer connection e.g. the first terminated transported layer connection between the appliance and client .

At step the client such as via the secure access proxy receives the response via one or more messages from the first appliance . In one embodiment the secure access proxy receives a successful connection establishment message and a message identifying the remote TCP option s . For example as illustrated in the client may receive an HTTP 200 OK connection established message and one or more parameters identifying the number of TCP option s and the data content thereof. In one embodiment the response may include no remote TCP option s one TCP option or multiple TCP option s . The data portion of the message may identify the option id s if any and the value of the TCP option s if any. In response to receiving a connection request response and any remote TCP option s the client agent of the client may perform any of the steps of the embodiment of method described above.

Although an embodiment of method is generally described above in view of a single transport protocol layer terminating appliance the techniques illustrated by method may be deployed in a plurality of transport protocol layer terminating appliances in the network path between a client and a server. Each of the plurality of appliances may preserve the TCP option s communicated between the appliance or server .

In view of the client TCP option preservation techniques described in and the appliance TCP option preservation techniques described in these techniques may operate in conjunction to provide an end to end TCP option preservation solution. Although these techniques are described in an embodiment of a client and an appliance using TCP option s these techniques may also be deployed between a client and a server a server and an appliance or between a plurality of appliances that have network paths traversing one or more transport protocol layer terminating devices.

Referring now to an embodiment of a system and method for using an internet protocol IP header identification field IPID or an IP header option of an IP datagram for detecting presence function or capability between devices or intermediaries is depicted. In some embodiments the technique of encoding information into IP header fields such as the IPID field or IP options fields allows devices intermediaries or appliances to have a signaling or communication scheme that traverses firewall or transport layer terminating devices. This communication scheme may be used between a first intermediary comprising a first appliance and a second intermediary comprising a second appliance to announce presence function or capability between the intermediaries. This communication may be used between a client agent acting as an intermediary with one or more appliances. The encoding of the IP header fields may be transparent to equipment in the network path of communications between the appliances.

The tagging engine may include functions operations or logic to insert add attach modify provide or otherwise establish a tagged packet or . In one embodiment the tagging engine tags a packet such as SYN packet or SYN ACK packet with a TCP option. In another embodiment the tagging engine tags a packet such as SYN packet or SYN ACK packet with an IP header field as will described in further detail below. In some embodiments the tagging engine includes functions operations or logic such as a comparator for comparing a TCP option IP header fields and or IP header options to a stored value or otherwise an expected value. In other embodiments the comparator of the tagging engine determines if a TCP option IP header field and or IP option has a valid applicable or otherwise useable value.

In one embodiment the tagging engine encodes sets or otherwise establishes a value of the identification field referred to as IPID of an IP header. In another embodiment the tagging engine encodes sets or otherwise establishes a value of an ID header option. The encoding of the IP header field in accordance with the operations discussed herein may also be referred to as tagging . In one embodiment the tagging engine intercepts a network packet at the network or IP layer of the network stack . In other embodiments the tagging engine intercepts a network packet at the transport layer of the network stack . In yet another embodiment another application program service process task thread or set of executable instructions of the appliance intercepts the network packet at any layer of the network stack and provides the intercepted network packet to the tagging engine .

In some embodiments the tagging engine encodes an IPID value or an IP option value for a SYN packet and or for a SYN ACK packet as illustrated in . In one embodiment the tagging engine encodes the IPID or an IP option value based on a predetermined operation algorithm or function using an initial sequence number identified in the SYN or SYN ACK packet and a predetermined factor. In some embodiments the tagging engine encodes the IPID value or an IP option based on a value of the initial sequence number and predetermined integer value such as 2 3 4 or 5. In some embodiments the tagging engine performs any type and form of mathematical operation on the initial sequence number using a predetermined factor. As such in one embodiment the tagging engine performs addition subtraction multiple division or any combination thereof to derive a value from the initial sequence number and the predetermined factor. In another embodiment the tagging engine performs any type and form of hashing or encryption of the IPID value or an IP option based on a predetermined factor. In some embodiments the tagging engine determines the initial sequence number requested by a client or server is 0 or a predetermined value the appliance does not want to use and the tagging engine sets the ISN to a predetermined value the appliance would like to use such as 1234. In yet other embodiments the tagging engine may encode set or establish the IPID value or an IP option with any suitable or desired values such as a parameter for WAN optimization compression or data flow acceleration or data to be communicated between appliances.

In some embodiments the tagging engine monitors network packets. In one embodiment the tagging engine monitors SYN and SYN ACK packets of a TCP connection handshake to determine if a connection is successfully established. In one embodiment the tagging engine monitors the number of retries of a transport connection request between a source and destination such as a client and server . In some embodiments the tagging engine monitors the setting of TCP option s and or IP option s and or IPID values between a source and destination. In one embodiment the tagging engine monitors the setting of custom or proprietary TCP option s and or IP option s and or IPID values. In other embodiments the tagging engine monitors errors corruption or invalidity of TCP option s and or IP option s and or IPID values in network packets transmitted between a source and destination.

In some embodiments the tagging engine may store source and destination information in a whitelist and or blacklist in response to monitoring of network packets. In one embodiment the whitelist identifies source and or destinations the appliance determines to accelerate. In another embodiment the whitelist identifies source and or destinations for which the TCP option s and or IP option s and or IPID value techniques have been successfully used. In yet another embodiment any source and destination pair not in the whitelist is implied to be on a blacklist whether or not a blacklist is used by the tagging engine . In some embodiments the appliance uses only a whitelist . In other embodiments the blacklist identifies source and or destinations the appliance determines not to accelerate. In one embodiment the blacklist identifies source and or destinations for which the TCP option s and or IP option s and or IPID value techniques have not been successfully used.

The whitelist and blacklist includes software hardware or any combination of software and hardware. In some embodiments the whitelist and blacklist include an object data structure database file or any other type and form of element for storing a list of source and destination pairs. In one embodiment the tagging engine stores information or data identifying source and destination internet protocol address and port pairs. In some embodiments the tagging engine stores an enumerated list of source and destination pairs to the whitelist and or blacklist .

In one embodiment the tagging engine determines from monitoring network packets that a source and destination have successfully established a transport layer connection while using TCP option s IP option s and or IPID values in the SYN and SYN ACK packets described herein. In response to the determination the tagging engine stores to the whitelist information of the source and destination pair for the connection such as source and destination IP addresses and port. In one embodiment and in response to the determination the tagging engine removes the source and destination pair information from the blacklist . In some embodiments and in response to the determination the tagging engine moves the source and destination pair information from the blacklist to the whitelist .

In another embodiment the tagging engine determines from monitoring network packets that a source and destination have not successfully established a transport layer connection. In some embodiments the tagging engine determines from monitoring network packets that the number of retries to establish a transport layer connection between a source and destination has exceeded a predetermined threshold such as 2 or 3 retries. In response to the determination the tagging engine stores to the blacklist information of the source and destination pair used in attempting to establish the connection such as source and destination IP addresses and port. In another embodiment in response to the determination the tagging engine does not use a blacklist but instead does not store any information about the source and destination pair to the whitelist . In yet another embodiment the tagging engine moves a source and destination pair from the blacklist to the whitelist .

Referring now to an embodiment of steps of a method are depicted for using an encoded IPID value s or IP option value s technique between two appliances. In brief overview at step a client transmits a transport layer connection request to a server . The request traverses one or more appliances such as appliance and . At step a first appliance intercepts the client s connection request packet which identifies an initial sequence number requested by the client. At step the first appliance encoded or establishes a value for the IPID field or an IP option based on performing a predetermined operation of the initial sequence number ISN requested by the client such as ISN 5. The appliance forwards the transport layer connection request to the server. At step a second appliance intercepts the request packet having the encoded IPID field of IP option value. At step the second appliance detects the presence capability or function of the first appliance by determining the IPID or an IP option value has been encoded according to the predetermined operation on the ISN requested by the client and the predetermined factor.

In further overview at step the server may transmit an acknowledgement of the client s connection request to the client. At step the second appliance intercepts the server s acknowledgment packet and identifies the initial sequence number ISN requested by the server. At step the second appliance encoded a value for the IPID field or an IP option of the packet based on performing a predetermined operation on the ISN number requested by the server and a predetermined factor such as the ISN multiplied by 5. The second appliance forwards the acknowledgement packet to the client . At step the first appliance intercepts or receives the packet having the encoded IPID field or IP option value. At step the first appliance detects the presence capability or function of the second appliance by determining the IPID or an IP option has been encoded by performing the predetermined operation using the ISN requested by the server and the predetermined factor. At step the first appliance or second appliance monitors the success and or failures of transport layer connection requests between source and destination pairs and stores to a whitelist and or blacklist according to the success or failure of the connection.

In further details at step a client requests a transport layer connection with a server . In another embodiment the server requests a transport layer connection with the client . In some embodiments the transport layer connection request traverses a first appliance . In other embodiments a first appliance intercepts the transport layer connection and forwards the request to the server via a second appliance . In yet another embodiment the transport layer connection request traverses multiple appliances via a transport control protocol terminating device . In some embodiments the client tags a TCP connection request or SYN packet using TCP option s as described herein. In other embodiments the client or appliance tags a TCP connection response or SYN ACK packet using TCP option s as also described herein.

At step a first appliance intercepts or otherwise receives the client s connection request. In one embodiment the appliance identifies or determines the initial sequence number ISN requested by the client in establishing the connection. In some embodiments the appliance identifies or determines the ISN of a SYN packet transmitted by the client .

At step the first appliance encodes or otherwise establishes a value for the IPID field or an IP option of the intercepted packet or request. In some embodiments the first appliance encodes the IPID field by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. In other embodiments the appliance encodes an IP header option by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. As described above an appliance may encode the IPID field or an IP option using any mathematical operation or algorithm based on the ISN and a predetermined factor. In one embodiment the first appliance encodes the IPID field or IP option with the ISN requested by the client . In some embodiments the appliance determines the ISN is set to 0 or another predetermined value and instead of using the ISN requested by the client the appliance sets the ISN for encoding the IPID field or IP option to a second predetermined value such as 1234.

At step a second appliance intercepts the client s request having the encoded IPID value or an IP option . In one embodiment the second appliance intercepts a client s TCP connection request SYN packet forwarded by a first appliance . In yet other embodiments a client or a server may process the IPID field or IP option s of the SYN and or SYN ACK packets in accordance with the techniques and operations described herein. In some embodiments the second appliance identifies the ISN requested by the client in the TCP portion of the packet. In still another embodiment the appliance may intercept and process these encoded IPID fields or IP option s .

At step the second appliance detects a presence of the first appliance by determining the IPID field or an IP option value has been encoded using a predetermined operation to provide an expected value based on the client s requested ISN. In some embodiments the second appliance identifies tracks or stores the ISN of SYN and SYN ACK packets to compare with the ISN calculated from the IPID field or an IP option . For example the second appliance may divide the value of the ISN number in the IPID field by the predetermined factor e.g. 5 to determine if the ISN numbers match. In one embodiment the second appliance determines the IPID field or an IP option is encoded with an ISN requested by the client and a predetermined factor such as integer value 5. In some embodiments the second appliance determines the IPID field or IP option has a hash or encryption of an ISN and a predetermined number. In yet other embodiments the second appliance determines the IPID field or IP option is encoded with or set to a value expected or otherwise pre negotiated between appliances . The appliances may use the detection of the IPID field or IP option to announce presence capability or function of another appliance or device automatic WAN LAN port detection or to pass or exchange parameters between appliances.

In further details and still referring to at step a server transmits to the client an acknowledgement to the client s transport layer connection request. In some embodiments the acknowledgement packet for the transport layer connection request traverses one or more appliances such as the first appliance and the second appliance . In other embodiments a second appliance intercepts the acknowledgement packet and forwards the request to the client via a first appliance . In yet another embodiment the transport layer connection acknowledgement traverses multiple appliances via a transport control protocol terminating device . In some embodiments the server or an appliance tags a TCP connection response or SYN ACK packet using TCP option s as also described herein.

At step the second appliance intercepts or otherwise receives the server s acknowledgement to the transport layer connection request of the client . In one embodiment the second appliance identifies or determines the initial sequence number ISN requested by the server in establishing or otherwise acknowledging the connection. In some embodiments the second appliance also identifies or determines the ISN of a SYN packet transmitted by the client .

At step the second appliance encodes or otherwise establishes a value for the IPID field or an IP option of the intercepted packet or acknowledgement. In some embodiments the second appliance encodes the IPID field by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. In other embodiments the appliance encodes an IP header option by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. As described above an appliance may encode the IPID field or an IP option using any mathematical operation or algorithm based on the ISN and a predetermined factor. In one embodiment the second appliance encodes the IPID field or IP option with the ISN requested by the server via the acknowledgement. In some embodiments the second appliance determines the ISN is set to 0 or another predetermined value and instead of using the ISN requested by the server the second appliance sets the ISN for encoding the IPID field or IP option to a second predetermined value such as 4567.

At step the first appliance intercepts the server s acknowledgement having the encoded IPID value or an IP option . In one embodiment the first appliance intercepts a server s TCP connection response a SYN ACK packet forwarded by a second appliance . In some embodiments the first appliance identifies the ISN requested by the server in the TCP portion of the packet. In still another embodiment the appliance may intercept and process these encoded IPID fields or IP option s .

At step the first appliance detects a presence of the second appliance by determining the IPID field or an IP option value has been encoded using a predetermined operation to provide an expected value based on the server s requested ISN. In some embodiments the first appliance identifies tracks or stores the ISN of SYN and SYN ACK packets to compare with the ISN calculated from the IPID field or an IP option . For example the first appliance may divide the value of the ISN number in the IPID field by the predetermined factor e.g. 5 to determine if the ISN numbers match. In one embodiment the first appliance determines the IPID field or an IP option is encoded with an ISN requested by the client and a predetermined factor such as integer value 5. In some embodiments the first appliance determines the IPID field or IP option has a hash or encryption of an ISN and a predetermined number. In yet other embodiments the first appliance determines the IPID field or IP option is encoded with or set to a value expected or otherwise pre negotiated between appliances . The appliances may use the detection of the IPID field or IP option to announce presence capability or function of another appliance or device automatic WAN LAN port detection or to pass or exchange parameters between appliances.

At step an appliance such as the first appliance or second appliance and or tagging engine monitors the success retries and failures of transport layer connection requests between source and destination pairs such as clients and servers. In one embodiment a first appliance or first tagging engine performs monitoring of the connection requests. In another embodiment a second appliance or second tagging engine performs monitoring of the connection requests. For example an appliance may monitor the SYN and SYN ACK packets between a client and a server. In response to monitoring the appliance stores source and destination pair information in the whitelist and or blacklist . In one embodiment upon either a successful TCP connection or detection of a TCP option IPID field or IP header option announcement the appliance places the source and destination pair on the whitelist removes the pairs from the blacklist or both. In another embodiment upon either a failed TCP connection too many retries or detection of a failed TCP or IP option or IPID based announcement the appliance places the source and destination pair on the blacklist removes the pairs from the whitelist or both.

In one embodiment the appliance places each source and destination pair in the whitelist by default before monitoring transport layer connection requests between the source and destination pair. That is in some embodiments the initial state of connection is associated with the whitelist . Accordingly the appliance may accelerate the connection of the source and destination pair. In another embodiment the appliance places each source and destination pair in the blacklist by default before monitoring transport layer connection requests between the source and destination pair. That is in some embodiments the initial state of connection is associated with the blacklist. The appliance may not accelerate the connection until a successful transport layer connection is established and the source and destination pair placed on the whitelist . In another embodiment the appliance places the source and destination pair on the blacklist until a successful announcement using the TCP or IP option or IPID values is detected by the appliance . In some embodiments the appliance uses or establishes only a whitelist and source and destination pairs are place or removed from the whitelist according to the success or failures of connection requests and or announcements with TCP options or IPID values.

In yet another embodiment the appliance may identify those source and destination pairs that may likely be accelerated or have effective acceleration. In these embodiments the appliance may store those source and destination pairs to the whitelist by default or otherwise. In some embodiments the appliance may identify those source and destination pairs that are unlikely to be accelerated or have ineffective acceleration. In these embodiments the appliance may store those source and destination pairs to the blacklist by default or otherwise.

Although an embodiment of method is generally described above as one appliance encoding an IPID value or IP option value and another appliance detecting the encoded IPID value or IP option value this encoding value technique may be used between a client and an appliance a server and an appliance or a client and a server. For example depicts systems and methods of an embodiment of using an internet protocol IP header identified field IPID field or an IP header option field of an IP layer header of a network packet for detecting presence function or capability between a client agent and appliance is depicted.

Referring now to an embodiment of a client agent for performing the encoding value techniques described herein is depicted. In brief overview the client agent includes a tagging engine a whitelist and a blacklist . Any portion of the client agent may perform optimization techniques such as WAN optimization techniques in conjunction with a partnering or cooperating device such as the appliance . For example the secure access proxy network filter and or network packet capture mechanism may perform any type and form of WAN optimization technique such as compressing content communicated between the client and the appliance .

The tagging engine on the client may include an application program library process service task thread or any type and form of executable instructions for performing any of the TCP and or IP options and or other header field tagging techniques and operations described herein. In one embodiment the tagging engine operates in kernel mode on the client . In other embodiments the tagging engine operates in user mode of the client . In some embodiments a first portion of the tagging engine operates in kernel mode while a second portion of the ragging engine operates in user mode of the client .

As discussed above in connection with the tagging engine may include functions operations or logic to insert add attach modify provide or otherwise establish a tagged packet or . In one embodiment the tagging engine tags a packet such as SYN packet or SYN ACK packet with a TCP option. In another embodiment the tagging engine tags a packet such as SYN packet or SYN ACK packet with an IP header field. In some embodiments the tagging engine includes functions operations or logic such as a comparator for comparing a TCP option IP header fields and or IP header options to a stored value or otherwise an expected value. In other embodiments the comparator of the tagging engine determines if a TCP option IP header field and or IP option has a valid applicable or otherwise useable value. In one embodiment the tagging engine encodes sets or otherwise establishes a value of the IP identification field . In another embodiment the tagging engine encodes sets or otherwise establishes a value of an ID header option. In some embodiments the tagging engine encodes an IPID value or an IP option value for a SYN packet and or for a SYN ACK packet as illustrated in .

Referring now to an embodiment of steps of a method are depicted for using an encoded IPID value s or IP option value s technique between a client and an appliance. In brief overview at step a client transmits a transport layer connection request to a server . The request traverses one or more appliances such as appliance and . At step a client agent intercepts the client s connection request packet which identifies an initial sequence number requested by the client. At step the client agent encodes or establishes a value for the IPID field or an IP option based on performing a predetermined operation of the initial sequence number ISN requested by the client such as ISN 5. The client agent forwards the transport layer connection request to the server . At step . an appliance intercepts the request packet having the encoded IPID field of IP option value. At step the appliance detects the presence capability or function of the client agent by determining the IPID or an IP option value has been encoded according to performing the predetermined operation on the ISN requested by the client and the predetermined factor.

In further overview at step the server may transmit an acknowledgement of the client s connection request to the client. At step the appliance intercepts the server s acknowledgment packet and identifies the initial sequence number ISN requested by the server. At step the appliance encodes or establishes a value for the IPID field or an IP option of the packet based on performing a predetermined operation on the ISN number requested by the server and a predetermined factor such as ISN multiplied by 5. The appliance forwards the acknowledgement packet to the client . At step the client agent intercepts or receives the packet having the encoded IPID field or IP option value. At step the client agent detects the presence capability or function of the appliance by determining the IPID or an IP option has been encoded by performing the predetermined operation using the ISN requested by the server and the predetermined factor. At step the appliance and or client agent monitors the success and or failures of transport layer connection requests between source and destination pairs and stores to a whitelist and or blacklist according to the success or failure of the connection.

In further details at step a client requests a transport layer connection with a server . In another embodiment the server requests a transport layer connection with the client . In some embodiments the transport layer connection request traverses a first appliance . In other embodiments the client agent intercepts the transport layer connection and forwards the request to the server via the appliance . In yet another embodiment the transport layer connection request traverses multiple appliances via a transport control protocol terminating device . In some embodiments the client agent tags a TCP connection request or SYN packet using TCP option s as described herein. In other embodiments the client agent tags a TCP connection response or SYN ACK packet using TCP option s as also described herein.

At step the client agent intercepts or otherwise receives the client s connection request. In one embodiment the client agent identifies or determines the initial sequence number ISN requested by the client for establishing the connection. In some embodiments the client agent identifies or determines the ISN of a SYN packet transmitted by the client . In yet other embodiments any portion of the client agent may intercepts and identify the ISN request by the client . For example the secure access proxy network filter and or network packet capture mechanism may intercept the connection request and identify the ISN requested by the client .

At step the client agent encodes or otherwise establishes a value for the IPID field or an IP option of the intercepted packet or request. In some embodiments the client agent encodes the IPID field by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. In other embodiments the client agent encodes an IP header option by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. The client agent may encode the IPID field or an IP option using any mathematical operation or algorithm based on the ISN and a predetermined factor. In one embodiment the client agent encodes the IPID field or IP option with the ISN requested by the client . In some embodiments the client agent determines the ISN is set to 0 or another predetermined value and instead of using the ISN requested by the client client agent sets the ISN for encoding the IPID field or IP option to a second predetermined value such as 1234.

At step the appliance intercepts the client s request having the encoded IPID value or IP option . In one embodiment the appliance intercepts a client s TCP connection request SYN packet forwarded by the client agent . In yet other embodiments the appliance may process the IPID field or IP option s of the SYN and or SYN ACK packets in accordance with the techniques and operations described herein. In some embodiments the appliance identifies the ISN requested by the client in the TCP portion of the packet. In still another embodiment the appliance may intercept and process these encoded IPID fields or IP option s .

At step the appliance detects a presence of the client agent by determining the IPID field or an IP option value has been encoded using a predetermined operation to provide an expected value based on the client s requested ISN. In some embodiments the appliance identifies tracks or stores the ISN of SYN and SYN ACK packets to compare with the ISN calculated from the IPID field or an IP option . For example the appliance may divide the value of the ISN number in the IPID field by the predetermined factor e.g. 5 to determine if the ISN numbers match. In one embodiment the appliance determines the IPID field or an IP option is encoded with an ISN requested by the client and a predetermined factor such as integer value 5. In some embodiments the appliance determines the IPID field or IP option has a hash or encryption of an ISN and a predetermined number. In yet other embodiments the appliance determines the IPID field or IP option is encoded with or set to a value expected or otherwise pre negotiated between the appliance and the client agent . The client agent and appliance may use the detection of the IPID field or IP option to announce presence capability or function of another appliance or device automatic WAN LAN port detection or to pass or exchange parameters between appliances and client agents.

In further details and still referring to at step a server transmits to the client an acknowledgement to the client s transport layer connection request. In some embodiments the acknowledgement packet for the transport layer connection request traverses one or more appliances. In other embodiments an appliance intercepts the acknowledgement packet and forwards the request to the client via the client agent . In yet another embodiment the transport layer connection acknowledgement traverses multiple appliances via a transport control protocol terminating device . In some embodiments the server or an appliance tags a TCP connection response or SYN ACK packet using TCP option s as also described herein.

At step the appliance intercepts or otherwise receives the server s acknowledgement to the transport layer connection request of the client . In one embodiment the appliance identifies or determines the initial sequence number ISN requested by the server in establishing or otherwise acknowledging the connection. In some embodiments the appliance also identifies or determines the ISN of a SYN packet transmitted by the client .

At step the appliance encodes or otherwise establishes a value for the IPID field or an IP option of the intercepted packet or acknowledgement. In some embodiments the appliance encodes the IPID field by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. In other embodiments the appliance encodes an IP header option by performing a predetermined operation on the ISN number such as multiplying the ISN number by a predetermined factor such as 5. As described above an appliance may encode the IPID field or an IP option using any mathematical operation or algorithm based on the ISN and a predetermined factor. In one embodiment the appliance encodes the IPID field or IP option with the ISN requested by the server via the acknowledgement. In some embodiments the appliance determines the ISN is set to 0 or another predetermined value and instead of using the ISN requested by the server the second appliance sets the ISN for encoding the IPID field or IP option to a second predetermined value such as 4567.

At step the client agent intercepts the server s acknowledgement having the encoded IPID value or IP option . In one embodiment the client agent intercepts a server s TCP connection response a SYN ACK packet forwarded by an appliance . In some embodiments the client agent identifies the ISN requested by the server in the TCP portion of the packet. In still another embodiment the appliance may intercept and process these encoded IPID fields or IP option s .

At step the client agent detects a presence of the appliance by determining the IPID field or an IP option value has been encoded using a predetermined operation to provide an expected value based on the server s requested ISN. In some embodiments the client agent identifies tracks or stores the ISN of SYN and SYN ACK packets to compare with the ISN calculated from the IPID field or an IP option . For example the client agent may divide the value of the ISN number in the IPID field by the predetermined factor e.g. 5 to determine if the ISN numbers match. In one embodiment the client agent determines the IPID field or an IP option is encoded with an ISN requested by the client and a predetermined factor such as integer value 5. In some embodiments the client agent determines the IPID field or IP option has a hash or encryption of an ISN and a predetermined number. In yet other embodiments the client agent determines the IPID field or IP option is encoded with or set to a value expected or otherwise pre negotiated between appliances . The client agent and appliance may use the detection of the IPID field or IP option to announce presence capability or function of another appliance or device automatic WAN LAN port detection or to pass or exchange parameters between appliances and agents.

At step the client agent and or tagging engine monitors the success retries and failures of transport layer connection requests between source and destination pairs such as clients and servers. In one embodiment a client agent or first tagging engine performs monitoring of the connection requests. In another embodiment a an appliance or second tagging engine performs monitoring of the connection requests. For example an appliance may monitor the SYN and SYN ACK packets between a client and a server. In response to monitoring the client agent stores source and destination pair information in the whitelist and or blacklist . In one embodiment upon either a successful TCP connection or detection of a TCP option IPID field or IP header option announcement the client agent places the source and destination pair on the whitelist removes the pairs from the blacklist or both. In another embodiment upon either a failed TCP connection too many retries or detection of a failed TCP or IP option or IPID based announcement the client agent places the source and destination pair on the blacklist removes the pairs from the whitelist or both.

In one embodiment the client agent places each source and destination pair in the whitelist by default before monitoring transport layer connection requests between the source and destination pair. That is in some embodiments the initial state of connection is associated with the whitelist . Accordingly the client agent may accelerate the connection of the source and destination pair. In another embodiment the client agent places each source and destination pair in the blacklist by default before monitoring transport layer connection requests between the source and destination pair. That is in some embodiments the initial state of connection is associated with the blacklist. The client agent may not accelerate the connection until a successful transport layer connection is established and the source and destination pair placed on the whitelist . In another embodiment the client agent places the source and destination pair on the blacklist until a successful announcement using the TCP or IP option or IPID values is detected by the appliance . In some embodiments the client agent uses or establishes only a whitelist and source and destination pairs are place or removed from the whitelist according to the success or failures of connection requests and or announcements with TCP options or IPID values.

In yet another embodiment the client agent may identify those source and destination pairs that may likely be accelerated or have effective acceleration. In these embodiments the client agent may store those source and destination pairs to the whitelist by default or otherwise. In some embodiments the client agent may identify those source and destination pairs that are unlikely to be accelerated or have ineffective acceleration. In these embodiments client agent may store those source and destination pairs to the blacklist by default or otherwise.

Although embodiments of method and are described using IPID or IP option values in connection with a transport layer connection request SYN packet and or a transport layer connection acknowledgement SYN ACK packet the systems and methods described herein may be used with any network packet. For example an appliance or client agent may announce or detect a presence function or capability by encoding TCP options IPID field an or IP options on any client s application layer request comprising one or more packets and or a server s application layer response comprising one or more packets.

Although embodiments of method and are described using IPID or IP option values for announcing a presence function or capability between devices or appliances the encoding and announcement techniques of and A B can be used in combination or conjunction with the TCP options techniques described with . In one embodiment the appliance or client agent may first use TCP options to announce presence functionality or capability to another appliance and if it does not work the appliance or client agent may then use the IPID value technique instead. In another embodiment an appliance or client agent may communicate with another appliance using both TCP options and IPID value techniques as described herein. The TCP option s may be used to announce presence of a first type of appliance function or capability and the IPID value s to announce presence of a second type of appliance function or capability. In yet another embodiment the appliance or client agent may use TCP option s to communicate a first set or type of parameters and IPID value s to communicate a second or type of parameters.

Moreover although generally described for detecting a presence or capability of an appliance in a network path the IPID value s or IP option values may be used for or considered to be a sub channel virtual channel or low bandwidth sub carrier of communications that is transparent to intervening network equipments.

In yet another example the encoding techniques described herein may be used for forward loop prevention in case of in line deployments of appliances where the same packet crosses the same appliance more than once. In one embodiment of a network topology an appliance may be deployed between two routers e.g. routers r and r or other network devices. In this topology the routers and appliances may route network packets as follows r1 appliance 200 r2 appliance 200 r1 In this example network topology the packets may be reflected by router r back to router r via appliance . With the encoding techniques herein an appliance may detect a given packet was already processed by the appliance . The appliance may then pass or forward the packet through without modification. For example in the case the packet was already processed by the appliance for acceleration or any other function or operation described herein the techniques are user to prevent the appliance from processing the same packet more than once.

In one embodiment the appliance tags or marks packets with a TCP option such as a proprietary TCP option set to a unique identifier for the appliance . In some cases the appliance tags those packets that belong to transport layer connections that are being accelerated by the appliance or otherwise are not excluded from acceleration. The appliance may decode this TCP option on packets transmitted via the appliance a second time to compare the encoded appliance identifier in the TCP option with the appliance identifier. In this manner the appliance may determine whether or not the packet has been already processed by the appliance.

In one embodiment an IP address of the appliance is used as unique identifier ID . The appliance 200 may encode the TCP option with this ID. In another embodiment a group identifier for one or more groups of appliances or group mode ID is encoded in the TCP option. In the embodiment of group mode the appliance compares the TCP option against all IDs of appliance in the identified group in order to determine if the packet has already been processed by any appliance of the group. In the example above forwarding loop prevention may work as follows 1 2 1

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

