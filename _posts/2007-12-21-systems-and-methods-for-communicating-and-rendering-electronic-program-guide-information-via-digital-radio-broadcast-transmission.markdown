---

title: Systems and methods for communicating and rendering electronic program guide information via digital radio broadcast transmission
abstract: Methods and systems for preparing data for broadcast via digital radio broadcast transmission is disclosed comprising the steps of receiving a plurality of content files corresponding to programming information for program content to be broadcast; receiving an index file having a pointer for each of the plurality of content files, wherein the index file is associated with a first logical address; storing the index file and the plurality of content files; scheduling a broadcast rotation of the index file and the plurality of content files (wherein the index file is scheduled for repeated transmission intermittently relative to selected ones of the content files); and transmitting the index file and the plurality of content files to an importer in accordance with the broadcast rotation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08983365&OS=08983365&RS=08983365
owner: iBiquity Digital Corporation
number: 08983365
owner_city: Columbia
owner_country: US
publication_date: 20071221
---
The present disclosure relates to digital radio broadcast transmission and reception and in particular to methods and systems for transmitting and rendering electronic program guide information for digital radio broadcast.

Digital radio broadcasting technology delivers digital audio and data services to mobile portable and fixed receivers. One type of digital radio broadcasting referred to as in band on channel IBOC digital audio broadcasting DAB uses terrestrial transmitters in the existing Medium Frequency MF and Very High Frequency VHF radio bands. HD Radio technology developed by iBiquity Digital Corporation is one example of an IBOC implementation for digital radio broadcasting and reception.

IBOC DAB signals can be transmitted in a hybrid format including an analog modulated carrier in combination with a plurality of digitally modulated carriers or in an all digital format wherein the analog modulated carrier is not used. Using the hybrid mode broadcasters may continue to transmit analog AM and FM simultaneously with higher quality and more robust digital signals allowing themselves and their listeners to convert from analog to digital radio while maintaining their current frequency allocations.

One feature of digital transmission systems is the inherent ability to simultaneously transmit both digitized audio and data. Thus the technology also allows for wireless data services from AM and FM radio stations. The broadcast signals can include metadata such as the artist song title or station call letters. Special messages about events traffic and weather can also be included. For example traffic information weather forecasts news and sports scores can all be scrolled across a radio receiver s display while the user listens to a radio station.

IBOC DAB technology can provide digital quality audio superior to existing analog broadcasting formats. Because each IBOC DAB signal is transmitted within the spectral mask of an existing AM or FM channel allocation it requires no new spectral allocations. IBOC DAB promotes economy of spectrum while enabling broadcasters to supply digital quality audio to the present base of listeners.

Multicasting the ability to deliver several audio programs or streams over one channel in the AM or FM spectrum enables stations to broadcast multiple streams on separate supplemental or sub channels of the main frequency. For example multiple streams of data can include alternative music formats local traffic weather news and sports. The supplemental channels can be accessed in the same manner as the traditional station frequency using tuning or seeking functions. For example if the analog modulated signal is centered at 94.1 MHz the same broadcast in IBOC DAB can include supplemental channels 94.1 1 94.1 2 and 94.1 3. Highly specialized programming on supplemental channels can be delivered to tightly targeted audiences creating more opportunities for advertisers to integrate their brand with program content. As used herein multicasting includes the transmission of one or more programs in a single digital radio broadcasting channel or on a single digital radio broadcasting signal. Multicast content can include a main program service MPS supplemental program services SPS program service data PSD and or other broadcast data.

The National Radio Systems Committee a standard setting organization sponsored by the National Association of Broadcasters and the Consumer Electronics Association adopted an IBOC standard designated NRSC 5A in September 2005. NRSC 5A the disclosure of which is incorporated herein by reference sets forth the requirements for broadcasting digital audio and ancillary data over AM and FM broadcast channels. The standard and its reference documents contain detailed explanations of the RF transmission subsystem and the transport and service multiplex subsystems. Copies of the standard can be obtained from the NRSC at http www.nrscstandards.org standards.asp. iBiquity s HD Radio technology is an implementation of the NRSC 5A IBOC standard. Further information regarding HD Radio technology can be found at www.hdradio.com and www.ibiquity.com.

Other types of digital radio broadcasting systems include satellite systems such as Satellite Digital Audio Radio Service SDARS e.g. XM Radio Sirius Digital Audio Radio Service DARS e.g. WorldSpace and terrestrial systems such as Digital Radio Mondiale DRM Eureka 147 branded as DAB Digital Audio Broadcasting DAB Version 2 and FMeXtra . As used herein the phrase digital radio broadcasting encompasses digital audio broadcasting including in band on channel broadcasting as well as other digital terrestrial broadcasting and satellite broadcasting.

Digital radio broadcasting systems are providing digital radio in numerous markets throughout the United States. These digital radio transmissions include a wide variety of content such as music news sports and talk shows. The present inventors have observed a need for systems and methods to facilitate intelligently browsing through the myriad of available content that can be received at a digital radio broadcast receiver. The present inventors have also observed a need for digital radio receiver features that provide users an easy way to select and receive the desired content. The present inventors have also observed a need for methods and systems for suitably structuring electronic program guide information to facilitate its transmission and reception via digital radio broadcasting.

Embodiments of the present disclosure are directed to systems and methods that may satisfy these needs. According to exemplary embodiments a method of preparing data for broadcast via digital radio broadcast transmission is disclosed. The method comprises receiving programming information from a content provider storing the programming information generating at least one content file corresponding to the programming information generating an index file having information identifying the at least one content file wherein the index file is associated with a first logical address scheduling the index file and the at least one content file for broadcast via digital radio broadcast transmission and communicating the index file and the at least one content file for broadcast via digital radio broadcast transmission. A system comprising a processing system and a memory coupled to the processing system are described wherein the processing system is configured to carry out the above described method. Computer programming instructions adapted to cause a processing system to carry out the above described method may be embodied within any suitable computer readable medium.

According to exemplary embodiments a method of preparing data for broadcast via digital radio broadcast transmission is disclosed. The method comprises receiving an index file having information identifying at least one content file wherein the index file is associated with a first logical address receiving the at least one content file corresponding to programming information for program content to be broadcast storing the index file and the at least one content file and transmitting the index file and at least one content file to an importer in accordance with a broadcast rotation wherein the index file is scheduled for repeated transmission intermittently relative to selected ones of the content files. A system comprising a processing system and a memory coupled to the processing system are described wherein the processing system is configured to carry out the above described method. Computer programming instructions adapted to cause a processing system to carry out the above described method may be embodied within any suitable computer readable medium.

According to exemplary embodiments a method of generating an electronic program guide for a digital radio broadcast transmission is disclosed. The method comprises receiving an index file the received index file having information identifying at least one content file storing the received index file receiving the at least one content file wherein the at least one received content file includes data for displaying programming information storing the at least one received content file and displaying the programming information based upon the data from the at least one received content file to a user as an electronic program guide such that the user can view the programming information. A system comprising a processing system and a memory coupled to the processing system are described wherein the processing system is configured to carry out the above described method. Computer programming instructions adapted to cause a processing system to carry out the above described method may be embodied within any suitable computer readable medium.

An electronic program guide EPG as described herein can permit users to browse and select from program listings and services including available data services that are displayed on a user interface of a digital radio broadcast receiver. An EPG can enable a user to view and choose from amongst various programs in the user s current digital radio broadcast market. Additionally an EPG can enable users to conditionally trigger other services within and outside the radio receiver such as content recording.

IBOC digital radio content is generated by a variety of entities including local station programmers network programmers e.g. news sports concerts and third party program syndicators and data service providers. A service bureau SB is an entity that processes and builds EPGs for digital radio broadcasting e.g. IBOC broadcasting . To perform this function the SB aggregates EPG data from the various sources e.g. networks syndication providers special event and content providers and maintains the data for participating stations clusters and markets. EPG data also referred to herein as programming information or EPG content includes information that describes the content including audio programs and station data services available on a radio station such as program names data service names descriptions start times durations etc. In addition to aggregating EPG data the SB can also establish contractual relationships with stations networks of stations or other content providers to provide EPG services. Radio stations that participate in the EPG will typically be the main point of transmission for the EPG data over the air.

Referring to the drawings is a functional block diagram of the relevant aspects of a service bureau SB block studio site an FM transmitter site and a studio transmitter link STL that can be used to broadcast an FM IBOC DAB signal to IBOC radio capable receivers. The SB block includes a Service Bureau User Interface SBUI a Service Bureau Database SBDB and a Service Bureau Manager SBM which represent hardware and or software components under the control of the SB. The studio site includes among other things an EPG Client studio automation equipment an importer an exporter an exciter auxiliary service unit EASU and an STL transmitter . The transmitter site includes an STL receiver a digital exciter that includes an exciter engine exgine subsystem and an analog exciter . While in the exporter is resident at a radio station s studio site and the exciter is located at the transmission site these elements may be co located at the transmission site. Additionally while in the SB block is shown as separate from the studio site one or more of the SB components could be co located at the studio site or hosted by a third party.

The SB block collects and processes EPG data from stations content providers and or markets networks. In certain embodiments the SB block may collect and process EPG data from an individual radio station. Additionally in certain embodiments the SB block may collect and process EPG data from a cluster of radio stations which may be a grouping of stations within a market or markets organized to maintain efficient radio bandwidth usage. Therefore in some embodiments the SB block can group radio stations into clusters based on the bandwidth requirements for the constituent radio stations EPGs. For example if a cluster EPG service provided 1.5 kbps of bandwidth for EPG data then three radio stations each requiring 500 bps for their EPGs could be grouped together. This grouping could be performed dynamically or could be predetermined by the SB operator. Alternatively a cluster may be a group of stations that are owned or operated by a single broadcasting entity. Thus in some embodiments the radio stations are grouped into clusters based on ownership. In certain embodiments the SB block may collect and process EPG data from a market which may be a grouping of stations based on geographic boundaries e.g. the Philadelphia market . This partitioning of stations into markets advantageously solves the problem of presenting a meaningful EPG even though several AM or FM stations are assigned to the same carrier frequency. For example both Station 1 in Lancaster Pa. and Station 2 in Trenton N.J. are assigned to 94.5 MHZ. If a user selects the Lancaster Pa. market the receiver could show Station 1 on 94.5 MHz but if the user selects the Trenton N.J. market receiver could show Station 2 on 94.5 MHz. In certain embodiments the SB block may collect and process data from any suitable combination of individual radio stations clusters and markets. Advantageously by collecting EPG data from multiple sources the SB may be able to transmit programming information regarding stations that broadcast only in legacy analog waveform and otherwise have no digital or other means of conveying their program schedule.

Within the SB block the SBM is a software application that performs several functions and that may execute on either a standalone computer processor the same computer processor as the SBUI the same computer processor as the SBDB any other suitable processor or any suitable combination thereof. The SBM aggregates EPG data generates and manages EPG files prioritizes EPG files for bandwidth management schedules EPG files for transmission and interfaces with the EPG Client via an interface . In some embodiments the SBM may also validate the file formatting of EPG files and or group EPG files into clusters. The SBUI is a software application that allows creation and modification of EPG files by the SB operators and or third party providers of service and content. The SBUI executes on a processing system e.g. one or more computer processors and interfaces with the SBM via an interface that may be for example a socket connection or an application programming interface API . The SBDB includes the hardware and software for storing EPG files in a database structure and for responding to queries from the SBM . The SBM interfaces with the SBDB via an interface that may be for example a socket connection or an API.

At the studio site the EPG Client is a software application that performs the functions of receiving EPG files from the SBM segmenting EPG files into packets populating an internal storage with the EPG packets and transmitting the EPG packets to the importer according to a bandwidth management algorithm via an interface . In some embodiments the EPG Client may also validate the correctness of the EPG files. The interface may be a socket connection and or an API. The EPG Client may execute on processing system e.g. one or more computer processors the same computer processor that implements the importer or any other suitable processing system or combination thereof. Additionally while the EPG Client is shown in as resident at the studio site it could also be co located with the SB block . In this configuration the EPG Client could execute on the same computer processor as the SBUI the same computer processor as the SBDB any other suitable processing system or any suitable combination thereof.

The studio automation equipment supplies main program service MPS audio to the EASU MPS data MPSD to the exporter supplemental program service SPS audio to the importer and SPS data SPSD to the importer. MPS audio serves as the main audio programming source. In hybrid modes it preserves the existing analog radio programming formats in both the analog and digital transmissions. MPSD also known as program service data PSD includes information such as music title artist album name etc. Supplemental program service can include supplementary audio content as well as PSD.

Second Generation Data Services known as Advanced Applications Services AAS include the ability to deliver many data services or streams and application specific content over one channel in the AM or FM spectrum and enable stations to broadcast multiple streams on supplemental or sub channels of the main frequency. A service in this context may be defined as content that is delivered to users via digital radio broadcasting. AAS contains the HD Radio data payload and shares channel bandwidth with multicasting services to provide broadcast data services. Both streaming and file based data services are supported along with the ability to perform Large Object Transport LOT as described below. AAS can include any type of data that is not classified as MPS SPS or Station Information Service SIS . For example AAS includes a Service Information Guide SIG which provides detailed station service information and includes services besides multicast audio programming including the EPG a data service navigation maps traffic information multimedia applications and other data content.

The importer contains hardware and software for supplying AAS. Services are identified in the SIG by their MIME hash and their logical address described below in the AAS. The EPG content for AAS can be supplied by the EPG Client and service providers which provide service data to the importer via an API. The service providers may be a broadcaster located at the studio site or externally sourced third party providers of services and content. The importer can establish session connections between multiple service providers. The importer encodes and multiplexes service data SPS audio and SPS data to produce exporter link data which is output to the exporter via a data link . Station Information Service SIS is also provided which comprises station information such as call sign absolute time position correlated to GPS data describing the services available on the station e.g. a subset of the MIME hash transmitted in the SIG such as the least significant 12 bits etc.

The importer can use a data transport mechanism which may be referred to herein as a radio link subsystem RLS to provide packet encapsulation varying levels of quality of service e.g. varying degrees of forward error correction and interleaving and bandwidth management functions. The RLS can utilize High Level Data Link Control HDLC for encapsulating the packets. HDLC is known to one of skill in the art and is described in ISO IEC 13239 2002 Information technology Telecommunications and information exchange between systems High level data link control HDLC procedures. HDLC framing includes a beginning frame delimiter e.g. 0x7E a logical address e.g. port number a control field for sequence numbers and other information e.g. packet 1 of 2 2 of 2 etc. the payload e.g. the index file a checksum e.g. a CRC and an ending frame delimiter e.g. 0x7E . For bandwidth management the importer typically assigns logical addresses e.g. ports to AAS data based on for example the number and type of services being configured at any given studio site . RLS is described in more detail in U.S. Pat. No. 7 305 043 which is incorporated herein by reference in its entirety.

Due to receiver implementation choices RLS packets can be limited in size to about 8192 bytes but other sizes could be used. Therefore data may be prepared for transmission according to two primary data segmentation modes packet mode and byte streaming mode for transmitting objects larger than the maximum packet size. In packet mode the importer may include a large object transfer LOT client e.g. a software client that executes on the same computer processing system as the importer to segment a large object for example a sizeable EPG file into fragments no larger than the chosen RLS packet size. In typical embodiments objects may range in size up to 4 294 967 295 bytes. At the transmitter the LOT client writes packets to an RLS port for broadcast to the receiver. At the receiver the LOT client reads packets from the RLS port of the same number. The LOT client may process data associated with many RLS ports e.g. typically up to 32 ports simultaneously both at the receiver and the transmitter.

The LOT client operates by sending a large object in several messages each of which is no longer than the maximum packet size. To accomplish this the transmitter assigns an integer called a LotID to each object broadcast via the LOT protocol. All messages for the same object will use the same LotID. The choice of LotID is arbitrary except that no two objects being broadcast concurrently on the same RLS port may have the same LotID. In some implementations it may be advantageous to exhaust all possible LotID values before a value is reused.

When transmitting data over the air there may be some packet loss due to the probabilistic nature of the radio propagation environment. The LOT client addresses this issue by allowing the transmitter to repeat the transmission of an entire object. Once an object has been received correctly the receiver can ignore any remaining repetitions. All repetitions will use the same LotID. Additionally the transmitter may interleave messages for different objects on the same RLS port so long as each object on the port has been assigned a unique LotID.

The LOT client divides a large object into messages which are further subdivided into fragments. Preferably all the fragments in a message excepting the last fragment are a fixed length such as 256 bytes. The last fragment may be any length that is less than the fixed length e.g. less than 256 bytes . Fragments are numbered consecutively starting from zero. However in some embodiments an object may have a zero length object the messages would contain only descriptive information about the object.

The LOT client typically uses two types of messages a full header message and a fragment header message. Each message includes a header followed by fragments of the object. The full header message contains the information to reassemble the object from the fragments plus descriptive information about the object. By comparison the fragment header message contains only the reassembly information. The LOT client of the receiver e.g. a software and or hardware application that typically executes within the data processors and of respectively or any other suitable processing system distinguishes between the two types of messages by a header length field e.g. field name hdrLen . Each message can contain any suitable number of fragments of the object identified by the LotID in the header as long as the maximum RLS packet length is not exceeded. There is no requirement that all messages for an object contain the same number of fragments. Table 1 below illustrates exemplary field names and their corresponding descriptions for a full header message. Fragment header messages typically include only the hdrLen repeat LotID and position fields.

Full header and fragment header messages may be sent in any ratio provided that at least one full header message is broadcast for each object. Bandwidth efficiency will typically be increased by minimizing the number of full header messages however this may increase the time necessary for the receiver to determine whether an object is of interest based on the descriptive information that is only present in the full header. Therefore there is typically a trade between efficient use of broadcast bandwidth and efficient receiver processing and reception of desired LOT files.

In byte streaming mode as in packet mode each data service is allocated a specific bandwidth by the radio station operators. The importer then receives data messages of arbitrary size from the data services. The data bytes received from each service are then placed in a byte bucket e.g. a queue and HDLC frames are constructed based on the bandwidth allocated to each service. For example each service may have its own HDLC frame that will be just the right size to fit into a modem frame. For example assume that there are two data services service 1 and service 2. Service 1 has been allocated 1024 bytes and service 2 512 bytes. Now assume that service 1 sends message A having 2048 bytes and service 2 sends message B also having 2048 bytes. Thus the first modem frame will contain two HDLC frames a 1024 byte frame containing N bytes of message A and a 512 byte HDLC frame containing M bytes of message B. N M are determined by how many HDLC escape characters are needed. If no escape characters are needed then N 1024 and M 512. If the messages contains nothing but HDLC framing bytes i.e. 0x7E then N 512 and M 256. Also if data service 1 does not send a new message call it message AA then its unused bandwidth may be given to service 2 so its HDLC frame will be larger than its allocated bandwidth of 512 bytes.

The exporter contains the hardware and software necessary to supply the MPS and SIS for broadcasting. The exporter accepts digital MPS audio over an audio interface and compresses the audio. The exporter also multiplexes MPS data exporter link data and the compressed digital MPS audio to produce exciter link data . In addition the exporter accepts analog MPS audio over its audio interface and applies a pre programmed delay to it to produce a delayed analog MPS audio signal . This analog audio can be broadcast as a backup channel for hybrid IBOC DAB broadcasts. The delay compensates for the system delay of the digital MPS audio allowing receivers to blend between the digital and analog program without a shift in time. In an AM transmission system the delayed MPS audio signal is converted by the exporter to a mono signal and sent directly to the STL as part of the exciter link data .

The EASU accepts MPS audio from the studio automation equipment rate converts it to the proper system clock and outputs two copies of the signal one digital and one analog . The EASU includes a GPS receiver that is connected to an antenna . The GPS receiver allows the EASU to derive a master clock signal which is synchronized to the exciter s clock by use of GPS units. The EASU provides the master system clock used by the exporter. The EASU is also used to bypass or redirect the analog MPS audio from being passed through the exporter in the event the exporter has a catastrophic fault and is no longer operational. The bypassed audio can be fed directly into the STL transmitter eliminating a dead air event.

STL transmitter receives delayed analog MPS audio and exciter link data . It outputs exciter link data and delayed analog MPS audio over STL link which may be either unidirectional or bi directional. The STL link may be a digital microwave or Ethernet link for example and may use the standard User Datagram Protocol UDP IP or the standard TCP IP.

The transmitter site includes an STL receiver an exciter and an analog exciter . The STL receiver receives exciter link data including audio and data signals as well as command and control messages over the STL link . The exciter link data is passed to the exciter which produces the IBOC DAB waveform. The exciter includes a host processor digital up converter RF up converter and exgine subsystem . The exgine accepts exciter link data and modulates the digital portion of the IBOC DAB waveform. The digital up converter of exciter converts from digital to analog the baseband portion of the exgine output. The digital to analog conversion is based on a GPS clock common to that of the exporter s GPS based clock derived from the EASU. Thus the exciter includes a GPS unit and antenna . An alternative method for synchronizing the exporter and exciter clocks can be found in U.S. patent application Ser. No. 11 081 267 Publication No. 2006 0209941 A1 the disclosure of which is hereby incorporated by reference. The RF up converter of the exciter up converts the analog signal to the proper in band channel frequency. The up converted signal is then passed to the high power amplifier and antenna for broadcast. In an AM transmission system the exgine subsystem coherently adds the backup analog MPS audio to the digital waveform in the hybrid mode thus the AM transmission system does not include the analog exciter . In addition the exciter produces phase and magnitude information and the analog signal is output directly to the high power amplifier.

IBOC DAB signals can be transmitted in both AM and FM radio bands using a variety of waveforms. The waveforms include an FM hybrid IBOC DAB waveform an FM all digital IBOC DAB waveform an AM hybrid IBOC DAB waveform and an AM all digital IBOC DAB waveform.

The hybrid waveform includes an analog FM modulated signal plus digitally modulated primary main subcarriers. The subcarriers are located at evenly spaced frequency locations. The subcarrier locations are numbered from 546 to 546. In the waveform of the subcarriers are at locations 356 to 546 and 356 to 546. Each primary main sideband is comprised of ten frequency partitions. Subcarriers 546 and 546 also included in the primary main sidebands are additional reference subcarriers. The amplitude of each subcarrier can be scaled by an amplitude scale factor.

The upper primary extended sidebands include subcarriers 337 through 355 one frequency partition 318 through 355 two frequency partitions or 280 through 355 four frequency partitions . The lower primary extended sidebands include subcarriers 337 through 355 one frequency partition 318 through 355 two frequency partitions or 280 through 355 four frequency partitions . The amplitude of each subcarrier can be scaled by an amplitude scale factor.

In addition to the ten main frequency partitions all four extended frequency partitions are present in each primary sideband of the all digital waveform. Each secondary sideband also has ten secondary main SM and four secondary extended SX frequency partitions. Unlike the primary sidebands however the secondary main frequency partitions are mapped nearer to the channel center with the extended frequency partitions farther from the center.

Each secondary sideband also supports a small secondary protected SP region including 12 OFDM subcarriers and reference subcarriers 279 and 279. The sidebands are referred to as protected because they are located in the area of spectrum least likely to be affected by analog or digital interference. An additional reference subcarrier is placed at the center of the channel 0 . Frequency partition ordering of the SP region does not apply since the SP region does not contain frequency partitions.

Each secondary main sideband spans subcarriers 1 through 190 or 1 through 190. The upper secondary extended sideband includes subcarriers 191 through 266 and the upper secondary protected sideband includes subcarriers 267 through 278 plus additional reference subcarrier 279. The lower secondary extended sideband includes subcarriers 191 through 266 and the lower secondary protected sideband includes subcarriers 267 through 278 plus additional reference subcarrier 279. The total frequency span of the entire all digital spectrum is 396 803 Hz. The amplitude of each subcarrier can be scaled by an amplitude scale factor. The secondary sideband amplitude scale factors can be user selectable. Any one of the four may be selected for application to the secondary sidebands.

In each of the waveforms the digital signal is modulated using orthogonal frequency division multiplexing OFDM . OFDM is a parallel modulation scheme in which the data stream modulates a large number of orthogonal subcarriers which are transmitted simultaneously. OFDM is inherently flexible readily allowing the mapping of logical channels to different groups of subcarriers.

In the hybrid waveform the digital signal is transmitted in primary main PM sidebands on either side of the analog FM signal in the hybrid waveform. The power level of each sideband is appreciably below the total power in the analog FM signal. The analog signal may be monophonic or stereo and may include subsidiary communications authorization SCA channels.

In the extended hybrid waveform the bandwidth of the hybrid sidebands can be extended toward the analog FM signal to increase digital capacity. This additional spectrum allocated to the inner edge of each primary main sideband is termed the primary extended PX sideband.

In the all digital waveform the analog signal is removed and the bandwidth of the primary digital sidebands is fully extended as in the extended hybrid waveform. In addition this waveform allows lower power digital secondary sidebands to be transmitted in the spectrum vacated by the analog FM signal.

The AM hybrid IBOC DAB signal format in one example comprises the analog modulated carrier signal plus OFDM subcarrier locations spanning the upper and lower bands. Coded digital information representative of the audio or data signals to be transmitted program material is transmitted on the subcarriers. The symbol rate is less than the subcarrier spacing due to a guard time between symbols.

As shown in the upper band is divided into a primary section a secondary section and a tertiary section . The lower band is divided into a primary section a secondary section and a tertiary section . For the purpose of this explanation the tertiary sections and can be considered to include a plurality of groups of subcarriers labeled and in . Subcarriers within the tertiary sections that are positioned near the center of the channel are referred to as inner subcarriers and subcarriers within the tertiary sections that are positioned farther from the center of the channel are referred to as outer subcarriers. In this example the power level of the inner subcarriers in groups and is shown to decrease linearly with frequency spacing from the center frequency. The remaining groups of subcarriers and in the tertiary sections have substantially constant power levels. also shows two reference subcarriers and for system control whose levels are fixed at a value that is different from the other sidebands.

The power of subcarriers in the digital sidebands is significantly below the total power in the analog AM signal. The level of each OFDM subcarrier within a given primary or secondary section is fixed at a constant value. Primary or secondary sections may be scaled relative to each other. In addition status and control information is transmitted on reference subcarriers located on either side of the main carrier. A separate logical channel such as an IBOC Data Service IDS channel can be transmitted in individual subcarriers just above and below the frequency edges of the upper and lower secondary sidebands. The power level of each primary OFDM subcarrier is fixed relative to the unmodulated main analog carrier. However the power level of the secondary subcarriers logical channel subcarriers and tertiary subcarriers is adjustable.

Using the modulation format of the analog modulated carrier and the digitally modulated subcarriers are transmitted within the channel mask specified for standard AM broadcasting in the United States. The hybrid system uses the analog AM signal for tuning and backup.

The host controller receives and processes the data signals e.g. the SIS MPSD SPSD and AAS signals from the signal processing block . The host controller comprises a microcontroller that is coupled to the DCU and memory module . Any suitable microcontroller could be used such as an Atmel AVR 8 bit reduced instruction set computer RISC microcontroller an advanced RISC machine ARM 32 bit microcontroller or any other suitable microcontroller. The DCU comprises any suitable I O processor that controls the display which may be any suitable visual display such as an LCD or LED display. In certain embodiments the DCU may also control user input components via a keyboard touch screen display dials knobs or other suitable inputs. The memory module may include any suitable data storage medium such as RAM Flash ROM e.g. an SD memory card and or a hard disk drive.

The host controller receives and processes the data signals e.g. SIS MPS data SPS data and AAS from the signal processing block . The host controller comprises a microcontroller that is coupled to the DCU and memory module . Any suitable microcontroller could be used such as an Atmel AVR 8 bit RISC microcontroller an advanced RISC machine ARM 32 bit microcontroller or any other suitable microcontroller. The DCU comprises any suitable I O processor that controls the display which may be any suitable visual display such as an LCD or LED display. In certain embodiments the DCU may also control user input components via a keyboard touch screen display dials knobs or other suitable inputs. The memory module may include any suitable data storage medium such as RAM Flash ROM e.g. an SD memory card and or a hard disk drive.

In practice many of the signal processing functions shown in the receivers of can be implemented using one or more integrated circuits. For example while in the signal processing block host controller DCU and memory module are shown as separate components the functions of two or more of these components could be combined in a single processor e.g. a System on a Chip SoC .

As shown in and there is a configuration administrator which is a system function that supplies configuration and control information to the various entities within the protocol stack. The configuration control information can include user defined settings as well as information generated from within the system such as GPS time and position. The service interfaces represent the interfaces for all services. The service interface may be different for each of the various types of services. For example for MPS audio and SPS audio the service interface may be an audio card. For MPS data and SPS data the interfaces may be in the form of different APIs. For all other data services the interface is in the form of a single API. An audio codec encodes both MPS audio and SPS audio to produce core Stream 0 and optional enhancement Stream 1 streams of MPS and SPS audio encoded packets which are passed to audio transport . Audio codec also relays unused capacity status to other parts of the system thus allowing the inclusion of opportunistic data. MPS and SPS data is processed by PSD transport to produce MPS and SPS data PDUs which are passed to audio transport . Audio transport receives encoded audio packets and PSD PDUs and outputs bit streams containing both compressed audio and program service data. The SIS transport receives SIS data from the configuration administrator and generates SIS PDUs. A SIS PDU can contain station identification and location information indications regarding provided audio and data services as well as absolute time and position correlated to GPS. The AAS data transport receives AAS data from the service interface as well as opportunistic bandwidth data from the audio transport and generates AAS data PDUs which can be based on quality of service parameters. The transport and encoding functions are collectively referred to as Layer 4 of the protocol stack and the corresponding transport PDUs are referred to as Layer 4 PDUs or L4 PDUs. Layer 2 which is the channel multiplex layer receives transport PDUs from the SIS transport AAS data transport and audio transport and formats them into Layer 2 PDUs. A Layer 2 PDU includes protocol control information and a payload which can be audio data or a combination of audio and data. Layer 2 PDUs are routed through the correct logical channels to Layer 1 wherein a logical channel is a signal path that conducts L1 PDUs through Layer 1 with a specified grade of service. There are multiple Layer 1 logical channels based on service mode wherein a service mode is a specific configuration of operating parameters specifying throughput performance level and selected logical channels. The number of active Layer 1 logical channels and the characteristics defining them vary for each service mode. Status information is also passed between Layer 2 and Layer 1. Layer 1 converts the PDUs from Layer 2 and system control information into an AM or FM IBOC DAB waveform for transmission. Layer 1 processing can include scrambling channel encoding interleaving OFDM subcarrier mapping and OFDM signal generation. The output of OFDM signal generation is a complex baseband time domain pulse representing the digital portion of an IBOC signal for a particular symbol. Discrete symbols are concatenated to form a continuous time domain waveform which is modulated to create an IBOC waveform for transmission.

According to an exemplary embodiment the Service Bureaus can generate two primary types of EPG files index files and content files. The EPG index and content files typically have a file name that includes one or more of the following the SB identifier the file type e.g. Index File or Content File a market identifier a cluster identifier a date and a version number. The file names may follow a naming convention that specifies byte lengths and proper entries for each component. For example illustrates a naming convention having six characters for the SB identifier two characters for the file type three numerals for the market e.g. 001 could identify New York N.Y. two characters for the cluster eight characters for the date and two characters for the version number. Any other suitable naming convention could be used. Advantageously following such a naming convention may allow the file names to facilitate selection of index and content files at the receiver to be decoded and processed.

Index files typically contain information identifying the content files that are associated with the markets clusters and radio stations served by a SB. This identifying information could be for example a list of the content file names or binary encoded data that can be used to generate the content file names. Index files are typically constructed using a high level language such as XML. However in some embodiments the index files and content files could be constructed using any other suitable file type. For example the index and content files could be formulated as Comma Separated Values CSV files. Additionally in embodiments directed to radio station clusters or markets the index file may indicate the number of stations for any respective cluster and Station Identifications e.g. FCC Identifiers . Advantageously by including clusters of other stations in the EPG a receiver may be able to receive programming information regarding stations from which it cannot currently receive broadcast signals.

Index files are typically broadcast over an RLS port assigned by the importer and communicated in the SIG as described below. In certain embodiments the importer may assign a block of RLS ports for EPG files in which cases the entries in the index file also may indicate an RLS port number on which each content file is being transmitted. In these embodiments each RLS port number may be associated with a particular date. For example the index file could be broadcast over RLS port number 1 the content file for the current date could then be broadcast over RLS port number 2 and the content file for the next date over RLS port number 3. Any suitable number of RLS ports and content files could be used. For example for 7 days of content files 8 RLS ports could be assigned or for 14 days of content files 15 RLS ports could be assigned. As the date rolls over the RLS ports associated with content files would be updated as described in more detail below. and illustrate an exemplary Index File that contains five clusters of radio stations. As shown in cluster contains radio stations on 95.7 FM 1480 AM and 105.3 FM. As illustrated in cluster corresponds to the first entry in the index file and has an exemplary file name of EPGSB103006011210200501 e.g. where the 006 refers to Philadelphia in this example . It is being broadcast on RLS port number 2 which is associated with Day 1 i.e. the current date .

In some embodiments the index files and content files may be structured in an XML hierarchy. An exemplary XML index file is illustrated in and . shows which show an index file for one market identified as the New York market shown as marketID 001 having two clusters shown as clusterID numbers 1 and 2 and six stations four in cluster 1 shown as stationID numbers 00405611 0040715e 0040cd79 and 00411e8b and two in cluster 2 shown as stationID numbers 0040dcfb and 0040ea31 . The index file contains a list of the content file names associated with portID numbers 1 2 3 and 6 wherein portID number 1 is associated with static service files portID number 2 is associated with Jan. 1 2006 portID number 3 is associated with Jan. 2 2006 and portID number 6 is associated with Jan. 5 2006. An exemplary XML hierarchy for an index file is illustrated in . Each XML file may include a single top level element e.g. epgIndex for index files epg for schedule files and linked content files described below or serviceInformation for service files described below . Each top level element can include one or more elements and one or more attributes. Referring to and the epgIndex top level element includes a stationListing element that describes the markets and clusters associated with the index file a fileListing element that describes the content files associated with the index file and an originator attribute. Each element can further include one or more child elements and one or more attributes wherein the child elements can also have one or more attributes. For example in and the stationListing element includes a market child element that describes the markets associated with the index file and serviceBureau version marketFormat and stationIDFormat attributes. Furthermore the child elements can be nested to any desired level. Referring again to and the market child element includes cluster child elements.

Index files and content files may be binary encoded and or compressed prior to transmission for efficient bandwidth capacity management. In certain aspects a suitable binary encoding scheme could be for example Tag Length Value TLV encoding. For example Digital Audio Broadcasting DAB Transportation and Binary Encoding Specification for DAB Electronic Programme Guide EPG ETSI TS 102 371 v.1.1.1 2005 01 incorporated herein in its entirety by reference discloses a typical TLV binary encoding scheme. In the disclosed scheme each element or attribute of an XML file is encoded using a unique tag value a length value indicating the length of the data contained within this element or attribute and the actual data value or values. The XML elements are encoded into binary data structures that generally preserve the hierarchical nature of the XML schema. The binary structure includes a basic binary object that may include a top level element having elements and attributes that may be encoded according to the following pseudo code algorithm.

In this exemplary algorithm the tag uniquely identifies the element within the index file or uniquely identifies the attribute within the parent element. The length indicates the number of bytes contained in the element or attribute the number of bytes that follow the length byte up to the end of the element or attribute. In some embodiments the extended length may be used for longer elements or attributes. For elements the data bytes contain the element s attributes and child elements for attributes the data bytes contain the attribute s value such as a string integer or other data type.

Certain embodiments provide a content file reuse capability. Specifically for content that is repetitive e.g. the Morning Show is broadcast Monday through Friday mornings from 6 00 AM to 9 00 AM the index file can include an indication that the content files corresponding to the content apply to multiple dates e.g. the content files associated with the Morning Show will indicate that they apply to Monday through Friday . Such a file reuse indicator may be an additional element in the index file e.g. an alternateDate element that is associated with the appropriate content files. illustrates an exemplary embodiment of file reuse indicators. As shown the cluster 1 and cluster 2 files for portID number 3 contain alternateDate elements that refer to Jan. 3 2006 and Jan. 4 2006. Thus in this exemplary embodiment schedule files for these two dates are not transmitted. Rather the receiver will reuse the cluster 1 and cluster 2 files from portID number 3 to populate the EPG for Jan. 3 2006 and Jan. 4 2006. Advantageously such a file reuse capability minimizes the bandwidth required for transmitting the EPG.

Content files provide information on available audio programs and data content. Specifically the content files carry EPG service schedule and linked content information for the station or stations supported by the SB. The content files are generated by the SBM and sent to transmitting stations along with the index file.

In certain embodiments there may be six types of content files three for a basic profile and three for an advanced profile. The basic profile may contain basic EPG information e.g. time and short program title adapted for simple and or low end receivers. The advanced profile may contain more advanced information including longer program titles descriptions and multimedia content adapted for receivers with more capabilities. Additionally because the basic and advanced profiles are typically transmitted separately the advanced profile carries an association to the corresponding basic profile. When a receiver receives the basic and advanced profiles it may internally combine the profiles to present a consistent EPG. Typically receivers that desire to decode the advanced profile will also decode the associated basic profile for the corresponding content. Advantageously separating the profiles into basic and advanced allows low end receivers to receive and decode only the information necessary to render a basic EPG e.g. display EPG information with or without accompanying audio EPG information while higher end receivers may by able to render more advanced content consistent with their respective capabilities.

The six content file types comprise service information service files schedule information schedule files and linked content information linked content files for a basic profile and service information service files schedule information schedule files and linked content information linked content files for an advanced profile. While described separately for clarity it is contemplated that both basic and advanced file types could be utilized basic and advanced content may be merged in higher end EPG enabled receivers. For example a content file could contain both service information and schedule information or both schedule information and linked content information or any other suitable combination.

Service files provide information about available audio programs and data services. The elements of a service file may include name description program type and whether it is a data or audio service. Examples of audio programs include hosted DJ radio shows talk radio shows baseball games etc. Examples of data services include streaming traffic data or stock tickers etc. Service files also typically include the station on which the service is being broadcast including the station call sign and broadcast frequency. For example a service file might indicate that 95.7 FM is broadcasting audio via HD Radio . Exemplary XML elements and attributes for a service file are shown below in Table 2 and an exemplary XML service file is illustrated in . The exemplary service file shown in contains a top level serviceInformation element having several station elements each of which describes a particular radio station. For example the exemplary service file contains information on WAAA 99.5 FM WBBB 100.3 FM and WCCC 101.0 FM. Each station element includes shortName mediumName frequency and service child elements. As shown the service elements have a bearerID attribute that provides a unique identifier for each particular radio station service.

Schedule files provide information on the individual pieces of content that are broadcast on one or more services for a defined period of time. Information on both audio programs and data services may be included within any schedule file. The elements of a schedule file may include the content name start time duration description program type a value indicating the associated service file and links to other multimedia content associated with the content. For example a schedule file could indicate that the Morning Show is available from 6 00 AM to 9 00 AM Monday morning and have a bearerID attribute indicating that the schedule file is associated with the service file for 95.7 FM. For a data service an exemplary schedule file could indicate that Washington D.C. Traffic Updates are available 24 hours a day for example. Schedule files may include an appropriate expiration date and or time. For example if the Morning Show was only available on Monday then the corresponding schedule file could expire at the end of the day on Monday. In certain embodiments content may be selected e.g. user defined for triggering other processes inside or outside the receiver. For example this may provide the capability to start recording a certain program at a certain time when it is to be broadcast to trigger a reminder alarm e.g. audio and or visual indicator when a certain program is scheduled to start. Exemplary XML elements and attributes for a schedule file are shown below in Table 3 and an exemplary XML schedule file is shown in . The exemplary service file shown in contains a top level epg element having a schedule element. The schedule element includes several content child elements each of which describes a particular radio program. The exemplary schedule file in contains schedule information for WCCC 101.0 FM the service information for shown in . Thus it includes several content elements for bearerID 4202986.0 e.g. WCCC Rocks Overnights Kelly Knight and Weasel etc. and several content elements for bearerID 4202986.1 e.g. Adult Alternative The Jam etc. each of which has a time child element that describes the start time and duration of the associated program content.

In certain embodiments individual pieces of content including audio and data content can be linked or grouped together to form a series. The linked content files contain a reference to one or more linked content groups. The linked content groups contain the linked details for the individual pieces of content such as name description type of group and links to multimedia content for the group. To continue the above example the Morning Show could include a link to a grouping of other talk shows in the schedule files associated with an index file. Other examples of groupings could include sports programs network and national baseball games local team baseball games comedy shows streaming traffic services or any other suitable grouping of content. Exemplary XML elements and attributes for a linked content file are shown below in Table 4 an exemplary XML linked content file is illustrated in . The exemplary linked content file contains a top level epg element having a contentGroups element. The contentGroups element includes a number of contentGroup child elements each of which describes a specific content group. For example the exemplary linked content file contains content groups for Overnight Music Morning Show Edition etc. As shown the contentGroup elements have a contentID attribute that provides a unique identifier for each particular content group.

In certain embodiments service files schedule files and linked content files may be additionally defined for reuse or classified as static or dynamic. Files defined as static are typically service files containing information such as a station call sign that will change infrequently these files may be referred to as static service files. Dynamic files are typically schedule and linked content files that will change on a daily or weekly basis. However schedule and linked content files may be reused so that these files are only sent once and the EPG can reference the reuse file on other file dates as needed. In certain embodiments the static service files may be assigned a default RLS port by the importer over which the static service files are broadcast. Advantageously this allows for efficient transport and prioritization of content that need not be updated frequently.

Certain embodiments of the current invention provide a schema for defining the elements of the EPG files. The XML schema could be constructed with any suitable XML schema language such as XML Schema or Document Type Definition DTD . The index files and content files can be initially generated as XML files by the SBM and validated against the appropriate XML schema.

The EPG content providers will typically utilize a SBUI see e.g. and for generating and modifying the EPG content and communicating it to the SB. In some embodiments the SB operators will also have the access to the SBUI. In this regard the SBUI may be configured to establish session connections between multiple EPG content providers and or the SB operators. The SBUI application may be resident at the SB distributed to individual EPG content providers hosted by a third party or any suitable combination thereof. Further in some embodiments the SBUI may be accessible as a website via the Internet.

In certain embodiments the SBUI provides a Graphical User Interface GUI that allows the EPG content providers and SB operators to create and modify radio program schedules for example in a day and time slot format. An exemplary GUI is shown in and . In the exemplary dialog box shown in a user may input the station and service information such as market ID frequency country code FCC ID and call sign as well indicate whether programs are available on the MPS and SPS channels. By selecting EPG Schedule a user can then create 24 hour schedules for each MPS and SPS channel as illustrated in the exemplary dialog box shown in

In some embodiments the SB operators may have their own interface for accessing the SBM . An exemplary SB operator interface is shown in and . The exemplary interface displays and allows SB operators to modify current and future index files. To perform these functions it contains a number of dialog boxes and tables. These include a Service Bureau Formatting block containing SB information a market dropdown box for choosing the appropriate market it is contemplated that each SB may serve multiple markets a Clusters and Markets table containing markets and their associated clusters a Clusters and Stations table containing clusters and their associated stations a Clusters and Files table containing clusters with their associated ports content files and content file reuse indicators the Alternative Dates table .

The EPG content generated by the SBUI may be created in a variety of file formats. In some embodiments the EPG content may be created as pre formatted XML content files using the XML schema described above. In some embodiments the EPG content could be created as CSV files and or text files. Additionally any other suitable file format could be utilized such as HTML files Microsoft Word files Microsoft Excel files or Microsoft Outlook files. In certain embodiments the EPG content could be generated in any suitable combination of these formats.

Referring to the SBUI may also provide users with the capability to define desired broadcast ratios for various files. For example it may be desirable to transmit static service files less frequently than schedule files. It also may be desirable to transmit the schedule files for the current day more frequently than the schedule files for the next day or following week. The SBUI can provide a dialog box that gives users the ability to enter a desired static file to schedule transmission ratio or the ratio may be specified in a software configuration file. For example in some applications a suitable static file to schedule transmission ratio may be 4 1 meaning that the schedule files will be transmitted four times for every one time the static service file is transmitted. This ratio may be entered in the form of a ratio a percentage or any other suitable format. In some embodiments the SBUI can also provide a dialog box that gives the users the ability to enter a desired date to date transmission ratio e.g. a first date to second date transmission ratio or the ratio may be specified in a software configuration file. For example the user may define the number of times Day 1 i.e. the current day will be transmitted in comparison to the number of times Day 2 Day 3 Day 4 etc. will be transmitted. This ratio may be entered in the form of a ratio a percentage for each day or any other suitable format. These ratios may be stored in any appropriate file format such as XML plain text or CSV. After the user has defined the desired ratios they can then be communicated to the SBM along with the EPG content.

The SBM is comprised of several functional modules. In certain embodiments the SBM includes an EPG file generator module an automatic update module a bandwidth manager module and an EPG Client interface module . The EPG file generator module receives the EPG content processes it to generate content files and stores the content files in the SBDB . The EPG file generator module may also receive any desired broadcast ratios process them to generate a transmit pattern file and store the transmit pattern file in the SBDB . In some embodiments the EPG file generator module receives EPG content in a non XML file format and converts it into to XML files utilizing the XML schema according to a predetermined conversion template. However in certain embodiments the EPG file generator module may leave the EPG content in its native file format. For example if the EPG content is in the form of XML files the EPG file generator module may not perform any conversion or validation of the EPG content. But in some applications the EPG file generator module validates received XML files against an XML schema as described above. In still other embodiments the EPG file generator module converts the EPG content to another file format such as CSV. Once the content files are generated the EPG file generator module stores them in the SBDB via the SBDB interface .

The SBDB includes hardware e.g. magnetic or optical storage and software for storing and maintaining content files index files and other EPG related files. The exemplary embodiment shown in illustrates an SBDB that has been provisioned with EPG files. The exemplary SBDB contains files in a database which stores EPG files currently scheduled for transmission to the EPG Client and the XML schema which may be used for generating and validating EPG files. For example an XML based EPG file can be validated by checking the file against an appropriate XML schema e.g. a schedule file could be checked against a schedule file XML schema to determine whether it is well formed and whether it conforms to the schema s defined structure. A well formed document follows the basic rules of XML established for the design of documents. The EPG files stored in the database include an index file a transmit pattern file a day 1 content file and a day 2 content file . Although the files in the database only show two days of content files any suitable number of content files could be utilized depending on the number of days of EPG that are to be made available. For example for a two week EPG 14 days of content files could be used. In certain embodiments the SBDB can also store EPG files that are not currently scheduled for transmission.

The SBDB provides functionality such as inserting files modifying files deleting files and responding to queries. In some embodiments the SBDB may be a file system such as FAT or NTFS. In other embodiments the SBDB may be a relational hierarchical or object oriented database such as a Native XML database Microsoft SQL Server Oracle Database or any other suitable database. The software portion of the SBDB may execute on the same computer processor as the SBUI or it may execute on another processor within the SB site . Additionally the SBDB may be an externally hosted data repository. In certain embodiments the SBDB may be an FTP server that provides an FTP interface to the SBM. The interface between the SBM and the SBDB may be any suitable connection such as a network connection e.g. a TCP IP socket or an API.

In step the automatic update module determines whether a date change event has occurred. Because schedule files are typically relevant only for specific dates it is desirable to roll over the content files each day. If a date change has occurred then in step the automatic update module retrieves and parses the content files and the transmit pattern file in the database and the other content files in the SBDB that are not currently scheduled for transmission to update the database for the date change. The bandwidth manager then schedules the broadcast rotation in step by updating the content files the index file and the transmit pattern file . This updating can include removing the content files that are currently associated with day 1 rotating the content files that are currently associated with day 2 into day 1 and inserting new content files into day 2. The index file can then be updated to reflect the new content files. Updating the index file consists of removing the entries associated with day 1 updating the entries associated with day 2 to day 1 and adding the new entries associated with day 2 and changing the version number of the index file e.g. incrementing the version number by 1 0.1 or any other suitable amount . Although two days of content files are discussed for exemplary purposes any suitable number of days could be utilized depending on the number of days of EPG that are to be made available. For example for a two week EPG 14 days of content files could be used.

In step the bandwidth manager may also prioritize the broadcast rotation to provide for efficient use of both radio station bandwidth and receiver processing resources. Prioritization may involve two principle operations. First prioritization can involve determining the frequency i.e. transmit pattern at which the files in the database will be repeatedly broadcast by the transmitter. In certain embodiments the allocated station bandwidth to transport the EPG may be limited. For example a typical radio station may only allocate between 1.5 kbps and 9 kbps of bandwidth for EPG services. Therefore it may be advantageous to maximize the transmission of content that may be considered most relevant to the end users or that is the most commercially beneficial to the SB operators. In this regard the bandwidth manager may prioritize the most current content files for more frequent transmission. For example if there are schedule files for both day 1 and day 2 then the day 1 schedule files could be prioritized so that they would be broadcast twice for each single broadcast of the day 2 schedule files. This type of prioritization typically involves generating and or modifying the transmit pattern file using the appropriate desired broadcast ratios.

Second prioritizing the broadcast rotation can involve determining the frequency at which certain files are spooled to the EPG Client . For example in some embodiments the content files associated with day 1 will contain schedule and service information pertaining to multiple radio station clusters or markets. Assume that there are two schedule files for day 1 the first schedule file is associated with cluster A and the second schedule file is associated with cluster B. An exemplary prioritization could involve the following sequence 

In some embodiments it may be advantageous for commercial reasons to broadcast certain clusters more frequently than others. For example if the radio stations in a first cluster had a contract with the SB that specified a higher number of EPG transmissions for that cluster than the radio stations in a second cluster then it would be advantageous to transmit the content files related to the first cluster more frequently than the content files in the second cluster. The bandwidth manager may perform this prioritization by scheduling the transmission frequency to the EPG Client of clusters and individual stations in the database . For example assume that there are three clusters that have content files to be broadcast during day 1. Assume further that the content files for each cluster would require 1.5 kbps of bandwidth to broadcast. Thus if all the content files were broadcast in parallel the total bandwidth requirement would be 4.5 kbps. Assume further that the available radio station bandwidth for EPG services is only 2 kbps. Therefore it could be advantageous to broadcast the content file for each cluster in series. To accomplish this the content file for the first cluster in the database could be communicated to the EPG Client then the content file for the second cluster and then the content file for the third cluster. If as described above it is desirable to broadcast the content files for the first cluster more frequently than the second cluster the bandwidth manager can transmit the content file for the first cluster more frequently than the other clusters.

In step the auto update module may also determine whether a new content file was added to the SBDB or an existing content file was modified. If so then in step the auto update module determines whether the added or modified content file needs to be added to the database e.g. the content file is related to a day that is currently being broadcast or it is a file that is currently in the EPG Client spooler as described below . The auto update module then adds the file to the database . If necessary the auto update module will also cause the replacement and or removal of files that are currently in the EPG Client spooler and update the version number of that file e.g. increment the version number by 1 0.1 or any other suitable amount . Once the database has been updated the bandwidth manager schedules the broadcast rotation e.g. generates and or modifies the transmit pattern in step as described above.

Once the bandwidth manager provisions the database with the desired content files and index file the EPG Client interface opens a session with the EPG Client to communicate the files in step . shows an example of the message sequencing between the SBM and the EPG Client . The SBM first establishes a TCP IP connection to the EPG Client . Once this connection is established and the SBM is ready to begin sending data it sends an Open Session message to the EPG Client with its name. The EPG Client may respond with an Open Session Response . At this point the EPG Client will request an index file using the Get Index File command . The SBM should respond with the index file it wishes to transmit included in the Get Index File Response message . The EPG Client parses the entries in this index file and determines the content files it needs to transmit. The EPG Client then requests each of these files using the Get Content File command . The SBM responds with the Get Content File Response message for each file requested which includes the requested content file. This continues until the EPG Client has received all the content files for the index file. Next the EPG Client requests the bandwidth allocation ratios e.g. the transmit pattern file using the Get Ratio File commands . The SBM responds with the appropriate transmit pattern file using the Get Ratio File Response message . Finally the EPG Client closes the session with a Close Session command .

The content files may be formatted as described above. For example the content files may be generated in XML format and may comprise one or a combination of service files schedule files and linked content files corresponding to a basic or advanced profile. The content files may be associated with specific logical addresses e.g. a content file may be assigned to be transmitted over a specific RLS port . Also some logical addresses may be associated with a specific date e.g. RLS port number 3 is assigned to day 1 . In certain embodiments multiple logical addresses may be associated with different dates e.g. RLS port number 3 is associated with day 1 and RLS port number 4 is associated with day 2 . The content files also may comprise static service files. The static service files may be associated with a specific logical address e.g. RLS port number 2 is associated with static service files . Some of the content files may be associated with a cluster of radio stations e.g. a grouping of stations and or with a market of radio stations e.g. a geographic region such as Philadelphia .

In step the SBM generates an index file having information identifying at least one content file wherein the index file is associated with a logical address e.g. the index file is assigned to be transmitted over RLS port number 1 . As described above the index file typically comprises a SB identifier a market and or cluster identifier a date a version number and information identifying content files such as a list of the content file names or binary encoded data that can be used to generate a list of content file names. The list of content file names could comprise the file names and a logical address associated with each file name. The index file may also be generated in XML. In some embodiments the SBM may validate the XML index and or content files against an XML schema as described above in step .

Next in step the SBM schedules the content files and the index file for broadcast via digital radio broadcast transmission. Scheduling typically includes provisioning the appropriate index files and content files in the database for transmission e.g. storing the content files for day 1 in the day 1 storage area of the database etc. . In some embodiments service files and static service files may be scheduled to be broadcast less frequently than schedule files in order to maximize bandwidth usage in light of the relatively static nature of service files.

In some embodiments the SBM prioritizes a broadcast rotation for the content files in step . As described above this can include one or a combination of determining the frequency at which the files in the database will be repeatedly broadcast by the transmitter e.g. generating and or modifying a transmit pattern file and or determining the frequency at which certain files in the database are communicated to the EPG Client .

Next in step the EPG Client interface communicates with the EPG Client to transmit the index file and content files for broadcast via digital radio broadcast transmission. In certain embodiments the EPG Client interface may also communicate transmission ratio information such as a transmit pattern file. Finally in step the SBM determines whether another event has occurred such as a new day or new program schedule and or service information has been received. If so the process is restarted otherwise it is terminated.

Once the files have been parsed and encoded the EPG file manager then stores them in appropriate memory locations. For example the index file is stored in the index file memory locations static service files are stored in the static service file memory locations content files for day 1 through 14 are stored in the content day 1 through content day 14 memory locations . The memory locations could be database entries entries in a file system or any other suitable storage location and could be stored in any suitable hardware such as optical or magnetic storage.

The packet processing clients then retrieve the files from the corresponding memory locations segment and packetize the files and forward them to the EPG bandwidth manager. Each packet processing client retrieves data from its associated memory location. For example the index packet processing client retrieves data from the index file memory location the static packet processing client retrieves data from the static memory location and the content 1 to content 14 packet processing clients retrieve data from the content day 1 to content day 14 memory locations respectively.

As described above the RLS can operate in both a packet mode and a byte streaming mode. In packet mode each EPG file may be associated with a different RLS port. Thus the index file would be associated with a first RLS port the static service file with a second RLS port and the content day 1 through content day 14 files would be associated with a third through sixteenth RLS port respectively. Alternatively in some embodiments some or all of the EPG files may be associated with the same RLS port. Additionally in some aspects all of the EPG files may be combined in a single long header message. This alternative configuration could be useful in reducing the total bandwidth required to transmit the EPG in some implementations.

In certain embodiments each RLS port can be assigned a desired percentage of the total bandwidth allocated to the EPG based on the file broadcast frequencies in the transmit pattern file. Typically the index file will be broadcast in each PDU and will therefore not have a desired percentage. However in some embodiments it could be assigned a high desired percentage rather than being broadcast in each PDU. In certain embodiments the packet processing clients will segment the packets using LOT protocol according to the packet size limitations enforced by the importer for AAS data.

In byte streaming mode the packet processing clients may provide a simple framing protocol for encapsulating the EPG files. In certain embodiments based on the ratio files e.g. static to schedule and day to day each type of file e.g. index static content day 1 content day 14 can be assigned a desired percentage of the total bandwidth allocated to the EPG. Typically the index file will be assigned a high desired percentage so that it is broadcast more frequently than the content files. In this mode the packet processing clients need not segment the files because they will be segmented by the importer as previously described. An exemplary framing protocol is illustrated in . This framing protocol includes a frame header the payload and a CRC. The frame header includes a SYNC field as a frame delimiter a LEN field for the payload length in bytes a multi part File Info field and a Rev field for the framing protocol revision number. The File Info field includes a TNF field for the total number of files in the EPG a FN for the file number of the current file an FT field for the file type e.g. index file content file SB for the SB identifier Mkt for a market identifier Clstr for a cluster identifier Time for packet time and Ver for the current version of the EPG. Thus in byte streaming mode for example the index packet processing client retrieves the index file from the index file memory location and encapsulates it using the simple framing protocol.

Once the packets are generated they are forwarded to the EPG bandwidth manager . The EPG bandwidth manager is responsible for the interface to the importer and properly managing the total bandwidth allocated to the EPG client . This is accomplished by transmitting packets to the importer whenever it requests data the importer typically utilizes an asynchronous data transfer method . If the response from a single packet is not large enough to fill the allocated bandwidth the importer will typically immediately request additional packets. The EPG bandwidth manager assures that these packets are available when requested to maintain full bandwidth utilization. In operation the EPG bandwidth manager interleaves the various packets and transmits them to the importer according to the desired broadcast rotation. To perform this task the EPG bandwidth manager may operate according to an efficient scheduling algorithm. The scheduling algorithm may operate differently between packet mode implementations and byte streaming mode implementations. In packet mode the scheduling algorithm may be statistical in nature and may use one or more of the following metrics to maintain proper broadcast ratios between the various EPG files 

Input into the algorithm is a specification of which ports are active and what percentage of available bandwidth should be allocated to each active port. The algorithm tracks how much bandwidth has been used for each port s files. When the importer requests data the algorithm selects the port with the largest bandwidth usage error for transmission and then updates its bandwidth usage statistics for the next request. The relative bandwidth usage error for each port may be computed as follows 

In byte streaming mode the algorithm would be similar. However the desired percentage and measured percentage would be based on the type of file e.g. index static content day 1 content day 14 rather than the RLS port.

In step the EPG file manager receives content files corresponding to programming information for program content to be broadcast. The content files may be formatted as described above. For example the content files may be in XML format and may comprise one or a combination of service files schedule files and linked content files corresponding to a basic or advanced profile. The content files may be associated with specific logical addresses e.g. a content file may be assigned to be transmitted over a specific RLS port . Also some logical addresses may be associated with a specific date e.g. RLS port number 3 is assigned to day 1 . In certain embodiments multiple logical addresses may be associated with different dates e.g. RLS port number 3 is associated with day 1 and RLS port number 4 is associated with day 2 . The content files also may comprise static service files. The static service files may be associated with a specific logical address e.g. RLS port number 2 is associated with static service files . Some of the content files may be associated with a cluster of radio stations e.g. a grouping of stations and or with a market of radio stations e.g. a geographic region such as Philadelphia .

In some embodiments the EPG file manager may also perform one or more of the following steps. In step the EPG file manager may receive a transmit pattern file that specifies file broadcast frequencies i.e. information specifying the desired frequency at which specific files will be transmitted to the importer . This file may have been generated using one or a combination of a schedule file to static file transmission ratio and or first date to second date transmission ratios. In step the EPG file manager may binary encode the index file and the content files.

In step the EPG file manager stores the index file and the content files in their associated storage locations as described above. For example the index file is stored in the index file memory locations static service files are stored in the static service file memory locations content files for day 1 through 14 are stored in the content day 1 through content day 14 memory locations .

Next in step the packet processing clients and and or the importer may segment the content files for bandwidth management purposes. In certain embodiments the content files may be segmented in a packet streaming mode or a byte streaming mode as described above.

In step the EPG bandwidth manager transmits the index file and the plurality of content files to the importer in accordance with a broadcast rotation. In the broadcast rotation the index file is typically scheduled for repeated transmission intermittently relative to the content files. For example the index file may be transmitted first then a first content file then the index file again then a second content file etc. The broadcast rotation may be set according to the file broadcast frequencies specified in the transmit pattern file. In some embodiments the index file and content files may be transmitted to the importer asynchronously i.e. upon the importer s request .

Finally in step the EPG Client determines whether it has received another index file. If so the process is restarted otherwise it is terminated.

Once the importer receives the packets they are processed as AAS data and broadcast over the air as discussed above. A receiver then receives the packets and processes them to construct an EPG that can be rendered for an end user. Advantageously a receiver may be able to receive programming information regarding stations that broadcast only in legacy analog waveform and otherwise have no digital or other means of conveying their program schedule. While the receiver is described below as receiving EPG data from a single SB it is contemplated that it may receive EPG data from multiple SBs. In these embodiments each SB may provide its own unique index file and content files.

An exemplary process of receiving processing and rendering the EPG data is shown in and . Referring to in step the user powers on the receiver and then tunes the receiver to a desired radio station in step . On power up the host controller shown in respectively begins to repeatedly request various types of data e.g. SIS SIG and LOT segments from the signal processing block . In step the signal processing block receives the SIS and SIG decodes them and communicates them to the host controller in response to a request from the host controller . In step the host controller parses the SIS and SIG to determine whether the station is broadcasting an EPG. This indication will typically include a MIME type indicator that identifies EPG service. If EPG service is available on a particular station the SIG will also indicate the RLS port number on which the associated index file can be received.

In step the user may optionally select a scanning mode that causes the host controller to operate the receiver in order to tune to a number of available radio stations and search on each for an indication that EPG service is available. These indications may then be stored by the host controller to generate a list of stations with EPG service. For example during scanning the host controller may use SIS data to retrieve the least significant bits of a MIME hash identifying the EPG service e.g. the least significant 12 bits of a 32 bit MIME hash . If a partial match to an EPG service MIME hash is found the host controller may retrieve SIG data that contains the full MIME hash value e.g. the full 32 bit MIME hash . In some embodiments the host controller may rely upon the SIG data without regard for the SIS data. If a complete match is found the scan may be stopped and EPG processing may begin or the station may be stored and scanning continued.

In step the host controller causes the DCU to display an indication to the user that EPG service is available. This could be in the form of a lighted EPG Available button or an icon on a GUI. In certain embodiments the user may be able to choose whether to download the EPG at this point. In some cases in which more than one EPG is available the user may be presented with a dialog box or other prompt that allows them to select from the available EPGs. For example this might be the case if EPGs are available for different markets clusters e.g. groups of stations or individual stations. The user can then select an EPG e.g. by pressing a suitable button which can be for example either a physical button on the receiver or a soft key button on a GUI. In certain embodiments the host controller may automatically begin retrieving an available EPG without requiring user input.

While the receiver is tuned to a particular radio station the signal processing block is continuously receiving and buffering RLS packets shown as step that are broadcast from the radio station. In embodiments directed to packet mode transmission using LOT protocol the data processor may also be reassembling the packets into objects. These objects are then passed to the host controller responsive to a request e.g. a polling event . Alternatively packets could be passed to the host controller which could then reassemble them into objects. Additionally in embodiments directed to byte streaming data transmission the packets could be reassembled in either the data processor or the host controller according to the simple framing protocol described above.

The host controller decodes and builds the EPG in step from objects or packets received from the signal processing block in response to a request. The host controller first searches on the RLS port indicated in the SIG for a new index file. While searching on the RLS port the host controller decodes objects or packets corresponding to the index file if they are binary encoded and stores them in memory module . Referring to the host controller receives a complete new index file in step .

Once the host controller receives the index file it then decodes the information identifying the associated content files e.g. content file names contained in the index file in step . In step the host controller searches memory for each content file name from the index file. In step if the content file name is found in memory then no further processing is necessary for that content file. If the content file name is not found in memory in step the host controller will create a list of missing content files comprised of the file names that are not found in memory. The host controller then continues to listen on the appropriate RLS port or ports to receive objects or packets and constructs content files in step to obtain the missing content files. Advantageously in some embodiments in which the content files are associated with specific RLS ports and days the host controller may disregard unwanted content files e.g. if the host controller is only implementing a 7 day EPG then it would ignore the RLS ports containing EPG data for days 8 14 . The file name of each content file that is constructed is checked against the list of missing files in step . Newly constructed files that are on the missing file list are then stored in memory in step .

The process of constructing and storing the content files may vary depending on the implementation. For example different receivers have different input display and memory capabilities. Some typical receiver s displays may include 4 line by 16 character LED or LCD displays 2 line by 16 character LED or LCD displays 256 color OEL displays multi line back lit LCD displays with 6 or larger multimedia displays and portable radio back lit LCD displays. Generally the receivers with more advanced displays have more available memory. Simpler receivers may only have a small amount of RAM e.g. less than 50 Kbytes while more advanced receivers may have a larger amount of RAM e.g. 100 Kbytes or more as well as non volatile memory such as Flash ROM e.g. built in Flash a hard disk drive and or a SD Memory Card . Advantageously exemplary embodiments of the present disclosure provide adaptable EPG rendering based on the capabilities of the receiver as described below.

The content files and the index files may be stored in any suitable memory structure. For example a file system could be used such as NTFS or Journaling Flash File System version 2 JFFS2 . Alternatively the files could be stored in a database such as SQLite or MySQL. Naturally the memory structure utilized should be consistent with the memory capabilities of the receiver. Thus more capable receivers could have more complex memory structures. In some embodiments the content files and index files may be stored in non volatile memory. In these cases the EPG data may be available immediately upon power up without requiring the download of any new index or content files.

1 colMktID an integer field that may auto increment each time a unique record is inserted to the table.

2 colMktNum a character field containing the marketID attribute of the market element found in the index file.

3 colMktName a character field containing a description of the marketID attribute e.g. Philadelphia .

In embodiments wherein a market contains more than one SB the user may be allowed to display an EPG based on a selected SB. To allow display based of a selected SB the stations table and schedules table may contain foreign keys FK to the colSBID primary key PK .

8 colSName a character field corresponding to the short name description of the station e.g. the station s call sign .

4 colTime an integer field corresponding to the start time of the program. For example the most significant byte may be the UTC flag followed by a one byte hours value a one byte minutes value and a one byte seconds value.

5 colStartDate an integer field corresponding the earliest calendar date the program is valid. For example it may comprise a one byte year value a one byte month value and a one byte day value.

9 colDuration an integer field corresponding to the duration of the program. For example it may comprise a one byte hours value a one byte minutes value and a one byte seconds value.

1 colDescID an integer field that auto increments each time a unique record is inserted to the table.

In an exemplary embodiment employing the relational database structure of the process of storing an index file and the content files could include the following steps. First the host controller receives the index file and parses it to determine the SB market date version number and cluster associated with the index file. The host controller then populates the market table and the SB table with this data. The host controller then receives a service or schedule file described by the index file. For service files the host controller inserts a new entry in the stations table. For schedule files the host controller inserts a new entry in the schedules table. In some embodiments wherein the index file contains a content file reuse indicator associated with certain schedule files e.g. an alternateDate element the colStartDate and colStopDate fields may be updated to reflect the number of days for which the associated EPG content will be valid. For example assume that the current date is Jan. 5 2009 and that the alternateDate element indicated that a schedule file was relevant for the current day and the following two days. In this case the colStartDate could contain Jan. 7 2009 and the colStopDate could contain Jan. 3 2009.

In certain embodiments that include both basic and advanced profile content files the corresponding profiles can be merged to produce a single content file. For example continuing the example utilizing the database of the host controller could retrieve a first service file corresponding to a station on 95.7 FM that contains basic profile information e.g. FCC ID frequency call sign and medium name and create a corresponding database entry in the stations table. Next the host controller could retrieve a second service file corresponding to the station on 95.7 FM that contains advanced profile information e.g. a WBEN graphical logo and insert this information into the same database entry used for the basic profile information. Thus the database entry for the station on 95.7 FM would have both basic profile information and advanced profile information.

At times the index file and content files for a particular SB may be associated with an outdated version. This could occur for example at the beginning of a new day or when a content file is modified at the SB. In these cases the SB would update the index file including adding a new version number and the schedule the new index file for broadcast as described above. To address this the host controller may be programmed to check the version number of a newly received index file against the version number of a currently stored index file. If the version number of the current index file is outdated e.g. not the same as the newly received index file or older than the newly received index file the host controller will replace the current index file with the new one and begin receiving and updating the content files.

Once the index file and a suitable number of content files have been stored in memory the EPG is constructed in step . In certain embodiments a suitable number of content files could be one some most or all of the content files listed in the index file. Constructing the EPG consists of retrieving and formatting the data for the programming information that is contained in the content files so that it can be rendered on the display. The EPG application in the receiver will first determine the relevant time by checking the system clock. In some embodiments it then will query the database to find schedule entries having relevant start and stop times. In certain embodiments the EPG application may examine the stored index file to determine which schedule files have relevant start and stop times. The relevant programming information is then used to populate the on screen EPG for example in a program grid format.

The way the EPG is constructed may depend on the receiver characteristics e.g. display or memory capabilities and or according to user choice. For example a simple embedded receiver may only receive and display a simple text based basic profile while a more capable receiver may display a more advanced profile containing for example graphics and logo references and long descriptions. Once the programming information has been formatted for the display it can then be rendered by the DCU in step . Additionally in embodiments including linked content files the files in the linked content group may be formatted in such a manner that they will be rendered together. For example when the programming information for the Morning Show is displayed it could include a link or reference e.g. a hyperlink or a popup to other talk shows in the schedule files. In some embodiments filtering programming information may be performed according to the end user s choice. Advantageously the displayed data may be reduced for example from a comprehensive level e.g. full program descriptions to program type only upon the end user s selection and irrespective of the display s further capabilities.

In certain embodiments content may be selected e.g. user defined for triggering other processes inside or outside the receiver. For example this may provide the capability to start recording a certain program at a certain time when it is to be broadcast to trigger a reminder alarm e.g. audio and or visual indicator when a certain program is scheduled to start. A recording capability could comprise an input dialog box that allows a user to select a future program or data service displayed on the EPG. When the content associated with the selected a program or data service is selected a trigger for a recording function would then store the broadcasted program in memory for future playback. Further examples of providing VCR like recording functions for radio content are described in U.S. Patent Application Publication No. 2004 0062526A1 which is incorporated in its entirety herein by reference.

At this point the user can view the programming information and perform other related functions. An exemplary EPG display on a GUI is shown in . As illustrated the EPG display contains a grid having the radio market displayed across the top Philadelphia below which are various times. On the left side are the various stations that have available EPG schedule and service information WXPN 88.5 WMMR 93.3F WYSP 94.1 and WSNI 104.5 . In the grid are the various shows that are available at various times. In other embodiments as illustrated in the user may be able to browse the programming information using a scrolling display. In this example the user is provided with navigation arrows for browsing the content. Also shown in the example is multimedia content associated with one of the programs WMMR 93.3 i.e. the Preston Steve show . Additionally the EPG files may be stored in a database such as SQLite that may allow the host controller to perform a database query based on user input. This could enable the user to search for specific program listings by program name genre time or any other suitable criteria. An exemplary search function is illustrated in . In this example the user is provided with a basic search capability that enables a search by the type of program e.g. news information sports talk rock classic rock adult hits and soft rock. illustrates an exemplary EPG rendered on a receiver having a simple two line display. In this example the user can navigate through the current and future programming information using forward and back buttons on the faceplate. The navigation features and menu items can be coded in software using any suitable programming language such as C C or for example and implementing such navigation features and menu items is within the purview of one of ordinary skill in the art.

Next in step the host controller the signal processing block receives an index file and passes the index file to the host controller . The index file may be associated with a specific logical address e.g. the index file may be assigned to be transmitted over RLS port number 1 . The received index file may be received via a byte stream. As previously described a byte stream comprises a plurality of frames of bytes wherein each frame includes a frame delimiter that indicates the start and the end of the frame and wherein at least one frame includes a packet delimiter indicating the start of a packet. The received index file contains information identifying the associated content files. As described above the index file may comprise a SB identifier a market and or cluster identifier a date a version number and information identifying content files such as a list of the content file names or binary encoded data that can be used to generate a list of content file names. The list of content file names could comprise the file names and a logical address e.g. RLS port associated with each file name. The index file may be in binary format when received and the host controller may decode the index file so that it may be stored in another format e.g. XML .

In some embodiments the host controller may have previously stored an index file. In step the host controller compares the version number of the previously stored index file with the version number of the recently received index file. For example the full index file name may be compared with the full file name of the previously stored index file. If the version number of the recently received index file is the same as the previously stored index file then the recently received index file may be discarded and the process may start over.

Otherwise in step the host controller stores the received index file in memory. As described above the index file could be stored in any suitable storage such as a file system or a database. Next in step the signal processing block receives and buffers content files wherein the received content files includes data for displaying programming information. The content files may be formatted as described above. For example the content files may be received in binary format and may be converted to another format e.g. XML by the host controller. The content files may comprise one or a combination of service files schedule files and linked content files corresponding to a basic or advanced profile. In some embodiments each advanced profile content file may be associated with a basic profile content file e.g. both the basic and advance files relate to the same radio station or program to facilitate merging the basic and advanced profiles as described above. Some of the content files may be associated with a single radio station a cluster of radio stations e.g. a grouping of stations and or with a market of radio stations e.g. a geographic region such as Philadelphia . Advantageously because the content files may be associated with a cluster or a market they may be received from a first radio station but may contain data for displaying programming information of a second radio station. Moreover a receiver may be able to receive programming information regarding stations that broadcast only in legacy analog waveform and otherwise have no digital or other means of conveying their program schedule.

In some embodiments the content files may be received on specific logical addresses e.g. a content file may be assigned to be transmitted over a specific RLS port . Also some logical addresses may be associated with a specific date e.g. RLS port number 3 may be assigned to day 1 . In certain embodiments multiple logical addresses may be associated with different dates e.g. RLS port number 3 is associated with day 1 and RLS port number 4 is associated with day 2 . The content files also may comprise static service files. The static service files may be associated with a specific logical address e.g. RLS port number 2 is associated with static service files . In some embodiments the content files are received via a byte stream as previously described.

In some embodiments the host controller may have previously stored content files. In these cases the host controller may compare the version number of the previously stored content files with the version numbers of recently received content files that correspond to the previously stored content files e.g. the content files are for the same radio station and or radio program to determine if the previously stored content files are outdated. If the version number of the recently received content file is the same as that of the previously stored content files then the recently received content file may be discarded and the process may start over.

Otherwise the host controller stores the at least one received content file in memory. The content files may be stored in any suitable storage such as a file system or a database. The storage process may involve merging advanced profile content files with the associated basic profile content files as described above.

Next in step the DCU displays the programming information based upon the data from the received content files to a user as an electronic program guide EPG . The data may be rendered such that the user can view browse and or search the programming information as described above. Advantageously the data may be customized to the display based on the receiver s display capabilities. For example for a simple two line LCD display the DCU will only render the basic profile data e.g. station frequency call sign and short program name . For an advanced 6 multimedia display the DCU may render the advanced profile data including long program names and station graphical logos. In some embodiments filtering programming information may be performed according to the end user s choice. For example the displayed data may be reduced from a comprehensive level to program type only upon the end user s selection and irrespective of the display s further capabilities. In certain embodiments the content may include selectable content for triggering other processes inside or outside the receiver. For example this may provide the capability to start recording a certain program when it starts or to trigger a reminder alarm e.g. audio and or audiovisual indicator when a certain program is scheduled to start.

Finally in step the host controller determines whether it has received another new index file. If so the process is restarted otherwise it is terminated.

One advantage is that in certain embodiments by including clusters and stations in the EPG a receiver may be able to receive programming information regarding stations that it can not currently hear. This can be advantageous for example in cases where the receiver is mobile and moves within a radio market or cluster. Additionally a receiver may be able to receive programming information regarding stations that broadcast only in legacy analog waveform and otherwise have no digital or other means of conveying their program schedule.

Another advantage is that in certain embodiments the EPG data is transmitted in a bandwidth efficient manner by using for example broadcast rotation and binary encoding.

Yet another advantage is that in certain embodiments radio programs may have useful content to trigger other processes inside or outside the receiver. This provides the capability for example to start recording a certain program when it starts or to trigger a reminder alarm e.g. audio and or audiovisual indicator when a certain program is scheduled to start.

Another advantage is that in certain embodiments a SB can aggregate EPG content from multiple content providers thereby providing commercial opportunities for SB operators.

A further advantage is that in certain embodiments the end users are provided with a way to intelligently browse through the myriad of available radio programming. This may greatly improve the radio users listening experience.

Still another advantage is that the displayed data may be reduced for example from a comprehensive level to program type only upon end user s selection and irrespective of the display s further capabilities. In some embodiments filtering programming information may be performed according to the end user s choice.

Yet another advantage is that in certain embodiments the end users are provided an easy way to select and receive the desired content.

Yet another advantage is that in certain embodiments the end user may be able to search the available radio programming.

Still another advantage is that in certain embodiments radio stations are partitioned into markets so that a meaningful EPG can be presented even if several AM or FM stations are assigned to the same carrier frequency.

A further advantage is that in certain embodiments the host controller only receives content files associated with relevant dates by receiving data from selected RLS ports. For example if the host controller is only implementing a 7 day EPG then it could ignore the RLS ports containing EPG data for days 8 14.

Yet another advantage is that in certain embodiments radio programs may have useful linked content. This provides the capability for example to link a morning show with other talk shows in a market or cluster.

The exemplary approaches described may be carried out using any suitable combinations of software firmware and hardware and are not limited to any particular combinations of such. Computer program instructions for implementing the exemplary approaches described herein may be embodied on a computer readable medium such as a magnetic disk or other magnetic memory an optical disk e.g. DVD or other optical memory RAM ROM or any other suitable memory such as Flash memory memory cards etc. Additionally the disclosure has been described with reference to particular embodiments. However it will be readily apparent to those skilled in the art that it is possible to embody the disclosure in specific forms other than those of the embodiments described above. The embodiments are merely illustrative and should not be considered restrictive. The scope of the disclosure is given by the appended claims rather than the preceding description and all variations and equivalents which fall within the range of the claims are intended to be embraced therein.

