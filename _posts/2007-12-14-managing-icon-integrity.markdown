---

title: Managing icon integrity
abstract: Icon integrity is managed. A notification for a selected icon is received and a determination is made whether a set of properties exists for the selected icon. Responsive to determining the existence and verification of the authenticity of the set of properties, the computer implemented method analyzes the set of properties to determine permission and authentication and responsive to determining the permission and authentication, allows execution of an executable function associated with the icon.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250475&OS=08250475&RS=08250475
owner: International Business Machines Corporation
number: 08250475
owner_city: Armonk
owner_country: US
publication_date: 20071214
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method apparatus and computer program product for managing icon integrity.

Graphical user interface technology provides the primary interface between users of computing resources and the resources of the data processing systems. Many users do not know or care what system underlies the application they are using. The simple selection of an icon may result in one or more operations being performed.

For example the task of printing has been reduced to selecting a printer icon and responding to criteria in a dialog or perhaps dragging the file onto a printer icon causing the file to print. In another example when desiring to connect to a remote site a user may click the appropriate icon and be taken quickly to that site. There is no longer a need to type in a number of cryptic commands to accomplish a task.

Today on a platform using Microsoft Corporation Microsoft Windows assigning an icon to a file may be accomplished with relative ease. Icons may be associated with executable and non executable files. When an icon has been assigned to an executable file typically selecting that icon will cause the file or program therein to execute. Application vendors rely on suitably designed icons to represent their products in a recognizable manner to the product user for easier startup and execution of their products.

The ready to run association capability may be exploited in a negative manner. For example a virus may present a folder or some other icon normally associated with a non executable file to deceive a user. The user then selects the icon and unintentially executes the virus. Therefore it would be advantageous to have a method apparatus and computer program product for processing icons in a manner that overcomes the problems discussed above.

Illustrative embodiments provide a computer implemented method an apparatus in the form of a data processing system and a computer program product for managing icon integrity. In one illustrative embodiment the computer implemented method receives a notification for a selected icon and determines whether a set of properties exists for the selected icon. Responsive to determining the existence of the set of properties the computer implemented method analyzes the set of properties to determine a permission and authentication and responsive to determining the permission and authentication allows execution of an associated function.

In another embodiment a data processing system comprises a bus a memory connected to the bus a display connected to the bus a persistent storage connected to the bus wherein the persistent storage comprising computer executable program code embodied therein a communications unit a processor connected to the bus. The processor executes the computer executable program code instructing the data processing system to receive a notification for a selected icon determine whether a set of properties exists for the selected icon and responsive to determining the existence of the set of properties analyze the set of properties to determine a permission and authentication and responsive to determining the permission and authentication allow execution of an associated function.

In another illustrative embodiment the computer program product comprises computer executable program code tangibly embodied on a computer usable recordable medium the computer executable program code comprising computer executable program code for receiving a notification for a selected icon computer executable program code for determining whether a set of properties exists for the selected icon computer executable program code responsive to determining the existence of the set of properties for analyzing the set of properties to determine a permission and authentication and computer executable program code responsive to determining the permission and authentication for allowing execution of an associated function.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

A mechanism to prevent a virus from being misrepresented as a friendly executable file is to use a digital signature and registration capability in the operating system for assigning a digital signature and a file association property to an icon at the operating system level. For example in the network of systems of a client may desire to select a graphic icon to open a presumed file folder containing files stored on server . By examining the association property the operating system of client can determine if the icon is classified for use with a non executable file such as the file folder on server and prevent association with an executable file such as a virus. A file association and icon digital signature may be maintained in a repository in the form of a registry on a client such as client for use by the client or centrally on a server such as server accessible through a network such as network by all connected systems of . Further by examining the digital signature of the icon the operating system is able to determine if the icon has been altered in an attempt to misuse the association property. The two step process of illustrative embodiments may typically prevent many of the system users from being deceived for example into clicking a file folder or a portable document folder file icon and causing a virus program to be executed.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

One example of an illustrative embodiment provides a computer implemented method for managing icon integrity. Integrity means the capability to use the icon for an original intended purpose. In this instance the computer implemented method comprises receiving a notification for a selected icon from user selection of the icon using a graphic user interface. The computer implemented method determines whether a set of properties exists for the selected icon. The set of properties includes a digital signature and a file association registration.

Responsive to a determination that the set of properties exists the computer implemented method analyzes the set of properties to determine permission and an authentication associated with the icon by determining whether the selected icon file association is valid for executables and determining whether the selected icon has been altered. Executables may be in the form of programs or files. Responsive to determining the permission and authentication associated with the icon integrity is in order allowing execution of the function associated with the selected icon.

With reference to a block diagram of an operating system portion of the data processing system of in accordance with illustrative embodiments is shown. Memory of contains operating system for the purpose of controlling and managing the tasks of data processing system of . Operating system may be comprised of a number of complex components known in the art to perform the tasks required. Operating system in accordance with illustrative embodiments also comprises components including but not limited to digital signer file association and integrity checker . In addition registry shown connected to memory and operating system may also be implemented in an alternative manner directly within memory .

Digital signer provides a capability to create digital signatures for various components modules elements or objects of the data processing system . A digital signature may be viewed as a fingerprint for a respective object and may be used to verify an object. For example a digital signature may be tested to determine if an object has been altered because altering an object would create a different digital signature. A digital signature can be created for an object when the object is created and updated when the object is modified by an authorized user.

A digitally signed file helps protect against changes to the file by validating a hashed entry of the file against a stored hash entry for the file in the form of a digital signature. Digitally signing the file helps to guarantee that users will know if a file has been modified. Operating systems such as Microsoft Windows provide application programming interfaces APIs such as WinVerifyTrust to help with creating and validating digital signatures. Application programming interfaces may also be provided as part of a cryptographic addition to a system such as those offered by VeriSign for developers. Digital signatures may be stored and maintained in a secure location such as a registry on a system.

File association provides a capability to associate an action or element with a file or object on the system. For example in one form of association actions may be associated with particular files such as when opening file type word processing document use process or application word processor. In another example when selecting a file folder icon invoke the file system browser to display the folder content.

Registry provides a capability to centralize the storage of property information related to system objects among other types of entries. For example the file associations and digital signatures just described can be registered by type of file and related action. A request to registry for uses of process B may enumerate a number of entries including the opening of file type A. Registry may also contain digital signatures of icons for future references during authentication checking.

Integrity checker provides a capability to verify the usage of an object on the system that has been registered previously and has a digital signature. Integrity checker will determine if the digital signature of an object is correct as well as if the file association complies with the current usage request.

With reference to a block diagram of an association between an icon and an executable in the data processing system of in accordance with illustrative embodiments is shown. The icon and executable association now comprises an icon an integrity check and an executable . Icon may or may not have the additional properties of a digital signature and a registered file association. Executable remains unchanged.

Integrity check is included to ensure the validity of a processing request based on the association of the graphic in the form of icon to execute the executable . If icon does not have the additional properties of a digital signature and a registered file association then icon will be processed in the current manner. If icon has the additional properties of a digital signature and a registered file association as described previously icon will be processed by the integrity checker of in accordance with illustrative embodiments.

With reference to a flowchart of high level view of an icon integrity checking process of the operating system of in accordance with illustrative embodiments is shown. Process is an example of an integrity checking process as may be performed by integrity checker of in accordance with illustrative embodiments.

Process starts step and receives a notification for a selected icon step . A determination is made whether a set of properties exists for the selected icon step . The set of properties including a digital signature and a file association registration. If there are no properties or the properties do not contain a digital signature and a file association registration then a no results in step . If properties exist and contain a digital signature and a file association registration then a yes results in step .

If a no was obtained in step processing of the icon would occur as before without any additional information regarding the usage of the icon. If a yes was obtained in step the set of properties is analyzed for permission and authentication step . The permission is the defined use of the icon. For example when the icon is associated with an executable file the icon is permitted to run the executable file. The permitted use and the requested use for the icon must match. Authentication involves determining whether the icon and its properties have been altered. Alteration involves modification of the properties without authorization. For example an icon has attributes set to NOT permit association with an executable program and is registered. A change in the association afterwards occurs but is not registered. A check will then determine digital signatures of the registered version and unregistered version do not match and the icon will not be authenticated.

A determination is made whether permission and authentication are satisfactory for the selected icon step . If the permission and authentication are not satisfactory a no results and an error is raised the associated function cannot be executed and a requester is notified step . If the permission and authentication are satisfactory a yes results to allow execution of the associated function step with process terminating thereafter step .

responsive to determining the permission and authentication associated with the icon integrity allowing execution of an associated function.

With reference to a flowchart of an icon integrity checking process of operating system of in accordance with illustrative embodiments is shown. Process is an example of an integrity checking process as may be performed by integrity checker of in accordance with illustrative embodiments.

Process starts step and receives notification of an icon selection step . The notification is the selection of an icon by a user or requester. The user selects a specific icon using the graphical user interface expecting the performance of a related function. A determination is made whether the icon selected has a digital signature step . If no signature is present a no result is obtained in step and process would continue to process the icon in a conventional manner without authentication terminating thereafter step . If the digital signature was present a yes result is obtained in step and a determination is made whether the icon is registered step .

If the determination in step results in a no no registration of the selected icon is present and process would continue to process the icon in a conventional manner again absent any authentication. If a yes was obtained in step a determination of whether the icon had a property entitling execution is made step . If the icon is valid for execution a yes would result otherwise a no results.

Having obtained a no in step the execution cannot be performed and an error is raised to the requester step with process terminating thereafter step . The error raised may be in the form of a message to the requester indicating the nature of the issue. Depending upon the installation choice a dialog may be shown to the requester suggesting the icon could not be verified and may prompt the requester to determine to proceed or cancel. If a yes was obtained in step a determination of whether the icon had been altered is made step . In this instance concern is with an icon that retains the same visual appearance but is linked to a different function. The icon has had the intended purpose changed or altered. An icon can be altered by having the object association changed. For example the folder icon is meant to open a folder for viewing of contents. When altered the same graphic icon of a folder may be now linked to an executable of a virus program.

The determination typically involves authentication of the icon by a comparison of the digital signature of the selected icon with a corresponding digital signature stored in a registry. If the analysis results in an assessment that alteration has occurred a yes result would be obtained otherwise no alteration would produce a no result.

Having obtained a yes in step indicating an altered state and authenticity cannot be assured an error would be raised to the requester and the associated operation not performed step . If the result of step was yes authenticity is assured and the requested operation is permitted to execute step with process terminating thereafter step .

Thus the illustrative embodiments provide a method for managing icon integrity. In these examples a two prong validation of an icon is present to aid requesters in determining the safety of executing a request based on the selection of a graphic representation. The validity checking determines if the action associated with the graphic is valid and if the graphic representation has been altered. The validity check performs a validation and integrity check on the icon to assure authenticity of both the object and the permitted purpose prior to further processing of the request.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable recordable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

