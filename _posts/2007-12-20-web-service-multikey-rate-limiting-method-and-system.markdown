---

title: Web service multi-key rate limiting method and system
abstract: The present invention provides a method and computer system for limiting a number of web service programming calls including intercepting a web request for web service programming from a client and extracting call specific data from the web request. The method and computing system further includes transmitting call specific data to a plurality of rate limiter servers and on the rate limiter servers, calculating a total number of web requests, where the web requests are identified by the call specific data. The method and computing system further includes receiving web request totals from the rate limiter servers and thereby determining accessibility of the client to the web request based on a comparison of the number of web requests for the web service programming relative to a predetermined access limit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844707&OS=07844707&RS=07844707
owner: Yahoo! Inc.
number: 07844707
owner_city: Sunnyvale
owner_country: US
publication_date: 20071220
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to limiting web service activities and more specifically using multi key rate limiting to limit web service activities in accordance with predefined usage guidelines.

Internet or network based processing has greatly evolved and includes many aspects of network based applications and services. Commonly referred to as web services these network based applications offer many processing and computing advantages in the networked environment. Concurrent with the growth of web services has been the corresponding demand as well as the infrastructure to support these network based activities. Internet based programs such as Mails Maps can provide these web services and many times these web services can be directly tied into web based transactions.

As with managed growth bandwidth and processing power can dictate many terms of the web service not only how the web service itself operates but also the ability for the corresponding infrastructure to support these web services themselves. For example it is common for web service applications to be hosted or connected with a hosting platform that provides the web service or provides corresponding access to these services. Often times the web traffic volume and possibly also the corresponding processing or computational overhead can be dictated by service level agreements SLAs or other agreements between the parties. For example a hosting entity may host the web service for users in return for payment terms.

Existing systems have been developed with the goal of facilitating the connection and execution of the web service and the underlying applications. These systems have overlooked restrictive conditions to better manage the web service hosting environment. The host processing environment needs to manage bandwidth and processing power.

A common approach for solving issues with bandwidth and processing for web services include providing additional bandwidth and processing power. Prior techniques include receiving web requests and adaptively assigning the web requests to different processing computers such as using a random probability number for the web request and this random number being used to thereby distribute the request to one of a number of corresponding web servers. Economically it can be important to track prevent overuse or otherwise coordinate costs associated with these aspects relative to the service agreements. As such there exists a need for a technique to limit a number of web service programming calls such as in accordance with an SLA.

Generally the present invention provides a method and computer system for limiting a number of web service programming calls including intercepting a web request for web service programming from a client and extracting call specific data from the web request. The method and computing system further includes transmitting call specific data to a plurality of rate limiter servers and on the rate limiter servers calculating a total number of web requests where the web requests are identified by the call specific data. The method and computing system further includes receiving web request totals from the rate limiter servers and thereby determining accessibility of the client to the web request based on a comparison of the number of web requests for the web service programming relative to a predetermined access limit.

In the following description of the embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration exemplary embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

The system further includes a plurality of rate limiter servers and generally referred to by reference number . The rate limiter servers include a counter manager and generally referred to by reference number and a counter store and generally referred to by reference number .

The client device may be any suitable computing device or software application operative to generate and provide the web request . The client device is network connected such across an Internet based connection for providing the web request to the network device . It is recognized that there may exist various processing devices and intermediate processing devices or components for transmitting the web request via the networked connection such as routing devices for example wherein these known elements are omitted from description herein for brevity purposes only.

The web request may be any suitable type of web request that includes a request for a web service such as a request to call a particular application. The web request includes call specific data that is usable by the web service module in performing the requested web service such as a key. The key or web request data of the web request may include coded information such as a client identifier an application identifier a client Internet Protocol IP address and or other information or call specific metadata as recognized by one skilled in the art.

The network device includes the web service module and the rate limiter client and may contain further additional processing components used for network based communication as recognized by one skilled in the art. The web service itself that is run by the web service module may be a SOAP REST or any other type of service accessible programmatically over the Internet or within an intranet wherein the web service module may also include the rate limiting functionality described herein. The web service client may be any application program or module that uses the above service and is uniquely identifiable with a set of identification meta data.

The rate limiter client is illustrated as a separate processing component in the network device but it is recognized that one embodiment may include the rate limiter client being embedded within executable instructions in the web service or may be a separate processing routine or processing device operative to provide the operations described herein.

The rate limiter server may be disposed at any suitable location and in communication with the network device using any suitable communication technique. For example the server may be local to the device using an internal communication or in another embodiment may be in communication across a networked connection e.g Internet or intranet using network connection protocols as recognized by one skilled in the art. The counter manager may be a processing device in response to executable instructions for performing web service counting operations as well as other related processing operations as described in further detail below.

The counter store and the rate limit provisioning may be any suitable type of storage devices capable of storing counter information in the counter store and rate limit information in the provisioning database . The counter store is illustrated as being disposed in the rate limiter server but it is recognized that this data storage device may be stored at any suitable location. Similarly the rate limit provisioning storage device can be stored in any suitably accessible location such as on an administrative processing system in operative communication with the rate limiter server across a networked connection using any suitable networking communication techniques.

The administrative interface may be a computing application executable on one or more processing device whereby an administrator not expressly shown is operative to interact with the rate limit provisioning database . For example the administrative interface may include software applications for allowing the administrator to input SLA terms relating to the rate limits for various web services as described in further detail below.

In the method for limiting a number of web service programming calls a first step step is intercepting a web request for web service programming from a client. With respect to this includes intercepting the web request the intercepting performed by the rate limiter client .

In one embodiment prior to the receipt of the web request the system may include provisioning details defining allowances for the web requests such as with respect to an SLA. The provisioning may a global provisioning wherein global prioritization is set up to determine which key to limit on when multiple keys are supplied in a request as described further below. The provisioning may include information stored in the rate limit provisioning database such as received via the user or admin interface .

A next step step includes extracting call specific data from the web request. This step may be performed by the rate limiter client . As described above the call specific data may include any suitable type of data relating to the web service call including data that identifies the web service request and or the requesting entity such as the client .

In one embodiment not explicitly denoted in the flowchart of the rate limiter client may also take a hash of the individual keys call specific data. This hashing may utilize any suitable hashing routine wherein the hashed keys are therein compared to a transport reference table that indicates which of the various rate limiter servers to transmit the call specific data. One embodiment includes the designation of multiple rate limiter servers for fault tolerance purposes.

Therefore a next step step includes transmitting the call specific data to the designated rate limiter servers. With respect to the rate limiter client may thereby transmit the call specific data to rate limiter servers and or . The transmission may include additional routing information and security information if needed. Moreover with the redundancy aspects of selecting multiple rate limiter servers the rate limiter client may include additional functionality to insure subsequent processing by the designated rate limiter servers or otherwise execute additional processing operations to overcome networking or processing inefficiencies as described further below.

The next step step includes calculating a total number of web requests as identified by the call specific data. This step may be performed the rate limiter servers of wherein the counter manager receives the call specific data determines for which web service the call specific data relates and then interfaces with the counter store for a total number of web service calls or requests attributed to the web service . The counter store includes an existing counter value for the web service whereupon the counter manager may thereupon determine a cumulative total of web service requests such as within a defined period of time. For example a number of previous web service requests may have been received in the last time interval and the counter store stores this value whereby the new web service request is then added to this total.

This step may also include in another embodiment prioritization of the web request and the examination of priority data in the provisioning information. Keys may include priority information therefore this step may include determining the prioritization order for the keys supplied and deciding enforcement decisions based on the keys having higher or highest priorities. For example if the limit for a higher priority key is exhausted then the server can automatically fall back to enforce limiting based on a key with a lower priority. Moreover in one embodiment priority works only for provisioned keys.

The next step step includes receiving web request totals from the rate limiter servers. With respect to the rate limiter client receives the web request totals from the rate limiter servers . In a fault tolerant embodiment the rate limiter client may delay any further steps with respect to the web request until receiving replies from all of the rate limiter servers . As described above the rate limiter client may transmit the call specific data to more then one rate limiter server and therefore fault tolerance measures can include requiring the rate limiter client to receive all replies prior to making the determination to thereby insure the veracity of the web request totals.

In another embodiment the fault tolerance aspects of the system can provide for a failure in communication between the rate limiter client and the network limiter server . In this embodiment if a connection goes down between the client and server after a request has been made or if the connection fails prior to sending a key to a designated node the rate limiter client may include programming to offset this failure in communication. For example the rate limiter client may re assign the partition network limiter for a valid connection.

In the method of the next step step of this embodiment includes determining accessibility of the client to the web request based on a comparison of the number of web requests for the web service programming relative to a predetermined access limit.

The determination of accessibility may thereupon be determined based on a comparison of the number or volume of web service requests relative to defined limits such as limits defined by a SLA between a company that provides web service to its customers and the hosting company that provides the servers for performing the web service functionality.

Step is a determination if the counter manager value based on the combination of the new web service request and the counter store value exceeds an access limit. If the number or volume of web service requests is above the access limit the method includes step denying access to the web request. Whereby if the number of volume of web service requests is below the access limit the method includes step allowing access to the web request.

With respect to the rate limiter client on the network device may make the allowance or denial determination. The rate limiter client may thereby allow the network device to perform the web service or if denied may deny the web service request or could in another embodiment send a denial of service or other type of notification to the client .

Thereby through the steps of the flowchart of the system of is operative to limit a number of web service calls in accordance with one embodiment of the present invention. The system may also execute additional embodiments to limit the number of web service calls including for example performing additional processing operations in the rate limit client or the rate limiter server . For example one embodiment may include executing a hashing algorithm using the key data extracted from the web request.

In another embodiment the rate limiter client may perform a roll up operation based on multiple keys. In the roll up embodiment rate limiting is performed based on a grouping of keys as well as on the individual keys. In this embodiment the server inspects every request key to determine whether it is a rollup key or a normal key. If it is a normal key limit provisioning as described above can be performed. If the key is a roll up key the server may aggregate the request against the key to which it rolls up and then do the limiting.

Attached hereto in the Appendix as exemplary source code algorithms for operations described herein. The operations of the source code are also generally reflected in the flowcharts of described below. The source code of the Appendix also includes variable definitions as used in the description below and the accompanying figures. For terminology purposes the partitions as described herein can be equivalent to the rate limiter servers described above.

A first step step is a checklimit web request call command in response to the web service request typically received from a client device. A next step step is to generate various fields such as List List and List wherein List is based on extracted keys from the web request List is based on the called function createPartitionList list and the List used list and list to compose a message which is subsequently sent to the rate limiter clients.

A next step step is to define partition as a null value. Thereby in decision step a determination is made if a partition is left in list to which send messages. If the answer is in the affirmative step includes updating the partition status and step is to update the partition to the next value in the list and reverting back to determination step .

If the answer to the inquiry of step is in the negative a next decision query is if all partition status equal ok. If no inquiry step is to determine if there is a data mismatch. If no inquiry step is to determine if there is a new counter request. If the yes to step a next step is to allow the request step .

Referring back to step the data mismatch inquiry if the data is mismatched a next step is to find a common partition using list and higher counter from . A next step includes defining list as being equal to redistributeKeys list .

Inquiry step determines if the list is empty. If no step is to parse from List to get limit and counter value. In inquiry step a determination is made if the limit is greater then the counter value. If no which means that the number of allowed requests has been exceeded the request is denied step . If yes indicating that the maximum number of requests has not been reached step allows the request.

Reverting back to the inquiry of step if the determination is that there is a new counter request the method proceeds to step wherein is equal to queryPartition list list . In step if the is empty the method proceeds to step but if the answer is in the negative step includes definining list as being equal to redistributeKeys list empty .

In step another determination is made if list is empty. If yes the method proceeds to step to allow the request. If the answer is in the negative the next step includes to delete counter information from the partition which gave . Thereupon the method proceeds to step as described above.

Inquiry step determines if the list has two distinct partitions. If yes step defines a new list of partitions as a new list of partitions using the first two elements of list. Step is to return the new list of partition values new list . If the answer in step is no the next step is to define a new list of partitions with two elements where a first element is the duplicate in the list a second element is duplicate plus a one modulo number of partitions. Thereupon the methodology reverts again to step to return the new list of partition values.

Inquiry step determines if the partition left in list to send messages to. If no meaning all messages including the hashed keys have been transmitted step is to return an empty. If the response to step is yes step is to define partition status reply as being equal to handleRequest list .

Inquiry step determines if partition status is ok and the reply has a counter value in it. If yes step is to return and if no step is to define partition as the next partition from the list of partitions.

If the inquiry of step is in the negative step is to define list using to create fail over message which will actually distribute the lost information due to node failure in another node. Thereupon the algorithm continues to step described above.

From step inquiry step determines if the are any partitions left in list to send a message to. If yes step is to update partition status and define the reply based on the handleRequest list and add reply to the list. Step includes incrementing to the next partition in the list.

If the answer to step is no meaning that all messages have been sent to corresponding partitions step is in the inquiry if the all partition status is ok. If yes step includes returning list and if the answer no step returns empty list.

Step determines if there is a key left in the key list. If yes step determines whether the key is provisioned and retrieves the limits value. In step if the limit is not empty step includes storing key and its associated limit in a list of keys and its limits. Step is the iterative step to increment the key value whereupon the method reverts back to step .

Reverting back to step if the message is not equal to step determines if is equal to . If yes step includes updating the counter for list and update partition metadata. If no step is a determination if is equal to . If no step includes sending an error reply. If yes step is to return counter values and their limits for the list of keys. Step thereby includes sending reply that includes limit and counter values.

Reverting back to step if there are no keys left in the list the next step is to determine if the key plus limits are an empty set. If no step includes finding a priority key among a list of key and limits defining a limit for a priority key from the list cache the with its associated and increment the counter value for the priority key value. Thereupon the method continues to step to send the reply including limit and counter values.

If the inquiry to step is in the affirmative step defines the prioritykey value based on a priority key among the list of key values define the limit as a default limit and increment the counter for the priority key. Thereupon the method continues to step as described above.

In software implementations computer software e.g. programs or other instructions and or data is stored on a machine readable medium as part of a computer program product and is loaded into a computer system or other device or machine via a removable storage drive hard drive or communications interface. Computer programs also called computer control logic or computer readable program code are stored in a main and or secondary memory and executed by one or more processors controllers or the like to cause the one or more processors to perform the functions of the invention as described herein. In this document the terms memory and or storage device may be used to generally refer to media such as a random access memory RAM a read only memory ROM a removable storage unit e.g. a magnetic or optical disc flash memory device or the like a hard disk electronic electromagnetic optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. or the like.

Notably the figures and examples above are not meant to limit the scope of the present invention to a single embodiment as other embodiments are possible by way of interchange of some or all of the described or illustrated elements. Moreover where certain elements of the present invention can be partially or fully implemented using known components only those portions of such known components that are necessary for an understanding of the present invention are described and detailed descriptions of other portions of such known components are omitted so as not to obscure the invention. In the present specification an embodiment showing a singular component should not necessarily be limited to other embodiments including a plurality of the same component and vice versa unless explicitly stated otherwise herein. Moreover applicants do not intend for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such. Further the present invention encompasses present and future known equivalents to the known components referred to herein by way of illustration.

The foregoing description of the specific embodiments so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the relevant art s including the contents of the documents cited and incorporated by reference herein readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Such adaptations and modifications are therefore intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance presented herein in combination with the knowledge of one skilled in the relevant art s .

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example and not limitation. It would be apparent to one skilled in the relevant art s that various changes in form and detail could be made therein without departing from the spirit and scope of the invention. Thus the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

