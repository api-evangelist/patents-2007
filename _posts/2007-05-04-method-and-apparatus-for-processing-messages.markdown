---

title: Method and apparatus for processing messages
abstract: A memory stores a file attached to a message generated by using a structure language. Data containing an element contained in the message to which information for obtaining type information and a file referred by the element are obtained from the memory is added is constructed. This data has a construction corresponding to an application programming interface for the structured language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024375&OS=08024375&RS=08024375
owner: Canon Kabushiki Kaisha
number: 08024375
owner_city: Tokyo
owner_country: JP
publication_date: 20070504
---
In recent times various services are provided through computer networks. Currently web service related techniques are attracting attention. A Web Service is a mechanism for allowing computers to dynamically exchange data by using various protocols typified by HTTP without manual operation. In a Web Service SOAP messages flow on a communication protocol to allow various computer devices built in devices and the like to simultaneously receive different pieces of information.

Since a SOAP message is generated in Extensible Markup Language XML some contrivance is required to transmit binary data such as image data. In general the following methods are used a method of converting binary data into a character string on the basis of base64 or the like and embedding the converted data in XML to be referred to as the character string conversion method hereinafter and a method using an attached file such as a MIME multi part file to be referred to as the file attachment method hereinafter.

The character string conversion method has a problem in that it requires a processing time overhead to convert binary data into a character string or to convert a character string back into binary data depending on the size of the binary data. Therefore the latter file attachment method is more generally used to transmit or receive large volume binary data together with a SOAP message.

The file attachment method transmits a SOAP message and an attached file as one message via a communication protocol such as HTTP. Note that the message is segmented into a SOAP message fragment and an attached file fragment by a delimiter character string that is determined by a specification. When attaching an attached file the file attachment method can attach binary data to a message without requiring conversion. The file attachment method therefore need not perform processing such as converting binary data into a character string or restoring binary data from a character string and hence has a advantage of high processing efficiency compared with the character string conversion method.

In the file attachment method a SOAP message moving over the communication protocol is packaged in a non XML format as a message format for attached files e.g. the MIME multi part format. For this reason applications and libraries designed to handle only XML cannot process messages based on the file attachment method. In addition according to specifications designed to handle only XML such as WS BPEL or XPath as well a message generated by the file attachment method does not have a structure as an XML structure as a whole and hence some inconvenience occurs.

In general a program library or the like which handles XML is programmed by using a Document Object Model DOM interface as defined by W3C. A DOM interface is an interface standardized to allow access from a program to XML data. A program or library that supports a DOM interface can directly exchange data or can easily convert data and use the resultant data even though it cannot directly exchange the data.

A DOM interface can perform processing by tracking back an XML tree structure and hence can be used for XML for general purposes. However as described above a message with an attached file has a SOAP message contained in part of the content but expresses an attached file as a MIME multi part file as a whole. Hence it is generally impossible to operate the overall message by using the DOM interface. In such a case in general an attached file is separated from a SOAP message to allow to handle only the SOAP message portion as an XML data by using the DOM interface.

As described above when large volume binary data such as image data is to be handled in a Web Service communication is generally performed with minimum processing overhead by using the file attachment method. This method however allows using a DOM interface only for a SOAP message separated from a message in for example the MIME multi part format. That is the method allows using a DOM interface based on a general XML processing method for only a part of a message. Inability to use DOM amounts to inability to use general purpose libraries. This leads to a considerable deterioration in the reuse efficiency of a program. In addition this causes inconvenience in the WS BPEL specifications the XPath specifications and the like based on the assumption that they handle XML. Therefore handling binary data in messaging using SOAP leads to a considerable increase in development load.

The present invention provides an apparatus and method which allow using a standard Application Programming Interface API to an overall message while using the file attachment method.

According to another aspect the present invention provides a processing method of processing a message generated by using a structured language which comprises the steps of storing a file attached to the message in a memory and constructing data having construction corresponding to an application programming interface for the structured language and including the element included in the message to which type information and information for obtaining from the memory the file referred by the element is added.

According to still another aspect the present invention provides a generating method of generating a message with an attached file from data having a data structure corresponding to an application interface for a structured language the method comprising the steps of obtaining content data referred by an element included in the data and generating from the element a message by using the structured language in which the acquired content data is embedded as an attached file and information for referring to the attached file is recorded in an element which refers to the content data.

According to still another aspect the present invention provides a processing apparatus which processes a message generated by using a structured language the apparatus comprising a storing unit adapted to store a file attached to the message and a constructing unit adapted to construct data having construction corresponding to an application programming interface for the structured language and including the element included in the message to which type information and information for obtaining from the memory the file referred by the element is added.

According to still another aspect the present invention provides a generating apparatus which generates a message with an attached file from data having a data structure corresponding to an application interface for a structured language the apparatus comprising an obtaining unit adapted to obtain content data referred by an element included the data and a generating unit adapted to generate from the element a message by using the structured language in which the acquired content data is embedded as an attached file and information for referring to the attached file is recorded in an element which refers to the content data.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

A preferred embodiment of the present invention will be described below with reference to the accompanying drawings.

Referring to reference numeral denotes a CRT which displays information of data under processing by an application program various kinds of message menus and the like a video RAM to be referred to as a VRAM hereinafter in which an image to be displayed on the screen of the CRT is drawn and a keyboard and a pointing device respectively which are used for example to input characters and the like in predetermined fields on a window and point icons and buttons on a GUI and a CPU which controls the overall apparatus.

Reference numeral denotes a ROM storing processing procedures programs for the CPU . Note that the ROM also stores application programs associated with data processing an error processing program and programs associated with the flowcharts to be described later. Reference numeral denotes a RAM which is used as a work area used when the CPU executes various kinds of programs and as a temporary save area at the time of error processing.

Reference numeral denotes a hard disk drive to be referred to as an HDD hereinafter and a floppy disk drive to be referred to as an FDD hereinafter . The respective disks are used to store and read application programs data libraries and the like. It suffices to provide an optical or magnetic disk drive such as a CD ROM MO or DVD a magnetic tape drive such as a tape streamer or DDS and the like in place of or in addition to an FDD.

Reference numeral denotes a network interface for connecting the apparatus to a network and an I O bus comprising an address bus data bus and control bus which connects the above units to each other. The CPU implements the processes to be described below by executing the programs stored in the ROM . Alternatively the CPU may implement the processes by executing the programs loaded from the HDD or the FDD into the RAM .

The server executes the Web Service in accordance with the SOAP message from the client and returns a SOAP message as a result of the execution to the client . In this case it may sometimes be necessary to attach a binary file to the SOAP message .

Each of the SOAP messages and is one of XML documents. Since an XML document is obtained by expressing structured data in the form of a text it is essentially impossible to embed binary data in XML. As described above therefore binary data is added by using either the character string conversion method or the file attachment method. According to the file attachment method since binary data is attached as a binary file by using the MIME multi part format or the like there is no need to convert the binary data into a character string. On the other hand as described above if an attached file format such as the MIME multi part format is used the resultant data structure differs from the XML data structure. This makes it impossible to use API such as DOM corresponding to XML. This embodiment exemplifies a SOAP message processing method which compensates for such a drawback. Note that a SOAP message based on the file attachment method will be referred to as a SOAP message with an attached file.

A communication protocol processing unit transmits receives a communication protocol on which a SOAP message such as an HTTP message is placed. The communication protocol processing unit performs processing such as separating a received SOAP message with an attached file into a message body and a message header or the like and transfers the SOAP message to a SOAP message processing unit .

The SOAP message processing unit develops the SOAP message into a data model structure to be described later and converts data having a data model structure into a SOAP message. The SOAP message developed into a data model structure by the SOAP message processing unit is transferred to an application processing unit .

The application processing unit executes the processing which the server provides as a Web Service with respect to the SOAP message transferred from the SOAP message processing unit and transfers the result to the SOAP message processing unit .

The SOAP message processing unit converts the data of the data model structure transferred from the application processing unit into a SOAP message a SOAP message with an attached file . The message converted into the SOAP message is returned to the communication protocol processing unit and is transmitted returned to the client by using a communication protocol such as HTTP.

A SOAP message reception unit receives a SOAP message from the communication protocol processing unit and transfers it to a data model construction unit . The data model construction unit renders the SOAP message in the text format received from the SOAP message reception unit in a memory M as a data model having a data structure to be described later. In this case the data model construction unit adds type information to each element of the SOAP message on the basis of the type information registered in advance in a data type management unit . If the SOAP message sent from the SOAP message reception unit is a SOAP message with an attached file the data model construction unit separates the attached filed from the message. The data model construction unit then stores the separated attached file in a temporary save area and registers information indicating the relation between the save location of the attached file and the Content ID of the attached file in an attached file management unit . Assume that the RAM includes the temporary save area attached file management unit data type management unit and memory M.

The application processing unit receives the data constructed by the data model construction unit and performs service processing provided by the server . The application processing unit then sends the processing result to a SOAP message with attached file construction unit . The SOAP message with attached file construction unit specifies the location of the attached file from the attached file information or Content ID written in the data model received from the application processing unit by using the attached file management unit . The SOAP message with attached file construction unit acquires the specified attached file from the temporary save area . The SOAP message with attached file construction unit reshapes the SOAP message into a message in the data format of the attached file and transmits the reshaped SOAP message to a SOAP message transmission unit . The SOAP message transmission unit transfers the message received from the SOAP message with attached file construction unit to the communication protocol processing unit . The communication protocol processing unit replies to the SOAP message transmitted from the client by transmitting this SOAP message to the client.

In step S the data model construction unit determines the type of each element contained in the SOAP body of the separated SOAP message by referring to the information registered in advance in the data type management unit . The data model construction unit then constructs data complying with the DOM interface which holds type information along the data structure of the above data model data having a structure corresponding to the DOM interface holding this type information step S . The data model constructed in the above manner has type information added to each element.

The data model construction unit then checks the constructed data model to determine whether it contains any attached file type element step S . Upon determining that the model contains an attached file type element the data model construction unit checks the save location of the content attached file having the Content ID of the element by referring to the attached file management unit . The data model construction unit then associates the save location as the instance of the File class with the attached file type element step S . For example as shown in type information indicating an attached file format is added to each of the elements and . The data model construction unit therefore acquires the save locations of the respective contents attached files in the temporary save area from the attached file management unit in accordance with the Content IDs example1 and example2 of the respective elements and associates the save locations as instances and . Note that the Content IDs example1 and example2 may be written as the instances and . If the data model contains no attached file type element the process skips step S and advances to step S.

The data model construction unit generates a data model and transfers it to the application processing unit in the above manner. An application can process a SOAP message according to the same procedure as that of XML using a general DOM in accordance with a data model which complies with a DOM interface and to which attached file information is added by using an extension portion.

Although a new type based on an XML schema may be defined as an attached file type the swaRef type defined by WS I Attachment Profile may replace this. That is an attached file reference of the swaRef type can be used in a SOAP message. Using the swaRef type allows messaging of an attached file complying with WS I Attachment Profile.

Processing by the SOAP message with attached file construction unit will be described next. is a flowchart showing a control procedure for the SOAP message with attached file construction unit shown in .

Upon receiving a data model from the application processing unit the SOAP message with attached file construction unit acquires XML information from a DOM interface and converts the data model into an XML character string step S . The SOAP message with attached file construction unit then adds the data converted into the XML character string to the envelope of a SOAP message to construct a general SOAP message step S . For example upon receiving the data of a data model structure like that shown in the SOAP message with attached file construction unit converts this into XML data to generate the SOAP body . The SOAP message with attached file construction unit then inserts the generated SOAP body in the envelope of the SOAP message to generate the SOAP message . At this point of time Content IDs are written in elements and for file reference in accordance with the instances and in . Note that if Content IDs are written in the instances and they are used without any change. If the save locations of data attached files are written in the instances and the Content IDs of attached files corresponding to the save locations are acquired from the attached file management unit and written in the elements and .

The SOAP message with attached file construction unit then discriminates the data type of each element of the received data model and discriminates whether there is any attached file type element step S . Upon determining that there is an attached file type element the SOAP message with attached file construction unit adds the SOAP message constructed in step S to the attached data file format e.g. MIME multi part format data step S . The SOAP message with attached file construction unit then acquires the save location of a content file of the Content ID designated by the attached file format element from the attached file management unit . The SOAP message with attached file construction unit acquires the corresponding content from the temporary save area in accordance with the acquired save location and adds the acquired content as an attached file to the above attached file format data. In this manner a SOAP message in the attached file format is constructed. The SOAP message transmission unit then transfers the SOAP message constructed by the SOAP message with attached file construction unit to the communication protocol processing unit step S .

For example as shown in if there are attached file type elements and the SOAP message with attached file construction unit embeds the SOAP message in the SOAP message with the attached file. In this case if the IDs Content IDs of contents are registered in the instances and the save locations of the contents attached files corresponding to the Content IDs can be acquired by referring to the attached file management unit . The SOAP message with attached file construction unit acquires the entities of the contents from the save locations and embeds them as attached files and in the SOAP message with the attached file together with the Content IDs and . In addition if save locations are written in the instances and the SOAP message with attached file construction unit can acquire contents from the save locations and embed them as the attached files and in the SOAP message with the attached file. In this case Content IDs corresponding to the save locations are acquired from the attached file management unit and are written as the Content IDs and of the message .

If the data model includes no attached file type element the SOAP message with attached file construction unit does not process the SOAP message into a message in the attached file format. That is the SOAP message with attached file construction unit transfers the SOAP message generated in step S to the SOAP message transmission unit without any change. The SOAP message transmission unit transfers this SOAP message to the communication protocol processing unit step S .

The communication protocol processing unit transmits the SOAP message or the SOAP message with the attached file constructed in the above manner to the client. In this manner a general SOAP message or a SOAP message with an attached file can be returned to the client.

Executing the control procedure shown in the flowcharts of makes it possible to operate a SOAP message with an attached file by using for example a DOM interface without converting binary data into a characteristic string.

The data processing method according to this embodiment can link binary data to the inside of a data model having a DOM interface. This makes it possible to execute a Web Service with respect to a SOAP message with an attached file by using an interface which processes DOM as a general XML processing method without spending any overhead like conversion of binary data into a character string. In addition this embodiment allows to use an external library having a DOM interface without changing the data model.

As has been described above the above embodiment can implement a Web Service system suitable for handling binary files by using SOAP messages with attached files. According to the above embodiment when a server provides a Web Service function by using a SOAP message with a binary file a general purpose XML processing method can be used.

Note that the above embodiment has been described by using XML as a structured language on a text basis SOAP as a message exchange protocol based on a structured language on a text basis and DOM as an API corresponding to a structured language on a text basis.

The object of the present invention is achieved even by supplying a storage medium storing software program codes for implementing the functions of the above embodiment to a system or apparatus and causing the computer or CPU or MPU of the system or apparatus to read out and execute the program codes stored in the storage medium. In this case the program codes read out from the storage medium implement the functions of the above embodiment by themselves and the storage medium storing the program codes constitutes the present invention.

As a storage medium for supplying the program codes a flexible disk hard disk optical disk magnetooptical disk CD ROM CD R magnetic tape nonvolatile memory card ROM DVD or the like can be used.

The functions of the above embodiment are implemented not only when the readout program codes are executed by the computer but also when the OS Operating System running on the computer performs part or all of actual processing on the basis of the instructions of the program codes.

The functions of the above embodiment are also implemented when the program codes read out from the storage medium are written in the memory of a function expansion board inserted into the computer or a function expansion unit connecting to the computer and the CPU of the function expansion board or function expansion unit performs part or all of actual processing on the basis of the instructions of the program codes.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2006 134448 filed May 12 2006 which is hereby incorporated by reference herein in its entirety.

