---

title: Methods and systems for porting software packages from one format to another
abstract: An RPM subsystem can be installed on a system that has its own native packaging subsystem. The RPM subsystem is initially delivered as a package wrapped in the non-RPM format of the native packaging system and installed. When an RPM package is installed, the RPM subsystem is also configured to create a stub entry in the native packaging, non-RPM system. The stub entry may contain the normal package information, such as name, version, description, as well as a list of files contained in a package. The stub may also contain uninstallation logic, which serves as a “callback” into the RPM subsystem during package removal and causes the RPM subsystem to remove the package when invoked. Removal of a RPM package via RPM tools also causes the removal of the stub entry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185889&OS=08185889&RS=08185889
owner: Red Hat, Inc.
number: 08185889
owner_city: Raleigh
owner_country: US
publication_date: 20070619
---
Embodiments of the present invention relate to software packaging and more specifically to cross platform software package generation.

Package management systems and installers are used to automate the process of installing updating configuring and removing software packages from a computer. Package management systems are typically a part of an operating system and use a single installation database such that users can verify and manage all packages on the system. An installer on the other hand is bundled with a particular software package and manages only that software package with which it is bundled.

A software package includes one or more files that are necessary to execute a computer program or add features to a pre installed program. In addition to the software itself packages also contain other important information such as the program name a description of its purpose the version number and the vendor. Packages also often include a list of dependencies which identify other packages that are required for the software to run properly.

Software packages can be configured in many different package formats depending on the operating systems on which they will be used. Many operating systems use standardized package formats that are native to that operating system otherwise known as native software packages. The use of such native software packages is typically limited to a single operating system. Current mechanisms for re packaging software into a format supporting a different operating system are cumbersome to use and require significant user interaction.

Therefore it would be desirable to provide methods and systems that allow packages to be generated in the native format of the target operating system.

The present invention provides for installing an RPM subsystem on a system that has its own native packaging subsystem. The RPM subsystem is initially delivered as a package wrapped in the non RPM format of the native packaging system and installed. An administrator may then install RPM packages using the RPM tools of the RPM subsystem. When an RPM package is installed the RPM subsystem is also configured to create a stub entry in the native packaging non RPM system. The stub entry may contain the normal package information such as name version description as well as a list of files contained in a package. The stub may also contain uninstallation logic which serves as a callback into the RPM subsystem during package removal and causes the RPM subsystem to remove the package when invoked. Removal of a RPM package via RPM tools also causes the removal of the stub entry. Accordingly both the RPM subsystem and native packaging non RPM subsystem may have consistent states.

Of note the present invention has several advantages over known technologies. For example developers need not build multiple package formats. Instead the present invention allows the developer to build packages using RPM tools yet allow for cross compatibility on systems with non RPM subsystems. The present invention also allows RPM packages to depend on non RPM packages. Alternatively non RPM packages may now depend on RPM packages by using a dependency that points to the stub entry created by the RPM subsystem. The present invention allows RPM packaging tools to now manage non RPM packages. For example RPM tools may now be capable of querying and listing installed packages on both the RPM and non RPM subsystems. Alternatively if desired the native packaging non RPM subsystem may employ its own tools to now manage RPM packages.

In the following description numerous specific details are set forth such as examples of specific systems languages components etc. in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that these specific details need not be employed to practice the present invention. In other instances well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the present invention.

Reference will now be made in detail to the exemplary embodiments of the invention which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. is provided to illustrate the typical structure of a client or server computer in which the present invention may be employed. illustrates an overall system architecture for porting non RPM packages via RPM packages. Finally illustrates a general process flow for installing a non RPM package via the RPM package manager system. These figures will now be described in turn.

The components shown in are merely exemplary. Those skilled in the art will recognize that various components may be added or removed from computer based on its function and use. For example computer may be employed as a client or server computer. For purposes of illustration the present disclosure describes computer implementing a typical Linux installation for its operating system. Such types of implementations are well known. However one skilled in the art will also recognize that other operating systems such as Microsoft Windows Sun Solaris HP UX AIX and UNIX are also within the principles of the present invention.

Build system is a suite of tools designed to assist in making various source code packages for UNIX and Linux systems. Build system may be implemented using well known software. For example the GNU project provides the well known GNU build system that is widely used in many UNIX and Linux packages. Build system provides an environment to a software developer which allows them to assemble and build packages of software.

In the present invention build system may be configured to build an RPM package. In some embodiments this process uses scripting. Scripting may be used to automate the wide variety of tasks such as packaging binary code running tests and deployment to production systems. Of course one skilled in the art will recognize that a developer using build system may perform these tasks manually or a combination of manual tasks with automated scripts.

Computer is the target of the package built by build system and is further shown comprising a host operating system a RPM package manager system a RPM database a non RPM package management system a non RPM package database . These components will now be further described.

Operating system is the set of programs that manage the resources of computer such as the hardware resources shown in . For example operating system performs basic tasks such as controlling and allocating memory prioritizing system requests controlling input and output devices facilitating network connections and managing file systems. Several operating systems are well known such as Windows from the Microsoft Corporation Mac OS from Apple Computer Inc. and UNIX. For purposes of illustration the present disclosure explains the present invention as it would be applied to the Linux operating system.

In order to install software on computer where operating system is Linux computer may further comprise Linux package management software. In particular computer may be configured to utilize Linux RPM packages and the RPM package manager system. RPM refers to both to a software package file format and a software tool which installs updates uninstalls verifies and queries software packaged in this format. RPM was intended primarily for Linux distribution however RPM is used in other operating systems such as Novell s NetWare and IBM s AIX. Therefore those skilled in the art will recognize that the present invention may be applied to many different operating systems.

RPM package manager system is a collection of tools to automate the process of installing upgrading configuring and removing software packages such as RPM packages. RPM packages are usually encapsulated into a single file. As well as the software itself RPM packages often include other important information such as the full name a description of its purpose the version number vendor of the software checksum information and a list of other packages known as dependencies that are required for the software to run properly.

In some embodiments RPM package manager system is a subsystem installed on computer system . For example RPM package manager system may be installed and configured as a subsystem to another native packaging system that utilizes a non RPM format such as HP UX AIX and the like. Thus RPM package manager system could initially be delivered to system within a non RPM package which is then installed on system . Once installed however an administrator of system could use the tools of RPM package manager system to install RPM packages in accordance with the present invention.

RPM database is a database containing all of the meta information of the installed RPMs and may comprise other multiple databases used for indexing purposes. RPM database is used to keep track of all files that are changed and created when a user installs a program on computer and thus allows RPM system to upgrade or remove packages.

Non RPM package management system refers to any non RPM package management system installed . For example non RPM package management system may be any of a wide variety of package management systems that are in common use today. For example non RPM package management system may be a Solaris HP UX or Microsoft .NET system.

Non RPM package database refers to any non RPM package database. Such databases are well known to those skilled in the art.

In phase build system prepares an RPM package . For example build system may execute a series of scripts to collect a set of one or more files to create RPM package .

In addition RPM build system may create a spec file to indicate the contents of RPM package and logic for porting RPM package to non RPM package system . The spec file provides information describing how RPM package was created. Spec files end in the .spec extension and contain the package name version RPM revision number steps to build install and clean a package and a changelog. Of note multiple packages can be built from a single RPM spec file if desired.

In phase RPM build system provides RPM package to computer . RPM build system may deploy RPM package in various ways. For example computer may download RPM package directly from build system . Alternatively RPM build system may save RPM package to one or more repositories which are accessible to computer . Processing may then flow to phase .

In phase computer receives RPM package and begins processing it for installation. Within computer RPM package manager system reads and parses RPM package . For example RPM package may comprise various sections. The lead section identifies RPM package as an RPM file and contains header information. A signature section can also be used by RPM package manager system to ensure integrity and or authenticity of RPM package . A header contains meta information about RPM package including package name version architecture file list etc.

In response to receiving RPM package RPM package manager system writes an entry into RPM database . In some embodiments RPM package manager system writes a typical entry into RPM database . For example the entry may comprise information such as a name version and description of files contained in RPM package .

In phase RPM package manager is also configured create a stub package that emulates RPM package in the native packaging non RPM format of non RPM package system . and provides this stub package to non RPM package system . RPM package manager system may interface with non RPM package system utilizing an application programming interface or a script.

In phase non RPM package system then writes a stub entry which essentially corresponds to the entry in RPM database for RPM package . The stub entry simulates an entry for an actual RPM package and thus may comprise various information typical for tracking and maintaining non RPM package as if it were a RPM package. For example the stub entry may comprise information such as a name version and a description of the files contained in RPM package . In addition stub entry may comprise logic a piece of code or script that may be used to interface with the native packaging package system of non RPM package . This logic or code may be provided to serve as uninstallation logic or callback into RPM package manager and vice versa. Thus if RPM package manager removes RPM package then the stub entry in non RPM database would also be removed. Likewise if non RPM package system removes the stub entry then the uninstallation logic would invoke the uninstallation tools of RPM package system .

Meanwhile in phase RPM package system installs RPM package into operating system . During installation RPM package system puts the program in RPM package so that it can be executed. This processing typically entails unpacking the code in RPM package configuring computer to store the relevant files. RPM package system may also change various settings so that the program can operate correctly. For example common operations performed during software installations include creation or modification of shared and non shared program files folders and directories configuration file entries and environment variables.

Of note the present invention allows for cross dependencies between RPM and non RPM packages. For example with the present invention RPM package may contain dependencies to non RPM packages. Likewise non RPM packages may contain dependencies to RPM packages through use of the stub entry. Furthermore RPM package manager system may manage non RPM packages or non RPM package manager system manage RPM packages in accordance with the present invention.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. For example as noted above one skilled in the art will recognize that the present invention eases management of upgrades and deinstallation. In particular a user could request deinstallation of RPM package based on its stub entry. RPM package manager may then interface or initiate non RPM package management system to complete the deinstallation. This allows a user of computer to utilize RPM package manager as a single point of control for non RPM packages as well as RPM packages. Nonetheless it is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

