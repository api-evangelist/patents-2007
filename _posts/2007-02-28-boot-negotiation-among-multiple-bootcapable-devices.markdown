---

title: Boot negotiation among multiple boot-capable devices
abstract: A first device discovers the capabilities of a second device. The first device determines which of the first device and the second device is to execute a controlling boot image based at least in part on the capabilities of the first device and the second device. A first boot image is executed by the first device when the first device is determined to execute the controlling boot image, the second device to be a resource for the first boot image. The first device sends a second boot image stored on the first device to the second device when the second device is determined to execute the controlling boot image, wherein the first device to be a resource for the second boot image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818559&OS=07818559&RS=07818559
owner: Microsoft Corporation
number: 07818559
owner_city: Redmond
owner_country: US
publication_date: 20070228
---
Mobile devices are often connected to other computing devices. Traditionally the relationship between the devices is assumed before the devices are connected. For example when a user connects a mobile phone to a personal computer the assumption is often that the personal computer acts as a host to the mobile phone. Current systems do not negotiate the roles of devices based on the capabilities of the devices.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the invention enable multiple boot capable devices to determine which device will execute a controlling boot image based on boot negotiations. The remaining device may serve as a resource for the controlling boot image. The boot determination may be based on each device s resources predefined policies and or user interaction.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth the functions of the examples and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

In the following description and claims the term coupled and its derivatives may be used. Coupled may mean that two or more elements are in contact physically electrically magnetically optically etc. . Coupled may also mean two or more elements are not in contact with each other but still cooperate or interact with each other for example communicatively coupled .

Dock may include a processing unit and memory . Dock also includes a communication connection for inputting outputting data from mobile device . Dock may also include storage such as a Hard Disk Drive HDD or flash memory.

Dock may include Non Volatile Storage NVS such as ROM flash memory and the like. NVS may have stored firmware F W for execution on processing unit . In one embodiment firmware includes instructions for preboot routines prior to an Operating System OS load and execution on dock . Firmware may also include low level input output instructions for communicating with devices of dock during OS runtime. Firmware may also be referred to as a Basic Input Output System BIOS .

In typical architecture the initialization and configuration of a computing device is commonly referred to as the preboot phase. The preboot phase is generally defined as firmware that executes between the processor reset and the first instruction of the Operating System OS loader. The instructions that execute during preboot are often referred to as the Basic Input Output System BIOS . At the start of preboot it is up to the instructions in the firmware to initialize the system to the point that an OS loaded off of media such as a hard disk can take over. The start of the OS load begins the period commonly referred to as OS runtime. The instructions for implementing the OS and or applications may be referred to as a boot image.

During OS runtime the BIOS may act as an interface between software and hardware components of a computer system. The operational environment between the OS level and the hardware level is generally referred to as the BIOS sometimes referred to as the firmware environment . Also OS activity may be suspended when the OS enters a sleep state such as a sleep state defined in the Advanced Configuration and Power Interface ACPI specification. The BIOS may be involved in waking the OS from a sleep state.

Referring to mobile device in one embodiment mobile device may include a free standing computing device such as a mobile phone a media player and the like. In another embodiment mobile device may include a host dependent mobile device such as a Universal Serial Bus USB Flash Drive a memory card a smart card and the like. As used herein host dependent refers to a mobile device that may not be utilized unless the mobile device is connected to a host.

Mobile device may include a controller coupled to storage . Controller may manage the reading writing of data on storage as well as perform other functions. Storage may include a magnetic disc drive an optical drive non volatile storage such as flash memory and the like. Mobile device may also include one or more communication connections for connecting mobile device to other computing devices.

Connection may include a wired or a wireless connection between dock at communication connection and mobile device at communication connection . In one embodiment dock and mobile device are in close proximity to one another as part of a user s Personal Area Network PAN . Examples of connection include USB wired or wireless firewire IEEE 1394 radio frequency e.g. Bluetooth Wi Fi etc. infrared and the like.

Turning to an embodiment of mobile device is shown. Controller may include a processing unit and Non Volatile Storage NVS . Processing unit may include a general processor such as a 32 bit Reduced Instruction Set Computing RISC processor. While a single processing unit is shown embodiments of mobile device may include multiple processing units such as multiple processors multiple cores and the like. In one embodiment controller may include dedicated circuitry not shown for conducting specialized operations such as cryptography digital rights management digital signal processing and the like.

In one embodiment NVS has stored firmware that may be executed by processing unit . Firmware may include a device boot image. The device boot image may include an operating system such as a Real Time Operating System RTOS one or more applications and the like for execution on mobile device . Firmware may also include instructions for executing embodiments of the invention.

The embodiment of shows storage divided into partition and partition . One skilled in the art having the benefit of this description will understand that storage may include more than two partitions. Partition includes instructions and or data for mobile device such as device data . Mobile device may run software natively or in a virtual machine. Security measures may be used to protect access to partition by connected computing devices such as dock .

Partition may include instructions and or data for use by another computing device such as dock . shows partition having boot images and . A boot image may include instructions for executing an OS and or applications on a computing device. Example boot images include a Microsoft Windows OS and or Office applications a .NET Framework environment a Java environment and the like. As described below mobile device may send a boot image to dock for execution on dock . In one embodiment access to partition may be restricted to a circle of trusted docks.

Turning to a flowchart shows the logic and operations of a mobile device and a dock performing a boot negotiation in accordance with an embodiment of the invention. In one embodiment at least a portion of the logic of flowchart may be conducted by device OS of mobile device . The mobile device and the dock come to each other without assumptions about their relationship or about each others capabilities. The determination of which device will execute a controlling boot image is not made until after negotiations have completed.

As used herein controlling boot image refers to the boot image executing on a computing device that may manage at least some of the resources of the other computing device. For example when the dock boots from a boot image provided by the mobile device the dock may use resources of the mobile device such as storage. When the mobile device executes the controlling boot image e.g. the mobile device OS then the mobile device may use the resources of the dock such as the keyboard video monitor and mouse KVM for human input output to the mobile device.

The boot negotiation may be conducted using a negotiation protocol. In one embodiment the negotiation protocol includes a logic level running on a well known physical level protocol. The negotiation protocol may be used for negotiation communications such as reporting resources and their capabilities securing the negotiation session sending boot images from the device to the dock and the like. In one embodiment the boot negotiation between the mobile device and the dock takes place between the BIOS of the dock and the OS of the mobile device discussed further below in conjunction with .

Starting in block of flowchart the device and the dock make an initial connection. For example the device and the dock may be physically connected by a wire they may be brought in physical proximity of one another for a wireless connection or a wireless connection is enabled. In block the device and the dock may perform some handshaking to establish the initial connection. In one embodiment making the initial connection includes establishing a secured connection between the mobile device and the dock.

Proceeding to decision block the device queries the dock to determine if the dock supports boot negotiation as described herein. In one embodiment this query is conducted using a negotiation protocol understood by both device and dock. In one embodiment the dock BIOS conducts the boot negotiations with the mobile device OS. In this way the boot negotiation may be conducted during preboot of the dock without necessity of an OS executing on the dock. The dock BIOS boot negotiation tasks include discovery of the connected mobile device establishing communications in some cases secure communications and reporting the dock s capabilities.

It is noted that the device and the dock do not assume their roles when connected. In some communication systems e.g. USB a connected device may be assumed to always be a device i.e. a slave to another computing device. Similarly computing devices such as a laptop computer may assume to be a host i.e. a master when connected to a USB device. To support boot negotiation the BIOS and hardware components of a computing device allow a connected device to take control. In embodiments herein hardware communications e.g. chipset and BIOS of computing devices make no assumptions about their role e.g. master or slave when connecting to another computing device. As described below embodiments of the invention may include security measures to prevent a rogue device from compromising security of another computing device.

If the answer to decision block is no then the logic proceeds to block . In block the dock and the device will interact with one another using default assumptions. For example if the device is defaulted as a slave device then the device will take the default role of slave device without negotiation. The dock may execute a default boot image it has stored.

If the answer to decision block is yes then the logic continues to block . At block the device and the dock may authenticate each other. In alternative embodiments the authentication may be only one way. For example only the device authenticates the dock or only the dock authenticates the device. The authentication may be implemented using a signature certificate or the well known authenticate schemes.

Continuing to block the device and the dock perform capabilities discovery. In one embodiment the device queries the dock to reports its resources and the resources capabilities using a negotiation protocol as described above. Example capabilities include processing capabilities e.g. processor type processor speed etc. and memory capabilities e.g. memory size memory speed etc. . Capabilities may also include any storage devices their type capacities available storage space file systems and the like. Capabilities may also include the video and or audio capabilities of the dock. Capabilities may also include communication connections and the bandwidth of any such connections.

Referring to a capabilities reporting table in accordance with an embodiment of the invention is shown. In one embodiment the dock BIOS generates table and sends table to the mobile device using the negotiation protocol. The mobile device generates its own capabilities reporting table for comparison to the table received from the dock.

Table includes columns for components attributes for the components and values for those attributes. For example under processor attributes of clock speed L2 cache and bus speed are reported. In one embodiment the information in table may be organized into one or more schemas for passing resource information between the dock and the mobile device. The schema s may be part of the negotiation protocol used by the dock and the mobile device.

After block the logic proceeds to block to determine if the dock is compatible with a boot image stored on the device using the dock s reported capabilities. For example in the logic determines if dock may execute any of boot images stored in mobile device . If the answer to decision block is no then the logic proceeds to block . In one embodiment boot image compatibility may be based on the dock s processor speed memory size video capabilities and the like.

In block the device executes the controlling boot image. In one embodiment the mobile device OS which is already executing adopts the hardware resources of the dock. For example if the dock has a storage device such as a HDD then the dock s HDD is accessible by the mobile device OS. In another example the KVM of a laptop i.e. dock may be used to interact with a mobile phone device.

If the answer to decision block is yes then the logic proceeds to block . In block the logic updates boot policy stored on the mobile device before application of the boot policy in block . In one embodiment the mobile device contacts a central update site such as Microsoft Windows Update. The mobile device may use its own communication connection or a communication connection on the dock to check for updates.

Continuing to block the logic applies boot policy. The policy determines if booting the dock with one or more compatible boot images from the mobile device is complicit with policy. The policy may be modifiable by a user and or system administrator. In one embodiment the policy is stored on the device. In another embodiment policy stored on the dock is passed to the device during boot negotiation. Policy from the device and the dock may be applied in combination.

In one embodiment the capabilities of the device and dock are compared to determine whether the dock or the mobile device will execute the controlling boot image. For example a policy may indicate that the computing device with the faster processor shall always take control. Another policy may analyze a range of capabilities such as processor speed memory size bandwidth capability in determining the controlling machine. For example information from table for the device and the dock may be put into an equation that assigns points to the various components and their attribute values. In the equation some component attributes may be weighted. The computing device mobile device or dock with the highest score is determined to be the computing device to execute the controlling boot image.

In another embodiment the policy may include referring to past user activity for determining whether the dock or the mobile device will execute the controlling boot image. For example if the dock had previously boot from a boot image on the device then the dock is booted again from that boot image.

Policy may also include determining which boot image the dock is to boot from when multiple compatible boot images are stored on the device. In one embodiment the logic determines which boot image will provide the best performance. For example the boot image that will provide the best performance based on the dock s processor speed and memory capacity may be chosen.

In an alternative embodiment all the compatible boot images are displayed to a user. The user may choose the desired boot image for the dock. In one embodiment user selection of the boot image may occur in decision block described below.

At decision block the logic determines if the user confirms the determination of whether the device or the dock is to execute the controlling boot image. In one embodiment a user interface is presented to enable a user to confirm the determination made in block . The user interface may be displayed on the device on the dock or on both. In one embodiment if policy determines the dock is to execute a boot image from the mobile device the device may display the name of the boot image the dock will be booted with. In yet another embodiment if multiple boot images are compatible with the dock then the multiple compatible boot images will be displayed and the user may select the desired boot image for the dock.

At block if the user does not confirm booting the dock then the logic proceeds to block . If the user confirms booting the dock at decision block then the logic continues to block .

In an alternative embodiment user confirmation as described in decision block is not utilized. In this particular embodiment the negotiation process will be concealed from the user. For example a user may connect a mobile phone to a personal computer and push a negotiate button on the mobile phone to initiate negotiations. The negotiation process is conducted. The user may then use the KVM of the personal computer to conduct their business. It is not necessary for the user to realize which computing device is executing the controlling boot image. The boot negotiation may occur transparent to the user.

Turning to in block the device updates the boot image prior to sending the boot image to the dock for execution. In one embodiment the device uses its own communication connection to connect to a network such as the Internet for checking for any updates. In another embodiment the device may use a communication connection of the dock to check for any updates to the boot image.

After block the logic continues to block where the mobile device sends the boot image to the dock. Next in block the dock boots from the boot image. Once the dock is booted with the boot image the device is available to the dock. For example after a laptop dock boots from a boot image stored on a connected mobile phone device the laptop may manage resources of the mobile phone. For example a storage device of the mobile phone may be used by the dock. Security measures may be used to restrict access to some data stored on the device such as in partition by the dock.

Next in block the OS of the mobile device goes to sleep. The mobile device OS may wakeup and re take control of the device when the connection to the dock has been broken and or cannot be re established after a particular threshold. The threshold may include a number of re connect attempts or a predefined amount of time.

Turning to an embodiment of a Virtual Machine VM environment is shown. In a mobile device shown as mobile phone may send a boot image to dock . Dock is executing a VM environment. In dock dock hardware is managed by a Virtual Machine Manager VMM . VMM may support one or more VMs such as VM and VM . VM executes guest OS . In general VMs may be created and torn down as desired in a VM environment. Also each VM operates independently so that a system error in one VM such as an operating system crash does not affect the other VMs.

In accordance with embodiments herein a negotiation may occur between mobile phone and dock while dock is running a VM environment. Mobile phone may send boot image to dock for execution in VM . The execution of boot image is shown as guest OS .

In one example the use of a VM environment allows the use of a boot image from mobile phone without having to boot the entire dock . VM may be created at dock for executing boot image . Further VM may be taken down but VM may remain up when the user has finished with guest OS .

Turning to an embodiment of a mobile phone device and a laptop dock performing boot negotiation is shown. In one embodiment the boot negotiation is conducted using a negotiation protocol. At mobile phone asks laptop if it is negotiation capable. Laptop provides a positive response to mobile phone . At mobile phone and laptop authenticate each other.

At mobile phone queries laptop for its capabilities. At laptop responds by reporting its capabilities. Laptop may report its capabilities using an embodiment of table .

At mobile phone determines whether the boot image executed on mobile phone or a boot image executed on laptop will take control. In exchange mobile device sends a boot image shown at to laptop . In one embodiment mobile device checks for updates to the boot image before sending the boot image to laptop . At laptop executes the boot image from mobile phone . In one embodiment the boot image is executed in a VM environment on laptop .

At the OS of mobile phone goes into a sleep state after sending the boot image to laptop . Thus when the connection between mobile phone and laptop is severed mobile phone may continue operation using its own OS without having to reboot the mobile phone OS.

Alternatively in exchange the OS of mobile phone manages the resources of laptop shown at . Mobile phone may switch its software state to access peripherals on laptop without rebooting the mobile phone OS. For example mobile phone may use the KVM of laptop shown at . When the connection between mobile phone and laptop ends then mobile phone may switch back to using its own input output devices. A reboot of mobile phone is unnecessary.

Turning to usage scenarios in accordance with embodiments of the invention will be described. It will be appreciated that embodiments of the invention are not limited to the scenarios described below. shows a mobile phone i.e. mobile device connected to a Personal Computer PC i.e. dock . shows the boot negotiation process taking place between the mobile phone OS and the PC BIOS .

In one scenario embodiments of the invention may be used in a public computing environment. In some cases the public computing environment may be managed by a telephone company Telco that provides services to both mobile phone and PC . PC may be a public computer at a mall kiosk internet caf or the like.

For example a user with mobile phone in OS runtime approaches PC . PC is currently off. The user places mobile phone within proximity of PC for establishing a wireless connection or connects mobile phone and PC with a cable for a wired connection. The user then turns on PC . The boot negotiation process begins with mobile device OS communicating with PC BIOS . After the boot negotiation the user may use the KVM of PC to interact with mobile device OS or the user may use the KVM of PC to interact with a boot image sent from mobile phone booted on PC . In either case mobile phone may be used for storage by the user. In this way the user may easily take their work with them when they leave the public computer i.e. PC .

In alternative embodiments if PC is in a sleep state or OS runtime when the user begins the negotiation process PC may have to be rebooted to execute a boot image from mobile phone . In yet another embodiment PC may stay in OS runtime and execute a boot image received from mobile phone in a virtual machine environment.

In the Telco usage scenario the user may have one account of minutes that may be used with mobile phone and PC . Also since mobile phone and PC are part of the same Telco network updates to boot policy may be pushed to mobile phone and or PC . Updates to boot images on mobile phone may also be pushed to mobile phone through the Telco network.

In another scenario embodiments of the invention may be used in an organization s managed network such as an enterprise network. Mobile phone and PC are part of the enterprise network. Again a user connects mobile phone to PC and begins the boot negotiation process. The user may then use the KVM of PC to interact with the controlling boot image on mobile phone or on PC .

This enterprise network scenario may be utilized in various ways. Employees may be issued a mobile device such as mobile phone . The employee may then carry various boot images with them that may be used with various PCs in the organization. Also the user always has access to their data since the user s data is centralized on their mobile device instead of being spread across several machines e.g. corporate mobile device and various corporate desktops . Additionally boot policy updates and boot images updates may be easily pushed to mobile phone .

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC a USB connection an infrared port or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

