---

title: Analogy based workflow identification
abstract: A method of creating an analogous workflow is provided. A first workflow is received at a first device, the first workflow including a plurality of first modules that are connected. A second workflow is received at the first device, the second workflow including a plurality of second modules that are connected. A third workflow is received at the first device, the third workflow including a plurality of third modules that are connected. An analogy workflow is determined based on a difference between the received first workflow and the received second workflow. The determined analogy workflow is applied to the received third workflow to define a fourth workflow. The defined fourth workflow is presented to a user at the first device. A method of identifying a workflow of a plurality of workflows is provided. A query workflow is received at a first device, which includes a plurality of modules that are connected. A workflow is identified of a plurality of workflows, the identified workflow at least partially matching the received query workflow. The identified workflow is presented to a user at the first device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060391&OS=08060391&RS=08060391
owner: The University of Utah Research Foundation
number: 08060391
owner_city: Salt Lake City
owner_country: US
publication_date: 20070409
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 790 046 that was filed Apr. 7 2006 the disclosure of which is incorporated by reference in its entirety.

This invention was made with United States government support awarded by the following agency NSF IIS Division Grant No. 0513692. The United States has certain rights in this invention.

The field of the disclosure relates generally to data processing to create results for presentation to a user. More specifically the disclosure relates to the use of a workflow query and or an analogy defined between workflows to rapidly develop new data processing results based on the query and the analogy.

The volume of information has been growing at an exponential rate. Since 2003 new information generated annually exceeds the amount of information created in all previous years. Digital information now makes up more than 90 of all information produced vastly exceeding data generated on paper and film. One of the greatest scientific and engineering challenges of the 21st century is to effectively understand and leverage this growing wealth of data. Computational processes are widely used to analyze understand integrate and transform data. For example to understand trends in multi dimensional data in a data warehouse analysts generally go through an often time consuming process of iteratively drilling down and rolling up through the different axes to find interesting nuggets in the data. Often to mine data several algorithms are applied and results are compared not only among different algorithms but also among different configurations of a given algorithm. To build data warehouses and data marts that integrate data from disparate data sources within an enterprise extraction transformation and loading ETL workflows need to be assembled to create consistent accurate information. Additionally to understand and to accurately model the behavior of environmental components environmental scientists often need to create complex visualization dataflows to compare the visual representations of the actual behavior observed by sensors with the behavior predicted in simulations. Further to improve the quality of a digital photo a user may explore different combinations of filters. As a further example to plan a radiation treatment a radiation oncologist may create a large number of 3 dimensional 3 D visualizations to find a visualization that clearly shows the lesion tissue that requires treatment.

Due to their exploratory nature these tasks involve sometime large numbers of trial and error steps. In an exploratory process users may need to select data and specify the algorithms and visualization techniques used to process and to analyze the data. The analysis specification is adjusted in an iterative process as the user generates explores and evaluates hypotheses associated with the information under study. To successfully analyze and validate various hypotheses it is necessary to pose queries correlate disparate data and create insightful data products of both the simulated processes and observed phenomena. Before users can view and analyze results they need to assemble and execute complex pipelines dataflows by selecting data sets specifying a series of operations to be performed on the data and creating an appropriate visual representation. As an additional factor that contributes to the complexity of these tasks assembling the computational processes may require a combination of loosely coupled resources including specialized libraries grid and Web services that may generate yet more data adding to the overflow of information users need to process.

Workflows are emerging as a paradigm for representing and managing complex computations. Workflows can capture complex analysis processes at various levels of detail and capture the provenance information necessary for reproducibility result publication and result sharing among collaborators. Because of the formalism they provide and the automation they support workflows have the potential to accelerate and to transform the information analysis process. Workflows are rapidly replacing primitive shell scripts as evidenced by the release of Automator by Apple Data Analysis Foundation by Microsoft and Scientific Data Analysis Solution by SGI .

Often insight comes from comparing the results of multiple visualizations created during the exploration process. For example by applying a given visualization process to multiple datasets generated in different simulations by varying the values of certain visualization parameters or by applying different variations of a given process e.g. which use different visualization algorithms to a dataset insight can be gained. The path from data to insight requires a laborious trial and error process where users assemble iteratively modify and execute complex workflows which may include pipelines and or dataflows.

In the course of exploratory studies users often build large collections of workflows which include for example different types of visualizations each of which may help in the understanding of a different aspect of their data. For example a user working on a new computational fluid dynamics application might need a collection of visualizations such as 3 dimensional 3 D isosurface plots 2 dimensional 2 D plots with relevant quantitative information and various direct volume rendering images. Although in general each visualization is implemented in a separate workflow there is a certain amount of overlap between the workflows. For example each workflow may manipulate the same input dataset s . Furthermore for a particular class of visualizations the users might generate several different versions of each individual workflow while fine tuning visualization parameters or experimenting with different data sets. Thus constructing insightful visualizations is a laborious process that requires expertise in both visualization techniques as well as the domain of the data being explored. Therefore what is needed is a method and a system for simplifying and semi automating the construction of new visualizations to allow the rapid development of workflows and to reduce the need to understand both visualization techniques and the data domain.

A method and a system for capturing modeling storing querying and or interacting with provenance information for an evolutionary workflow process is provided in an exemplary embodiment. Modifications to a workflow are captured as the user generates explores and evaluates hypotheses associated with data under study. Abstractly a workflow consists of modules e.g. programs scripts function calls application programming interface API calls etc. connected in a network to define a result. A dataflow is an exemplary workflow. The initial modules and the subsequent modifications are captured as actions that identify for example a change to a parameter value of a module in the workflow an addition or a deletion of a module in the workflow an addition or a deletion of a module connection in the workflow addition or deletion of a constraint in the workflow etc. These changes are presented in a version tree which reflects the evolution of the evolutionary workflow process over time. The provenance information can also be used to simplify and to semi automate the development of new results for presentation to users to aid both expert and non expert users in performing data exploration.

In an exemplary embodiment a device for identifying a workflow of a plurality of workflows is provided. The device includes but is not limited to a computer readable medium having computer readable instructions therein and a processor. The processor is coupled to the computer readable medium and is configured to execute the instructions. The instructions comprise receiving a query workflow at a first device wherein the query workflow comprises a plurality of modules and further wherein the plurality of modules are connected identifying a workflow of a plurality of workflows the identified workflow at least partially matching the received query workflow and presenting the identified workflow to a user at the first device.

A method of identifying a workflow of a plurality of workflows is provided. A query workflow is received at a first device which includes a plurality of modules that are connected. A workflow is identified of a plurality of workflows the identified workflow at least partially matching the received query workflow. The identified workflow is presented to a user at the first device.

In yet another exemplary embodiment a computer readable medium is provided. The computer readable medium has computer readable instructions therein that upon execution by a processor cause the processor to implement the operations of the method of identifying a workflow of a plurality of workflows.

In an exemplary embodiment a device for creating an analogous workflow is provided. The device includes but is not limited to a computer readable medium having computer readable instructions therein and a processor. The processor is coupled to the computer readable medium and is configured to execute the instructions. The instructions comprise receiving a first workflow a second workflow and a third workflow determining an analogy workflow based on a difference between the received first workflow and the received second workflow applying the determined analogy workflow to the received third workflow to define a fourth workflow and presenting the defined fourth workflow to a user at the first device. The first workflow comprises a plurality of first modules that are connected. The second workflow comprises a plurality of second modules that are connected. The third workflow comprises a plurality of third modules wherein the plurality of third modules are connected.

In another exemplary embodiment a method of creating an analogous workflow is provided. A method of creating an analogous workflow is provided. A first workflow is received at a first device the first workflow including a plurality of first modules that are connected. A second workflow is received at the first device the second workflow including a plurality of second modules that are connected. A third workflow is received at the first device the third workflow including a plurality of third modules that are connected. An analogy workflow is determined based on a difference between the received first workflow and the received second workflow. The determined analogy workflow is applied to the received third workflow to define a fourth workflow. The defined fourth workflow is presented to a user at the first device.

In yet another exemplary embodiment a computer readable medium is provided. The computer readable medium has computer readable instructions therein that upon execution by a processor cause the processor to implement the operations of the method of creating an analogous workflow.

Other principal features and advantages of the invention will become apparent to those skilled in the art upon review of the following drawings the detailed description and the appended claims.

With reference to a block diagram of an evolutionary workflow processing system is shown in accordance with an exemplary embodiment. The components of evolutionary workflow processing system may be implemented using one or more computing devices which may be a computer of any form factor such as a laptop a desktop a server etc. Evolutionary workflow processing system may include a display an input interface a memory a communication interface a processor and an evolutionary workflow tool . Different and additional components may be incorporated into evolutionary workflow processing system . For example evolutionary workflow processing system may include speakers for presentation of audio media content.

Display presents information to a user of evolutionary workflow processing system as known to those skilled in the art. For example display may be a thin film transistor display a light emitting diode display a liquid crystal display or any of a variety of different displays known to those skilled in the art now or in the future.

Input interface provides an interface for receiving information from the user for entry into evolutionary workflow tool as known to those skilled in the art. Input interface may use various input technologies including but not limited to a keyboard a pen and touch screen a mouse a track ball a touch screen a keypad one or more buttons etc. to allow the user to enter information into evolutionary workflow tool or to make selections presented in a user interface displayed on display under control of evolutionary workflow tool . Input interface may provide both an input and an output interface. For example a touch screen both allows user input and presents output to the user.

Memory is an electronic holding place or storage for information so that the information can be accessed by processor as known to those skilled in the art. Evolutionary workflow processing system may have one or more memories that use the same or a different memory technology. Memory technologies include but are not limited to any type of RAM any type of ROM any type of flash memory etc. Evolutionary workflow processing system also may have one or more drives that support the loading of a memory media such as a CD or DVD or ports that support connectivity with memory media such as flash drives.

Communication interface provides an interface for receiving and transmitting data between devices using various protocols transmission technologies and media as known to those skilled in the art. The communication interface may support communication using various transmission media that may be wired or wireless. Evolutionary workflow processing system may have one or more communication interfaces that use the same or different protocols transmission technologies and media.

Processor executes instructions as known to those skilled in the art. The instructions may be carried out by a special purpose computer logic circuits or hardware circuits. Thus processor may be implemented in hardware firmware software or any combination of these methods. The term execution is the process of running an application or the carrying out of the operation called for by an instruction. The instructions may be written using one or more programming language scripting language assembly language etc. Processor executes an instruction meaning that it performs the operations called for by that instruction. Processor operably couples with display with input interface with memory and with communication interface to receive to send and to process information. Processor may retrieve a set of instructions from a permanent memory device and copy the instructions in an executable form to a temporary memory device that is generally some form of RAM. Evolutionary workflow processing system may include a plurality of processors that use the same or a different processing technology.

Evolutionary workflow tool provides an infrastructure for systematically capturing detailed provenance and streamlining the data exploration process. Evolutionary workflow tool uniformly captures provenance for workflows used to create results as part of a evolutionary workflow process used to generate a final result. A result may include a Boolean value a visualization a table a graph a histogram a numerical value a string etc. The result may be presented pictorially numerically graphically textually as an animation audibly etc. Use of evolutionary workflow tool allows reproducibility of results and simplifies data exploration by allowing users to easily navigate through the space of workflows and parameter settings associated with an exploration task. Evolutionary workflow tool may include a workflow execution engine a cache manager a cache and an evolutionary workflow interaction application . One or more of the components of evolutionary workflow tool may interact through communication interface using a network such as a local area network LAN a wide area network WAN a cellular network the Internet etc. Thus the components of evolutionary workflow tool may be implemented at a single computing device or a plurality of computing devices in a single location in a single facility and or may be remote from one another.

Evolutionary workflow tool provides a graphical user interface for creating editing executing and querying workflows and for capturing a full provenance of the exploration process defined as part of an evolutionary workflow process. As a user first creates an initial workflow and then makes modifications to define additional workflows a capture mechanism records the modifications. Thus instead of storing a set of related workflows the operations or changes that are applied to create a series of workflows such as the addition of a module the modification of a parameter etc. are stored. Such a representation uses substantially less space than storing multiple versions of a workflow and enables the construction of an intuitive interface that allows the user to understand and to interact with the evolution of the workflow through these changes.

Workflow execution engine may be invoked by a user of evolutionary workflow interaction application . Workflow execution engine receives a workflow as an input from evolutionary workflow interaction application and executes the received workflow. Workflow execution engine executes the operations defined by the received workflow by invoking the appropriate functions. The functions may be invoked from a plurality of sources including libraries visualization APIs and script APIs. In general the workflow manipulates one or more data files that contain the data for processing and that may be stored in a database . A plurality of evolutionary workflow files may be organized in database which may include a structured query language SQL database. The database may be organized into multiple databases to improve data management and access. The multiple databases may be organized into tiers. Additionally database may include a file system including a plurality of data files. Database may further be accessed by remote users using communication interface . Remote users may checkout and checkin data and or files from database as known to those skilled in the art.

Cache manager controls workflow execution keeping track of operations that are invoked and their respective parameters. Only new combinations of operations and parameters are requested from workflow execution engine . Cache manager scheduled the execution of modules in a workflow execution performed by workflow execution engine . Cache manager determines data dependencies among the modules associated with the received workflow and substitutes a call to access data from a results cache to a call to access data from cache based on the determined data dependencies and identification of common intermediate results generated during execution of the workflow. As the workflow is executed cache manager stores the results of one or more of the modules. For example a module name and parameter values together with a handle to the output results may be stored. Cache manager performs a cache lookup from cache based on the determined data dependencies during a workflow execution process to avoid redundant processing of overlapping sequences in multiple workflows. Caching is specially useful while exploring multiple results. When variations of the same workflow need to be executed a substantial improvement in execution time can be obtained by caching the results of overlapping subsequences of the workflows. Cache is implemented using a type of memory.

Evolutionary workflow interaction application may include a workflow creator application and a result presentation application . For example user interface windows associated with workflow creator application and a result presentation application may be opened together. With reference to a user interface of workflow creator application is shown in accordance with an exemplary embodiment. User interface includes a module selection region a workflow interaction region and a menu region . Module selection region may include a list of modules that can be used to build a workflow and a search text box that can be used to locate a specific module to be included in a workflow. User entry of a module name in search text box causes the corresponding module to be presented in the list of modules . The list of modules may be presented in a tree view based on a class structure hierarchy. Workflow interaction region may include a workflow area and a picture in picture PIP area . PIP area may be removed by user selection of a PIP button which toggles the display of PIP area on and off. Items presented in workflow area are controlled based on user selection of a workflow tab a version tree tab a query tab and a parameter exploration tab . Items presented in menu region are controlled based on the item selected for display in workflow area . In the exemplary embodiment of user interface is shown with an empty workflow interaction region because no evolutionary workflow process has been opened from an existing data file or has been created.

The stored provenance consists of one or more change actions applied to a workflow. The provenance is represented as a rooted version tree where each node corresponds to a version of a workflow and where edges between nodes correspond to the action applied to create one from the other. The version tree reflects the process followed by the user to construct and to explore workflows as part of the evolutionary workflow process and to concisely represent all the workflow versions explored. With reference to workflow area includes a version tree and PIP area includes a workflow diagram based on user selection of version tree tab . In the exemplary embodiment of user interface is shown with a version tree in workflow interaction region after user selection of an existing node in the version tree. Version tree diagram indicates a parent child relationship between an empty workflow and a first workflow a parent child relationship between first workflow and a second workflow a parent child relationship between second workflow and a third workflow and a parent child relationship between third workflow and a fourth workflow . First workflow is indicated as an oval which includes a name associated with first workflow and a line which connects first workflow to second workflow . The line indicates that first workflow is a parent of second workflow . Similarly second workflow is indicated as an oval which includes a name associated with second workflow and a line which connects second workflow to third workflow . The line indicates that second workflow is a parent of third workflow . Third workflow is indicated as an oval which includes a name associated with third workflow and a line which connects third workflow to fourth workflow . The line indicates that third workflow is a parent of fourth workflow .

The user optionally may show all nodes in the version tree or may only show nodes that have been named or tagged. A connection between named nodes may be represented in different ways. For example a connection may be indicated with three perpendicular lines crossing the connection line to represent that a plurality of actions are performed to create the child. A connection without the three perpendicular lines may indicate that a single action is performed to create the child.

In the exemplary embodiment of fourth workflow is highlighted to indicate selection by the user. As a result workflow diagram includes a workflow diagram of fourth workflow . Additionally a provenance summary area includes a workflow name textbox for fourth workflow an author text field a creation date text field and a notes text area . The provenance summary information may be captured as metadata. The user can change the name of fourth workflow by entering a new name in workflow name textbox and selecting a change button . The new name is presented in the oval associated with fourth workflow and is updated in database to capture the version tree.

With reference to workflow area includes a first workflow diagram based on user selection of workflow tab . The workflow associated with the selected oval in version tree diagram is presented. In this mode workflow area is used to create and edit workflows. A nodes and connections paradigm or pipeline view associated with workflow systems is used to present the workflow to the user. First workflow diagram includes a plurality of nodes . Each node is associated with a module that executes a function which includes instructions executed as part of the execution of the workflow to form a data product. A node can be repositioned by dragging it to the desired location of workflow area . When a node associated with a module is selected the node is highlighted and the parameters associated with the selected module are shown in the right panel. In the exemplary embodiment of a selected module titled vtkContourFilter is selected and shown as highlighted. The parameters of selected module are shown in a parameters area . Parameters area includes a method grid and a parameter area . Method grid includes a list of the methods associated with selected module and a signature of each method. All of the methods that can set module parameters for selected module are listed in method grid . A user selects a method from method grid . Parameter area displays a plurality of parameters which can be defined by the user using the selected method. Associated with each of the plurality of parameters is a label which indicates the parameter input type and a text box for editing the parameter. Initially default values are shown in the text boxes. To select a method the user may drag the method to parameter area . Alternatively the user may select the method from method grid which causes the display of the parameters in parameter area . When a module is changed a new workflow with the changed parameters is added to version tree automatically.

A workflow is created by dragging one or more modules from module selection region to workflow area . The plurality of nodes are connected with lines that represent the workflow connections through the modules. Modules can be connected or disconnected and added or deleted from a workflow. The line connecting each of the modules starts and ends in a small box at the top or bottom of the node representing a module. To disconnect modules the user selects the connection line and selects delete. To connect two modules the user places the cursor over a small box in the lower right corner of a first node corresponding to an output port clicks the mouse and holds down the mouse button while dragging the cursor from the first node to an input port of the second node. A connection line appears. In the exemplary embodiment of input ports to a module are shown in the upper left corner of each node as small squares and output ports are shown in the lower right corner of each node as small squares. Each node may have zero one or more input ports and zero one or more output ports depending on the functionality provided by the module. The input ports of the module only accept connections from correct output ports. Dropping a connection on a module causes it to snap to the most appropriate port. However when a module accepts multiple ports of the same type proper connectivity is achieved by starting the connection at the module with multiple ports of the same type and by dragging the mouse to the appropriate endpoint. To determine the port to start at hovering the mouse cursor over a port causes presentation of a small note which includes information about the port in question.

Input and or output ports can be added to a module. With reference to a port user interface window is shown in accordance with an exemplary embodiment. A plurality of input methods associated with available input ports is shown. Pre selected methods of the plurality of input methods are indicated with a pre selected checkbox and with gray lettering. Pre selected methods are included as available ports for the module by default. Unavailable methods of the plurality of input methods are indicated with a de selected checkbox and with gray lettering. Unavailable methods are not available for selection for the module. Available methods of the plurality of input methods are indicated with an empty checkbox and with black lettering. A user adds an input port by selecting the appropriate method from the available methods . After selection of the appropriate method the user selects an OK button to add the port to the selected node or a Cancel button to cancel the addition of a port to the selected node.

With reference to a plurality of output methods associated with available output ports is shown. A pre selected method of the plurality of output methods is indicated with a pre selected checkbox and with gray lettering. Pre selected method is included as an available port for the module by default. Available output methods of the plurality of output methods are indicated with an empty checkbox and with black lettering. A user adds an output port by selecting the appropriate method from the available output methods .

With reference to workflow area includes a parameter exploration area based on user selection of parameter exploration tab . An annotated workflow is shown in a workflow area similar to the workflow presented in workflow area . The presented workflow is the workflow associated with the selected oval in version tree diagram . The data flow shown in workflow area includes identifiers which indicate modules capable of modification to perform parameter exploration included in the selected workflow. A module area lists the modules indicated with identifiers in workflow area . The name of each module is followed by a list of method names which include parameters that can be explored. The default values of the parameters are indicated after the respective method name. User selection of selected method is indicated by highlighting. The user may select a method by dragging the method into parameter exploration area . The parameters of the method are presented in a parameter grid which includes each parameter which can be parameterized. Associated with each parameter of parameter grid is a data type text field a start value text box an end value text box and a plurality of dimension selector buttons . The plurality of dimension selector buttons are included for selected method because a plurality of parameters can be used to perform the parameter exploration. In some cases a single parameter may be presented with a number of steps value that can be defined by the user. In addition general functions can be defined that produce a set of values.

A dimension is associated with each of the plurality of dimension selector buttons . Because a plurality of data products are created during execution of the parameter exploration process the user can select which parameterization is presented in either a column dimension a row dimension a sheet dimension or a time dimension within a cell of a data product spreadsheet. For each dimension an indicator indicates the dimension graphically and a number of steps value indicates the number of steps to be taken between a start value selected for the parameter by the user and an end value selected for the parameter by the user in the respective start value text box and end value text box . The user can modify the number of steps value associated with each of the plurality of dimension selector buttons to cause repetition of the execution of the workflow for values for the parameter from the start value to the end value in the selected number of steps. The user may optionally select an ignore button to leave the associated parameter out of the exploration.

The user may also select a method for defining each value of the parameter as part of the parameter exploration process by selecting an interpolation button associated with each parameter of parameter grid . With reference to an interpolation selection window is shown in response to user selection of interpolation button associated with a first parameter . In the exemplary embodiment of interpolation selection window indicates selection of a linear interpolation by the user with a check mark. As a result in performing the parameter exploration in the dimension selected for first parameter the parameter used for each parameter exploration is determined using a linear interpolation between the start value and the end value.

With reference to interpolation selection window is shown in response to user selection of interpolation button associated with a second parameter . In the exemplary embodiment of interpolation selection window indicates selection of a list by the user with a check mark. As a result in performing the parameter exploration in the dimension selected for second parameter the parameter used for each parameter exploration is determined using a list provided by the user.

With reference to a list definition window is shown in accordance with an exemplary embodiment. List definition window includes a value grid which includes a list of values . In the exemplary embodiment of second parameter is a file so the list of values are strings which define a filename. A browse button allows the user to browse the file system to identify the file instead of typing the filename into the appropriate cell of value grid . User selection of an add button appends an empty value to the list of values . User selection of a delete button deletes a selected value from the list of values . User selection of an OK button saves the list of values and closes list definition window . User selection of a cancel button closes list definition window without saving the list of values .

With reference to interpolation selection window is shown in response to user selection of interpolation button associated with a third parameter . In the exemplary embodiment of interpolation selection window indicates selection of a user defined function by the user with a check mark. As a result in performing the parameter exploration in the dimension selected for third parameter the parameter used for each parameter exploration is determined using user defined function . User defined function may be any function such as a polynomial a random number generator etc.

With reference to a function definition window is shown in accordance with an exemplary embodiment. Function definition window includes a text entry area . The user creates a function in text entry area . The function is iteratively called for each step to determine a next parameter value. User selection of an OK button saves the function definition and closes function definition window . User selection of a cancel button closes function definition window without saving the function definition.

With reference to workflow area includes a version tree which includes a fifth workflow created by modifying a parameter of a module of third workflow . Provenance summary area includes workflow name textbox with data associated with fifth workflow author text field associated with fifth workflow creation date text field associated with fifth workflow and notes text area associated with fifth workflow . Fifth workflow is created automatically if the user modifies an existing workflow by changing a parameter adding or deleting a module changing a connectivity between modules etc.

With reference to a workflow difference window is shown in accordance with an exemplary embodiment. Workflows can be compared for example by a user selecting an oval of a workflow from version tree dragging the selected oval to a second oval of a workflow to which to compare the workflow and releasing the selected oval. Workflow difference window shows modules that were modified between any two workflows in version tree . For example unique modules may be indicated in a first color if the module was added and in a second color if the module was deleted. Modules having different parameter values may be shown in a third color shaded differently outlined differently with different text coloring etc. In the exemplary embodiment of workflow difference window a first node indicates that a module titled vtkCamera is added to the second workflow and a second node indicates that a parameter of a module titled vtkSample Function is different for the second workflow. The remaining nodes are identical.

With reference to workflow area includes a version tree which includes a sixth workflow created by modifying a parameter of a module of third workflow and a seventh workflow created by modifying a parameter of a module of fourth workflow . The author and usage frequency can be indicated in version tree using a color and or shading sheme. For example workflows developed by a first user may be indicated with a first color and workflows developed by a second user may be indicated with a second color. The saturation level of the color may indicate how recently a workflow has been created or executed. A workflow can be executed by selecting the workflow from version tree and selecting an execute button .

With reference to a result presentation window of result presentation application is shown in accordance with an exemplary embodiment. Four dimensions of data products can be presented to the user in a data product grid of result presentation window . In a column dimension multiple data products are shown in different columns. The number of columns defaults to three but may be one or more. The number of columns may be selected by the user using column selector . In a row dimension multiple data products are shown in different rows. The number of rows defaults to two but may be one or more. The number of rows may be selected by the user using row selector . In a sheet dimension multiple data products are shown in different data sheets. The number of sheets defaults to one but may be one or more. Within each cell of data product grid a different data product defined based on execution of a different workflow of version tree is shown. In the exemplary embodiment of column row contains the data product formed form execution of third workflow shown with reference to column row contains the data product formed form execution of fourth workflow shown with reference to column row contains the data product formed form execution of sixth workflow shown with reference to and column row contains the data product formed form execution of seventh workflow shown with reference to .

Result presentation application may use various techniques and formats to display and represent the results of a workflow execution. For example a cell may display a Web page in hypertext markup language text 2 dimensional and 3 dimensional graphs histograms animations numbers etc. The result presentation interface can be used to display the results of parameter explorations side by side for example varying different parameters over different axes or in an animation performed by repeating a workflow over time. In addition display cells can share the same cache so that overlapping computations across the corresponding workflows are shared.

With reference to a query result is shown in accordance with an exemplary embodiment in workflow area . The query interface of workflow creator application supports both simple keyword based and selection queries such as finding a result created by a given user as well as complex structure based queries such as finding results that apply simplification before an isosurface computation for irregular grid data sets. To support simple keyword based and selection queries a query identification area includes a query text box a Search button a Refine button and a Reset button . Simple keyword based queries as well as structured queries may be supported. A user identifies a module to be searched for in version tree . The user enter the module name in query text box and selects Search button .

In the exemplary embodiment of the module having the name vtkCamera is to be located in the workflows of version tree . Version tree is traversed to identify workflows which include the module based on the module name entered. The identified workflows are presented in workflow area through highlighting. For example in the exemplary embodiment of second workflow fifth workflow sixth workflow and seventh workflow include the selected module. Alternatively if after specifying a query the user selects Refine button instead of highlighting the selected nodes and graying the nodes that do not match the query the non matching nodes are hidden and collapsed into crossed edges.

With reference to a query can be defined in workflow area based on user selection of query tab to support complex structure based queries. Instead of searching for use of a single module in the workflows of the version tree the user selects query tab to define a plurality of modules and their connectivity for identification in the workflows of the version tree. The user selects the modules from module selection region and defines their connectivity as described with reference to creation or to modification of a workflow thus creating a workflow or sub workflow to query.

With reference to a plurality of data products are shown in result presentation window of result presentation application in accordance with a second exemplary embodiment. Each cell can contain one or more pictorial representation one or more numerical representation one or more textual representation one or more pictorial animation and an audible representation. Controls can be included within each cell to control the display to play an animation within the cell etc.

Information associated with a version tree is defined based on an extensible markup language XML schema in an exemplary embodiment. User interaction with workflow creator application to define workflows is captured as a series of actions of different types. The different actions are associated with adding modules deleting modules changing parameter values adding connections deleting connections changing connections etc. An exemplary XML schema is shown below 

A portion of an exemplary XML file defined based on the XML schema is shown below for version tree . Other representations are possible. To capture the provenance information a date tag and a user tag are included for each action . Linkage between modules is defined using the parent tag for each action . The action is assigned an identifier based on the time tag for each action which is the value referenced in the parent tag for a child action. The action type is assigned based on the what tag for each action . Depending on the value associated with the what tag additional parameters are defined based on the XML schema. For example some actions include object parameters that may include a name tag which may be the module name.

Workflows are uniquely identified by the time element. Optionally a tag field can be defined to name a particular workflow using tag fields as shown above. Associated with each tag field is a name of the workflow which is presented in the oval of the version tree and an action identifier which identifies the action that starts the workflow modifications to its parent. For example as shown above fourth workflow has the name final as shown in version tree with reference to and starts at the action having time tag value or the action shown below 

Different storage architectures can be used for the provenance information. They include files in a file system native XML databases relational databases etc.

The embodiments described use a tightly coupled architecture shown with reference to where the provenance management is performed in the same environment in which the workflows are created and change actions are captured. Other loosely coupled embodiments are possible in which the provenance management and capture occur in different environments. For example a first loosely coupled system includes a workflow system a provenance capture module and a provenance manager . Workflow system and provenance capture module are tightly coupled in the same environment. Change notifications may be sent to provenance manager for example in a client server fashion. As another example a second loosely coupled system includes a graphical user interface GUI scripts a provenance capture module and provenance manager . User interactions with GUI and scripts are captured and sent to provenance capture module for example in a client server fashion. Provenance capture change notifications may be sent to provenance manager for example in a client server fashion.

With reference to a high level overview of a synchronization process is provided in accordance with an exemplary embodiment. A first user creates an evolutionary workflow process which includes timestamps . A second user checks out the evolutionary workflow process and develops a first evolutionary workflow process which adds timestamps and . Timestamps and are associated with modifications to the evolutionary workflow process performed by the second user. A third user checks out the evolutionary workflow process and develops a second evolutionary workflow process which adds timestamps and . Timestamps and are associated with modifications to the evolutionary workflow process performed by the second user. As a result when the first user and or the second user check in their evolutionary workflow processes to the evolutionary workflow process acting as a parent repository some timestamps are changed as shown with reference to third evolutionary workflow process which is saved as the evolutionary workflow process and which includes modifications performed by the first user and the second user.

To perform synchronization synchronization points are identified. The synchronization points are the overlapping nodes and edges in the two version trees being compared. When an evolutionary workflow process is checked out the system keeps track of the largest timestamp at checkout i.e. 4 as in the example above. When an updated evolutionary workflow process is checked in because the evolutionary workflow process is monotonic nothing is deleted synchronization is applied only to the nodes with a timestamp 4. For clarity an evolutionary workflow process is captured and presented as a version tree. To merge two evolutionary workflow processes it is sufficient to add all workflow nodes created in the independent versions of the evolutionary workflow processes while maintaining a locally unique set of timestamps for each action associated with the added workflow nodes. As shown with reference to third evolutionary workflow process the timestamps and of the first user are re labeled as and .

To perform synchronization in a P2P environment the process is more complex to ensure that the re numberings are performed correctly. Because timestamps only need to be unique and persistent locally a re labeling map is created and maintained for each synchronization server from which a user in the P2P network executes a check out check in process and is associated with the local evolutionary workflow process. Thus re labeling maps may be used when there are multiple synchronization servers. At each check out information about the original synchronization server is kept. An evolutionary workflow process checked out from a first server Scan only be checked back into S. If the evolutionary workflow process is saved to a server S so that it can be exported to other users a re labeling map should be created in S.

The information about the original synchronization server as well as the re labeling map is associated with the evolutionary workflow process. The re labeling map can be saved together with the evolutionary workflow process e.g. XML specification in a database XML specification in a separate file tables in a relational database etc. as long as the association is maintained. The re labeling map is associated with a synchronization server that exports a given evolutionary workflow process. A synchronization server can serve receive and export changes performed by multiple users.

In an exemplary embodiment a set of bijective functions N N is used to form the re labeling map. The function maps timestamps in the original evolutionary workflow process that is checked out to new timestamps in the modified evolutionary workflow process. The re labeling map includes a set of external labels associated with a set of local labels. The set of external labels for a child are the timestamps assigned by a parent evolutionary workflow process i when the child evolutionary workflow process is checked in to the parent evolutionary workflow process i in order to maintain a unique set of timestamps in the parent evolutionary workflow process i. The set of external labels for a child are the timestamps assigned by the child evolutionary workflow process as the user interacts with their evolutionary workflow tool . The set of local labels are the timestamps assigned during local execution of the evolutionary workflow process or check in of a child evolutionary workflow process.

The set of internal labels are exposed when an evolutionary workflow process is used as a repository because the internal labels are consistent with the evolutionary workflow process. When the user stores a set of actions the parent evolutionary workflow process provides a new set of timestamps by creating new entries in the parent s evolutionary workflow process and updating the re labeling map to indicate a mapping between the set of external labels and the set of local labels. The re labeling map of the child evolutionary workflow process modifies the set of external labels based on the new set of timestamps assigned by and received from the parent. As a result the second user s re labeling map set of external labels is changed from 5 6 to 7 8 though the set of local labels remains 5 6. If fis denoted as the old re labeling map and f is denoted as the new re labeling map f 5 f 7 f 6 f 8 and so on. Thus even though a user s local timestamps may change when stored to the parent evolutionary workflow process each evolutionary workflow process exposes locally consistent unchanging timestamps to other users ensuring correct distributed behavior.

With reference to a collaborative workflow evolution system is shown in accordance with an exemplary embodiment. Collaborative workflow evolution system includes a first device a second device a third device and a fourth device . First device second device third device and fourth device may each be instances of evolutionary workflow processing system described with reference to . A first user executes a first evolutionary workflow tool at first device . A second user executes a second evolutionary workflow tool at second device . A third user executes a third evolutionary workflow tool at third device . A fourth user executes a fourth evolutionary workflow tool at fourth device . First evolutionary workflow tool second evolutionary workflow tool third evolutionary workflow tool and fourth evolutionary workflow tool may each be instances of evolutionary workflow tool described with reference to .

First device communicates with second device through a first network . First device communicates with third device through a second network . Third device communicates with fourth device through a third network . First network second network and or third network may be any type of network such as a local area network LAN a wide area network WAN a cellular network the Internet etc. Additionally first network second network and or third network may include a peer to peer network P2P and or a client server network. In a client server network a single centralized synchronization server may be used with all modifications sent to and retrieved from the centralized synchronization server. In a P2P multiple servers may be allowed to receive and to export data associated with evolutionary workflow processes. First device second device third device and fourth device communicate using communication interface implemented at each device and discussed with reference to . Collaborative workflow evolution system may include additional or fewer networks.

First device includes a first workflow evolution description and a first re labeling map . In an exemplary embodiment first workflow evolution description is an evolutionary workflow process repository for a first evolutionary workflow process stored for example using the action based XML schema described previously. First re labeling map includes a first set of external labels associated with a first set of local labels.

Second device includes a second workflow evolution description and a second re labeling map . In an exemplary embodiment second workflow evolution description is an evolutionary workflow process repository for a second evolutionary workflow process stored using the action based XML schema described previously. Second re labeling map includes a second set of external labels associated with a second set of local labels. In the exemplary embodiment of second workflow evolution description is created by checking out first workflow evolution description . After check out second workflow evolution description may be modified. First workflow evolution description may also be modified independently.

Third device includes a third workflow evolution description and a third re labeling map . In an exemplary embodiment third workflow evolution description is an evolutionary workflow process repository for a third evolutionary workflow process stored using the action based XML schema described previously. Third re labeling map includes a third set of external labels associated with a third set of local labels. In the exemplary embodiment of third workflow evolution description is created by checking out and modifying first workflow evolution description .

Fourth device includes a fourth workflow evolution description and a fourth re labeling map . In an exemplary embodiment fourth workflow evolution description is an evolutionary workflow process repository for a fourth evolutionary workflow process stored using the action based XML schema described previously. Fourth re labeling map includes a fourth set of external labels associated with a fourth set of local labels. In the exemplary embodiment of fourth workflow evolution description is created by checking out and modifying third workflow evolution description . The workflow evolution descriptions and the re labeling maps may be stored in database implemented at each device and discussed with reference to .

The second user checks out first workflow evolution description which includes local labels timestamps and external labels and develops second workflow evolution description . The third user checks out first workflow evolution description and develops third workflow evolution description . The fourth user checks out third workflow evolution description and develops fourth workflow evolution description . Assume first re labeling map contains the following mapping 

With reference to a query sub workflow is defined in workflow area of query tab . In an exemplary embodiment a user selects a portion of an initial workflow defined in workflow area of workflow tab copies the selected portion to a memory such as a clipboard selects query tab and pastes the copied portion to workflow area of query tab . For example the user may select query sub workflow by dragging a mouse over a portion of initial workflow as known to those skilled in the art. The user may select and define additional query criteria using a property query area .

Property query area may include a search method text box a method tree a property list a property criteria text box and a comparator type selector shown exploded for legibility . The user may enter a portion of a method name in search method text box to locate the method in method tree . Method tree includes a tree of methods associated with a selected workflow titled vtkStructuredPointsReader of query sub workflow . The user selects a method presented in method tree . Properties of the selected method are presented in property list . The user selects a property presented in property list and one or more text boxes associated with the selected property are presented in property area . The user enters an appropriate value in property criteria text box and selects a comparison type using comparator type selector . Exemplary comparison types include contain does not contain etc. Property area may include a plurality of properties in property list . Additionally property area may include a plurality of property criteria text boxes each associated with a comparator type selector .

With reference to a first query result is shown in workflow area of version tree tab in accordance with an exemplary embodiment. The workflows which satisfy the complex query are presented in workflow area through highlighting. To further illustrate a first workflow exploded to show the matching sub workflow and the matching property value is shown. Additionally a second workflow exploded to show the matching sub workflow and the matching property value is shown.

The same interface used to build a workflow is used to query a version tree which includes a plurality of workflows. The current version tree is searched for all workflows that match that query. The matching to identify workflows that contain the query sub workflow may be determined on a per workflow basis. Specifically for each workflow the vertices of the graph induced by the workflow may be topologically sorted. The vertices of the query graph are tested for a match. An exact match may be required or some level of inexactness may be allowed depending on user preference. While each element of the query sub workflow modules connections parameters etc. is included in the match a candidate workflow that contains more elements than those in the query sub workflow still satisfies the query. If all vertices match the candidate workflow is returned as a match. All matches are selected and highlighted in the version tree so that users can quickly see query results. Selecting a workflow from the highlighted version tree displays the workflow with the portion of the workflow that matches the query highlighted as shown with reference matching sub workflow and matching sub workflow .

Differences can assist in optimizing the matching process. For example given a query workflow pand two candidate workflows pand p. If psatisfies the query and the difference is known the domain context of can be checked to determine if it contains any elements that match p. If not palso satisfies the query. Similarly if pdoes not match pand R does not contain the necessary elements for matching p pdoes not satisfy the query. Thus all pipelines that satisfy the query can be determined by iteratively matching and updating the matches based on differences. Every operation performed on a workflow adding and deleting modules adding deleting and modifying connections and or modifying parameters can be expressed as a potentially partial function v v. v v is defined as a function on the space of workflows and v v as a function that takes two workflows pand pand produces another function that transforms pto p. For brevity p p . Formally the domain context of is the set of all workflow primitives required to exist for to be applicable. These contexts may be represented as sets of identifiers. For example if is a function that changes the filename parameter of a module with id is the set containing the module with id . Similarly the range context of R is the set of all workflow primitives added or modified by . Note that 1 R which provides an easy way to compute range contexts.

As discussed with reference to as a user develops an evolutionary workflow the entire manipulation sequence is transparently stored in the version tree. Each action f that modifies the workflow e.g. adding or deleting a module connecting modules or changing a parameter is represented explicitly as a function v v where V is the space of all possible workflows. A workflow is the composition of these functions and is materialized by applying the resulting function to an empty workflow. The action based formalism associated with capturing the version tree supports the straightforward computation of simple differences. When p

The result of workflow matching can either be a binary decision whether or not the workflows match or a mapping between the two workflows. The binary decision can be obtained by thresholding the total score of the mapping. If D represents the set of all domain contexts to identify the best mapping between two workflows define map v v D D as a function which takes two pipelines pand pas an input and produces a partial map from the domain context of pto the domain context of p. The map may be partial in cases where elements of pdo not have a match in por vice versa. If p

In an exemplary matching algorithm the standard graph representation is used where vertices correspond to modules and edges to connections. In addition even though discrimination between input and output ports can be included directionality is not enforced on the edges so that similarity can be diffused along them. In workflow matching a mapping from the context of one workflow to another is determined. To do so the workflows are converted to labeled graphs and a scoring function is defined for nodes based on their labels. With a graph for each workflow the mapping by pairing nodes that score well is computed and connectivity constraints are enforced between the pairs.

Let Gand Gbe the graphs corresponding to pand p. A connection between two vertices a and b can be denoted as a b and the scoring function that measures the similarity of vertices can be defined by

To translate the algorithm into an iterative algorithm G is the measure of pairwise similarity after k steps A G is the adjacency matrix of G normalized so that the sum of each row is one where a row with sum zero is modified to be uniformly distributed c G is the normalized vector whose elements are the scores for the paired vertices in G and is a user defined parameter that determines the tradeoff between pairwise scoring and connectivity. To iteratively refine the estimate the neighborhood similarity is diffused according to A G 1 c G M 1 . The final pairwise similarity between modules is given by lim . In general c G provides a good measure of similarity so that A G may be used to break ties between multiple alternatives. Thus a small weight such as 0.15 is chosen for the neighborhood. Min Equation 1 is a linear operator therefore if p converges it does so to an eigenvector. Based on the theory of Markov chains the special structure of Mhas a spectrum 1 . . . so that the iteration is exactly the power method for eigenvalue calculation. Therefore the iteration converges to a single dominant eigenvector and each iteration improves the estimate linearly by 1 . Because a small is used a rapid convergence is achieved. From the iteration is obtained which contains the relative probabilities of Gand Gmatching for each possible pair. For each vertex in v the vertex in vwhose pair has the maximum value in is considered the match. Thus the most likely pairing is determined based on the similarity measure. For example even where data types may not match exactly the most likely match is determined from among the possible modules.

Whereas the query interface allows users to identify workflows and sub workflows that are relevant for a particular task a result determination by analogy mechanism provides for the reuse of the identified workflows in constructing new results in a semi automated manner and without requiring users to directly manipulate or edit the workflow specifications. For example a user may wish to improve a given result by modifying parameters in a similar fashion to a previously determined result. Alternatively the user may want to modify an existing workflow to use a new technique that generates higher quality visualizations. The difference between a pair of workflows is determined and the difference is applied to a third workflow to define a fourth workflow. The user need not have a priori knowledge of the exact details of the three workflows to perform the operation. To apply an analogy to a workflow the user defines an analogy template by selecting two workflows whose difference is to be applied to a third workflow selected by the user. The analogy is applied to the third workflow to create a new fourth workflow. In an exemplary embodiment the user can cause execution of these operations using either workflow creator application or result presentation application .

Using workflow creator application an analogy may be defined by dragging a first workflow representing an initial workflow to a second workflow representing the desired result. As discussed previously with reference to this operation displays the difference between the selected workflows. As shown with reference to a workflow difference indicates module additions deletions connection additions deletions modifications and parameter modifications. To create an analogy based on the difference between the workflows the user may select a create analogy button . With reference to an analogy naming window is presented to the user. Analogy naming window includes an analogy name text box . The user defines a name for the analogy using analogy name text box . The user selects an OK button to create the analogy with the defined name or a Cancel button to cancel the analogy creation.

With reference to the user applies an analogy by selecting a third workflow presented in a version tree of workflow area of version tree tab and selecting the analogy for application to the third workflow . For example the user may right click after selection of third workflow causing presentation of a process selection window . Process selection window may include a Perform analogy . . . item . Scrolling down to Perform analogy . . . item causes presentation of an analogy list from which the user may select. For example with reference to analogy list includes a single created analogy named sphere to silicium . A fourth workflow is created in version tree which may be executed and a result presented in a cell of result presentation application as discussed previously relative to .

Using result presentation application an analogy may be defined and applied without interacting with the version tree of workflow creator application . Result presentation application supports an interaction mode and an edit mode. In the edit mode a user can create an analogy by dragging one cell into another cell thereby creating an analogy based on a comparison between the workflows used to create the results presented in the respective cells. To apply the analogy the user drags the workflow to be modified to a new cell the analogy is applied and the result of the new workflow is presented to the user in the cell to which the workflow to be modified is dragged. For example with reference to a plurality of data products are shown in result presentation window of result presentation application in accordance with a third exemplary embodiment. Result presentation window of includes a first cell which includes a first result a second cell which includes a second result a third cell which includes a third result and a fourth cell which is empty. Thus three workflows have been executed to generate results presented in three cells of result presentation application .

The user switches from an interaction mode of result presentation application to an edit mode of result presentation application for example using a menu item selector or a button. The edit mode allows among other things the creation and execution of one or more analogy. With reference to a first control set is presented in first cell a second control set is presented in second cell and a third control set is presented in third cell in response to switching to the edit mode. First control set may include a copy control a move control a create analogy control and an apply analogy control . Second control set may include a copy control a move control a create analogy control and an apply analogy control . Third control set may include a copy control a move control a create analogy control and an apply analogy control . To create an analogy the user drags one of the create analogy controls from the cell corresponding to the source to the cell corresponding to the target. For example to create an analogy between first cell and second cell the user drags create analogy control from first control set to second cell and releases create analogy control . The workflow associated with creation of first result is the first workflow and the workflow associated with creation of second result is the second workflow and an analogy is defined based on a difference between the first workflow and the second workflow.

To apply the defined analogy the user drags an apply analogy control from the cell that corresponds to the result on which the analogy is applied and drops it into an empty cell which is used to display the results of the analogy. For example to apply the analogy created between the first workflow and the second workflow the user drags apply analogy control from third control set to fourth cell and releases apply analogy control . The result of the analogy is automatically inserted in the version tree as discussed with reference to . With reference to fourth cell includes a fourth result determined based on application of the created analogy to third result .

Two ordered pairs are analogous if the relationship between the first pair mirrors the relationship between the second pair. Therefore if the relationship between a first workflow pand a second workflow pis known and a third workflow pis identified a fourth workflow ppair can be determined. To implement such an operation automatically a workflow difference is determined between p pand applied to p. However updating pwith an arbitrary may fail if pdoes not contain the domain context of . As a result the difference is mapped so that it can be applied to p. Thus in a first operation the difference p p is determined. In a second operation matching is performed between Gand Gto obtain the map map map p p . In a third operation the mapped difference map p p is determined. In a fourth operation pis determined as p . The fourth workflow pcan be executed to present a result in a cell of result presentation application .

For example to update inputs in multiple workflows a user may perform a query to identify matching workflows. A desired update to a matching workflow can be performed and an analogy created between the desired update pand the matching workflow p. The analogy can be applied to all of the identified matching workflows creating child workflows for each of the identified matching workflows based on the created analogy. The child workflows can be executed and the corresponding results presented in cells of result presentation application automatically.

As another example analogies can be used to quickly combine three different techniques to transform a simple workflow into a visualization that is more complicated and more useful. In many areas the amount of data and the need for interaction between users across the world has led to the creation of online databases that store much of the domain information required. Analogies can be used to modify a simple workflow that visualizes protein data stored in a local file to obtain data from an online database to create an enhanced visualization for that protein and to publish the results as an HTML report. A version tree that includes workflows that accomplish each of the individual goals is opened in workflow creator application . A first workflow preads a file with protein data and generates a first result of that data. The difference between a second workflow pand a third workflow p is that preads a local file and p reads data from an online database. The difference between a fourth workflow pand a fifth workflow p is that puses a simple line based rendering and p improves the rendering to use a ball and stick model as shown with reference to . The difference between a sixth workflow pand a seventh workflow p is that pdisplays a visualization while p generates an HTML report that contains a visualized image and a protein summary . To create a new workflow using all three differences a first analogy between pand p is determined and applied to pto create a first new workflow. A second analogy between pand p is determined and applied to the first new workflow to create a second new workflow. A third analogy between pand p is determined and applied to the second new workflow to create a third new workflow p . Third new workflow p prompts the user for a protein name uses that information to download data for that protein creates a ball and stick visualization of the data and embeds that image in an HTML report. A new result is determined quickly and with a reduced understanding of the steps required to form the new result.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Further for the purposes of this disclosure and unless otherwise specified a or an means one or more . The exemplary embodiments may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed embodiments. The term computer readable medium can include but is not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards flash memory devices etc. Additionally it should be appreciated that a carrier wave can be employed to carry computer readable media such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN .

The foregoing description of exemplary embodiments of the invention have been presented for purposes of illustration and of description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. The functionality described may be implemented in a single executable or application or may be distributed among modules that differ in number and distribution of functionality from those described herein. Additionally the order of execution of the functions may be changed depending on the embodiment. The embodiments were chosen and described in order to explain the principles of the invention and as practical applications of the invention to enable one skilled in the art to utilize the invention in various embodiments and with various modifications as suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

