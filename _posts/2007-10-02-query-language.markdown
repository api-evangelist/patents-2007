---

title: Query language
abstract: Novel methods for expressing paths contained in queries are provided. The path expressions are composed from tokens selected from the group consisting of object identifiers, attribute identifiers, a relationship operator, and path qualifiers. Path expressions can be more easily created than by creating the path expressions directly in SQL. The path expressions can easily be incorporated into queries for querying data structured according to an object model. Examples of such queries include queries for implementing rules for checking data corresponding to IT infrastructures to see if the IT infrastructure is compliant with policies created for the IT infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024320&OS=08024320&RS=08024320
owner: EMC Corporation
number: 08024320
owner_city: Hopkinton
owner_country: US
publication_date: 20071002
---
The present disclosure relates generally to searching collections of data. For example inventive matter disclosed herein includes ways of expressing paths contained in queries useful for querying the collections of data.

Advances in computer technology such as microprocessor speed memory and storage capacity data transfer bandwidth and software functionality provide for an increasing amount of electronic data to be collected and stored. As the amount of this electronic data grows it becomes increasingly important to store the data in a manner that provides for data searches and retrieval. A common approach is to store the electronic data in a structured manner in one or more databases. For example database designers can structure the data according to a model using data modeling languages such as the Entity Relationship Model and the Unified Data Model Language. Such models can represent the data in terms of entities and relationships. In particular examples the model used to structure the data is referred to as an object model.

Typically database designers create a database management system DBMS to facilitate the searching and retrieval of data stored in the one or more structured databases. The DBMS provides a query language that provides a means for users to construct queries in order to access the data in the one or more databases. For example Structured Query Language SQL allows users to create SQL queries to search structured databases.

Conventional systems providing access to data in a database such as systems that help a user perform analysis of the data in the database commonly provide an application programming interface API that enables a user to query the database. The API may provide the user with access to some or all of the functionality provided by an underlying DBMS. Accordingly the user typically formulates queries for querying the database using a query language such as SQL.

One example of such a system is a compliance analysis system. Compliance analysis systems performing compliance analysis on data in a configuration management database CMDB enable a respective user to create a rule and perform certain functions such as compliancy checks. For example conventional compliance analysis systems can be used to ensure that a resource in an information technology IT infrastructure such as a client computer is compliant with a data security regulatory rule. If the client computer is not compliant the conventional compliance analysis system can provide notification to an IT administrator regarding the violation.

Conventional compliance analysis systems commonly provide an application programming interface API that enables a user e.g. an IT administrator to query a configuration management database CMDB to help the user detect violations of compliance policies. Typically the user queries the CMDB using a query language such as SQL.

Users can have difficulty working with a system that provides the user with a SQL API or a SQL like API. SQL queries can be difficult for users to work with for at least two reasons. First because of the verbosity of SQL SQL queries tend to be long and SQL queries tend to contain a significant amount of programming boilerplate that can be distracting and unfriendly to users. For example SQL keywords such as SELECT and FROM can appear in every query. Second SQL queries are non sequential. An SQL query includes different clauses SELECT FROM WHERE etc. As an SQL query is constructed each logical addition to the query may manifest in a plurality of the clauses. Thus the construction of a SQL query does not have a sequential flow and the query is not read in the same order that it is written.

Conventional compliance analysis systems are examples of systems that provide a user with SQL or SQL like APIs. Although conventional compliance analysis systems may provide tools that can be used to manage a set of rules and test for compliancy of an IT infrastructure to a policy as mentioned above use of conventional compliance analysis systems can be quite tedious and time consuming especially when used to manage IT infrastructures that include large groups of resources. A typical IT infrastructure can include various systems and resources such as IP networks storage arrays servers and distributed applications for example. In conventional compliance analysis systems users typically implement compliancy rules using SQL queries that are constructed by the users of the conventional compliance analysis system. SQL queries can be difficult for users to work with for at least the reasons discussed above.

Inventive matter disclosed herein deviates with respect to and improves upon conventional technology such as discussed above and other technology also known in the prior art. For example embodiments of inventive matter disclosed herein enable users to create path expressions more easily than when using methods known in the prior art such as by creating the path expression in an SQL query. In query languages a path expression identifies at least one object or attribute of at least one object by describing how to navigate to the at least one object or the attribute of at least one object. A path expression can be thought of as a traversal or sequence of steps for getting from a first object in an object model to other objects in the object model or to attributes of other objects in the object model. A path expression can also be thought of as linking a first object in the object model to other objects in the object model or to attributes of other objects in the object model.

Queries including path expressions in accordance with embodiments disclosed herein can be created for querying data structured in accordance with an object model. In particular embodiments a system can receive input identifying at least one path each path being from an object in an object model to a related object in the object model or to an attribute of a related object in the object model. The system can also create a path expression for each identified path each path expression being composed from tokens selected from the group consisting of object identifiers attribute identifiers a relationship operator and path qualifiers.

Embodiments of inventive matter disclosed herein enable users to easily and intuitively create compliance policies against a CMDB without having to use complex SQL like APIs. Users are provided with a High Level Query API into a CMDB that is not only general and powerful the query interface also enables users to easily read understand and author queries into the CMDB.

Developers of compliance analysis systems in accordance with embodiments disclosed herein do not necessarily need to replace conventional SQL like APIs with the High Level Query APIs disclosed herein. Thus in particular embodiments High Level Query APIs as disclosed herein may operate on top of a conventional SQL like API. That is a user may interface with a High Level Query API as disclosed herein and the High Level Query API can interface with a convention SQL like API. In other embodiments the High Level Query API may interface directly with the CMDB.

In particular embodiments a compliance manager executing on a computer system has access to a repository of collected data. The collected data may be obtained as a result of direct or indirect queries to resources in a respective IT infrastructure. The collected data may also be obtained as a result of monitoring message information transmitted between resources in the IT infrastructure.

Based on input from a user the compliance manager enables creation of policies and rules to test compliance of IT infrastructure resources via evaluation of the corresponding collected data. Each of one or more rules associated with a respective compliance policy for an IT infrastructure is defined by specifying three items 1 the type of configuration items to which the rule is to be applied 2 the rule scope that determines which configuration items of the configuration type are to be checked for compliance and 3 a desired state that each configuration item checked must satisfy in order to be considered in compliance.

In embodiments disclosed herein a compliance manager accumulates query fragments associated with the rule scope. The compliance manager also accumulates query fragments associated with the desired state of a rule. The compliance manager merges the accumulated query fragments into a query for applying the rule to data corresponding to the IT infrastructure being checked for compliance. At least one query fragment the query or both the query and the at least one query fragment includes the path expression for at least one identified path.

Embodiments of inventive matter disclosed herein enable users to create path expressions more easily than when using methods know in the art. The syntax of path expressions disclosed herein allow users to incrementally build path expressions by choosing tokens of path expressions that can be sequentially added together to create the path expression. There are four different tokens that a user can select from in order to create a path expression. These four tokens are object identifiers e.g. the name of an object attribute identifiers e.g. the name of an attribute a relationship operator and path qualifiers. In particular embodiments a user can select a token either by selecting text associated with the token from a menu of displayed text or by entering text that represents the token.

Path expressions disclosed herein can be incorporated into queries that can be executed to query structured data. The present disclosure describes in some detail a particular application for path expressions and queries created in accordance with embodiments disclosed herein. That is the present disclosure describes in some detail example embodiments e.g. compliance manager and compliance rules useful in compliance analysis systems.

Accordingly inventive matter disclosed herein provides for compliance rules. In particular embodiments of the inventive matter disclosed herein an administrator for an IT infrastructure can interact with a compliance manager application to more easily create compliance rules and make the rules part of a policy to which a particular IT infrastructure may be expected to comply. The compliance manager can execute the rules to determine whether the IT infrastructure is in compliance with the policy.

The data collection manager collects data e.g. resource information from resources services processes switch applications etc. operating and or present in the IT infrastructure . The IT infrastructure can include one or more networks of sub resources having data collected by data collection manager .

Data collection manager can be configured to collect information in many different ways. For example data collection manager can initiate direct queries to resources in the respective IT infrastructure . Queries can include requests for configuration data associated with a queried resource. Responses to queries can include data such as version information associated with a particular application vendor information etc. associated with a queried resource. Data collection manager then stores the received information in the CMDB for application of compliance policies and corresponding rules. In particular embodiments the received information is stored in the CMDB in accordance with one or more object models.

Note that the data collection manager can also retrieve information from resources based on indirect queries. For example the data collection manager can communicate with software agents that collect resource data on behalf of the data collection manager .

In addition to direct and indirect queries the data collection manager can also monitor connections or connectivity by monitoring message information transmitted between the resources present in the IT infrastructure . For example the data collection manager can be configured to analyze the message data transmitted in the IT infrastructure and store appropriate information about different monitored connections in the CMDB .

Based on analyzing the message data the data collection manager can identify different types of information such as a protocol used to support communicates between applications whether two or more applications communicate via encrypting data types of information exchanged between the two or more which applications communicate with each other etc. The compliance manager can apply rules to identify whether certain applications are allowed to communicate with each other or whether the applications communicate with each other using a proper protocol as specified by a rule.

In particular embodiments the data collection manager analyzes the collected data and stores the information as objects in the CMDB in accordance with one or more object models. Each object in the CMDB includes information associated with a respective resource in the IT infrastructure . Each object in the CMDB may be referred to herein as a configuration item. Storage of the collected information and or other derived information can include classifying the information in one of three classes such as whether the resource information is associated with a host resource a connection or a service in the IT infrastructure . Although this classification is sufficient in particular embodiments to store information for an IT infrastructure such as an IT infrastructure for a storage area network this classification can be extended to any number of classes sub classes etc.

In an example embodiment the IT infrastructure can include resources such as clients servers switches storage devices host resource connections supporting communications between computer systems services etc. in IT infrastructure . A resource such as a client resource e.g. a computer system can be classified as a host resource. The computer system can support a number of applications such as operating systems text editor applications e mail applications etc. Upon collection of data associated with the sub resources e.g. operating system text editors applications etc. the data collection manager stores the information in objects. Each object e.g. representing a resource or sub resource in the CMDB includes information about the resource such as software version information vendor information computer system on which the application operates etc.

In particular embodiments the data collection manager stores the information in the CMDB as a hierarchical tree of information. Pointers associated with the objects indicate how the objects are related to each other.

In particular embodiments the compliance manager via a graphical user interface on the display screen enables a respective user to create compliance policies and the compliance rules corresponding to the policies. In this manner the compliance manager may receive input defining a compliance rule wherein the input includes 1 input identifying a configuration item type 2 input defining a scope of the compliance rule and 3 input defining a desired state for each of the configuration items to be checked by the compliance rule.

A configuration item can be any object in the CMDB . The configuration item type determines what type of configuration item to which the compliance rule applies. In particular embodiments the identified configuration item type will be one of three types hosts services or connections.

The scope of the compliance rule determines which configuration items of the identified type are to be checked by the rule for compliance. The default rule scope is to apply the rule to all the configuration items of the identified configuration item type. Typically the compliance manager receives input that narrows the scope of the compliance rule to some subset of the configuration items of the identified type. For example in particular embodiments the rule scope includes at least one conditional expression. The configuration items of the identified type that satisfy the at least one conditional expression are considered within the rule scope. However if the received input does not narrow the rule scope then the rule scope is to apply the compliance rule to all configuration items of the identified type.

During application of the compliance rule each of the configuration items that fall within the rule scope will be checked by the compliance rule to see if the configuration item satisfies the defined desired state. The desired state includes at least one compliance condition that must be satisfied for a checked configuration item to be in compliance.

The compliance rules of a policy can be applied to the data in the CMDB to check whether the IT infrastructure is in compliance with the policy. The compliance manager applies a compliance rule to the data by first creating a query corresponding to the compliance rule and then executing the query to apply the compliance rule to the data corresponding to the IT infrastructure e.g. the data in the CMDB to determine compliance of the IT infrastructure .

To create the query corresponding to a compliance rule the compliance manager accumulates query fragments associated with the rule scope accumulates query fragments associated with the desired state and merges the accumulated query fragments into a query corresponding to the compliance rule. The accumulated query fragments with the rule scope may contain path expressions as defined herein and the accumulated query fragments associated with the desired state may contain path expressions as defined herein. Consequently the query corresponding to the rule may contain path expressions as defined herein.

Once the compliance manager receives input identifying a scope of the compliance policy the compliance manager may display information about the policy scope in the Preview Policy Scope region . Upon receiving input indicating that the user has selected the Next option the compliance manager can display the screenshot as shown in .

To create a compliance rule for the currently displayed compliance policy the user can select the Create Rule option . In response to such a selection the compliance manager can display the screenshot as shown in .

The compliance manager displays a pull down menu enabling the user to select a configuration item type from the menu . In this manner the user s input identifies the configuration item type selected by the user . In particular embodiments the configuration item type is either hosts services or connections. As disclosed herein the configuration item type corresponds to a type or category of resources in the IT infrastructure . For example a configuration item type of hosts corresponds to host resources in the IT infrastructure a configuration item type of services corresponds to service resources providing a respective service function in the IT infrastructure and a configuration item type of connections corresponds to connection resources between two or more resources communicating with each other in the IT infrastructure . As shown in screenshot the user has selected a configuration item type of hosts.

In particular embodiments the compliance manager will have associated a query fragment with each selectable configuration item type. For example the compliance manager may associate the hosts selection with the token hosts associate the services selection with the token services and associate the connections selection with the token connections. Similarly the compliance manager may as explained herein associate query fragments with other items selectable by the user . As the user makes selections the compliance manager accumulates the associated query fragments. For example when the user selects a configuration item type of hosts as shown in screenshot the compliance manager saves the associated query fragment e.g. the token hosts so that the saved query fragment can be later merged with other saved query fragments to create a query.

In addition to enabling selection of a configuration item type via menu the compliance manager provides a scope menu enabling the user to define a scope for the currently displayed compliance rule. The rule scope determines which configuration items of the identified type are to be checked by the compliance rule for compliance. Once the user selects a configuration item type the compliance manager may update the scope menu so that the scope menu presents the user with a selection of scope attributes pertaining to the selected configuration item type. Each scope attribute when selected by the user narrows the scope of the rule. Dynamically displaying a list of relevant attributes in the scope menu depending on selection of the configuration item type helps the user to create a respective rule more quickly because the user can select from a listing rather that create attributes from scratch. Additionally the compliance manager can utilize the object model to present a selection of scope attributes that is appropriate for the selection configuration item type. In this manner the user can not select a scope attribute that is inconsistent with the underlying object model. If the user does not select any of the attributes presented by the scope menu then the compliance rule will apply to all configuration items of the identified configuration item type.

To facilitate selection of one or more scope attributes the compliance manager displays a check box associated with each selectable attribute. The user can select a scope attribute by clicking i.e. with a computer mouse on the check box associated with the scope attribute to be selected. Similar to the selection of a configuration item type the compliance manager can associate each selectable rule scope attribute with a query fragment.

In particular embodiments the compliance manager may associate the query fragment .type windows with the selection of Windows as the particular operating system family. Upon adding this query fragment to the query fragments previously saved as discussed above the compliance manager creates the expression host.operating system.type Windows . This expression contains a path expression host.operating system.type. The expressed path is traversed by going from a first configuration item i.e. a host to a second configuration item i.e. an operating system having a .operating system relationship to the first configuration item and then going to an attribute i.e. type of the second configuration item having the value Windows. 

After completing a rule scope definition via selection of one or more scope attributes the user may initiate the defining of a desired state for each of the configuration items to be checked by the rule. The user may initiate the defining of a desired state for example by clicking on the Next option in the screenshot of . Upon receiving input indicating that the user has selected the Next option the compliance manager can display the screenshot as shown in .

The compliance manager maintains query fragments associated with each configuration item type maintains query fragments associated with each rule scope attribute and maintains query fragments associated with compliance conditions. The maintained query fragments may be written in Structured Query Language SQL or may be written in other query languages. As the compliance manager receives input identifying a rule definition i.e. configuration item type scope of the rule and desired state as herein described the compliance manager accumulates the query fragments associated with the rule definition.

In accordance with embodiments disclosed herein the compliance manager merges accumulated query fragments into a query for applying the compliance rule to data corresponding to the IT infrastructure . In particular embodiments the compliance manager does not merge the accumulated query fragments until all the query fragments have been accumulated. That is the compliance manager merges all accumulated query fragments after the rule definition is complete. However in other embodiments the compliance manager may incrementally merge the query fragments as the compliance manager receives input defining the rule. That is each time the compliance manager receives input selecting a part e.g. configuration item type rule scope attribute s or compliance conditions the query fragment associated with the part is merged into a query.

The queries formed as described herein will typically contain at least one path expression. The structure of path expressions formable in accordance with embodiments disclosed herein is designed to mitigate the verbosity problem of SQL by providing for compact expressions. The structure is also designed to provide for path expressions that are sequential. The path expressions can be stored in any computer readable format.

Path expressions as described herein are composed of object identifiers e.g. a name attribute identifiers e.g. a name a relationship operator and path qualifiers. An example of an object identifier is the name e.g. hosts of a configuration item type as described above. Another configuration item might be named operating system also as described above. Similarly attribute names identify attributes of configuration items. The path expressions describe in a short an accurate manner a traversal between a current configuration item and related configuration items or attributes. The relationship operator e.g. . is used to indicate in the path expression a traversal from one configuration item to a second configuration item. The relationship operator is followed by the name of the relationship between the two configuration items. For example a path expression can indicate a traversal from a service to the host on which the service is running by adding .host to the path. An example of such a path expression includes the following path expression service.host .

A path qualifier is used to narrow a path. For example suppose there is a path expression that traverses from a host to installed products. This path expression may look like the following host.operating system.installedProducts. If the user desires to only refer to those installed products which represent an installation of a product having a particular name a path qualifier can be added to the path expression. That is the path qualifier can be placed after the traversal to the installed product configuration item. In particular embodiments a path qualifier is indicated by square brackets. An example of such a qualifier is name Professional Edition 2003 . Thus the path expression becomes host.operating system.installedPoducts name Professional Edition 2003 . In this manner the path expression has been narrowed and instead of traversing to each of the installed products the path now traverses only to those installed products named Professional Edition 2003. Path qualifiers can include other comparison operators other than the i.e. equal operator in the above example. Other useable comparison operators include i.e. not equal and i.e. containing .

The compliance condition lines define the desired state of the compliance rule applied by the script . In this example the desired state is that the hosts being checked for compliance have a disk labeled c that has a capacity greater than 100. Thus the path expression determines an attribute to be checked. And the compliance condition is that the attribute i.e. the capacity of the c disk on a host must be greater than 100. The query checks for violations of the compliance rule. A host is in violation of a compliance rule when the scope constraints are met i.e. scope constraint is true and not all the compliance conditions are met i.e. all conditions is true where is a not operator. Once the query is executed the compliance manager can retrieve results of the query using the lines shown in .

In particular embodiments the compliance manager may query the CMDB directly with the query produced by merging accumulated query fragments. However in other embodiments the compliance manager may translate the produced query into a query expressed in a different query language. For example the CMDB may have an SQL API and the compliance manager may need to translate the produced query into an SQL query before the query can be executed against the CMDB .

As shown computer system of the present example includes an interconnect that couples a memory system a processor an I O interface and a communications interface . I O interface enables computer system to access the CMDB and display a graphical user interface on display screen . Communications interface of computer system enables computer system to communicate over network to transmit and receive information from different resources.

As shown memory system is encoded with compliance manager application supporting generation of graphical user interface and other functions in accordance with embodiments disclosed herein. Compliance manager application can be embodied as software code such as data and or logic instructions e.g. code stored in the memory or on another computer readable medium such as a disk that support functionality according to different embodiments described herein.

During operation of compliance manager application processor accesses memory system via the interconnect in order to launch run execute interpret or otherwise perform the logic instructions of the compliance manager application . Execution of the compliance manager application produces processing functionality in compliance manager process . In other words the compliance manager process represents one or more portions of the compliance manager application or the entire application performing within or upon the processor in the computer system .

It should be noted that compliance manager process also in executed in computer system can be represented by either one or both of the compliance manager application and or the compliance manager process . For purposes of the present disclosure and different embodiments herein general reference will again be made to the compliance manager process as performing or supporting the various steps and functional operations as previously discussed and as may be discussed further in this specification.

As mentioned in addition to the compliance manager process embodiments herein include the compliance manager application itself i.e. the un executed or non performing logic instructions and or data . The compliance manager application may be stored on a computer readable medium such as a floppy disk hard disk or optical medium. The compliance manager application may also be stored in a memory type system such as in firmware read only memory ROM or as in this example as executable code within the memory system e.g. within Random Access Memory or RAM . In addition to these embodiments it should also be noted that other embodiments herein include the execution of compliance manager application in processor as the compliance manager process . Thus those skilled in the art will understand that the computer system may include other processes and or software and hardware components such as an operating system that controls allocation and use of hardware resources.

In step the compliance manager creates a path expression for each path identified in step . Each path expression created is composed from tokens selected from the group consisting of object identifiers attribute identifiers a relationship operator and path qualifiers. A first example of a path expression can be found in the constraint expression wherein the expressed path i.e. host.operating system.type is from a host to a type attribute of an operating system. The constraint expression checks to see if the type attribute indicated by the path expression is equal to Windows. A second example of a path expression can also be found in . The path expressed by the path expression is from a host to a capacity attribute of a disk labeled c .

Step is an embodiment of step . In step the compliance manager creates a path expression for each path identified in step . Step comprises step . In the compliance manager creates a path expression by adding a token for a first path expression to produce a second path expression. An example of this step is discussed in the text above describing the creation of the path expression found in the constraint expression . In general a path expression can be extended by adding the relationship operator followed by either the name of a configuration item or the name of an attribute.

In step the compliance manager creates a query for querying data structured in accordance with the object model wherein the created query includes at least one of the path expressions created by step . That is the created query will comprise one or more path expressions created in accordance with embodiments disclosed herein.

In particular embodiments the query created in step may be executed directly to query the data. However in other embodiments the created query can be translated into a second query before being executed. For example in step the compliance manager translates the created query into an SQL query. An example of such a translation is shown in .

In step the compliance manager accumulates query fragments associated with the defined rule scope. In step the compliance manager accumulates query fragments associated with the defined desired state.

In step the compliance manager merges the accumulated query fragments into a query for applying the compliance rule to data corresponding to the IT infrastructure. At least one query fragment or the query or both the query and the at least one query fragment will include the path expression for one of the paths identified in step . In particular embodiments the query is expressed as an SQL query. In particular embodiments the compliance manager executes the query to apply the defined rule to data corresponding to the IT infrastructure to determine compliance of the IT infrastructure.

In accordance with embodiments of inventive matter disclosed herein novel methods for expressing paths contained in queries are provided. While inventive matter has been shown and described herein with reference to specific embodiments thereof it should be understood by those skilled in the art that variations alterations changes in form and detail and equivalents may be made or conceived of without departing from the spirit and scope of the invention. Accordingly the scope of the present invention should be assessed as that of the appended claims and by equivalents thereof.

