---

title: Retaining disk identification in operating system environment after a hardware-driven snapshot restore from a snapshot-LUN created using software-driven snapshot architecture
abstract: A program, method and system are disclosed for managing a snapshot backup restore through a hardware snapshot interface, i.e. a hardware-driven snapshot restore, based upon a software-driven snapshot backup, e.g. created with software such as volume shadow copy service (VSS). When conventional hardware-driven snapshot restores are performed using a snapshot backup that was created using the VSS-based software such as copy services, data access issues can arise, due to the operating system assigning of a new disk signature to the disk being restored. This problem can be overcome by temporarily storing the original disk signature and then overwriting the new, incorrect disk signature after initializing the restore. This can ensure that the operating system identifies the source LUNs (and accordingly, the drive letter and mount points of the disk) using the same disk signature as before the restore.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028136&OS=08028136&RS=08028136
owner: International Business Machines Corporation
number: 08028136
owner_city: Armonk
owner_country: US
publication_date: 20070309
---
This invention relates to data backups systems. Particularly this invention relates to restoring data backups with hardware and software backup and restore processes such that consistency of disk signatures is maintained before and after restore.

In a typical computer operating system such as the Windows Operating System every physical disk detected by the operating system is assigned a unique disk signature when the disk is first initialized. In particular the drive letter and mount point assignments are keyed off the disk signature. Data backups such as snapshot backups are created and restored within this hardware.

At a high level two kinds of snapshot technologies can be defined hardware based and software based. Typically a hardware based snapshot may be created by the firmware embedded in the hardware. However it is important to note that such backups may be requested by software e.g. as the IBM Tivoli Storage Manager TSM for copy services product does . On the other hand software based snapshots may be created by the software typically either by a file system or a logical volume manager. After a hardware based snapshot restore such as an instant restore in the TSM product family of a Logical Unit Number LUN from a LUN created using a copy service such as Volume Shadow Copy Services VSS snapshot the operating system does not reassign driver letters and mount points that were originally assigned to the source disk. This in turn causes data access problems for the applications that store and access data on the volume after an instant restore. This problem is apparent after the system reboots when the device scan and initialization takes place but can also occur without a reboot. The cause of the problem is that the operating system identifies the source disk as a new LUN after the instant restore and assigns a new disk signature to the source LUN while the old driver letter remains assigned to the disk signature prior to the restore.

VSS is a Microsoft platform that operates to assist driving both hardware based as well as software based snapshots from a single interface. The described inconsistency may be specific to the snapshot backups created using a software copy service that uses underlying VSS and does not exist if the snapshot is created outside of the VSS for example using the user interface offered by the hardware vendor. It should be noted that VSS alone does not create a snapshot an underlying snapshot service is also required.

However the described problem occurs for the snapshots created using VSS i.e. that are software driven because the VSS model requires snapshot to be made available with an exception to the Windows host system known as import in VSS terminology. Backups performed by such software access both source and target LUNs at the same time that are likely from the same host. In order to support simultaneous access the software import process updates the disk signature on the snapshot backup LUN without user awareness. In short a target LUN in hardware driven snapshot is not identical to its source LUN and differs in disk signature. Some systems and techniques have been developed for managing data backups particularly snapshot data backups.

U.S. Patent Application Publication No. 2003 0204597 by Arakawa et al. published Oct. 30 2003 discloses a storage system configured to provide a storage area to a host coupled to the storage system. This includes a first storage device of first type being configured to store data and provide one or more data storage related functions. A second storage device of second type is configured to store data and provide one or more data storage related functions. A virtual volume provides a storage location and being associated with at least one of the first and second storage devices. A database includes information relating to the one or more data storage related functions that the first and second storage devices are configured to perform. A first server is coupled to the first and second storage devices and having access to the database the first server being configured to access the database in response to a data storage related function request from the host involving at least one of the first and second storage devices. The database is accessed to determine whether or not the at least one of the first and second storage devices is capable of performing the request from the host. The first server further being configured to perform the request if the determination is negative or provide an instruction to the at least one of the first and second storage devices to perform to the request if the determination is positive.

U.S. Patent Application Publication No. 2005 0240635 by Kapoor et al. published Oct. 27 2005 discloses methods and systems of snapshot management of a file system in a data storage system. To represent the snapshots the invention maintains pointers to the root block pointer of each snapshot. When the active file system is modified this invention avoids overwriting any blocks used by previous snapshots by allocating new blocks for the modified blocks. When the invention needs to put an established block in a new location it must update a parent block to point to the new location. The update to the parent block may then require allocating a new block for the new parent block and so forth. Parts of the file system not modified since a snapshot remain in place. The amount of space required to represent snapshots scales with the fraction of the file system that users modify. To maintain snapshot integrity this invention keeps track of the first and last snapshots that use each block in space map blocks spread throughout the file system data space. When users delete snapshots this invention may use a background process to find blocks no longer used by any snapshot and makes them available for future use.

U.S. Patent Application Publication No. 2005 0004979 by Berkowitz et al. published Jan. 6 2005 discloses a system and method of transporting volumes of information from one host computer system to another using point in time copies of LUNs but wherein the hardware provider does not necessarily understand the volume configuration of the data. The system and method involves an intermediate layer i.e. a point in time copy interface layer that communicates with both a requesting host computer system and a hardware provider to enable the transfer of volumes of information without requiring that the hardware provider understand the volume information.

U.S. Patent Application Publication No. 2005 0108292 by Burton et al. published May 19 2005 discloses an apparatus for managing incremental storage including a storage pool management module that allocates storage volumes to a virtual volume. Also included is an incremental log corresponding to the virtual volume which maps virtual addresses to storage addresses. The apparatus may also include a replication module that sends replicated data to the virtual volume and a policy management module that determines allocation criteria for the storage pool management module. In one embodiment the incremental log includes a lookup table that translates read and write requests to physical addresses on storage volumes within the virtual volume. The replicated data may include incremental snapshot data corresponding to one or more primary volumes. The various embodiments of the virtual incremental storage apparatus method and system facilitate dynamic adjustment of the storage capacity of the virtual volume to accommodate changing amounts of storage utilization.

Existing systems and methods do not address the problem of inconsistent LUNs in a snapshot backup and restore e.g. arising between a software snapshot and a hardware restore described above. Thus there is a need in the art for systems and methods to ensure consistency of disk signatures before and after a hardware based snapshot restore from a LUN created by a software based snapshot. These and other needs are met by the present invention as detailed hereafter.

A program method and system are disclosed for managing a snapshot backup restore through a hardware snapshot interface i.e. a hardware driven snapshot restore based upon a software driven snapshot backup e.g. created with software such as volume shadow copy service VSS . When conventional hardware driven snapshot restores are performed using a snapshot backup that was created using the VSS based software such as copy services data access issues can arise due to the operating system assigning of a new disk signature to the disk being restored. This problem can be overcome by temporarily storing the original disk signature and then overwriting the new incorrect disk signature after initializing the restore. This can ensure that the operating system identifies the source LUNs and accordingly the drive letter and mount points of the disk using the same disk signature as before the restore.

A typical embodiment of the invention comprises a computer program embodied on a computer readable medium including program instructions for storing a disk signature of a disk before initialization of restoring a data backup to the disk and program instructions for overwriting the disk signature of the disk after the initialization of restoring the data backup to the disk with the stored disk signature. Typically the disk signature may be stored by saving a first sector of a logical unit number LUN of the disk in a cache memory or using an application programming interface API supporting a layout of the disk e.g. an applicable Microsoft API . Further the correct disk signature can then be used to determine a drive letter and mount points assigned to the disk such that overwriting the disk signature after initialization of restoring the data backup to the disk maintains the drive letter and the mount points assigned to the disk as before initialization of restoring the data backup.

In some embodiments restoring the data backup may comprise a hardware based snapshot restore. The hardware based snapshot restore may be performed by a hardware controller of the disk e.g. through the hardware user interface. On the other hand the data backup may comprise a software driven snapshot backup. For example the snapshot backup may be generated by a software copy service such as VSS. A typical embodiment of the invention can resolves access issues arising from restoring the data backup comprises a hardware based snapshot restore e.g. performed by a hardware controller of the disk where the data backup comprises a VSS based snapshot backup e.g. generated by a software copy service .

Similarly a typical method embodiment of the invention comprises the steps of storing a disk signature of a disk before the initialization of restoring a backup to the disk and overwriting the disk signature of the disk after the initialization of restoring the backup to the disk with the stored disk signature. Method embodiments of the invention may be further modified consistent with system and or program embodiments of the invention described herein.

Likewise a typical backup system embodiment of the invention comprises a disk having a disk signature a data backup for the disk and a processor and memory for storing the disk signature of the disk before initialization of restoring a backup to the disk and for overwriting the disk signature of the disk after the initialization of restoring the backup to the disk with the stored disk signature. System embodiments of the invention may be further modified consistent with program and method embodiments of the invention described herein.

As previously mentioned VSS is a Microsoft platform that operates to assist driving both hardware as well as software based snapshot from a single interface. But VSS can not create a snapshot by itself and requires a snapshot service to support it. Accordingly the underlying technology may be hardware based for both the backup as well as restore. A typical VSS user may not even be aware of the underlying snapshot technology. The previously described disk signature problem arises from a processing difference between the backup creation and restore path for a snapshot backup. Specifically when TSM copy services creates a backup the backup is processed through the VSS APIs to create the snapshot backup. This type of processing to create the backup may be termed software driven. However on the restore side the snapshot has to be created outside of the VSS using APIs provided by the hardware since VSS does have the capability to allow instant restore. This type of processing to restore a backup may be termed hardware driven. So there exists a problem related to the disk signature that is solved by this invention.

Embodiments of the invention can operate as part of a distributed data backup system for a networked computer system that utilizes hardware driven snapshot restore by hardware such as the IBM Tivoli Storage Manager from a snapshot created by software such as Microsoft Volume Shadow Copy Services VSS . Such software driven snapshots maintain a different LUN from the LUN of the original disk that is being backed up. The LUN stores the disk signature which assists the operating system to identify the disk being used. A disk may be defined as any device that stores data. The target LUN the LUN that the software maintains to store backup data is distinct from the source LUN the LUN that represents the disk in use . This technique of maintaining multiple LUNs is necessary when such software copy services create the backups to allow both LUNs to be accessed simultaneously by the software. Otherwise the copy service could not distinguish between the two sets of data if they were assigned the same LUN. When a snapshot based restore is initiated by the hardware the source LUN is replaced with the target LUN. However when the source LUN is replaced with the target LUN the operating system identifies the disk being restored as a new disk and assigns it a new disk signature. This problem occurs due to the use of multiple LUNs by the software driven snapshot and their use with a hardware driven snapshot restore.

In many computer systems computer applications are programmed to store data at specific locations on disk. When a hardware driven snapshot restore using a software driven snapshot forces the operating system to create a new drive letter for an existing disk the computer applications will not be able to access or store data at the correct location and data access issues arise. Embodiments of the invention can make disk signatures before a restore consistent with disk signatures after the restore to eliminate such data access issues.

Generally the computer operates under control of an operating system e.g. z OS OS 2 LINUX UNIX WINDOWS MAC OS stored in the memory and interfaces with the user to accept inputs and commands and to present results for example through a graphical user interface GUI module . Although the GUI module is depicted as a separate module the instructions performing the GUI functions can be resident or distributed in the operating system a computer program or implemented with special purpose memory and processors.

The computer also implements a compiler which allows one or more application programs written in a programming language such as COBOL PL 1 C C JAVA ADA BASIC VISUAL BASIC or any other programming language to be translated into code that is readable by the processor . After completion the computer program accesses and manipulates data stored in the memory of the computer using the relationships and logic that was generated using the compiler . The computer also optionally comprises an external data communication device such as a modem satellite link ethernet card wireless link or other device for communicating with other computers e.g. via the Internet or other network.

Instructions implementing the operating system the computer program and the compiler may be tangibly embodied in a computer readable medium e.g. data storage device which may include one or more fixed or removable data storage devices such as a zip drive floppy disc hard drive DVD CD rom digital tape etc. which are generically represented as the floppy disc . Further the operating system and the computer program comprise instructions which when read and executed by the computer cause the computer to perform the steps necessary to implement and or use the present invention. Computer program and or operating system instructions may also be tangibly embodied in the memory and or transmitted through or accessed by the data communication device . As such the terms article of manufacture program storage device and computer program product as may be used herein are intended to encompass a computer program accessible and or operable from any computer readable device or media.

Embodiments of the present invention are generally directed to any software application program that manages backup storage and restore processes for data stored on disk. The backups may be stored locally on the computer along with the original data or may be stored remotely such as on a SAN connected over a network. The program may operate within a single computer or as part of a distributed computer system comprising a network of computing devices. The network may encompass one or more computers connected via a local area network and or Internet connection which may be public or secure e.g. through a VPN connection .

Those skilled in the art will recognize many modifications may be made to this hardware environment without departing from the scope of the present invention. For example those skilled in the art will recognize that any combination of the above components or any number of different components peripherals and other devices may be used with the present invention meeting the functional requirements to support and implement various embodiments of the invention described herein.

Although the results may be indistinguishable there is a fundamental difference in how a hardware driven snapshot backup and restore are performed compared with how a software based snapshot backup and restore are performed. This difference arises with respect to the how the LUNs of the source and backup are managed.

In this example a hardware controller of the disk manages the creation of the snapshot backup for the source data on the disk . The target LUN created through the hardware driven process and stored with the backup data is identical to the LUN of the disk i.e. the source LUN for the hardware driven snapshot backup . Accordingly the target LUN includes an identical disk signature . Consistency of the process is maintained when a hardware driven restore is also performed with the hardware driven snapshot backup . When the hardware driven snapshot restore process is later performed the source LUN and source data are simply replaced by the target LUN and the backed up data . Effectively the disk signature remains intact when overwritten by the identical backup disk signature and consequently the drive letter and mount point assignments after the restore are consistent with those before the restore. Thus after a hardware driven backup and restore there is no discernible difference to the operating system in accessing the disk so the hardware driven snapshot backup and hardware driven restore gives rise to no data access issues. However a snapshot that is software driven by a service such as VSS backup and software driven restore does not maintain LUN consistency.

As long as the software copy service that created the snapshot backup is also used to restore the snapshot backup to the disk or any such similar process employing simultaneous access in the restore the disk signature will be maintained. This is because the software copy service does not overwrite the source LUN with the different target LUN as it performs the snapshot restore. Note that this type of restore process should be understood by those skilled in the art although it is presented theoretically as such a restore process is not presently available with VSS. The original source LUN as well as the disk signature drive letter and mount point assignments is maintained during the software driven restore. Thus it can be seen how consistent use of the same process type hardware or software in creating and restoring the snapshot backup operate properly. However the differences in LUN handing between hardware and software based snapshot backup and restore processes create problems when hardware and software processes are mixed between the backup and restore.

The snapshot backup restore process on the other hand is now performed by the software using the interfaces of hardware disk controller . Thus this process will overwrite the source LUN with the target LUN as previously described in . But because the two LUNs are different as a result of the software driven snapshot backup process the disk will be given the different signature of the snapshot backup which will also yield assignment of a different drive letter and mount point assignments. Accordingly previously set software and hardware will be unable to locate the disk after the restore because these elements will be seeking the old drive letter .

As described in the following section embodiments of the present invention can overcome this incompatibility by a process of caching the LUN or at least the disk signature portion of the LUN of the source drive and overwriting the software driven target LUN after it has been copied to the source drive during the restore process.

It is also worth mentioning that the reverse scenario of attempting to perform a software driven snapshot restore with a hardware driven snapshot backup will fail from the outset. This is because the hard based snapshot backup will have a LUN and disk signature and mount point assignments identical with that of the source disk e.g. as described in . A software driven restore operation will be unable to act on such a snapshot backup because it will not be able to simultaneously access a backup and a source disk having identical LUNs.

4. Caching to Accommodate Incompatibility of Software Driven Snapshot and Hardware Driven Snapshot Restore

It should also be noted that in an alternate but similar manner some application programming interfaces APIs have been developed that are capable of reading and writing disk signatures directly e.g. from Microsoft. Accordingly any suitable API may also be employed to store and later overwrite the disk signature of the source LUN . However an applicable API must provide support for the layout of the disk to operate properly. In this case the API may employ the same or similar memory to temporarily store the disk signature . 

This restoration of the disk signature allows computer programs to maintain data access consistency as will be understood by those skilled in the art. For example when a computer application attempts to locate A directory file.txt it will now be able to find it after the restore because the drive letter is the same as it was before the restore. It should also be noted that although the process has been described as caching only the first sector of the LUN the process may alternately cache any other portion of the disk data as necessary to preserve the disk signature and maintain consistency of the disk reference before and after the snapshot backup restore without departing from the scope of the invention.

This concludes the description including the preferred embodiments of the present invention. The foregoing description including the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible within the scope of the foregoing teachings. Additional variations of the present invention may be devised without departing from the inventive concept as set forth in the following claims.

