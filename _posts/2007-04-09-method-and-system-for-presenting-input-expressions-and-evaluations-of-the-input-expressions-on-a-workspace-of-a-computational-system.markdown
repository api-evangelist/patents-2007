---

title: Method and system for presenting input expressions and evaluations of the input expressions on a workspace of a computational system
abstract: In a method for presenting information, an interactive document, for example, may be created that includes both an input expression and a result generated by evaluating the input expression, and where the input expression can be selectively hidden. This may permit “decluttering” of the document so that it may be easier to follow. At the same time, user interface mechanisms allow a viewer to reveal the input expression if the viewer desires to see the input expression. In this method, an input expression and a result corresponding to an evaluation of the input expression are presented on a workspace associated with a computational software application. Additionally, a first user interface mechanism associated with the input expression is presented on the workspace. In response to an activation of the first user interface mechanism, the input expression may be hidden on the workspace, while the result is presented on the workspace.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08407580&OS=08407580&RS=08407580
owner: Wolfram Research, Inc.
number: 08407580
owner_city: Champaign
owner_country: US
publication_date: 20070409
---
This disclosure generally relates to computational software applications and more particularly to techniques for hiding and revealing on a workspace input expressions used to generate results displayed on the workspace.

This disclosure will refer to a particular implementation of these techniques in the MATHEMATICA software system available from Wolfram Research Inc. The methods themselves are more general and could be implemented in a variety of software environments. To understand the illustrations however requires some familiarity with the MATHEMATICA environment.

MATHEMATICA is a powerful computational tool that can evaluate general symbolic expressions as well as mathematical and numeric expressions. A unifying feature of MATHEMATICA is that everything is internally represented as a symbolic expression with all more specific data types treated as special cases symbols to which additional rules apply. MATHEMATICA is an interpreted language with a notion of evaluation of symbolic expressions. Evaluation consists in applying to any symbolic expression all transformation rules that fit that expression.

In the MATHEMATICA software system a user can create interactive electronic documents referred to as notebooks. Various expressions including numeric and symbolic expressions can be entered into a notebook via a keyboard for example and a user can cause the expression to be evaluated. Some expressions may be used to create graphical displays in a notebook. One example is a built in function Plot. A user could type into the notebook the expression Plot y 2 y 0 5 and the MATHEMATICA software system evaluates the expression Plot y 2 y 0 5 to generate a plot of the function yversus the variable y between y 0 to y 5. The generated plot is then displayed in the notebook. The MATHEMATICA software system provides other built in functions for creating graphical displays such as ContourPlot DensityPlot Plot3D ParametricPlot ParametricPlot3D etc. Further built in functions are provided for displaying tables and matrices.

Using the MATHEMATICA software system one can create a presentation or an interactive paper. For example text can be added to notebooks in addition to computational input expressions and outputs. Also text formatting styles page formatting etc. can be applied. Titles section headers etc. and hyperlinks can be added. Thus notebooks can be made to appear as much like electronic equivalents of traditional books or printed publications as desired.

Example methods are described below that at least in some implementations may permit the creation of an interactive document that includes both an input expression and a result generated by evaluating the input expression and where the input expression can be selectively hidden. This may permit decluttering of the document so that it may be easier to follow. At the same time graphical user interface GUI mechanisms may allow a viewer to reveal the input expression if the view desires to see the input expression. In the context of the MATHEMATICA software system and merely as an illustrative example a notebook may include an input expression to generate a plot as well as an image of the plot but where the input expression may selectively be hidden and revealed using GUI mechanisms.

One of the disclosed embodiments is directed to a method for presenting information which may include presenting an input expression on a workspace associated with a computational software application and presenting on the workspace a result corresponding to an evaluation of the input expression. The method also may include presenting on the workspace a first user interface mechanism associated with the input expression and hiding on the workspace the input expression while presenting on the workspace the result in response to an activation of the first user interface mechanism. Additionally the method may include presenting on the workspace a second user interface mechanism associated with the input expression and presenting on the workspace the input expression in response to an activation of the second user interface mechanism.

Another of the disclosed embodiments is directed to a computer readable medium having stored thereon machine executable instructions. The machine executable instructions may be capable of causing the machine to present an input expression on a workspace associated with a computational software application and present on the workspace a result corresponding to an evaluation of the input expression. The machine executable instructions additionally may be capable of causing the machine to present on the workspace a first user interface mechanism associated with the input expression and hide on the workspace the input expression while presenting on the workspace the result in response to an activation of the first user interface mechanism. Further the machine executable instructions may be capable of causing the machine to present on the workspace a second user interface mechanism associated with the input expression and present on the workspace the input expression in response to an activation of the second user interface mechanism.

Still another of the disclosed embodiments is directed to another method for presenting information. The method may comprise presenting an input cell on a workspace associated with a computational software application the input cell including an input expression and presenting on the workspace an output cell including a result corresponding to an evaluation of the input expression. Also the method may comprise presenting on the workspace a first user interface mechanism associated with the input cell and hiding on the workspace the input cell while presenting on the workspace the output cell in response to an activation of the first user interface mechanism. Further the method may comprise presenting on the workspace a second user interface mechanism associated with the input cell and presenting on the workspace the input cell in response to an activation of the second user interface mechanism.

Still another of the disclosed embodiments is directed to another computer readable medium having stored thereon machine executable instructions. The machine executable instructions may be capable of causing the machine to present an input cell on a workspace associated with a computational software application the input cell including an input expression and present on the workspace an output cell including a result corresponding to an evaluation of the input expression. Also the machine executable instructions may be capable of causing the machine to present on the workspace a first user interface mechanism associated with the input cell and hide on the workspace the input cell while presenting on the workspace the output cell in response to an activation of the first user interface mechanism. Additionally the machine executable instructions may be capable of causing the machine to present on the workspace a second user interface mechanism associated with the input cell and present on the workspace the input cell in response to an activation of the second user interface mechanism.

The kernel and the front end may be implemented on a same computing system or on different computing systems that are communicatively coupled to one another. Thus the kernel and the front end may communicate via a communication link that comprises one or more of procedure calls messages a proprietary application programming interface API e.g. the API provided by MATHLINK software available from Wolfram Research Inc. etc. Additionally if the kernel and the front end are implemented on different computing systems the kernel and the front end may communicate via one or more of a local area network LAN a wide area network WAN the Internet a point to point communication link a wired communication link a wireless communication link etc.

The front end may include an interactive document referred to as a notebook similar to those often used with MATHEMATICA software systems. A notebook may include input to be sent to the kernel and output received from the kernel as well as text graphics palettes etc. A notebook may include menus and graphical tools for creating and reading notebook documents and for sending information to and receiving information from the kernel .

A user can cause information in a cell to be sent to the kernel as input by pressing Enter or Return while holding down the Shift key after a cursor has been placed in the cell. The kernel then evaluates the input to generate an output. The kernel may then send the generated output back to the front end . In response the front end may create one or more new cells in the notebook to display this output. Referring to an expression corresponds to an input sent to the kernel and an expression corresponds to an output generated by the kernel and sent back to the front end . The bracket indicates the cell corresponding to the expression and the bracket indicates the cell corresponding to the expression . As described above the bracket indicates that the cells corresponding to the brackets and are related. In particular the cell corresponding to the bracket includes an output that is an evaluation of contents of the cell corresponding to the bracket .

In notebooks used with MATHEMATICA software systems the front end labels each line of input with In n and labels each line of output with Out n where n indicates the nth input to the kernel or the output generated by the kernel in response to the nth input.

Alternatively the front end may comprise a text based interface in which text typed on a keyboard of a computing system is sent directly to the kernel . With a text based interface a user may interact with the kernel by typing successive lines of input and getting back from the kernel successive lines of output displayed on a display screen of the computing system. For example a prompt of the form In n may be displayed on the display screen to indicate to a user that the kernel is ready to receive input. After the input is typed in and sent to the kernel the kernel may process the input generate an output and send that output for display on the display screen with a label of the form Out n .

In some implementations the front end may be omitted. For example a software program that does not interface with a user may communicate with the kernel in a manner similar to communications between the kernel and the front end discussed above. This may comprise interaction via an API e.g. the API provided by MATHLINK software via files via an extensible markup language XML etc.

The kernel may be capable of evaluating different kinds of computations such as numeric computations symbolic computations e.g. algebraic computations integrations derivatives etc. graphic computations etc. Referring again to the expression is a symbolic expression. The kernel evaluated the expression and generated an output expression that is also symbolic. The kernel may represent different types of computations to be evaluated in a common format which may be referred to as an expression. 

The kernel may be configured to perform symbolic calculations such as symbolic integration. Such symbolic calculations may be implemented by performing systematic procedures that may not correspond to how a person might perform a symbolic procedure by hand . Such systematic procedures may include case specific procedures as well as general procedures.

In a single kernel and a single front end are shown. One of ordinary skill in the art will recognize that multiple kernels and or multiple front ends may be utilized. For example a single front end may communicate with a plurality of kernels . For instance one front end may interact with a first kernel until a time T cease interaction with the first kernel and then begin interacting with a second kernel after the time T. Also one front end may communicate with a plurality of kernels during a single time period. Similarly one kernel may interact with multiple front ends . One of ordinary skill in the art will recognize many other variations.

Although the system was described above as optionally being capable of evaluating non numeric expressions such as symbolic expressions it is to be understood that in some implementations the system may not be capable of evaluating one or more of symbolic expressions algebraic expressions graphic expressions etc.

Further the system is only one example of a system that may be utilized to implement methods and techniques described below. Other example systems include a spreadsheet application a simulation application a control system application an instrument application a game application etc.

Examples of user interface presentation techniques that can be used with various types of computing software applications will now be described. These techniques will be described in the context of the MATHEMATICA software system. It is to be understood however that these techniques can be used in other contexts and with other computational software systems as well. In the context of the MATHEMATICA software system the described techniques may help users to prepare notebooks that can be readily modified to make them more readable less cluttered etc. Generally speaking the described techniques permit a user to readily hide input expressions that are used to generate outputs displayed in the notebook.

In the example notebook the bracket is a graphical user interface GUI mechanism that is associated with the input expression . A user can activate the bracket by for example double clicking on the bracket using a pointer and a mouse a trackball a touch pad etc. In response to activation of the bracket the cell corresponding to the bracket i.e. the cell including the input expression is hidden in the notebook . In this sense at least the bracket is associated with the input expression . Additionally the bracket is associated with the graphic at least because the bracket is associated with the input expression which is in turn associated with the graphic and or because it indicates the output cell that includes the graphic . is an illustration of the portion of the example notebook after a user activated the bracket . As can be seen in the cell corresponding to the bracket as well as the bracket itself is no longer visible in the notebook . For instance the expression is no longer visible. In this manner a user can readily hide the input expression needed to generate the graphic . This may be useful for example if an author of the notebook wants viewers to focus their attention on the output as opposed to what was used to generate the output. Additionally or alternatively this may be useful for example if a user wants to reduce the size of the notebook e.g. in page size window size screen size number of pages etc. .

In addition the notebook as illustrated in includes a bracket B. The bracket B includes an indicator that indicates there is a hidden input cell associated with the graphic . Additionally the bracket B is a GUI mechanism that may be activated by for example double clicking on the bracket B using a pointer and a mouse a trackball a touch pad etc. In response to activation of the bracket B the cell corresponding to the bracket i.e. the cell including the input expression may be revealed in the notebook . For example the notebook may then appear as in . In this sense at least the bracket B is associated with the input expression . Additionally the bracket B is associated with the graphic at least because the bracket B is associated with the input expression which is in turn associated with the graphic and or because it indicates the output cell that includes the graphic .

Referring now to the system begins in an Initial state . The Initial state may be entered for example in response to a user entering a version of the input expression. In the context of the MATHEMATICA software system this may include typing the version of the input expression into the notebook and then pressing Shift Enter. is a flow diagram of an example method that may be implemented when the system is in the Initial state . At a block an input expression may be presented on the workspace. Referring to the input expression is presented on the notebook . At a block a result corresponding to an evaluation of the input expression may be presented on the workspace. Referring to the graphic corresponds to an evaluation of the input expression and the graphic is presented on the notebook . Referring to the graphic may be generated by the kernel which sends the graphic to the front end for presentation. This may be in response to the front end sending a version of the input expression to the kernel for evaluation.

At a block a first GUI mechanism associated with the input expression may be presented on the workspace. Referring to the bracket corresponds to the first GUI mechanism. As described previously the bracket is associated with the input expression at least because activating the bracket results in the input expression being hidden in the notebook . The bracket may be presented also in response to the user typing the version of the input expression and then pressing Shift Enter. Any of a variety of GUI mechanisms may be utilized such as a button an icon a pull down menu etc. associated with the input expression and or the result. If a pull down menu is utilized presenting the GUI mechanism may comprise presenting the pull down menu in response to a pointer being passed over the input expression the result an icon associated with the input expression and or the result etc. for example. As another example in which a pull down menu is utilized presenting the GUI mechanism may comprise presenting the pull down menu in response to a pointer being moved over the input expression over the result over an icon associated with the input expression and or the result etc. and then right clicking using a mouse trackball etc.

Referring again to if the first GUI mechanism is activated the system may transition to an Hide Input Expression state . Referring to the bracket GUI mechanism may be activated by moving a pointer over the bracket and for example double clicking using a left button of a mouse. In general the first GUI mechanism may be activated in any number of ways and activation techniques may depend on the type of GUI mechanism employed. For example if the first GUI mechanism is a button it may be activated by moving a pointer over the button and then selecting the button with a single click of a mouse a touch of a touch pad etc. If a touch screen is utilized the button may be selected by simply touching the button with a finger or a stylus. If a pull down menu is utilized the first GUI mechanism may be activated by selecting an appropriate item in the menu. For example the menu may include an item such as Hide Input or the like.

At a block the first GUI mechanism optionally may be hidden. For example if the first GUI mechanism is a button an icon a bracket etc. the first GUI mechanism may be hidden on the workspace after it has been activated. It is to be understood however that the block is optional. Referring to for example it can be seen that the bracket an example of the first GUI mechanism was not hidden in response to activation of the first GUI mechanism. In some implementations the first GUI mechanism may change from a first state to a second state in response to activation of the first GUI mechanism. For example the first state may be state in which the first GUI mechanism is capable of being activated and the second state may be state in which it is incapable of being activated. With a pull down menu for example an item such as a Hide Input item may be grayed out in response to a previous selection of the Hide Input item.

At a block a second GUI mechanism associated with the input expression may be presented on the workspace. Referring to the bracket B corresponds to the second GUI mechanism. As described previously the bracket B is associated with the input expression at least because activating the bracket B results in the input expression being revealed in the notebook . Any of a variety of GUI mechanisms may be utilized such as a bracket a button an icon a pull down menu etc. associated with the input expression and or the result. The second GUI mechanism may be presented in response to various events. For instance the second GUI mechanism may be presented in response to activation of the first GUI mechanism. Referring to for example the bracket B may be presented in response to user activation of the bracket . In general what initiates presentation of the second GUI mechanism may depend on the type of GUI mechanism that is employed. For example if a pull down menu is utilized presenting the second GUI mechanism may comprise presenting the pull down menu in response to a pointer being passed over the result or an icon associated with the input expression and or the result etc. for example. As another example in which a pull down menu is utilized presenting the second GUI mechanism may comprise presenting the pull down menu in response to a pointer being moved over the result or an icon associated with the input expression and or the result etc. and then right clicking using a mouse trackball etc.

Referring again to if the second GUT mechanism is activated the system may transition to an Reveal Input Expression state . Referring to the bracket B GUT mechanism may be activated by moving a pointer over the bracket B and for example double clicking using a left button of a mouse. In general the second GUT mechanism may be activated in any number of ways and activation techniques may depend on the type of GUT mechanism employed. For example if the second GUT mechanism is a button it may be activated by moving a pointer over the button and then selecting the button with a single click of a mouse a touch of a touch pad etc. If a touch screen is utilized the button may be selected by simply touching the button with a finger or a stylus. If a pull down menu is utilized the second GUT mechanism may be activated by selecting an appropriate item in the menu. For example the menu may include an item such as Show Input or the like.

At a block the first GUT mechanism is again presented on the workspace. This may be accomplished in the same manner as or in a manner similar to the techniques described above with respect to the block of . As discussed above with reference to the first GUT mechanism is presented in response to activation of the second GUT mechanism bracket B so that the appearance of the notebook is as in .

At a block the second GUT mechanism optionally may be hidden. For example if the second GUI mechanism is a button an icon a bracket etc. the second GUT mechanism may be hidden on the workspace after it has been activated. It is to be understood however that the block is optional. In some implementations the second GUI mechanism may change from a first state to a second state in response to activation of the second GUI mechanism. For example the first state may be state in which the second GUI mechanism is capable of being activated and the second state may be state in which it is incapable of being activated. With a pull down menu for example an item such as a Show Input item may be grayed out in response to a previous selection of the Show Input item. Referring to it can be seen that the bracket B an example of the second GUI mechanism is replaced by the bracket A in .

It is to be understood that the systems and methods corresponding to A B and C may be modified. For example the first GUI mechanism and the second GUI mechanism could be different states of a single GUI mechanism. As an example if the first GUI mechanism and the second GUI mechanism were a single button activation of the button while in the Hide Input Expression state may cause the system to transfer to the Reveal Input Expression state and activation of the button while in the Reveal Input Expression state may cause the system to transfer to the Hide Input Expression state . As another example if the first GUI mechanism and the second GUI mechanism were a pull down menu in the Hide Input Expression state the menu may include a Show Input item and may also include a Hide Input item that is grayed out. Similarly in the Reveal Input Expression state the menu may include the Show Input item grayed out and may include the Hide Input item but no longer grayed out. 

Generally speaking the examples of the first GUI mechanism and the second GUI mechanism described herein may be any of a variety of activatable graphical user interface mechanisms including activatable graphical user interface mechanisms currently known to those of ordinary skill in the art. The result corresponding to an evaluation of the input expression may be a numeric expression a symbolic expression a plot a chart a table a graphic etc.

The result may also be a dynamic object such as described in U.S. patent application Ser. No. 11 234 550 entitled Method of Dynamically Linking Objects Operated On By Computational System filed on Sep. 23 2005 which is hereby incorporated by reference herein in its entirety. For example is an illustration of a notebook that includes results that are dynamic objects. The notebook includes a first input cell indicated by a bracket and a first output cell indicated by a bracket . The first input cell includes an input expression that specifies a slider is to be created where a position of a knob of the slider is to be a dynamic object Dynamic x . The computational software system evaluated the expression and generated a slider having a knob . The knob is in a position corresponding to . The slider is in the output cell corresponding to the bracket . A bracket A indicates that the cells corresponding to the brackets and are related.

The notebook also includes a second input cell indicated by a bracket and a second output cell indicated by a bracket . The first input cell includes an input expression that specifies another dynamic object to be created a plot . The plot is of the function Sin y x for values of y between 0 and 2 . Because the plot specified by the input expression is to be a dynamic object the computational software system may update the plot upon changes in any underlying objects. In this case the variable x may be changed via the slider . The computational software system may evaluate the expression and generate the plot which corresponds to a plot of Sin x y where x 1. The plot is in the output cell corresponding to the bracket . A bracket A indicates that the cells corresponding to the brackets and are related.

In the example notebook the bracket is a GUI mechanism that is associated with the input expression . A user can activate the bracket by for example double clicking on the bracket . In response to activation of the bracket the cell corresponding to the bracket i.e. the cell including the input expression is hidden in the notebook . In this sense at least the bracket is associated with the input expression . Additionally the bracket is associated with the slider at least because the bracket is associated with the input expression which is in turn associated with the slider and or because it indicates the output cell that includes the slider .

Similarly the bracket is a GUI mechanism that is associated with the input expression . A user can activate the bracket by for example double clicking on the bracket . In response to activation of the bracket the cell corresponding to the bracket i.e. the cell including the input expression is hidden in the notebook . In this sense at least the bracket is associated with the input expression . Additionally the bracket is associated with the plot at least because the bracket is associated with the input expression which is in turn associated with the plot and or because it indicates the output cell that includes the plot .

In addition the notebook as illustrated in includes a bracket B. The bracket B includes an indicator that indicates there is a hidden input cell associated with the slider . Additionally the bracket B is a GUI mechanism that may be activated by for example double clicking on the bracket B. In response to activation of the bracket B the cell corresponding to the bracket i.e. the cell including the input expression may be revealed in the notebook . For example the input cell output cell pair corresponding to the brackets and may then appear as in . In this sense at least the bracket B is associated with the input expression . Additionally the bracket B is associated with the slider at least because the bracket B is associated with the input expression which is in turn associated with the slider and or because it indicates the output cell that includes the slider .

Similarly the notebook as illustrated in includes a bracket B. The bracket B includes an indicator that indicates there is a hidden input cell associated with the plot . Additionally the bracket B is a GUI mechanism that may be activated by for example double clicking on the bracket B. In response to activation of the bracket B the cell corresponding to the bracket i.e. the cell including the input expression may be revealed in the notebook . For example the input cell output cell pair corresponding to the brackets and may then appear as in . In this sense at least the bracket B is associated with the input expression . Additionally the bracket B is associated with the plot at least because the bracket B is associated with the input expression which is in turn associated with the plot and or because it indicates the output cell that includes the plot .

The techniques described above may be utilized in a variety of contexts. For example they may be utilized in environments such as presentations slideshows online learning collaboration systems etc. The input expression used to generate a result may be included in the same presentation slideshow etc. document but may be selectively hidden so that the presentation slideshow etc. is easier to follow. GUI mechanisms allow the input expressions to be seen and hidden as desired. For example if a reader wants to see how a particular result was generated the reader can use a GUI mechanism to reveal the input expression. If the reader is not interested in seeing the specific input expression used to generate a result it can remain hidden and thus not clutter the presentation slideshow etc.

Referring again to in another implementation the kernel may comprise a server application such as web server and the front end may comprise a client user interface application such as a web browser. In such an implementation the workspace may be a web page and the input expression the result the first GUI mechanism and the second GUI mechanism can be represented by formatted expressions such as an extensible markup language XML data structures. Thus a GUI mechanism could be an XML data structure. In this implementation when a web page is to be changed e.g. to hide an input expression to present a GUI mechanism etc. the web server could change remove or add new XML objects in the web page and then cause the web browser to display an indication of the updated web page. For example the web server could send a refreshed page to the web browser or cause a portion of the page being displayed to the user to be updated. Extensible Style Language Transformation XSLT techniques could be utilized to change remove or add new XML objects.

Any of the techniques described above including the blocks described with reference to A B and C may be implemented using software comprising computer program instructions. Such computer program instructions may control the operation of a computing device such as a desktop computer a laptop computer a tablet computer a workstation a server a mainframe a cellular phone a telephone a set top box a PDA etc. The computing device may have a memory in which the computer program instructions may be stored. The computer program instructions may be written in any high level language such as the programming language used with MATHEMATICA software systems C C C Java or the like or any low level assembly or machine language. By storing computer program instructions in a memory of the computing device the computing device is physically and or structurally configured in accordance with the computer program instructions.

It is to be understood that although examples were discussed in the context of the MATHEMATICA software system the techniques described above can be used with other computational software applications as well. Additionally it is to be understood that the computational software application need not utilize an interpretive language such as with the MATHEMATICA software system. Rather the above described techniques may be used with a variety of types of computational software applications including applications that utilize compilation for example. In general a computational software application evaluates input expressions to generate results and this may include optionally interpretation and or compilation.

While many methods and systems have been described herein as being implementable in software they may be implemented in hardware firmware etc. and may be implemented by a variety of computing systems and devices. Thus the method blocks and systems described herein may be implemented in a standard multi purpose central processing unit CPU a special purpose CPU or on specifically designed hardware or firmware such as an application specific integrated circuit ASIC or other hard wired device as desired. When implemented in software the software routine may be stored in any computer readable memory such as on a magnetic disk a laser disk such as a compact disk CD a digital versatile disk DVD a flash memory a memory card a memory stick etc. or other storage medium in a RAM or ROM of a computer or processor in any database etc. Likewise this software may be delivered via any known or desired delivery method including for example on a computer readable memory or other transportable computer storage mechanism or over a communication channel such as a telephone line the internet etc. which are viewed as being the same as or interchangeable with providing such software via a transportable storage medium .

The present disclosure has been described with reference to specific examples which are intended to be illustrative only and not to be limiting. It will be apparent to those of ordinary skill in the art that changes additions or deletions may be made to the disclosed examples without departing from the spirit and scope of the disclosure.

