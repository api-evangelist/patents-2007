---

title: Non-equijoin metadata
abstract: The subject mater herein relates to database management and, more particularly, to non-equijoin metadata. Various embodiments described herein provide systems, methods, software, and data structures to facilitate non-equijoins of data. Some such embodiments include a data store to hold metadata describing relationships between database tables. The relationships between database tables may include one or more non-equijoins of tables in the form of one or more table-column pairs of a first table being non-equal to one or more table-column pairs of a second table. In some embodiments, the metadata may be used by a query generator to build query statements including one or more non-equijoin.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08914352&OS=08914352&RS=08914352
owner: Teradata US, Inc.
number: 08914352
owner_city: Dayton
owner_country: US
publication_date: 20070710
---
The subject mater herein relates to database management and more particularly to non equijoin metadata.

In database systems to query a database a query is issued. A query is normally encoded in a query language such as Structured Query Language SQL . If a query is for data from more than one table or selected as a function of data stored in one or more tables other than a table data is to be selected from one or more table joins need to be made. The majority of joins between tables are equijoins. An equijoin is where the column s in one table are equal to the column s in one or more other tables.

There exist for some database management systems such as database management systems available from Teradata query generator tools. These tools receive as input database table column pairs for data a user wishes to obtain from the database. The query generator builds a query to fulfill the users request and typically returns a SQL statement string. To build the query statement the query generator access metadata that describes the database. The metadata may include data to make equijoins between tables.

However occasionally a join between two tables involves operators other than equals. Such joins are most common between date and date time columns. Joins of this type are referred to as non equijoins. Query generators to date have been unable to make non equijoins by reading the underlying metadata. Working around this limitation requires additional programming effort when using query generators when a non equijoin is required in a query.

Equijoins have previously been supported in database management systems including metadata and query generation tools. Non equijoins have been previously supported by database management systems in the ability to perform a non equijoin inside the database. However storage of the non equijoins in metadata and their use as joins by query generation tools has not been supported. Various embodiments described herein provides systems methods software and data structures to facilitate building of queries including non equijoins by query generation tools. Some typical embodiments include a data structure holding metadata describing non equijoins between columns of two or more database tables. This metadata in some embodiments the non equijoin metadata or the use thereof includes three properties. First the order of the tables in making a non equijoin does not matter. Second the order of columns in making a non equijoin does not matter. Third the non equal operator of a non equijoin described in the metadata needs to be smart or when processed the operator needs to be processed in a smart fashion to facilitate reversal of table columns pairs with a flipping of the operator to maintain the integrity of the non equijoin. Further detail of these and other embodiments is set forth below.

In the following detailed description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the inventive subject matter. Such embodiments of the inventive subject matter may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

The following description is therefore not to be taken in a limited sense and the scope of the inventive subject matter is defined by the appended claims.

The functions or algorithms described herein are implemented in hardware software or a combination of software and hardware in one embodiment. The software comprises computer executable instructions stored on computer readable media such as memory or other type of storage devices. Further described functions may correspond to modules which may be software hardware firmware or any combination thereof. Multiple functions are performed in one or more modules as desired and the embodiments described are merely examples. The software is executed on a digital signal processor ASIC microprocessor or other type of processor operating on a system such as a personal computer server a router or other device capable of processing data including network interconnection devices.

Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an application specific integrated circuit. Thus the exemplary process flow is applicable to software firmware and hardware implementations.

An equijoin may be defined by specifying the two tables involved in the join and one or more pairs of columns where the first column of each pair is contained in the first joined table and the second column of each pair is contained in the second joined table. So an example join might be 

The point of the definition is to generate SQL ON clauses or equivalent SQL WHERE clauses depending on the database management system of a particular embodiment when building SQL statements. For example the above equijoin could be used to generate the following ON clause 

In order to facilitate query generation all joins typically have certain properties two of these properties are that the order of the tables does not matter and the order of the column pairs does not matter. Equijoins do have these properties when stored in this manner the above equijoin is totally equivalent to 

Supporting non equijoins typically includes one additional piece of information be stored with each column pair. This additional piece of information is the operator used to compare the two columns. The original join stored to support non equijoins looks like.

Equijoins may still be stored in this format by simply setting all operators to equals. This definition allows SQL ON clauses to be generated in a form such as 

Non equijoins still support the two join properties i.e. the order of the tables does not matter and the order of the column pairs does not matter. Non equijoins support the second property order of the column pairs directly however the first property order of the tables in some embodiments requires that the operator be smart and know how to handle a table reversal. For example the join 

However in other embodiments a non equijoin may be stored in metadata twice in two distinct forms. For example the first form may be 

Although the above examples include non equijoins of data between two columns of a first table and two columns of a second table non equijoins may be made between a single column of a first table and a single column of a second table. Other embodiments include non equijoins of one or more columns of a first table and one or more columns of a second table.

The database in common embodiments includes data stored in a data storage device under management of a database management system. The database management system is typically a relational database management system. The data in the database is organized by the database management system in tables including columns and rows.

The data store holds metadata describing relationships between database tables. In some embodiments the data store holding the metadata is one or more tables in the database . The metadata typically describes equijoins between database tables. However the metadata may also describe non equijoins between database tables. The metadata in some embodiments describes non equijoins in a form of one or more table column pairs of a first table being non equal to one or more table column pairs of a second table.

In some embodiments each non equijoin described in the metadata is described in two forms. The first form may be 

The end user in some embodiments may be a piece of software providing an interface to a human user to specify data to be retrieved. The end user in other embodiments may be a process that specifies data to be retrieved. In both situations of the system the end user specifies data to be retrieved to the application programming interface API .

The API receives a data request from the end user . The data request specifies table column pairs of data to be retrieved from the database . The API transforms the data request into a SQL statement build request for the query generator . The API in some embodiments is a custom developed piece of software developed for a particular embodiment. In other embodiments the API is a generic data piece of software that may be configured through manipulation of configuration settings. In such embodiments the configuration settings provide information to the API to put SQL statement requests in a format required by the query generator in view of the specific requirements of the particular embodiment and computing environment.

In some embodiments the query generator then receives the SQL statement request from the API . The SQL statement request in some embodiments includes a request for a first table column in view of one or two or more columns of a second table for which a non equijoin is described in the metadata . However the request may not specify that a non equijoin is necessary. The query generator processes the SQL statement request in view of metadata the query generator retrieves. The query generator will typically identifies tables to be included in the requested SQL statement and then identify necessary joins between the tables to obtain the requested data. The query generator uses the retrieved metadata to make such determinations.

After the query generator builds the SQL statement the SQL statement is sent back to the requestor of the statement. In this instance the requestor was the API . The API then causes execution of the SQL statement by submitting the SQL statement to the database . The database returns the data to the API . In some embodiments the API may then format the data and present it to the end user . In other embodiments the raw data may be returned by the API directly to the end user or sent to another location such as storage.

The example method further includes receiving a metadata request from a requester including a request for metadata for making a non equijoin between two database tables for which non equijoin metadata exists and retrieving the requested metadata from the data store .

Some embodiments of the method also include building a query statement including a representation of the non equijoin retrieved from the metadata. In some such embodiments building the query statement includes determining an order of the table column pairs of the non equijoin and reversing the non equijoin operators if the determined order of table column pairs is reversed from the way the metadata describing the non equijoin is stored in the data store.

Returning to The computing device is a general purpose computing device. In various embodiments the elements of the computing device may vary depending on the requirements of the specific embodiment. In one embodiment multiple such computer systems are utilized in a distributed network to implement multiple components in a transaction based environment. An object oriented architecture may be used to implement such functions and communicate between the multiple systems and components. One example computing device in the form of a computer may include a processing unit memory removable storage and non removable storage . Memory may include volatile memory and non volatile memory . Computer may include or have access to a computing environment that includes a variety of computer readable media such as volatile memory and non volatile memory removable storage and non removable storage . Computer storage includes random access memory RAM read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory or other memory technologies compact disc read only memory CD ROM Digital Versatile Disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium capable of storing computer readable instructions. Computer may include or have access to a computing environment that includes input output and a communication connection . The computer may operate in a networked environment using a communication connection to connect to one or more remote computers such as database servers. The remote computer may include a personal computer PC server router network PC a peer device or other common network node or the like. The communication connection may include a Local Area Network LAN a Wide Area Network WAN or other networks.

Computer readable instructions stored on a computer readable medium are executable by the processing unit of the computer . A hard drive CD ROM and RAM are some examples of articles including a computer readable medium. For example a computer program capable of providing a generic technique to perform access control check for data access and or for doing an operation on one of the servers in a component object model COM based system according to the teachings of the present invention may be included on a CD ROM and loaded from the CD ROM to a hard drive. The computer readable instructions allow computer to provide generic access controls in a COM based computer network system having multiple users and servers. 

It is emphasized that the Abstract is provided to comply with 37 C.F.R. 1.72 b requiring an Abstract that will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing Detailed Description various features are grouped together in a single embodiment to streamline the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the inventive subject matter require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

It will be readily understood to those skilled in the art that various other changes in the details material and arrangements of the parts and method stages which have been described and illustrated in order to explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in the subjoined claims.

