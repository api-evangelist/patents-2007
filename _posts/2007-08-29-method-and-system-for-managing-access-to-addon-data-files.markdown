---

title: Method and system for managing access to add-on data files
abstract: A method and system for managing access to add-on data files having an add-on data file attribute, which is used by a software application. The method: monitors input/output commands of the software application to an application programming interface of a code layer to determine whether an access to a data file with the add-on data file attribute is requested by the software application; checks whether an access code for the add-on data file is present in an access code list related to the software application if at least one of the monitored input/output commands request access to the add-on data file, if the access code is not present in the access control list; retrieves the access code from an external source outside of the access control list; and provides access to the add-on data file if the access code is present.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185918&OS=08185918&RS=08185918
owner: SONY DADC Austria AG
number: 08185918
owner_city: Anif
owner_country: AT
publication_date: 20070829
---
The invention relates to a method and a system for managing access to at least one add on data file having an add on data file attribute which is used by a software application.

Successful computer software applications in particular computer games often result in the wish of the users of such software applications to enhance the capabilities of the software applications by using additional add on data files such as additional level files for computer games additional map files for navigation programs additional font files for word processing programs or other extension files. Since the economic success of such software applications often can not be foreseen such additional add on files are often not included into the original software application. The market for selling such additional add on files which have been developed by other programmers and are supplied by other suppliers than the original developers of the software application and the original suppliers is increasing. Nowadays such additional add on data files often are provided via the Internet. Since the programmers creators and suppliers of such add on files also want to be reimbursed for their efforts such add on data files have to be protected against copying.

Such copy protection for add on data files is not easy to achieve. One possibility is that the programmer of the original software application has to implement the access code layer e.g. some sort of decryption encryption algorithm within the original software application which is cumbersome and normally programmers of software applications in particular computer games are not experts in programming copy protection software. Additionally time constraints in developing computer games are quite severe so that the additional effort to include a copy protection for add on data files should be prevented. Furtheron since the original programmer and original supplier are different from the programmers and suppliers of add on data files they are less motivated to include such a copy protection into the original software application.

In another approach the add on data files are encrypted. A user who wants to use such additional add on data files gets a decryption key after having paid for being allowed to use the add on data file. However after the add on data file has been decrypted with the help of the decryption key it is available for further unauthorized copying and distributing thereby reducing the income for the programmer and supplier of the add on data files.

It is an object of the present invention to provide a method for managing access to at least one add on data file which is used by a software application that is easy to handle by a publisher of the software application and that provides an efficient protection against unauthorized copying of such add on data files.

It is further object of the present invention to provide a system for managing access to at least one add on data file which is used by a software application that is easy to use by a programmer of the software application that provides an efficient protection against unauthorized copying of such add on data files that is convenient to use by a user of such add on data files.

The object is achieved in a first aspect by a method for managing access to at least one add on data file having an add on data file attribute which is used by a software application comprising the steps of 

When the software application tries to access a protected add on data file this access is intercepted by monitoring the use of the application programming interface and it is checked whether an access code has already been obtained for the content of the add on data file. Access is granted if a valid entry in the access code list is found. A valid entry might comprise a date within a given time period of authorized usage or a user or hardware identification matching the current configuration or runtime environment. Otherwise it is tried to retrieve the access code from an external source outside of said access code list. The input output command itself may remain unchanged as it is the case for other input output commands e.g. to original data files of the software application. Therefore the method is transparent meaning that the software application has not to be aware of such method it may simply perform as it has been intended by the original programmer. The software application does not have to be modified to implement access control to such add on data files the source code of the software application has not to be known in order to implement this method. On the other hand since the access is controlled during runtime of said software application there is no necessity to decrypt said add on file before runtime and so there is no possibility to copy a decrypted add on file because it simply does not exist separately on a file system.

The method itself is independent from the actual software application since it has only to be known which add on data file attribute is used. In any case when an access to an add on data file with such add on data file attribute is requested by the software application the method can be applied. The external source may be organized and supplied by third parties not involved in the programming of said software application.

With this method it is easy to achieve different ownership and responsibility for the software application and the add on data files.

With a second aspect a system for managing access to add on data files having an add on data file attribute which are used by a software application comprising 

With the system it is possible that the control logic is build by experts for copy protection and the software application has not to be adapted especially for using such add on data files. Since there is no special relationship between the software application and the control logic the control logic is easily applicable to different software applications without changes. Since the access code list is not transferable it is not possible to circumvent such copy protection scheme for add on data files by simply copying the access code list.

With a third aspect a system for managing access to add on data files having an add on data file attribute comprising 

In a schematic block diagram of a first embodiment of a system to manage access for add on data files is depicted. A software application like e.g. a computer game a word processing program or a navigation program is running together with a control logic in one process . The control logic may be used for protecting the software application against unauthorized copying by providing a wrapper around the software application. Authorized use of the software application is established e.g. by checking whether a user who uses the software application has inputted a correct key before starting the software application. Such check is performed by the control logic . In order to facilitate handling of the software application and the control logic both parts are linked together with the help of a linking program and one executable object code is produced which is running as one process on an appropriate hardware e.g. a computer. Optionally this process may be started only after an input of an additional authorization code or after an authentication of an optical disc.

For some software application there exist the possibility to enhance their capabilities by additional add on data files which might have different contents depending on the software application . For example in the case of a computer game as software application such add on data files or data files interpretable by the software application might include but are not restricted to additional level files additional character files for being used while playing additional maps for additional territories for flight simulation programs and so on. Also other extension data files might be used e.g. additional font files for word processing or additional maps for navigation programs. Often the creators programmers publishers and or suppliers of such additional add on data files are different from the programmer of the original software application . In order to restrict unauthorized access to such additional add on data files there is the possibility to encrypt such add on data files and sell the decryption key. However after having decrypted such encrypted add on data file it is difficult to prevent further unauthorized distribution of such add on data files .

Within the depicted embodiment the access of the software application is controlled during runtime by intercepting the access of the software application to the add on data files by monitoring the input output commands of an application programming interface API which is provided by a code layer e.g. an operating system like Windows . In case that the software application request access of a add on data file which is identified by an add on data file attribute the control logic is checking whether an access code to access such add on data file is present within an access code list e.g. an access control list ACL . Such access code is generated by a supplier or creator of the add on data files using a generation unit. The access code e.g. comprises a content identification content ID as a data file attribute and a hardware or user identification or a time period during which such access code for the add on data file with the content ID is valid. If such an access code for the add on data file is not present within the access code list the control logic tries to retrieve the access code from an external source via a graphical user interface GUI and or an activation server . The add on data file attribute is used to identify the access request to an add on data file and may comprise but is not restricted to a file format specification or a compilation date.

The graphical user interface GUI may be provided separately and may be used to manually input an access code directly by the user which he she has obtained beforehand or to input a user identification. Such user identification can be used to check within the activation server whether for this user an access to the add on data file is allowed e.g. because the user has bought the add on data file correctly and has input his user identification to the activation server in order to identify for whom such access should be allowed. A corresponding personalized access is also possible with a hardware identification which would be transmitted to the activation server directly with the help of the control logic . So it is possible to grant a user or hardware specific access right to the add on data file . It is even possible to allow that the user input payment data e.g. credit card data with the help of the graphical user interface if during communication to the activation server it is apparent that the user has not bought the corresponding access code so far and thereafter allowing to retrieve the access code so that the user can use the add on data file immediately afterwards. The communication might be performed via the Internet.

If the access code is available via said external source i.e. via the graphical user interface and or the activation server then this access code may be stored within the access code list afterwards in order to accelerate further accesses to this add on data file . Additional validation information might be stored as well e.g. dates of a time period in which access is allowed the user identification or the hardware identification. In addition access to the add on data file is granted during runtime of the process . The access code might include a decryption key in order to decrypt an encrypted version of the add on data during runtime.

In order to prevent unauthorized copying of the add on data file the software application should be prevented from storing the original or a modified version of the add on data file unless in this case there is a further copy protection available for such stored add on data files . Checking with the help of the control logic whether the software application is trying to write a file onto the file system might ensure such prevention.

The access code list it not transferable e.g. hidden in a file system or secured by further measures against copying. Otherwise it would be possible to copy such access code list in order to make unauthorized use of add on data files possible. Another possibility is to make use of the hardware identification or the user identification which is checked when an access to an add on data file is requested.

The access code is stored in the access control list and built with the help of content identifications Content ID Content ID of the add on data files which are useable as data file attributes.

The data files attributes might be further realized as a special combination of values commonly referred to as magic values.

In a second embodiment of a system to manage access to add on data files is depicted. It is similar to the first embodiment so that same blocks which same functions as in have been identified by same numerals and are not explained again here. In this second embodiment the linking of the software application and the control logic is performed dynamically during runtime by loading a dynamic link library DLL with the control logic into a process of the software application at runtime with the help of a loader . In the first embodiment the linking has been performed statically by building one executable file before runtime.

In the method steps of are depicted. In a first step S during runtime of the software application its input output commands to the application programming interface API are monitored. If during that monitoring the control logic recognizes that a data file with an add on data file attribute is requested in a second step S then it is checked whether an access code for the requested add on data file is present in the access code list in a third step S. If the access code is not available in the access code list the control logic retrieves the access code from an external source in a forth step S. Access to the add on data file is granted in a fifth step S if such access code is present either at the external source or within the access code list otherwise access is denied in a sixth step S. Optionally it may be checked in seventh step S whether the access code is valid e.g. whether a time period in which an access is allowed is met or whether the correct user or hardware corresponding to a stored user identification or hardware identification is requesting the access. If no data file with the add on data file attribute is requested in the second step S then the request is simply forwarded in an eighth step S.

A very efficient way to determine whether a request to an add on data file is performed is to build the add on data files with respect to a predetermined file format specification which can be used as a trigger to control the access of the software application .

If an access code which has been retrieved from an external source is stored within the access code list further access requests to add on data files are handled faster because there is no need to retrieve said access code from an external source again. In this case it is possible to additionally store a time period in which such access code is valid or other validation information e.g. the user or hardware identification.

A very efficient copy protection for add on data files is obtained when the add on data files are encrypted. So there is no use for any unauthorized copying without owning a corresponding decryption key. The decryption key is coupled with the access code it may be the access code itself so that only a user having this access code is entitled to use such add on data file which is decrypted with the decryption key during runtime.

A convenient way to retrieve the access code is by demanding a manual input of the access code by the user. In this embodiment the user has obtained the access code beforehand by buying a corresponding add on data file from an add on data file provider.

A further convenient way to retrieve the access code is by connecting e.g. via the Internet to an activation server on which the access code is stored after a user has bought such add on data file together with the corresponding access code. The activation server might be supplied by a provider of add on data files or by other third parties e.g. the provider of the control logic . So there is no need for a programmer or supplier of the software application to deal with such access authorizations.

A per user or per hardware access may be provided by ensuring a relation of a user or hardware to the access code. With such a per user or per hardware access rights unauthorized distribution of add on data files is further hampered.

The method is especially useful for add on data files like level files and or map files and or style files and or extension files for computer games as software applications.

A transparent and efficient way to implement this embodiment is to use a control logic which is suited as well for authorizing use of the software application . So the programmer of the software application only has to deal with the software application itself. The control logic takes care of the copy protection namely the copy protection of the software application and the copy protection of the add on data files as well.

A separate graphical user interface for inputting the access code by the user or for inputting the user identification gives the possibility for the creator or supplier of add on data files to adapt such graphical user interface in order to meet his demands e.g. with respect to advertisement or payment schemes. It would also give the possibility to input payment data like credit card data if the user did not have bought an access code in advance but is intending to do so before the control logic is communicating with the activation server .

A further possibility to identify accesses to add on data files without using data file attributes is to define special application programming interfaces API between the software application and the control logic for such requests. This possibility needs cooperation between the software application and the control logic. The special API can be used to improve the behavior of the software application with respect to the access of add on data files in case access is denied.

