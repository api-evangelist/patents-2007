---

title: Methods and systems for managing I/O requests to minimize disruption required for data encapsulation and de-encapsulation
abstract: Technology for minimizing disruptions when host data on a physical volume is encapsulated into a virtualization layer or de-encapsulated is disclosed. Evaluation of a physical volume used as data storage for a virtualization layer before committing to direct access to the physical volume is enabled by preventing direct access before presenting the physical volume directly to the host and by preventing the virtualization layer from moving data on the physical volume while redirecting to the physical volume a first plurality of I/O requests that were directed to the virtualization layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332613&OS=08332613&RS=08332613
owner: EMC Corporation
number: 08332613
owner_city: Hopkinton
owner_country: US
publication_date: 20070928
---
This application is a continuation in part of U.S. patent application Ser. No. 11 536 995 entitled Methods And Systems For Managing I O Requests To Minimize Disruption Required For Data Migration and filed on Sep. 29 2006 now U.S. Pat. No. 7 809 912 naming Helen S. Raizen Michael E. Bappe and Todd R. Gill as inventors which is hereby incorporated by reference.

The present invention generally relates to the field of modifying the management of data within a computer system.

Many computer systems include one or more host computers and one or more storage systems that store data used by the host computers. An example of such a computer system including a host computer and storage systems is shown in .

The storage systems include a plurality of disk drives or and a plurality of disk controllers or that respectively control access to the disk drives. A plurality of storage bus directors control communication with host computer over communication buses . Each storage system further includes a cache to provide improved storage system performance. In particular when the host computer executes a read from one of the storage systems the storage system may service the read from its cache when the data is stored in the cache rather than from one of the disk drives or to execute the read more efficiently. Similarly when the host computer executes a write to one of the storage systems corresponding storage bus directors can execute the write to the cache . Thereafter the data can be de staged asynchronously in a manner transparent to the host computer to the appropriate one of the disk drives . Finally storage systems include internal buses over which storage bus directors disk controllers and caches communicate.

The host computer includes a processor and one or more host bus adapters that each controls communication between the processor and one of the storage systems via a corresponding one of the communication buses . It should be appreciated that rather than a single processor host computer can include multiple processors. Each bus can be any of a number of different types of communication links with the host bus adapter and storage bus directors being adapted to communicate using an appropriate protocol via the communication buses coupled there between. For example each of the communication buses can be implemented as a SCSI bus with the storage bus directors and adapters each being a SCSI driver. Alternatively communication between the host computer and the storage systems can be performed over a Fibre Channel fabric.

Typically the storage systems make storage resources available to the host computer for assignment to entities therein such as a file system a database manager or a logical volume manager. If the storage systems are so called dumb storage systems the storage resources that are made available to the host computer will correspond in a one to one relationship to physical storage devices within the storage systems. However when the storage systems are intelligent storage systems they will present logical volumes of storage to the host computer that need not necessarily correspond in a one to one relationship to any physical storage devices within the storage system. Instead the intelligent storage systems may map each logical volume of storage presented to the host across one or more physical storage devices.

Conventional data migration efforts typically involve the following four separate steps requiring manual intervention between each source discovery target provisioning data synchronization i.e. movement and reconfiguration to switch to target access. The source discovery step includes identification of the physical locations e.g. the storage system and logical unit at which the data set is stored. The target provisioning step includes identification and configuration of the storage resources typically logical volumes of storage presented by another storage system to which the data set will be moved. The synchronization step involves moving or copying the data set from the source locations to the target locations. After the data set has been moved or copied the switch to target step typically involves reconfiguring the computer system so that applications using the data set recognize the target locations as the new storage location for the data set. Several of the steps conventionally require human intervention and may require rebooting of the host computer s that access the data set.

EMC Corp. has previously recognized the desirability of being able to migrate data non disruptively. U.S. Pat. No. 7 093 088 and U.S. patent application Ser. No. 11 536 995 for example disclose some methods and systems that enable less disruptive migration.

Administrators of computer systems like that depicted in may want to encapsulate a physical volume of data. One common reason is that this speeds up the process of transitioning a storage volume into network virtualized storage by avoiding data copies. Other common reasons include avoiding the need for additional storage during the migration process. The act of transitioning storage from array based storage to network virtualized storage allows that storage to gain the benefits provided by network virtualized storage including inter array replication application transparent data mobility and flexibility in the quality of service provided for a volume.

Like data migration data encapsulation and de encapsulation may be complicated and problematic exercises. Administrators may be required to take offline any applications executing on the host that use the physical volume. Taking applications offline may lead to a loss of productivity and opportunity costs associated with not having the data available for important business functions. Encapsulations and de encapsulations typically are manual labor intensive efforts and are therefore error prone costly and labor intensive.

The inventors recognized that when encapsulating data in a physical volume with a virtual volume or when de encapsulating that data it would be desirable for a host to be able to access the relevant data throughout the process or at least for as much of the process as possible. The inventors recognized that the appropriate management of input output I O requests during the encapsulation or de encapsulation process can be used to render the process less disruptive to a host that has data stored in the physical volume. The inventors further recognized that the possibility of errors or other problems during the encapsulation or de encapsulation process can be minimized by implementing controls over input output requests during this process and applying these controls in a particular sequence. The inventors recognized that the technology designed to enable less disruptive data migration can be leveraged to enable less disruptive encapsulation and de encapsulation of data. The inventors further recognized that the involvement of a virtualization layer in the encapsulation and or de encapsulation and its capabilities may present challenges and opportunities not encountered with other types of data migration. The inventors recognized that capabilities such as a virtualization layer s ability to migrate data in a way that is transparent to the host must be considered to minimize disruption in the encapsulation and or de encapsulation process. The inventors also recognized that the virtualization layer itself may be used to protect data during the encapsulation and or de encapsulation process.

One possible benefit of the use of methods and systems consistent with features and principles of the invention during encapsulation or de encapsulation is the capability of switching back and forth between a physical volume and a virtual volume before committing to the virtual volume during an encapsulation process or before committing to the physical volume during a de encapsulation process. Other possible benefits of management of I O requests consistent with features and principles of the invention during the encapsulation or de encapsulation process include the capability of preventing another user from modifying the configuration of a physical volume during the encapsulation process. A further possible benefit of appropriate management of I O requests is the capability of preventing access to physical volumes and related virtual volumes at the same time.

One embodiment consistent with principles of the invention is a method for enabling the evaluation of the encapsulation of a physical volume in a virtual volume before committing to the virtual volume that comprises a logical representation of the physical volume. The method includes preventing access to the physical volume through the virtualization layer before presenting the virtual volume to a host. The method further includes preventing the virtualization layer from moving data on the physical volume while redirecting to the virtual volume a first plurality of I O requests that were directed to the physical volume.

Another embodiment consistent with principles of the invention is a method for enabling evaluation of direct access to a physical volume used as data storage for a virtual volume before committing to the direct access. The virtual volume comprises a logical representation of the physical volume. The method includes preventing direct access to the physical volume before presenting the physical volume directly to a host. The method further includes preventing the virtualization layer from moving data on the physical volume while redirecting to the physical volume a first plurality of I O requests that were directed to the virtual volume. This method can be used for example as part of the process of de encapsulating an encapsulated physical volume.

Another embodiment consistent with principles of the invention is a method for enabling evaluation of a physical volume used as data storage for a virtualization layer before committing to direct access to the physical volume. The virtual volume comprises a logical representation of the physical volume. The method includes preventing direct access to the physical volume before presenting the physical volume directly to a host and preventing the virtualization layer from moving data on the physical volume while redirecting to the physical volume a first plurality of I O requests that were directed to the virtual volume.

Another embodiment consistent with principles of the invention is system comprising a host computer and a virtualization layer in signal communication with a physical volume either directly or via the virtualization layer. The system is configured with instructions to perform one of the foregoing methods.

Another embodiment consistent with principles of the invention is a computer readable medium including instructions to configure a system to execute one of the foregoing methods. In one embodiment the medium includes a program for installation and execution on a host computer and or a virtualization layer associated with one or more volumes of data.

Reference is now made in detail to illustrative embodiments of the invention examples of which are shown in the accompanying drawings.

The inventors of the present invention recognized that the present invention may be implemented among other ways as a filter driver in the I O stack. The POWERPATH tool available by EMC Corporation of Hopkinton Mass. is an example of an I O filter driver. In the exemplary embodiment illustrated in the invention is implemented as an extension to the POWERPATH tool.

Although filter driver only interacts with an operating system OS as illustrated in filter driver can conceptually be considered to be placed between OS and at least one host bus adapter such as host bus adapter in . A data storage system such as storage system in presents volumes of data storage to the host computer for assignment to various resources therein such as to provide storage space for a file system an LVM or a database. Volumes are presented via signals arriving at the collection of host bus adapters on the host. These signals are processed by filter driver which creates a volume representation . Functionality may be attributed to the volume representation.

Filter driver of may be thought of conceptually as having the form of a C clamp with a top horizontal arm a bottom horizontal arm and a vertical connector between the arms. Horizontal arm may be for example an interface to any operating system OS such as Sun s SOLARIS LINUX and Microsoft s WINDOWS NT. Bottom horizontal arm includes platform dependent code comprising an interface to relevant host bus adapters. Vertical connector comprises a series of common Application Programming Interfaces APIs . An advantage of the C clamp is that extensions can be written in a platform independent manner because the arms and vertical connector translate all of the platform dependent communications into more generic communications. An extension stack is enveloped between arms and . In addition to a plurality of existing extensions in extension stack a DM extension is added in the embodiment of to manage I O requests during a data encapsulation or de encapsulation process. DM extension can consist of a plurality of extensions. DM extension or portions thereof may also be used during a data migration process.

The software architecture of virtualization layer can be viewed as consisting of a SCSI virtualization layer a volume virtualization layer and a back end services layer . SCSI virtualization layer is responsible for presenting virtual storage volumes such as volume to the at least one host bus adaptor via an interface . Volume virtualization layer creates virtual volumes by composing at least one storage element . Back end services layer imports physical storage and creates the at least one storage element .

Host computer uses physical volume to store data. Physical volume including the data contained therein can be encapsulated in virtual volume . Prior to encapsulation of physical volume host uses link to access data on volume . Links and in may not exist. After encapsulation host uses link in to access data on physical volume only via virtual volume and link . Link in may not exist.

Virtualization layer can present virtual volume with storage provided by physical volume to host . During the encapsulation process host computer can store data about the state and or status of the process in boot device . This metadata may be stored in the boot device for example as kernel metadata or user metadata. Storing kernel and or user metadata can enable the process to resume in the same state after either a crash or a graceful shutdown and restart during the encapsulation or de encapsulation process. To enable the host computer to resume the process smoothly after a crash boot device must be the first device the host computer accesses during the host boot process. Accordingly the host computer may enable the kernel state of the process to be restored during a reboot.

Setup state is reached after the user issues a command such as a SETUP command to begin the encapsulation process. In the setup state all preparation required before encapsulation of a physical logical unit as a target virtual logical unit is completed. Setup state may also be reached as a result of aborting an encapsulation. From setup state the user has the choice of continuing to a source selected state or returning to an initial state which eliminates the state changes that were made to reach setup state .

In embodiments of the invention that are also designed to enable data migration an intermediate state that enables a target volume to synchronize with a source volume may exist between the setup state and the source selected state . In these embodiments DM extension may confirm that the target volume and the source volume store the same data before transitioning to a source selected state .

The source selected state in the encapsulation process is reached after the user issues a command such as a SYNC command to initiate a transition from the setup state to the next state in the encapsulation process. In source selected state data in the physical volume may only be accessed via the source logical unit. From source selected state the user may choose to return to setup state . To continue the encapsulation process from source selected state however the user may issue a command to move to a target selected state .

Target selected state is reached after the user issues a command such as a SELECT TARGET command to initiate a transition from the source selected state to the next state in the encapsulation process. In target selected state data in the physical volume may only be accessed via the virtual volume. From target selected state the user may choose to return to source selected state or to setup state . To continue the encapsulation process from target selected state however the user may issue a command to move to a committed state .

Generally committed state is reached after the user issues a command such as a COMMIT command to initiate a transition from the target selected state to the next state in the encapsulation process. In committed state data in the physical volume may no longer be accessed directly via the physical volume. Thus the encapsulation process cannot be aborted from committed state . The user may issue the commit command after he is satisfied with an evaluation of the virtual volume.

Final state is reached after the user issues a command such as a CLEANUP command to initiate a transition from the committed state to the next state in the encapsulation process. In the transition the system verifies that the physical volume is no longer accessible to the host. If it finds that it is still accessible the cleanup will fail and the encapsulation process will remain in the committed state. In the committed state access to the source volume is prevented by the DM extension. This access control must remain in place until the source volume has been physically removed from the host.

As discussed above various commands may be issued by the user to transition from one state to another. State transitions can be initiated by additional commands available to the user. For example a user may issue a command such as the SELECT SOURCE command to initiate the transition from target selected state to source selected state . Furthermore a user may issue a command to initiate the transition from any state in except committed state and final state back to setup state . A transition back to setup state may be considered an abort of the encapsulation process.

The encapsulation process states illustrated in can be related to links conceptually illustrated in . In the initial state link makes data on physical volume accessible to the host but links and do not exist. In the final state links and make data on physical volume accessible to host but link does not exist. In the intermediate states the links are configured and checked while I O requests are managed to protect the data on physical volume and minimize the disruption required by the encapsulation process. The system architecture may alternatively include a direct connection of links and to host and not through SAN .

Table 1 summarizes exemplary management of I O requests in various layers during various states in the encapsulation process identified in . The first two rows of Table 1 refer to management in host computer which may be implemented in filter driver . The last row of Table 1 refers to management in virtualization layer .

Layers and in are each managed by one or more existing extensions of the extension stack shown in in this exemplary embodiment. Layer of represents a first layer at which I O requests addressed to a physical volume may be suspended. Suspended I O requests may be queued so that they can be executed when an appropriate state has been reached. Layer of represents a mapping layer. Layer in initial state may map a pseudo and or native name used by a host application in level to access data on physical volume to an inherent device identifier of a data storage volume or of a physical connection to a data storage volume. Layer enables host to address physical volume with a pseudo name and or native names.

Layers and may be managed by DM extension of in the exemplary embodiment. To increase the processing speed I O requests need not flow through layers and prior to the initiation of an encapsulation process.

Layer in represents a multipath layer. In initial state layer maps I O requests that were on paths addressed by a native or pseudo name to physical volume . Thus layer routes I O requests that were on paths addressed by a native or pseudo name to physical volume . At the bottom of a physical volume is illustrated.

Setup state is reached for example after a SET UP command which is initiated by a user initializes an encapsulation operation. Prior to setup state physical volume and virtual volume are identified. A representation of physical volume is imported into the virtualization layer as a storage element . The virtualization layer stores identifying information associated with storage element such as its array identifier its volume identifier its capacity and or its firmware level. Storage element logically references the volume V that it consumes without providing any additional data storage. Virtualization layer may also associate a new attribute with storage element and gives the attribute a protection value such as NOT READY. The NOT READY value prevents the virtualization layer from treating imported storage element as storage whose data is accessible. A virtual volume V also referred to as virtual volume is created to encapsulate storage element . Finally virtual volume V is presented to host as a target user device .

Conceptually the system in set up state is configured to prepare for the flow shown on the right side of . In layer of target user device represents one way that virtual volume may be addressed by a host I O request. For example virtual volume may be addressed with a native name or a pseudo name. I O requests in layers and of are managed similarly to I O requests in layers and of .

Layer of represents a second layer at which I O requests addressed to a data storage volume may be suspended and later resumed. Layer is used to transition between different states such as initial state and set up state . A state change is initiated for example by issuing a state change command such as a SET UP command. Layer allows I O requests that are pending before a state change is initiated to execute. I O requests that arrive after a state change is initiated however are queued in layer so that they can be executed when an appropriate state has been reached. In any of the states such as setup state I O requests are not suspended in layer .

Layer of represents a layer at which I O requests may be redirected from one volume of data to another. In setup state I O requests are not redirected in layer .

Layer of represents a layer at which I O requests may be prevented from accessing a data storage volume. In setup state I O requests may be prevented from accessing virtual volume in layer . Access control is useful to prevent the host from accessing data both through virtual volume and physical volume directly. If such situation does occur the host operating system and applications may become confused. The protection state of the attribute associated with storage element may also be used to prevent access to physical volume via virtual volume .

Prior to transitioning to SETUP state host computer confirms that the encapsulation process is ready to move forward. For example the exemplary embodiment confirms that the array identifier the volume identifier the capacity and or the firmware level of the storage element match that of physical volume . The exemplary embodiment may further confirm that the value of the new attribute for the storage element is NOT READY. The exemplary embodiment may also confirm that virtual volume is a one to one representation of the storage element .

Management of I O requests in source selected state is illustrated beginning at layer in . I O requests in most layers of are managed similarly to I O requests in the corresponding layers of . Whereas access control layer may or may not allow I O requests in set up state to proceed to virtual volume access control layer does not allow I O requests in source selected state to proceed to virtual volume .

I O requests in layers and of are managed similarly to I O requests in layers and of . In target selected state of however I O requests that had been directed to physical volume such as by user device name are redirected to virtual volume in level . In target selected state of any I O requests that had been directed to virtual volume such as by user device name are also redirected to physical volume in level . Although no I O requests should be directed to virtual volume such cross redirection in level prevents accidental data corruption by enabling any such I O requests to be easily handled in level .

In layer of I O requests are prevented from accessing physical volume . I O requests following a path to virtual volume in layer of are redirected in layer then prevented from accessing any logical unit in layer . Layer enables the transition from direct access to access via virtual volume to be less disruptive to a host trying to encapsulate data stored in the physical volume .

Committed state is reached after the user issues a command such as a COMMIT command to transition from the target selected state to the next state in the encapsulation process. As a result of the COMMIT command the new attribute for storage element in virtualization layer is set to a NORMAL value. The NORMAL attribute value allows the virtualization layer to move data from physical volume to another physical volume.

Final state is reached after the user issues a command such as a CLEANUP command to transition from committed state to the next state in the encapsulation process. Prior to final state and the completion of the encapsulation process any physical connection to physical volume at host is eliminated. Any data or metadata from physical volume that might be cached on the host and cause OS or application confusion or errors is removed from the host. Mapping of target user device to the inherent device identifier of physical volume in layer is eliminated. Additionally mapping in multipath layer directly to physical volume is eliminated. Before final state is reached but only after the host s direct access to physical volume is removed access control in level can be disabled.

Setup state is reached after a user issues a command such as the SETUP command to begin the de encapsulation process. In the transition from the initial state to setup state some preparation required to de encapsulate the physical volume is done. Prior to setup state the virtual volume and physical volume are identified. All data to be directly accessed on physical volume at the completion of the de encapsulation process must reside on that volume by the set up state . is a flow diagram conceptually illustrating exemplary management of I O requests at various layers in set up state of consistent with an embodiment of the present invention.

Embodiments of the present invention may include several intermediate phases between initial state and setup state . In a first phase the virtual volume may be prepared for de encapsulation. For example virtualization layer may simply check that all of the data on virtual volume is on a single physical volume . Alternatively virtualization layer may move all of the data on virtual volume onto a single physical volume . After all of the data on virtual volume is on a single physical volume virtualization layer may prevent data on the single physical volume from being moved to another physical volume. This may be done for example as illustrated in by setting an attribute associated with storage element in virtualization layer to a TEST state.

In a second phase between initial state and setup state information about the physical volume underlying virtual volume may be collected by filter driver from virtualization layer . For example information about the physical volume underlying virtual volume may include information associated with storage element such as its array identifier its volume identifier its capacity and or its firmware level. Using this information filter driver may prevent direct access to physical volume . This may be done for example as illustrated in by setting an attribute in layer that is associated with an identifier of physical volume to a protection value thereby preventing I O requests from accessing a physical volume . Access control is useful to prevent the host from accessing data both through virtual volume and physical volume directly. If such situation does occur the host operating system and applications may become confused. Controlling host access to physical volume before direct access to physical volume is even possible may avoid problems in the de encapsulation process for which no means for avoidance have previously been presented.

In a final phase between initial state and setup state physical volume is presented to host computer as target user device . illustrates the completed setup state .

After physical volume is presented to host computer but before virtual volume selected state filter driver chooses target user device based on identifying information associated with storage element .

From setup state the user has the choice of continuing to a virtual volume selected state or returning to an initial state which eliminates the state changes that were made to reach setup state . Additionally setup state may also be reached as a result of aborting a de encapsulation process.

The virtual volume selected state is reached after a command initiates a transition from the setup state to the next state in the de encapsulation process. The TEST state allows I Os to be issued to the volume from the host but prevents the prevents virtualization layer from moving data from physical volume to another physical volume. In virtual volume selected state data in the encapsulated physical volume is accessed via virtual volume .

From virtual volume selected state the user may choose to return to setup state . To continue the de encapsulation process in virtual volume selected state however the user may issue a command to move to a physical volume selected state .

Physical volume selected state is reached after a command initiates a transition from virtual volume selected state to the next state in the de encapsulation process. In physical volume selected state data in the physical volume may only be accessed directly.

From physical volume selected state the user may choose to return to virtual volume selected state or setup state . To continue the de encapsulation process from physical volume selected state however the user may issue a command to move to a committed state . Prior to COMMITTED state the de encapsulation process on the host sets the state of the attribute associated with storage element to NOT READY.

Committed state is reached after a command initiates a transition from physical volume selected state to the next state in the de encapsulation process. In committed state data in the physical volume may no longer be accessed via the virtual volume. Thus the de encapsulation process cannot be aborted from committed state . The user may issue the COMMIT command after he is satisfied with an evaluation of direct access to the physical volume.

Final state in the de encapsulation process is reached after a command such as the CLEANUP command initiates a transition from committed state to the next state in the de encapsulation process. The CLEANUP command verifies that virtual volume is not accessible to host . If it is accessible the CLEANUP command will fail and the de encapsulation process will remain in the COMMITTED state. Being in the COMMITTED state includes preventing access to virtual volume through the access control mechanism. Prior to final state storage element in virtualization layer and the associated attributes are eliminated.

The de encapsulation process states illustrated in can be related to links conceptually illustrated in . Prior to the initial state links and make data on physical volume accessible to host but link does not exist. After the final state link makes data on physical volume accessible to the host but links and do not exist. In the intermediate states the links are configured and checked while I O requests are managed to protect the data on physical volume and minimize the disruption required by the de encapsulation process. As mentioned with respect to the encapsulation process the system architecture may alternatively include a direct connection of links and to host and not through SAN .

Table 2 summarizes exemplary management of I O requests in various layers during states in the de encapsulation process identified in . The first two rows of Table 1 refer to management in host computer which may be implemented in filter driver . The last row of Table 1 refers to management in virtualization layer .

The foregoing illustrative embodiments have been presented for purposes of illustration. It is not exhaustive and does not limit the invention to the precise forms or embodiments disclosed. Modifications and adaptations of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments. For example the described implementations include software but systems and methods consistent with the present invention may be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like.

Computer programs based on the written description and methods of this invention are within the skill of an experienced developer. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example program sections or program modules can be designed in or by means of Java C C HTML XML or HTML with included Java applets. One or more of such software sections or modules can be integrated into a computer system.

