---

title: System and method of delaying connection acceptance to support connection request processing at layer-7
abstract: Techniques for suspending a TCP three-way handshake, offering the partial connection to an L-7 application or module at a proxy to perform further processing, and then allowing the L-7 application or module to instruct the proxy's network kernel to perform various actions are described. In various embodiments these actions may include: silently dropping the connection, verbosely rejecting the connection, accepting and processing the connection locally, or forwarding the connection to another proxy or the original destination. This additional functionality is provided, in one particular embodiment, via extensions to the POSIX socket API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743160&OS=07743160&RS=07743160
owner: Blue Coat Systems, Inc.
number: 07743160
owner_city: Sunnyvale
owner_country: US
publication_date: 20070719
---
This application is a non provisional of claims priority to and incorporates by reference U.S. Provisional Patent Application 60 908 927 filed 29 Mar. 2007.

The present invention relates to methods and systems for delaying Transmission Control Protocol TCP connection acceptance at an intermediary device such as a proxy until high level e.g. layer 7 modules of said device complete processing tasks and subsequently issue instructions concerning handling of said connections to lower layer protocol modules of said device.

Establishing a TCP connection involves a three way handshake where a connection initiator sends a TCP packet the responder sends a corresponding packet and the initiator acknowledges with a subsequent packet. An example of this sequence of events involving a TCP connection received at a conventional proxy is illustrated in . In this example a client is communicatively connected to a proxy via a network . Proxy is communicatively coupled to a server across a wide area network WAN .

As illustrated when the client initiates a connection request a TCP packet is transmitted to proxy . Proxy responds with a conventional packet which client acknowledges by sending an packet . Thereafter client may send an actual request e.g. an HTTP GET request or other request for example where client is an application other than a web browser .

Only after completing the TCP handshake with client and receiving an actual request does proxy first attempt to contact server . This is because until this point proxy did not have sufficient knowledge of the intended communication to initiate contact with the server. Hence proxy initiates its own TCP handshake with server by sending packet . Server responds by sending packet which the proxy acknowledges with packet . Thereafter proxy sends request on to server . This may be a modified or unmodified version of the original request sent by client .

Assuming everything has gone well to this point in the above described communication the client and server will begin exchanging data e.g. responses with one another via proxy . At least two separate TCP sessions are implicated in this communication one between client and proxy and another between proxy and server . However notice that in the above described communication the proxy actually completes a TCP handshake with the client before the proxy ever determines whether or not the server is available and or willing to accept the intended communication. If the proxy is operating in transparent mode the client will assume that the server and not the proxy has completed the TCP handshake and will begin issuing requests. If the proxy were now to report that it was unable to reach or otherwise complete a TCP handshake with server this could have undesirable consequences for the overall communication and or any applications executing on client .

In one embodiment the present invention provides for suspending a TCP connection handshake with a connection initiator creating a connection state information template to account for the TCP connection with the connection initiator the connection state information template artificially reflecting a successful completed connection with the connection initiator and notifying an application layer process of the artificially reflected successful completed connection with the connection initiator. The TCP connection handshake may be suspended at a proxy logically disposed between the connection initiator and a target host of the TCP connection.

In some cases the connection state information template may be created and a state transition performed therein to artificially reflect the successful completed connection with the connection initiator. Further a second state transition in the connection state information template may be created to move the TCP connection to an appropriate state following processing of the TCP connection by the application layer process. Thereafter a response may be sent to the connection initiator with an action directed by the appropriate state resulting from the second state transition.

The response to the connection initiator may involve silently dropping the TCP connection rejecting the TCP connection accepting the TCP connection or sending an error message to the connection initiator. In the latter case the error message may be a message indicative of a network error. In other cases the response to the connection initiator may involve forwarding the TCP connection to a network device other than the connection initiator or bypassing packets associated with the TCP connection to a target host of the TCP connection.

TCP packet received from the connection initiator may be saved during suspension of the TCP connection handshake. Likewise TCP packets responsive to the packet may also be saved during suspension of the TCP connection handshake.

In some cases a second TCP connection request with the target host of the TCP connection request may be initiated during suspension of the initial TCP connection handshake with the connection initiator. Thereafter the proxy may respond to the connection initiator so as to emulate a response to the second TCP connection request received from the target host. The second TCP connection handshake with the target host may thus be completed during suspension of the initial TCP connection handshake with the connection initiator.

In some cases suspending the TCP connection handshake may be facilitated through an extension to a POSIX socket application programming interface API on a port on which a TCP connection request is received from the connection initiator. Such an extension to the POSIX socket API causes an accept function for the port to create the connection state information template. The extension to the POSIX socket API further specifies an action to be performed in response to the TCP connection request. Such an action may include dropping the TCP connection denying the TCP connection accepting the TCP connection bypassing packets associated with the TCP connection and forwarding the TCP connection to a network device other than the connection initiator.

Further embodiments of the present invention provide for receiving from a connection initiator multiple TCP connection requests each of the requests being transmitted on a different port number delaying acceptance of all of the multiple TCP connection requests while initiating independent TCP connection requests to a target host of the multiple TCP connection requests on each of the different port numbers and responding to the connection initiator so as to emulate one or more responses to the independent TCP connection requests received from the target host. Delaying acceptance of all of the multiple TCP connection requests may include suspending TCP connection handshakes corresponding to the multiple TCP connection requests from a connection initiator creating for each TCP connection request a connection state information template to account for a respective one of the multiple TCP connection requests from the connection initiator each of said connection state information templates artificially reflecting one or a number of a successful completed connections with the connection initiator and notifying an application layer process of the artificially reflected successful completed connections with the connection initiator. Responding to the connection initiator may include completing a TCP connection handshake with the connection initiator on one of the different port numbers that corresponds to a port number on which a response to the independent TCP connection requests was received from the target host.

Described herein are methods and systems for delaying Transmission Control Protocol TCP connection acceptance at an intermediary device such as a proxy until high level e.g. layer 7 modules of said device complete processing tasks and subsequently issue instructions concerning handling of said connections to lower layer protocol modules of said device. In various embodiments Common Internet File System CIFS proxy and TCP tunnel proxy functionalities can benefit by advantages offered by this invention. Moreover split proxies which implement byte caching transparent tunnel load balancing features may also take advantage of aspects of this invention.

In order to preserve the transparency of a transparent proxy deployment in a network a client connection request needs to be temporarily suspended until layer 7 L 7 modules of the proxy have completed some initial request processing. In particular the proxy must determine which upstream proxy or server to connect to and whether that device is accepting connections. This allows the proxy to preserve the server behavior in the response it generates back to the client.

As indicated above establishing a TCP connection involves a three way handshake. In embodiments of the present invention this TCP three way handshake is suspended at a proxy disposed between the initiator and the responder e.g. a client and a server . The proxy offers the resulting partial connection to an L 7 application or module to permit that module to perform further processing and then allows the L 7 application or module to issue instructions to the network kernel of the proxy to perform one or more actions. For example the network kernel may be instructed to silently drop the connection verbosely reject the connection accept and process the connection locally or forward the connection to another proxy or the original destination e.g. the content source for the request . In one embodiment this functionality is provided via extensions to the Portable Operating System interface POSIX socket application programming interface API however this is not critical to the present invention and other equivalent forms of implementation may be used.

In order to better understand aspects of the present invention it is helpful to consider the sequence of events involving a TCP connection received at a conventional proxy as illustrated in . The precise details of the network configuration by which the client is communicatively connected to proxy are not critical to the present invention. The network may be a wired or wireless network or both . WAN may be one or more networks and may include the Internet. Server may itself be part of a local area or even wide area network not shown . Such details are not critical to the present invention. As shown proxy has a software architecture that includes an application e.g. L 5 to L 7 layer and a network e.g. L 2 layer. Software operating at other protocol layers e.g. L 1 to L 4 etc. may also be present.

As illustrated when the client initiates a connection request a TCP packet is transmitted to proxy . Proxy responds with a conventional packet which client acknowledges by sending an packet . Thereafter client may send an actual request e.g. an HTTP GET request or other request for example where client is an application other than a web browser .

As discussed above only after completing the TCP handshake with client and receiving an actual request does proxy first attempt to contact server . This could have undesirable consequences for the overall communication and or any applications executing on client . Because of the real possibility for such undesirable consequences the present invention provides for delaying completion of the client proxy TCP handshake subject to resolution of the proxy server communication. In this way the proxy is better able to communicate any problems with the overall connection to the client should such problems exist. Moreover this solution maintains the transparency of the proxy vis vis the client. In the various scenarios below readers may find it helpful to remember that one goal of the present solution is to deliver to the client as closely as possible a connection experience that would otherwise exist between the client and the server if the proxy were not involved whatsoever. That is in the case of connection errors with the server the proxy will provide reports or responses that emulate as nearly as possible those which would be received by the client if the client were attempting to connect directly to the server without an intermediary proxy.

When a TCP connection request arrives at the proxy and delayed connection acceptance in accordance with the present invention is in effect the TCP three way handshake with the client is suspended. In one embodiment the packet which would ordinarily be sent from the proxy to the client is saved and not transmitted to the connection initiator. The original packet from the initiator is also saved verbatim in case the upper layer returned action i.e. from the proxy s application layer is to forward the connection to another appliance.

Suspending the TCP handshake with the client may cause difficulties for the proxy. That is the proxy s application layer may be unable to proceed without an indication that the client handshake has been completed. Therefore in one particular embodiment of the present invention a template state information block is created to account for the client proxy TCP connection. An artificial state transition is performed on this TCP connection such that the L 7 application or module can be notified about the connection and gain access to connection request details.

Once the L 7 application or module completes its processing and determines a corresponding action another artificial state transition is performed to move the TCP connection into an appropriate state. If the action is to silently drop the packet the state information block initially created can be destroyed without generating any response to the client. If the action is to verbosely reject the connection a packet is sent in response and the state information block is held for a timeout period. If the action is to accept and process the connection the saved packet is sent in response and the connection is moved into a pseudo established state until the three way handshake completes. In the pseudo established state client requests are allowed but deferred unbeknownst to the L 7 application until the connection with the server is filly established. If the action is to forward the connection the saved packet from the initiator is forwarded and the state information block is destroyed.

Some of the above concepts can be more readily appreciated by referring to the accompanying diagrams. for example illustrates a scenario in which a client C is attempting to open a connection by sending a packet to the proxy P . The proxy operates in transparent mode hence the client is not aware of its presence and believes it is opening a connection with a server S . The proxy suspends the TCP handshake process with the client and attempts to establish communication with the server by sending a packet . However the proxy receives no response for any of a number of reasons . During this time the client may continue attempting to reach the server proxy by resending packets etc. Likewise the proxy may continue to attempt to reach the server. However at some point e.g. approximately 75 seconds after initiating its attempts to reach the server proxy the client will time out and return an error message to the application executing on the client indicating that time out. In this instance the proxy does not return any acknowledgment or other communication to the client thus emulating the behavior that the proxy experienced when trying to reach the server. Hence the client remains unaware of the proxy s presence yet nevertheless has the same experience in terms of the type of error experienced as it would have had if the proxy had not been present at all.

In embodiments of the present invention the POSIX socket API or other appropriate API of the proxy is extended to support enabling delayed connection acceptance on listening sockets. When enabled this causes the accept function to return partially connected sockets as described above. Another extension is then provided to specify the action to perform on that partial connection. Such support actions include 

Referring to the scenario depicted is one in which a connection is denied by the server. In this case the TCP handshake initiated by the client s packet is suspended at the proxy in accordance with the above described processes while the proxy attempts to contact the server. To do so the proxy transmits a packet of its own. However instead of a packet this time the server returns an packet indicating the connection has been refused. Accordingly the proxy returns an packet of its own to the client and the client reports the connection as being refused to the application running thereon . Other errors such as a host or network being unreachable etc. may be dealt with in a similar manner.

Referring to the case of a connection being accepted is illustrated. Here two separate TCP connections are involved one between the client and the proxy and the other between the proxy and the server. Unlike the conventional case discussed above however this time the proxy completes its TCP handshake with the server before it completes the TCP handshake with the client. Thus before the client is advised of a successful connection the proxy actually ensures that such a connection is achieved.

More particularly upon receipt of the client s packet the proxy suspends the TCP handshake with the client and sends its own packet to the server. Here the labels and are used to highlight the fact that the packets need not be and often are not identical. In response to receiving the proxy s packet the server returns a packet which the proxy acknowledges using an packet . After sending the packet the proxy also sends an packet to the client i.e. in response to the client s packet . The client returns an packet completing the handshake. Data may then be exchanged among the various devices with the client sending receiving to from the proxy and the proxy sending receiving to from the server. These data packets need not be identical across each connection.

Referring now to a case of forwarding is shown. Here two proxies are disposed between the client and the server. These proxies may operate as a split proxy pair but this need not necessarily be true. When the client transmits a packet to proxy P proxy P passes that packet through to proxy P. More generally the packet from the initiator is transmitted through the network so that the proxy designated to receive and handle the associated TCP connection receives the packet. Proxy P may now perform any of the above described actions. That is proxy P may initiate a bypass connection drop the connection silently deny the connection accept the connection or even forward the connection request to yet another proxy. Some of these actions will of course depend on communications between proxy P and the server.

Yet a further activity is shown in . Here the proxy receives the packet from the client suspends the TCP connection with the client and transmits its own packet to the server. This time however that packet never reaches the server. Instead a network device between the proxy and the server returns an ICMP error of some form e.g. host unreachable network unreachable etc. . Accordingly the proxy returns the same type of ICMP error message to the client which reports the error to the application layer . Thus the client experience is the same as it would have been in the absence of the proxy.

By suspending the processing of the client connection request until the proxy can perform some L 7 processing the proxy is configured to be more flexible about the types of error messages or indications it can return to the client. With a traditional transparent proxy the client connection appears to be successfully established to the server as soon as the proxy receives the connection when in fact this connection was only established successfully to the proxy. At this point the proxy has yet to attempt its connection to the server. If this server connection is unsuccessful the proxy is forced to drop the already established client connection instead of refusing it as it should have.

With the functionalities offered by the present invention this problem is avoided. The proxy is able to connect to the server before sending any response to the client. If that connection fails the same kind of error response returned by the server can be returned to the client. During the L 7 processing the proxy can also select which error response to return to the client even without first connecting to the server. Alternatively or in addition the proxy might connect to the server and use information received from the server to select which type of response to return to the client. Importantly the proxy can choose to mimic the server s response or can choose any other type of response if such other response would be more appropriate. These decisions can be made based on the information received from the client in its connection request information already stored at the proxy e.g. from past activity and or information received from the server if the proxy decides to connect to the server.

When an L 7 application or module at the proxy is notified about a new partial connection the present invention provides connection request details along with the notification. For example the client and server address and port information may be provided. In addition information such as TCP options present in the packet is accessible. This information is typically used to determine the appropriate action to perform on the connection request. Also information received from the server or the absence of a connection with the server may be used in determining how to respond to the client TCP connection request. The L 7 application may use any or all of this information together with preconfigured policy rules or heuristics to then determine how or if to respond to the client TCP connection request.

As used herein a software application or module is generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it will be appreciated that throughout the description of the present invention use of terms such as processing computing calculating determining displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices. A table as referred to herein can be any data structure.

Various embodiments of the present invention may be implemented with the aid of computer implemented processes or methods a.k.a. programs or routines that may be rendered in any computer language including without limitation C C C Fortran COBOL PASCAL assembly language markup languages e.g. HTML SGML XML VoXML and the like as well as object oriented environments such as the Common Object Request Broker Architecture CORBA Java and the like. In general however all of the aforementioned terms as used herein are meant to encompass any series of logical steps performed in a sequence to accomplish a given purpose.

The present invention can be implemented with an apparatus to perform the operations described herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and processes presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method. For example any of the methods according to the present invention can be implemented in hard wired circuitry by programming a general purpose processor or by any combination of hardware and software. One of ordinary skill in the art will immediately appreciate that the invention can be practiced with computer system configurations other than those described below including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics DSP devices network PCs minicomputers mainframe computers and the like. The invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

Thus far the discussion has assumed just one TCP connection request on one port is sent by the connection initiator. However in general the present invention accommodates situations where multiple TCP connections requests are so sent each on a different port number. For example in some embodiments of the invention multiple TCP connection requests by a connection initiator each request being transmitted on a different port number are received at the proxy. The proxy may act in accordance with the above described procedures to delay acceptance of all of the multiple TCP connection requests while initiating independent TCP connection requests to a target host of the initial requests. That is the proxy initiates multiple independent TCP connection requests to the target host at least one each on each of the different port numbers used by the initial requests. Thereafter the proxy will respond to the connection initiator so as to emulate one or more responses to the independent TCP connection requests received from the target host. In this way the connection initiator sees the same responses on a port by port basis that it would have seen from the target host even in the absence of the proxy.

Delaying acceptance of all of the multiple TCP connection requests as discussed above may include suspending TCP connection handshakes corresponding to the multiple TCP connection requests from a connection initiator and creating using the above described processes for each TCP connection request a connection state information template to account for a respective one of the multiple TCP connection requests from the connection initiator. Each of the connection state information templates artificially reflects one or a number of successful completed connections with the connection initiator. Thereafter the application layer process is notified of the artificially reflected successful completed connections with the connection initiator. Ultimately the proxy responds to the connection initiator for example by completing a TCP connection handshake with the connection initiator on the one of the different port numbers that corresponds to a port number on which a response to the independent TCP connection requests was received from the target host.

Thus techniques for suspending the TCP three way handshake offering the partial connection to an L 7 application or module at a proxy to perform further processing and then allowing the L 7 application or module to instruct the proxy s network kernel to perform various actions have been described. In various embodiments these actions may include silently dropping the connection verbosely rejecting the connection accepting and processing the connection locally or forwarding the connection to another proxy or the original destination. This additional functionality is provided in one particular embodiment via extensions to the POSIX socket API. Of course the foregoing examples of embodiments of the present invention are not intended to be restrictive of the scope of the invention which is best measured in terms of the following claims.

