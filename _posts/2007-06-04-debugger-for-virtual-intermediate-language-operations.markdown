---

title: Debugger for virtual intermediate language operations
abstract: Various technologies and techniques are disclosed for testing intermediate language operations. A debugger harness is provided that instruments an intermediate language stream to replace intermediate language operations with equivalent virtual intermediate language operations. A particular intermediate language operation is intercepted from the intermediate language stream and the equivalent virtual intermediate language operation is determined. The virtual machine runs under a debugger harness so that one or more managed applications are executed using the equivalent virtual intermediate language operations. This allows a functionality of the debugger to be tested.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095917&OS=08095917&RS=08095917
owner: Microsoft Corporation
number: 08095917
owner_city: Redmond
owner_country: US
publication_date: 20070604
---
Software developers can develop software by writing source code in one or more programming languages. Some software development platforms compile the source code into an intermediate language IL instead of platform or processor specific object code. This IL code is then executed in any environment that supports the particular runtime framework for that platform. A just in time JIT compilation process is used to turn the byte code into code immediately executable by the CPU. The conversion can be performed gradually during the program s execution. JIT compilation provides environment specific optimization runtime type safety and component verification. Examples of platforms that use such IL and JIT techniques include the MICROSOFT .NET Framework Java Virtual Machine and others. Applications that run on such platforms that use IL and JIT compilation are typically called managed applications .

There are various ways to test and or debug a software application that is in development in these JIT environments and in other environments for that matter. As a few examples a debugger application can be used to step through a specific code path to trace a specific problem an automated test tool can be used to run the software application with some pre defined parameters and then log the results and a human tester can personally go through a series of test cases to ensure an expected outcome is achieved. One problem with these testing approaches is that they are limited to the creativity of the user who debugged the program created the automated test script or interactively tested the application.

Various technologies and techniques are disclosed for testing intermediate language operations. A debugger harness is provided that instruments an intermediate language stream to replace intermediate language operations with equivalent virtual intermediate language operations. The intermediate language operations are provided by a virtual machine. In one implementation the virtual intermediate language operations are provided in a debugging services application programming interface. A particular intermediate language operation is intercepted from the intermediate language stream and an equivalent virtual intermediate language operation is determined. The virtual machine runs under the debugger harness so that one or more managed applications are executed using the equivalent virtual intermediate language operations. Running the managed applications while the debugger runs with the debugger harness allows functionality of the debugging services to be tested.

This Summary was provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

For the purposes of promoting an understanding of the principles of the invention reference will now be made to the embodiments illustrated in the drawings and specific language will be used to describe the same. It will nevertheless be understood that no limitation of the scope is thereby intended. Any alterations and further modifications in the described embodiments and any further applications of the principles as described herein are contemplated as would normally occur to one skilled in the art.

The system may be described in the general context as an application that provides debugging services but the system also serves other purposes in addition to these. In one implementation one or more of the techniques described herein can be implemented as features within a debugging program or from any other type of program or service that allows for testing of particular application functionality. In another implementation one or more of the techniques described herein are implemented as features with other applications that deal with platforms for executing software applications such as the MICROSOFT .NET Framework or Java Virtual Machine.

In one implementation a debugger application is provided that uses a debugger harness to take pre existing managed applications that run in a just in time framework and instrument the real intermediate language IL operations called opcodes in some environments with virtual intermediate language operations. The term virtual intermediate language operation as used herein is meant to include commands or other mechanisms that use a debugger harness to manipulate the virtual machine state in a same or similar way as the intermediate language operation would. In other words as these managed applications execute the debugger application is running in the background and various IL operations are passed to the IL stack from the managed applications. These operations are then intercepted by the debugger harness and replaced with operations in the debugger API that are equivalent i.e. that have the same or sufficiently similar functionality . The term debugger harness as used herein is meant to include a specialized debugger application and the debuggee modules helper modules that cooperate with it. The user who is running the particular managed application s has no idea that some of the underlying functionality is being provided by the debugger API as opposed to the virtual machine. By allowing these IL operations to be replaced with the equivalent debugger IL operations the functionality of the debugger API can itself be tested more thoroughly before shipping it to end customers such as software developers. If the managed applications do not behave as expected when using the debugger APIs then the developers of the debugger can make further enhancements to fix any problems with the debugger.

As shown in an exemplary computer system to use for implementing one or more parts of the system includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Additionally device may also have additional features functionality. For example device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device .

Computing device includes one or more communication connections that allow computing device to communicate with other computers applications . Device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here. In one implementation computing device includes debugger application . Debugger application will be described in further detail in .

Turning now to with continued reference to a debugger application operating on computing device is illustrated. Debugger application is one of the application programs that reside on computing device . However it will be understood that debugger application can alternatively or additionally be embodied as computer executable instructions on one or more computers and or in different variations than shown on . Alternatively or additionally one or more parts of debugger application can be part of system memory on other computers and or applications or other such variations as would occur to one in the computer software art.

Debugger application includes program logic which is responsible for carrying out some or all of the techniques described herein. Program logic includes logic for interacting with a virtual machine for running applications the virtual machine having intermediate language IL operations e.g. opcodes for implementing certain behaviors logic for providing a debugger that is responsible for consuming debugging services the debugging services having an API having some of the same functionality as virtual intermediate language operations e.g. virtual opcodes for implementing some of the same behaviors as the real IL operations logic for providing a debugger harness that instruments the IL stream to replace certain IL operations with the equivalent virtual IL operations logic for executing the debuggee with the debugger harness so that a particular application is executed using the equivalent virtual IL operations as opposed to the real IL operations thereby allowing a functionality of the debugger to be tested with single and or multiple threads and other logic for operating the application . In one implementation program logic is operable to be called programmatically from another program such as using a single call to a procedure in program logic .

Turning now to with continued reference to the stages for implementing one or more implementations of debugger application are described in further detail. is a high level process flow diagram for debugger application . In one form the process of is at least partially implemented in the operating logic of computing device . The process begins at start point with providing a virtual machine for running applications the virtual machine having intermediate language IL operations for implementing certain behaviors stage . The system provides a debugger that is responsible for consuming debugging services the debugging services having virtual machine inspection and execution operations for implementing some of the same behaviors as the real IL operations stage . The system provides a debugger harness that instruments the IL stream to replace certain IL operations with the equivalent virtual IL operations stage . The debugger runs with the debugger harness so that one or more applications can be executed using the equivalent virtual IL operations as opposed to the real IL operations thereby allowing a functionality of the debugger to be tested as the applications run stage . The process ends at end point .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. All equivalents changes and modifications that come within the spirit of the implementations as described herein and or by the following claims are desired to be protected.

For example a person of ordinary skill in the computer software art will recognize that the client and or server arrangements user interface screen content and or data layouts as described in the examples discussed herein could be organized differently on one or more computers to include fewer or additional options or features than as portrayed in the examples.

