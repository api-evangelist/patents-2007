---

title: Virtualization with binary translation
abstract: A system for providing virtualization that includes a processor operable to execute one or more machine-readable instructions, the processor having a native instruction set architecture (ISA) and a virtual machine monitor (VMM) operable to host at least a first virtual machine having a first ISA different from the native ISA, the VMM having integrated therein a first dynamic binary translation (DBT) layer to assist in an execution of a first application of the first ISA in the first virtual machine by the processor having the native ISA.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327354&OS=08327354&RS=08327354
owner: Hewlett-Packard Development Company, L.P.
number: 08327354
owner_city: Houston
owner_country: US
publication_date: 20070531
---
Virtual machine technology or virtualization is rapidly emerging to become an integral component of future information technology IT systems. As referred herein and as understood in the art information technology or IT encompasses all forms of technology including but not limited to the design development installation and implementation of hardware and software information or computing systems and software applications used to create store exchange and utilize information in its various forms including but not limited to business data conversations still images motion pictures and multimedia presentations technology and with the design development installation and implementation of information systems and applications. IT distributed environments may be employed for example by Internet Service Providers ISP web merchants and web search engines to provide IT applications and services to users.

Virtual machine technology provides three primary features. It allows multiple operating environments to reside on the same physical machine it provides fault and security isolation which can be tied to guaranteed service levels and it allows the entire state of the machine memory disk images I O state etc. to be captured saved and potentially reused. In turn these three features of virtualization enable applications such as server consolidation resource provisioning software delivery security availability debugging simulation etc. illustrates a typical set up for providing virtualization in a system which is a physical machine that includes both hardware and software. Examples of a system include but are not limited to a desktop or laptop personal computer PC a server a mainframe. The system hardware is represented by the hardware platform having one or more processors one or more memory devices and one or more I O devices arranged and in communication with each other in a manner known in the art. The system software includes a software virtualization layer also called a virtual machine monitor or hypervisor to simultaneously support multiple operating system instances and in multiple virtual machines or domains and . These can be multiple instances of the same operating system or of different operating systems. The virtualization layer is operable to share the computing resources of the underlying hardware platform between the multiple operating system instances. A number of hardware and software based virtualization solutions are commercially available. However these solutions focus on the partitioning isolation and encapsulation features of virtual machines and their use for different applications mainly in the context of a specific processor architecture.

For simplicity and illustrative purposes the principles of the embodiments are described by referring mainly to examples thereof. In the following description numerous specific details are set forth in order to provide a thorough understanding of the embodiments. It will be apparent however to one of ordinary skill in the art that the embodiments may be practiced without limitation to these specific details. In other instances well known methods and structures have not been described in detail so as not to unnecessarily obscure the embodiments.

As referred herein an instruction set architecture ISA defines the boundary between machine hardware and software and includes a set of instructions and rules about how those instructions execute under various circumstances. On most machines the hardware enforces some concept of privilege and software is executed in either privileged mode or unprivileged or user mode. Similarly an ISA may be subdivided into two parts a system ISA and a user ISA. In general the system ISA includes instructions that are privileged while the user ISA includes instructions that are unprivileged. If software executing in user mode e.g. an application attempts to execute a privileged instruction the hardware forbids the execution by invoking a trap which delivers control to privileged code generally an operating system . This allows the operating system OS to isolate applications from each other and to provide an illusion that each application owns all of the machine s resources thus providing the foundation for multi programming . Because an application may wish to control the machine in ways that are privileged an OS provides an abstract interface to privileged functionality through a set of system calls. Thus an application may execute code either of the user ISA or system calls to the OS. The sum of these two is called an application binary interface ABI .

As also referred herein a virtual appliance is an encapsulation of the application and OS bits required for a workload targeted at a particular virtual machine platform.

As further referred herein dynamic binary translation or translator DBT as its name implies is runtime compilation of a binary image from one architecture ISA so that the resultant code will run on another architecture ISA . The translation occurs between a source environment and a target environment. The exact characteristics of both the source and target environments yield a variety of types of translators. There exist dynamic binary translators called cross ISA same OS translators that are operable to provide runtime compilation of a binary image from one ISA to another but retain the same OS. Those translators that allow different source and target OS es are called cross ISA cross OS translators. Also those translators that allow binary translation between two same architectures with the same OS are called same ISA same OS translators. It should be understood that the term ISA in the aforementioned translators refer to user ISA that is being translated and not the system ISA.

Described herein are methods and systems for integrating an interface transformation layer to virtualization by adding dynamic transformation of the hardware interface to virtualization. In one embodiment this is achieved by combining conventional virtualization functionality with a DBT that provides dynamic binary translation of the full instruction set architecture ISA that includes both user and system ISAs. Such a combination significantly increases the benefits from current applications of virtualization such as server consolidation and resource provisioning while potentially enabling additional new uses of virtualization matching with emerging trends such as virtual appliances and heterogeneous hardware.

According to one embodiment virtualization is implemented on a physical or hardware machine platform wherein there is provided a virtual machine monitor VMM also known as a hypervisor which enforces and abstracts the system ISA to support multiple OS es also known as guest OS es on the same physical machine each with its own set of applications. In another embodiment cross ISA virtualization is provided to allow for example a virtual appliance intended for one CPU architecture or ISA e.g. x86 to transparently execute on a different CPU architecture or ISA e.g. IA 64 or Itanium SPARC .

The system is operable to host multiple domains two of which are shown as and . Each domain is an individual virtual machine running on the hardware platform with a separate OS instance and and with the same or different ISAs. For example software applications in the domain may run in one instance of an OS and software applications in the domain may run in another instance of an OS wherein the underlying OS type of the OS instances and may be the same e.g. Linux or different e.g. Linux for and Windows for . Furthermore the domains and may have different ISAs. For example the domain may operate on an Itanium IA 64 ISA and the domain may operate on an IA 32 or SPARC ISA. A domain that has the same ISA as the ISA of ISA of the processor processor ISA or native ISA is considered a native domain. A domain that has a different ISA from the processor ISA is considered as a guest ISA domain.

The system further includes a system VMM or hypervisor that is mated with an application level binary translator as represented by the DBT layer that has been augmented with a system ISA translation support wrapper as represented by the interface translation layer to allow virtual machines of one ISA to run on a physical machine of another ISA. The DBT layer which may be considered a software implementation of the user ISA for a domain or provides the core binary translation functions. The interface translation layer is a transformation layer that handles system level instructions and emulates the application programming interfaces APIs for the guest ISA environment that is used to operate the guest ISA domain .

According to one embodiment a guest domain in the system such as the domain is initially paravirtualized prior to its migration to the system for virtualization therein. As understood in the art paravirtualization of a virtual machine such as the guest ISA domain refers to the modification of the guest kernel of the guest OS to make hypercalls or calls to the hypervisor such as the VMM . This allows operating systems that support transparent paravirtualization to run both natively and as a VMM guest. The guest kernel of the guest ISA domain performs hypercalls to the VMM by branching to offsets within a special page. That page is filled out by the VMM at startup as described later. Thus the VMM is operable to provide an emulated ISA environment for a virtual machine or virtual appliance as needed for operation in the system wherein the emulated ISA environment is in terms of the APIs for the processor ISA.

In operation if there is a native domain e.g. the domain that has the same ISA as that of the processor any existing suitable VMM or hypervisor may be used for the VMM to operate the domain and run applications therein. The VMM may host multiple native domains. However if there is a guest domain e.g. the domain that has a different ISA from the ISA of the processor the same existing VMM may be integrated with a DBT layer and a transformation layer to form the VMM which remains operable to host native domains. For each guest ISA domain there is a corresponding DBT layer and a transformation layer . The VMM may host multiple guest ISA domains as well. Accordingly by combining virtual machine techniques with DBT the VMM is operable to proactively determine each instruction of a running virtual machine domain or and transform or translate it dynamically as needed for execution by the underlying hardware platform .

As noted earlier an existing VMM such as the commercially available Xen IA 64 may be leveraged as a foundation for implementing the VMM . With the VMM the system is operable to provide virtualization that allows multiple operating environments to reside on the same physical machine. Thus if an operating environment is the native domain that has an OS using the same IA 64 ISA as used by the platform any existing suitable VMM such as the Xen IA 64 hypervisor may be used to run such an environment and applications therein in a manner known in the art. To implement cross ISA virtualization for operation of a guest ISA domain which uses e.g. the IA 32 ISA that is different from the processor IA 64 ISA the method leverages the existing VMM by integrating therein a DBT layer that is augmented with the interface translation layer . As noted earlier the DBT layer provides application level dynamic binary translation of the user ISA in the domain and the transformation layer handles system level instructions and emulates APIs for the emulated ISA environment e.g. an emulated IA 32 environment in the domain .

Referring to the method in to start up at the VMM with its integrated DBT and interface translation layers is loaded in the system . To that effect the VMM is packaged into a loader binary which uses the native domain boot protocol so that it may be started in the same way as a native domain. For example because the native domain is a Linux domain the Linux boot protocol is used so that the VMM may be started in the same way as the Linux domain . Accordingly the loader binary is specified instead of an Itanium Linux kernel and the IA 32 guest kernel is specified in place of an initial RAM disk for the native domain . The loader binary contains the runtime components of the VMM as well as the components for the integrated DBT layer and interface translation layer .

At the loader binary relocates these components to their runtime locations in the system establishes virtual mappings switches to virtual mode and starts or implements the VMM . The loader binary or memory is then no longer needed and may be reclaimed. Once started the VMM is responsible for installing an interruption vector table which is a table of entry points for handling processor exceptions generated by the domain . It also sets up an initial guest ISA environment for the domain and native ISA environment for the domain including register state initial page tables and a memory structure containing VMM specific startup information for the guest OS in the guest ISA environment. Thus in the running example the VMM sets up an initial IA 32 environment for emulation in the domain .

At when an application such as an IA 32 application is executed in the guest ISA domain the IA 32 environment sets up the IA 32 state for the IA 32 application in the memory buffer of the system .

At the VMM passes control of the application execution to a fetch and execute loop of the DBT layer e.g. the IA 32 EL which then loads the guest ISA state e.g. the IA 32 state to the hardware registers for application level ISA translation and execution.

At during runtime the DBT layer dynamically translates the guest ISA basic blocks e.g. the IA 32 basic blocks of code for the guest ISA state in the hardware registers into processor ISA code for execution.

At the VMM constantly monitors the application execution to determine whether there is a runtime exception.

At upon determining that there is a runtime exception the runtime exception is handled by the VMM as follows control of the application execution by the DBT layer is returned to the VMM which then handles the runtime exception without use of the DBT layer therein and returns control of the application execution once the runtime exception has been handled.

As discussed above hypercalls interrupt IA 32 executions and call back into the VMM for their handling. Such interruptions may be done through software interrupt instructions. The VMM then simply inspects the IA 32 register state and dispatches to the appropriate emulation function. A number of hypercalls are used by the guest kernel of the guest ISA domain and

many of these have more than one sub operation. Some of these hypercalls are emulated by calling the corresponding APIs of the processor ISA while others act purely on data maintained within the VMM . The VMM also emulates a number of privileged instructions such as return from interrupt I O port accesses and some control register accesses. This is implemented in a similar manner to any other VMM by inspecting the instruction at the guest ISA instruction pointer and updating guest ISA register state appropriately.

Accordingly as described herein the combination of virtual machine techniques with DBT enables cross ISA virtualization wherein a virtual machine or appliance intended for one ISA may be transparently executed on a different ISA with identical or different OS types and wherein paravirtualized virtual machines of different ISAs with identical or different OS types may run alongside one another on a single physical machine. One of the key customer usage models for virtualization today is consolidation where the workloads of several smaller servers are combined into one larger server. Currently the workloads to be consolidated are platform specific which constrains the choices for purchasing the new server. For example if a workload contains applications that only run on Windows server on an IA 32 platform the consolidation server must be capable of running IA 32 Windows applications. However the selection of large servers on the market consists largely of systems built on other ISAs such as Itanium Power and SPARC. Though Windows server supports Itanium many IA 32 Windows applications have never been ported to Itanium. However the VMM as describe herein allows the workloads of both IA 32 servers and non IA 32 servers to be consolidated onto more high end non IA 32 servers.

Another key value of virtualization is in disconnecting the virtual platform from the physical platform for resource migration. A workload may be transparently and dynamically moved from one platform to another even without reboot or noticeable downtime. This live migration provides great flexibility in that workloads may be moved to maximize resource utilization allow for maintenance reduce power and cooling costs. But one of the not widely advertised limitations of migration is that the source and target processors must be identical or nearly so. Certainly the ISA must be the same. However as described herein the novel approach to the design of the VMM allows resource pools with completely different ISAs to be combined into the same pool. Furthermore this novel approach may be used to combine non identical similar ISA pools such Pentium 4 vs. Pentium 3 applications . Even more aggressively having a cross ISA virtual machine migration provides a level of ISA agnosticity that may enable more power efficient or lower cost general purpose processors from different markets e.g. SiByte PASemi to support a broader set of applications.

A rapidly growing niche of the virtualization market is the availability of virtual appliances or packages of bits combining an OS and an application that are distributed to run on top of a particular VMM product. This greatly reduces installation hardware and testing costs for sampling new soft ware. The novel approach to the VMM as described herein may allow commercially available virtual appliances such as those for IA 32 to run on other platforms.

Another trend in the computing industry is the support for heterogeneous or asymmetric cores in system processors. In these systems the novel approach of having a binary translation layer combined with the virtual machine layer described herein may enable virtual appliances to be seamlessly migrated between configurations supporting different heterogeneous accelerator cores. Furthermore this novel approach provides a nexus of translation at the ISA level which reduces the need to change hardware in order to accommodate virtual machines of different ISAs.

What has been described and illustrated herein is an embodiment along with some of its variations. The terms descriptions and figures used herein are set forth by way of illustration only and are not meant as limitations. Those skilled in the art will recognize that many variations are possible within the spirit and scope of the subject matter which is intended to be defined by the following claims and their equivalents in which all terms are meant in their broadest reasonable sense unless otherwise indicated.

