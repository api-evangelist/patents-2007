---

title: Efficient data handling representations
abstract: Embodiments are provided to use metadata to provide readable and/or writeable regions of a multi-dimensional space. In an embodiment, metadata can be used to define readable and/or writeable regions of a multi-dimensional data store. The various embodiments also use relational and/or multi-dimensional representations to resolve and validate readable and/or writeable regions of a multi-dimensional space. Metadata can also be used to designate a number of writeable and/or readable regions of a relational and/or multi-dimensional representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743071&OS=07743071&RS=07743071
owner: Microsoft Corporation
number: 07743071
owner_city: Redmond
owner_country: US
publication_date: 20070226
---
This application is related to U.S. patent application Ser. No. 11 710 799 filed Feb. 26 2007 and entitled Handling Multi dimensional Data Including Writeback Data which is hereby incorporated by reference in its entirety.

Businesses continually strive to improve operations products services etc. For example an enterprise can use an integrated performance management application when planning and making critical enterprise decisions. Enterprise users may use the integrated performance management application to create reports analyze trends make projections etc. Users may rely on data from various data sources such as from relational or multi dimensional databases for example while using the integrated performance management application. In many instances users would like to write to different data sources. However many systems and applications provide limited if any ability to write to a data source especially against multi dimensional data sources. Many factors can contribute to the limited writeback functionality. These factors include the complexities associated with multiple file formats protection levels system performance context sensitive data incompatible systems and synchronization issues associated with relational and or multi dimensional databases.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are provided to use metadata in part to provide a number of readable and or writeable regions of a multi dimensional space. In an embodiment metadata can be used to define readable and or writeable regions of a multi dimensional data store wherein the metadata can be based in part on at least one of a user role user role association and or a model. The various embodiments also use relational and or multi dimensional representations to resolve validate and process readable and or writeable regions of a multi dimensional space. According to the various embodiments metadata can be used when determining processing and or presenting a number of readable and or writeable regions of a relational and or multi dimensional representation.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

Embodiments are provided to use metadata in part to provide readable and or writeable regions and associated representations of a multi dimensional space. In an embodiment metadata can be used to define writeable regions of a multi dimensional data store. The various embodiments also use relational and or multi dimensional representations to resolve and validate readable and or writeable regions of a multi dimensional space. As described below metadata can be used to designate a number of writeable and or readable regions of a relational and or multi dimensional data structure. In one embodiment a business performance application can provide a writeable region representation to a user by using metadata and a number of relational tables to define the writeable region representation.

According to the various embodiments described below structural metadata can be defined to correspond with dimensions hierarchies and or models but is not so limited. A number of users roles and or user role associations can be used to define readable and or writeable regions of a multi dimensional space. In one embodiment user role associations can be used to define readable and or writeable regions according to a number of dimensions and or hierarchies that are associated with the user role associations. User roles can also be used to define models and readable and or writeable definitions can be customized for an associated model.

Metadata that is associated with the readable and or writeable regions and or definition can be deployed to a backend server. The backend server can operate to validate the metadata and save it into various relational tables. In one embodiment the relational tables include dimension tables hierarchy tables user tables roles tables user role association tables and other security related tables. The backend server is further configured to communicate relevant information from a relational data store to a multi dimensional data store. For example the relevant information can be pushed from a relational database to a number of multi dimensional databases e.g. OLAP cubes wherein each cube corresponds to a model such that the readable and or writeable region definitions are defined in the multi dimensional database as security definitions.

As described below data security can be enforced during desired times such as at a desired query time or during writeback for example. Accordingly information on which regions e.g. cells in the query results are writeable can be supplied to a client so that the client application can prevent users from entering data in read only regions and or also inform users of writeable regions. During writeback a data security check can be performed to ensure that the region e.g. cell being written to is indeed writeable.

In one embodiment the system can be used to manage maintain and or use metadata associated with a data writing also referred to as writeback herein process or functionality. The system is configured to use metadata and other information to enable users to efficiently write data to a repository. For example the system can use metadata to efficiently control or otherwise manage how data is written to a multi dimensional data store such as an OLAP cube. The system and its components include functionality to communicate with other computing devices communication devices and or other systems and is not limited to the embodiments and examples described herein.

As shown in the system includes a modeler component configured to create modify and manage information including metadata but is not so limited. The modeler component can be used to create modify and manage metadata associated with models dimensions hierarchies business processes business rules reports forms and or security settings etc. For example the modeler component can be used to create and or modify metadata such as PerfomancePoint server metadata including metadata models metadata dimensions metadata hierarchies and or metadata security scope settings. In one embodiment the modeler component can be configured as a graphical user interface GUI tool that can be used by an end user to create modify and manage metadata associated with read and or write access to a multi dimensional data store. For example the modeler component can be used by an enterprise manager to permit certain enterprise users to write to certain cells of an OLAP cube.

The modeler component can be used to grant read and or write access to a region or regions of a multi dimensional data store based on certain roles and other permissions. For example a user can use the modeler component and define various cube roles to grant read and or write access to users and groups of users while also limiting access to specific cells or groups of cells of an associated cube. The modeler component can be used to define structural metadata that is associated with models dimensions and the users having readable and or writeable access to certain regions of the multi dimensional data store or stores.

In an embodiment the modeler component can be used to capture metadata as defined by a user. The captured metadata can be temporarily stored by the modeler component in memory e.g. stored in RAM as part of a data structure until being saved to the serving component e.g. backend server . As part of a saving request the modeler component is configured to call a number of server side APIs such as a number of web service APIs for example to communicate any metadata changes to the serving component . The serving component can then validate the metadata and save the changes back to the relational store component which includes a metadata store. As described below the modeler component can define and use metadata and a number of associated security definitions and tables to control read and or write permissions including writeback capability to a relational and or multi dimensional data store.

In one embodiment once a number of write permissions have been defined the associated metadata can be captured by the modeler component and communicated to a serving component for storage in a relational store component . For example the captured metadata can be sent or deployed to a sequel SQL serving computer and then stored in a relational database. As described below the captured metadata can be used to designate writeable regions that a particular user can write to. In one embodiment the captured metadata can be used to designate a number of writeable sub cubes wherein the designated writeable sub cubes are readily identifiable as writeable regions. For example a designated writeable region can be highlighted in a particular color background outline font or other identifying indicia see .

With continuing reference to the modeler component is in communication with the serving component . For example the modeler component can communicate with the serving component via a wired wireless or combination of communication networks. In one embodiment the modeler component communicates with serving component using a number of web services application programming interfaces APIs . As described below the serving component is configured to respond to various requests from the modeler component and or an interface component . In one embodiment the serving component is configured to retrieve and update metadata perform data submissions e.g. writeback review and approve assignments perform business calculations launch and manage jobs etc.

The interface component is also in communication with the serving component . In one embodiment the interface component can be configured as an add in to the Microsoft Excel software application or as a web browser enabled application. The interface component can be used to perform various client side operations such as submitting data reviewing approving submissions etc. As described above a number of writeable regions can be graphically displayed to the interface component to indicate where a user can enter data see . Once a user uses the interface component including appropriate access credentials such an ID for example the serving component can use the metadata associated with the particular user to present writeable and or non writeable regions to the user.

As described above the system also includes a relational store component for storing metadata fact data e.g. the target of a writeback operation and other information. The system also includes a multi dimensional store component . In one embodiment the multi dimensional store component is configured as an OLAP store that is used to store a multi dimensional aggregation of fact data e.g. a number of cubes . Once data writeback is processed in the relational store component a refresh of the multi dimensional store component can be performed to ensure consistency between the two stores. The multi dimensional store component can be managed using a number of analysis tools. For example the multi dimensional store component can be managed and maintained using the Microsoft SQL Server Analysis Services system. It should be noted that the refresh of the multi dimensional store component may be set up automatically so that any changes from the relational store component can be propagated to the multi dimensional store component in real time or near real time.

As described above the modeler component can be used to define regions of data or a multi dimensional database that a particular user is allowed to write to. In an embodiment a corresponding writeable region can be graphically presented to a user who is using the interface component to interact with various data. Correspondingly once the relational tables and associated metadata have been used to define one or more writeable regions a user of the interface component can quickly and efficiently determine locations where data entry is permitted and not permitted by just looking at the graphical representations of an associated form. Moreover due to the metadata available during form and report rendering time the system is able to efficiently determine read and or write permissions for each user of the multi dimensional store .

A number of security tables can be used to prepare a writeable region data structure as described further below. The writeable region data structure supports a complex definition of a multi dimensional writeable region in part by using a number of writeable region scopes. In one embodiment the scopes can be represented by a union scope operator an intersection scope operator and a negation scope operator. The scope operators can be implemented as part of writeable region data structure. As described herein the scope operators can be used by components that generate and or consume a writeable region of the multi dimensional store component . Each scope operator can be configured to represent a collection of sub cubes in the multi dimensional store component .

Correspondingly each scope operator defines a sub cube by providing a list of dimension members that define a particular sub cube. For a multi dimensional coordinate to be writeable it has to be in at least one of the scopes represented by the union scope operator. Additionally for a multi dimensional coordinate to be writeable it has to be in each of the scopes represented by the intersection scope operator. Moreover for a multi dimensional coordinate to be writeable it should not be present in any of the scopes represented by the negation scope operator.

As an example assume that a union scope contains U U and the intersection scope contains I and the negation scope contains N. Further assume that a coordinate as seen by a user using the interface component is graphically represented as being a writeable coordinate. Correspondingly the XYZ or other coordinate representation should be defined to be in data U or U and intersect with data I and should not be in data N to be writeable. Stated differently each scope can be equated to a sub cube of a multi dimensional data source.

The system is configured to secure a multi dimensional data structure and thereby manage read and or write access to the areas of the multi dimensional data structure. Securing multi dimensional data for different users can be critical in an enterprise system. According to an embodiment the system can use various security definitions that can be associated with particular users wherein the security definitions can be based on a number of dimension members. These security definitions can be translated by the serving component into both multi dimensional and relational forms.

Accordingly read and or write access restrictions can be defined on the basis of a number of dimension members and or hierarchies of an associated model. Each model can associate a set of rules for each process. The serving component can include data processing functionality to manage the execution and interpretation of the associated rules in conjunction with structural metadata. For example the modeler component can be used to allow a user to submit data and capture the associated metadata that belong to Holland US and Canada members in an Entity dimension. As further example the modeler component can be used to allow a user to submit data to a certain time e.g. 2005 and or scenario e.g. budget dimension.

In certain situations a multi dimensional representation using a Multi Dimensional Expression MDX language can provide a means to convey user read security information to the multi dimensional store component . Correspondingly an associated user is only able to read certain data defined by the security information or definitions when they connect to the multi dimensional store component . On the other hand a relational representation can provide a means to perform a security check when a user is attempting to writeback data values to the multi dimensional store component . For example SQL stored procedures can be used when performing security checks on submitted data values. The SQL stored procedures can assist to efficiently perform security checks since a large number of data rows may be written back in an enterprise application.

As described above the modeler component can be used to define read and or write access for a particular user based on a collection of assigned roles. In an embodiment a role can correspond with an NT security group model to represent a group of users who share similar security permissions. Instead of defining the same security permission over and over for each user a role provides a mechanism to define the permission once and then applies to every user who belongs to the role making it easier to create and maintain. Thus as defined an effective read and or write access for a user can be described as a collection of sub cubes or subsets of data stored in the multi dimensional store component . This can be represented using a multi dimensional representation as a collection of different sub cubes. As discussed in conjunction with below as part of a relational representation security tables for each dimension can be configured to hold information on what dimension members a user has access to for a particular sub cube definition.

As shown in a BizRoles table includes list of roles in the context of business roles for users who have access to certain data. In one embodiment many of the fields of the BizRoles table have predetermined values. The RoleId corresponds to a particular security definition and can be used to define a shape of the permission cube . For example assume that for the same UserID and RoleId and ModelPermissions a set of members are defined in Dimension security tables for Dimension and Dimension .

As a result the associated user has access to a square defined by members in those 2 dimensions and unrestricted permissions for members in other dimensions. The DefaultPermission field can correspond to a Low Medium or High role default access setting with Low being the least restrictive. The BizModelPermissions table includes a list of models that an associated role can access. The ModelPermissions field can be used to define an access level read write or both . For example a 0 can correspond to read access and a 1 can correspond to write access.

The BizDataPermissions table can be used to define what data that an associated role can access. The HierarchyLabel field can be used to define access to a cube dimension defined by an associated record. The HierarchyMember field can be used to define what member s access is restricted to e.g. may contain expressions like Foo.Descendants . The IsFilterHierarchy field can be used to define whether a corresponding record provides a final restriction for a particular role or that it requires further customization in the UserProperties table . In some cases the Member ID can be used to restrict possible customizations. Correspondingly a broader role definition and permission customization can be provided for each user within the role. The UserProperties table provides a means for customization of a user s access. The customizations can be made to be in accord with BizDataPermissions table .

The BizUsers table provides a list of users in an associated system. The User Roles table provides a manifestation of the various relationships between users and roles. The UserId field can be used to represent a user for whom the security is defined. A number of tables can also be generated when defining user permissions associated with write and or read access to a particular data store. As shown in a UserModelAssociation table can be generated which is a materialization of links between a user a role and or model. The Sec Entity table can be generated to include the members that user role association enabled a user to access a particular model. The MemberId field corresponds to member dimensions that a user has associated permissions. The generated tables enable the system to provide more efficient security related operations.

In an embodiment SQL based dimension security procedures can be used to provide an efficient security check for read and write operations. Read and write dimension security information can be generated and stored in a number of ancillary SQL tables. Accordingly security check operations can be performed efficiently by using SQL statements and stored procedures. Additional security tables can be generated to hold information on which dimension members are available to each user according to a particular model. That is for each model dimension in the model a dimension security table can be created to store generated security information for each user. In one embodiment the dimension security tables can be created using a modeling subcomponent of the modeler component when generating a model. A number of application program interfaces APIs can be called by the modeling subcomponent to populate the dimension security tables as needed.

The following example illustrates using a number of security tables to represent write security and define writeable region representations for a number of end users. Correspondingly the populated security tables and associated metadata can be used to provide graphical representations of one or more writeable regions of a multi dimensional space.

First assume that the following security definitions are defined by a user using the modeler component 

Moreover User is associated with UserModelAssociationID and User is associated with UserModelAssociationID .

As described further below a number of security check stored procedures use the table entries to determine if a particular user has read and or write access to a particular region in the multi dimensional store component . In an embodiment the security check stored procedures can be generated at the time an associated model is generated. In one embodiment at a desired time such as during a design process a model can be created using the modeler component wherein the model is defined by the associated metadata. In order to use the model during runtime associated data structures e.g. SQL Server and Analysis Services structures such as Tables Views Stored procedures Dimensions Hierarchies Cubes etc. are created based on the model metadata. By generating the security check stored procedures at the time of model generation the serving component has access to and knowledge of the metadata generated during the model generation process. Correspondingly the generated security check stored procedure is customized to each associated model allowing it to be generated in a most efficient form.

With continuing reference to the user has checked a number of boxes to define the roles for the particular user. When defining roles the user is also defining readable and or writeable regions that correspond with a number of the dimensions and hierarchies. Information associated with the user s interaction is captured by the modeler user interface as metadata. At the user can use the modeler user interface to assign roles to models and may further customize readable and or writeable definitions for each model. The modeler user interface captures the user interaction as structural metadata and other data. As described below the captured metadata and other data can be used when determining readable and or writeable accessibility for a particular user.

At the user can use the modeler user interface to save and deploy the metadata and other data to the serving component . At serving component can validate the metadata. In an embodiment the serving component is configured to validate the metadata by determining if the submitted metadata conforms to defined business logic rules e.g. a submission for a U.S. entity should have U.S. dollars as the associated currency . If the validation is successful at the serving component saves the validated metadata to a number of relational tables of the relational store component . For example the serving component can store the validated metadata to a number of dimension tables hierarchy tables user tables roles tables user role association tables and other related tables.

At the serving component pushes relevant information such as multi dimensional role permissions role user associations etc. from the relational store component to the multi dimensional store component thereby publishing the roles to the multi dimensional store component and rebuilding the associated data and aggregations by re reading from the relational store component and calculating the associated aggregations. For example the serving component can push relevant information to a number of OLAP cubes so that the readable and or writeable region definitions are defined in each cube wherein each cube corresponds to a particular model. At the serving component can provide the writeable region information to a number of clients.

In one embodiment a business modeling interface can be used to define read and or write security according to particular dimensions hierarchies models users roles and or user role associations. For example a web based interface can be used to associate users and roles for each model. Thereafter the defined read and or write security is captured as metadata by the business modeling interface and communicated to a serving component for use in read and or write security operations such as during a writeback process for example. That is once defined the metadata can be deployed to the serving component .

At once a model and the associated metadata have been deployed to the serving component the serving component uses the metadata and other information to create runtime representations of the readable and or writeable regions in both relational and multi dimensional form including the use of a number of stored procedures. In one embodiment read security uses Analysis services security functionality for enforcement and write security can be enforced using SQL stored procedures in an application database associated with the serving component .

At the interface component is configured for use in rendering a number of associated forms that include a number of writeable region representations see . In one embodiment while rendering a form the system compares writeable region parameters with metadata as part of a query process. For example data entry forms can be created for users to enter data. In one embodiment a user can use the interface component to open a form wherein one or more writeable regions are determined by the serving component and mapped to the appropriate coordinates e.g. spreadsheet coordinates associated with the form. As described above writeable regions e.g. spreadsheet cells can be graphically presented or marked to assist the user in determining allowed writeable regions when entering data.

At a user can enter data in the writeable region of the corresponding form. At once a user submits data to a writeable region the interface component is configured to translate from the coordinates of the associated data entry form into a corresponding relational form e.g. coordinates based in part on metadata retrieved from the serving component and metadata associated with the multi dimensional store component . In an embodiment a submission table includes the user s submitted data set which is compressed into a designated format and sent to the serving component or an associated component e.g. front end server or component and saved in an asynchronous queue. Thereafter the submission s status is updated as pending . A submission can include but is not limited to multi dimensional coordinates and the values that have to be written to those coordinates including annotations and line item details for the respective coordinates. In one embodiment the compression can be configured as a byte stream compression decompression process to alleviate the bandwidth load on the system. depict a data submission table and the table content respectively.

At asynchronous processing is initiated by the serving component . According to one embodiment the serving component processes asynchronous work items from the asynchronous queue. The serving component also decompresses and processes the submission data set. During processing a number of validation operations are performed by the serving component based on the metadata associated with the submission set. For example a validation operation may include verifying that data in a submission set is part of a writeable region by running system defined and or user provided validation rules on the serving component or other backend component s . The result of the validation operations can operate to validate the data and or raise exceptions with a number of invalid rows. Validation ensures that the submitted data is within the constraints supplied by both the system and the users. While processing the submitted data set the serving component can add and fill technical columns of various relational tables such columns may include AssignmentId LoadingControlId RuleId CreateDateTime ChangeDateTime etc. This ensures that the submission data table matches the backend storage of the associated fact table.

At the serving component performs security check and additional data validation operations on the submitted data. In one embodiment the submitted data is transferred to a temporary table in the relational data store. A number of security check and validation stored procedures e.g. storproc are called to perform the security check and data validation on the data stored in the temporary table. The serving component performs the security check using SQL data generated at to ensure that the user has permission to writeback data to the region e.g. the submitted tuples of the data store. The serving component also checks whether the submitted data conforms to certain business logic rules as part of the data validation operations.

At the serving component updates a number of fact tables associated with the user s data submission. If all validations are successful the data is transferred directly from the temporary tables to fact tables in the relational data store. Each fact table can include an index that contains as foreign keys the primary keys of related dimension tables and which contain the attributes of a number of fact records. depict an example of a fact table and table content respectively as stored in the relational data store. Also existing data for the same writeable regions and associated relational coordinates can be deleted from the fact table if an Overwrite flag is set. The serving component or other backend component s operate to perform additional processing operations to handle updating of multiple measures and deletion of measures based on a Delete  flag. This flag can be defined for each coordinate by the user during submission.

Once the fact tables are updated at annotations and line item details are processed by the serving component . Upon a successful security check at the submitted annotations and line item details can be inserted by the serving component into appropriate tables. At if the writeback to an associated partition of the relational data store was successful an associated partition ID is inserted into a dirty partitions table of the relational data store. The dirty partitions table enables the serving component to identify and process the particular partitions associated with the data submission thus allowing more efficient multi dimensional data or cube processing. The submission status is updated to WaitProcess .

At the serving component begins cube processing operations. As part of the cube processing operations an asynchronous Async task can be implemented at appropriate or desired intervals and the serving component can inspect the dirty partitions table and process any partitions that have become dirty from the prior cube processing operations. The submission status is updated as Submitted . Correspondingly the data is now refreshed in the cube. Thereafter other users querying the cube for the same data are able to view the recently submitted data. depicts a client application wherein a user has submitted data to a writeable region of a spreadsheet application and a result has been returned to the user as part of the execution of a number of business rules and cube processing operations.

While the system is shown to include a number of components it can include fewer or more components according to a desired functionality or implementation. For example the interface component can be configured as part of a client application that is a separate component in relation to the system . The system and its components can communicate via a wired wireless and or a combination of communication networks. Moreover the serving component can include various functionality and other components such as a front end functionality metadata management functionality line item functionality writeback functionality cube processing functionality security check functionality data validation functionality etc. The system can also include multiple clients and is not limited to any particular configuration wherein each client can include various functionality and other components. As further example the system can include a plurality of multi dimensional store components wherein each multi dimensional store component represents a particular cube.

As described herein embodiments are provided to secure portions of multi dimensional data for different users. Security definitions can be tailored for users based on one or more models dimensions hierarchies roles user role associations etc. In one embodiment read and or write permissions can be defined on the basis of read and or write access to certain dimension members of an associated model. The security definitions can be translated internally into multi dimensional and relational forms and used to perform security and validation checks on submitted data.

Cubes e.g. multi dimensional OLAP cubes are representative of multi dimensional data structures. A cube s structure can be defined by measures and dimensions which can be derived from tables. A cube schema includes a set of tables from which the measures and dimensions for a cube can be derived. The cube schema can include a number of fact tables and dimension tables which represent the measures and dimensions of an associated cube. A measure can be represented by a set of values associated with a fact table. A measure can represent the data of primary interest to an end user. Dimensions are a cube attribute that contains data of a similar type. Each dimension has a hierarchy of levels or categories of aggregated data.

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld tablet or other type of computer capable of executing one or more application programs. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM .

The computer further includes a mass storage device for storing an operating system application programs such as a performance management application and other program modules. The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments of the invention the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of input types including a keyboard mouse pen stylus finger and or other means. Similarly an input output controller may provide output to a display a printer or other type of output device. Additionally a touch screen can serve as an input and an output mechanism.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store application programs such as a word processing application a spreadsheet application e mail application drawing application etc.

It should be appreciated that various embodiments of the present invention can be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

