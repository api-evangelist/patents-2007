---

title: Utilizing a schema for documenting managed code
abstract: A schema is provided that supports documenting API elements that is flexible and captures current technologies as well as evolves without interfering or breaking the definitions of the existing elements. The schema utilizes a flexible and extensible element that can be used to define various elements of the APIs and can be extended to define new technology when it is introduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08316351&OS=08316351&RS=08316351
owner: Microsoft Corporation
number: 08316351
owner_city: Redmond
owner_country: US
publication_date: 20070507
---
The following compact disc submission includes two compact discs each having identical ASCII text files in the IBM PC machine format and are compatible for reading with MS DOS and MS WINDOWS operating systems. The computer program listing files submitted on the compact discs are incorporated herein by reference in their entirety as if set forth in full in this document for all purposes NAME SIZE KB CREATION DATE  internal.txt 4 KB Apr. 23 2007 base.txt 7 KB Apr. 23 2007 baseConditional.txt 6 KB Apr. 23 2007 block.txt 1 KB Apr. 23 2007 blockCommon.txt 4 KB Apr. 23 2007 blockSoftware.txt 2 KB Apr. 23 2007 conditionSet.txt 5 KB Apr. 23 2007 developer.txt 14 KB Apr. 23 2007 developerCommand.txt 15 KB Apr. 23 2007 developerManaged 27 KB Apr. 23 2007 developerReference 13 KB Apr. 23 2007 developerStructure 5 KB Apr.23 2007 developerXaml.txt 7 KB Apr. 23 2007 endUser.txt 3 KB Apr. 23 2007 faq.txt 4 KB Apr. 23 2007 glossary.txt 3 KB Apr. 23 2007 hierarchy.txt 10 KB Apr. 23 2007 inline.txt 8 KB Apr. 23 2007 inlineCommon.txt 10 KB Apr. 23 2007 inlineLinking.txt 9 KB Apr. 23 2007 inlineSoftware.txt 8 KB Apr. 23 2007 inlineUi.txt 7 KB Apr. 23 2007 ITPro.txt 2 KB Apr. 23 2007 Maml.txt 2 KB Apr. 23 2007 shellExecute.txt 3 KB Apr. 23 2007 space.txt 1 KB Apr. 23 2007 standardCodes.txt 5 KB Apr. 23 2007 structure.txt 6 KB Apr. 23 2007 structureGlossary.txt 5 KB Apr. 23 2007 structureList.txt 5 KB Apr. 23 2007 structureMedia.txt 2 KB Apr. 23 2007 structureProcedure.txt 2 KB Apr. 23 2007 structureTable.txt 6 KB Apr. 23 2007 structureTaskExecution.txt KB Apr. 23 2007 task.txt 22 KB Apr. 23 2007 troubleshooting.txt 4 KB Apr. 23 2007 xlink.txt 12 KB Apr. 23 2007 and further includes two compact discs each having identical ASCII text files in the IBM PC machine format and are compatible for reading with MS DOS and MS WINDOWS operating systems entitled schema.txt. file size 14 KB created on Sep. 20 2012.

Documentation for managed Application Programming Interfaces APIs is used for helping developers programming against these APIs. The documentation typically resembles the API element structures very closely. During a software development process these APIs evolve and introduce new technologies and elements that need to be captured in the documentation. These code changes during the development process however make it difficult to complete the documentation that accompanies the code since the documentation relates closely to the code.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

A schema is provided that supports documenting API elements such as API elements in managed code. The schema captures current technologies as well as allowing the technologies to evolve without interfering or breaking the definitions of the existing elements. The schema utilizes a flexible and extensible element that can be used to define various elements of the APIs and can be extended to define the new technology when it is introduced.

Referring now to the drawings in which like numerals represent like elements various embodiment will be described. In particular and the corresponding discussion are intended to provide a brief general description of a suitable computing environment in which embodiments may be implemented.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Distributed computing environiments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments will be described. The computer architecture shown in may be configured as a desktop or mobile computer and includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU .

A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system marked content file s managed code application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive the computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . The network connection may be wireless and or wired. The network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS VISTA operating system from MICROSOFT CORPORATION of Redmond Washington. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store one or more application programs .

Managed code runtime environment is configured to manage the execution of managed code . For example managed code runtime environment may stop CPU at any point during the execution of managed code and retrieve information specific to the current CPU instruction address. This information includes items such as runtime state that includes register and or stack memory contents. The managed code takes the form of an intermediate language and associated metadata that describes all of the entry points and the constructs exposed e.g. methods properties and their characteristics. For example among others the managed code may be programmed using a language such as C J VB .Net Jscript .Net and C . Before the managed code is executed the intermediate language is compiled into native executable code by the managed code runtime environment . The managed code runtime environment can perform many different tasks including inserting traps and garbage collection hooks exception handling type safety array bounds and index checking and the like.

Marked content file s include one or more content files which contain the content for the documentation for the managed code APIs along with semantic indications for selected elements.

Schema supports documenting API elements of managed code . The schema is directed at capturing current technologies as well as allowing the technologies to evolve without interfering or breaking the definitions of the existing elements. Schema utilizes a flexible and extensible element that can be used to define various elements of the APIs and can be extended to define the new technology when it is introduced.

The content transformation manager is operative to access the marked content file s and transform the semantically marked content to presentational content for display to the user.

The documentation content is authored by one or more content authors . Instead of describing how the content should be displayed in purely presentation terms the content author creates the content and describes the content in functional semantic terms. As such the content authors do not need to know how to code in a language which specifies how content should be presented. Rather an author defines the document content semantically.

The documentation for managed assemblies uses semantically marked file s that helps identify the distinct elements within the document. As the documentation for managed code assemblies tend to evolve during the development life cycle the schema provides an extensible element that is used to define various elements of the APIs. The semantically marked files follow a Markup Language specification. According to one embodiment the markup language is MICROSOFT s AML Microsoft AML or MAML . Generally the markup language is an XML based markup language that is directed at providing documentation such as online help which shifts the production of user assistance to the concept of structured authoring. The AML schema for documenting the managed APIs is flexible to allow for updates to the technology and resulting changes extensions to the schema.

A schema is utilized by the content author s to specify the documentation for the elements. In one embodiment an extensible markup language XML schema is used to author the content. The schema describes the purpose of certain items of the content. The schema can be used to specify a semantic description for all of the content or for a specific word or a character of one word. The schema may be extended to incorporate any new elements.

The following includes portions of a schema that includes additions to an AML schema for including managed reference content. For instance the schema may include authoring comments for types and members of an assembly authoring shared content integrate reflection information render content file to client and create content for not yet defined type and member definitions

According to one embodiment the schema defines an Application Programming Interface API page type . The API page type is a generic page type that supports a particular page type by extension. This page type contains the elements for a page type. The generic API Page type may be used as it is presented or can be extended for specific usage scenarios e.g. unmanaged ref content XML schema documentation web services documentation etc. .

According to one embodiment the API page type includes the following features. The features include a title an introduction a syntax a remarks Example Requirements and Related Link.

The title of the element is normally authored by UE authors. According to one embodiment the syntax is title acronym conditionalInline notLocalizable .

The introduction section is authored introduction of the type or member. This may contain inline links to types or members company name acronyms tokens phrases and the like. The section may also contain links to external pages. The links to types or members are not explicitly authored and are resolved post comment authoring. According to one embodiment the syntax is as follows introduction para alert quote parameterizedBlock code codeReference computerOutput list alertSet definitionTable table procedure example glossaryList .

The syntax supports any free flowing or structured data. This element may be extended for specific usage scenarios. Extensions related to syntax elements are covered below detailing managed reference specific extensions for the syntax element. This is an abstract element of type any .

The remarks are authored and may contain references to inline text elements such as type or method names acronyms glossary entries external navigation links and the like. According to one embodiment the syntax is as follows remarks para alert quote parameterizedBlock code codeReference computerOutput list alertSet definitionTable table procedure example glossaryList .

The examples allow authors to provide one or more examples tagged by language. The examples are partially authored and are partially referenced from the shared content. They may contain one or more examples for a given API type. The following is an exemplary syntax 

The requirements element defines the requirements of entity being described. The following is an exemplary syntax for the requirements element. requirements

The related links describes a collection of links typically used for the Related Topics section of a document. The purpose of this element is to provide links to topics that may be of further interest to the user.

The following are examples usage for extension of API page type. Some examples of how the syntax element would be extended for specific managed ref types include 

Another example for showing how future changes can be incorporated without creating invalid AML files is also given below. For example with .NET 3.0 attached properties are new to the Class definitions. Therefore a new element called attachedProperty is created and the classSyntaxType is extended. This helps to ensure that the class syntax schema accommodates without invaliding the existing AML documents describing class types. 

If there is a new type entity then supporting this new type entity is simply extending the syntax element as shown in above example for class type with the desired structure. This helps to ensure that the new type definition is supported without invalidating against AML schema. The new revised type definition can then be incorporated into next version of AML.

See ASCII text file entitled schema.txt on compact disc as referenced above entitled Reference to Computer Program Listing Appendix. 

Once the semantic authoring of the content has been completed it is transformed and displayed to output by content transform manager . Before the data is output the content transform manager may access a definition not shown that defines how the semantic elements are to be rendered. For example the definition may include an extensible style sheet language transforms XSLT .

Referring now to an illustrative process for using a schema to document managed code will be described.

When reading the discussion of the routines presented herein it should be appreciated that the logical operations of various embodiments are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly the logical operations illustrated and making up the embodiments described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

After a start operation the process flows to operation where one or more new element structures may be defined for the schema. The new element structures may take any form. Since there may be any number of new type and member definitions that are introduced at a particular time and not yet made public the baseline AML schema does not include definitions for these new types. The extensions allow the structure of the content to be defined such that the documentation is valid against the schema. This process may be repeated any number of times since the extensions may change multiple times before the structure is finalized.

Moving to operation the new element structures are imported within the schema such that they may be used by the content author s .

Flowing to operation the content to be included within the documentation for the managed code APIs. The content may be included within a newly defined element may be an extension to an element and or it may be included within a predefined element or type such as the API page type defined above.

Moving to operation the content is transformed according to the defined definitions. Once the semantic authoring of the content has been completed in operation it is transformed and may be displayed.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

