---

title: Printer user interface redirection over a terminal services session
abstract: User interface (“UI”) redirection for a local device, such as a printer that is operatively coupled to a client, is provided by an arrangement in which a dummy driver is installed on the terminal server. When an application on the terminal server makes a call to show a UI, the dummy driver redirects the call to a process operating on the client that exposes the specific UI associated with the local device. User input to the UI indicative of preferences and/or other user-selected parameters is recorded and passed to the terminal server through the dummy driver and reported to the calling application. In an illustrative example, the terminal server and client communicate over a virtual channel using a remote desktop protocol in order to redirect print jobs to a local printer that is coupled to the client either directly or over a network such as a local area network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949741&OS=07949741&RS=07949741
owner: Microsoft Corporation
number: 07949741
owner_city: Redmond
owner_country: US
publication_date: 20070220
---
Printer redirection is a technique that works to route printing jobs from a terminal server to printers attached to local computers typically called client computers . Printer redirection may typically be performed when the local printer uses a matching printer driver that is installed on the terminal server. When a user logs on to a session on the terminal server one or more of the local printers attached to the client computers is accessed and a local queue is created on the terminal server. The user may thus print documents locally even though an application creating the document such as a spreadsheet or word processor is hosted remotely on the terminal server.

Current printer redirection techniques generally require that an exact matching driver for the printer be installed on both the terminal server and client side. This requirement may pose several major problems. For example administrators must ensure that a variety of different printer drivers are installed on the terminal server which can be time consuming and complex. In some cases where the terminal server and client computer use different versions of an operating system a matching printer driver for the client operating system may not be installable on the terminal server. Or the printer manufacturer may not have developed a printer driver for both operating system versions.

While a generic printer driver may be installed on the terminal server side to avoid some of the problems with installing matching drivers such generic drivers are not typically capable of exposing a complete printing and document preferences interface associated with a particular client printer to the user during printer redirection. Such printing preferences include for example preferences associated with page layout and orientation paper size single page or duplex printing scaling and physical print characteristics e.g. paper tray selection image quality resolution color etc. . Thus an inability to access a user interface for native printer preferences may present a shortcoming that can degrade the user s experience during a terminal server session.

This Background is provided to introduce a brief context for the Summary and Detailed Description that follows. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.

User interface UI redirection for a local device such as a printer that is operatively coupled to a client is provided by an arrangement in which a dummy driver is installed on the terminal server. When an application on the terminal server makes a call to show a UI the dummy driver redirects the call to a process operating on the client that exposes a specific UI associated with the local device. User input to the UI indicative of preferences and or other user selected parameters is recorded and then passed to the terminal server through the dummy driver. The preferences and parameters are reported in turn to the calling application.

In various illustrative examples the terminal server and client communicate over a virtual channel using a remote desktop protocol in order to redirect print jobs to a local printer that is coupled to the client either directly or over a network such as a local area network. A dummy printer driver on the terminal server redirects any call to the client for processing of the print job including the display of local printer specific UI pages and returns user input into the UI back to the calling application on the terminal server. An XPS format XML Paper Specification where XML is an acronym for eXtensible Markup Language is used for the redirected print jobs between the terminal server and the client. The client prints the XPS documents on the local printer using the user specified parameters.

Advantageously the present arrangement enables a rich client side printer UI to be exposed to the user. The UI enables a full suite of printing and document preferences that are specific to the local printer to be utilized in a terminal server session.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Terminal services provide functionality similar to a terminal based centralized host or mainframe environment in which multiple terminals connect to a host computer. Each terminal provides a conduit for input and output between a user and the host computer. A user can log on at a terminal and then run applications on the host computer accessing files databases network resources and so on. Each terminal session is independent with the host operating system managing multiple users contending for shared resources.

The primary difference between terminal services and the traditional mainframe environment is that the terminals in a mainframe environment only provide character based input and output. A remote desktop client or emulator provides a complete graphical user interface including a Microsoft Windows operating system desktop and support for a variety of input devices such as a keyboard and mouse.

In the terminal services environment an application runs entirely on the terminal server. The remote desktop client performs no local execution of application software. The server transmits the graphical user interface to the client. The client transmits the user s input back to the server.

Turning now to the figures where like reference numerals indicate like elements is a diagram of an illustrative architecture supporting a terminal services session between a terminal server and a client computer . Architecture is divided into a client side and a server side respectively as indicated by reference numerals and . Terminal server on the server side operatively communicates with the client computer on the client side using a terminal services protocol . In this illustrative example the terminal services protocol is arranged to use a Remote Desktop Protocol RDP that typically operates over a TCP IP Transmission Control Protocol Internet Protocol connection between the client computer and terminal server .

A local printer is operatively coupled to the client computer via line which represents either a direct physical connection between the client computer and local printer or a connection through a network such as a local area network. While this illustrative example shows a printer it is emphasized that other types of devices may be utilized with the present redirection arrangement. For example scanners storage devices media rendering devices e.g. music and video players and other common peripheral devices are usable where user selected preferences or parameters are desired to be specified. In addition such devices may be arranged to be compatible with Universal Plug and Play UPnP protocols.

Dummy printer driver is arranged for reporting and managing printer properties capabilities preferences and other parameters. Typically the dummy printer driver is loaded by a print spooler as well as by any application running on terminal server that is configured for printing.

On the client side a terminal services client operates on client computer . The terminal services client operates as the interface to the terminal server during a terminal services session. A client UI protocol handler is coupled to the terminal services client as shown in . In some applications of printer redirection the client UI protocol handler may be arranged as a plug in module to the terminal services client .

The client UI protocol handler is arranged to interface with a client side printer driver which is printer specific and associated with printer . Client side printer driver includes two components a printer interface library and a printer graphics library . As with the server side dummy printer driver in this illustrative example printer interface library and printer graphics library are arranged as DLLs.

The client UI protocol handler is the counterpart to the printer interface library in the server side dummy printer driver and thus functions with the printer interface library in a coordinated manner to redirect printer properties preferences and data describing printer capabilities. In an optional configuration using the Microsoft Longhorn Windows Server printer driver model the client UI protocol handler also handles negotiation of print tickets. Such print tickets specify user intent and device configuration information. The client UI protocol handler is further arranged to receive the printer output generated by the redirected printer commands which it feeds to a local printer queue either directly or through a converter depending on the particular format of the printer output.

The server side dummy printer driver communicates to the client UI protocol handler using a UI redirection protocol . UI redirection protocol may be arranged using a virtual channel arrangement that is supported under the RDP protocol.

An application e.g. a word processor or spreadsheet running on the terminal server on the server side makes an API call for document properties as indicated by reference numeral which the printer interface library redirects to the UI protocol handler . In this illustrative example document properties are handled under the Microsoft Windows operating system data structure called DEVMODE which holds information about the initialization and environment of a printer or other device. On the client side responsively to the document properties call the UI protocol handler calls into the printer interface library to expose a printer specific UI to the terminal services client operating on client computer . As noted above the printer specific UI is associated with the local printer that is operatively coupled to the client computer . An illustrative printer specific UI is shown in .

The printer graphics library is invoked to convert the GDI print job into an XPS format in this illustrative example. Alternatively a GDI print path is used without the conversion to XPS. Other document formats such as Adobe Postscript PDF Portable Document Format and PCL Printer Control Language are also alternatively usable depending on the requirements of a specific application. The XPS formatted print job as indicated by reference numeral is spooled using redirection port disposed in terminal server to a client printer redirection library .

Client printer redirection library is coupled to the terminal services client as shown. Client printer redirection library is arranged to enumerate print queues on the client side and forward details to the terminal services TS redirector service not shown on the server side . The client printer redirection library receives the XPS formatted print job and invokes an XPS to GDI conversion wrapper library which provides an interface to the client printer redirection library to thereby print an XPS document to a given print queue. In some applications of printer redirection the client printer redirection library is arranged as a plug in module to the terminal services client .

The wrapper library functions as a wrapper around a set of managed WPF Windows Presentation Format library classes used to convert XPS back into GDI as may be necessary so that GDI based printers can render the print job. The wrapper library provides GDI API function calls as indicated by reference numeral to the printer graphics library in the client side printer driver . The printer graphics library generates raw printer data which is transmitted to the printer in order to print the print job.

Method starts at block . At block a user at the terminal services client logs on. At block the terminal services client enumerates the printers and sends data to a TS redirector service on the server side .

At block the client printer redirection library enumerates the print queues installed on the client computer and gathers the following data which is sent to the terminal server 1 print queue name 2 print queue driver details and 3 the capability for the terminal services client to handle XPS formatted documents.

The TS redirector service creates dummy print queues at block . The TS redirector service checks the availability of a printer driver that is installed on the terminal server that matches the local printer . If a matching printer driver is unavailable then the server side dummy printer driver is utilized. In each case the TS redirector service requests the spooler to create print queues using the appropriate printer driver.

At block the spooler loads the printer driver and creates print queues. In the example that follows it is assumed that the server side dummy printer driver is loaded and utilized. The printer interface library then queries the TS redirector service to establish its identity as shown at block . At block the printer interface library establishes a dynamic virtual channel connection to the client UI protocol handler on the client side . When the printer interface library is called by the spooler to query its capabilities the printer interface library forwards all these requests to the client UI protocol handler and reports results back to the spooler as shown at block .

The application calls document properties to enable user selection of printer preferences at block . This results as indicated at block in a call to the printer interface library which is redirected over the UI redirection protocol to the client UI protocol handler on the client side . At block the client UI protocol handler calls into the client side printer driver . At block a local printer specific UI is displayed on the terminal services client . At block the user selects printer preferences and device parameters using the UI. At block the selected document properties are updated using the DEVMODE structure and reported back to the server side . The printer interface library reports the updated DEVMODE back to the calling application .

At block the application makes printer function calls e.g. create DC as required to print a document. At block the printer graphics library then converts the GDI directives into an XPS format embeds the DEVMODE structure into the document and sends the document over the redirected printer port . At block the client printer redirection library receives the XPS formatted document. It prints the XPS formatted document by invoking the XPS to GDI conversion wrapper library as indicated by block . Method ends at block .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

