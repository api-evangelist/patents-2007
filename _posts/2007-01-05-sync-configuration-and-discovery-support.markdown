---

title: Sync configuration and discovery support
abstract: Various illustrative examples of a synchronization mechanism are described. A synchronization schema may be adopted to allow an application to save configuration details for a synchronization operation in a format which may easily be discovered by other applications without the need of a registration/de-registration mechanism. The synchronization mechanism may be executed in response to user entered parameters specifying the type and other characteristics of operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07548923&OS=07548923&RS=07548923
owner: Microsoft Corporation
number: 07548923
owner_city: Redmond
owner_country: US
publication_date: 20070105
---
Aspects of the present invention relate to a user interface and associated functionality in a computer system for creating and maintaining relationships between data objects stored on the system.

Computer systems in general are used to store and maintain programs and data. A computer operates by executing a program or a sequence of instructions to carry out one or more tasks. Tasks when executed frequently serve to modify the stored data. Examples of modifications include altering the data value moving data from one storage location in the computer to another or deleting the data entirely from the system.

Data manipulation and management is a relatively easy task when isolated to a single computing platform. In the instance of a single computer an executable program or application only needs to obtain write access rights to the data of interest in order to preserve modifications brought about as a result of execution. Advancements in technology particularly the advent of networked computing brought about a multitude of new challenges as it relates to data maintenance. Networked computing topologies provide an efficient basis to enable users to access and share vast amounts of data but this enhancement is accompanied by added complexity with respect to ensuring that data remains consistent between the terminals that reside on the network.

In an effort to resolve the issue of potential data inconsistency software has been engineered to provide for a synchronization process wherein discrepancies or modifications between data objects are identified and ultimately reconciled. Prior methods of synchronization have entailed requiring an application to register its configuration information with a central service in order to allow other applications to invoke it. Such methods prove to be burdensome however because they require the allocation and maintenance of resources to serve as a centralized store for such registration information. Furthermore when synchronization is no longer required the additional step of de registration is required or the registration entry will continue to consume resources within the registry. As such a system and method are desired that enable saving the configuration details for a synchronization operation without the need of a registration mechanism. Furthermore it is desirable that other applications will easily be able to discover the configuration details associated with an application.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter and instead presents various illustrative aspects described herein.

In light of the foregoing aspects of the present invention are directed to a schema that allows an application to save the configuration details for a synchronization operation in a format that may easily be discovered by other applications. In accordance with at least one aspect of the present invention a means of enabling synchronization without requiring an application to register configuration information with a centralized service is provided.

Another aspect of the present invention provides a means of establishing a relationship between application s and or data object s that require synchronization. Still another aspect of the present invention provides synchronization based on the properties of the subject application s and or data object s that require synchronization.

In the following description of various illustrative examples reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various examples in which features may be practiced. It is to be understood that other examples may be utilized and structural and functional modifications may be made.

Aspects are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers mobile phones portable and hand held devices such as personal digital assistants PDAs tablet PCs or laptop PCs multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an illustrative system for implementing one or more aspects of the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Advanced Graphics Port AGP bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media may be any available media that may be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may include computer storage media and communication media. Computer storage media includes both volatile and nonvolatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include electronic pen e.g. a stylus a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures not shown such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. For example computer may be connected to a mobile terminal not shown which is configured to send and receive transmissions based on the Bluetooth standard through a specific Bluetooth module. Additionally computer may also be configured to receive decode and process transmissions with a remote computer or mobile terminal through an FM AM radio receiver wireless local area network WLAN transceiver and or telecommunications transceiver.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One or more aspects of the invention may be embodied in computer executable instructions i.e. software such as in a notification manager software object routine or function collectively referred to herein as a notification manager stored in system memory or non volatile memory as application programs program modules and or program data . The software may alternatively be stored remotely such as on remote computer with application programs . Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The computer executable instructions may be stored on a computer readable medium such as a hard disk optical disk removable storage media solid state memory RAM etc. As will be appreciated by one of skill in the art the functionality of the program modules may be combined or distributed as desired in various aspects. In addition the functionality may be embodied in whole or in part in firmware or hardware equivalents such as integrated circuits field programmable gate arrays FPGA and the like.

Aspects of the present invention are described herein with reference to the Windows Future Storage WinFS application as manufactured by Microsoft Corporation of Redmond Wash. a component of the Windows operating system as manufactured by Microsoft Corporation running on a personal computer PC or equivalent platform for illustrative purposes only. It should be understood by those skilled in the art that one or more other operating systems may be employed.

Many file systems found on common operating systems store files and objects as a stream of bytes and have little or no information about the data stored in the files. Such systems are prohibitive in the sense that they limit organization of the files to folders and file names. More recent approaches have attempted to incorporate attributes commonly referred to as metadata to describe the contents of the file. While this more recent approach has facilitated searching more complex approaches of aggregating data from two or more applications are still not supported. WinFS solves this problem by using attributes to describe both the data in files and the relation of that data with other data.

WinFS stores data in virtual locations commonly termed stores. The utilization of these stores effectively eliminates the need for the more classical organization of a folder hierarchy comprised of folders and corresponding subfolders. WinFS provides a unified storage but does not require a specific format with respect to the data or objects to be stored. Instead it allows data to be written in application specific formats. In order to facilitate retrieval and searching operations applications provide schema or effective mapping mechanisms that enable interpretation of a file format. In this manner an application may read or write data to an object native to another application having its own distinct methods of formatting data. The incorporation of schema allows for the efficient sharing of data between two or more computers running different applications. This is particularly advantageous when the number of computers in a system is large or where support for a particular computer or application has been discontinued. Thus it is desirable to provide a schema that allows application s to save configuration details for a synchronization operation in a format which may be easily discovered by other applications without the need of a registration deregistration mechanism.

Partnership entity derived from link is used to capture the data necessary to support the notion of a partnership. A partnership may be described as a synchronization relation between a local repository such as a WinFS repository and a secondary data source. Generally stated a partnership is a framework for synchronizing data items or objects between two or more data sources. Any place where data is kept one may create a partnership to synchronize data with one s local computer.

Partnership entity may include various attributes in order to facilitate appropriate operation. A Name attribute may be used to capture the name of the partnership. A Profile attribute may be used to capture the configuration profile for a secondary schema which may be termed herein as a SyncAdapter which is used to store the information specific to a particular method of communicating with a remote server. The configuration profile is ultimately made available to the SyncAdapter to facilitate SyncAdapter initialization. A Comments attribute may be used to store one or more comments related to the partnership. A Source attribute may represent the relationship between the partnership and replica . The partnership may be thought of as an extension to replica providing additional information required in order to facilitate synchronization operations. A Target attribute may represent the relationship between the partnership and an entity such as SyncAdapterInfo entity .

SyncAdapterInfo entity derived from item may be used to capture details of one or more secondary schema that are configured for use by a synchronization manager. Entity acts as a collection point for the information regarding the secondary schema implementations that have been installed. SyncAdapterInfo entity may include information related to configuration of a secondary schema such as what software e.g. class to invoke to create instances of partnerships that use that particular type of secondary schema. In the example shown in SyncAdapterInfo entity may include information providing an icon to facilitate user operation. Alternative examples may elect to expand the range of information contained in SyncAdapterInfo entity without departing from the scope of the present invention.

Business logic layer serves to add any additional logic or any higher level abstractions that may be required for presentation layer . Business logic layer may include new services or objects as well as new events or callbacks depending on the requirements of the area. Business logic layer provides a veneer over persistence layer connecting the entities together and performing any extra logic required when creating partnerships or beginning synchronization operations. Business logic layer also provides for exception handling routines. Exceptions are consolidated into higher level exceptions and passed to presentation layer for consumption.

Persistence layer may include a core WinFS application programming interface API set. As should be understood by those skilled in the art the API is the interface that allows requests for services to be made of it by other computer programs and or to allow data to be exchanged. The API achieves this by providing access to functions without requiring access to the source code of the functions or libraries or requiring a detailed understanding of the functions internal workings.

SyncManager class also operates within a business logic layer and initiates or cancels the synchronization operations that take place in the system. SyncManager class shields the presentation layer from having direct knowledge of how the synchronization operations are taking place. As shown SyncManager class includes a method InitiateSyncOperation that may be used to initiate a synchronization operation. A method such as CancelSyncOperation may be used to cancel any synchronization operations that are in progress. A method such as RegisterSyncListeners may be called to register listeners to synchronization progress as it occurs.

PartnershipLine class is a runtime object used by the user interface to surface the necessary properties in a single form to facilitate ease in data binding within the user interface. In the illustrative example PartnershipLine class may include a similarly named method to achieve this functionality. A SyncRequest may be used to store synchronization operation requests originating from SyncManager class .

As will be understood by one of ordinary skill in the art the above classes and methods are provided by way of example and not limitation. Functionality resident in the various classes and or methods may be combined or aggregated without departing from the scope of invention. Similarly classes and or methods may be added or removed again without departing from the scope of the invention.

For example one type of synchronization may correspond to Send Only wherein changes made to the local replica are sent to the remote replica but changes initiated in the remote replica are not sent to the local replica. Conversely a Receive Only type of synchronization would be characterized by changes made to the remote replica being received by the local replica but changes initiated by the local replica not being sent to the remote replica. A Send and Receive type of synchronization would enable synchronization to be initiated by a change in either replica. A fourth option may be presented to allow a user to Disable synchronization this may be advantageous in situations where the user wants to maintain independence between data objects. For example such independence may be desired where a user is attempting to formulate different versions of a data object and will later choose which version is the best. The user may thereafter elect an active synchronization type in order to synchronize to the best version. It should be noted that the names of the various terms used herein are provided to facilitate description alternative names may be used without departing from the scope of the invention.

It should be noted that the previous figures were presented by way of example and not limitation. Alternative examples for the various windows are available and are well within the scope of the present invention. For example the relative locations of the various fields within the given windows may be modified without loss of generality. Furthermore the fields provided in the various windows may have associated with them one or more default values wherein if a user fails to make a selection a corresponding default value will be assumed. The user entry may be conducted via a combination of pushbutton selection i.e. Browse . . . buttons or dropdown menus e.g. Sync Type keyboard text entry electronic inking or alternative methods of entry as have been established in the computer and electronic arts. Fields functionality may also be extended without loss of generality. For example a user may elect to establish a partnership based on metadata associated with one or more data objects the metadata serving to indicate one or more properties associated with the data objects. In this manner a user may form a partnership on the basis of properties associated with a given object above and beyond the name of the object itself.

As it pertains to the synchronization of the local and one or more remote replica with particular specificity to Send and Receive type of synchronization there may exist at various points in time a conflict between the local replica and one or more remote replica. Various resolution schemes may be adopted to respond to such conflict. For example one such scheme might entail synchronizing to the latest modification. Such a scheme would likely incorporate a time stamping feature in order to establish the latest occurring alteration. Another scheme might allow the replica to be ranked on a priority basis thereby giving preference to modifications originating from the highest weighted replica.

In response to user selections one or more error and or status messages may be conveyed via the user display in order to communicate information related to initiated steps or operations. The breadth of the messages may range from a relatively high level pass fail status conveyance down to messages providing details that would instruct a user as to how to take corrective action if necessary. The messages may be presented to the user simultaneously or the messages may be presented in a sequential fashion thereby encouraging a user to iteratively step through the series in a systematic manner.

Alternative examples may elect to incorporate extended user interface components that would enable one who wrote custom secondary schema to define one s own user interface elements. This would allow a user to tailor user interface components to a form suitable for one s specific application. Furthermore a secondary schema or various aspects of a secondary schema may be able to be reused in one or more partnerships. Under such a scenario a user library may effectively be established thereby promoting reuse amongst the various entities.

Another aspect of the present invention may incorporate additional attributes with respect to a partnership so that synchronization is conducted on a more selective basis. For example the partnership may be setup so that synchronization conducts itself automatically and or at a periodic rate e.g. once every hour once every day once a week once a month etc. . Alternatively the partnership may be setup so that synchronization only executes upon a manual request to do so. In yet another example the partnership may be setup to incorporate elements of manual and automatic synchronization. Furthermore a partnership may establish selective synchronization on the basis of whether the partnership is visible to the rest of the system. For example if a partnership is not visible to the system or a user it may not be necessary to engage in a synchronization operation for a defined time period.

In accordance with another aspect of the present invention entry into a partnership may have restrictions incorporated into it. For example a property may be associated with a given object or partnership that restricts or allows membership into a given partnership and defines the access rights to be provided upon joining. Whether an object or partnership may be found may also be conditioned on one or more parameters. For privacy reasons there may be an incentive to restrict access with respect to discovering whether a given object or partnership exists.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not so limited. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

