---

title: Conceptual configuration modeling for application program integration
abstract: First and second applications having disparate concrete configuration models are integrated into a unified abstract model wherein configuration elements and associated element values are used to control configurable functions of the first and second application programs, respectively, and wherein the second configuration element has a similar configuration function as the first configuration element; using a first equivalence definition reflecting a functional relationship between the first application configuration element and an abstract model configuration element having the similar configuration function, wherein the abstract model configuration is application-independent and platform-independent; using a second equivalence definition reflecting a functional relationship between the second application program configuration element and the abstract model configuration element; and producing and associating a second configuration element value with the second application configuration element wherein the second application program is automatically configured according to the second concrete application configuration model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774289&OS=07774289&RS=07774289
owner: International Business Machines Corporation
number: 07774289
owner_city: Armonk
owner_country: US
publication_date: 20070103
---
U.S. patent application Ser. No. 11 340 446 filed Jan. 26 2006 by Chris Aniszczyk et al. is hereby incorporation by reference in its entirety.

The present invention relates generally to an improved data processing system and in particular to a method for reducing implementation time for product level integration of related computer program products to yield end to end solutions.

As computer systems become increasingly complex solutions rely more and more on multiple application programs being integrated to each other to achieve a complete functionality needed by a user or owner. Each of these application programs themselves can be quite complex.

The application programs are usually developed separately from each other such that terminology and user interface details such as where options are located within menus what an option is called etc. are different from each other. As such domain experts for each application program to be integrated within an overall solution are needed in order to effectively implement the solution. Even products from the same vendor or supplier cannot be assumed to use similar user interface UI concepts configuration schemes and terminology because often times the products were originally developed for different market segments thereby driving differences the products were acquired through corporate merger or product licensing etc. Thus it cannot be assumed that an expert on a certain brand and model of database would naturally be familiar and efficient with using another database or with using another non database program from the same vendor e.g. same brand .

This means that many programmer experts are needed to deploy a single multi application solution. The ability to achieve efficient product level integration of related but disparate application program products is a powerful enabler of marketing and technology to provide an end to end solution to client needs.

However with the exception of the rare cases where related products are designed and developed in conjunction with the intent of integrated use cases this integration can be a costly and daunting task. For mature products integration at the product development level would often require a complete re design and rewrite of at least one if not both of the products to be integrated.

Where products cannot integrate to be configured and executed as one current solutions involve manually configuring the products separately using product specific user interfaces and terminology for each so that the products may be configured to connect.

Drawbacks of such parallel but disjoint configuration of related products are three fold i a domain expert is required for each of the applications with intimate knowledge of the terminology data model and user interface of that application ii because each is configured separately total resource cost of configuration rises in relation to the number and complexity of each application iii validation and integration test must be particularly thorough to ensure a common goal for configuration in spite of different domain languages terminology and user interfaces.

Embodiments of the present invention integrate first and second applications having disparate concrete configuration models into a unified abstract model wherein configuration elements and associated element values are used to control configurable functions of the first and second application programs respectively and wherein the second configuration element has a similar configuration function as the first configuration element by using a first equivalence definition reflecting a functional relationship between the first application configuration element and an abstract model configuration element having the similar configuration function wherein the abstract model configuration is application independent and platform independent using a second equivalence definition reflecting a functional relationship between the second application program configuration element and the abstract model configuration element and producing and associating a second configuration element value with the second application configuration element wherein the second application program is automatically configured according to the second concrete application configuration model.

The inventors of the present invention have recognized a problem unaddressed in the art regarding integration of application programs into a computer based solution wherein the application programs utilize disparate concrete configuration and user interface models thereby traditionally requiring multiple domain experts for multiple application configurations. The present invention resolves and alleviates these requirements allowing end to end integration of such application programs with considerably less administrator expertise level for each of the individual application programs within the solution.

Processes methods and systems according to the present invention map configuration elements of related but distinct applications to a higher level configuration model for the purpose of integrating the applications. With this higher level configuration model a deployment engineer may model the configuration of the larger system. Then at the time of configuration the more abstract data model is translated through mapping rules and equivalence definitions and each application is automatically configured to the deepest extent expressible in original model in its domain specific language.

Complex cases are conceivable where mapping is difficult or the development of mapping rules is not feasible however in many cases with related applications such as those in the Tivoli Security Pillar the similarity is much greater than the difference and automated translation schemes are plausible.

Using this invention multiple applications may be configured under the covers of a single user interface and configuration model to integrate as seamlessly as possible.

For the remainder of this disclosure we will refer to configuration models as having a degree of being concrete or abstract . A strictly concrete configuration model is a model in which the user interface terminology and configuration elements follow naming conventions range definitions option identifiers etc. which are compatible with a machine implemented language such as a particular application program without further translation or interpretation. For example a concrete configuration element for an enterprise security product to allow a user to change a password could be called param A . A deployment engineer unfamiliar with this application program and its domain could not determine from such a configuration element what it controls or what its allowed settings are simply from the configuration element name. If the application program utilized a text file to contain these configuration elements for example this configuration element may look something like 

where 1 is defined to allow the user to change his or her own password. Therefore to correctly install this application and configuration element one would need a high level of domain expertise with the application program including all of the user interface models e.g. where things are located in each menu file etc. and all naming conventions for configuration elements.

In contrast a abstract configuration model is one in which the configuration elements are not necessarily specific to any particular application program are application independent and or platform independent. A typical abstract configuration model also exists a high degree of user friendliness.

So in an abstract configuration model the previous example of a password change permission configuration element would be called user permitted to change own password and the allowable options would be yes or no . An example line in a configuration file for such an abstract system configuration may appear as 

As shown in this simple set of contrasting examples abstract models require much less knowledge of the specifics of a particular application and thus are preferable in performing integration of multiple application programs. However generally speaking independently developed application programs even those provided by the same vendor rarely use such abstract configuration models but instead use much more concrete configuration models. In practice each actual application program utilizes a higher or lower degree of concrete configuration.

Turning to a simplified diagram showing two application programs in a relationship with an abstract configuration between which specific configuration elements native to each application program respectively are shared. In this arrangement the application programs are assumed to implement configuration models which are more concrete than that of the abstract configuration and it is further assumed that there is a degree of correlation between the configuration elements in meaning functionality interpretation or impact between the application programs e.g. they share many common needs for configuration input such as user name user address etc. but require input in different formats .

Turning to a more realistic hierarchical relationship of configuration models is shown having multiple layers of models in which each model is more or less concrete . In this arrangement application programs are shown as having the most concrete configuration models while intermediate configuration models are more abstract in nature for a group of functionally related application programs and where a solution level abstract configuration model provides and even higher level of conceptualized configuration for the entire solution across all types or domains of applications. In this example security application are configured through a security policy abstract configuration . This is achievable because although the concrete configuration models of the applications themselves use much different terminology or user interfaces they apply to a common domain of functionality or work flow e.g. enterprise security in this example and thus much of the needed information to configure each application is similar e.g. user names user roles user permissions .

Further in this example database application programs are configured through a database abstract configuration model . Similarly to the relationship between the security applications these database applications have disparate concrete configuration models but share much of the same needed information to complete a configuration. And likewise other types of applications can be joined through an abstract configuration model such as one which configures all payment transacting applications . provides an alternative organization in which application programs are grouped by vendor or supplier due to their configuration model styles being similar.

However the intermediate level of abstract configuration model is still somewhat domain specific such as vendor style specific or application function specific. The payment transacting abstract configuration model for example still requires some domain expertise in the field of electronic payment processing even though specific knowledge of specific payment processing applications is not needed. So in order to complete an end to end solution integration several domain experts would be needed. For example in a configuration parameter which controls a maximum customer last name value might be called maxnam1length for the EFT application a similar configuration element for the Notes application might be first name length and a similar configuration element for the DB2 field might be name first string length . In a first level of abstraction for the database applications a relatively more abstract equivalent element name for first name length and name first string length could be database customer first name field length . In a second level of abstraction for the solution level configuration the database somewhat abstract element database customer first name field length and the concrete EFT field maxnam1length could be defined as a relatively more abstract field of solution allowable customer first name length .

To this end the present invention provides for an extensible multiple layer configuration model hierarchy which allows successively higher layers of abstract configuration all the way to a solution level abstract configuration . At this level the deployment engineer must have expertise in the mission or overall objective of the solution such as providing an online web store with integrated customer account management but needs little if any expertise in the sub domains e.g. payment transacting security policy etc. and even less expertise in application specific configuration e.g. DB2 configuration expertise or electronic funds transfer configuration . This is achieved by the unique combination of rule based logic and equivalence definitions which can be applied at any level to make any two more relatively concrete configuration models configurable through a relatively abstract model. In this manner the invention can be used at several layers each layer providing for incrementally more abstract configuration above the previous layer.

To further explain implementation and use of the invention the remainder of this disclosure will use two security policy tools as examples of application programs which may be configured through an abstract configuration model even though each application program implements a concrete configuration model. It will be understood by those skilled in the art that these are merely examples of applications to which the invention may be applied and that the invention may be used to conceptually configure a wide variety of other abstract models as well as a wide variety of other application programs.

IBM Tivoli Identity Manager TIM and IBM Tivoli Access Manager TAM are two security policy related products that are not integrated at the time of the development but often are deployed together within an end to end solution. Since both applications are concerned with the resource access control of users the conceptual overlap is clear. However the terminology and user interface differences between their concrete configuration models lead them to be configured separately often with some confusion associated with integration at deployment.

Using this invention an abstract configuration modeling layer is created in which the higher level security configuration can be specified in a more conceptual manner without specificity of the actual configuration element names and options of the underlying TAM and TIM applications.

The individual product concrete configurations are then derived using configuration object mapping rules and finally exported to the applications to automatically achieve a configuration.

For example as illustrated in the notions of a TAM group object having multiple member users and the notions of a TIM role object with multiple users assigned to the role are conceptually equivalent though differing in their concrete implementation. Similarly a TAM controlled resource can be mapped to the equivalent combination of a TIM service and a TIM service profile . These examples demonstrate substitution mappings a common form of mapping although more complex mappings can also be described.

To build these mappings a common domain relevant language e.g. a security language in this example is described through rules which is then used to translate configurations in both directions from concrete product specific configuration models to abstract configuration models and vice versa.

Turning to an example of the mapping between equivalent configuration elements is shown . In this case TIM and TAM are setup together. There is a chance that the people in the group and roles in the different products have varying access permission. It could be the case that TIM gives the people access to the server which is correct but TAM isn t setup properly and disables access to specific resources needed by people on the resource.

To solve this problem the invention maps the configuration elements which are equivalent between the two concrete configuration models to an abstract configuration model . In this case the invention creates a new conceptually mapped group that represents a TIM Role and TAM Group through equivalency. The properties of each are mapped to the analogous properties in the other object if there are any .

There can be other possible types of mappings but for this case everything is simplified. In the end the invention produces a new abstract group object with new conceptually defined properties such as 

With this information the invention creates the proper objects in the application native concrete configuration models of TIM and TAM which ensures they share the necessary configuration needed to operate together correctly.

It should also be noted that some application programs have alternate user interface or control modes through which they emulate user interfaces of competitor products. For example Corel s WordPerfect wordprocessor application provides an option in which the user interface can emulate the user interface of Microsoft s Word wordprocessor. There are significant differences between the provisions of the present invention and these user interface emulation modes. For user interface emulation modes 

A user console may be used to create an abstract configuration or an existing abstract configuration previously designed may be accessed by the process . Through mapping rules and equivalency definitions such as those previously discussed one or more concrete configurations respectively are created by the system thereby configuring one or more application programs or exporting one or more relatively more concrete abstract models to the next lower layer in the hierarchy. This flow of operation is highly useful for top down methodologies of designing end to end solutions.

In another flow of the same logic one or more existing concrete configurations are received respectively by the mapping rules and equivalency definitions and a corresponding unified abstract configuration is created to represent the combined configurations and functionality of all of the concrete or relatively more concrete models at layers below it. This flow of the logical process provides a high level conceptualized view of the totality of the functionality of the system without need for the reviewer to have domain expertise for any of the underlying incorporated application programs. It also provides an excellent tool for determining configurations of replacement end to end solutions for existing solutions which integrate multiple application programs.

In yet another flow of logic a first concrete configuration is received and mapped to a second concrete configuration through an intermediate stage of creating an abstract configuration which allows for the functionality of the first application program to be replicated or replaced by the functionality of an alternate application program.

In still another flow of logic a first concrete configuration is received and mapped to one or more additional concrete configurations through an intermediate stage of creating an abstract configuration which allows for the functionality of the first application program to be replicated or replaced by the functionality of a plurality of alternate application programs.

In one embodiment of the invention the functionality of the safeguard tracking system including the previously described logical processes are performed in part or wholly by software executed by a computer such as personal computers web servers web browsers or even an appropriately capable portable computing platform such as personal digital assistant PDA web enabled wireless telephone or other type of personal information management PIM device.

Therefore it is useful to review a generalized architecture of a computing platform which may span the range of implementation from a high end web or enterprise server platform to a personal computer to a portable PDA or web enabled wireless phone.

Turning to a generalized architecture is presented including a central processing unit CPU which is typically comprised of a microprocessor associated with random access memory RAM and read only memory ROM . Often the CPU is also provided with cache memory and programmable FlashROM . The interface between the microprocessor and the various types of CPU memory is often referred to as a local bus but also may be a more generic or industry standard bus.

Many computing platforms are also provided with one or more storage drives such as hard disk drives HDD floppy disk drives compact disc drives CD CD R CD RW DVD DVD R etc. and proprietary disk and tape drives e.g. Iomega Zip and Jaz Addonics SuperDisk etc. . Additionally some storage drives may be accessible over a computer network.

Many computing platforms are provided with one or more communication interfaces according to the function intended of the computing platform. For example a personal computer is often provided with a high speed serial port RS 232 RS 422 etc. an enhanced parallel port EPP and one or more universal serial bus USB ports. The computing platform may also be provided with a local area network LAN interface such as an Ethernet card and other high speed interfaces such as the High Performance Serial Bus IEEE 1394.

Computing platforms such as wireless telephones and wireless networked PDA s may also be provided with a radio frequency RF interface with antenna as well. In some cases the computing platform may be provided with an infrared data arrangement IrDA interface too.

Computing platforms are often equipped with one or more internal expansion slots such as Industry Standard Architecture ISA Enhanced Industry Standard Architecture EISA Peripheral Component Interconnect PCI or proprietary interface slots for the addition of other hardware such as sound cards memory boards and graphics accelerators.

Additionally many units such as laptop computers and PDA s are provided with one or more external expansion slots allowing the user the ability to easily install and remove hardware expansion devices such as PCMCIA cards SmartMedia cards and various proprietary modules such as removable hard drives CD drives and floppy drives.

Often the storage drives communication interfaces internal expansion slots and external expansion slots are interconnected with the CPU via a standard or industry open bus architecture such as ISA EISA or PCI. In many cases the bus may be of a proprietary design.

A computing platform is usually provided with one or more user input devices such as a keyboard or a keypad and mouse or pointer device and or a touch screen display . In the case of a personal computer a full size keyboard is often provided along with a mouse or pointer device such as a track ball or TrackPoint . In the case of a web enabled wireless telephone a simple keypad may be provided with one or more function specific keys. In the case of a PDA a touch screen is usually provided often with handwriting recognition capabilities.

Additionally a microphone such as the microphone of a web enabled wireless telephone or the microphone of a personal computer is supplied with the computing platform. This microphone may be used for simply reporting audio and voice signals and it may also be used for entering user choices such as voice navigation of web sites or auto dialing telephone numbers using voice recognition capabilities.

Many computing platforms are also equipped with a camera device such as a still digital camera or full motion video digital camera.

One or more user output devices such as a display are also provided with most computing platforms. The display may take many forms including a Cathode Ray Tube CRT a Thin Flat Transistor TFT array or a simple set of light emitting diodes LED or liquid crystal display LCD indicators.

One or more speakers and or annunciators are often associated with computing platforms too. The speakers may be used to reproduce audio and music such as the speaker of a wireless telephone or the speakers of a personal computer. Annunciators may take the form of simple beep emitters or buzzers commonly found on certain devices such as PDAs and PIMs.

These user input and output devices may be directly interconnected to the CPU via a proprietary bus structure and or interfaces or they may be interconnected through one or more industry open buses such as ISA EISA PCI etc.

The computing platform is also provided with one or more software and firmware programs to implement the desired functionality of the computing platforms.

Turning to now more detail is given of a generalized organization of software and firmware on this range of computing platforms. One or more operating system OS native application programs may be provided on the computing platform such as word processors spreadsheets contact management utilities address book calendar email client presentation financial and bookkeeping programs.

Additionally one or more portable or device independent programs may be provided which must be interpreted by an OS native platform specific interpreter such as Java scripts and programs.

Often computing platforms are also provided with a form of web browser or micro browser which may also include one or more extensions to the browser such as browser plug ins .

The computing device is often provided with an operating system such as Microsoft Windows UNIX IBM OS 2 IBM AIX open source LINUX Apple s MAC OS or other platform specific operating systems. Smaller devices such as PDA s and wireless telephones may be equipped with other forms of operating systems such as real time operating systems RTOS or Palm Computing s PalmOS .

A set of basic input and output functions BIOS and hardware device drivers are often provided to allow the operating system and programs to interface to and control the specific hardware functions provided with the computing platform.

Additionally one or more embedded firmware programs are commonly provided with many computing platforms which are executed by onboard or embedded microprocessors as part of the peripheral device such as a micro controller or a hard drive a communication processor network interface card or sound or graphics card.

As such and describe in a general sense the various hardware components software and firmware programs of a wide variety of computing platforms including but not limited to personal computers PDAs PIMs web enabled telephones and other appliances such as WebTV units. As such we now turn our attention to disclosure of the present invention relative to the processes and methods preferably implemented as software and firmware on such a computing platform. It will be readily recognized by those skilled in the art that the following methods and processes may be alternatively realized as hardware functions in part or in whole without departing from the spirit and scope of the invention.

Alternative embodiments of the present invention include some or all of the foregoing logical processes and functions of the multi layer configuration model invention being provided by configuring software deploying software downloading software distributing software or remotely serving clients in an on demand environment.

Software Deployment Embodiment. According to one embodiment of the invention the methods and processes of the invention are distributed or deployed as a service by a service provider to a client s computing system s . This enables a user to receive the benefits of the configuration model invention via a channel of having the software installed remotely for example over a network. Such an embodiment also may lend itself to remote configuration of application programs such as an administrator being able to remotely configure a wide variety of application programs through an abstract configuration interface as described in the foregoing paragraphs. In this manner one practical use of the invention would be by remote customer support personnel to provide assistance to a wider variety of application program products.

Turning to the deployment process begins by determining if there are any programs that will reside on a server or servers when the process software is executed. If this is the case then the servers that will contain the executables are identified . The process software for the server or servers is transferred directly to the servers storage via FTP or some other protocol or by copying through the use of a shared files system . The process software is then installed on the servers .

Next a determination is made on whether the process software is to be deployed by having users access the process software on a server or servers . If the users are to access the process software on servers then the server addresses that will store the process software are identified .

In step a determination is made whether the process software is to be developed by sending the process software to users via e mail. The set of users where the process software will be deployed are identified together with the addresses of the user client computers . The process software is sent via e mail to each of the user s client computers. The users then receive the e mail and then detach the process software from the e mail to a directory on their client computers . The user executes the program that installs the process software on his client computer then exits the process .

A determination is made if a proxy server is to be built to store the process software. A proxy server is a server that sits between a client application such as a Web browser and a real server. It intercepts all requests to the real server to see if it can fulfill the requests itself. If not it forwards the request to the real server. The two primary benefits of a proxy server are to improve performance and to filter requests. If a proxy server is required then the proxy server is installed . The process software is sent to the servers either via a protocol such as FTP or it is copied directly from the source files to the server files via file sharing . Another embodiment would be to send a transaction to the servers that contained the process software and have the server process the transaction then receive and copy the process software to the server s file system. Once the process software is stored at the servers the users via their client computers then access the process software on the servers and copy to their client computers file systems . Another embodiment is to have the servers automatically copy the process software to each client and then run the installation program for the process software at each client computer. The user executes the program that installs the process software on his client computer then exits the process .

Lastly a determination is made on whether the process software will be sent directly to user directories on their client computers . If so the user directories are identified . The process software is transferred directly to the user s client computer directory . This can be done in several ways such as but not limited to sharing of the file system directories and then copying from the sender s file system to the recipient user s file system or alternatively using a transfer protocol such as File Transfer Protocol FTP . The users access the directories on their client file systems in preparation for installing the process software . The user executes the program that installs the process software on his client computer then exits the process .

Software Integration Embodiment. According to another embodiment of the present invention software embodying the methods and processes disclosed herein are integrated as a service by a service provider to other software applications applets or computing systems. For example in this type of embodiment the logical functions to configure multiple application programs through an abstract application non specific model may be incorporated into another program such as a remote help or system diagnostic tool. In a more horizontal type of integration the logical processes of the present invention may be incorporated into one product of a certain type such as TIM or TAM to enable it to configure itself as well as similar or competitive products through an abstract model.

Integration of the invention generally includes providing for the process software to coexist with applications operating systems and network operating systems software and then installing the process software on the clients and servers in the environment where the process software will function.

Generally speaking the first task is to identify any software on the clients and servers including the network operating system where the process software will be deployed that are required by the process software or that work in conjunction with the process software. This includes the network operating system that is software that enhances a basic operating system by adding networking features. Next the software applications and version numbers will be identified and compared to the list of software applications and version numbers that have been tested to work with the process software. Those software applications that are missing or that do not match the correct version will be upgraded with the correct version numbers. Program instructions that pass parameters from the process software to the software applications will be checked to ensure the parameter lists matches the parameter lists required by the process software. Conversely parameters passed by the software applications to the process software will be checked to ensure the parameters match the parameters required by the process software. The client and server operating systems including the network operating systems will be identified and compared to the list of operating systems version numbers and network software that have been tested to work with the process software. Those operating systems version numbers and network software that do not match the list of tested operating systems and version numbers will be upgraded on the clients and servers to the required level.

After ensuring that the software where the process software is to be deployed is at the correct version level that has been tested to work with the process software the integration is completed by installing the process software on the clients and servers.

Turning to details of the integration process according to the invention are shown. Integrating begins by determining if there are any process software programs that will execute on a server or servers . If this is not the case then integration proceeds to . If this is the case then the server addresses are identified . The servers are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers that have been tested with the process software . The servers are also checked to determine if there is any missing software that is required by the process software .

A determination is made if the version numbers match the version numbers of OS applications and NOS that have been tested with the process software . If all of the versions match then processing continues . Otherwise if one or more of the version numbers do not match then the unmatched versions are updated on the server or servers with the correct versions . Additionally if there is missing required software then it is updated on the server or servers . The server integration is completed by installing the process software .

Step which follows either or determines if there are any programs of the process software that will execute on the clients. If no process software programs execute on the clients the integration proceeds to and exits. If this is not the case then the client addresses are identified .

The clients are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers that have been tested with the process software . The clients are also checked to determine if there is any missing software that is required by the process software .

A determination is made if the version numbers match the version numbers of OS applications and NOS that have been tested with the process software . If all of the versions match and there is no missing required software then the integration proceeds to and exits.

If one or more of the version numbers do not match then the unmatched versions are updated on the clients with the correct versions . In addition if there is missing required software then it is updated on the clients . The client integration is completed by installing the process software on the clients . The integration proceeds to and exits.

Application Programming Interface Embodiment. In another embodiment the invention may be realized as a service or functionality available to other systems and devices via an Application Programming Interface API . One such embodiment is to provide the service to a client system from a server system as a web service.

On Demand Computing Services Embodiment. According to another aspect of the present invention the processes and methods disclosed herein are provided through an on demand computing architecture to render service to a client by a service provider. In these types of embodiments the logical processes of the multi layer abstract model configuration invention would be made available to a user on an as needed basis typically with the software of the invention executing on a remote server which is accessed when needed by a user via a web browser or client system.

Turning to generally speaking the process software embodying the methods disclosed herein is shared simultaneously serving multiple customers in a flexible automated fashion. It is standardized requiring little customization and it is scaleable providing capacity on demand in a pay as you go model.

The process software can be stored on a shared file system accessible from one or more servers. The process software is executed via transactions that contain data and server processing requests that use CPU units on the accessed server. CPU units are units of time such as minutes seconds hours on the central processor of the server. Additionally the assessed server may make requests of other servers that require CPU units. CPU units are an example that represents but one measurement of use. Other measurements of use include but are not limited to network bandwidth memory usage storage usage packet transfers complete transactions etc.

When multiple customers use the same process software application their transactions are differentiated by the parameters included in the transactions that identify the unique customer and the type of service for that customer. All of the CPU units and other measurements of use that are used for the services for each customer are recorded. When the number of transactions to any one server reaches a number that begins to effect the performance of that server other servers are accessed to increase the capacity and to share the workload. Likewise when other measurements of use such as network bandwidth memory usage storage usage etc. approach a capacity so as to effect performance additional network bandwidth memory usage storage etc. are added to share the workload.

The measurements of use used for each service and customer are sent to a collecting server that sums the measurements of use for each customer for each service that was processed anywhere in the network of servers that provide the shared execution of the process software. The summed measurements of use units are periodically multiplied by unit costs and the resulting total process software application service costs are alternatively sent to the customer and or indicated on a web site accessed by the computer which then remits payment to the service provider.

In another embodiment the service provider requests payment directly from a customer account at a banking or financial institution.

In another embodiment if the service provider is also a customer of the customer that uses the process software application the payment owed to the service provider is reconciled to the payment owed by the service provider to minimize the transfer of payments.

The server central processing unit CPU capacities in the On Demand environment are queried . The CPU requirement of the transaction is estimated then the servers available CPU capacity in the On Demand environment are compared to the transaction CPU requirement to see if there is sufficient CPU available capacity in any server to process the transaction . If there is not sufficient server CPU available capacity then additional server CPU capacity is allocated to process the transaction . If there was already sufficient available CPU capacity then the transaction is sent to a selected server .

Before executing the transaction a check is made of the remaining On Demand environment to determine if the environment has sufficient available capacity for processing the transaction. This environment capacity consists of such things as but not limited to network bandwidth processor memory storage etc. . If there is not sufficient available capacity then capacity will be added to the On Demand environment . Next the required software to process the transaction is accessed loaded into memory then the transaction is executed .

The usage measurements are recorded . The usage measurements consists of the portions of those functions in the On Demand environment that are used to process the transaction. The usage of such functions as but not limited to network bandwidth processor memory storage and CPU cycles are what is recorded. The usage measurements are summed multiplied by unit costs and then recorded as a charge to the requesting customer .

If the customer has requested that the On Demand costs be posted to a web site then they are posted . If the customer has requested that the On Demand costs be sent via e mail to a customer address then they are sent . If the customer has requested that the On Demand costs be paid directly from a customer account then payment is received directly from the customer account . The last step is to exit the On Demand process.

In another embodiment of the invention logical processes according to the invention and described herein are encoded on or in one or more computer readable media. Some computer readable media are read only e.g. they must be initially programmed using a different device than that which is ultimately used to read the data from the media some are write only e.g. from the data encoders perspective they can only be encoded but not read simultaneously or read write. Still some other media are write once read many times.

Some media are relatively fixed in their mounting mechanisms while others are removable or even transmittable. All computer readable media form two types of systems when encoded with data and or computer software a when removed from a drive or reading mechanism they are memory devices which generate useful data driven outputs when stimulated with appropriate electromagnetic electronic and or optical signals and b when installed in a drive or reading device they form a data repository system accessible by a computer.

Similarly another form of computer readable media is a flexible removable floppy disk which is inserted into a drive which houses an access head. The floppy disk typically includes a flexible magnetically encodable disk which is accessible by the drive head through a window in a sliding cover .

A Compact Disk CD is usually a plastic disk which is encoded using an optical and or magneto optical process and then is read using generally an optical process. Some CD s are read only CD ROM and are mass produced prior to distribution and use by reading types of drives. Other CD s are writable e.g. CD RW CD R either once or many time. Digital Versatile Disks DVD are advanced versions of CD s which often include double sided encoding of data and even multiple layer encoding of data. Like a floppy disk a CD or DVD is a removable media.

Another common type of removable media are several types of removable circuit based e.g. solid state memory devices such as Compact Flash CF Secure Data SD Sony s MemoryStick Universal Serial Bus USB FlashDrives and Thumbdrives and others. These devices are typically plastic housings which incorporate a digital memory chip such as a battery backed random access chip RAM or a Flash Read Only Memory FlashROM . Available to the external portion of the media is one or more electronic connectors for engaging a connector such as a CF drive slot or a USB slot. Devices such as a USB FlashDrive are accessed using a serial data methodology where other devices such as the CF are accessed using a parallel methodology. These devices often offer faster access times than disk based media as well as increased reliability and decreased susceptibility to mechanical shock and vibration. Often they provide less storage capability than comparably priced disk based media.

Yet another type of computer readable media device is a memory module often referred to as a SIMM or DIMM. Similar to the CF SD and FlashDrives these modules incorporate one or more memory devices such as Dynamic RAM DRAM mounted on a circuit board having one or more electronic connectors for engaging and interfacing to another circuit such as a Personal Computer motherboard. These types of memory modules are not usually encased in an outer housing as they are intended for installation by trained technicians and are generally protected by a larger outer housing such as a Personal Computer chassis.

Turning now to another embodiment option of the present invention is shown in which a computer readable signal is encoded with software data or both which implement logical processes according to the invention. is generalized to represent the functionality of wireless wired electro optical and optical signaling systems. For example the system shown in can be realized in a manner suitable for wireless transmission over Radio Frequencies RF as well as over optical signals such as InfraRed Data Arrangement IrDA . The system of may also be realized in another manner to serve as a data transmitter data receiver or data transceiver for a USB system such as a drive to read the aforementioned USB FlashDrive or to access the serially stored data on a disk such as a CD or hard drive platter.

In general a microprocessor or microcontroller reads writes or both data to from storage for data program or both . A data interface optionally including a digital to analog converter cooperates with an optional protocol stack to send receive or transceive data between the system front end and the microprocessor . The protocol stack is adapted to the signal type being sent received or transceived. For example in a Local Area Network LAN embodiment the protocol stack may implement Transmission Control Protocol Internet Protocol TCP IP . In a computer to computer or computer to periperal embodiment the protocol stack may implement all or portions of USB FireWire RS 232 Point to Point Protocol PPP etc.

The system s front end or analog front end is adapted to the signal type being modulated demodulate or transcoded. For example in an RF based system the analog front end comprises various local oscillators modulators demodulators etc. which implement signaling formats such as Frequency Modulation FM Amplitude Modulation AM Phase Modulation PM Pulse Code Modulation PCM etc. Such an RF based embodiment typically includes an antenna for transmitting receiving or transceiving electromagnetic signals via open air water earth or via RF wave guides and coaxial cable. Some common open air transmission standards are BlueTooth Global Services for Mobile Communications GSM Time Division Multiple Access TDMA Advanced Mobile Phone Service AMPS and Wireless Fidelity Wi Fi .

In another example embodiment the analog front end may be adapted to sending receiving or transceiving signals via an optical interface such as laser based optical interfaces e.g. Wavelength Division Multiplexed SONET etc. or Infra Red Data Arrangement IrDA interfaces . Similarly the analog front end may be adapted to sending receiving or transceiving signals via cable using a cable interface which also includes embodiments such as USB Ethernet LAN twisted pair coax Plain old Telephone Service POTS etc.

Signals transmitted received or transceived as well as data encoded on disks or in memory devices may be encoded to protect it from unauthorized decoding and use. Other types of encoding may be employed to allow for error detection and in some cases correction such as by addition of parity bits or Cyclic Redundancy Codes CRC . Still other types of encoding may be employed to allow directing or routing of data to the correct destination such as packet and frame based protocols.

Parallel data can be represented as the flow of data signals aligned in time such that parallel data unit byte word d word etc. is transmitted with each bit D Dbeing on a bus or signal carrier simultaneously where the width of the data unit is n 1. In some systems Dis used to represent the least significant bit LSB and in other systems it represents the most significant bit MSB . Data is serialized by sending one bit at a time such that each data unit is sent in serial fashion one after another typically according to a protocol.

As such the parallel data stored in computer memory is often accessed by a microprocessor or Parallel to Serial Converter via a parallel bus and exchanged e.g. transmitted received or transceived via a serial bus . Received serial data is converted back into parallel data before storing it in computer memory usually. The serial bus generalized in may be a wired bus such as USB or Firewire or a wireless communications medium such as an RF or optical channel as previously discussed.

In these manners various embodiments of the invention may be realized by encoding software data or both according to the logical processes of the invention into one or more computer readable mediums thereby yielding a product of manufacture and a system which when properly read received or decoded yields useful programming instructions data or both including but not limited to the computer readable media types described in the foregoing paragraphs.

While certain examples and details of a preferred embodiment have been disclosed it will be recognized by those skilled in the are that variations in implementation such as use of different programming methodologies computing platforms and processing technologies may be adopted without departing from the spirit and scope of the present invention. Therefore the scope of the invention should be determined by the following claims.

