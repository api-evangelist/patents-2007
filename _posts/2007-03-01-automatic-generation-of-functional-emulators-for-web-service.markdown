---

title: Automatic generation of functional emulators for web service
abstract: A computer-implemented method, system, and computer-readable medium for emulating web service operations are presented. In a preferred embodiment, the computer-implemented method includes the steps of: collecting Web Services Description Language (WSDL) based descriptors of selected web service operations; receiving range and diversity descriptors for the selected web service operations; and inputting the WSDL based descriptors, range and diversity descriptors into an Automatic Web Service Emulator Generator (AWSEG) to generate a web service emulation of the selected web service operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607205&OS=08607205&RS=08607205
owner: International Business Machines Corporation
number: 08607205
owner_city: Armonk
owner_country: US
publication_date: 20070301
---
The present disclosure relates in general to the field of computers and more particularly to the use of computer software. Still more particularly the present disclosure relates to the emulation of a web service.

Enterprise level systems which involve complex integration of functional components typically require end to end testing prior to deployment into production. In many industries such as finance and banking the feasibility of fall scale testing is often hindered by a lack of test data and or a lack of functional components. This shortcoming is usually traceable to security and privacy issues as well as to the lack of time and resources required to configure functional components for operating in test mode.

The use of web services as an integration paradigm has recently found widespread acceptance in the software services industry primarily due to the web services ability to integrate heterogeneous components in a loosely coupled manner. While such web services are an efficient means for leveraging software resources testing all or a portion of these services is difficult if not impossible without monopolizing or possibly damaging services and supported operations provided by the web services.

To address the problem described above the present disclosure presents a computer implemented method system and computer readable medium for emulating web service operations. In a preferred embodiment the computer implemented method includes the steps of collecting Web Services Description Language WSDL based descriptors of selected web service operations receiving range and diversity descriptors for the selected web service operations and inputting the WSDL based descriptors range and diversity descriptors into an Automatic Web Service Emulator Generator AWSEG to generate a web service emulation of the selected web service operations. The above as well as additional purposes features and advantages of the present invention will become apparent in the following detailed written description.

With reference now to the figures and in particular to there is depicted an environment for enabling the use of an Automatic Web Service Emulator Generator AWSEG . As described herein AWSEG is used to generate a Web Service Emulation WSE which emulates but does not have the full capabilities of a Web Service .

Web Service includes multiple supported services which include but are not limited to software packages web services operating on disparate servers support etc. An exemplary Web Service is IBM s WebSphere which runs on IBM s WebSphere Application Server WAS . WebSphere uses middleware software that is designed to set up operate and integrate e business applications across multiple computing platforms using Web technologies. These different e business applications are referred to herein as supported services . The different supported services communicate among themselves via Application Program Interfaces APIs which in an exemplary manner utilize Web Services Description Language WSDL descriptors. APIs describe formats responses and other information about messages that are sent between supported services but do not include the logic found within the supported services that actually process data in the messages. Nonetheless these APIs and particularly those that are WSDL compliant provide enough information to create a high level emulation WSE of Web Service . For reasons described further below a range and diversity descriptor is also input into AWSEG in order to create a WSE that is tailored for a particular use.

Referring now to an overview of WSDL as used in an exemplary manner by APIs is presented. As noted herein WSDL is an eXtended Markup Language XML based service description that defines services such as supported services as collections of network endpoints ports . A port is defined by associating a network address with a reusable binding. A collection of ports defines a service e.g. Web Service . The messages between ports are abstract descriptions of data that is being exchanged between services. Port types are abstract collections of supported operations. Protocol and data format specifications for a particular port type constitutes a reusable binding such that messages and operations are bound to a concrete network protocol and message format. Thus WSDL describes a public interface to the web service.

Each API includes a WSDL description for a particular service e.g. one of the supported services . This descriptor describes how messages are handled by that particular service. Each WSDL description comprises an interface a binding and a service .

Interface defines an abstract interface for service as a set of abstract operations each operation representing a simple interaction between a client and service . Each operation specifies the types of messages that service can send or receive as part of that operation. Each operation also defines message exchange patterns which indicate a sequence in which associated messages are transmitted between supported services . An exemplary sequence for a synchronous message would be Send Response in which a Send message always results in a Response message.

Binding describes details for each operation using operation and fault elements within the binding . That is a binding is an extension used by messages that describes two attributes of a message the name attribute and the type attribute. The name attribute which is user defined is the name of the binding. The type attribute points to a specific port in service used by the binding. Thus binding provides concrete information for messages regarding what protocol is being used how data in the message is being transported and where the service is located.

Service includes a descriptor that defines a single interface that service will support and a list of endpoint locations where service can be accessed. Each endpoint must also reference a previously defined binding to indicate what protocols and transmission formats are to be used at that endpoint.

Referring now to a flow chart of exemplary steps taken to generate an emulation of a web service is presented. After initiator block specific supported services of a web service such as certain chosen supported services found in web service shown in are selected for emulation block . Note that in a preferred embodiment only some but not all supported services are selected for emulation. Note also that in the preferred embodiment the emulation does not provide fall functionality of the selected services but rather provides a limited emulation that is based on the interfaces between the selected services. That is the emulation does not emulate the internal logic of each supported service i.e. web service operations but only provides a limited description of the supported services based on their API interfaces. As soon as the selected services are identified API s between the selected services e.g. WSDL based descriptors described above are collected block .

As shown in block range and diversity descriptors for the selected features are then chosen and received by the AWSEG . These range and diversity descriptors are preferably chosen by a user and define parameters of services needed to be emulated. For example assume that a service handles credit card balances. Rather than emulate the service for handling all credit card numbers for all types of credit cards the parameter may be set to emulate services for only American Express cards that have leading numbers between 5000 and 7000. 

As described in block the WSDL based descriptors range and diversity descriptors are then inputted into the AWSEG to generate a web service emulation. As described above this emulation does not replicate the actual functional logic found in services but rather emulates these services based on how the services handle messages. Thus while detailed logic within a particular service cannot be tested the overall system within the user defined parameters can be tested to evaluate system interactions message handling sufficiency of services etc. The abbreviated emulation of the web service is then presented block to a user. The user can then use the emulation to test the web service block by inputting data messages etc. and observing how such inputs are handled. Thus the web service can be tested off line while not impacting touching the actual web service itself. The process ends at terminator block .

With reference now to there is depicted a block diagram of an exemplary client computer in which the present invention may be utilized. Note that some or all of the exemplary architecture shown for client computer may be utilized by a software deploying server and a web services server .

Client computer includes a processor unit that is coupled to a system bus . A video adapter which drives supports a display is also coupled to system bus . System bus is coupled via a bus bridge to an Input Output I O bus . An I O interface is coupled to I O bus . I O interface affords communication with various I O devices including a keyboard a mouse a Compact Disk Read Only Memory CD ROM drive a floppy disk drive and a flash drive memory . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Client computer is able to communicate with software deploying server and web services server via a network using a network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as an Ethernet or a Virtual Private Network VPN .

A hard drive interface is also coupled to system bus . Hard drive interface interfaces with a hard drive . In a preferred embodiment hard drive populates a system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in client computer . This volatile memory includes additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Data that populates system memory includes client computer s operating system OS and application programs .

OS includes a shell for providing transparent user access to resources such as application programs . Generally shell is a program that provides an interpreter and an interface between the user and the operating system. More specifically shell executes commands that are entered into a command line user interface or from a file. Thus shell as it is called in UNIX also called a command processor in Windows is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. a kernel for processing. Note that while shell is a text based line oriented user interface the present invention will equally well support other user interface modes such as graphical voice gestural etc.

As depicted OS also includes kernel which includes lower levels of functionality for OS including providing essential services required by other parts of OS and application programs including memory management process and task management disk management and mouse and keyboard management.

Application programs include a browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. client computer to send and receive network messages to the Internet using HyperText Transfer Protocol HTTP messaging thus enabling communication with software deploying server .

Application programs in client computer s system memory as well as software deploying server s system memory also include an Automatic Web Service Emulator Generator AWSEG . AWSEG includes code for implementing the processes described in . In one embodiment client computer is able to download AWSEG from software deploying server . As described above AWSEG is able to provide a limited emulation of some or all of a web service e.g. Web Service described in that is provided and managed by Web services server e.g. the WAS described above .

The hardware elements depicted in client computer are not intended to be exhaustive but rather are representative to highlight essential components required by the present invention. For instance client computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

Note further that in a preferred embodiment of the present invention software deploying server performs all of the functions associated with the present invention including execution of AWSEG thus freeing client computer from having to use its own internal computing resources to execute AWSEG .

It should be understood that at least some aspects of the present invention may alternatively be implemented in a computer readable medium that contains a program product. Programs defining functions of the present invention can be delivered to a data storage system or a computer system via a variety of tangible signal bearing media which include without limitation non writable storage media e.g. CD ROM writable storage media e.g. hard disk drive read write CD ROM optical media as well as non tangible communication media such as computer and telephone networks including Ethernet the Internet wireless networks and like network systems. It should be understood therefore that such signal bearing media when carrying or encoding computer readable instructions that direct method functions in the present invention represent alternative embodiments of the present invention. Further it is understood that the present invention may be implemented by a system having means in the form of hardware software or a combination of software and hardware as described herein or their equivalent.

As described above in one embodiment the processes described by the present invention including the functions of AWSEG are performed by service provider server . Alternatively AWSEG and the method described herein and in particular as shown and described in can be deployed as process software from service provider server to client computer . Still more particularly process software for the method so described may be deployed to service provider server by another service provider server not shown .

Referring then to step begins the deployment of the process software. The first thing is to determine if there are any programs that will reside on a server or servers when the process software is executed query block . If this is the case then the servers that will contain the executables are identified block . The process software for the server or servers is transferred directly to the servers storage via File Transfer Protocol FTP or some other protocol or by copying though the use of a shared file system block . The process software is then installed on the servers block .

Next a determination is made on whether the process software is to be deployed by having users access the process software on a server or servers query block . If the users are to access the process software on servers then the server addresses that will store the process software are identified block .

A determination is made if a proxy server is to be built query block to store the process software. A proxy server is a server that sits between a client application such as a Web browser and a real server. It intercepts all requests to the real server to see if it can fulfill the requests itself. If not it forwards the request to the real server. The two primary benefits of a proxy server are to improve performance and to filter requests. If a proxy server is required then the proxy server is installed block . The process software is sent to the servers either via a protocol such as FTP or it is copied directly from the source files to the server files via file sharing block . Another embodiment would be to send a transaction to the servers that contained the process software and have the server process the transaction then receive and copy the process software to the server s file system. Once the process software is stored at the servers the users via their client computers then access the process software on the servers and copy to their client computers file systems block . Another embodiment is to have the servers automatically copy the process software to each client and then run the installation program for the process software at each client computer. The user executes the program that installs the process software on his client computer block then exits the process terminator block .

In query step a determination is made whether the process software is to be deployed by sending the process software to users via e mail. The set of users where the process software will be deployed are identified together with the addresses of the user client computers block . The process software is sent via e mail to each of the users client computers block . The users then receive the e mail block and then detach the process software from the e mail to a directory on their client computers block . The user executes the program that installs the process software on his client computer block then exits the process terminator block .

Lastly a determination is made as to whether the process software will be sent directly to user directories on their client computers query block . If so the user directories are identified block . The process software is transferred directly to the user s client computer directory block . This can be done in several ways such as but not limited to sharing of the file system directories and then copying from the sender s file system to the recipient user s file system or alternatively using a transfer protocol such as File Transfer Protocol FTP . The users access the directories on their client file systems in preparation for installing the process software block . The user executes the program that installs the process software on his client computer block and then exits the process terminator block .

The present software can be deployed to third parties as part of a service wherein a third party VPN service is offered as a secure deployment vehicle or wherein a VPN is build on demand as required for a specific deployment.

A virtual private network VPN is any combination of technologies that can be used to secure a connection through an otherwise unsecured or untrusted network. VPNs improve security and reduce operational costs. The VPN makes use of a public network usually the Internet to connect remote sites or users together. Instead of using a dedicated real world connection such as leased line the VPN uses virtual connections routed through the Internet from the company s private network to the remote site or employee. Access to the software via a VPN can be provided as a service by specifically constructing the VPN for purposes of delivery or execution of the process software i.e. the software resides elsewhere wherein the lifetime of the VPN is limited to a given period of time or a given number of deployments based on an amount paid.

The process software may be deployed accessed and executed through either a remote access or a site to site VPN. When using the remote access VPNs the process software is deployed accessed and executed via the secure encrypted connections between a company s private network and remote users through a third party service provider. The enterprise service provider ESP sets a network access server NAS and provides the remote users with desktop client software for their computers. The telecommuters can then dial a toll free number or attach directly via a cable or DSL modem to reach the NAS and use their VPN client software to access the corporate network and to access download and execute the process software.

When using the site to site VPN the process software is deployed accessed and executed through the use of dedicated equipment and large scale encryption that are used to connect a company s multiple fixed sites over a public network such as the Internet.

The process software is transported over the VPN via tunneling which is the process of placing an entire packet within another packet and sending it over a network. The protocol of the outer packet is understood by the network and both points called tunnel interfaces where the packet enters and exits the network.

The process software which consists of code for implementing the process described herein may be integrated into a client server and network environment by providing for the process software to coexist with applications operating systems and network operating systems software and then installing the process software on the clients and servers in the environment where the process software will function.

The first step is to identify any software on the clients and servers including the network operating system where the process software will be deployed that are required by the process software or that work in conjunction with the process software. This includes the network operating system that is software that enhances a basic operating system by adding networking features.

Next the software applications and version numbers will be identified and compared to the list of software applications and version numbers that have been tested to work with the process software. Those software applications that are missing or that do not match the correct version will be upgraded with the correct version numbers. Program instructions that pass parameters from the process software to the software applications will be checked to ensure the parameter lists match the parameter lists required by the process software. Conversely parameters passed by the software applications to the process software will be checked to ensure the parameters match the parameters required by the process software. The client and server operating systems including the network operating systems will be identified and compared to the list of operating systems version numbers and network software that have been tested to work with the process software. Those operating systems version numbers and network software that do not match the list of tested operating systems and version numbers will be upgraded on the clients and servers to the required level.

After ensuring that the software where the process software is to be deployed is at the correct version level that has been tested to work with the process software the integration is completed by installing the process software on the clients and servers.

The process software is shared simultaneously serving multiple customers in a flexible automated fashion. It is standardized requiring little customization and it is scalable providing capacity on demand in a pay as you go model.

The process software can be stored on a shared file system accessible from one or more servers. The process software is executed via transactions that contain data and server processing requests that use CPU units on the accessed server. CPU units are units of time such as minutes seconds or hours on the central processor of the server. Additionally the accessed server may make requests of other servers that require CPU units. CPU units describe an example that represents but one measurement of use. Other measurements of use include but are not limited to network bandwidth memory utilization storage utilization packet transfers complete transactions etc.

When multiple customers use the same process software application their transactions are differentiated by the parameters included in the transactions that identify the unique customer and the type of service for that customer. All of the CPU units and other measurements of use that are used for the services for each customer are recorded. When the number of transactions to any one server reaches a number that begins to affect the performance of that server other servers are accessed to increase the capacity and to share the workload. Likewise when other measurements of use such as network bandwidth memory utilization storage utilization etc. approach a capacity so as to affect performance additional network bandwidth memory utilization storage etc. are added to share the workload.

The measurements of use used for each service and customer are sent to a collecting server that sums the measurements of use for each customer for each service that was processed anywhere in the network of servers that provide the shared execution of the process software. The summed measurements of use units are periodically multiplied by unit costs and the resulting total process software application service costs are alternatively sent to the customer and or indicated on a web site accessed by the customer which then remits payment to the service provider.

In another embodiment the service provider requests payment directly from a customer account at a banking or financial institution.

In another embodiment if the service provider is also a customer of the customer that uses the process software application the payment owed to the service provider is reconciled to the payment owed by the service provider to minimize the transfer of payments.

With reference now to initiator block begins the On Demand process. A transaction is created than contains the unique customer identification the requested service type and any service parameters that farther specify the type of service block . The transaction is then sent to the main server block . In an On Demand environment the main server can initially be the only server then as capacity is consumed other servers are added to the On Demand environment.

The server central processing unit CPU capacities in the On Demand environment are queried block . The CPU requirement of the transaction is estimated then the server available CPU capacities in the On Demand environment are compared to the transaction CPU requirement to see if there is sufficient CPU available capacity in any server to process the transaction query block . If there is not sufficient server CPU available capacity then additional server CPU capacity is allocated to process the transaction block . If there was already sufficient available CPU capacity then the transaction is sent to a selected server block .

Before executing the transaction a check is made of the remaining On Demand environment to determine if the environment has sufficient available capacity for processing the transaction. This environment capacity consists of such things as but not limited to network bandwidth processor memory storage etc. block . If there is not sufficient available capacity then capacity will be added to the On Demand environment block . Next the required software to process the transaction is accessed loaded into memory then the transaction is executed block .

The usage measurements are recorded block . The utilization measurements consist of the portions of those functions in the On Demand environment that are used to process the transaction. The usage of such functions as but not limited to network bandwidth processor memory storage and CPU cycles are what is recorded. The usage measurements are summed multiplied by unit costs and then recorded as a charge to the requesting customer block .

If the customer has requested that the On Demand costs be posted to a web site query block then they are posted block . If the customer has requested that the On Demand costs be sent via e mail to a customer address query block then these costs are sent to the customer block . If the customer has requested that the On Demand costs be paid directly from a customer account query block then payment is received directly from the customer account block . The On Demand process is then exited at terminator block .

As described herein the present disclosure presents a computer implemented method system and computer readable medium for emulating web service operations. In a preferred embodiment the computer implemented method includes the steps of collecting Web Services Description Language WSDL based descriptors of selected web service operations receiving range and diversity descriptors for the selected web service operations and inputting the WSDL based descriptors range and diversity descriptors into an Automatic Web Service Emulator Generator AWSEG to generate a web service emulation of the selected web service operations. In one embodiment the method further includes the steps of presenting the web service emulation to a user and testing the selected web service by using the web service emulation wherein testing through the use of the web service emulation does not utilize true instances of the selected web service operations. As described herein the range and diversity descriptors may define a limited portion of the selected web service to be emulated.

While the present invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. Furthermore as used in the specification and the appended claims the term computer or system or computer system or computing device includes any data processing system including but not limited to personal computers servers workstations network computers main frame computers routers switches Personal Digital Assistants PDA s telephones and any other system capable of processing transmitting receiving capturing and or storing data.

