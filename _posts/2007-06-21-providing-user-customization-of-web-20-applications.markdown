---

title: Providing user customization of web 2.0 applications
abstract: The present invention discloses a solution for user customization of Web 2.0 applications. In the solution, a browser can establish a connection with a Web 2.0 server. The browser can convey user identification information to the Web 2.0 server and request a Web 2.0 application. Based on the conveyed identifying information, a user can be identified. The Web 2.0 server can then query a server-side data store for customizations associated with the identified user and requested application. When customizations exist in the data store, the customizations can be applied to the Web 2.0 application. The customized Web 2.0 application can then be conveyed to the browser. The browser can be a Web browser or a voice browser depending upon implementation specifics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631104&OS=07631104&RS=07631104
owner: International Business Machines Corporation
number: 07631104
owner_city: Armonk
owner_country: US
publication_date: 20070621
---
This continuation in part application claims the benefit of U.S. patent application Ser. No. 11 765 900 filed Jun. 20 2007 the benefit of U.S. patent application Ser. No. 11 765 928 filed Jun. 20 2007 and the benefit of U.S. patent application Ser. No. 11 765 962 filed Jun. 20 2007 which are incorporated by reference herein.

The present invention relates to the field of Web 2.0 applications and more particularly to providing user customization of Web 2.0 applications.

Web 2.0 applications promote collaboration and information sharing among large groups of users. The fundamental principles of Web 2.0 applications grant end users those users other than the originator the privileges to read write and update existing applications actions traditionally restricted to application developers. Additionally Web 2.0 applications depend upon the collaborative effort of end users to provide new content and revise existing content. For example the entries of WIKIPEDIA a Web 2.0 encyclopedia application are created and revised by end users allowing information to be added and revised as it becomes available.

This new approach to information sharing and Web communication has dramatically increased the popularity of Web 2.0 applications such as WIKIs and BLOGs. Conventional Web 2.0 applications have a few shortcomings. One shortcoming is that Web 2.0 applications are currently devoid of an ability to establish personal settings for viewing content. Thus every user experiences and interacts with a Web 2.0 application in the same manner every time.

Another feature that is lacking in Web 2.0 applications is state memory. State memory permits previous user interactions to have an effect on future interactions. For example a user can fill in Web form fields during one session which are automatically filled in for subsequent sessions. Additionally state memory preserves user settings from one Web page to another during the same session. For example an account number and user preferences established in one Web page can be automatically applied to other linked pages.

What is needed is a solution that provides users with a way to store configuration and state related data for a Web 2.0 application. That is a solution that allows users of a Web 2.0 application to select and store values for customizable parameters that will allow end users to have a customized experience with Web 2.0 applications. Additionally this solution would also store state related data to further enhance an end user s experience. Ideally this solution will also encompass the incorporation and customization of speech enabled solutions into Web 2.0 applications. No such solution currently exists.

The present invention discloses a mechanism for capturing and applying user specific customization settings to Web 2.0 applications. The applications can each be any variety of a Web 2.0 application such as WIKIs BLOGs social networking sites FOLKSONOMIEs MASHUPs and the like. Further the application can be a speech enabled application that interfaces with a remote speech processing system. The user specific customization settings can be captured as entries in a customization profile and or a state definition file. A customization engine can apply the stored customization settings when a user requests the Web 2.0 application from the Web 2.0 server.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a system that allows end users to customize Web 2.0 applications. Such a system can include a customization data store configured to store a user customization profile and a state definition profile and a customization engine. The user customization profile and state definition profile can contain customization entries that correspond to entries contained within the Web 2.0 application. These customization entries can be applied to the Web 2.0 application by the customization engine when the Web 2.0 application is served by a Web 2.0 server. Served Web 2.0 applications can be speech enabled applications that use customizable speech processing components.

Another aspect of the present invention can include a server side customization data storage area to contain user customizations of Web 2.0 applications. The storage area can include a server side data store configured to store user specific customization settings for Web 2.0 applications. The customization settings can be automatically applied to the Web 2.0 application when the application is served by a Web 2.0 server. The customization settings can alter an appearance or a behavior of the Web 2.0 application in a user specified manner. The customizations of the data store can cause markup replacements to occur within the pages served by the Web 2.0 server.

Still another aspect of the present invention can include a method for customizing Web 2.0 applications. This method can begin when a browser establishes a connection with a Web 2.0 server. The browser can convey user identification information to the Web 2.0 server and request a Web 2.0 application. Based on the conveyed identifying information a user can be identified. The Web 2.0 server can then query a server side data store for customizations associated with the identified user and requested application. When customizations exist in the data store the customizations can be applied to the Web 2.0 application. The customized Web 2.0 application can then be conveyed to the browser. The browser can be a Web browser or a voice browser depending upon implementation specifics.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or as a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory or any other recording medium. The program can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

It should also be noted that the methods detailed herein can also be methods performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

Web 2.0 server can provide Web content to interface and which permits a user to provide additional Web content which is made available to other users. The Web 2.0 server can be a WIKI server a BLOG server MASHUP server a FOLKSONOMY server a social networking server and the like. The Web 2.0 server can include an application data store a customization data store and a customization engine . The application data store can contain the Web 2.0 applications that can be requested by and served to the user . The application data store can include Web 2.0 applications that can be represented as a set of documents such as introspection documents entry collection documents and resource collection documents . These documents can be written in accordance with an Atom Publishing Protocol APP specification. The Web 2.0 applications can be speech enabled applications capable of receiving speech input and providing speech output.

The customization engine can be a software component that queries the customization data store for customization settings associated with the user request. These customization settings can be used by the customization engine to modify entries of the documents defining a Web 2.0 application contained in the application data store . Once the settings are applied the Web 2.0 server can convey the customized Web 2.0 application back to the interface .

In another contemplated embodiment the customization data store and customization engine can be located on another server not shown communicatively linked with the Web 2.0 server .

In another embodiment a middleware server not shown can be used as an interface for managing disparate communication systems. For example a middleware server can be used to bridge a telephony system with a computer network system.

As used herein presented data stores including stores and can be a physical or virtual storage space configured to store digital information. Data stores and can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Each of the data stores and can be a stand alone storage unit as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within data store and in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further data stores and or can utilize one or more encryption mechanisms to protect stored information from unauthorized access.

Network can include any hardware software and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed though data or voice channels. Network can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. Network can also include network equipment such as routers data lines hubs and intermediary servers which together form a data network such as the Internet. Network can also include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. Network can include line based and or wireless communication pathways.

In the system illustrated by a browser can communicate with WIKI server via a Representational State Transfer REST architecture ATOM based protocol. The WIKI server can communicate with system via a REST ATOM based protocol. Protocols can include HTTP and similar protocols that are RESTful by nature as well as an Atom Publishing Protocol APP or other protocol that is specifically designed to conform to REST principles.

The server can include a data store in which speech enabled applications are stored. In one embodiment the speech enabled applications can be written in a WIKI syntax contained in an APP format.

The contents of a speech enabled application can be accessed using editor . The editor can be a standard WIKI editor having a voice plug in or extensions . Modifications made to the speech enabled application via the editor can be stored in customization data store as a customization profile and or a state definition .

The customization profile and state definition can contain customization settings that can override entries contained within the original application . The contents of the customization profile and or state definition can be stored as modifications to and or deltas from the original application in an APP based format. The invention is not to be construed as limited in this regard and formats other than an APP format can be used.

The customization engine can apply the contents of the customization profile and or state definition to the speech enabled application . Once the application is customized the customization engine can convey the customized application to the transformer .

The transformer can convert WIKI syntax into standard markup for browsers. In one embodiment the transformer can be an extension of a conventional transformer that supports HTML and XML. The extended transformer can be enhanced to handle JavaScript such as AJAX. For example resource links of application can be converted into AJAX functions by the transformer having an AJAX plug in . The transformer can also include a VoiceXML plug in which generates VoiceXML markup for voice only clients.

In diagram the contents of the customization profile can be applied to an original WIKI application . It should be noted that although this example uses a WIKI application the invention is not limited to WIKI applications and can utilize any type of Web 2.0 application.

As shown in this example the introspection document of the original WIKI application can contain links to a collection of entries and a collection of resources . The entries can specify a set of WIKI pages. Each WIKI page entry can be further decomposed into collections having a lower level of granularity such as WIKI page sections. The resources can include speech processing resources and their particulars such as ASR resources TTS resources SIV resources VoiceXML interpreter resources and the like. Each resource can be further decomposed into configurable resource specifics such as a speech recognition grammar for a related WIKI page a recognition language and the like.

The customization profile can include customization settings for a specified Web 2.0 application such as WIKI application . As shown in this example the settings can define the location within the application and a value for an entry to replace at the specified location. In this example the customization settings define a Universal Resource Identifier URI http yourWiki to replace the entry of WIKI page 1 section 1 and a definitive value concatenative to replace the resource entry of TTS Item 1.

Application of the customization settings to the original WIKI application can result in a customized WIKI application . As shown in this example the composition of the customized application remains unaltered. That is the presence and linking of the collections are unchanged. However the entries specified in the customization profile can be replaced with the values contained in the customization settings .

To illustrate the application of the customization settings the modified areas have been enlarged. Section of collection now contains override which corresponds to the value specified in the customization profile . Likewise collection now contains override .

As shown in this example the customization settings can contain values that can modify the performance of a speech processing system. In this example override specifies for the speech processing system to use a concatenative method for performing text to speech TTS operations. It should be emphasized that this level of control and customization for speech processing functions has traditionally been reserved only for developers of speech enabled applications and has not been accessible to end users.

It should also be noted that the application of customization settings shown in this example can also apply to settings contained within a state definition file which can also contain similar customization settings.

In system Web 2.0 clients can communicate with Web 2.0 servers utilizing a REST ATOM protocol. The Web 2.0 servers can serve one or more speech enabled applications where speech resources are provided by a Web 2.0 for Voice system . One or more of the speech enabled applications can include AJAX or other JavaScript code. In one embodiment the AJAX code can be automatically converted from WIKI or other syntax by a transformer of a server .

Communications between the Web 2.0 servers and system can be in accordance with REST ATOM protocols. Each speech enabled application can be associated with an atom container which specifies Web 2.0 items resources and media . One or more resource can correspond to a speech engine .

The Web 2.0 clients can be any client capable of interfacing with a Web 2.0 server . For example the clients can include a Web or voice browser as well as any other type of interface which executes upon a computing device. The computing device can include a mobile telephone a mobile computer a laptop a media player a desktop computer a two way radio a line based phone and the like. Unlike conventional speech clients the clients need not have a speech specific interface and instead only require a standard Web 2.0 interface. That is there are no assumptions regarding the client other than an ability to communicate with a Web 2.0 server using Web 2.0 conventions.

The Web 2.0 servers can be any server that provides Web 2.0 content to clients and that provides speech processing capabilities through the Web 2.0 for voice system . The Web 2.0 servers can include a WIKI server a BLOG server a MASHUP server a FOLKSONOMY server a social networking server and any other Web 2.0 server .

The Web 2.0 for voice system can utilize Web 2.0 concepts to provide speech capabilities. A server side interface is established between the voice system and a set of Web 2.0 servers . Available speech resources can be introspected and discovered via introspection documents which are one of the Web 2.0 items . Introspection can be in accordance with the APP specification or a similar protocol. The ability for dynamic configuration and installation is exposed to the servers via the introspection document.

That is access to Web 2.0 for voice system can be through a Web 2.0 server that lets users e.g. clients provide their own customizations personalizations. Appreciably use of the APP opens up the application interface to speech resources using Web 2.0 JAVA 2 ENTERPRISE EDITION J2EE WEBSPHERE APPLICATION SERVER WAS and other conventions rather than being restricted to protocols such as media resource control protocol MRCP real time streaming protocol RTSP or real time protocol RTP .

The Web 2.0 for Voice system is an extremely flexible solution that permits users of clients to customize numerous speech processing elements. Customizable speech processing elements can include speech resource availability request characteristics result characteristics media characteristics and the like. Speech resource availability can indicate whether a specific type of resource e.g. ASR TTS SIV Voice XML interpreter is available. Request characteristics can refer to characteristics such as language grammar voice attributes gender rate of speech and the like. The result characteristics can specify whether results are to be delivered synchronously or asynchronously. Result characteristics can alternatively indicate whether a listener for callback is to be supplied with results. Media characteristics can include input and output characteristics which can vary from a URI reference to an RTP stream. The media characteristics can specify a codec e.g. G711 a sample rate e.g. 8 KHz to 22 KHz and the like. In one configuration the speech engines can be provided from a J2EE environment such as a WAS environment. This environment can conform to a J2EE Connector Architecture JCA .

In one embodiment a set of additional facades can be utilized on top of Web 2.0 protocols to provide additional interface and protocol options e.g. MRCP RTSP RTP Session Initiation Protocol SIP etc. to the Web 2.0 for voice system . Use of facades can enable legacy access use of the Web 2.0 for voice system . The facades can be designed to segment the protocol from underlying details so that characteristics of the facade do not bleed through to speech implementation details. Functions such as the WAS 6.1 channel framework or a JCA container can be used to plug in a protocol which is not native to the J2EE environment . The media component of the container can be used to handle media storage delivery and format conversions as necessary. Facades can be used for asynchronous or synchronous protocols .

It should be noted that environment and its components can be expanded to encompass speech processing capabilities for speech enabled Web 2.0 applications such as those illustrated in system of .

The method of which includes steps can be performed in the context of environment . The method can begin in step where a user can establish a connection to a Web 2.0 server by accessing a client that includes a standard Web browser. In step the browser can convey information to the Web 2.0 server that identifies the user.

The user can then request a Web 2.0 application from the Web 2.0 server via the browser in step . In step the Web 2.0 server can query the customization data store for customization settings that are associated with the identified user and requested application. The existence of customization settings can be determined in step . An absence of customization settings associated with the identified user and requested application can execute step in which the Web 2.0 server serves the Web 2.0 application in its original format to the browser.

When customization exists step can be executed in which the Web 2.0 server can invoke a customization engine. In step the customization engine can apply the customization settings to the requested Web 2.0 application. The Web 2.0 server can then serve the customized application to the browser in step .

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

