---

title: Framework for development of integration adapters that surface non-static, type-safe service contracts to LOB systems
abstract: The claimed subject matter provides a system and/or a method that facilitates integrating two or more applications for secure sharing of data. A line of business (LOB) system can include a portion of metadata associated with a business application. An adapter can employ a dynamic service contract to the LOB system, wherein the service contract is a fluid contract constructed in real time from a portion of metadata selected within the LOB system. Moreover, the adapter can enable a client to access the portion of metadata selected via the service contract.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719335&OS=08719335&RS=08719335
owner: Microsoft Corporation
number: 08719335
owner_city: Redmond
owner_country: US
publication_date: 20070821
---
The evolution of computers and networking technologies from high cost low performance data processing systems to low cost high performance communication problem solving and entertainment systems has provided a cost effective and time saving means to lessen the burden of performing every day tasks such as correspondence bill paying shopping budgeting information and gathering etc. For example a computing system interfaced to the Internet by way of wire or wireless technology can provide a user with a channel for nearly instantaneous access to a wealth of information from a repository of web sites and servers located around the world. Such a system as well allows a user to not only gather information but also to provide information to disparate sources. As such online data storing and management has become increasingly popular.

Enterprise application integration can be the secure and orchestrated sharing of processes and or data between applications which were not originally designed for such sharing and or interaction. Conventionally a service technology e.g. web service etc. which are discussed below or an integration adapter can be written around an existing Line of Business LOB system to enable such applications to participate in integration processes. Specifically the service technology or the integration adapter can be written around specific application program interfaces APIs to enable various applications to be normalized for data consumption. These adapters have traditionally achieved this normalization by reducing the target systems to appear as messaging systems in order to capture LOB specific aspects in an actual message that can be transferred to a backend system e.g. a LOB application . Yet such adapter techniques are extremely unfeasible since exchanging messages cannot handle such high levels of abstraction and semantically rich data.

As mentioned various service technologies can enable data access in accordance with enterprise application integration. For instance such technologies can include web services simple object access protocol SOAP used to access web services web service description language WSDL specification to define available methods of a web service and other similar technologies such as representational state transfer REST JavaScript object notation JSON and other remote procedure call RPC and service contract definition languages. Software developers can leverage these technologies to create service applications useable by consumers and administrators to access data such as in a platform or framework. Data access can include addition deletion modification viewing and the like. The service technologies can present a service contract definition that defines one or more methods made available by the service a remote client can access the definition to initiate a request to the service for data access. Although such web services offer a more human friendly programming model and appeal of wide reach and support for several popular web service standard protocols such services require a static monolithic service contract declared. These static service contracts are problematic and often impossible in light of the numerous methods available desired and the ever changing informational request related to LOB systems.

The following presents a simplified summary of the innovation in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify key or critical elements of the claimed subject matter nor delineate the scope of the subject innovation. Its sole purpose is to present some concepts of the claimed subject matter in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation relates to systems and or methods that facilitate creating a dynamic service contract related to a line of business system and or metadata associated therewith. An adapter can generate a dynamic service contract that enables a client to expose a portion of metadata for consumption in real time. In general the adapter can allow metadata within a line of business LOB system to be viewed browsed and or selected in real time in order to create a service contract wherein such service contract exposes and or accesses the selected metadata. The metadata within the LOB system can be any suitable data related to a business application. For example the business application can be a back end application an existing business application a line of business LOB application e.g. accounting supply chain management resource planning etc. a business activity monitoring BAM application etc.

Furthermore the adapter can create the service contract in a manner that is consumer driven while enforcing strict typing and error checking. In other aspects of the claimed subject matter methods are provided that facilitate generating a plurality of dynamic type safe service contracts specific to numerous clients.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the claimed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the innovation may be employed and the claimed subject matter is intended to include all such aspects and their equivalents. Other advantages and novel features of the claimed subject matter will become apparent from the following detailed description of the innovation when considered in conjunction with the drawings.

The claimed subject matter is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject innovation. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject innovation.

As utilized herein terms component system handler factory builder extractor browser reader adapter writer and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program a function a library a subroutine and or a computer or a combination of software and hardware. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter. Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Now turning to the figures illustrates a system that facilitates creating a dynamic service contract related to a line of business system and or metadata associated therewith. The system can include an adapter that employs a dynamic contract in order to utilize a portion of metadata associated with an application related to a line of business LOB system . The adapter can be an adapter developed within an Adapter Framework not shown for a particular LOB system . The dynamic contract can be incarnated on demand as a consuming client dictates such contract. The adapter can provide real time enterprise application integration in which data can be shared in a secure and orchestrated manner. It is to be appreciated and understood that the adapter can be created by utilizing an Adapter Framework not shown wherein the Adapter Framework can be a library akin to a 32 bit programming model. The Adapter Framework can be utilized to write useful adapters e.g. the adapter for a particular system. The adapter can generate the dynamic contract e.g. a service contract a dynamic service contract a type safe service contract etc. that allows metadata to be exposed from the LOB system with a web service specific to a client request and or selection. In other words a client can utilize the adapter to evaluate available metadata associated with the LOB system wherein upon selection the adapter can generate the dynamic contract for metadata exposure. It is to be appreciated that the adapter can create fluid service contracts that allow metadata to be exposed provided on the fly to whichever client desires such information.

The LOB system can include a portion of metadata related to at least one business application. The business application can be but is not limited to a back end application an existing business application a line of business LOB application e.g. accounting supply chain management resource planning etc. a business activity monitoring BAM application etc. It is to be appreciated that the adapter can further communicate with a business network not shown wherein the business network can unite separate business applications LOB systems etc. into a coherent whole.

For example conventional techniques require a definition of a service contract prior to creating a web service which makes such application integration techniques with fixed and rigid characteristics as well as having to be predetermined. Yet several classes of applications can be difficult to predict based on the numerous methods calls to capture in a single interface. The system enables such methods calls to be dynamically created with a dynamic contract via the adapter wherein such dynamic contract can expose a portion of metadata associated with an application within the LOB system . For instance the dynamic contract can be layered above an application to be consumed by an integration application. In addition the system can retain type and provide strong type and type checking discussed in more detail below . Additionally a client can utilize the adapter to search browse and or inspect a portion of metadata within the LOB system in order to construct a tailored service contract e.g. dynamic contract .

In addition the system can include any suitable and or necessary interface component herein referred to as interface which provides various adapters connectors channels communication paths etc. to integrate the entity data model into virtually any operating and or database system s and or with one another. In addition the interface component can provide various adapters connectors channels communication paths etc. that provide for interaction with the executor component network service replacement network service and any other device and or component associated with the system .

The adapter can provide non static and type safe service contracts to the LOB system . In particular a client can search and inspect metadata associated with the LOB system in order to create a custom dynamic service contract. Moreover the adapter can enforce strict typing and error checking that is consumer driven. In order to facilitate providing such functionality the adapter can include an integration adapter that can interface services with the LOB system .

The adapter can produce any suitable number of dynamic contracts wherein each contract can correspond to particular client s . For example a first client can identify particular portions of metadata to utilize via the adapter . Thus the adapter enables client specific service contracts to be dynamically created during design time. As depicted the adapter can create any suitable number of service contracts such as contract to contract where N is a positive integer.

For example a client can utilize an API not shown and a run time not shown associated with the adapter to generate a dynamic service contract in real time during design time. Following such example the adapter can include a library not shown with a plurality of possible APIs and or services wherein the client can implement at least one method call from such library to provide at least one service. With such tools e.g. library API run time etc. the client can identify which dynamic service contracts to compose. Moreover such run time can interface to a communication foundation e.g. a unified framework to build secure reliable transacted and interoperable distributed applications to allow the composition of a type safe dynamic service contract. An adapter written to the adapter or Adapter Framework not shown can further manifest as communication foundation bindings which can be invoked via a communication foundation programming model a service programming model e.g. via a client proxy generated from a dynamic service contract etc.

It is to be appreciated that the adapter can be a layer in between the LOB system and the consuming client that allows a client to carve out and construct a strongly typed service contract dynamically from the live metadata in the LOB system . The adapter can enable the development of adapters which act as an uber service that can incarnate a portion of a service from an available backend metadata within the LOB system . In general the system can allow a client to manage with changing functionality within the LOB system without being intimately aware of such changes. Additionally the adapter provides a more consumer friendly experience for exposure of LOB systems with large and unwieldy metadata although the metadata may remain more or less static.

The adapter can include a run time not shown and a library not shown . As previously discussed the library can include a plurality of APIs and or services in which a client can implement services from such library. The run time can interface with a communication foundation to experience the composition of a type safe dynamic service contract. In addition the adapter can include various modules e.g. components builders handlers factories extractors browsers etc. . It is to be appreciated that the adapter can include any suitable number of modules and the depiction in is solely for illustration purposes. For example the adapter can implement at least one of the following a channel implementation component a metadata handler a metadata management component a web service definition language WSDL builder a metadata browser a metadata driven extensible markup language XML reader writer a connection management component a uniform resource identifier URI builder and or a credentials extractor . Moreover a developer and or a client can implement at least one of a connection factory a connection component and or a handler . Generally the metadata browser allows a client to browse search and or view metadata associated with the LOB system . Additionally the credentials extractor can return credentials associated with a portion of metadata within the LOB system . Furthermore the URI builder can build a uniform resource identifier. It is to be appreciated the other modules are described in more detail below.

The adapter can hook into a plurality of object model calls and retrieve metadata from the LOB system and or any other suitable backend system not shown . Moreover the adapter can describe an object model having such object model calls wherein the adapter can utilize. The object model can be surfaced to a user and or client through a user interface UI to enable a client and or user to select specific methods calls for a service contract. In general a user and or client can utilize the adapter to hook into the LOB system in order to retrieve a portion of metadata and or various methods calls. With such linkage the user and or client can select and or pick portions of metadata via service contracts to compose such contracts e.g. a contract is a collection of methods calls and or ties during design time.

For illustration purposes the system can be described in connection with a design time timing diagram in and a run time timing diagram in . It is to be appreciated that the timing diagram and the timing diagram are just exemplary illustrations in accordance with the subject innovation and are not to be limiting on the claimed subject matter. In general the timing diagram can enable a consuming client to inspect e.g. searching browsing etc. the LOB system to identify a service contract to carve out and or compose. It is to be understood that the adapter with the included library can expose any suitable number of methods calls within the LOB system . With the adapter a client can customize dynamic service contracts by selecting metadata to expose in real time. Thus the timing diagram illustrates a client in design time creating a customized contract with the client selected values e.g. metadata of the LOB system and or application related to the LOB system .

During design time a client can utilize the adapter to create and or compose a contract that is most relevant to a specific scenario. The adapter can provide extensive tooling support to search browse and inspect metadata within the LOB system . The adapter provides support for the following an object model that an adapter developer can write to to describe operations and parameters of remote procedure call RPC like legacy systems support for translating such types to XSD types e.g. to enable construction of a WSDL to express the service contract an object model that an adapter developer can leverage to convert XSD types back to LOB types with minimal XML manipulation and an in memory caching mechanism to improve performance of metadata resolution.

Turning to the timing diagram is illustrated that facilitates composing a dynamic service contract that exposes metadata hosted within a LOB system. At reference numeral a client can communicate a message MSG to the channel implementation component referred to as channel . At reference numeral the channel implementation component can communicate the message to the metadata handler referred to as MH . At reference numeral the metadata handler can communicate with the WSDL builder to get a WSDL. It is to be appreciated that the metadata management component can be utilized to get an operation beginning at reference numeral . At reference numeral the WSDL builder can get operation metadata MD from the metadata management component . At reference numeral the metadata management component can build a handler with the connection management component . It is to be appreciated that the metadata management component can utilize pool connection builder beginning at reference numeral . At reference numeral the connection management component can build a connection with the connection factory . At reference numeral the connection factory can return a connection to the connection management component .

Returning to reference numeral the connection management component can build a handler with the connection component . At reference numeral the connection component can return a handler e.g. the handler to the connection management component . Returning to reference numeral the metadata management component can receive the handler and can resolve operation MD with the MD handler . At reference numeral the MD handler can provide a LOB call method to the LOB system . At reference numeral the LOB system can return the requested data. Returning to reference numeral the MD handler can communicate the operation MD to the metadata management component . At reference numeral the metadata management component can resolve the type MD with the MD handler wherein at reference numeral a LOB call method is communicated to the LOB system . At reference numeral the LOB system can provide data to the MD handler . At reference numeral the MD handler can communicate type MD to the metadata management component . Returning to reference numeral the metadata management component can communicate the type MD to the WSDL builder wherein the WSDL can be built. At reference numeral the WSDL builder can communicate the WSDL to the MD handler wherein a reply can be built. At reference numeral the MD handler can communicate a MEX reply to the channel implementation component . At reference numeral the channel implementation component can communicate the reply to the client.

Turning to the timing diagram is illustrated that facilities utilizing a dynamic service contract to access a portion of metadata related to the LOB system. In general during the run time calls methods can be made into the backend system e.g. the LOB system utilizing the contracts created during design time. During the run time a client can retrieve portions of metadata from the LOB system with the calls methods that are identified selected to ensure that there is actually a call method for the service contract. In other words during the run time the adapter can collect metadata with associated parameters and utilize that information to invoke a particular call to the LOB system . This is what provides the strong typing and dynamic error checking that was referenced earlier.

At reference numeral a client can build the channel factory with the channel implementation component . Moreover the client can create a request channel and open such request with the channel implementation component . At reference numeral the channel implementation component can get the handler e.g. handler with the connection management component . It is to be appreciated that the channel implementation component can use pool connection builder. At reference numeral the connection management component can build connection with the connection factory . At reference numeral the connection factory can return a connection to the connection management component . Returning to reference numeral the connection management component can build a handler e.g. the handler with the connection component . At reference numeral the connection component can return the handler to the connection management component . At reference numeral the connection management component can return the handler to the channel implementation component .

At reference numeral the client can communicate a request message to the channel implementation component . At reference numeral the channel implementation component can execute the message to an outbound handler. At reference numeral get operation MD and or type MD can be requested to the metadata management component . It is to be appreciated that the message can be written by the metadata driven XML reader writer with the outbound handler at reference numeral . At reference numeral the metadata management component can build handler and communicate such handler to the connection management component . At reference numeral the connection management component can request to build the handler with the connection component wherein the connection component can return the handler to the connection management component at reference numeral . At reference numeral the connection management component can communicate the handler to the metadata management component .

At reference numeral the metadata management component can resolve operation MD and or type MD with the MD handler . At reference numeral the MD handler can communicate a LOB call and or method to the LOB system . At reference numeral the LOB system can communicate data to the MD handler . At reference numeral the MD handler can communicate the operation MD and or type MD to the metadata management component . At reference numeral the metadata management component can communicate the operation MD and or type MD to the outbound handler via the metadata driven XML reader writer . At reference numeral the outbound handler can communicate a LOB call and or method to the LOB system . At reference numeral the LOB system can communicate data to the outbound handler. It is to be appreciated that the message can be created by the metadata driven XML read writer at reference numeral . Continuing at reference numeral the outbound handler request get type MD to the metadata management component wherein the metadata management component can request a resolve type MD to the MD handler at reference numeral . At reference numeral the MD handler can communicate a LOB call to the LOB system . At reference numeral the LOB system can communicate data to the MD handler . At reference numeral the MD handler can return type MD to the metadata management component wherein the metadata management component can communicate type MD to the outbound handler at reference numeral . At reference numeral the outbound handler can communicate the message to the channel implementation component . At reference numeral the channel implementation component can communicate the message to the client.

It is to be understood that the intelligent component can provide for reasoning about or infer states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification explicitly and or implicitly trained schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the claimed subject matter.

A classifier is a function that maps an input attribute vector x x x x x xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

The adapter can further utilize a presentation component that provides various types of user interfaces to facilitate interaction between a user and any component coupled to the adapter . As depicted the presentation component is a separate entity that can be utilized with the adapter . However it is to be appreciated that the presentation component and or similar view components can be incorporated into the adapter and or a stand alone unit. The presentation component can provide one or more graphical user interfaces GUIs command line interfaces and the like. For example a GUI can be rendered that provides a user with a region or means to load import read etc. data and can include a region to present the results of such. These regions can comprise known text and or graphic regions comprising dialogue boxes static controls drop down menus list boxes pop up menus as edit controls combo boxes radio buttons check boxes push buttons and graphic boxes. In addition utilities to facilitate the presentation such as vertical and or horizontal scroll bars for navigation and toolbar buttons to determine whether a region will be viewable can be employed. For example the user can interact with one or more of the components coupled and or incorporated into the adapter .

The user can also interact with the regions to select and provide information via various devices such as a mouse a roller ball a keypad a keyboard a pen and or voice activation for example. Typically a mechanism such as a push button or the enter key on the keyboard can be employed subsequent entering the information in order to initiate the search. However it is to be appreciated that the claimed subject matter is not so limited. For example merely highlighting a check box can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via a text message on a display and an audio tone the user for information via providing a text message. The user can then provide suitable information such as alpha numeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a GUI and or API. In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and EGA with limited graphic support and or low bandwidth communication channels.

At reference numeral a type safe service contract can be generated wherein the service contract can expose the selected portion of metadata for consumption. In one example the consumption can be the utilization by a client a machine a disparate application a network etc. In general it is to be appreciated that the service contract can be dynamically created in order to access and or expose a portion of metadata from the LOB system. Thus the service contract can be non static and type safe.

In order to provide additional context for implementing various aspects of the claimed subject matter and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject innovation may be implemented. For example an adapter that facilitates application integration associated with line of business LOB systems and consuming clients as described in the previous figures can be implemented in such suitable computing environment. While the claimed subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the claimed subject matter may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the subject innovation may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the claimed subject matter includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the claimed subject matter can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject innovation. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the claimed subject matter. In this regard it will also be recognized that the innovation includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the claimed subject matter.

There are multiple ways of implementing the present innovation e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the advertising techniques of the invention. The claimed subject matter contemplates the use from the standpoint of an API or other software object as well as from a software or hardware object that operates according to the advertising techniques in accordance with the invention. Thus various implementations of the innovation described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In addition while a particular feature of the subject innovation may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes including has contains variants thereof and other similar words are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

