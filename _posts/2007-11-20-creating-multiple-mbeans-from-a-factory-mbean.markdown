---

title: Creating multiple MBeans from a factory MBean
abstract: Provided is a method for creating a unique class of Mbean in which a “parent” Mbean generates and manages multiple “child” Mbeans. When a user requests the functionality of a particular Mbean, a specific type of Mbean, or parent Mbean, is called. The parent Mbean is a factory method that, rather than executing the request, generates a child Mbean to execute the request. The child Mbean is assigned a name that distinguishes the child from other children of the same parent and the process that called the parent is provided with the name. In this manner, the calling process may use the assigned name to access the specific child Mbean for future requests and the child Mbean is employed to store client state information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07958145&OS=07958145&RS=07958145
owner: International Business Machines Corporation
number: 07958145
owner_city: Armonk
owner_country: US
publication_date: 20071120
---
The claimed subject matter relates generally to techniques relating to managed computer programming objects and more specifically to a Managed JavaBean Mbean programming object that is able to generate and manage additional Mbeans.

For the past several decades computers have become increasingly connected. Originally computers were stand alone devices each typically designed and programmed for a specific task. Soon however the advantages of combining computers into networks became apparent. Networks of computers were able to share resources such as printers and memory and eventually even able to share or distribute processing tasks. For example a search of a large database can often be broken into multiple mutually exclusive tasks by assigning different processors and or computers to search different segments of the database.

As computers have become increasingly interconnected techniques have been developed to enable multiple computers to work together. One such development is JAVA a high level programming language originally developed by Sun Microsystems Inc. of Mountain View Calif. JAVA enables programmers to develop code that is platform independent. Simply stated code written in the JAVA programming language is converted or interpreted into actual computer instructions corresponding to a particular computer by a JAVA Virtual Machine JVM that executes on the computer. In other words by installing a JVM that corresponds to particular computer hardware and the associated operating system a programmer can write code without regard to the particular hardware and operating system.

In addition to the increased connectivity of traditional computers many devices that incorporate computing components have also become both inter connected and JAVA enabled. Examples include Internet or web telephones cable boxes and televisions and application clients and servers. To facilitate the management of such JAVA enable resources JAVA Management Extensions JMX has been developed. JMX is a standard for managing and monitoring devices applications and services in a JAVA environment. JMX defines a management architecture design patterns application programming interfaces APIs and services for building web based distributed dynamic and modular solutions to manage JAVA resources and programming objects.

JMX provides for the creation and implementation of JAVA managed beans or Mbeans which are programming objects that represent objects to be managed. Each Mbean has a management interface that enables a user or program to monitor manage and be notified of changes to particular configuration parameters of a corresponding resource. For example an Mbean representing an application may include attributes and methods corresponding to the application s cache size. In this example reading a cacheSize attribute would return the application s cache size and writing a cacheSize attribute would update the size of the application s cache thus changing the application s configuration.

Although the JMX specification has been updated to include invocation in a multi user distributed environment a JMX Mbean is typically a stand alone object i.e. Mbeans are not organized into hierarchies related to function. In other words the current state of the art allows the end user to access a predefined Mbean but does not enable a user to generate a class of Mbeans in which individual Mbeans are managed by a parent Mbean and accessed based upon an assigned name. In addition Mbeans are singleton objects. Only a single Mbean of any particular type is instantiated and that single Mbean does not store any client state information. Each time the Mbean of a particular type is called client state information must be passed to the Mbean.

Provided is a method for creating a unique class of Mbean in which a parent Mbean generates and manages multiple child Mbeans. When a user requests the functionality of a particular Mbean a specific type of Mbean or parent Mbean is called. The parent Mbean is a factory method that rather than executing the request generates a child Mbean to execute the request. The child Mbean is assigned a name that distinguishes the child from other children of the same parent and the process that called the parent is provided with the name. In this manner the calling process may use the assigned name to access the specific child Mbean for future requests.

The disclosed technology extends the functionality of an Mbean by enabling one or more processes to tailor specific child Mbeans for unique functions. For example a first child Mbean may provide access to a one particular database while a second child Mbean provides access to a different database. Both the first and second Mbean are managed by a single parent Mbean. The ability to call two different Mbeans specified by assigned names and connected to different databases but otherwise similar simplifies Mbean management. Those with skill in the computing arts should appreciate that the disclosed technology may provide functionality in addition to database connectivity. For example the functionality provided may be connectivity to a communication channel or a particular processing task.

In addition the disclosed technology provides a means of maintaining state information in client Mbeans. The parent Mbean creates a child Mbean to store client state information including for example database connection information. When a particular method is called in the parent Mbean in conjunction with a key or child name the method call is redirected to the appropriate child Mbean which stores the client state information.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

Although described with particular reference to the JAVA Management Extensions JMX standard and the claimed subject matter can be implemented in any information technology IT system in which access to programming objects by multiple users of applications is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. Further although described with respect to JAVA management beans MBeans and the JAVA environment the claimed subject matter also is applicable to other types of managed modules applications or any other type of interdependent computer logic in which one programming object is created to generate and manage other programming objects. In other words the disclosed technology is applicable to any situation in which there is interdependent computer code and a user or developer needs or wants to ensure that the computing environment is highly reliable.

In addition the methods of the disclosed technology can be implemented in software hardware or a combination of software and hardware. The hardware portion can be implemented using specialized logic the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor personal computer PC or mainframe.

In the context of this document a memory or recording medium can be any means that contains stores communicates propagates or transports the program and or data for use by or in conjunction with an instruction execution system apparatus or device. Memory and recording medium can be but are not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device. Memory an recording medium also includes but is not limited to for example the following a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory and a portable compact disk read only memory or another suitable medium upon which a program and or data may be stored.

One embodiment in accordance with the claimed subject is directed to a programmed method for simplifying and extending the usability of a JAVA MBean. The term programmed method as used herein is defined to mean one or more process steps that are presently performed or alternatively one or more process steps that are enabled to be performed at a future point in time. The term programmed method anticipates three alternative forms. First a programmed method comprises presently performed process steps. Second a programmed method comprises a computer readable medium embodying computer instructions which when executed by a computer performs one or more process steps. Finally a programmed method comprises a computer system that has been programmed by software hardware firmware or any combination thereof to perform one or more process steps. It is to be understood that the term programmed method is not to be construed as simultaneously having more than one alternative form but rather is to be construed in the truest sense of an alternative form wherein at any given point in time only one of the plurality of alternative forms is present.

Turning now to the figures is a block diagram of one example of a computing system architecture that incorporates the claimed subject matter. Computing system includes a client computer which includes a central processing unit CPU coupled to a monitor a keyboard and a mouse . Monitor keyboard and mouse facilitate human interaction with computing system and client computer . Attached to CPU is a data storage component which may either be incorporated into CPU i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown .

Data storage is illustrated storing several exemplary Java Management bundles or Mbeans including a first Mbean or Mbean  a second Mbean or Mbean A and a third Mbean or Mbean B . It should be noted that a typical application or system may include many Mbeans but for the sake of simplicity only three are shown. Also stored on data storage are an operating system OS and a JAVA execution engine JXE . Stored in conjunction with Mbean  is a child table or Child Table  . Although illustrated as a part of Mbean  Child table  may be a stand alone entity that facilitates the creation and management of child Mbeans associated with in addition to children Mbeans of Mbean  other parent Mbeans not shown . Stored in conjunction with Mbean A and Mbean B are client state information objects CSIOs and respectively.

In the following description Mbean  Child table  Mbean A CSIO A Mbean B and CSIO B are objects created and managed in accordance with the claimed subject matter. Mbean  is a parent Mbean and Mbean A and Mbean B are child Mbeans of Mbean  . Child table  is employed by Mbean  for the creation and management of Mbean A and Mbean B . Mbean A and Mbean B are the same type of object but are different instantiations thus enabling Mbean A and Mbean B to each store their own client state information in CSIO A and CSIO B respectively. In the following example client state information includes data relating to their respective names and connections. The claimed subject matter is capable of storing many other types of client state information connection information is only used as one example. Mbean  Child table  Mbean A CSIO A Mbean B CSIO B OS and JXE are described in more detail below in conjunction with .

Client computer is connected to the Internet which is also connected to a server computer . Although in this example client computer and server are communicatively coupled via the Internet they could also be coupled through any number of communication mediums such as but not limited to a local area network LAN not shown and a direct wired connection.

As mentioned above in this example OS supports JXE and JXE implements the JAVA programming language which is a product of Sun Microsystems Inc. of Santa Clara Calif. JXE includes a JAVA runtime engine JRE not shown which executes JAVA programs JAVA programs are compiled into byte codes which are interpreted by the JRE of JXE rather then being compiled into native machine code. In this manner a particular JAVA program can be written to execute on any hardware platform and OS that includes a corresponding JXE like JXE .

JXE provides an execution environment for among other things Mbeans which in this example include Mbean  Mbean A and Mbean B which are managed by a JAVA Management Extension JMX . In the following description Mbeans and are used as examples of Mbeans that are managed by JMX according to the claimed subject matter. Although Mbeans and are illustrated as residing on hardware platform each could be located on different platforms e.g. stored in memory not shown associated with server and executed on server .

Attribute section includes a cmtoID attribute and a childMbeanIDs attribute . In this example instantiations of object are stored as child table  in conjunction with Mbean  . CmtoID attribute is a variable of type CMTObjectID that contains a reference to the particular instance of object . Each instance of object has a unique value for attribute that allows each instance to be uniquely identified. ChildMbeanIDs attribute is a variable of type Vector that stores references to instantiations of child Mbeans created in accordance with the disclosed technology. Mbean A and Mbean B are examples of examples of child Mbeans that are referenced by attribute . Both attribute and are described in more detail below in conjunction with .

Method section of object includes two exemplary functions or methods i.e. an AddConnection method and a TransmitStatement method . Only two methods are illustrated for the sake of simplicity. Those with skill in the programming arts should appreciate that an object such as object would typically include many additional methods including but not limited to constructors destructors and methods to set and get values for various attributes. It should also be understood that CMTO memory object is only one example of a memory object that may be used to implement the claimed subject matter. Other memory objects with fewer more and or different attributes and methods may be employed. In addition there are many ways other than employing object to implement the functionality and data storage of the claimed subject matter. For example the claimed subject matter may be implemented by means of a computer program in conjunction with a relational database.

AddConnection method is called during a Create Mbean block of a Setup Mbean process see . Method is called with one parameter a csiObject parameter which is variable of type CSIObject. Variables of type CSIObject are described in more detail below in conjunction with . Simply stated method is called when the user desires to create a new connection to a particular database not shown . Information in the csiObject parameter provides the information necessary for a parent Mbean such as Mbean  to create a new child Mbean such as Mbean A or Mbean B establish a connection to the specified database and provide to the new child Mbean client state information corresponding to the calling process.

TransmitStatement method is called during a Call Child Mbean block of a Call Mbean process see . Method is called with two 2 parameters a MbeanID parameter of type ChildMbeanID and a sqlStatement parameter of type String. MbeanID parameter enables Mbean  to identify the appropriate child Mbean to which to transmit the request which is embodied in the sqlStatement parameter. It should be noted what is not necessary to transmit is client state information or any information relating to the particular database to which the query is directed. Mbean  identifies the appropriate child Mbean with the MbeanID parameter and client state information was transmitted to the child when the child was created with AddConnection method . SqlStatement parameter stores an structured query language SQL statement that is transmitted to the database associated with a connectionID attribute see in expectation of a reply.

It should be noted that database connectivity and query is only one example of possible ways to employ the disclosed technology. Those with skill in the computing arts should appreciate many other applications that should benefit from an application of the claimed subject matter.

Attribute section of CSIO includes a csioID attribute a childMbeanID attribute a connectionID attribute a serverName attribute a portNumber attribute a databaseAlias attribute and a userName attribute . CsioID attribute is a variable of type CSIObjectID that contains a reference to the particular instance of object . Each instance of object has a unique value for attribute that allows each instance to be uniquely identified.

ChildMbeanID attribute which is a variable of type CSIObjectID identifies a specific Mbean with which object is associated. ConnectionID attribute which is a variable of type MbeanID identifies a particular connection with which the corresponding child Mbean is associated. ServerName attribute portNumber attribute databaseAlias attribute and userName attribute which are all variables of type String store information relating to the associated connection including the database name and specific information required to establish a connection.

Method section of object includes two exemplary functions or methods i.e. a ConnectToDatabase method and a TransmitQuery method . ConnectToDatabase method is a function called during Create Mbean block of Call Mbean process see that returns a value of type ConnectionID. Method employs the information stored in attributes and to establish a connection to the referenced database. The value returned is stored in connectionID attribute . TransmitQuery method is a function that returns a value of type String. The return value represents a reply from the database referenced in attribute to a query stored in the parameter of method i.e. sqlStatement a variable of type String.

Only two methods are illustrated for the sake of simplicity. Those with skill in the programming arts should appreciate that an object such as object would typically include many additional methods including but not limited to constructors destructors and methods to set and get values for various attributes. It should also be understood that CSIO is only one example of a memory object that may be used to implement the claimed subject matter. Other memory objects with fewer more and or different attributes and methods may be employed. In addition there are many ways other than employing object to implement the functionality and data storage of the claimed subject matter. For example the claimed subject matter may be implemented by means of a computer program in conjunction with a relational database.

Process starts in a Begin Setup Mbean block and proceeds immediately to an Import Libraries block . During block process retrieves from data storage any necessary library modules not shown that may be necessary to implement the desired functionality. During a Load Mbean Class block process retrieves from data storage appropriate class definitions to define an instantiation of a parent Mbean which in this example is an instantiation of Mbean  . During a Create Mbean block process creates Mbean  by allocating memory for the class definition retrieved during block and the libraries retrieved during block .

During a Create Child Table block process creates a child table which in this example is child table  . One example of the structure of a child table is a ChildTableObject described above in conjunction with . Once child table  is created process proceeds to an End Setup Mbean block in which process is complete.

If during the processing associated with blocks and an error occurs for example memory or a particular piece of necessary code is not available an asynchronous interrupt is generated. In that case process proceeds to a Catch Exception block . During block process halts any currently executing processing and proceeds to a transition point A. Once processing associated with the generation of an exception has executed process returns to End Setup Mbean block in which process is complete via a transmission point B. Transition points A B and the exception processing that occurs between points A and B are described in more detail below in conjunction with .

Process starts is a Begin Call Mbean block and proceeds immediately to a Wait for Call block . During block process is in a suspended state waiting until a request to access a child Mbean such as Mbean A or Mbean B is received. Once a request is received process proceeds to a Receive Call block and then to a Parse Call block . During block process makes a determination based upon information included with the specific call how to process with execution.

During a New Mbean block process determines whether of not the call received during block and parsed during block represents a request to access a child Mbean that does not yet exist. If so process proceeds to a Create Mbean block during which the requested child Mbean is created. Once the new Mbean is created during block process creates during an Assign ID block a childMbeanID to uniquely identify the Mbean. During a Create Table Entry block process adds information relating to the newly created Mbean into the ChildMbeanTableObject created during block of Setup Mbean process which in this example is child table  .

If during block process determines that the call received during block is associated with an already existing Mbean control proceeds to an Identify Child Mbean block . During block process correlates the received call to a particular child Mbean based upon information stored in child table  .

Following block and blocks control proceeds to a Call Child Mbean block . During block process makes a call to the child Mbean which was either identified during block or instantiated during block . It should be noted that if the call received during block was merely a request for the creation of a child Mbean process passes through block without making a call. Once the appropriate Mbean has been called or not if the call received during block was a request to create a child Mbean process proceeds to a Transmit Result block during which process transmits to the process that initiated the call received during block the results of the current processing. Results may include a query result as generated by a Run Qurey process described below in conjunction with a return of the childMbeanID generated during block so that the calling process may specify the created Mbean in any future calls or both. Process then returns to Wait for Call block and processing continues as described above.

Process is designed to operate continuously as long as Mbean  is executing. In the event Mbean  is terminated either explicitly by a user or automatically as result of another related process an asynchronous interrupt is generated. From interrupt process proceeds to a Cleanup block during which any necessary functions are executed to terminate Mbean  . Two examples of cleanup processes are the termination of any related child Mbeans and the release of any memory that may have been allocated during the creation and execution process . Finally process proceeds to an End Call Mbean block in which process is complete.

Process starts in a Begin Run Query block and proceeds immediately to a Get MbeanID Statement block . During block Mbean  via process receives a childMbeanID such as one stored in childMbean attribute in conjunction with a SQL statement that represents a request for data from a particular database. As explained above in conjunction with a childMbeanID uniquely identifies a particular child Mbean and thus in this example a connection to a particular database. During an Identify Mbean block process correlates the childMbeanID received during block with a particular child Mbean which in this example is Mbean A .

During a Transmit Statement block the SQL statement received during block is transmitted to Mbean A which was identified during block . During a Receive Result block process receives a reply form Mbean  in response to the query transmitted during block . During a Process Result block process evaluates the reply received during block i.e. determines whether the reply is a bona fide reply or an error message and acts accordingly. During a Transmit Result block process transmits the replay received during block or an error message generated during block to the process that originated the statement received during block . Finally process proceeds to an End Run Query block in which process is complete.

It should be noted that the processing of the disclosed technology enables a process to in this example to establish multiple database connections and have those connections be managed by Mbean  . This greatly simplifies what would otherwise be the management of multiple Mbeans. Those with skill in the computing arts should appreciate that the disclosed technology has application in many areas other than database connectivity.

Process is entered from process via transition point A and proceeds immediately to a Receive Exception block . During block process receives the exception caught during Catch Exception block of process . During a Print Message block an appropriate error message is transmitted to the user or process that initiated process . In addition a message may be displayed on monitor of client system . During a Print Trace block process logs a execution trace file so that if necessary the user or process that initiated process is able to determine the cause of the exception. Finally process enters transition point B which returns control to End Setup Mbean block as described above in conjunction with .

While the claimed subject matter has been shown and described with reference to particular embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the claimed subject matter including but not limited to additional less or modified elements and or additional less or modified blocks performed in the same or a different order.

