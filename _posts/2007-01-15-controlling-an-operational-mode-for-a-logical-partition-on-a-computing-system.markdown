---

title: Controlling an operational mode for a logical partition on a computing system
abstract: Methods, apparatus, and products are disclosed for controlling an operational mode for a logical partition on a computing system that include: receiving, in a hypervisor installed on the computing system, a processor compatibility mode for the logical partition and a firmware compatibility mode for the logical partition, the processor compatibility mode specifying a processor architecture version configured for the logical partition, and the firmware compatibility mode specifying a firmware architecture version configured for the logical partition; providing, by the hypervisor for the logical partition, a firmware interface in dependence upon the firmware compatibility mode; and providing, by the hypervisor for the logical partition, a processor interface in dependence upon the processor compatibility mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941803&OS=07941803&RS=07941803
owner: International Business Machines Corporation
number: 07941803
owner_city: Armonk
owner_country: US
publication_date: 20070115
---
The field of the invention is data processing or more specifically methods apparatus and products for controlling an operational mode for a logical partition on a computing system.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

One area in which computer software has evolved to take advantage of high performance hardware is a software tool referred to as a hypervisor. A hypervisor is a layer of system software that runs on the computer hardware beneath the operating system layer to allows multiple operating systems to run on a host computer at the same time. Hypervisors were originally developed in the early 1970 s when company cost reductions were forcing multiple scattered departmental computers to be consolidated into a single larger computer the mainframe that would serve multiple departments. By running multiple operating systems simultaneously the hypervisor brought a measure of robustness and stability to the system. Even if one operating system crashed the others would continue working without interruption. Indeed this even allowed beta or experimental versions of the operating system to be deployed and debugged without jeopardizing the stable main production system and without requiring costly second and third systems for developers to work on.

A hypervisor allows multiple operating systems to run on a host computer at the same time by providing each operating system with its own set of computer resources. These computer resources are typically virtualized counterparts to the physical resources of a computing system. A hypervisor allocates these resources to each operating system using logical partitions. A logical partition is a set of data structures and services that enables distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers. Using a logical partition therefore a hypervisor provides a layer of abstraction between a computer hardware layer of a computing system and an operating system layer.

Although a hypervisor provides added flexibility in utilizing computer hardware utilizing a hypervisor does have drawbacks. When a hypervisor provides resources to an operating system through a logical partition the resources provided through the logical partition may not match the resources required by the operating system. For example a hypervisor may attempt to provide processing resources according to a particular version of a processor architecture when the operating system only supports older versions of the processor architecture. Examples of processor architecture versions may include IBM s POWER5 which is an implementation of version 2.02 of the PowerPC processor architecture and IBM s POWER4 which is an implementation of version 2.01 of the PowerPC processor architecture. Moreover when a hypervisor migrates a logical partition from one computing system to a target computing system the computer resources provided by a hypervisor in the target computing system may not match the resources required by the operating system running in the partition. A mismatch between the resources provided by a hypervisor and the resources required by an operating system typically results in partition failure. As such readers will appreciate that room for improvement exists for controlling an operational mode for a logical partition on a computing system.

Methods apparatus and products are disclosed for controlling an operational mode for a logical partition on a computing system that includes receiving in a hypervisor installed on the computing system a processor compatibility mode for the logical partition and a firmware compatibility mode for the logical partition the processor compatibility mode specifying a processor architecture version configured for the logical partition and the firmware compatibility mode specifying a firmware architecture version configured for the logical partition providing by the hypervisor for the logical partition a firmware interface in dependence upon the firmware compatibility mode and providing by the hypervisor for the logical partition a processor interface in dependence upon the processor compatibility mode.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for controlling an operational mode for a logical partition on a computing system in accordance with the present invention are described with reference to the accompanying drawings beginning with . sets forth a block diagram of an exemplary computing system for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention. The exemplary computing system of operates a logical partition on a computing system according to embodiments of the present invention as follows A hypervisor installed on the computing system receives a processor compatibility mode for a logical partition and a firmware compatibility mode for the logical partition . The processor compatibility mode specifies a processor architecture version configured for the logical partition and the firmware compatibility mode specifies a firmware architecture version configured for the logical partition . The hypervisor of provides a firmware interface for the logical partition in dependence upon the firmware compatibility mode for the logical partition . The hypervisor provides a processor interface for the logical partition in dependence upon the processor compatibility mode for the logical partition .

In the example of the computing system includes logical partitions . The logical partition provides an execution environment for applications and an operating system . Each application is a set of computer program instructions implementing user level data processing. The operating system of is system software that manages the resources allocated to the logical partition by the hypervisor . The operating system performs basic tasks such as for example controlling and allocating virtual memory prioritizing the processing of instructions controlling virtualized input and output devices facilitating networking and managing a virtualized file system.

The hypervisor of is a layer of system software that runs on the computer hardware beneath the operating system layer to allows multiple operating systems to run on a host computer at the same time. The hypervisor provides each operating system with a set of computer resources using the logical partitions. A logical partition LPAR is a set of data structures and services provided to a single operating system that enables the operating system to run concurrently with other operating systems on the same computer hardware. In effect the logical partitions allow the distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers.

The hypervisor of establishes each logical partition using a combination of data structures and services provided by the hypervisor itself along with partition firmware . The partition firmware of is system software specific to the partition that is often referred to as a dispatchable hypervisor. The partition firmware maintains partition specific data structures and provides partition specific services to the operating system through application programming interface API . The hypervisor maintains data structures and provides services to the operating systems and partition firmware for each partition through API . Collectively the hypervisor and the partition firmware are referred to in this specification as firmware because both the hypervisor and the partition firmware are typically implemented as firmware. Together the hypervisor and the partition firmware enforce logical partitioning between one or more operating systems by storing state values in various hardware registers and other structures which define the boundaries and behavior of the logical partitions. Using such state data the hypervisor and the partition firmware may allocate memory to logical partitions route input output between input output devices and associated logical partitions provide processor related services to logical partition and so on. Essentially this state data defines the allocation of resources in logical partitions and the allocation is altered by changes the state data rather than by physical reconfiguration of hardware.

In order to allow multiple operating systems to run at the same time the hypervisor assigns virtual processors to the operating system running in the logical partition and schedules virtual processors on one or more physical processors of the computing system . A virtual processor is a subsystem that implements assignment of processor time to a logical partition. A shared pool of physical processors supports the assignment of partial physical processors in time slices to each logical partition. Such partial physical processors shared in time slices are referred to as virtual processors. A thread of execution is said to run on a virtual processor when it is running on the virtual processor s time slice of the physical processors. Sub processor partitions time share a physical processor among a set of virtual processors in a manner that is invisible to an operating system running in a logical partition. Unlike multiprogramming within the operating system where a thread can remain in control of the physical processor by running the physical processor in interrupt disabled mode in sub processor partitions the thread is still pre empted by the hypervisor at the end of its virtual processor s time slice in order to make the physical processor available to a different virtual processor.

In the exemplary computing system of the hypervisor includes a partition administration module that manages the logical partitions on the computing system . The partition administration module includes a set of computer program instructions for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention. The partition administration module generally operates a logical partition on a computing system according to embodiments of the present invention by receiving a processor compatibility mode for the logical partition and a firmware compatibility mode for the logical partition providing a firmware interface for the logical partition in dependence upon the firmware compatibility mode and providing a processor interface for the logical partition in dependence upon the processor compatibility mode .

The processor interface is a set of processor related data structures and services provided by the hypervisor the partition firmware and a physical processor for a logical partition. The processor interface may include processor related data structures and services regarding the operational mode of a processor the processor register values state information for processes and so on. As mentioned above the hypervisor provides a processor interface in dependence upon the processor compatibility mode . The processor compatibility mode represents a value that specifies a processor architecture version supported by a particular logical partition. Using the processor compatibility mode for a particular logical partition a hypervisor may provide a processor interface for the logical partition according to a processor architecture version supported by the operating system running in the partition. The hypervisor may adjust the processor interface for a logical partition by changing the values stored in a processor compatibility register .

The processor of includes the processor compatibility register for controlling the version of the processor architecture version according to which the processor operates. The processor compatibility register of is only accessible to super privileged code such as the hypervisor . By setting bits in the processor compatibility register the hypervisor may specify the processor architecture version according to which the processor operates. Consider for example the following 64 bit processor compatibility register in which the three low order bits are used to specify the processor architectural according to which the processor operates 

In the exemplary processor compatibility register above each defined bit represents a particular processor architecture version in a family of processor architectures. For example bit may represent the 2.01 version of the IBM PowerPC processor architecture bit may represent the 2.02 version of the IBM PowerPC processor architecture and bit may represent the 2.03 version of the IBM PowerPC processor architecture. Setting a defined bit disables the facilities that are new in the corresponding processor architecture version from the previous processor architecture version. Continuing with the exemplary IBM PowerPC processor architecture versions above storing a value of 0 . . . 000 in the exemplary processor compatibility register specifies operating the processor according to the 2.03 version because no processor facilities are disabled. Storing a value of 0 . . . 100 in the exemplary processor compatibility register specifies operating the processor according to the 2.02 version because the processor new processor facilities provided by the 2.03 version are disabled. Storing a value of 0 . . . 110 in the exemplary processor compatibility register specifies operating the processor according to the 2.01 version because the new processor facilities provided by the 2.03 and 2.02 versions are disabled. In addition to disabling facilities in the more recent versions of a processor architecture when defined bits are set setting a defined bit may also enable facilities in previous processor architectures that were removed in more recent versions. Readers will note that the exemplary processor compatibility register and the values described above are for explanation only and not for limitation.

The firmware interface is a set of non processor related data structures and services provided by the hypervisor and the partition firmware for a logical partition. The firmware interface may include non processor related data structures and services regarding for example firmware interfaces to computer memory computer buses adapters file systems networking input output devices and so on. The firmware interface may also include functions of APIs of the hypervisor and partition firmware . In IBM parlance such functions of the partition firmware API are referred to as Run Time Abstraction Services . As mentioned above the hypervisor provides a firmware interface in dependence upon the firmware compatibility mode . The firmware compatibility mode represents a value that specifies a firmware architecture version supported by a particular logical partition. Using the firmware compatibility mode for a particular logical partition a hypervisor may provide a firmware interface for the logical partition according to a firmware architecture version supported by the operating system running in the partition. The hypervisor may adjust the firmware interface for a logical partition by altering the value stored in the hypervisor compatibility variable . Altering the value stored in the hypervisor compatibility variable changes the data structures and APIs available to the operating system . Unlike the processor compatibility register the firmware interface is typically controlled via a software mechanism only. The software mechanisms include data structures that are presented to the operating system and the APIs provided by the hypervisor and partition firmware.

In some computing systems an older operating system running in the logical partition might not support the processor interface provided according to the processor compatibility mode configured in the logical partition. In such computing systems a hypervisor may have to adjust the processor interface to comport with processor compatibility modes supported by the operating system in the logical partition when the operating system loads during the boot sequence. In the exemplary system of therefore the partition administration module of the hypervisor operates a logical partition on a computing system according to embodiments of the present invention by receiving from the operating system running in the logical partition a set of processor compatibility modes supported by the operating system determining an effective processor compatibility mode in dependence upon the processor compatibility mode for the logical partition and the set of processor compatibility modes supported by the operating system and adjusting the processor interface provided to the logical partition in dependence upon the effective processor compatibility mode . The effective processor compatibility mode represents a value specifying the processor architecture version supported by the operating system that most closely matches the processor architecture version specified by the processor compatibility mode for the logical partition .

In a similar manner an older operating system running in the logical partition on some computing systems might not support the firmware interface provided according to the firmware compatibility mode configured in the logical partition. In such computing systems a hypervisor may have to adjust the firmware interface to comport with firmware compatibility modes supported by the operating system in the logical partition when the operating system loads during the boot sequence. In the exemplary system of therefore the partition administration module also operates a logical partition on a computing system according to embodiments of the present invention by receiving from the operating system running in the logical partition a set of firmware compatibility modes supported by the operating system determining an effective firmware compatibility mode in dependence upon the firmware compatibility mode for the logical partition and the set of firmware compatibility modes supported by the operating system and adjusting by the hypervisor the firmware interface provided to the logical partition in dependence upon the effective firmware compatibility mode . The effective firmware compatibility mode represents a value specifying the firmware architecture version supported by the operating system that most closely matches the firmware architecture version specified by the firmware compatibility mode for the logical partition .

The hypervisor of includes a partition mode table for storing the effective processor compatibility mode and the effective firmware compatibility mode for each logical partition on the computing system . Each record of the table associates a partition identifier for a logical partition with the effective processor compatibility mode and the effective firmware compatibility mode for the logical partition.

When the operating system of loads during the boot sequence the hypervisor of may ensure that the operating system supports the processor on which the operating system executes. In the exemplary system of therefore the partition administration module operates a logical partition on a computing system according to embodiments of the present invention by receiving during a boot sequence from an operating system in the logical partition a set of processor identifiers for computer processors supported by the operating system running in the logical partition identifying a processor performing the boot sequence for the operating system and administering the boot sequence in dependence upon the set of processor identifiers for computer processors supported by the operating system and the processor identifier performing the boot sequence for the operating system . The processor identifier is an identifier included in the processor for identifying the particular processor installed in the computing system . For example the processor identifier may identify a processor as an IBM POWER5 processor or an Intel Itanium 2 processor along with other identification data as will occur to those of skill in the art.

In the example of the hypervisor may migrate the logical partition from the computing system to another computing system because of predictive non fatal failures on computing system because additional resources are needed to operate the logical partition because hardware or firmware maintenance is required on the computing system or because of workload balancing needs. Before migrating the logical partition to the target computing system the hypervisor may ensure that the target computing system is capable of operating according to the processor compatibility mode and the firmware compatibility mode for the logical partition . The partition administration module of therefore includes a set of computer program instructions configured for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention by identifying a migration condition that specifies a condition for migrating the logical partition from the computing system to a target computing system identifying a processor architecture version for the target computing system identifying a firmware architecture version for the target computing system determining whether to migrate the logical partition from the computing system to the target computer system in dependence upon the migration condition the processor compatibility mode the firmware compatibility mode the processor architecture version for the target computing system and the firmware architecture version for the target computing system and administering migration of the logical partition from the computing system to the target computer system in dependence upon the determination. In such a manner the migration is allowed if the target computing system supports the processor compatibility mode and the firmware compatibility mode of the logical partition .

The hypervisor of includes a data communications subsystem for implementing data communication with a target computing system. In particular the data communications subsystem of implements data communications with a hypervisor installed on the target computing system. The data communications subsystem may implement the data communications with a target computing system according to the Transmission Control Protocol TCP the User Datagram Protocol UDP the Internet Protocol IP or any other data communications protocols as will occur to those of skill in the art. In addition the data communications subsystem may also implement data communications with a hypervisor on a target computing system through a pair of special logical partitions one on each computing system. Data is transferred between these special logical partitions according to the TCP IP protocols UDP IP protocols or any other data communications protocols as will occur to those of skill in the art.

In addition to migrating the logical partition to a target computing system that is capable of operating according to the processor compatibility mode and the firmware compatibility mode supported by the logical partition the hypervisor may further ensure that the target computing system includes a computer processor supported by the supported by the operating system . The partition administration module of therefore includes a set of computer program instructions configured for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention by receiving from the operating system running in the logical partition a set of processor identifiers for computer processors supported by the operating system identifying a migration condition specifying a condition for migrating the logical partition from the computing system to a target computing system identifying a processor of the target computing system determining whether to migrate the logical partition from the computing system to the target computer system in dependence upon the migration condition the identified processor for the target computing system and the set of processor identifiers for computer processors supported by the operating system and administering the migration of the logical partition from the computing system to the target computer system in dependence upon the determination.

In the example of the exemplary computing system is implemented as a blade server installed in a computer rack along with other blade servers . Each blade server installed in the rack of is a computer processing device that executes computer program instructions. Each blade server includes one or more computer processors and computer memory operatively coupled to the computer processors. The blade servers of are installed in server chassis that are in turn mounted on the computer rack . Readers will note that implementing the computing system as blade servers is for explanation and not for limitation. In fact the computing system of may be implemented as a workstation a node of a computer cluster a compute node in a parallel computer or any other implementation as will occur to those of skill in the art.

Controlling an operational mode for a logical partition on a computing system in accordance with the present invention is generally implemented with computers that is with automated computing machinery. In the system of for example all the nodes servers and communications devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computing system useful in controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention. The computing system of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the computing system.

Stored in RAM are logical partitions and a hypervisor that exposes an API . Each logical partition is a set of data structures and services that enables distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers. The logical partition includes application an operating system and partition firmware that exposes an API . The hypervisor includes a partition administration module virtual processors a data communications subsystem and other components not shown. Operating systems useful in computing systems according to embodiments of the present invention include UNIX Linux Microsoft XP IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art.

The applications the operating system the partition firmware and the hypervisor including the partition administration module the virtual processors and the data communications subsystem illustrated in are software components that is computer program instructions that operate as described above with reference to . The logical partitions the applications the operating system the partition firmware and the hypervisor including the partition administration module the virtual processors and the data communications subsystem in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary computing system of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in computing systems useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in computing systems useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

Although not depicted in the exemplary computing system of the bus adapter may also include drive electronics for a video bus that supports data communication between a video adapter and the other components of the computing system . does not depict such video components because a computing system is often implemented as a blade server installed in a server chassis or a node in a parallel computer with no dedicated video support. Readers will note however that computing systems useful in embodiments of the present invention may include such video components.

The exemplary computing system of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary computing system . Disk drive adapter connects non volatile data storage to the exemplary computing system in the form of disk drive . Disk drive adapters useful in computing systems include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a computing system as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary computing system of includes one or more input output I O adapters . I O adapters in computing systems implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. Although not depicted in the example of computing systems in other embodiments of the present invention may include a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. A video adapter is typically connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary computing system of includes a communications adapter for data communications with other computing systems and for data communications with a data communications network . Such data communications may be carried out through Ethernet connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computing system sends data communications to another computing system directly or through a data communications network. Examples of communications adapters useful for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

For further explanation sets forth a flow chart illustrating an exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention. The method of includes configuring for a logical partition a processor compatibility mode and a firmware compatibility mode . The processor compatibility mode represents a value that specifies a processor architecture version configured for the logical partition and the firmware compatibility mode represents a value that specifies a firmware architecture version configured for the logical partition . The processor compatibility mode may specify a processor architecture version configured for the logical partition using a value scheme similar to the processor compatibility register as discussed above. Similarly the firmware compatibility mode may specify a firmware architecture version configured for the logical partition using a value scheme similar to the processor compatibility register as discussed above. A system administrator may configure the processor compatibility mode and the firmware compatibility mode for the logical partition when the administrator establishes a partition configuration definition by storing values for the processor compatibility mode and the firmware compatibility mode in predefined fields of the partition configuration definition.

The method of also includes receiving in a hypervisor installed on the computing system a processor compatibility mode for the logical partition and a firmware compatibility mode for the logical partition . The hypervisor may receive the processor compatibility mode and the firmware compatibility mode according to the method of by retrieving the processor compatibility mode and the firmware compatibility mode from predefined fields in the partition configuration definition.

The method of includes providing by the hypervisor for the logical partition a firmware interface in dependence upon the firmware compatibility mode . The hypervisor may provide a firmware interface for the logical partition in dependence upon the firmware compatibility mode according to the method of by storing the value for the firmware compatibility mode in hypervisor memory such as for example a hypervisor compatibility variable . Based on the value stored in the hypervisor compatibility variable the hypervisor and the partition firmware may provide data structures and APIs to an operating system running in the logical partition such that the data structures and the APIs emulate the version of firmware architecture specified by the values stored in the hypervisor compatibility variable .

The method of also includes providing by the hypervisor for the logical partition a processor interface in dependence upon the processor compatibility mode . The hypervisor may provide a processor interface for the logical partition in dependence upon the processor compatibility mode according to the method of by storing the value for the processor compatibility mode in the processor compatibility register of the physical processor when executing computer program instructions for the logical partition . Based on the value stored in the processor compatibility register the hypervisor may provide the data structures and APIs to an operating system and applications running in the logical partition such that the data structures and APIs emulate the processor architecture version specified by the value stored in the processor compatibility register . The hypervisor may also dispatch virtual processors for an operating system running on the logical partition to the physical processor to execute computer instructions according to the processor architecture version specified by the value stored in the processor compatibility register .

As mentioned above a hypervisor occasionally migrates a logical partition from one computing system to another because of a failure on the host computing system because the host computing system can provide adequate computing resources to support the logical partition because of system maintenance or because of workload balancing needs. When a hypervisor migrates a logical partition to a target computing system the hypervisor may determine whether to migrate the logical partition from the computing system to the target computer system in dependence upon the processor architecture version for the target computing system and the firmware architecture version for the target computing system. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention that includes identifying a migration condition by a hypervisor . The migration condition of represents a condition for migrating the logical partition from the computing system to a target computing system.

When the hypervisor migrates logical partition because of a failure on the computing system the hypervisor may identify a migration condition according to the method of by repeatedly detecting system failures and comparing the number of detected failures to a predetermined threshold. Examples of a system failure may include encountering an error when reading or writing to a block of computer memory encountering an error when executing computer program instructions or any other system error as will occur to those of skill in the art. In such an embodiment the hypervisor may identify that a migration condition is satisfied when the number of detected failures is greater than the predetermined threshold.

When the hypervisor migrates logical partition because the host computing system can provide adequate computing resources to support the logical partition the hypervisor may identify a migration condition according to the method of by repeatedly measuring system performance and comparing the measured performance to a predetermined threshold. Examples of system performance may include the rate at which page swaps occur the number of processes waiting for execution or any other system error as will occur to those of skill in the art. In such an embodiment the hypervisor may identify that a migration condition is satisfied when system performance metrics fall below or rise above the predetermined threshold depending on the particular aspect of system performance measured.

The method of includes identifying by the hypervisor a processor architecture version for the target computing system. The hypervisor may identify a processor architecture version for the target computing system according to the method of by requesting a hypervisor installed on the target computing system to retrieve a processor architecture version identifier from a processor identification register and return the processor architecture version identifier to the hypervisor installed on the computer system . The hypervisor may issue such a request through a data communications connection established with a hypervisor installed on the target computing system according to a data communications protocol such as for example TCP IP UDP IP or any other data communications protocols as will occur to those of skill in the art. In addition the hypervisor may also retrieve the retrieve a processor architecture version identifier using a pair of special logical partitions used for data communications between the hypervisor and the hypervisor installed on the target computing system.

The method of also includes identifying by the hypervisor a firmware architecture version for the target computing system. The hypervisor may identify a firmware architecture version for the target computing system according to the method of by requesting a hypervisor installed on the target computing system to retrieve the firmware architecture version from firmware installed in the target computing system and return the firmware architecture version to the hypervisor installed on the computer system . The hypervisor may issue such a request through a data communications connection established with a hypervisor installed on the target computing system according to a data communications protocol such as for example TCP IP UDP IP or any other data communications protocols as will occur to those of skill in the art. The hypervisor may also retrieve the retrieve a firmware architecture version identifier using a pair of special logical partitions used for data communications between the hypervisor and the hypervisor installed on the target computing system.

The method of includes determining by the hypervisor whether to migrate the logical partition from the computing system to the target computer system in dependence upon the migration condition the processor compatibility mode the firmware compatibility mode the processor architecture version for the target computing system and the firmware architecture version for the target computing system. The hypervisor may determine whether to migrate the logical partition from the computing system to the target computer system according to the method of by determining whether the processor architecture version for the target computing environment identified by identifier matches the processor architecture version specified by the processor compatibility mode for the logical partition and by determining whether the firmware architecture version for the target computing environment matches the firmware architecture version specified by the firmware compatibility mode for the logical partition . The hypervisor of may determine to migrate the logical partition from the computing system to the target computer system if the processor architecture version identified by identifier matches the processor architecture version specified by the processor compatibility mode and the firmware architecture version matches the firmware architecture version specified by the firmware compatibility mode . In contrast the hypervisor of may determine not to migrate the logical partition from the computing system to the target computer system if the processor architecture version identified by identifier does not match the processor architecture version specified by the processor compatibility mode or the firmware architecture version does not match the firmware architecture version specified by the firmware compatibility mode . The hypervisor of may store an indication of whether to migrate the logical partition from the computing system to the target computer system in determination .

Although is discussed with reference to the hypervisor determining whether to migrate the logical partition from the computing system to the target computer system readers will note that a determination whether to migrate the logical partition may be carried out by the hypervisor installed on the target computing system. In such an embodiment the hypervisor transmits the processor compatibility mode and the firmware compatibility mode to the hypervisor of the target computing system and allows the hypervisor of the target computing system to determine whether to migrate the logical partition from the computing system to the target computer system in dependence upon the processor compatibility mode the firmware compatibility mode the processor architecture version for the target computing system and the firmware architecture version for the target computing system. The hypervisor of the target computing system may then return to the hypervisor a value indicating the determination whether to migrate the logical partition.

The method of also includes administering by the hypervisor migration of the logical partition from the computing system to the target computer system in dependence upon the determination . The hypervisor may administer migration of the logical partition from the computing system to the target computer system according to the method of the by allowing the migration of the logical partition from the computing system to the target computer system if the determination indicates that the hypervisor determined to migrate the logical partition . The hypervisor may also administer migration of the logical partition from the computing system to the target computer system according to the method of the by preventing the migration of the logical partition from the computing system to the target computer system if the determination indicates that the hypervisor determined not to migrate the logical partition . In such a manner administering migration of the logical partition advantageously prevents the migration of the logical partition to a target computing system not supported by the logical partition and advantageously reduces the likelihood of a partition failure during migration.

In addition to preventing the migration of a logical partition to a target computing system not supported by the logical partition a hypervisor may also prevent the migration if the target computing environment is not supported by an operating system running in the logical partition. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention that includes receiving in the hypervisor from an operating system running in the logical partition a set of processor identifiers for computer processors supported by the operating system . The hypervisor may receive a set of processor identifiers for computer processors supported by the operating system running in the logical partition according to the method of by retrieving from the operating system the set of processor identifiers for computer processors supported by the operating system using functions provided by an API of the operating system .

The method of also includes identifying a migration condition by the hypervisor . The migration condition of represents a condition for migrating the logical partition from the computing system to a target computing system. The hypervisor may identify a migration condition according to the method of in the same manner as identifying a migration condition described with reference to .

The method of includes identifying by the hypervisor a processor of the target computing system. The hypervisor may identify a processor of the target computing system according to the method of by requesting a hypervisor installed on the target computing system to retrieve a processor identifier from a processor identification register and return the processor identifier to the hypervisor installed on the computer system . The hypervisor may issue such a request through a data communications connection established with a hypervisor installed on the target computing system according to a data communications protocol such as for example TCP IP UDP IP or any other data communications protocols as will occur to those of skill in the art. The hypervisor may also retrieve the processor identifier for the processor of the target computing system using a pair of special logical partitions used for data communications between the hypervisor and the hypervisor installed on the target computing system.

The method of also includes determining by the hypervisor whether to migrate the logical partition from the computing system to the target computer system in dependence upon the migration condition the identified processor for the target computing system and the set of processor identifiers for computer processors supported by the operating system . The hypervisor may determine whether to migrate the logical partition from the computing system to the target computer system according to the method of by determining whether the processor identifier for the target computing system matches one of the processor identifiers in the set of processor identifiers for computer processors supported by the operating system . The hypervisor of may determine to migrate the logical partition from the computing system to the target computer system if the processor identifier for the target computing system matches one of the processor identifiers in the set of processor identifiers. In contrast the hypervisor of may determine not to migrate the logical partition from the computing system to the target computer system if the processor identifier for the target computing system does not match one of the processor identifiers in the set of processor identifiers. In some embodiments the operating system may indicate that it is allowed to migrate to an implementation of a processor architecture version as long as there is no operating system errata associated with the processor implementation. So even though there may be processors on the target system capable of running at the processor architecture level of the effective processor compatibility mode the hypervisor may still determine not to migrate the partition due to operating system errata that exists for the operating system regarding the processor installed in the target computing system. The hypervisor of may store an indication of whether to migrate the logical partition from the computing system to the target computer system in determination .

Although is discussed with reference to the hypervisor determining whether to migrate the logical partition from the computing system to the target computer system readers will note that a determination whether to migrate the logical partition may be carried out by the hypervisor installed on the target computing system. In such an embodiment the hypervisor transmits the set of processor identifiers to the hypervisor of the target computing system and allows the hypervisor of the target computing system to determine whether to migrate the logical partition from the computing system to the target computer system in dependence upon the processor for the target computing system and the set of processor identifiers for processors supported by operating system . The hypervisor of the target computing system may then return to the hypervisor a value indicating the determination whether to migrate the logical partition.

The method of includes administering by the hypervisor the migration of the logical partition from the computing system to the target computer system in dependence upon the determination . The hypervisor may administer the migration of the logical partition according to the method of by allowing the migration of the logical partition from the computing system to the target computer system if the determination indicates that the hypervisor determined to migrate the logical partition . The hypervisor may also administer the migration of the logical partition according to the method of by preventing the migration of the logical partition from the computing system to the target computer system if the determination indicates that the hypervisor determined not to migrate the logical partition . In such a manner administering migration of the logical partition advantageously prevents the migration of the logical partition to a target computing system having a processor not supported by the operating system running in the logical partition .

Instead of using the processors supported by an operating system running in a logical partition to determine whether to migrate the logical partition to a target computing system the hypervisor may also use the processors supported by an operating system running in a logical partition to administer the boot sequence of the logical partition. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention that includes receiving during a boot sequence in the hypervisor from an operating system in the logical partition a set of processor identifiers for computer processors supported by the operating system running in the logical partition .

A boot sequence is the set of operations performed by the computing system from the time the system is turned on until the time that the operating system completes its startup operations. The hypervisor may receive during a boot sequence from an operating system in the logical partition a set of processor identifiers for computer processors supported by the operating system running in the logical partition according to the method of by retrieving from the operating system the set of processor identifiers for computer processors supported by the operating system using functions provided by an interface between the operating system and the firmware.

The method of also includes identifying by the hypervisor a processor performing the boot sequence for the operating system . The hypervisor may identify a processor performing the boot sequence for the operating system according to the method of by retrieving a processor identifier from a processor identification register of the processor performing the boot sequence for the operating system .

The method of includes administering by the hypervisor the boot sequence in dependence upon the set of processor identifiers for computer processors supported by the operating system and the processor performing the boot sequence for the operating system . The hypervisor may administer the boot sequence according to the method of by determining whether the processor identifier of the processor performing the boot sequence matches one of the processor identifiers in the set of processor identifiers for computer processors supported by the operating system and allowing the boot sequence to continue if the processor identifier of the processor performing the boot sequence matches one of the processor identifiers for the set of processor identifiers for computer processors supported by the operating system . The hypervisor may also administer the boot sequence according to the method of by aborting the boot sequence if the processor identifier of the processor performing the boot sequence does not match one of the processor identifiers in the set of processor identifiers for computer processors supported by the operating system . In some embodiments the operating system may indicate that it is allowed to boot on an implementation of a processor architecture version as long as there is no operating system errata associated with the processor implementation. So even though the processor performing the boot sequence is a suitable candidate for the operating system to boot on the hypervisor may still determine to abort the boot sequence due to operating system errata that exists for the operating system regarding the processor performing the boot sequence. Administering the boot sequence as described above advantageously prevents the operating system from booting up in the logical partition when the processor performing the boot sequence is not supported by the operating system running in the logical partition .

As discussed above with reference to the hypervisor may provide a processor interface for a logical partition based on the processor compatibility mode configured in the logical partition. In some computing systems however an older operating system running in the logical partition might not support the processor interface provided according to the processor compatibility mode configured in the logical partition. In such computing systems a hypervisor may have to adjust the processor interface to comport with processor compatibility modes supported by the operating system in the logical partition. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention that includes adjusting by the hypervisor the processor interface provided to the logical partition . In the example of the logical partition includes a processor compatibility mode and a firmware compatibility mode . A system administrator may configure the processor compatibility mode and the firmware compatibility mode as discussed above with reference to .

The method of includes receiving in the hypervisor from an operating system running in the logical partition a set of processor compatibility modes supported by the operating system . The hypervisor may receive a set of processor compatibility modes supported by the operating system according to the method of by retrieving from the operating system the set of processor compatibility modes supported by the operating system using functions provided by an API of the operating system .

The method of also includes determining by the hypervisor an effective processor compatibility mode in dependence upon the processor compatibility mode for the logical partition and the set of processor compatibility modes supported by the operating system . The effective processor compatibility mode represents a value specifying the processor architecture version supported by the operating system that most closely matches the processor architecture version specified by the processor compatibility mode for the logical partition . The hypervisor may determine an effective processor compatibility mode according to the method of by comparing the processor compatibility mode received for the logical partition with the set of processor compatibility modes supported by the operating system and selecting as the effective processor compatibility mode the processor compatibility mode from the set that matches the processor compatibility mode for the logical partition. If no match exists the hypervisor may determine an effective processor compatibility mode according to the method of by selecting as the effective processor compatibility mode the processor compatibility mode from the set that specifies the most recent processor architecture version.

The method of also includes adjusting by the hypervisor the processor interface provided to the logical partition in dependence upon the effective processor compatibility mode . The hypervisor may adjust the processor interface provided to the logical partition according to the method of by storing the value for the effective processor compatibility mode in a processor compatibility register of the physical processor early in boot sequence for the logical partition . The hypervisor may also adjust the processor interface provided to the logical partition according to the method of by restarting the boot sequence for the logical partition with the value for the effective processor compatibility mode stored in the processor compatibility register of the physical processor . Adjusting the processor interface provided to the logical partition as described above advantageously prevents the hypervisor from providing an unsupported processor interface to the operating system running in the logical partition in the event that a system administrator wants to run an older version of the operating system in the logical partition configured for a processor compatibility mode that is not supported by the operating system.

The method of includes migrating by the hypervisor the logical partition from the computing system to a target computing system having a processor that supports the effective processor compatibility mode . The hypervisor may migrate the logical partition from the computing system to a target computing system by identifying a migration condition determining whether the target computing system has a processor that supports the processor architecture version specified by the effective processor compatibility mode and transmitting the logical partition data to a hypervisor installed on the target computing system if the migration condition is satisfied and the target computing system has a processor that supports the processor architecture version specified by the effective processor compatibility mode . The hypervisor may transmit partition data through a data communications connection established with a hypervisor installed on the target computing system according to a data communications protocol such as for example TCP IP UDP IP or any other data communications protocols as will occur to those of skill in the art. The hypervisor may also transmit partition data using a pair of special logical partitions used for data communications between the hypervisor and the hypervisor installed on the target computing system.

Readers will note that determining whether the target computing system has a processor that supports the processor architecture version specified by the effective processor compatibility mode may be carried out by either the hypervisor installed on the computing system or the hypervisor installed on the target computing system. When carried out by the hypervisor installed on the target computing system the hypervisor of computing system transmits the effective processor compatibility mode to the hypervisor of the target computing system and allows the hypervisor installed on the target computing system to make the determination whether to migrate the logical partition. After determining whether to migrate the logical partition the hypervisor of the target computing system returns a result of the determination to the hypervisor installed on the computing system .

As discussed above with reference to the hypervisor may provide a firmware interface for a logical partition based on the firmware compatibility mode configured in the logical partition. In some computing systems however an older operating system running in the logical partition might not support the firmware interface provided according to the firmware compatibility mode configured in the logical partition. In such computing systems a hypervisor may have to adjust the firmware interface to comport with firmware compatibility modes supported by the operating system in the logical partition. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for controlling an operational mode for a logical partition on a computing system according to embodiments of the present invention that includes adjusting by the hypervisor the firmware interface provided to the logical partition . In the example of the logical partition includes a processor compatibility mode and a firmware compatibility mode . A system administrator may configure the processor compatibility mode and the firmware compatibility mode as discussed above with reference to .

The method of includes receiving in the hypervisor from an operating system running in the logical partition a set of firmware compatibility modes supported by the operating system . The hypervisor may receive from an operating system running in the logical partition a set of firmware compatibility modes supported by the operating system according to the method of by retrieving from the operating system the set of firmware compatibility modes supported by the operating system using functions provided by an API of the operating system .

The method of also includes determining by the hypervisor an effective firmware compatibility mode in dependence upon the firmware compatibility mode for the logical partition and the set of firmware compatibility modes supported by the operating system . The effective firmware compatibility mode represents a value specifying the firmware architecture version supported by the operating system that most closely matches the firmware architecture version specified by the firmware compatibility mode for the logical partition . The hypervisor may determine an effective firmware compatibility mode according to the method of by comparing the firmware compatibility mode received for the logical partition with the set of firmware compatibility modes supported by the operating system and selecting as the effective firmware compatibility mode the firmware compatibility mode from the set that matches the firmware compatibility mode for the logical partition . If no match exists the hypervisor may determine an effective firmware compatibility mode according to the method of by selecting as the effective firmware compatibility mode the firmware compatibility mode from the set that specifies the most recent firmware architecture version.

The method of also includes adjusting by the hypervisor the firmware interface provided to the logical partition in dependence upon the effective firmware compatibility mode . The hypervisor may adjust the firmware interface provided to the logical partition by the hypervisor and partition firmware according to the method of by storing the value for the effective firmware compatibility mode in a hypervisor compatibility variable early in boot sequence for the logical partition . The hypervisor may also adjust the firmware interface provided to the logical partition according to the method of by restarting the boot sequence for the logical partition with the value for the effective firmware compatibility mode stored in the hypervisor compatibility variable . Adjusting the firmware interface provided to the logical partition as described above advantageously prevents the hypervisor from providing an unsupported firmware interface to the operating system running in the logical partition in the event that a system administrator wants to run an older version of the operating system in the logical partition configured for a firmware compatibility mode that is not supported by the operating system.

The method of includes migrating by the hypervisor the logical partition from the computing system to a target computing system having firmware that supports the effective firmware compatibility mode . The hypervisor may migrate the logical partition from the computing system to a target computing system according to the method of by identifying a migration condition determining whether the target computing system has firmware that supports the firmware architecture version specified by the effective firmware compatibility mode and transmitting the logical partition data to a hypervisor installed on the target computing system if the migration condition is satisfied and the target computing system has firmware that supports the firmware architecture version specified by the effective firmware compatibility mode . The hypervisor may transmit partition data through a data communications connection established with a hypervisor installed on the target computing system according to a data communications protocol such as for example TCP IP UDP IP or any other data communications protocols as will occur to those of skill in the art. The hypervisor may also transmit partition data using a pair of special logical partitions used for data communications between the hypervisor and the hypervisor installed on the target computing system.

Readers will note that determining whether the target computing system has firmware that supports the firmware architecture version specified by the effective firmware compatibility mode may be carried out by either the hypervisor installed on the computing system or the hypervisor installed on the target computing system. When carried out by the hypervisor installed on the target computing system the hypervisor of the computing system transmits the effective firmware compatibility mode to the hypervisor of the target computing system and allows the hypervisor installed on the target computing system to make the determination whether to migrate the logical partition. After determining whether to migrate the logical partition the hypervisor of the target computing system returns a result of the determination to the hypervisor installed on the computing system .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for controlling an operational mode for a logical partition on a computing system. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

