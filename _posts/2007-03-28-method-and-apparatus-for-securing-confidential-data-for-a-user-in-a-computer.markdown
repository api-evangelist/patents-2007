---

title: Method and apparatus for securing confidential data for a user in a computer
abstract: Method and apparatus for securing confidential data related to a user in a computer is described. In one example, rules are obtained that provide a representation of the confidential data. A storage system in the computer is searched using the rules to detect a file having at least a portion of the confidential data. The file is encrypted the in-place within the storage system using symmetric encryption based on a secret associated with the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782403&OS=08782403&RS=08782403
owner: Symantec Corporation
number: 08782403
owner_city: Mountain View
owner_country: US
publication_date: 20070328
---
Embodiments of the invention generally relate to computers. More specifically this disclosure relates to a method and apparatus for securing confidential data for a user in a computer.

More and more information is being stored in digital form on a computer or in a computer network. For example users are storing more and more personal and confidential information on their computers. Such confidential information however is susceptible to unauthorized access by other users of the computers. If the computer is connected to a network such as the Internet such confidential information may be even more susceptible to unauthorized access. As such users desire to protect their confidential data in digital form.

Current implementations for protecting confidential data for a user are based on the user identifying what files he or she wants to protect. Once the files are identified by the user a tool is used to protect the files. For example the files may be encrypted. In such implementations it is up to the user to identify the files having confidential data and to initiate file protection. This results in the user having to constantly manage sensitive files. Moreover a user may inadvertently forget to protect the files using the provided tool. Accordingly there exists a need in the art for a method and apparatus for securing confidential data for a user on a computer that addresses the aforementioned problems.

Method and apparatus for securing confidential data related to a user in a computer is described. In one embodiment rules are obtained that provide a representation of the confidential data. A storage system in the computer is searched using the rules to detect a file having at least a portion of the confidential data. The file is encrypted the in place within the storage system using symmetric encryption based on a secret associated with the user.

The memory stores processor executable instructions and or data that may be executed by and or used by the processor . These processor executable instructions may comprise hardware firmware software and the like or some combination thereof. Modules having processor executable instructions that are stored in the memory may include an identity manager security agent and information vault agent . The computer may be programmed with an operating system which may include OS 2 Java Virtual Machine Linux Solaris Unix HPUX AIX Windows Windows95 Windows98 Windows NT and Windows2000 WindowsME WindowsXP Windows Server among other known platforms. At least a portion of the operating system may be disposed in the memory . The memory may include one or more of the following random access memory read only memory magneto resistive read write memory optical read write memory cache memory magnetic read write memory and the like as well as signal bearing media as described below.

The identity manager is configured to manage digital identities for one or more users of the computer . The identity manager establishes and maintains objects associated with the digital identities. When transmitted over the network to remote entities each of the digital identities is represented by a security token also referred to as a token . A token includes one or more claims each of which includes some part of the total information conveyed by the digital identity. For example a token may include claims for a username a password credit card numbers and or a myriad of other types of information. The tokens may be in a variety of different formats such as X.509 certificates Kerberos tickets and the like. A token may also be created using a standard language such as the Security Assertion Markup Language SAML . One example of an identity manager is MICROSOFT CARDSPACE which provides an easy to understand metaphor. The CARDSPACE identity manager enables users to create cards i.e. objects that represent their profile information which in turn is used to create security tokens that can be submitted to entities over the network . Information related to digital identities may be stored in the identity store . Some or all of the information may be stored in the identity store securely e.g. the information is encrypted . Although MICROSOFT CARDSPACE is described as an example it is to be understood that the invention may be used with digital identities used in other types of digital identity standards such as OpenID Lightweight Identity Protocol LID secure extensible identity protocol SXIP and the like.

The security agent may be part of the identity manager or may be a separate module. The security agent is configured to identify confidential data in digital identities maintained by the identity manager . Typically all of the information conveyed by the digital identity is deemed to be confidential. Such confidential information may include for example a username a password a credit card number a social security number a private key used to sign the digital identity and the like. In essence the confidential data includes any information that can be used to compromise the digital identity the user and or the relying party. The security agent obtains the confidential data from the identity manager and creates rules to be used in searching for instances of the confidential data in the storage system search rules .

Use of the identity manager and the security agent is just one example of a mechanism for automatic generation of relevant search rules. It is to be understood that other mechanisms may be used to create search rules. For example search rules may be explicitly created by the user using a text editor or other type of application e.g. dedicated application that allows a user to create search rules for confidential data . In a multi user setting search rules may be created for one or more users by an administrator user using any type of application suitable for creation of the search rules. Those skilled in the art will appreciate that the search rules may be created in a myriad of different ways.

In some embodiments the information vault agent is configured to obtain the search rules and search files in the storage system using the search rules to detect instances of confidential data. The information vault agent protects any files identified in the search as containing confidential information using a conditional access mechanism. Embodiments of the conditional access mechanism are described below. Thus the information vault agent effectively creates and maintains an information vault in the storage system where the information vault includes protected files. The information vault agent may perform the search automatically in accordance with a schedule. Alternatively the information vault agent may perform the search for each newly received and or modified search rule. The information vault agent may also perform the search using any search rules obtained once for all existing files and then in real time for each newly created file and or each modified file in the storage system . The information vault agent may also use a combination of such search triggers.

In some embodiments for each file identified during the search as having confidential data the information vault agent encrypts the file using a symmetric encryption algorithm. Any symmetric encryption algorithm known in the art may be employed such as the Advanced Encryption Standard AES Data Encryption Standard DES triple DES 3DES and like type algorithms. For each identified file the information vault agent generates a random key for encryption. The information vault agent protects the random key using a secret associated with the user. In some embodiments the random key is encrypted using a symmetric encryption algorithm. The key used to encrypt the random key is derived from a credential used by the user to establish a user session on the computer.

In one embodiment the information vault agent achieves the encryption of the confidential data using built in facilities of the operating system . For example file encryption may be built into the particular file system implemented by the operating system . In one embodiment encrypting file system EFS file encryption is employed also referred to as NTFS file encryption as part of a MICROSOFT WINDOWS operating system. The operating system includes a cryptographic application programming interface API which can be used to protect files stored in the file system. One such cryptographic API is the data protection API DPAPI provided as part of some MICROSOFT WINDOWS operating systems and used as part of EFS file encryption. To protect a file the information vault agent passes the file to the cryptographic API . The cryptographic API is configured to generate a random key and encrypt the file using symmetric encryption. The cryptographic API then encrypts the random key using another key derived from the user s credential such as a user password used to logon to the operating system or a hash of such user password . The user s credential may be obtained automatically from the current user session. The cryptographic API may use any type of key derivation algorithm known in the art for deriving a key from the user s credential such as PBKDF2 described in RFC 2898. When the user accesses the protected file the protected file is passed to the cryptographic API which uses the user s credential to recover the key that encrypts the random key. Having recovered the random key the cryptographic API recovers the file. Using the cryptographic API provides for seamless decryption of the protected files in the information vault .

Many home users however have a single account on the operating system that is used by many users. Thus the multiple users do not have specific user credentials used to establish user sessions. Thus in another embodiment the information vault agent establishes a credential for the cryptographic API to use. For example the information vault agent may install a credential service provider CSP as a DPAPI extension. The information vault agent establishes the credential by prompting the user to select a secret. The secret may be a personal identification number PIN password biometric scan or the like. The identified files are protected using the cryptographic API as described above with the exception that the information vault agent passes the credential to the cryptographic API .

When the user attempts to access a protected file for the first time the information vault agent intercepts the access request and prompts the user for the established credential. If the user enters the proper credential the information vault agent associates the credential with the user session. Such an association may be temporary. Thereafter the user can access the file or other files protected using the established credential without being prompted for the credential. The protected files are recovered using the cryptographic API as described above with the exception that the user s credential is only temporarily associated with the user session. The credential may be disassociated with the user session in response to various events such as inactivity detection of idle threads security events and or alerts or the like.

The information vault agent advantageously provides a mechanism for searching confidential data on a user s computer and using in place encryption to protect files having such confidential data. The user is not required to interface with another application to protect files identified as having confidential data such as an application that requires the user to drag and drop files into an encrypted folder or volume of the disk. Rather the files may be automatically encrypted in place on the disk without user intervention. Moreover the user is not required to navigate to a special folder or volume and extract the protected files. Rather the files can be accessed like any other file stored on the system i.e. the protected files require no special handling on the part of the user . From the point of view of the user decryption of the protected files happens silently and behind the scene. Furthermore the user is not required to generate and keep track of any special encryption keys to ensure that the protected data remains accessible. Such encryption keys are maintained seamlessly by the system without intervention by the user. In some cases the user need only remember his or her logon password and or a pin or other secret chosen by the user.

At step the random key used to encrypt each file is itself encrypted using a secret associated with the user. In one embodiment a random key is encrypted by deriving a key from a credential for the user. The credential may be used by the user to establish a user session on the computer. Alternatively the credential may be specified by the user. The key derived from the credential is then used to encrypt the random key. In this manner files identified as having confidential information associated with the user are protected along with the encryption keys used to protect the files. If the encryption at step was achieved using built in facilities of the operating system such protection of the random key at step is done seamlessly by such built in facilities.

Returning to as described above the user credential used to protect the keys for the protected files in the information vault is associated with the user session. The credential may have been used to establish the session e.g. user logon or the credential may have been temporarily associated with the session. In either case applications running on the operating system during the user session may obtain the credential and recover the protected files without authorization e.g. malware . Thus in some embodiments the information vault agent is configured to create and manage process level access rules access rules . The access rules include learned rules predefined rules or a combination of learned rules and predefined rules. To learn rules the information vault agent identifies one or more applications associated with each file being protected. For example the information vault may identify the application that created the file being protected. The information vault may identify any other application that has an association with the file due to the file type extension. For example the information vault may identify a file foo.doc as a MICROSOFT WORD document. The access rules are configured to give these applications the right to access the protected file. In some embodiments any changes in file type and application association are detected by the information vault agent which prompts the user for authorization.

In some embodiments the information vault agent also establishes predefined access rules that identify commonly known applications that should be granted access to the protected files. Such common applications include for example backup applications system tools and the like. In addition the information vault agent may configure the particular rights each application allowed by the access rules has. For example some applications e.g. the commonly known applications granted access by the predefined rules may only be granted read access to the protected file whereas the learned applications may be granted both read and write access. When an application attempts to access a protected file in the information vault the information vault agent checks the application against the access rules . The information vault agent allows access to the protected file if the access rules so permit. If the application is not allowed access by the access rules the information vault agent may prompt the user to permit or deny access either temporarily or permanently . In some embodiments the information vault agent may be configured by the user to silently approve or disapprove applications attempting to access a protected file. This may improve the user s experience but at the cost of less security.

Returning to in some embodiments one or more applications may be associated with each of the files at step . The association between application s and file are stored as access rules. Returning to in some embodiments a determination may be made whether an application is authorized to access the file based on the access rules at step . If not the method proceeds to step where the user is prompted to deny or permit access by the application. If the user permits access the method proceeds from step to step . Otherwise the access to the protected file is denied. If at step the application is authorized to access the protected file based on the access rules the method proceeds to step .

An aspect of the invention is implemented as a program product for use with a computer system. Program s of the program product defines functions of embodiments and can be contained on a variety of signal bearing media which include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM or DVD ROM disks readable by a CD ROM drive or a DVD drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive or read writable CD or read writable DVD or iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal bearing media when carrying computer readable instructions that direct functions of the invention represent embodiments of the invention.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

