---

title: System and method for linearly managing client-server communication
abstract: Representative embodiments are disclosed of a system and method for linearly exposing client-server interaction comprising interpreting a function command representing a first group of sequential action requests to an integrated multimedia communication server (iMCS), sequentially transmitting the first group of sequential action requests from an interactive multimedia runtime (iMR) client to the iMCS, wherein a next sequential action request of the first group is transmitted to the iMCS prior to receiving a response message from the iMCS associated with a previous sequential action request of the first group, queuing response messages received from the iMCS, and handling the queued response messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08136127&OS=08136127&RS=08136127
owner: Adobe Systems Incorporated
number: 08136127
owner_city: San Jose
owner_country: US
publication_date: 20070629
---
The present application is a continuation of U.S. patent application Ser. No. 10 353 782 entitled SERVER PROXY OBJECT CREATION METHOD AND SYSTEM filed Jan. 29 2003 now U.S. Pat. No. 7 246 356 B1 the disclosure of which is hereby incorporated herein by reference.

The present invention relates in general to client server systems and more particularly to a server proxy object creation model for managing client server interaction.

In the realm of computing the relationship that drives most useful applications is the client server relationship. The interaction between client and server allows most computing beyond an unconnected single computer. The client server relationship defines an architecture in which a user s computer which may be a personal computer PC may be the client machine or entity requesting something from a server which is the supplying machine or entity. However a PC may also operate as the server side of the client server relationship. Both are typically connected via some kind of network such as a local area network LAN or wide area network WAN .

In the client server model the client typically processes the user interface WINDOWS MACINTOSH etc. and may perform some or all of the application processing. Servers may range in capacity from high end PCs to mainframes. A database server typically maintains databases and processes requests from the client to extract data from or to update the database. An application server which is a software server typically provides additional business processing for the clients.

While many client server models are now commonly referred to as Web based and or Web enabled the architecture is conceptually the same. Users PCs may still be clients and there are tens of thousands of Web servers throughout the Internet delivering Web pages and other functionality. On the Web the client typically runs the browser and just like legacy client server systems can perform a little or a lot of processing such as simply displaying hypertext mark up language HTML pages processing embedded scripts or considerable processing with JAVA applets. A myriad of browser plug ins provide all sorts of possibilities for client processing.

The server side of the Web is typically a multi tiered server architecture with interlinked Web servers application servers database servers and caching servers. In developing network applications that are offered on the Web the developer typically codes all aspects of communication between the client and server. Actions intended for the client may depend on responses or actions on the server. Similarly actions on the server may depend on actions or responses from the client. This architecture produces an asynchronous event model. If step is dependent on a response from the server the process grinds to a halt and step will be delayed until the response for step has been received.

The programming model for dealing with the asynchronous nature of the client server architecture may be awkward even to experienced programmers. Therefore the development of applications which include client server interaction have generally been reserved for experienced programmers.

Representative embodiments of the present invention are directed to a method for linearly exposing client server interaction comprising interpreting a function command representing a first group of sequential action requests to an integrated multimedia communication server iMCS sequentially transmitting the first group of sequential action requests from an interactive multimedia runtime iMR client to the iMCS wherein a next sequential action request of the first group is transmitted to the iMCS prior to receiving a response message from the iMCS associated with a previous sequential action request of the first group queuing response messages received from the iMCS and handling the queued response messages.

Additional representative embodiments are directed to a user accessible system for managing communication in an interactive multimedia application environment iMAE network comprising an iMR client an iMCS in communication with the iMR an event response queue for storing event response signals from the iMCS a plurality of user selectable functions each of the functions abstracting an associated set of server interaction requests and a sequence manager within the iMR for directing sequential execution of the set of server interaction requests of first selected ones of the plurality of functions prior to sequentially receiving event response signals associated with the set of server interaction requests from the iMCS.

Further representative embodiments are directed to a computer program product having a computer readable medium with computer program logic recorded thereon the computer program product comprising code for abstracting into a single function a defined sequence of communication interactions between an iMR and an iMCS code for abstracting into at least one other single function at least one other defined sequence of communication interactions between the iMR and the iMCS code for sequentially calling the single function and the at least one other single function by the iMR prior to completion of the defined sequence of communication interactions and code for queuing responses from the iMCS.

Further representative embodiments are directed to a method for controlling communication interactions between an iMR client and an iMCS in programming computer applications the method comprising making a set of functions available to a user wherein each of the functions represents an abstraction of one or more of the communication interactions executing ones of the set of functions selected by the user for performing a desired task wherein a next selected function is sequentially executed regardless of completion of each of the communication interactions associated with a prior selected function and queuing information received on completion the one or more communication interactions.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

Before discussing the present invention in greater detail it is appropriate to discuss the operations of the typical client server architecture. is a block diagram illustrating one example of a typical client server relationship. Client may access server via Internet Web server . As client executes steps that may be processed remotely by application server being run on server client accesses Internet Web server using an address for application server . Once application server is located a handshaking routine occurs to establish the connection between client Internet Web server server and application server . Application server then processes the information delivered from client and returns any information or response to client in a similar manner.

When application server finishes processing the data for Step it sends polling signal to Web server to establish communications again. If Web server correctly receives polling signal it will send ACK signal back to application server to acknowledge correct receipt of polling signal and indicating that it s ready to proceed with communication. Application server may then transmit data signal to Web server containing the processed data for Step . Once Web server receives data signal from application server it must re establish communication with client . To do so Web server sends polling signal to client . If client correctly receives polling signal it will transmit ACK signal to Web server to acknowledge correct receipt of polling signal and indicating that it s ready to proceed with communication. As communication is re established between Web server and client Web server sends the processed data for Step back to client . The process then begins over again with Step by client sending polling signal to Web server .

It should be noted that variations of the communication process as described in are also possible. For example client may work through polling and acknowledgement signals to establish communication directly with application server . Some network embodiments may also provide for a communication channel to remain open once established. Furthermore even if communication is established with application server application server may be occupied by another processing request thus causing the request from client to be queued for processing. In each such case client submits its request for processing and then must wait until some kind of confirmation is received from one of the servers before proceeding to the next step. Considering operation on a higher level a client issuing a processing request must also simply wait until the processing has been completed and returned. This communication model yields asynchronous interactions between accessing entities and applications in which the process stalls each time a call to the server is made to wait for the server response.

One programming method that has been used to address the asynchronous client server interaction is through the use of callbacks. is a flowchart illustrating the logic steps implementing the use of callbacks to manage the client server relationship. In step a new connection with the server is initiated. In step the system must determine whether the connection initiation has been successful. If the attempt fails the system either repeats the initiation step of step or can default to some other error handling system. If the attempt is successful the system sets up a new data stream object in step . In step the system must again determine whether the attempted stream object set up was successful. If the attempt fails the system either repeats step or is directed to an error handling system. If the attempt is successful the system then attaches a media source to the data stream in step and publishes the media stream for the subscribers in step .

This type of asynchronous programming model can be quite complex. For Web designers used to tag based scripting languages the advanced techniques used by computer programmers for implementing the asynchronous client server relationship has since kept true client server application development out of the hands of the typical tag based programmer. However instead of relying on the complexities of the asynchronous programming model one embodiment described herein captures the same function using a linear model.

The abstraction presented by the described embodiment is implemented in part through the use of an event response queue. is a block diagram illustrating a functional relationship between publishing iMR and iMCS configured according to additional embodiments of the technology described herein. Publishing iMR is the container for calling the methods connected with publishing the media stream on iMCS . The API is preferably executable on both iMR and iMCS . Connection method is called to open a connection with iMCS . The logic underlying connection method attempts to establish communication with iMCS . Instead of interrupting the program flow any errors unsuccessful server interactions or server responses are passed from iMCS to event queue . Any such errors will therefore be queued for handling in due course by event handling logic .

Without the interruptive event handling the remainder of the publishing methods may be called in a linear progression. Stream object method initiates a new stream object on the connection. Attach media method attaches a specific media resource whether live or pre recorded to the new stream object to form a media stream. Publish media method then publishes the media stream on iMCS making the media stream available to clients for subscription. Sequence manager assists in the processing by directing publishing iMR to sequence from step to step prior to receiving responses or acknowledgements from iMCS . Because the programming structure for publishing the desired media is now representable in a linear fashion the typical or even novice tag based programmer would preferably be capable of coding what has typically been a complex asynchronous event system in only a few lines of code.

The ability to present developers with a linear model for managing client server interactions is supported by the abstraction of certain defined sequences of communication interactions between an iMR and an iMCS. For example referring to Step which is accomplished by executing the signaling interactions shown in signals the first defined sequence of communication interactions may comprise each of signals . For purposes of this example only assume that Step is a function for establishing a connection between an iMR and an iMCS. In representative embodiments of the present invention signals may be abstracted to the function method nc.connect rtmp server app shown in line of . Thus the method connect would represent signals from . The user however only sees the connect method and does not have to be experienced enough to explicitly handle signals . The second defined sequence of communication interactions may begin with signal for Step . In the same manner as for Step the signals that define Step may be abstracted into a single function that is presented to the user developer.

When implemented in software the elements of the present invention are essentially the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium or transmitted by a computer data signal embodied in a carrier wave or a signal modulated by a carrier over a transmission medium. The computer readable medium may include any medium that can store or transfer information. Examples of the computer readable medium include an electronic circuit a semiconductor memory device a ROM a flash memory an erasable ROM EROM a floppy diskette a compact disk CD ROM an optical disk a hard disk a fiber optic medium a radio frequency RF link etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels optical fibers air electromagnetic RF links and the like. The code segments may be downloaded via computer networks such as the Internet Intranet and the like.

Bus is also coupled to input output I O controller card communications adapter card user interface card and display card . The I O adapter card connects to storage devices such as one or more of a hard drive a CD drive a floppy disk drive a tape drive to the computer system. The I O adapter would also allow the system to print paper copies of information such as documents photographs articles etc. Such output may be produced by a printer e.g. dot matrix laser and the like a fax machine a copy machine or the like. Communications card is adapted to couple the computer system to a network which may be one or more of a telephone network a local LAN and or a wide area WAN network an Ethernet network and or the Internet network. User interface card couples user input devices such as keyboard pointing device to the computer system . The display card is driven by CPU to control the display on display device .

It should be noted that while many of the examples included herein have described a process for opening and publishing a media stream to a multimedia communication server the embodiments of the present invention may be used to implement any task or feature of client server interaction. Instead of publishing a media stream a client may request data retrieval and processing from the communication server or other such processing or services the present invention is not limited solely to publication of media streams. Furthermore while the examples scripts have been provided in pseudocode it should be noted that computer languages such as MACROMEDIA s ACTIONSCRIPT and other similar computer language may be used to implement the various embodiments of the present invention.

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

