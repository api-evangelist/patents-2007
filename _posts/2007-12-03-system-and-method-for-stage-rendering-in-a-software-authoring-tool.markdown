---

title: System and method for stage rendering in a software authoring tool
abstract: Systems and methods are provided for rendering a stage in a software authoring tool. A run-time player component is employed for rendering the stage for presenting a preview of output of a software application being authored in the software authoring tool. Thus, a software authoring tool outputs a stage which presents a preview of the output of an application being authored, such as a multimedia application. The output presentation of a multimedia application being authored in the authoring tool is rendered to the stage by a run-time player component. Thus, rather than employing code integrated within the authoring tool for mimicking a run-time player in order to generate a preview of output on the stage, embodiments of the present invention utilize a run-time player component to generate such a preview of output on the stage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739120&OS=08739120&RS=08739120
owner: Adobe Systems Incorporated
number: 08739120
owner_city: San Jose
owner_country: US
publication_date: 20071203
---
The following description relates generally to software authoring tools and more specifically to a system and method that employs a run time player component for rendering a stage in a software authoring tool for presenting a preview of output of a software application being authored in the software authoring tool.

Software applications executing on processor based computing systems are prevalent today and such applications touch many aspects of life. For instance users commonly interact with applications for performing such tasks as conducting business e.g. authoring documents authoring presentations performing research purchasing stocks etc. planning trips e.g. making airline hotel and or rental car reservations conducting meetings e.g. via web conference and or video conference applications accessing entertainment e.g. video gaming etc. and many more. Many applications are accessible by users over a communication network such as the Internet. For instance web pages and other types of interactive applications are commonly accessible via the Internet. To provide greater service to users and or otherwise improve the user experience multimedia applications are ever increasing in popularity. As one example Rich Internet Applications RIAs which are interactive multimedia applications that may run on client side players for example ADOBE FLASH PLAYER are very popular.

A variety of authoring tools have been developed to enable developers to author e.g. create modify etc. software applications such as multimedia applications. For instance a variety of programs on the market allow a developer e.g. a web developer to create web pages websites interactive applications and the like for use by end users e.g. visitors to websites . Examples of such authoring tools include ADOBE DREAMWEAVER DIRECTOR FIREWORKS FLASH FLEX and FLEX BUILDER etc.

DREAMWEAVER is an Integrated Development Environment IDE that allows web developers to design Hypertext Markup Language HTML web pages in a code editor and also in a graphical based design time environment. In other words DREAMWEAVER parses tags e.g. HTML tags and renders an interactive simulation of the application in the design time environment. That is DREAMWEAVER provides a design view that mimics operation of a browser for presenting the author a What You See Is What You Get WYSIWYG view for the web page being authored. Thus a user may edit the application e.g. web page being authored by directly editing the tags or by graphically manipulating the design time representation. As the user graphically manipulates the design time representation DREAMWEAVER changes the tags to reflect the modification. DREAMWEAVER also allows the developer to design with more than just HTML such as for example the developer may use Active Server Page ASP and C from Microsoft Corporation COLDFUSION Markup Language CFML and the like.

FLEX BUILDER and FLASH are authoring tools for creating Rich Internet Applications RIAs which are interactive multimedia applications that may run on client side run time players for example ADOBE FLASH PLAYER. MXML is the native tag based language for FLEX BUILDER and ACTIONSCRIPT is a script based procedural language for FLASH based RIAs. MXML is an Extensible Markup Language XML based language commonly used to create RIAs and it looks similar in some ways to HTML. A developer may write code in a text editor or FLEX BUILDER and save the MXML. Then a FLEX SDK may he used which has command line tools for compiling MXML and ACTIONSCRIPT into a run time file such as a SWF Small Web Format or Shock Wave Flash file that can be downloaded and executed on a user s machine. FLEX BUILDER is an IDE that provides a graphical interface into the FLEX SDK. Thus according to one development technique for developing RIAs using FLEX BUILDER a developer may write MXML tags and ACTIONSCRIPT code and save it in an MXML file. The FLEX SDK may then be used either directly or indirectly via FLEX BUILDER to compile the MXML and ACTIONSCRIPT into ACTIONSCRIPT bytecodes in a run time file such as a SWF. SWF is the native file format for the FLASH PLAYER. Thus as one example a generated SWF file can be run on the FLASH PLAYER on a user s machine to present the corresponding multimedia output to the user.

Web sites RIAs and other multimedia applications generally include one or more output presentation components such as visual components and or audio components. Visual components are application elements that have a visual appearance on an end user s screens. Visual components may include text paragraphs images animation e.g. vector animation bit map animation movies videos etc. other graphics and the like. Visual components may also include user interactive graphics such as graphics for receiving user input such as check boxes data grids radio buttons and the like. The visual components of a run time multimedia application e.g. a SWF file are rendered by a run time player such as the FLASH PLAYER to an end user. Similarly audio components are audible sound e.g. music spoken words sound effects etc. that are output by a run time player e.g. via speakers .

Additionally in this example a run time media player is also executing on computer which may receive and play output a run time multimedia application such as one that is authored by authoring application . Run time media player comprises computer executable software code stored to a computer readable medium that is readable by a processor of computer and when executed by such processor causes computer to perform the various operations described further herein for such run time media player . Examples of such a run time media player include the FLASH PLAYER Java Silverlight ice. WPFE and SVG players e.g. ADOBE SVG Viewer SVG player embedded in the Opera browser etc. .

A developer may interact with authoring tool to author a multimedia application. Commonly authoring tool comprises editing tools with which a user may interact to author e.g. create modify etc. a multimedia application. That is authoring tool may present a user interface to a developer which may enable the developer access to various editing tools . Editing tools may comprise any number of tools with which a user may interact to author a multimedia application. Examples of such tools that are commonly included in such authoring tools as FLEX BUILDER include 3D 2D transformation tool object creation tools such as squares circles stars paths smart shape objects like pie charts bubble etc. tweening and or blending tools that create computer generated intermediate objected between two other objects constraint based editing tools like flowcharts inverse kinematics etc. There are object creation tools which generally translate the user s mouse gestures into objects. For example a rectangle tool may create a rectangle that is based on the points where the user pressed the mouse button to where the user released the mouse button. Also generic path tools are often provided that may be used to create a shape based on the mouse movements while the mouse button is depressed. There are often object manipulation tools which may be based on mouse gestures or on entering data into a user interface UI . For example a user may size move or rotate an object on screen by clicking and dragging on certain handles associated with the object on screen or by entering explicit values into text fields in the application. Animation tools are often included that generally let a user set the state of an object e.g. color shape size etc. at two different times and generate new objects that change the object from one state to the other state e.g. tweening morphing etc. . Also there are often included tools that present different author time views to allow the user to see the resulting animation in ways other than one frame at a times. For example onion skinning is a view that allows the user to see multiple frames at a time so they can easily see if the transition from one frame to another is not smooth. Other such editing tools include a selection tool that allows drag and drop movement of drawn objects and a free transform tool that allows scale rotate and skew transformations.

As described above an authored multimedia application may be compiled into a run time tile such as a SWF file that is executable by a run time player . Run time player generally comprises logic such as output generation logic for processing the received run time file and generating an output presentation to an end user. Such output presentation may comprise visual components presented to a display and or audio components presented to an audio output device e.g. speakers for example. For instance the visual components and or other output presentation components e.g. audio etc. of the run time file may be output by the run time player as output to an end user.

When authoring a multimedia application a developer may periodically compile the multimedia application into a run time file and then run the run time file on a run time player to evaluate the output to for instance determine whether the output is as the developer desires for the multimedia application. If changes to the output are desired by the developer the developer may edit the multimedia application in authoring tool and re compile it into another run time file for re evaluation using run time player .

Of course such process of generating a run time file for the application being authored in the authoring tool in order to evaluate its output using a separate run time player becomes unwieldy and inefficient. Thus many authoring tools such as FLEX BUILDER and FLASH comprise an integrated stage or design surface that presents a preview of the output of an application being authored. That is authoring tool may present a user interface to a developer wherein such user interface includes a stage . In general stage represents an output area that mimics the output of a run time player . Thus the output of a multimedia application being authored in authoring tool may be designed on stage . For example a developer may interact with stage to arrange the output presentation of the multimedia application being authored such as by arranging editing media objects which may comprise output presentation components such as visual and or audio components that are to be presented in the output of the multimedia application. And the developer can evaluate the output of the multimedia application being authored without being required to compile the application into a run time file and employing run time player for evaluating the output. Thus stage provides a design surface with which a developer may interact to design the desired output of an application being authored.

Typically stage provides a user interactive authoring area with which a developer may interact to author e.g. edit media object s of a multimedia application under development For instance a developer may use editing tools to perform various editing operations on media object s wherein the result of such editing operations may be reflected in the output presentation of such media object s on stage . Further editing tools may enable a developer to view the media object s presented on stage in a desired authoring format such as multiple frame view e.g. an onion skin view a keyframe only view a 3D view a view that shows selection decorators for selected objects or highlighted selected text etc. or other view that modifies or supplements the mimicked run time output presentation to some output that aids the author in reviewing and or editing the output. In this regard the output presented on the stage may be a hybrid of the mimicked run time output e.g. output of the multimedia application being authored and an author friendly output. For instance the mimicked run time output may be altered to present a view of the corresponding mimicked run time output in some format that is author friendly such as onion skin view etc. as opposed to a corresponding view of the output that would be presented as output during run time. Further in some implementations a user may interact directly with media object s shown on stage to for example drag and drop selected media object s to a desired location on stage rotate selected media object s to a desired orientation remove delete selected media object s from the stage etc.

In this way stage is similar to a document area commonly presented in a word processor application such as MICROSOFT WORD in which the portions of a document being authored e.g. text etc. that are to be included in the resulting document are shown in such document area while editing tools with which a user may interact to format the document e.g. bold highlight underline highlight change text color etc. are presented outside the document area as those editing tools are not actually part of the output of the document being authored. Similarly stage generally presents a preview of the output of a multimedia application being authored. That is stage presents a preview that attempts to mimic the output that would be output by a run time player for the multimedia application being authored if the multimedia application were compiled into a run time file and executed on run time player . Also some word processor applications offer the ability to present author friendly information in the document area such as symbols that indicate paragraphs spacing and or other formatting information that is present in the document wherein such author friendly information e.g. symbols is provided in the document area solely for authoring assistance and is not output as part of the document being authored e.g. the symbols may not be included in a print out of the authored document . Similarly as mentioned above author friendly information may likewise be presented for an output of a multimedia application on stage such as an author friendly view e.g. onion skin view etc. .

Accordingly it is generally desirable for stage of authoring tool to output a fairly accurate representation of the output that will be presented during run time of the multimedia application by run time player . That is it is desirable for a developer working with authoring tool to receive via stage an accurate representation of the output that will be generated for the multimedia application by run time player so that the developer can better evaluate the output and author design the multimedia application to have a desired output. Traditionally some logic is implemented in authoring tool for mimicking run time player in order to generate the output presentation to stage . That is logic is employed for generating stage in a manner that attempts to mimic closely the output e.g. output that would be presented during run time for the multimedia application by run time player . A couple of different approaches have been employed within authoring tool of the prior art for mimicking run time player .

According to one approach actual core code of run time player is integrated into authoring tool . That is a portion of the underlying software code of run time player may be integrated within authoring tool and modified to interact with the editing tools and or other features of the authoring tool in order to render media objects of an application being authored to stage . However such an integration of the run time player code into the authoring tool has several disadvantages. First this integration often results in an undesirably large authoring tool . That is the underlying code for implementing the authoring tool may become undesirably large. Additionally if the code of the run time player on which the authoring tool is based in this example is modified then the corresponding mimicking code in the authoring tool may need to be modified in order for the authoring tool to continue to accurately present output on stage consistent with the output that would be generated by run time player . For instance if bugs in the underlying code implementing run time player are corrected if new features are added to run time player and or if run time player is overhauled modified in any way particularly with regard to how the run time player generates output e.g. modifications within the underlying code implementing output generation logic of run time player it may become necessary to modify the mimicking code of authoring tool .

In another approach mimic logic is independently developed rather than integrating underlying code of the run time player into authoring tool . In these instances mimic logic attempts to render an output to stage that is similar to the output that would be rendered by run time player for a run time version of the multimedia file being authored but the mimic logic may achieve its representation of the output to stage in a much different way than run time player does. That is the underlying code and operations performed by mimic logic in rendering an output to stage may be much different than that of run time player . Of course such mimic logic is limited in the accuracy of the output presentation that it generates to stage as compared with an actual run time output generated by run time player for a run time version of the multimedia application being authored.

In both of the traditional mimicking techniques mentioned above to maintain the mimic logic up to date with a most recent version of a run time player e.g. to ensure an accurate reflection on stage of the output presentation that would be generated by the player mimic logic must be periodically updated. Further the traditional mimicking techniques employed by logic restrict representation of the stage s output to that of a given run time player that is being mimicked. Different versions of a run time player and or different target run time players to which a multimedia application may be intended are not represented in the authoring tool .

In view of the above a desire exists for an improved system and method for rendering to a stage in an authoring tool a presentation output preview of a multimedia application that is being authored.

The present invention is directed generally to systems and methods for rendering a stage in a software authoring tool. As described further herein embodiments of the present invention provide a system and method that employs a run time player component for rendering a stage in a software authoring tool for presenting a preview of output of a software application being authored in the software authoring tool.

According to one embodiment a software authoring tool outputs a stage which presents a preview of the output of an application being authored such as a multimedia application. That is the authoring tool presents a user interface to a developer wherein such user interface includes a stage. According to embodiments of the present invention the output presentation of a multimedia application being authored in the authoring tool is rendered to the stage by a run time player component. Thus rather than employing code integrated within the authoring tool for mimicking a run time player in order to generate a preview of output on the stage embodiments of the present invention utilize a run time player component to generate such a preview of output on the stage. Accordingly a preview of media object s forming a presentation output of an application being authored is rendered by a run time player component to the stage of the authoring tool.

According to certain embodiments a pre defined communication interface is provided to enable communication between the authoring tool and the run time player component. As described further herein such pre defined interface is utilized to enable the authoring tool to communicate to the run time player component sufficient information about a multimedia application being authored to enable such run time player component to generate an output presentation of the multimedia application wherein such generated output presentation is rendered to the stage via the pre defined interface . Output generation logic of the run time player component may be utilized to generate an output presentation of the multimedia application being authored whereby the output presentation is communicated to the authoring tool via the pre defined interface for rendering on the stage.

The pre defined interface may comprise any suitable API application programming interface that is established for communication between the authoring tool and the run time player component. As described further herein in certain embodiments the pre defined interface uses a run time file format such as SWF for communicating between the authoring tool and the run time player component. For instance as described further herein in certain embodiments information regarding media objects being authored is packaged by the authoring tool into mini SWFs which are communicated via the pre defined interface to the run time player component for generation of the output of such media objects to the authoring tool s stage.

Accordingly as discussed further herein certain embodiments of the present invention enable a live run time rendering of a multimedia application that is being authored. In other words in certain embodiments the output rendered to the authoring tool s stage is a run time rendering by a run time player component of the output of the multi media application being authored in the authoring tool. As such while the multimedia application is being authored a live run time rendering of its output is presented to the authoring tool s stage.

Also as discussed further herein in certain embodiments not only does the run time player component write to the authoring tool s stage but the authoring tool may also write to the stage. For instance the live run time rendering of media objects may be edited through use of editing tools providing by the authoring tool and or by a user interacting directly with the media objects being presented on the stage. Thus the authoring tool and run time player component both share the stage in that they can each write to the stage. Accordingly the stage provides an effective design surface for an author. In certain embodiments the run time player component renders to the stage a live preview of the output of a multimedia application being authored while the authoring tool may render additional information to the stage to assist a user in editing the multimedia objects being rendered. Also as described further herein the authoring tool may enable a user to interact with the media objects that are rendered on the stage by the run time player component for editing such media objects. Thus in certain embodiments editing of a live rendering of a presentation output is supported. Further the authoring tool and or ran time player component may render a desired author friendly view and or editing tools such as those mentioned above with traditional authoring tools. Thus for instance the live run time rendering of the output presentation may be modified and or supplemented in some ways by either the authoring tool or the run time player component to present such an author friendly view on the stage.

Additionally as described further herein use of a run time player component for rendering to a authoring tool s stage of presentation output of a multimedia application being authored in the authoring tool enables an accurate representation of the presentation output without the requirement of maintaining updating internal mimic code within the authoring tool such as mimic logic of . As modifications are made to the run time player component over time e.g. fixing of bugs adding of new features etc. the rendering to the authoring tool s stage of a preview provides an accurate reflection of the output that would be rendered by the run time player as it is the run time player component that is rendering such preview to the stage.

Also as discussed further herein in certain embodiments the concepts described herein may be employed to enable rendering of a preview of output presentation to the authoring tool s stage by any of a plurality of different run time players with which the authoring tool may be configured to interact e.g. via a pre defined interface . For instance any of various different run time players or different versions of run time players which support interaction via the pre defined interface may be utilized for presenting an author an accurate preview on the authoring tool s stage of the presentation output that would be generated by such run time player for the multimedia application being authored.

As discussed further herein in certain embodiments an object model is created and maintained by the authoring tool for media objects that are being authored. Additionally a shadow object model for the media objects may be created and maintained in the run time player component. That is the authoring tool communicates via a predefined interface information about the media objects to the run time player component so that the run time player component can maintain a shadow object model. As changes are made within the authoring tool to the media objects the authoring tool updates the object model and communicates information to the run time player component so that it can update its shadow object model. Also in certain embodiments drawing context information is communicated via a pre defined interface to the run time player component to provide information about the context in which the media objects are to be rendered on the stage. For instance in certain embodiments such drawing context information may identify a desired authoring view such as an onion skin view etc. that the run time player component is to render to the stage.

In operation of one embodiment of the present invention an authoring tool receives input for authoring a software application e.g. a multimedia application wherein the input defines one or more presentation output objects of the software application. Such input defining the one or more presentation output objects may comprise creation of a new presentation output object and or editing of a presentation output object. The authoring tool communicates e.g. via a predefined interface information about the defined one or more presentation output objects to a run time player component. In certain embodiments the authoring tool communicates object model information to enable the run time player component to maintain a shadow object model. In certain embodiments the authoring tool may communicate drawing context information to run time player component. For instance such drawing context information may be communicated to request the run time player component to update the drawing being rendered to the stage responsive to authoring actions that do not define e.g. create or modify a presentation output object but which cause a change in the presentation on stage such as a request for a different authoring view e.g. an onion skin view etc. . In certain embodiments the authoring tool communicates information about the defined one or more presentation output objects to the run time player component in a run time file format such as SWF. The run time player component renders to the authoring tool s stage a display of the one or more presentation output objects. As such the run time player component provides a live run time rendering of the presentation output objects of an application being authored in the authoring tool.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

Turning to an exemplary system according to one embodiment of the present invention is shown. As shown system comprises a processor based computer such as a personal computer PC laptop computer server computer workstation computer etc. In this example an authoring tool is executing on such a computer with which a user may interact to author a multimedia application such as an RIA. As with the exemplary authoring tool of authoring tool comprises computer executable software code stored to a computer readable medium that is readable by a processor of computer and when executed by such processor causes computer to perform the various operations described further herein for such authoring tool .

Additionally in this example a run time media player component is also executing on computer . Run time media player component comprises computer executable software code stored to a computer readable medium that is readable by a processor of computer and when executed by such processor causes computer to perform the various operations described further herein for such run time media player component .

In certain embodiments run time player component may be used for running outputting compiled run time multimedia applications. That is run time player component may in some embodiments be a consumer version of a run time player that can be used in the manner described in for run time player to generate an output in addition to its ability to interact with authoring tool for generating stage as described further herein. Thus in certain embodiments a consumer version of the run time player component is implemented to be able to handle both interaction and drawing in an authoring tool. This may be accomplished by allowing the run time player component to be launched in two different modes. The two different modes might be differentiated by parameters passed on launch. One mode would be headless or ui less in which a user would only be able to interact with it indirectly through the authoring environment while the other mode would bring up the UI and a user could interact with it using its own UI.

Thus the run time player component may be an actual consumer version of a run time player such as the run time FLASH PLAYER that includes added support for interacting with the authoring tool . Such run time player component may be used to output a movie e.g. a test movie generated by a run time multimedia application and it may also be used for generating a stage of an authoring tool as discussed further herein. When a movie is being executed by the run time player e.g. as a test movie the generated SWF is loaded into the player but the authoring tool does not interact with the run time player further that is the player runs the SWF as normal . When the run time player component is being used for rendering a stage in authoring tool a special SWF is loaded into the player in certain embodiments as discussed further herein and the authoring tool interacts with the run time player component via the API s that the player and the SWF provide.

In this example authoring tool and run time player component are executing on computer . However while authoring tool and run time player component are shown as executing on computer for ease of illustration in it should be recognized that one or both of such applications may be residing and or executing either locally on computer or on a remote computer to which computer is communicatively coupled via a communication network such as a local area network LAN the Internet or other wide area network WAN etc.

As with the example of authoring tool may enable development of software code for a multimedia application such as a RIA e.g. as is commonly coded using such authoring tools as FLASH FLEX BUILDER etc. as mentioned above . In this example as with the above example of authoring tool is operable to present one or more user interfaces with which a user e.g. developer may interact to author a document such as a multimedia application. For instance as with the exemplary authoring tool of authoring tool comprises editing tools with which a user may interact to author e.g. create modify etc. a multimedia application. That is authoring tool may present a user interface to a developer which may enable the developer access to various editing tools . Editing tools may comprise any number of tools with which a user may interact to author a multimedia application such as the exemplary editing tools mentioned above with .

In this example authoring tool again presents a stage which presents a preview of the output of the application being authored. That is authoring tool presents a user interface to a developer wherein such user interface includes a stage . According to embodiments of the present invention the output presentation of a multimedia application being authored in authoring tool is rendered to stage by run time player component . Thus rather than employing code within authoring tool for mimicking a run time player in order to generate a preview of output on stage embodiments of the present invention utilize a run time player component to generate such a preview of output on stage . Accordingly a preview of media object s forming a presentation output of an application being authored is rendered by run time player component to stage of authoring tool .

According to certain embodiments a pre defined communication interface is provided to enable communication between authoring tool and run time player component . As described further herein such pre defined interface is utilized to enable authoring tool to communicate to run time player component sufficient information about a multimedia application being authored to enable such run time player component to generate an output presentation of the multimedia application wherein such generated output presentation is rendered to stage via the pre defined interface . Output generation logic of run time player component may be utilized to generate an output presentation of the multimedia application being authored whereby the output presentation is communicated to authoring tool via pre defined interface for rendering on stage .

Pre defined interface may comprise any suitable API application programming interface that is established for communication between authoring tool and run time player component . As described further herein in certain embodiments the pre defined interface uses a run time file format such as SWF for communicating between authoring tool and run time player component . For instance as described further herein in certain embodiments information regarding media objects being authored is packaged by authoring tool into mini SWFs which are communicated via interface to run time player component for generation of the output of such media objects to stage . Exemplary embodiments for communicating information from authoring tool to run time player component for rendering of an output preview to stage by the run time player component are described further herein.

Accordingly as discussed further herein certain embodiments of the present invention enable a live run time rendering of a multimedia application that is being authored. In other words in certain embodiments the output rendered to stage within authoring tool is a run time rendering by run time player component of the output of the multi media application being authored in authoring tool . As such while the multimedia application is being authored a live run time rendering of its output is presented to state .

Also as discussed further herein in certain embodiments not only does run time player component write to stage but authoring tool may also write to stage . For instance the live run time rendering of media objects may be edited through use of editing tools and or interacting directly with the media objects being presented on stage . Thus the authoring tool and run time player component both share stage in that they can each write to the stage . In certain embodiments run time player component renders to stage a live preview of the output of a multimedia application being authored while authoring tool may render additional information to stage to assist a user in editing the multimedia objects being rendered. Further as described further herein authoring tool may enable a user to interact with the media objects that are rendered on stage by run time player component for editing such media objects . Thus in certain embodiments editing of a live rendering of a presentation output is supported.

Additionally as described further herein use of run time player component for rendering to stage of presentation output of a multimedia application being authored in authoring tool enables an accurate representation of the presentation output without the requirement of maintaining updating internal mimic code within authoring tool such as mimic logic of . As modifications are made to the run time player component over time e.g. fixing of bugs adding of new features etc. the rendering to stage of a preview provides an accurate reflection of the output that would be rendered by the run time player as it is the run time player component that is rendering such preview to stage .

Also as discussed further herein in certain embodiments the concepts described herein may be employed to enable rendering of a preview of output presentation to stage by any of a plurality of different run time players with which the authoring tool may be configured to interact e.g. via pre defined interface . For instance any of various different run time players or different versions of run time players which support interaction via pre defined interface may be utilized for presenting an author an accurate preview on stage of the presentation output that would be generated by such run time player for the multimedia application being authored.

As discussed further herein in certain embodiments an object model is created and maintained by authoring tool for media objects that are being authored. Additionally a shadow object model for the media objects may be created and maintained in the run time player component . That is authoring tool communicates via predefined interface information about the media objects to run time player component so that the run time player component can maintain a shadow object model. As changes are made within authoring tool to the media objects authoring tool updates the object model and communicates information to run time player component so that it can update its shadow object model. Also in certain embodiments drawing context information is communicated via pre defined interface to run time player component to provide information about the context in which the media objects are to be rendered on stage . For instance in certain embodiments such drawing context information may identify a desired authoring view such as an onion skin view etc. that the run time player component is to render to stage .

As with the traditional stage of a developer may interact with stage to arrange the output presentation of the multimedia application being authored such as by arranging editing media objects which may comprise output presentation components such as visual and or audio components that are to be presented in the output of the multimedia application. And the developer can evaluate the output of the multimedia application being authored without being required to compile the application into a run time file and employing run time player for evaluating the output as in the traditional technique of .

Turning to an exemplary system according to one embodiment of the present invention is shown. As with the example of described above system again comprises processor based computer on which authoring tool and run time player component are executing. In this exemplary embodiment authoring tool communicates information which may include media object and drawing context information to run time player component for media objects being authored in authoring tool . For instance an object model may be created and maintained by authoring tool for media objects that are being authored. Additionally authoring tool communicates via predefined interface information about the media objects to run time player component so that the run time player component can maintain a shadow object model. As changes are made within authoring tool to the media objects authoring tool updates the object model and communicates information to run time player component so that it can update its shadow object model.

Additionally or alternatively information may in some instances comprise drawing context information that provides information about the context in which the media objects are to be rendered on stage . For instance in certain embodiments such drawing context information may identify a desired authoring view such as an onion skin view etc. that the run time player component is to render to stage . As discussed further herein information may be communicated in a run time file format such as SWF. For instance in certain embodiments information is packaged by authoring tool into mini SWFs which are communicated to run time player component for generation of the output of such media objects to stage .

As further shown in output generation logic of run time player component may be utilized to generate an output presentation to stage of the multimedia application being authored. That is run time player component renders media objects of the multimedia application being authored to stage of authoring tool . Accordingly as discussed further herein this exemplary embodiment enables a live run time rendering of a multimedia application that is being authored. In other words the output of media objects rendered to stage within authoring tool is a run time rendering by run time player component of the output of the multi media application being authored ill authoring tool .

Also in this exemplary embodiment in addition to run time player component rendering media objects on stage authoring tool may also write display information to stage . For instance the live run time rendering of media objects may be edited through use of editing tools and or interacting directly with the media objects being presented on stage . Exemplary objects that authoring tool may draw to stage include a document area on top of the larger markup area Grids and guides Tool specific feedback such as a transform tool selection box and handles as well as a text block that is being actively edited. Thus the authoring tool and run time player component both share stage in that they can each write to the stage .

Turning to a more detailed exemplary system according to one embodiment of the present invention is shown. As with the example of described above system again comprises processor based computer on which authoring tool and run time player component are executing. In this exemplary embodiment authoring tool creates and maintains an object model for media objects that are being authored. That is an author may interact with editing tools and or directly with a graphical representation of an object being rendered on stage to create and or edit a media object shown as operational block and authoring tool creates and maintains e.g. modifies a corresponding media object model . Such media object model comprises data defining object s wherein such data is stored to a computer readable medium. Additionally responsive to the creation and or editing operations object model information is communicated to run time player component . Such information may be communicated in a run time file format such as SWF. For instance in certain embodiments information is packaged by authoring tool into mini SWFs which are communicated to run time player component for generation of the output of the corresponding media objects to stage .

Run time player component receives object model information and creates and or edits in operational block a shadow media object model . Thus run time player component creates and maintains a shadow object model for the media objects of the multimedia application being authored in authoring tool . As changes edits are made within authoring tool to the media objects authoring tool updates its object model and communicates information to run time player component so that run time player component can via operational block update its shadow object model correspondingly.

Additionally in some instances a display request that comprises display context information is communicated from authoring tool to run time player component . For instance when an action is taken in authoring tool that requires a new updated rendering of media objects to stage e.g. which might not result in a change to the object model and thus might not result in a communication of information to run lime player component authoring tool communicates a display request that contains display or drawing context information to run time player component . As an example in FLASH a user can click on an icon in the timeline to turn on an onion skin view which would then send the request to the run time player component to generate the onion skin frames. In one embodiment a new display request is generated whenever the view onto the object model but not the object model itself changes. Examples include when a user of the authoring tool changes from one frame in the time line to another when the user scrubs the time line when the user turns on off the onion skin mode when the user changes the onion skin behavior like showing between frame or edit multiple frames etc. In all of these exemplary cases the view of the object model changes but the object model itself does not.

As further shown in run time player component generates e.g. via output generation logic of a display to stage of its shadow media object as media objects shown as operational block of . For instance responsive to a received display request run time player component may in operational block render a display of the media objects to stage . Thus a live run time rendering is provided to stage for the multimedia application that is being authored. In some instances of this exemplary embodiment the run time player component may recognize creation modification of an object in the shadow media object model via receipt of object model information and performance of operations and may generate an updated display to stage without receipt of a separate display request whereas in other instances such as when the authoring view changes without a change being made to the object model a separate display request may be used to generate the updated display For instance in certain embodiments the display request may be used to request an update to the stage when an authoring action is taken in the authoring tool that does not modify the object model and thus because the action does not result in updated model information being communicated to run time player component the separate display request is utilized to update the run time player s rendering to the stage.

In most cases modifications to the objects originate from the authoring tool in the following order an event like a mouse click is recognized by the authoring tool the authoring tool can then update the local object model and then communicate the change to the shadow object model or pass the event directly to the shadow object model. If the shadow object model creates other shadow objects or display objects then a display update is automatically generated by the run time player component when the display object is created.

In certain embodiments a new display request is generated by authoring tool when the view changes but not the object model When the object model changes the display can be updated directly without the need for a display request. It should be noted that modifying the object model will not update the display until there has been a display request. The display request specifies what to draw and how to draw it and so in this exemplary embodiment the stage is not automatically updated until that information is obtained. Also updating the object model does not necessarily have to update the stage. The user of the authoring tool could be viewing frame one and through some command in the authoring tool the user may add something to frame two. Even though the object model in the run time player component may be updated in this instant the display will not be because the change in the object model effects a portion of the output that is not being presented on the stage e.g. it effects a different frame .

In general an object is either a single object like a shape PicShape PicSymbol PicBitmap etc or a collection of objects PicPage PicLayer PicFrame . Creating a hierarchy of objects is a convenient way to organize and manipulate a drawing that is used in other drawing applications. For example an ILLUSTRATOR document has layers groups and objects like shapes bitmaps and text. A PHOTOSHOP document is a collection of layers that each represent a bitmap. The difference between those applications and FLASH is that they are used to create static drawings while FLASH is used to create animations. So FLASH has the concept of a PicFrame that represents the state of a PicLayer at a given point in time. The PicPage is the root node of the object hierarchy as such is analogous to the ILLUSTRATOR or PHOTOSHOP document. Various other authoring tools such as FLEX BUILDER may likewise use a similar type of object hierarchy.

Media object model may be referred to as an object store and provides a representation of the media content hierarchy in an application e.g. Flash application being authored. In certain embodiments the object store is traversed for various operations in authoring tool such as SWF export and FLA serialization.

As discussed above with run time player component creates and maintains a shadow media object model . In the illustrated example shadow media object model comprises a hierarchical model of an object wherein such hierarchical model includes stage object stage layer stage frame and stage shape . In this exemplary embodiment the StageObjects represent the display aspect of their corresponding PicObject in the authoring tool . So in StageObject the PicPage represents the root node of the StageObject hierarchy. StageLayer represents the PicLayer. The StageFrame represents the PicFrame and the StageShape represents the PicShape. The amount of data they contain may be determined as an implementation detail due to performance considerations for example based on a determination of what is deemed too costly to keep calling back into the authoring tool to get. For example a StageInstance which represents a PicSymbol in the authoring tool may be implemented to keep a list of the filters that need to be applied to the display object. This data is readily available in the authoring tool but may be deemed to take too much time to query every time it is needed and thus may be stored in the StageInstance. In general the StageObject s type and its position in the overall hierarchy is all that is needed to generate the display of the object model. The data they have to maintain is the list of child StageObjects and the display objects that is has generated.

Thus the hierarchy of the media object model potentially with only some of the data is reproduced as a shadow media object model in run time player component . For instance in one embodiment such shadow media object model is reproduced in ActionScript in a StagePlayer.swf described further with reference to below . In this exemplary embodiment the ActionScript hierarchy shadow media object model is responsible for a generating display objects to visually represent the objects on the stage and b maintaining communication between the pic objects and their corresponding display objects. In addition to generating the display objects the StageObjects are responsible for positioning them in the display so they accurately represent the document. They position them both in the X Y plane but in the stacking order as they relate to the other object in the display.

Thus in this exemplary embodiment run time player component generates display object s that are to be rendered to stage i.e. as presentation output of media objects . In this example display object comprises display object for stage object of shadow object model display object for stage layer of shadow object model display object for stage frame of shadow object model and display object for stage shape of shadow object model . According to one embodiment the display objects are SPRITES Generated by run time player component . As is well known in the art in multimedia productions a SPRITE generally refers to a graphic image usually animated that a user can interact with and edit e.g. move around . It should be noted that in this exemplary embodiment the display objects are ActionScript Sprite objects. Also the SPRITE is a collection class so it contains the other display objects.

Specifically in this exemplary embodiment the display object SPRITE contains the mini SWF of the PicObject which could be a MovieClip Text Bitmap or another other display object type. The display object SPRITE also contains any display objects that where generated for the StageObjects that are children of the StageObject the display object represents. Finally the display object SPRITE contains a special shape used to show selection decorators.

In general in this exemplary embodiment a display object is created when a StageObject is asked to draw itself It can draw itself as a result of the entire StageObject hierarchy getting a display request from the authoring tool or because the StageObject was added to the hierarchy and the hierarchy was already drawn. When a StageObject is asked to draw itself it is given the parent display object it needs to draw into and the location in that display object it needs to be at. The StageObject then creates a display object and adds it to the parent s display object. Depending on what type of StageObject it is it might request a mini SWF of the StageObject s PicObject to be generated in the authoring tool and loaded into the display object or the StageObject may create an instance of another ActionScript display object class. If the StageObject has any children it then asks each of its children to draw into the newly created display object.

In this exemplary embodiment there is not necessarily a 1 1 mapping between the subclasses in the media object model and the shadow media object model . And it should be noted that embodiments of the present invention are not limited to the exemplary set of objects described for this embodiment.

Turning to an exemplary block diagram of a system according to one embodiment of the present invention is shown. As with the example of described above system again comprises authoring tool that is executing on a processor based computer such as computer of . Additionally an example of a run time player component referred to in this exemplary embodiment as AuthPlay A is also executing on such processor based computer. Authplay A runs a StagePlayer.swf which communicates with authoring tool using an external interface . Such external interface may be an AS3 External Interface class. ExternalInterface allows the code in a running SWF to interact with the application that is hosting the player. It allows the SWF to expose methods that the hosting application can call like native function and it allows the SWF to call into the host. In a web browser a web page may have some JavaScript code that calls into the SWF to perform some action or the SWF may call into JavaScript code on the web page to do something.

In general Authplay A comprises a shared library or DLL that is basically a headless version of a run time player such as the FLASH PLAYER. That is Authplay A may be a version of the FLASH PLAYER made specifically for embedding in other applications. So Authplay A may considered as a consumer version of the FLASH PLAYER that is modified to talk to a hosting application but it is not specifically modified to render the authoring tool s stage.

StagePlayer SWF is in this exemplary embodiment the run time player component written in ActionScript that contains object level description both data and logic of the shadow object model. Some of the object level descriptions will generate create display objects onto the display list which is owned by AuthPlay. The display objects are rendered to the stage by AuthPlay.

In this example an example of the predefined interface of is shown which comprises AuthPlay API and ExternalInterface . In this example the AuthPlay API is the set of interfaces that allow the hosting application to host and drive the embedded player. ExternalInterface is the API that allows the host to communicate with the SWF running in the embedded player. The ExternalInterface calls are piped through functions in the AuthPlay API. So while the host does communicate with the running SWF it still does it through the AuthPlay API. The types of calls that are made with the AuthPlay API are things like scaling the running movie making the player play setting the bitmap in the player that player needs to draw into. The player may make some calls to have the authoring tool draw what it needs to draw or for the authoring tool to load a URL. The calls that are made through ExternalInterface via the AuthPlay API are things like add an object to the shadow hierarchy update an objects data draw the hierarchy. The SWF may make calls through ExternalInterface to the host to find out more information about an object so it may be drawn correctly.

As shown in authoring tool and Authplay A render to the same bitmap on stage . Thus for instance Authplay A may render a presentation output of media objects of an application being authored while authoring tool can write such authoring assistance information as handles etc. to bitmap . According to this exemplary embodiment the stage may be rendered by drawing the stage underlay such as background document page grid lines etc. drawing StagePlayer.swf and drawing stage overlay e.g. selection handles and guide . In this exemplary embodiment the underlay and overlay are drawn by authoring tool and StagePlayer.swf is drawn by AuthPlay A.

StagePlayer.swf has its own version of the authoring tool s object store each symbol or shape instance draws itself. Since the authoring tool owns the bitmap it can draw the tools and their handles on the bitmap without interfering with the rest of the stage drawing.

An ExternalShape AS3 class is included in Authplay A. ExternalShape contains an ID that maps the instance of the class with an instance of the authoring tool s internal stage object. When the player encounters an ExternalShape instance while rendering it uses a new Authplay API FPA DrawExternalShape to send a bitmap to the authoring tool for rendering.

Every level of the object store layer frame shape implements Draw function which takes a Draw context. Draw context contains such information as display object being drawn into location index where the current object goes range of frames being drawn and current index in that range and onion skinning mode.

Draw functions can access information about the instance like xform color xform from the authoring tool via External Interface callbacks.

Some tool handles and selection are drawn by the authoring tool in the main bitmap that it owns. Selection of fills and strokes is drawn in a top layer of the Sprite that represents the whole shape. Drawing API calls are made from authoring tool to StagePlayer SWF via External Interface to draw the selection hashing as bitmap fills. In place editing is managed solely in StagePlayer SWF which keeps track of edit stack and display objects to be drawn. In certain embodiments the selection hashing of fills and strokes are done by loading in new mini SWFs for the object being selected. General selection like selecting the entire shape is done in a layer on top of the SPRITE.

Turning to an exemplary operational flow diagram of one embodiment of the present invention is shown. In operational block an authoring tool receives input for authoring a software application e.g. a multimedia application wherein the input defines one or more presentation output objects of the software application. Such input defining the one or more presentation output objects may comprise creation of a new presentation output object and or editing of a presentation output object. For instance editing tools may be employed to define e.g. create and or modify a presentation output object.

In operational block the authoring tool communicates e.g. via predefined interface of information about the defined one or more presentation output objects to a run time player component . Exemplary optional features that may be included in certain embodiments are shown in dashed lines as operational sub blocks . For instance in certain embodiments the authoring tool communicates object model information of to enable the run time player component to maintain a shadow object model as shown in block . In certain embodiments as shown in block the authoring tool may communicate drawing context information to run time player component to for instance request such run time player component to update the drawing being rendered to stage responsive to authoring actions that do not define e.g. create or modify a presentation output object but which cause a change in the presentation on stage such as a request for a different authoring view e.g. an onion skin view etc. . In certain embodiments authoring tool communicates information about the defined one or more presentation output objects to run time player component in a run time file format such as SWF as shown in block .

In operational block the run time player component renders to the authoring tool s stage a display of the one or more presentation output objects. As such the run time player component provides a live run time rendering of the presentation output objects of an application being authored.

An illustrative example of one embodiment of the present invention is now described with reference to . As described hereafter this illustrative example describes a relatively simple application authoring scenario in which an author interacts with a user interface of authoring tool to create a presentation output object which in this example is a rectangle . Rectangle is rendered by a run time player component in stage of the authoring tools interface as shown in . Then the author interacts with authoring tool to rotate the rectangle to a desired orientation and the resulting rotated rectangle is rendered to stage by run time player component as shown in . The author then interacts with authoring tool to request a different authoring view such as an onion skin view and the output to stage is updated to reflect the newly requested authoring view as shown in . The actions performed by and between authoring tool and run time player component according to this exemplary embodiment for rendering the output to stage for the illustrative examples of are described further hereafter.

According to this exemplary scenario when an author interacts with authoring tool to create a new page or a new document a hierarchical object model is created by the authoring tool. For instance the authoring tool generates an object model that comprises a pic page which in turn has a pic layer and pic frame as shown in . Authoring tool communicates e.g. through ExternalInterface of object model information to the run time player component so that the run time player component can generate a corresponding shadow object model that comprises stage object stage layer and stage frame as shown in .

The authoring tool may then request a display of stage e.g. via communicating a request with display context from run time player component . Run time player component generates a SPRITE for the page e.g. display object for stage object of a SPRITE for the layer e.g. display object for stage layer of and a SPRITE for the frame e.g. display object for stage fame of . Since at this point the levels of the hierarchical object model are essentially empty containers that do not yet define any objects nothing is displayed to stage i.e. a blank stage is initially presented .

Now in the exemplary scenario of the author interacts with user interface of authoring tool to add rectangle . For instance the author may employ well known techniques for inserting rectangle into the application being authored such as by selecting a rectangle from toolbox and dragging and dropping such selected rectangle onto stage . So the authoring tool updates its object model to add pic shape defining the properties of rectangle . Additionally authoring tool communicates e.g. through the ExternalInterface of object model information of to run time player so that the run time player can generate corresponding stage shape in its shadow object model . According to one embodiment authoring tool communicates via ExternalInterface to request StagePlayer SWF to generate the stage shape object for rectangle . Run time player component generates in its shadow object model a stage shape object that contains the properties defined for rectangle . Run time player component generates a SPRITE for the stage shape object e.g. display object for stage shape of which is rendered to stage . Thus run time player component renders the display of the rectangle to stage of authoring tool resulting in rectangle being displayed on stage as shown in . According to this exemplary embodiment as part of adding shape object to the run time player component s stage object model hierarchy the parent stage object of the shadow object model recognizes that it contains a newly added child object in its hierarchy. The parent stage object knows the children that it has drawn before and it creates its own draw context specifically for the newly added child object e.g. shape object in this example . The child object then draws itself e.g. by generating display object e.g. a SPRITE .

Continuing with this exemplar authoring scenario suppose the author next interacts with authoring tool to modify certain properties of the rectangle such as modifying its placement location on stage its orientation its size its color etc. In response authoring tool updates the properties for rectangle in pic shape object and also communicates information to run time player component to update the properties of corresponding stage shape object so that run time player component generates an updated display of rectangle for rendering to stage . According to the illustrative example of the author interacts with user interface of authoring tool to rotate rectangle to a desired orientation. For instance the author may employ well known techniques for rotating rectangle to a desired orientation such as by interacting directly with the displayed rectangle on stage to click and drag the rectangle around an axis to the desired orientation. In response to the rotating operation the authoring tool updates the properties of pic shape object in its object model . For instance information concerning the new transformation matrix for the rectangle object for orienting it as desired may be stored to pic shape object . Various hooks may be implemented within authoring tool to cause authoring tool to notify run time player component of certain authoring operations and or chances to properties of objects. The rotate operation may trigger such a notification. Accordingly authoring tool communicates e.g. through the ExternalInterface of the updated object model information of to run time player to inform run time player of the updated orientation information for rectangle . For instance information concerning the new transformation matrix for the rectangle object for orienting it as desired is communicated to run time player component whereby run time player component updates corresponding stage shape object in its shadow object model . Run time player component generates an updated SPRITE for the stage shape object e.g. display object for stage shape of which is rendered to stage . Thus run time player component renders to stage the display of the rectangle being rotated to the desired orientation resulting in rotated rectangle being displayed on stage as shown in . Other property changes made by the author to rectangle through user interface of authoring tool may likewise be updated in the object model and communicated to the run time player component for updating shadow object model and for causing run time player component to render the corresponding updated object to stage .

As another example suppose the author performs some authoring action that does not alter a property of the rectangle but which results in a change in the display presented to stage such as changing the view to an onion skin view outline mode or other view change that does not change the object model but which changes the output to the stage . shows an example of the author output responsive to the user changing the view to outline mode which like onion skin mode changes the display but not the properties of the rectangle . In this case after rotating the user has decided to view the outlines of the objects in the drawing instead of their actual appearance. The user switches the view from full preview mode to outline mode in this case by selecting an item from the main menu . When the view mode is changed a new display request is generated and sent to the StagePlayer swf. The new request specifies that objects are drawn as outlines. The request is passed to the StageObject for the PicPage which passes the request to the StageLayer which passes the request to the StageFrame which passes the request to the StageShape. In this exemplary implementation each StageObject has already generated display object but in the general case a new display object is generated for each StageObject the same as in item . In this case though since the stage has a rectangle the view will have the outline of the rectangle as shown in .

It should be recognized that the approach described herein may be employed to enable any of a plurality of different run time player components to be used for rendering to an authoring tool s stage. For instance different versions of a given run time player may be employed to render to an authoring tool s stage. As another example any of a plurality of different run time players to which the application being authored may be targeted can be selectively employed to render to the authoring tool s stage. According to certain embodiments the authoring tool may enable an author to select any of a plurality of different run time player components to render presentation output of the application being authored to the stage . In this way the author can readily evaluate the presentation output of the application that is generated by one or more of different run time players for which the application may be targeted.

Thus various different types of run time players may be encompassed such as different mobile telephones and or other run time players for which the application may be targeted some examples of which are mentioned hereafter. A different runtime component for different versions of the runtime component with different functionality like future version of the FLASH PLAYER version 10 11 12 13 etc. . . . may be utilized in certain embodiments. A version of the runtime component with slightly different functionality corresponding to a particular device may be utilized in certain embodiments. A version of the runtime component that contains an emulator for a specific device may be utilized in certain embodiments. These devices might be mobile phonies set top boxes mp3 players video game machines smart televisions a car with a built in computing device and display screen and or any other device can have a corresponding runtime component.

When implemented via computer executable instructions various elements of embodiments of the present invention are in essence the software code defining the operations of such various elements. The executable instructions or software code may be obtained from a readable medium e.g. a hard drive media optical media EPROM EEPROM tape media cartridge media flash memory ROM memory stick and or the like or communicated via a data signal from a communication medium e.g. the Internet . In fact computer readable media can include any medium that can store information.

Computer system also preferably includes random access memory EM which may be SRAM DAM SDRAM or the like. Computer system preferably includes read only memory ROM which may be PROM EPROM EEPROM or the like RAM and ROM hold user and system data and programs as is well known in the art.

Computer system also preferably includes input output I O adapter communications adapter user interface adapter and display adapter . I O adapter user interface adapter and or communications adapter may in certain embodiments enable a user to interact with computer system in order to input information such as interacting with user interface of authoring tool to define presentation output objects such as rectangle of as described above.

I O adapter preferably connects to storage device s such as one or more of hard drive compact disc CD drive floppy disk drive tape drive etc. to computer system . The storage devices may be utilized when RAM is insufficient for the memory requirements associated with storing data for operations of the authoring tool and or run time player component . Communications adapter is preferably adapted to couple computer system to network which may enable information to be input to and or output from system via such network e.g. the Internet or other wide area network a local area network a public or private switched telephony network a wireless network any combination of the foregoing . User interface adapter couples user input devices such as keyboard pointing device and microphone and or output devices such as speaker s to computer system . Display adapter is driven by CPU to control the display on display device to for example display information pertaining to an application being authored such as displaying interface including stage with presentation objects rendered thereon by run time player component according to certain embodiments of the present invention.

It shall be appreciated that the present invention is not limited to the architecture of system . For example any suitable processor based device may be utilized for implementing authoring tool and or run time player component including without limitation personal computers laptop computers computer workstations and multi processor servers. Moreover embodiments of the present invention may be implemented on application specific integrated circuits ASICs or very large scale integrated VLSI circuits. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the embodiments of the present invention.

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

