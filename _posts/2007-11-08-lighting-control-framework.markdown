---

title: Lighting control framework
abstract: A lighting control framework is provided. The lighting control framework receives an implicit request from an application. The implicit request is converted into a converted explicit request which is processed to utilize a light of a lighting device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07772987&OS=07772987&RS=07772987
owner: Dell Products L.P.
number: 07772987
owner_city: Round Rock
owner_country: US
publication_date: 20071108
---
The present disclosure relates generally to information handling systems and more particularly to lighting devices and lights coupled to information handling systems.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an information handling system IHS . An IHS generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications IHSs may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition IHSs may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems networking systems.

Some IHSs include exterior lights which may be used by software applications on the IHSs for entertainment purposes. Conventionally software applications must have knowledge of the number type size location and capabilities of each light. This poses a significant problem to application developers as they must have intimate knowledge of the underlying hardware of the IHS in order to manipulate the available lights.

Furthermore software applications are not equipped to allow for the arbitrary addition removal or other reconfiguration of the lights.

Accordingly it would be desirable to provide an improved lighting control framework absent the disadvantages described above.

According to one embodiment a lighting control framework is provided. The lighting control framework receives an implicit request from an application. The implicit request is converted into a converted explicit request which is processed to utilize a light of a lighting device.

For purposes of this disclosure an IHS may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an IHS may be a notebook computer a desktop computer a personal computer a PDA a consumer electronic device a network server or storage device a switch router or other network communication device or any other suitable device and may vary in size shape performance functionality and price. The IHS may include memory at least one processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the IHS may include at least one storage devices at least one communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The IHS may also include at least one bus operable to transmit communications between the various hardware components.

Referring now to in one embodiment an IHS includes a processor which is connected to a bus . Bus serves as a connection between processor and other components of IHS . An input device is coupled to processor to provide input to processor . Examples of input devices include keyboards touchscreens and pointing devices such as mouses trackballs and trackpads. The input device includes at least one input device light such as light . Programs and data are stored on a mass storage device which is coupled to processor . Mass storage devices include such devices as hard disks optical disks magneto optical drives floppy drives and the like. IHS further includes a display which is coupled to processor by a video controller . The display includes at least one display light such as light . A system memory is coupled to processor to provide the processor with fast storage to facilitate execution of computer programs by processor . In an embodiment a chassis houses some or all of the components of IHS . In an embodiment the chassis includes at least one chassis light such as light . A network interface is coupled to the processor to provide the processor access to a network. Peripherals are coupled to the processor . The peripherals may include additional input devices. The peripherals include at least one peripheral light such as light . It should be understood that other buses and intermediate circuits can be deployed between the components described above and processor to facilitate interconnection between the components and the processor . It should also be understood that the IHS may not include lights or . It should also be understood that the IHS may include additional lights that are not depicted in .

Components that include lights may be referred to as lighting devices. For example in the input device the display the chassis and the peripherals may be referred to as lighting devices. The lights may be used by a variety of applications for a variety of purposes such as for example gaming environments ambience video accompaniment audio accompaniment and or a variety of other purposes known in the art. The lights may be utilized by software to change states of the lights. The changing of states may include for example turning on turning off changing color changing brightness and or a variety of other state changes known in the art.

Referring now to an embodiment of a system including software layers and a hardware layer for utilizing lights of the IHS is depicted. The lights may include for example one or all of the input device light the display light the chassis light the peripheral light and or any other lights of the IHS . The system includes four software layers an Application Layer an Interface Layer a Translation Layer an Abstraction Layer and a hardware layer Hardware Layer . The software layers and may be stored in the mass storage device and may be loaded into the system memory in order to be executed by the processor . The software layers and are an embodiment of a lighting control framework.

The Application Layer includes applications such as for example a game a movie player a music player and or a variety of other applications known in the art. The applications and are user mode executables that link to the Interface Layer . The linking may occur for example dynamically or statically.

The Interface Layer includes an application programming interface API which enables the applications and of the Application Layer to send requests to the Interface Layer . The Interface Layer then sends the requests to the Translation Layer . The requests may include light change requests which may be requests to utilize at least one of the lights of the IHS . A light change request may include an explicit request such as the Explicit Request and or an implicit request such as the Implicit Request .

An implicit request is a request wherein the applications and need no information about the hardware of the IHS such as for example the number of lights locations of the lights types of the lights capabilities of the lights and or sizes of the lights. In the implicit request an application may for example specify general regions and colors of lights which should be employed without the application having any knowledge of the specific lights being employed. In one embodiment the Implicit Request may include a location bitmask and or a color value. Each bit of the location bitmask may correspond to a desired region of the IHS in which to utilize lights and the color value may indicate a desired color with which to configure the lights. In one embodiment the location bitmask may include 27 bits with each bit corresponding to a region of a 3 3 cube wherein the cube represents the various regions of the IHS as viewed by a user of the IHS .

Conversely an explicit request is a request wherein specific information about the hardware of the IHS is used to specify which of the lights of the IHS should be employed and or how they should be employed. Prior to an explicit request the Interface Layer may provide for example the locations types capabilities and sizes of all the lights of the IHS to the applications and of the Application Layer . The applications and may then issue an explicit request specifying the specific lights to be utilized and or specific features of the specific lights to utilize.

The Translation Layer includes platform specific knowledge about the IHS which it receives from the Abstraction Layer . The platform specific knowledge may include knowledge about the lights of the IHS such as for example their locations types capabilities and sizes. The capabilities of the lights may include a variety of light capabilities known in the art such as colors that the lights can display. The Translation Layer further includes an Implicit Request Conversion Module an Explicit Request Pass Through Module and a Fallback Mechanism Module . In one embodiment the Translation Layer may receive an explicit light change request from the Interface Layer and the Explicit Request Pass Through Module may then pass the explicit request directly to the Abstraction Layer . In another embodiment the Translation Layer may receive an implicit light change request from the Interface Layer and the Implicit Request Conversion Module may then use the platform specific knowledge to attempt to convert the implicit request to an explicit request. For example if the implicit request specifies to turn on all lights in a region A the Implicit Request Conversion Module may use knowledge that the light is in the region A and may create a corresponding explicit request to turn on the light . If the Implicit Request Conversion Module successfully converts the implicit request to an explicit request the converted explicit request is then passed to the Abstraction Layer . If the implicit request cannot be converted to an explicit request the Fallback Mechanism Module is used to determine whether the hardware of the IHS is able to substitute a light change close enough to the implicit request. For example if the implicit request specifies to change lights in a region B to a turquoise color but the lights in region B of the IHS do not have the capability to produce the turquoise color the Fallback Mechanism Module may determine that aqua blue is close enough to turquoise and is therefore a reasonable substitution. As an additional example if the implicit request specifies to turn on all lights in a region C to a high brightness but the IHS has no lights corresponding to the region C the Fallback Mechanism Module might determine that a reasonable substitution includes turning on lights in two regions adjacent to region C at a medium brightness. If the Fallback Mechanism Module is able to determine a reasonable substitution the implicit request is converted to an explicit request associated with the substitution and the converted explicit request is then passed to the Abstraction Layer . If a reasonable substitution cannot be determined the Fallback Mechanism Module determines that a light change will not be made.

The Abstraction Layer includes an Enumeration and Interrogation of Light Devices Module and an Explicit Request Processing Module . The Enumeration and Interrogation of Light Devices Module when first loaded discovers all the lighting devices and lights in the system by interrogating different subsystems of the IHS such as for example BIOS USB PCI Bluetooth Wireless USB and a variety of other IHS subsystems and buses known in the art. It then creates and provides a data structure that describes the locations sizes capabilities and states of the lighting devices and lights of the IHS . The data structure may be in a standardized format usable by the various layers of this embodiment. In an embodiment the Enumeration and Interrogation of Light Devices Module may automatically detect the addition or removal of a lighting device and then may update the data structure accordingly. The Explicit Request Processing Module receives explicit requests from the Translation Layer and then communicates directly with the Hardware Layer to utilize the lights and as specified by the explicit request.

The Hardware Layer may include for example a notebook computer a desktop computer and or a peripheral. In the illustrated embodiment the Hardware Layer includes the IHS described above with reference to . The Hardware Layer receives communications from the Abstraction Layer and performs light changes as requested.

Referring now to an embodiment of a method is illustrated. The method begins at block where an IHS is initialized. In an embodiment the IHS is the IHS described above with reference to . The initialization may be performed by software and or hardware and may include hardware initialization and or software initialization. The hardware initialization may include for example configuring various components of the IHS including the lights and to an initial state such that they may be utilized by software. The software initialization may include for example loading of software execution of software discovering the hardware configuration and storing the hardware configuration. In an embodiment part or all of the initialization may be performed by the Enumeration and Interrogation of Light Devices Module described above with reference to .

The method then continues to block where an application starts execution. In an embodiment the application is one of the applications and described above with reference to . The method then continues to decision block where the application attempts to link to a dynamically linked library DLL . In an embodiment the DLL library may include part or all of the Interface Layer the Translation Layer and or the Abstraction Layer described above with reference to . In an embodiment the DLL is a Light FX LFX DLL. The DLL loads subroutines of a library into the application when the application is loaded or when the application is executed. In an embodiment the application may include a static library instead of or in addition to the DLL. The static library may be for example compiled into the executable of the application during compilation.

If it is determined at decision block that the application is able to link to a DLL the method then continues to decision block where the application attempts to obtain an exclusive lock for accessing one or more of the lights of the IHS. The exclusive lock may be used to prevent other applications from utilizing the lights. If it as determined at decision block that the application is unable to obtain the exclusive lock the method then returns to block where it proceeds to attempt to obtain the exclusive lock.

If it is determined at decision block that the application is able to obtain the exclusive lock the method then continues to block where pre application hardware states of the IHS are saved. The pre application hardware states include hardware states of the lighting hardware e.g. the lighting devices and the lights of the lighting devices of the IHS prior to the application requesting any light change requests. The hardware states may include for example colors brightnesses tints blinking configurations and or a variety of other lighting hardware states known in the art.

Referring now to and in an embodiment the block includes method . The method begins at block after the exclusive lock is obtained at decision block . The method then proceeds to decision block where it is determined whether there is a remaining lighting device to query.

If it is determined at decision block that there is a remaining lighting device to query the method continues to decision block where it is determined whether there is driver support for the remaining lighting device. If it is determined at decision block that there is driver support for the remaining lighting device the method continues to decision block where the configuration of the lighting hardware associated with the lighting device is queried and added to a pre application hardware states data structure. The method then returns to decision block where it is determined whether there is another remaining lighting device.

If it is determined at decision block that there is no driver support for the remaining lighting device the method returns to decision block where it is determined whether there is another remaining lighting device.

Referring now to if it is determined at decision block that there is not another remaining lighting device the pre application hardware states data structure is saved and the method ends. The method then continues to decision block where it is determined whether there is a light change request. In an embodiment the determining whether there is a light change request may be performed by the Interface Layer and or the Translation Layer described above with reference to . In an embodiment the light change request may originate from the Application Layer . If it is determined at decision block that there is not a light change request the method then returns to decision block where it proceeds to determine if there is a light change request.

If it is determined at decision block that there is a light change request the method continues to decision block where it is determined whether the light change request is an implicit request similar to as described above. In an embodiment the determining whether the light change request is an implicit request may be performed by the Translation Layer . If it is determined at decision block that the light change request is an implicit request then the method continues to block where the implicit request is converted to an explicit request. In an embodiment the conversion may be performed by the Implicit Request Conversion Module described above with reference to . In an embodiment the conversion to an explicit request may include recomputation of colors and brightnesses for all lights of the IHS . The method then proceeds to decision block described below wherein the converted explicit request is substituted for the light change request of decision block .

If it is determined at decision block that the light change request is not an implicit request then the method continues to decision block where it is determined whether the light change request is an explicit request similar to as described above. In an embodiment the determining whether the light change request is an implicit request may be performed by the Translation Layer . If it is determined at decision block that the request to change the light is an explicit request the method continues to block where the explicit request is serviced. The servicing of the explicit request includes using the explicit request to update a software state and or a hardware state. The software state may include a cached representation of a hardware state of the lighting hardware of the IHS . In an embodiment the hardware state may not be updated to match the software state unless explicitly specified by the application or may be only updated to match the software state after a certain time interval. The updating of the hardware state includes utilizing the lights of the IHS as specified by the software state and or the explicit request. In an embodiment the servicing of the explicit request may be performed by the Explicit Request Processing Module described above with reference to . The method then returns to block where it is determined whether there is another light change request.

If it is determined at decision block that the light change request is not an explicit request then the method continues to decision block where it is determined whether the light change request is a reset request. A reset request is a request to update the software state and or the hardware state such that all of the lights are disabled. If it is determined at decision block that the light change request is a reset request then the method continues to block where the reset request is performed. The method then returns to block where it is determined whether there is another light change request.

If it is determined at decision block that the request to change the light is not a reset request then the method continues to block where it is determined whether the light change request is an update request. An update request is a request to update the hardware state such that it matches the software state. If it is determined at decision block that the light change request is an update request the method then continues to block where the hardware state is updated to mirror the software state. In an embodiment the hardware state may be updated by the Explicit Request Processing Module described above with reference to . The method then returns to block where it is determined whether there is another request to change a light.

If it is determined at decision block that the light change request is not an update request the method then continues to decision block where it is determined whether the pre application hardware states of the IHS should be restored. The restoring includes updating the lighting hardware to the hardware state before the application issued any lighting request. It If it is determined at decision block that the light pre application hardware states of the IHS should not be restored the method then returns to decision block where it is determined whether there is another light change request.

Referring now to and if it is determined at decision block that the pre application hardware states of the IHS should be restored the method then proceeds to block where the pre application hardware states of the IHS are restored using the pre application hardware states that were saved in block . The method then continues to block where the exclusive lock is released so that other applications may utilize the lights. The method then continues to block where the application exits. The method then ends at block .

Referring now to and if at decision block it is determined that the application is unable to link to the DLL the method continues to block where it is determined whether the application should continue without linking to the DLL. If it is determined that the application should not continue without linking to the DLL the method then continues to block and continues in a substantially similar manner from block as described above until the method ends at block .

Referring now to if at decision block it is determined that the application should continue without linking to the DLL the method continues to block and continues in a substantially similar manner from block as described above until the method ends at block .

Thus embodiments are disclosed that provide a lighting control framework including an application programming interface API that enables applications to utilize lights of an IHS without requiring the applications to have knowledge of the number type size location and capabilities of the lights in the IHS.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. Accordingly it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

