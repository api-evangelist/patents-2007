---

title: Combined application and execution environment install
abstract: Methods, systems, and apparatus, including medium-encoded computer program products, for installing software, including application execution environments, on a computer. One or more aspects of the subject matter described in this specification can be embodied in one or more methods that include receiving a request to provide for installation of a software application on a target computer, where the software application requires for operation an application execution environment program including a cross-platform application program interface to provide services to applications that run in the application execution environment; and providing installation of both the software application and the application execution environment program in an installation sequence when the target computer lacks the application execution environment program; wherein the installation of the software application and the application execution environment program are tied together as a single installation transaction, such that they succeed or fail together.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230417&OS=08230417&RS=08230417
owner: Adobe Systems Incorporated
number: 08230417
owner_city: San Jose
owner_country: US
publication_date: 20070608
---
This application is related to U.S. patent application Ser. No. 11 760 674 entitled APPLICATION EXECUTION AND INSTALLATION ENVIRONMENT filed on Jun. 8 2007 which is hereby incorporated by reference.

This specification relates to installing software including application execution environments e.g. virtual machines and runtime environments on a computer platform. A computer platform is a computer including a particular operating system OS for that computer e.g. W OS M OS or L OS . Software developers often create source code that can be appropriately compiled for respective computer platforms and then independently generate native installation packages for each target platform. Each native installation package is associated with a specific computer platform and these native installation packages can then be distributed for installation on appropriate machines. For a particular target platform the appropriate native installation package is obtained from the software developer and an OS installer can be used to process the native installation package in order to install the application. For example IS software can be used to produce an .msi file for installation on W machines and a different software tool can be used to produce .pkg files for installation on M machines.

Some software developers have created cross platform installation packages such as the J Archive JAR file format that get deployed to the end user system. The cross platform package can then be expanded e.g. decrypted and uncompressed and written directly to disk using code provided by the software developer and or the developer of the cross platform package format. Typically such cross platform software relies on a previously installed virtual machine such as the J Virtual Machine JVM available from Sun Microsystems Inc. to run on the target platform.

The JVM provides a runtime environment and Java interpreter for most operating systems including W OS M OS L OS. Java source code files files with a .java extension are compiled into a format called bytecode files with a .class extension which can then be executed by a Java interpreter. Bytecode can be converted directly into machine language instructions by a just in time compiler JIT . Other example runtime environments include the C runtime .NET and the Adobe Integrated Runtime.

Flash Player available from Adobe Systems Incorporated is another virtual machine which is used to run or parse Flash files including ActionScript or Shockwave Flash SWF . The Flash Player and Flash Authoring software allow development of projectors self running SWF movies that run on a specific target platform by embedding the SWF data in the Flash Player executable to create a new .exe file and manipulating a byte pattern in the .exe file to indicate the presence of the SWF data. Such projectors can then be distributed for use on the target platform.

Traditionally runtimes and their installers have been developed separately. Often the installation engine for a runtime is acquired or licensed from a third party. An installer for a runtime contains its own user interface and other facilities for interacting with the OS of the target computer platform. In addition applications that require a runtime to be installed before they can be used have to let the user know about this prerequisite. In the network download context typically the user is required to download and install the runtime first as a separate process and then re start the application install process. Alternatively the two installers one for the runtime and one for the application can be chained together such that even though the application install process re starts automatically the user still sees two separate series of installation dialogs.

This specification describes technologies relating to installing software including application execution environments e.g. virtual machines and runtime environments on a computer platform.

In general one or more aspects of the subject matter described in this specification can be embodied in one or more methods that include receiving a request to provide for installation of a software application on a target computer where the software application requires for operation an application execution environment program including a cross platform application program interface to provide services to applications that run in the application execution environment and providing installation of both the software application and the application execution environment program in an installation sequence when the target computer lacks the application execution environment program wherein the installation of the software application and the application execution environment program are tied together as a single installation transaction such that they succeed or fail together. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. The providing can include providing an initial installation user interface panel relating to the software application upon first initiation of the installation sequence. The installation sequence can include a user interface panel presented to a user that includes a notification regarding the application execution environment program to be installed along with the software application. Moreover the providing can include providing the user interface panel for presentation to the user and collection of install preferences for the software application installation wherein the notification includes an indication that the application execution environment program installation is required for the software application installation.

The installation sequence can include an installation user interface panel to receive confirmation that the user wants to install the software application the user interface panel that includes the notification regarding the application execution environment program to be installed along with the software application a license agreement user interface panel to receive acceptance of a user license agreement for the application execution environment program and an install process user interface panel to present progress of the installation of both the software application and the application execution environment program using a single progress indicator that spans the installation of both the software application and the application execution environment program.

The providing can include starting a first installer of the application execution environment program with a reference to an installation package of the software application calling a second installer for the installation package from the first installer with an indication that the application execution environment program is to be installed presenting by the second installer the user interface that includes the inserted notification and after user acceptance of the license agreement for the application execution environment program installing the application execution environment program and then the software program. Moreover the installing can include the second installer driving the application execution environment program then the software program installs transactionally as one install using an install progress bar that spans the installs.

The providing can include providing an installer package including the application execution environment program and an installer to the target computer to install the application execution environment program and the software application by running the installer in the application execution environment copied to the target computer. Additionally one or more computers operable to interact with the target computer to perform these operations can include a server operable to interact with the target computer through a data communication network and the target computer can be operable to interact with the server as a client. Moreover the target computer can include a personal computer running a web browser e.g. a desktop computer or a mobile communication device running a wireless application protocol browser e.g. a mobile phone .

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. A runtime or more generally a software program can contain its own installation logic. The runtime can make use of its own user interface and other facilities during its own installation. An installer for the runtime can operate from within the runtime being installed. The size of the installer can be reduced since a full fledged installation engine need not be used and this can in turn result in reduced download size for the installer runtime combination only a single copy of the runtime need be transmitted . Since the installer can presume that the runtime will be available to provide user interface and other facilities the installer does not need to duplicate facilities available in the runtime itself thus reducing the overall size of the runtime and installer package. Installation success rates can be increased. User interfaces for installation can be embedded in the runtime and used by the installer such that installs can have the same look and feel across both runtime and application installs. Moreover the installer can provide its own look and feel for the install by providing user interface code that runs on the runtime to produce the user interface s for installation.

A single copy of a runtime can be used in two ways. First the installer itself can run on top of the copy of the runtime included in an installation package. Second the logic in the installer can use that same copy of the runtime as the source for installing the runtime on a target computer. An installer can operate on a runtime on a target computer that is not yet installed on the target computer. The installer can be built into the runtime it is installing. The runtime can be designed to run in two different modes an installed mode where the runtime is registered at a specific location and an x copy mode where the runtime executable can be run directly from disk without registering through the OS . The runtime can be executed in x copy mode to install the runtime in the installed mode. Thus the runtime can essentially install itself.

Furthermore a software application and the runtime on which the application depends neither of which have yet been installed on a target computer can be installed to the target computer in a combined workflow. The combined workflow can guide the user through a single install process installing both the application and the runtime with a minimum number of interactions. The two installations of the runtime and the application that depends on the runtime can be combined on the fly into a single unified installation sequence where both the installation process and the install user interface are combined for the application and the runtime. The ease of installation and usability can be improved making the installation process more streamlined and less confusing for the user which can result in high success rates since more users are likely to complete the installation process rather than change their mind midstream. Thus the burden on the user to get the runtime installed can be effectively minimized. Moreover the installation of the application and the runtime on which the application depends can be interleaved.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The distributor can be a software developer publisher reseller or other entity which distributes software or the computers used by such. For example the distributor can be a server or server cluster providing software download facilities over a network such as Local Area Networks peer to peer networks wireless networks the Internet and the World Wide Web. The installer package can also be distributed on physical media such as Compact Discs CDs Digital Versatile Discs DVDs and floppy disks or by other techniques that can be used to deliver digital content.

The target computer includes both hardware and software. The hardware includes input output devices one or more processors and at least one computer readable medium e.g. memory device s a storage device s or combinations of one or more of them . The software can include an operating system on which the software elements provided by the distributor operate. The application execution environment uses the operating system to interact with other elements of the computer . The application execution environment can provide various utility services for use by applications that run in the application execution environment. These utility services can include file system access window and menuing integration with the OS shell e.g. W OS Explorer or M OS Finder file extension registration document processing support e.g. HTML and PDF engines string manipulation graphics networking notification facilities addressing peripherals or other types of functionality that can be provide using a runtime library. Moreover the application execution environment can include a cross platform application program interface API that provides services to applications that run in the application execution environment and serves to abstract away details of the various hardware and OS platforms on which the application execution environment program has been designed to run.

Thus the application execution environment AEE can be a cross platform runtime environment such as the Adobe Integrated Runtime AIR software provided by Adobe Systems Inc. of San Jose Calif. In some implementations the application execution environment can load an application from an encoded representation of the application. For example the encoded representation can have a predefined syntactic structure such as a programming language e.g. source code or can include well defined virtual instructions e.g. platform independent bytecode such as Macromedia Flash bytecode . To load such applications the application execution environment can decode the encoded representation of the application into instructions and can execute the instructions of the application.

In addition to serving as an application execution environment the AEE can also serve as an application installation environment both for itself and the applications that run on the AEE . The user interface and language facilities of the AEE e.g. HTML MXML Multimedia eXtensible Markup Language and scripting support such as for ActionScript and JavaScript can be used when writing the installer for the AEE an application or a combination of them . This can help in reducing the size of the installer since much of the programming logic that would normally be needed in the installer can be incorporated into the AEE .

The extent of the install uninstall facilities to be put into the AEE can vary among implementations. In some cases the AEE can provide APIs that perform all installation operations based on requests from one or more appropriate installers. In other cases some installation operations can be provided in the one or more installers and lower level API s of the runtime e.g. file system access API can be used complete the installation operations on the computer .

The identified application execution environment program can be combined with an installer for a software program into an installer package. This combining can also be specific to a class of computers thus the identifying and the combining can be performed for each target class of computers to prepare an installer package for each target class which can be provided separately to each target computer that is a member of the class. Alternatively the identifying and the combining can be performed dynamically for each target computer such as when the installer sent needs to be specific to the target computer for digital rights management DRM purposes.

The installer itself runs in the application execution environment and the installer package can be provided to the target computer to install the software program by running the installer in the application execution environment copied to the target computer. As shown in the installer runs on top of the application execution environment in a manner similar to application s designed to run in the application execution .

In the example described in connection with the installer package can itself be considered an installer since the package is an executable that begins the installation process. In other situations the installer package can be a compressed archive file itself. For example for M OS computers the installer package can be a .dmg file in disk image format. In this case the user can open the .dmg file e.g. double click it and then launch the AEE installer included therein. Moreover the installer package can include one or more additional installers as discussed further below.

In any event the application execution environment program can include installation uninstallation code for installing software to the target computer the cross platform application program interface can include an install uninstall interface to the installation uninstallation code and the installer can include user interface code . When the installer is run in the AEE on the target computer the installer can employ the install interface of the AEE to effect installation of the software program e.g. the AEE itself and the installer can employ the user interface code e.g. HyperText Markup Langauge ActionScript or SWF code which can also be run using the AEE to generate and present a user interface for the installation process.

For example the installer can contain a user interface that has been written using Adobe Flex software Flash code or ActionScript code or a combination of these where this user interface UI communicates with logic that is embedded in the AEE . The name of the main class in the AEE for this purpose can be runtime installer and an instance of the runtime installer can be created some properties can be set on this instance and then the runtime installer can be started. The runtime installer can then dispatch events as the install proceeds to report on progress e.g. what percentage has been installed if something has gone wrong and so forth . These events can be captured by the code in the installer which causes the UI to be updated. Note that communications going in both directions can be implemented using events. Thus when the user accepts an end user license agreement for the AEE as discussed further below an event can be sent from the UI to the runtime installer class telling it to proceed with the installation. Then progress events can come back the other way and cause the progress bar to be updated.

When the installer is run in the AEE on the target computer the installer can also cause placement of an uninstaller on the target computer wherein the uninstaller runs in the AEE . The uninstaller can be another copy of the AEE plus code that runs on top of it e.g. Flex code . Thus the installer can employ the install interface to effect installation of the AEE and the uninstaller can employ the uninstall interface to effect uninstallation of the AEE . Furthermore the installation uninstallation code in the AEE can be designed to operate directly on the target computer to perform install and uninstall tasks e.g. in a M OS based computer or the installation uninstallation code can be designed to interface with install uninstall facilities provided by the OS e.g. the W Installer APIs in a W OS based computer .

In the example presented above the runtime installer class can have very different implementations on a M OS based computer versus a W OS based computer. On a W OS based computer the runtime installer can operate using API s that are in the AEE and that are related only to installation because they use the W installation services to perform the installation operations. On a M OS based computer or a L OS based computer the runtime installer can operate using the file system API s that are in the AEE . In any event the runtime installer class can define a cross platform interface that the installer s can access and use in the same manner regardless of whether it is running on a M OS based computer or a W OS based computer i.e. the installer need not have any native code in it . Other approaches are also possible. For example the AEE can provide a mechanism for invoking native code and this mechanism can also be used by the installer .

A second copy of the application execution environment program can be made at a second location on the target computer. The application execution environment program can be registered at the second location on the target computer. This can involve registering file extensions and MIME Multipurpose Internet Mail Extensions content types registering instructions for uninstallation creating desktop shortcuts and start menu entries etc. The first copy of the application execution environment program can be deleted at the first location on the target computer. Note that making the second copy and deleting the first copy can be part of a move operation that has been integrated with the installation process. In addition the copying registering and deleting can involve using logic built into the application execution environment program itself.

If the application execution environment program is not already installed on the computer installation of both the software application and the application execution environment program can be provided in an installation sequence. The installation sequence can include a user interface panel that includes a notification regarding the application execution environment program to be installed. In addition the installation of the software application and the application execution environment program can be tied together as a single installation transaction such that they succeed or fail together.

A second installer for the installation package can be called from the first installer with an indication that the application execution environment program is to be installed. The second installer can be designed to install software applications that run on the application execution environment. The second installer can be part of an install uninstall facility built into the application execution environment as shown and described in connection with . Thus the second installer can be part of the application execution environment itself such that installing applications is one of the services the environment provides.

The second installer can present a user interface that includes a notification regarding the application execution environment program to be installed along with the software application. This allows the user to be fully informed about the planned combined installation of the application and the underlying environment on which it runs but this information is provided within the context of the installation sequence for the software application itself. Thus the application execution environment program can be handled from the user s perspective like an element of the application which cannot be unselected even though it is a fully independent separate software program that serves as a runtime environment for the software application.

Also because the application execution environment is a separate software program the installation sequence can also include a request for user acceptance of an end user license agreement EULA for the application execution environment program. If the user acceptance is received the application execution environment program and then the software program can be installed transactionally as one install using an install progress bar that spans the two installs.

The application installer in the first runtime copy e.g. ActionScript code that uses native code built into the runtime can then drive installation of the software application and the runtime on which it depends transactionally as one install if either installation fails or is cancelled the entire combined installation is rolled back and undone. An installed copy of the runtime can be created from the first runtime copy and registered on the target computer. Then an installed copy of the application can be created from the application install package . Finally the first runtime copy and the runtime installer copy can be deleted from the target computer or otherwise transitioned to a new state e.g. they can be moved and converted into an uninstaller for the application and the runtime . Thus the runtime can provide both an execution environment for applications and a installation uninstallation environment for applications and itself.

The download link can include a SWF badge that uses an API of the Flash Player to detect whether or not the runtime is already installed on the local computer. The SWF badge the SWF running in the web page can check for the runtime when the SWF badge is displayed in the page. Then when the user clicks on the SWF badge it does different things depending on whether or not the runtime is already installed. If the runtime is installed on the local computer the SWF badge can invoke the runtime directly to handle the installation of the audio player application. If the runtime is not installed on the local computer the SWF badge can proceed to download the installer for the runtime and send a Universal Resource Locator URL for the audio player application for the installer to use upon starting. The URL can be sent by the SWF badge in a message via an interapplication communication IAC mechanism such as LocalConnection which operates using a shared memory segment or another IAC mechanism. The IAC mechanism employed can be supported by both the web browser or a plug in thereto and the application execution environment.

When a user clicks on the link this can result in downloading an installation package as described above along with appropriate notifications and user authorizations. For example the link can result in the installation package being saved to the local computer for later use or the link can cause the installer to be downloaded and run immediately e.g. if the installation package is the installer executable with embedded runtime as described above . In addition user authorization for the initial download of the runtime can also be obtained through a user interface presented and controlled by the web browser.

The installer for the runtime can be instructed to install both itself and the audio player application. Once the runtime installer begins running on the target computer the user interface presented can be that of the application install. For example the runtime installer can call the application installer for the audio player application along with an indication that the runtime is to be installed also. The first panel presented to the user can thus be an application install panel as shown in which shows details of the application to be installed and requested user confirmation that the install to proceed.

The application install UI can be rendered using the runtime that has been downloaded but not yet installed. The application install UI can be used to collect user preferences for the application e.g. install location whether to add a shortcut icon to the desktop whether to start the application after installation etc. . However because the runtime is also to be installed one or more additional items can be inserted into the application install UI to indicate that the runtime install will also happen. These inserted items can include notifications and user input requirements. For example a second panel as shown in can include a notification regarding the runtime install. The notification can be presented as an option that cannot be turned off e.g. a grayed out check box as shown . When the user presses the continue button a third panel can be presented to obtain user acceptance of the end user license agreement for the runtime.

Once the user confirms the combined install the installer can install the runtime and then the application. Both installations can be presented to the user interface as a single operation with combined progress updates. For example an install progress panel as shown in can include a progress bar that spans the runtime installation and the application installation. Progress information from the runtime install can be sent back to the application install logic and displayed in the first fifty percent of the progress bar shown.

When the runtime install completes progress from the application install can be displayed in the second fifty percent of the progress bar shown. When the application install completes the application can then be run and used. Note also that the panels can all be presented in a single UI window used for the combined installation process.

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a tangible program carrier for execution by or to control the operation of data processing apparatus. The tangible program carrier can be a propagated signal or a computer readable medium. The propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a computer. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device or a combination of one or more of them.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment or a combination of one or more of them. In addition the apparatus can employ various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described is this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many implementation details these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. Various mobile and other devices e.g. having embedded operating systems can also be supported.

