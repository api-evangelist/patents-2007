---

title: Method and system for performing I/O operations using a hypervisor
abstract: A method for installing a device driver for a device in a guest domain, that includes obtaining a first device driver for the device by a hypervisor, installing, by the hypervisor, the first device driver into memory allocated to the guest domain, and notifying an operating system in the guest domain of the first device driver after installing the device driver, wherein the operating system communicates with the device using the first device driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979869&OS=07979869&RS=07979869
owner: Oracle America, Inc.
number: 07979869
owner_city: Redwood City
owner_country: US
publication_date: 20071031
---
This application claims benefit of U.S. Provisional Application Ser. No. 60 976 382 entitled Method and system for Accessing a Device in a Hypervisor Environment filed on Sep. 28 2007 in the name of Olaf Manczak Christopher A. Vick and Michael H. Paleczny.

Traditional computer systems are designed with applications executing in an environment specified by an operating system. The operating system in turn executes directly on hardware. In order to use devices in the hardware an operating system installs the device driver. Thus when applications want to use the device the operating system uses the device driver to communicate with the device.

Advances in computer science have led to the virtualization of hardware. Specifically rather than an operating system directly using resources of hardware the operating system executes in a virtual environment with virtual hardware resources. One such virtual environment is created by the use of hypervisors to create domains also referred to as virtual machines. Domains provide a mechanism for the containment of software and the separation of software from hardware. For example the domain may be used to prevent software failures from causing another failure in the system. Thus in virtualized environment applications execute in an environment created by the operating system which in turn executes on virtual hardware resources provided by a domain.

A hypervisor may be used to manage the execution of the domains Specifically hypervisors are used to determine which domains execute and to transfer control of processors and other physical resources between domains. In addition to the domains with applications and operating systems other domains may include a control domain which provides a management interface to the hypervisor and a driver domain which executes physical device drivers. The control domain is frequently the only driver domain for a computer system with a hypervisor. Specifically when an operating system in a domain executing an application requires the use of hardware resources the request may be transferred via a virtual device driver i.e. a driver for a virtual device sometimes also called a bridge device to the control domain which performs the operations necessary to communicate with the device using a physical device driver.

In general in one aspect the invention relates to a method for installing a device driver for a device in a guest domain that includes obtaining a first device driver for the device by a hypervisor installing by the hypervisor the first device driver into memory allocated to the guest domain and notifying an operating system in the guest domain of the first device driver after installing the device driver wherein the operating system communicates with the device using the first device driver.

In general in one aspect the invention relates to a computer system that includes a device a hypervisor and an operating system installed in a guest domain of the hypervisor. The hypervisor may be configured to obtain a first device driver for the device install the first device driver into memory allocated to the guest domain and notify the operating system of the first device driver after installing the device driver wherein the operating system communicates with the device using the first device driver.

In general in one aspect the invention relates to a computer readable medium that includes computer readable program code embodied therein for causing a computer system to obtain a first device driver for a device by a hypervisor install by the hypervisor the first device driver into memory allocated to a guest domain of the hypervisor and notify an operating system in the guest domain of the first device driver after installing the device driver wherein the operating system communicates with the device using the first device driver.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention provide a method and system for a hypervisor to install device drivers into a guest domain instantiate the drivers in physical memory owned by the guest domain and activate the drivers by notifying the guest domain operating system. Specifically in one or more embodiments of the invention a hypervisor may install a device driver into a guest domain instantiate the driver in a location of physical memory allocated to the guest domain and then notify the operating system in the guest domain of the new device driver so that the operating system may use the device driver. Further the hypervisor may replace the device driver without the operating system being aware that the replacement has occurred.

The hardware includes the physical devices on a node . For example the hardware may include one or more processors not shown memory and at least one device . In one or more embodiments of the invention the node may have a single processor or multiple processors. Further each processor on the node may be a multi core processor in accordance with one or more embodiments of the invention. Additionally the node may be a part of a distributed computer system having multiple nodes.

In one or more embodiments of the invention the hardware includes one or more devices . Devices on the node may include internal devices and or peripheral devices. For example the devices may include input and output devices such as storage drives monitors printers networking devices sound devices video based devices keyboard mouse or any other type of device that may be used with a computer system.

The hardware includes memory in accordance with one or more embodiments of the invention. Memory includes any type of storage medium used to store data. In one or more embodiments of the invention memory may be allocated to different components of the node . The allocation of memory is discussed in more detail below.

In one or more embodiments of the invention software executes on the hardware of the node . The software includes a guest domain a second domain and a hypervisor . A guest domain and a second domain are partitions of the resources available on the node . The partitioning of resources may be in terms of space e.g. memory time and space e.g. processor or micro core of a processor or time. A domain is a type of virtual machine within which a program may execute. Specifically domains provide a method for containment of software and a separation of software from hardware. For example domains may be used to prevent software failures in a single domain from causing another failure in the system. Each domain may be allocated disjoint or non overlapping physical memory. Specifically the guest domain may be allocated guest domain memory and the second domain may be allocated second domain memory . The allocation of memory to each domain e.g. guest domain second domain ensures that each domain may operate independently.

A guest domain is a type of domain with access limited to virtual resources. A virtual resource is a layer of indirection that represents the physical resources such as the hardware of the node. Specifically in one or more embodiments of the invention programs in the guest domain perform functions that are wholly contained in the guest domain . For example programs in the guest domain may be unable to directly control hardware access memory of other domains e.g. second domain memory or manage the execution of all applications including on other domains e.g. second domain .

The guest domain includes a guest domain operating system . The guest domain operating system includes functionality to manage the execution of processes in the guest domain . In one or more embodiments of the invention the guest domain operating system operates as if it has sole control of the hardware . Specifically the guest domain operating system operates as if the guest domain operating system is the only operating system on the node and the resources e.g. processor cycles guest domain memory allocated to the guest domain are the only resources available on the node . Thus the guest domain operating system includes functionality to control the operating environment of the processes executing in the guest domain .

In addition to a guest domain the node may also include a second domain . In one or more embodiments of the invention the second domain is configured to separately execute programs. For example the programs executed by the second domain may include one or more user level applications management programs an operating system etc. The operating system of the second domain may be the same as the guest domain operating system or may be a different operating system. Specifically the second domain operating system may provide a different execution environment than the guest domain operating system .

The second domain may be a control domain a driver domain or a second guest domain. In one or more embodiments of the invention when the second domain is a control domain the second domain executes software to perform system management tasks associated with a node having a hypervisor described below . Specifically the second domain software may include functionality to configure the hypervisor perform communications with a physical device for other domains e.g. guest domain create destroy and configure guest and driver domains and functionality to perform the management of the node . While shows a node with only two domains one skilled in the art will appreciate that the node may have a single domain or more than two domains.

Continuing with the hypervisor includes functionality to control the sharing of hardware resources on the node . In one or more embodiments of the invention a hypervisor is a software component that has separate memory e.g. hypervisor memory from the domains e.g. guest domain second domain . Specifically the hypervisor includes functionality to virtualize the hardware of the node so that more than one operating system may run on the node concurrently.

In one or more embodiments of the invention the hypervisor includes functionality to monitor the use of the device by the node and install a device driver e.g. guest domain device driver into the guest domain memory . The hypervisor further includes functionality to store identification of the location of the guest domain device driver in the guest domain memory . Thus in one or more embodiments of the invention the hypervisor may replace the guest domain device driver without additional notification of the guest domain operating system .

In one or more embodiments of the invention the guest domain device driver allows the guest domain to request the use of the device . Specifically a guest domain device driver is an intermediary between the device and the guest domain operating system .

In one or more embodiments of the invention the guest domain device driver may be a device driver for a virtual device or a paravirtualized device. A device driver for a virtual device may appear to the guest domain operating system as if it is a device driver for a physical device but it does not allow direct communication with the device . Specifically when a device driver for a virtual device is used data is copied by the hypervisor between the memory of the guest domain and memory of the second domain. The second domain uses a physical device driver to communicate with the device to perform the functions requested by the guest domain operating system . Thus to the guest domain operating system the virtual device has the appearance of a physical device even though data transfer has a level of indirection.

In contrast a device driver for a paravirtualized device allows the guest domain to communicate directly with the physical device without the interference of another domain. Specifically data is transmitted by the physical device accessing the same memory buffer as the guest domain. The device driver for the paravirtualized device issues commands to the hypervisor which in turn issues commands to the physical device. In one or more embodiments of the invention the device driver for the paravirtualized device is hardware dependent and operating system specific. Specifically the device driver for the paravirtualized device is dependent on the type of device and is able to handle the system calls that are specific to the type of operating system.

In order to install the guest domain device driver the hypervisor may include functionality to access a device driver generator not shown and or a device driver repository not shown . Specifically the device driver generator and or the device driver repository may be a part of the hypervisor or accessible by the hypervisor. In one or more embodiments of the invention a device driver generator includes functionality to generate a device driver based on information about the operating system and information about the device. A device driver generator may include functionality to access a repository of application programming interfaces supported by the operating system and a repository of commands that can be interpreted by the device.

In one or more embodiments of the invention a device driver repository is a storage area for storing device drivers. A device driver for each combination of types of devices and types operating systems that may be used by the node may be stored in the device driver repository.

While shows one or more embodiments of the invention in which the hypervisor executes directly on the hardware the hypervisor may alternatively execute on a host operating system without departing from the scope of the invention. In one or more embodiments of the invention the host operating system may exist in a layer between the hypervisor and the hardware . For example the host operating system may be used to support more types of hardware.

If a device driver for a virtual device is to be installed information about the guest domain operating system is obtained Step . The information about the guest domain operating system may include the type of operating system the version of the operating system updates to the operating system that have been installed etc. Different methods may be used to obtain information about the guest domain operating system. In one or more embodiments of the invention the information may be stored in memory allocated to the control domain or the hypervisor when the guest domain operating system is installed thus allowing the information to be obtained directly from the memory of the control domain or memory of the hypervisor.

In one or more embodiments of the invention the guest domain operating system supports a custom application programming interface that allows the hypervisor to communicate with the guest domain operating system. The hypervisor may use this application programming interface to request the information from the guest domain operating system. One skilled in the art will appreciate that any suitable method may be used to obtain the information about the guest domain operating system without departing from the scope of the invention.

Regardless of how the information is obtained a device driver for a virtual device is obtained based on the information about the guest domain operating system Step . Specifically in one or more embodiments of the invention the device driver for a virtual device may be obtained from a device driver repository. Further in one or more embodiments of the invention the device driver for a virtual device may be generated by a device driver generator. Generating a device driver may be performed using any suitable technique known in the art for automatic software generation. For example the device driver for a virtual device may be generated to receive system calls created by the guest domain operating system and forward the system calls to the appropriate routine in the hypervisor.

Continuing with rather than installing a device driver for a virtual device the determination may be made in Step to install a device driver for a paravirtualized device. If a determination is made to install a device driver for a paravirtualized device then a determination is made whether the physical device supports virtualization Step . In one or more embodiments of the invention a physical device supports virtualization when the physical device may simultaneously communicate with more than one guest domain. For example one type of physical device that supports virtualization is a network card that provides a network input output interface and provides multiple independent connections. Further in one or more embodiments of the invention a physical device that supports virtualization may have separate hardware queues that each may be assigned to distinct guest domain operating systems. Thus the guest domain operating systems may communicate with the physical device without interfering with each other.

If the physical device does not support virtualization the hypervisor may virtualize the physical device in accordance with one or more embodiments of the invention Step . Virtualizing the physical device may include for example creating buffers for each guest domain. When executing each guest domain may insert data into the buffer assigned to the guest domain. Then the hypervisor may interleave the buffers and dispatch the data to the physical device during execution.

Continuing with in one or more embodiments of the invention information about the guest domain operating system is obtained Step . Obtaining information about the guest domain operating system may be performed for example as described above in Step . Further information about the physical device is obtained Step . The information about the physical device may include information about the commands that that the physical device supports or information about the type of physical device.

Using the information about the guest domain operating system and information about the physical device a device driver for a paravirtualized device is obtained Step . In one or more embodiments of the invention the device driver for a paravirtualized device may be obtained from a vendor of the physical device obtained from a device driver repository and or generated as described above. For example a known device interface that is published by a vendor of a physical device may be obtained. Further the system calls for the type of guest domain operating system may be identified. Next a device driver for a paravirtualized device may be generated to receive the system calls based on the type of operating system.

Regardless of whether the device driver is a device driver for a virtual device or a device driver for a paravirtualized device the device driver is installed into the memory of the guest domain operating system Step . In one or more embodiments of the invention installing the device driver may be performed by copying files into the guest domain.

Further the device driver is instantiated into the physical memory owned by the guest domain Step . Specifically the hypervisor may load the device driver into a memory buffer owned by the guest domain operating system.

Continuing with after installing the device driver the hypervisor notifies the guest domain operating system that the new device driver is available Step . In one or more embodiments of the invention this notification may be operating system dependent. Notifying the guest domain operating system may be performed for example by accessing a registry updating a table notifying a device manager in the guest domain operating system using a custom application programming interface in the guest domain operating system etc. In one or more embodiments of the invention notifying the guest domain operating system may include specifying the corresponding entry point or operation that the guest domain operating system is to perform when a specific system call for the device driver is requested.

Further in one or more embodiments of the invention the memory address where the device driver is installed is stored by the hypervisor Step . Specifically the hypervisor tracks the address where the device driver is installed. Further the hypervisor may also store the corresponding entry point or operation that the guest domain operating system is to perform when a specific system call for the device driver is requested. Thus if the device driver is later replaced the device driver can be replaced without affecting the guest domain operating system.

After the notification the guest domain operating system performs any required linking to the device driver in order to be able to use the device driver. In one or more embodiments of the invention the guest domain operating system may update registries or perform any other operation necessary to allow applications to access the device driver.

Once the guest domain is notified of the device driver the guest domain operating system may use the device driver to communicate with the device. If the device driver is a device driver for a paravirtualized device the guest domain may communicate with the device by calling a routine in the device driver for a paravirtualized device. The routine of the device driver for a paravirtualized device may create a command and send the command to the device. For example the device driver for a paravirtualized device may insert data into a queue or hardware buffer for the device that is allocated to the guest domain. The hypervisor for example may dispatch data in the queue or hardware buffer to the device. When results are received the device driver for a paravirtualized device may receive results create an interrupt and forward the results to the operating system of the guest domain.

If the device driver is a device driver for a virtual device the communication with the device may be transparently handled by the hypervisor and or the control domain. For example during execution of an application in the guest domain the application may request I O operations with a device. The request may be sent via a system call to the guest domain operating system that uses the device driver for a virtual device.

In one or more embodiments of the invention the guest domain operating system may not be able to distinguish between the device driver for a virtual device and the device driver for a paravirtualized device. Specifically the guest domain operating system calls the same routine in the device driver for a virtual device that the guest domain operating system would call in the device driver for a paravirtualized device. In response the device driver for a virtual device calls a routine in the hypervisor. When the hypervisor next executes the hypervisor performs a system call to the control domain in one or more embodiments of the invention. When the control domain executes the control domain may use a device driver for a paravirtualized device to request the operation from the device. The results of the request may be similarly propagated back to the application domain.

If a determination is made to install a different device driver the memory address where the current device driver is installed in the memory allocated to the guest operating system is identified Step . Specifically because the hypervisor installed the current device driver in the memory allocated to the guest operating system and the guest operating system cannot change the location of the device driver the hypervisor can identify where the hypervisor installed the current device driver. Additionally the hypervisor may also identify the entry points or routines to access the current device driver from the guest domain operating system.

Prior to installing the device driver the hypervisor may determine whether the guest domain operating system is in the process of communicating data with the device. Since the device is a virtual device or a paravirtualized device communication is performed through the hypervisor. Specifically the hypervisor can track all communications between the guest domain and the device. Thus if the guest domain operating system is in the process of communicating data with the device the hypervisor may perform appropriate operations e.g. halt communication wait until the communication is complete store the current state of communication etc. so as to not interrupt the communication.

The hypervisor then transparently installs the new device driver at the memory address Step . For example the hypervisor may replace the current device driver with the new device driver. Alternatively installing the new device driver may include only reconfiguring the device driver so as to be a device driver for a paravirtualized device or for a virtual device. For example the hypervisor may install the new device driver by unpacking the software components i.e. files and or folders of the new device driver and replacing software components of the old device driver with the software components of the new device driver.

In one or more embodiments of the invention the replacement is transparent in that the hypervisor does not notify the guest domain operating system. Further in one or more embodiments of the invention the guest domain operating system cannot detect that the old device driver is replaced. Specifically the entry points may remain the same between the different device drivers. Further in one or more embodiments of the invention the memory space allocated to the device driver remains the same. Thus to the guest domain operating system the new device driver may appear the same as the previous device driver.

Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The computer system is connected to a local area network LAN or a wide area network e.g. the Internet via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further embodiments of the invention may be implemented on a distributed system having a plurality of nodes where each portion of the invention e.g. device driver generator device driver repository node may be located on a different node within the distributed system. In one or more embodiments of the invention the node may be to a computer system. In some embodiments of the invention the node may be a processor with associated physical memory. The node may also be a processor with shared memory and or resources in one or more embodiments of the invention. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

Embodiments of the invention provide a mechanism for a hypervisor to control the use of a device while managing the level of performance. For example the hypervisor can have the option of giving full and direct access to a device to an operating system in a single guest domain. Thus the guest domain may receive greater performance. Furthermore when additional domains are added the hypervisor can replace the device driver with a different device driver that allows the device to be shared. Further the replacement of the device driver is transparent to the operating system in the guest domain. Thus the operating system in the guest domain may continue to communicate with the device without interruption.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

