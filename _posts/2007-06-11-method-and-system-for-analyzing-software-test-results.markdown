---

title: Method and system for analyzing software test results
abstract: A method for analyzing software test results that includes identifying a test result of a failed test case in a test log, determining whether the failed test case has a related defect report, and storing a selectable link to the related defect report in the test result when the failed test case has the related defect report.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836346&OS=07836346&RS=07836346
owner: Oracle America, Inc.
number: 07836346
owner_city: Redwood City
owner_country: US
publication_date: 20070611
---
In general software testing is a systematic process designed to find differences between the expected behavior of a software system as specified in a software requirements document and the actual behavior of the software system. In other words software testing is an activity for finding defects commonly known as bugs in the software system.

Complex software systems are tested at least in part using automated testing tools. More specifically test cases are developed to test specific requirements or features of a software system. The test cases are then used as input to an automated testing tool that uses the test cases to test the software system. As the test cases are executed the testing tool creates a test log that includes the result of executing each test case. The test log is then examined to determine if any of the test cases failed thus indicating defects in the software system. In addition the result of each of the failed test cases is examined to determine if the defect indicated is a known defect i.e. a defect that was previously detected and recorded in a defect report in a defect tracking system or a new defect.

The examination of the test log to determine if a failed test case is an indication of a known defect or a new defect is typically a manual process. That is a software tester looks at each test result in the test log. If the test result indicates a failed test case the software tester then determines whether the indicated defect is known by determining if there is a defect report for the defect. In some testing systems a test case may include identifiers of any defect reports e.g. defect report numbers related to that test case. In such systems the software tester can look up the test case in a test case repository and check to see if the test case includes any defect report identifiers. Further in some defect tracking systems an identifier for a test case e.g. a test case number or name related to a defect may be included in the defect report. In such systems a software tester can search for defect reports related to a failed test case using the identifier for the test case.

In general in one aspect the invention relates to a method for analyzing software test results that includes identifying a test result of a failed test case in a test log determining whether the failed test case has a related defect report and storing a selectable link to the related defect report in the test result when the failed test case has the related defect report.

In general in one aspect the invention relates to a system for analyzing software test results that includes a test harness configured to execute a plurality of test cases and generate a test log wherein the test log comprises test results for a portion of the plurality of test cases and a test log analysis component. The test log analysis component is configured to identify a test result of a failed test case in the test log determine whether the failed test case has a related defect report and store a selectable link to the related defect report in the test result when the failed test case has the related defect report.

In general in one aspect the invention relates to a computer readable medium including computer program code embodied therein for analyzing software test results the computer program code including instructions to identify a test result of a failed test case in a test log determine whether the failed test case has a related defect report and store a selectable link to the related defect report in the test result when the failed test case has the related defect report.

Other aspects and advantages of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of one or more embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid obscuring the invention.

In general embodiments of the invention are directed to a system and method for analyzing a test log and locating defect reports related to failed test cases in the test log. More specifically a test log is analyzed to locate failed test cases. When a failed test case is found a defect report repository is searched for any defect reports related to the failed test case. If a related defect report is found a link to the defect report is added to the test result for the failed test case in the test log. More than one defect report may be related to a failed test case and a defect report may be related to more than one failed test case. A user may then view the resulting updated test log and identify those failed test cases having one or more related defect reports i.e. known defects and those failed test cases that do not have a related defect report i.e. new defects by looking for a link to a defect report in the test result. In addition the user may access any defect reports related to a failed test case while viewing the test log by selecting the link or links in the test result for the failed test case.

The test repository stores test suites to be used by a test harness e.g. test harness to test one or more software systems e.g. software system . A test suite may include test code for one or more tests test data configuration information for configuring the execution environment in preparation for running the tests and or information specifying an execution order of the tests. In one or more embodiments of the invention a test suite includes a test script a test finder configuration data test descriptions and tests. The test script is invoked by the test harness to run the tests and return the status. The test script includes functionality to interpret a test description for a test break down the execution of the test into a series of logical steps based on the information in the test description and convert the logical execution steps into concrete actions. The test finder is used by the test script to find read and parse test descriptions.

A test is the source code and any accompanying information that exercises a particular feature or part of a feature of a software system e.g. software system . A single test may include one or more test cases. A test case tests an assertion in the specification of a software system e.g. software system or a particular feature or part of a feature of an assertion. Within each test a test case has a unique identifier. The accompanying information may include test documentation auxiliary data files and any other resources used by the source code. In one or more embodiments of the invention a test case is precompiled and ready for execution.

A test description is information that describes a test so that the test can be executed. The information may include the name of test the pathname of the file containing the test execution parameter identifiers for related defect reports and any other information that affects how the test is executed. A test description may be embodied in html files xml file text files or any other suitable format. A test description may also be embedded as comments in the source code of a test.

Configuration data is information needed to convert logical test steps into concrete steps in the environment in which the test are to be executed. This information may include for example Internet Protocol IP addresses system names and path names that change from system to system. In one or more embodiments of the invention a test suite includes a configuration interview that is executed to acquire the configuration data from a user e.g. a software tester of the test system .

The test repository may be any device or medium capable of storing test suites. For example a test repository may be one or more databases a directory service one or more flat files a spreadsheet an extensible markup language XML file or any other suitable data repository. Further the test repository may be directly connected to the test system or may be connected to the test system via a network not shown . The network may be a wide area network WAN a metropolitan area network MAN a local area network LAN a public network such as the Internet or World Wide Web or any combination thereof. Further the network may include one or more networks interconnected by other network types e.g. distinct LANs connected by one or more WANs .

The test system includes a test harness a software system and a test log analyzer . The software system is software to be tested using the test system and may be an operating system a programming language implementation an application e.g. word processing software game software accounting software etc. or any other computer program. In one or more embodiments of the invention the software system is tested on the same computer system where the test harness is installed. In other embodiments of the system the software system is tested on a second computer system connected to the computer system hosting the test harness.

The test harness is configured to manage the testing of the software system . More specifically the test harness includes functionality to automatically load tests included a test suite stored in the test repository to configure the environment of the test system to run the tests in the test suite to execute the tests to test the software system and to generate one or more test logs reporting the results of executing those tests. In one or more embodiments of the invention the test harness includes a graphical user interface GUI that provides various windows and menus to configure run and track tests. In some embodiments of the invention the GUI includes functionality to display the test logs. Further in one or more embodiments of the invention the test harness is the JavaTest Harness. JavaTest is a trademark of Sun Microsystems Inc. located in Santa Clara Calif. In some embodiments of the invention the test harness is the NokiaTCK Harness.

A test log includes the results of executing tests in the test suite. The test log includes a test result for each test case executed that identifies the test case and gives the result of executing the test case e.g. pass fail error . The test harness may generate a test log in different formats including text hypertext markup language HTML extensible markup language XML and combinations thereof. Further a test log may be stored in the memory of a computer system hosting the test system in one or more files in a file system in a data base or any in any other suitable storage medium. In one or more embodiments of the invention the test harness generates separate test logs for passed test cases failed test cases and test cases with execution errors. In other embodiments of the invention the test harness generates a single test log containing all test results.

In one or more embodiments of the invention the test system is configured to test an implementation of a Java technology specification in accordance with a Technology Compatibility Kit TCK . A TCK is a set of tools documentation and tests for testing an implementation of a Java technology specification for compliance with the specification. A TCK includes a test harness and a TCK test suite. In such embodiments the test harness is the test harness provided by the TCK the software system is the implementation of the Java specification and the TCK test suite is stored in the test repository . The TCK may be any available TCK for a Java technology specification including for example the PDA Optional Packages for the J2ME Java 2 Micro Edition Platform TCK available from IBM Corporation the Location Application Programming Interface API for J2ME TCK the Scalable 2D Vector Graphics API for J2ME TCK the Advanced Multimedia Supplements API for J2ME the Mobile 3D Graphics API for J2ME the Mobile Internationalization API TCK and the SIP API for J2ME TCK available from Nokia Inc. and the Security and Trust Services API for J2ME TCK the Mobile Media API TCK and the Mobile Service Architecture TCK available from Sun Microsystems Inc. Java and J2ME are trademarks of Sun Microsystems Inc. located in Santa Clara Calif.

The test log analyzer includes functionality to locate test results of failed test cases in a test log and add links to related defect reports if any to those test results. More specifically the test log analyzer includes a test log parser and a defect report locater . The test log parser includes functionality to parse a test log generated by the test harness to locate test results for failed test cases in the test log and retrieve identifying information for the failed test cases from the test results.

How the test log parser identifies a test result for a failed test case depends on the content of the test log. As previously mentioned in some embodiments of the invention the test harness generates a separate test log for failed test cases. In such embodiments the test log parser need only locate the identifying information for a failed test case in each test result in the log. In embodiments of the invention in which test results for passed and failed test cases are combined in a single log the test log parser includes functionality to distinguish a test result for a failed test case from a test result for a passed test case. For example if the test log is in text format the test log parser may search for specific text strings in the test log e.g. failed error not run that may occur in the test result of a failed test case. Once the test log has located a test result for a failed test case the test log parser may then parse the test result to locate the identifying information for the failed test case in the test result.

The defect report locater includes functionality to use the identifying information for a failed test case to locate defect reports related to the failed test case. More specifically the defect report locater includes functionality to use the identifying information for a failed test case to search a defect report repository e.g. defect report repository for defect reports related to the failed test case. As is explained in more detail below a defect report related to a failed test case includes a unique identifier for the failed test case. In one or more embodiments of the invention the defect report locater determines the unique identifier for the failed test case using the identifying information for the failed test case. In some embodiments of the invention the identifying information is the unique identifier. In other embodiments of the invention the defect report locater generates the unique identifier using the identifying information. For example if the identifying information is a text string containing the name of the test case the defect report locater may concatenate the text string with a text string identifying the software system under test e.g. software system to generate the unique identifier.

Table 1 shows an example of a test log in html format that contains only test results for failed test cases in accordance with one or more embodiments of the invention. In this test log each href is a link to a detailed test result file and also contains the name of the test case. Therefore the test log parser may search for each href and extract the identifying information for the failed test case i.e. the test case name from the href.

The defect report locater includes functionality to search the defect report repository using the search interface in the defect tracking system . More specifically the defect report locater includes functionality to generate a search request requesting identifying information for all defect reports in the defect report repository that include the unique identifier for a failed test case and to send the search request to the search interface . In one or more embodiments of the invention the search request is a Structured Query Language SQL query.

The defect report locater further includes functionality to use the result of the search request to annotate the test result for the failed test case with links to the defect reports identified in the search request result. In one or more embodiments of the invention the search request result includes the Uniform Resource Locaters URLs for the related defect reports. In other embodiments of the invention the search request result includes identifying information that defect report locater uses to determine the URLs for the related defect reports. For example the search request result may include defect report numbers or names that the defect report locater may use to generate URLs. The defect report locater uses the URLs to create links to the related defect reports in the test result for the failed test case in the test log.

A defect report repository stores defect reports for defects found in one or more software systems e.g. software system . A defect report includes information about a defect in a software system that may include a defect identifier that uniquely identifies the defect a status of the defect the name or other identifier of the software system e.g. software system in which the defect was found the function module feature screen etc. where the defect occurred a full description of the defect a summary description of the defect a description of how to reproduce the defect etc. A defect report may also include information uniquely identifying each test case related to the defect. In one or more embodiments of the invention a unique identifier for each test case related to the defect is stored as a keyword in the defect report.

The defect report repository may be any device or medium capable of storing defect reports. For example a defect report repository may be one or more databases a directory service one or more flat files a spreadsheet an extensible markup language XML file or any other suitable data repository. Further the defect report repository may be directly connected to the defect tracking system or may be connected to the defect tracking system via a network not shown . The network may be a wide area network WAN a metropolitan area network MAN a local area network LAN a public network such as the Internet or World Wide Web or any combination thereof. Further the network may include one or more networks interconnected by other network types e.g. distinct LANs connected by one or more WANs .

The defect tracking system is a software application for tracking defects in software systems e.g. software system . The defect tracking system includes functionality for a user to manage defects in a software system. This functionality includes entering new defect reports modifying existing defect reports and generating various reports using the content of the defect reports. The defect tracking system also includes a search interface that provides an application programming interface API that may be used by other software applications e.g. the test log analyzer to retrieve information from the defect report repository . More specifically the search interface includes functionality to receive a request from the defect report locater for identifying information for all defect reports related to a test case to locate the related defect reports if any in the defect report repository and to return identifying information for the related defect reports to the defect report locater . In one or more embodiments of the invention the search interface locates the related defect reports based on information identifying the test case stored in the defect reports e.g. a unique identifier for the test case stored as a keyword in the defect report .

Although embodiments of the invention have been described in which the test log analysis is performed after a test log is generated one of ordinary skill in the art will understand that the annotation of test results with links to related defect reports may also be performed as the test log is generated. That is the test log analyzer may be integrated with the test harness such that as a test result for a failed test is added to the test log a link to a related defect report if any is added to the test result.

The software tester then adds a defect report describing the new defect to a defect tracking system ST . The software tester also annotates the defect report with a unique identifier for the failed test case ST to create an association between the defect report and the test case that generated the defect. In some embodiments of the invention the identifier is stored as a keyword in the defect report.

In some instances a failed test case may indicate multiple defects. If multiple defects are indicated the software tester adds a defect report to the defect tracking system for each defect. Further the software tester annotates each of these defect reports with the unique identifier of the failed test case.

If the test result indicates a failed test case a determination is then made as to whether there is a defect report related to the failed test case ST . In one or more embodiments of the invention identifying information for the failed test case is retrieved from the test result and used to search a defect report repository for any defect reports related to the failed test case. In some embodiments of the invention the identifying information for the failed test case includes a name of the test case that is used to generate a unique identifier for the test case. The unique identifier is then used as search criteria for locating related defect reports. This unique identifier has been previously stored in any defect report in the defect report repository that is related to the test case. In one or more embodiments of the invention the unique identifier is stored as a keyword in each related defect report.

If no related defect report is found the next test result if any in the test log is processed ST . If a related defect report is found the test result for the failed test in the test log is annotated ST . That is a link to the related bug report is added to the test result. In one or more embodiments of the invention the link includes a URL of the related defect report. If multiple related defect reports are found multiple links are added to the test result. Then the next test result if any in the test log is processed ST . Once all test results in the test log are processed the updated test log is stored ST . A software tester may then view the test log and determine which of the failed test case results have related defect reports and which do not. The software tester may also select the links in the annotated test results to view the related defect reports.

The test log illustrates a test log prior to processing by a test log analyzer. The test log is generated by a test harness and includes test results from executing test cases on a software system. The test log includes test results for both passed test cases e.g. Passed Test Case and failed test cases e.g. Failed Test Case . Furthermore the test log includes test results indicating failure of test cases that have related defect reports in the defect report repository e.g. Failed Test Case Failed Test Case Failed Test Case Failed Test Case . The test log also includes at least one test result indicating failure of a test case that does not have a related defect report in the defect report repository e.g. Failed Test Case .

Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The computer system is connected to a local area network LAN or a wide area network e.g. the Internet not shown via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further embodiments of the invention may be implemented on a distributed system having a plurality of nodes. In one or more embodiments of the invention the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and or resources. Further software instructions to perform one or more embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

