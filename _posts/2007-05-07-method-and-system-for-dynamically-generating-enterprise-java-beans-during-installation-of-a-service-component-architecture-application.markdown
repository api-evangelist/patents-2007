---

title: Method and system for dynamically generating enterprise java beans during installation of a service component architecture application
abstract: A method of dynamically generating stateless session beans (EJBs) during installation of a Service Component Architecture (SCA) composite to expose simple SCA POJO components to Java EE callers. During SCA composite installation, an installation utility receives an installation request for a SCA composite with a simple POJO service. If EJB service binding is defined, the installation utility collects data from a service interface to generate a corresponding bean interface and implementation classes. Generic EJB home, bean and interface class templates are pre-defined using EMF JET templates. Data collected from the service interface is fed into pre-defined EMF JET Templates to generate service-specific EJB classes. The installation utility also matches the java interface to the EJB interface to ensure compatibility. Generated bean method has code snippets to delegate calls to SCA components during runtime. Given a simple SCA POJO Service, the installation utility generates Stateless Session bean without Java EE tooling.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010941&OS=08010941&RS=08010941
owner: International Business Machines Corporation
number: 08010941
owner_city: Armonk
owner_country: US
publication_date: 20070507
---
The present invention relates in general to Service Oriented Architecture SOA and in particular to Java Service Component Architecture SCA . Still more particularly the present invention relates to an improved method and system for dynamically generating enterprise java beans EJBs for a simple SCA Plain Old Java Object POJO service.

Service Component Architecture SCA provides a programming model for building applications and systems based on Service Oriented Architecture SOA . Service Component Architecture SCA includes a set of services which are assembled together to provide a particular business need. Basic unit of deployment is a composite which holds set of services which can be accessed externally. A composite can contain one or more components which provide the business function. Components provide their business function through a service and consume a business function through a reference. Composite Service provides one or more business functions which are defined by a service interface. Service is exposed to external callers through service binding. SCA composite can expose its service to Java Enterprise Edition EE application through Enterprise Java Bean EJB binding Stateless Session Bean Binding which exposes composite service through a Stateless session bean.

Java is an object oriented programming language which utilizes high level syntax derived from C and C but includes a simpler object model with fewer low level facilities. Java programs are typically compiled into bytecode which can either be interpreted at run time or compiled into native machine code for execution. Java programs utilize configurable security features to enable selective restriction of network and or file access operations. A bundle of related Java programs is known as a Java platform. A Java platform utilizes an execution engine also referred to as a virtual machine a compiler and a set of standards libraries to ensure compatibility with multiple processors and operating systems OSs . Note that the terms Java J2EE and Javabeans are registered trademarks of Oracle and or its affiliates.

Various Java platforms are available including Java Standard Edition SE for desktop computers Java EE formerly known as J2EE for internet servers and Java Micro Edition ME for hand held electronic devices. In particular Java EE is typically utilized to develop and run distributed multi tier architecture applications that utilize modular software components defined by multiple specifications to create enterprise applications that are portable and scalable between different technologies. Conventional Java EE specifications include application programming interface API specifications and EJB specifications. Specifically the EJB specification is a modular server side component that provides a standard way to implement back end business logic functions as opposed to front end user interface functions found in enterprise applications. The EJB specification handles common enterprise issues e.g. persistence transactional integrity and security in a standard way thereby leaving developers free to concentrate on specific program issues.

Disclosed is a method system and computer program product for dynamically generating Stateless Session Bean to expose a simple Service Component Architecture SCA Plain Old Java Object POJO service to Java Enterprise Edition EE callers through Stateless Session Bean. Generation of stateless Session Bean is completed during installation of SCA composite. SCA composite consists of POJO component which implements business logic and composite exposes its service to the external callers through service bindings. SCA composite is packaged as a simple Java Archive JAR . Enterprise Java Bean EJB service binding exposes SCA service to Java EE callers. During SCA composite installation the installation utility receives an installation request for a SCA composite which contains a simple POJO service. If EJB service binding is defined installation utility collects data from service interface in order to generate corresponding bean interface and bean implementation classes. Generic EJB home bean and interface class templates are pre defined using Eclipse Modeling Framework Java Emitter Templates EMF JET Templates . Data collected on each method of the service interface is fed into pre defined EMF JET Templates to generate EJB classes specific to that service. The installation utility also matches java interface to EJB interface in order to generate compatible EJB interface. Generated bean method has code snippets to simply delegate the call to SCA component during runtime. The installation utility compiles EJB classes and creates EJB module with appropriate descriptors in order to install. The present invention thus achieves the goal where given a simple SCA POJO Service the installation utility can generate Stateless Session bean to expose the service to Java EE callers without the use of sophisticated Java EE tooling.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The present invention provides a method system and computer program product for dynamically generating enterprise java beans EJBs during service component architecture SCA application installation.

With reference now to there is depicted a block diagram of an exemplary computer with which the present invention may be utilized. Computer includes processor unit that is coupled to system bus . Video adapter which drives supports display is also coupled to system bus . System bus is coupled via bus bridge to Input Output I O bus . I O interface is coupled to I O bus . I O interface affords communication with various I O devices including keyboard mouse Compact Disk Read Only Memory CD ROM drive floppy disk drive and flash memory drive . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Hard drive interface is also coupled to system bus . Hard drive interface interfaces with hard drive . In a preferred embodiment hard drive populates system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory may include additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Code that populates system memory includes operating system OS application programs and Java Enterprise Edition EE Application Server .

OS includes shell for providing transparent user access to resources such as application programs . Generally shell as it is called in UNIX is a program that provides an interpreter and an interface between the user and the operating system. As depicted OS also includes kernel which includes lower levels of functionality for OS . Kernel provides essential services required by other parts of OS and application programs . The services provided by kernel include memory management process and task management disk management and I O device management.

Application programs include browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. computer to send and receive network messages to the Internet.

The hardware elements depicted in computer are not intended to be exhaustive but rather represent and or highlight certain components that may be utilized to practice the present invention. For instance computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

Within the descriptions of the figures similar elements are provided similar names and reference numerals as those of the previous figure s . Where a later figure utilizes the element in a different context or with different functionality the element is provided a different leading numeral representative of the figure number e.g. 1xx for and 2xx for . The specific numerals assigned to the elements are provided solely to aid in the description and not meant to imply any limitations structural or functional on the invention.

With reference now to there is depicted SCA composite java archive JAR file according to an embodiment of the present invention. SCA composite JAR file is stored within system memory from . SCA composite JAR file includes composite service with stateless session bean EJB binding and plain old java object POJO component . As utilized herein service component refers to a POJO component which implements business logic. Composite service declares service interface which is the business interface of the component. This service interface is used to generate compatible Stateless session bean interface during composite installation. In another embodiment SCA composite JAR file also includes a service component definition language SCDL file which describes assembly model for the composite. SCA composite JAR file is utilized during the SCA application installation process illustrated in .

Turning now to SCA composite jar is an input to the installation utility . Installation utility generates stateless session bean for EJB service binding. Generated EJB and SCA composite get installed on to Java EE application server. During runtime EJB binding exposes service component to external Java EE callers through generated EJB .

Turning now to there is illustrated a high level logical flowchart of an exemplary method of generating EJBs during SCA application installation according to an embodiment of the invention. The process begins at block in response to installation utility initiating installation of a SCA application. Installation utility looks at the SCA composite application and if EJB Service binding is defined utility then collects data for each method defined on Service binding interface as depicted in block . Installation utility also inputs the data into predefined generic class templates to generate specific Stateless Session Bean Remote and Home classes for the SCA service as depicted in block .

Before generating the EJB interface installation utility matches service interface to EJB interface to ensure compatibility as depicted in block . In one embodiment utility generates bean methods to simply delegate the in coming bean call to SCA component as depicted in block .

Installation utility compiles bean classes and generates EJB module to install as shown in block . Installation utility installs EJB module and original SCA composite onto Java EE application server as depicted in block and the process ends at block .

The present invention thus enables installation utility to generate stateless EJBs during SCA application installation without the use of sophisticated Java EE tooling to expose SCA service to Java EE callers. When installation utility receives an installation request for a SCA application installation utility collects data from service interface in order to generate corresponding EJB interface. Installation utility matches SCA interface to EJB interface to generate compatible EJB interface. Installation utility generates EJB methods to delegate the incoming request to SCA composite during runtime. Installation utility compiles generated bean classes and creates EJB modules. Installation utility installs the EJB module and SCA composite JAR on to Java EE application server.

It is understood that the use herein of specific names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology and associated functionality utilized to describe the above devices utility etc. without limitation.

In the flow chart above while the process steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

While an illustrative embodiment of the present invention has been described in the context of a fully functional computer system with installed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of medium used to actually carry out the distribution. Examples of types of media include recordable type media such as thumb drives floppy disks hard drives CD ROMs DVDs and transmission type media such as digital and analog communication links.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

