---

title: Clipboard for application sharing
abstract: A software application can be shared by multiple users. A system clipboard of a first computing system is synchronized with a system clipboard of a second computing system when the user of the second computing system is in control of the shared software application. Information contained in the system clipboard of the first computing system is copied to a state buffer and associated with the user who copied the information. The information is returned to the system clipboard when the associated user regains control of the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818458&OS=07818458&RS=07818458
owner: Microsoft Corporation
number: 07818458
owner_city: Redmond
owner_country: US
publication_date: 20071203
---
Application sharing technology often involves a host computer and one or more viewing computers. The host computer and viewing computers can communicate across the Internet. The host computer runs a software application that is shared with the viewers. When being shared the host computer sends data to the viewing computers. The data allows the viewing computers to generate a user interface display similar to that generated by the host computer.

In addition to being able to view the user interface the viewers are also allowed to control the software application running on the host computer. Control signals are sent from the viewer computer to the host computer and the host computer responds accordingly. Typically the host and viewers will take turns controlling the software application. In doing so users of the host and viewing computers are able to collaboratively work with the software application.

Embodiments of the present disclosure generally relate to a clipboard for application sharing. In one non limiting example the clipboard operates during application sharing to allow multiple users to perform cut copy and paste operations.

As discussed herein an aspect of some embodiments relates to a computing system for application sharing the computing system comprising a communication device for communicating across a communication network a processor communicatively connected to the communication device and memory storing program instructions which when executed by the processor cause the computing system to provide tools when sharing a software application the tools comprising a system clipboard for storing information identified by a user and for subsequently providing the information to the software application a clipboard state buffer for extracting the information from the system clipboard storing the information and replacing the information on the system clipboard and a clipboard synchronizer for synchronizing the system clipboard with a remote system clipboard.

Another aspect of some embodiments relates to a method of copying information during application sharing the method comprising communicating from a first computing system to a second computing system to share a software application synchronizing a system clipboard of the first computing system with a system clipboard of the second computing system while the second computing system controls the software application copying a content of the system clipboard of the first computing system to a state buffer when control of the software application changes from the second computing system to the first computing system and copying the content from the state buffer to the system clipboard when the second computing system regains control of the software application.

Further aspects relate to a computer readable storage medium which when executed by a computer performs a method of copying information during application sharing the method comprising sharing a software application by communicating data from a first computing system to a second computing system across a communication path copying information from the system clipboard of the first computing system to a state buffer of the first computing system when control of the software application changes from the first computing system to the second computing system and copying the information from the state buffer to the system clipboard when control of the software application changes from the second computing system to the first computing system.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in any way as to limit the scope of the claimed subject matter.

This disclosure will now more fully describe exemplary embodiments with reference to the accompanying drawings in which specific embodiments are shown. Other aspects may however be embodied in many different forms and the inclusion of specific embodiments in the disclosure should not be construed as limiting such aspects to the embodiments set forth herein. Rather the embodiments depicted in the drawings are included to provide a disclosure that is thorough and complete and which fully conveys the intended scope to those skilled in the art. When referring to the figures like structures and elements shown throughout are indicated with like reference numerals.

Embodiments of the present disclosure generally relate to a clipboard for application sharing. In one non limiting example the clipboard operates during application sharing to allow multiple users to perform cut copy and paste operations.

A user not shown interacts with viewer computing system to provide inputs through an input device and to receive outputs from an output device. Viewer computing system typically includes an operating system that provides system clipboard functionality. System clipboard is used in conjunction with various software applications running on viewer computing system to cut copy and paste information.

A host user not shown interacts with host computing system to provide inputs through an input device and to receive outputs from an output device. Host computing system typically includes an operating system that provides system clipboard functionality. System clipboard is used in conjunction with various software applications running on host computing system to cut copy and paste information.

In addition to system clipboard host computing system includes clipboard state buffer . Clipboard state buffer includes memory locations for storing information from system clipboard and system clipboard . In some embodiments state buffer includes memory locations for storing information from additional users such as another user of host computing system another user of viewer computing system or another user of another viewer computing system not shown .

In some embodiments application sharing system operates such that when any user of the application sharing system e.g. the user of host computing system the user of viewer computing system or the user of another viewer computing system not shown performs a paste operation the information that is pasted is the information that was previously cut or copied by that same user.

Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by host computing system . Any such computer storage media may be part of host computing system .

Host computing system may also contain communications connection s that allow the computing system to communicate with other devices. Communications connection s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Host computing system may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

In some embodiments memory includes one or more of operating system application programs other program modules and program data . Operating system typically includes system clipboard functionality such as shown in .

In some embodiments application programs include application sharing software. Application sharing software is a computer program that is responsible for connecting the other computing systems that are participating in the application sharing. The application sharing software provides the mechanisms for connecting to other users for brokering who is the host computing system and who are the viewer computing systems. Some embodiments of application sharing software display a user interface to allow the user to set up the application sharing in the desired configuration. The application sharing software also transmits information to remote computing systems to enable the remote computing systems to generate an appropriate display to view the shared content. Some application sharing software is a privileged part of the operating system utilizing for example Remote Desktop Protocol or Windows Meeting Space or a separate piece of add on software that uses publicly documented networking graphics and user interface Application Programming Interfaces APIs . Examples include Live Meeting and SharedView both distributed by Microsoft Corporation of Redmond Wash. as well as other application sharing software applications. In some embodiments the application sharing software exposes various APIs to allow other applications to know when the applications are being shared who is sharing who is controlling and APIs to send messages from the application to a remote participant. For example the clipboard synchronizer described herein can communicate in some embodiments with the application sharing software via APIs.

System clipboard allows a user to perform actions such as copy cut and paste such as to conveniently move information within a file or document or between different software applications. In some embodiments system clipboard includes a special memory resource typically maintained by the operating system which stores a copy of information that is cut or copied by the user. A request to perform the copy action is made for example by selecting information to be copied such as by highlighting the information with a pointer and then selecting copy from a menu or using a keyboard shortcut such as CTRL C. The operating system then places a copy of the information into memory of system clipboard for later use. A request to perform the cut action is made for example by selecting information to be cut and then selecting cut from a menu or using a keyboard shortcut such as CTRL X. Although the operating system also places a copy of the information into memory after the cut action the cut action differs from the copy action in that the selected information is deleted from the current software application when it is cut.

Once information has been placed into the system clipboard system clipboard makes the information available to be pasted into the same software application or into another software application. To do so the paste action is used. A request to perform the paste action is typically made by moving a cursor to the location where the information should be pasted and selecting paste from a menu or using a keyboard shortcut such as CTRL V. System clipboard saves time in allowing a user to quickly copy information and quickly reproduce that information at another location or in another software application.

As one example text can be selected from a word processor document copied into system clipboard and then pasted from system clipboard into another location within the document. Alternatively the same text can be pasted into a spreadsheet application or into a text field of a Web browser application. An example of system clipboard is the clipboard provided by the WINDOWS operating system. In some embodiments various applications can use the clipboard using public system application programming interfaces APIs . In some embodiments there is one system clipboard for each signed in user of computing system . In other embodiments there is only a single clipboard for each computing system. Yet other embodiments may include multiple system clipboards per user or per computing system.

In some embodiments system clipboard is able to store various types of information. A few examples include text audio and images. In some possible embodiments system clipboard can store multiple formats of the same information. For example information selected from a word processor application can be stored in multiple formats such as formatted text such as in rich text format unformatted text hypertext markup language HTML formatted text or unformatted unicode text. Other text formats are used in other embodiments. Other information is stored in various other formats.

When information is pasted from system clipboard into a software application the information is typically inserted to retain as much formatting as supported by the software application. Some software applications include a selection mechanism such as a paste special feature that allows the user to select between various available formats. In such embodiments the software application requests from system clipboard a copy of the information in the selected format and system clipboard provides that information.

Some embodiments of clipboard synchronizer are generally configured to synchronize system clipboard with system clipboard of host computing system . For example clipboard synchronizer when active operates to monitor the information stored in system clipboard and to detect when the information changes. When the information changes the information is sent across network to host computing system . A clipboard synchronizer e.g. shown in located on host computing system receives the information and stores the information within the local system clipboard e.g. clipboard . Similarly clipboard synchronizer also receives information from the clipboard synchronizer e.g. located on host computing system when information within system clipboard changes and stores that information in system clipboard .

Clipboard synchronizer resides on viewer computing system but in some embodiments remains dormant much of the time. In some embodiments clipboard synchronizer becomes active when two conditions are met. The first condition is that the host computing system shown in is actively sharing a software application with viewer computing system . The second condition is that viewer computing system has been granted controller status. When host computing system and viewer computing system are sharing an application control can pass back and forth between the computing systems and . Clipboard synchronizer is activated when viewer computing system is in control. Controller status can be given to viewer computing system in various ways. For example the user of host computing system provides an input such as by selecting a button from a user interface to pass control to viewer computing system . As another example the user can request control by providing an input. Control is passed automatically in some embodiments when input is provided by either user such as by moving the mouse pointer or entering data into the keyboard. When both conditions are met clipboard synchronizer operates in conjunction with clipboard synchronizer to synchronize system clipboards and .

Some possible embodiments operate clipboard synchronizer such that it does not communicate information from the system clipboard of viewer computing system to host computing system until the user of viewer computing system actually begins to remote control the software application. This saves bandwidth in reducing unnecessary communication of clipboard information and improves security and privacy by maintaining information until the viewer actually begins to control the application.

In some embodiments clipboard synchronizer communicates information as in binary form. When a change to system clipboard is detected clipboard synchronizer obtains the information from the clipboard packages the information such as by using a compression algorithm and transmits across network . For example public APIs are used by the clipboard synchronizer to extract the information often including multiple formats. In some embodiments the packaged information is arranged in a binary form and includes a header identifying the content followed by sets of bytes. Each set of bytes includes a binary form of one format of the information. In some embodiments the packaged information does not include all available formats but only those that can be readily interpreted by all parties such as Unicode text device independent bitmaps enhanced metafiles comma separated value format HTML format and rich text format. In some embodiments the header defines a table including the location of each set of bytes within the package e.g. an offset and the content of each set. The information is compressed and encrypted if desired. Because the various forms often include much of the same information compression can greatly reduce the size of the package thereby increasing transmission speed and reducing communication bandwidth requirements.

System clipboard allows a user of host computing system to perform actions such as cut copy and paste to easily move information around within a software application or to another software application. An example of system clipboard is the clipboard provided by the WINDOWS operating system. In some embodiments various applications can use the clipboard using public system application programming interfaces APIs . In possible embodiments there is one system clipboard for each signed in user of computing system . When information is cut or copied by the user of host computing system a copy of the information is stored in memory of system clipboard .

In addition to system clipboard host computing system also includes clipboard state buffer . Clipboard state buffer includes memory for storing a copy of information from system clipboard . In some embodiments the information is packaged in a binary form. In some embodiments a user identifier ID is stored with the information such that the clipboard state buffer can associate the information with a particular user. Typically clipboard state buffer is arranged to store information associated with at least two user IDs including a user of host computing system and at least one viewer computing system . In other embodiments multiple viewer computing systems are utilized in which case clipboard state buffer stores information associated with the additional users of these computing systems as well.

Application sharing typically begins with host computing system being designated at the initial controller. During this period a copy of information that is cut or copied if any is stored in system clipboard . The information can subsequently be pasted upon receipt of an input from the user of host computing system by passing the information from system clipboard to the desired software application.

When control is passed from host computing system to viewer computing system inputs provided by the user of viewer computing system are received by viewer computing system and transmitted across network to host computing system . Host computing system receives the inputs and passes the input to the software application in such a way e.g. using public APIs that the software application thinks the input is being provided by the user of host computing system . As a result it is beneficial to change the status of system clipboard when control is passed to prevent the user of viewer computing system from being able to paste information previously cut or copied by the user of host computing system . It is also beneficial to place information into system clipboard that is associated with the user who is now taking control as described in more detail below.

Clipboard state buffer is used to maintain copies of information from system clipboard when control is changed from one user to another user. For example when control is passed from the user of host computing system to the user of viewer computing system clipboard state buffer copies the information from system clipboard and stores it in clipboard state buffer . In some embodiments copying of the information involves serializing the information and optionally compressing and or encrypting the information to package the information. In addition an identifier of the user of host computing system is stored in clipboard state buffer to associate the information with the appropriate user. Clipboard state buffer then clears system clipboard to prevent the user of viewer computing system from pasting another user s cut or copied information.

When control is passed to viewer computing system clipboard state buffer checks to see whether any information stored in clipboard state buffer is associated with the user ID or other identifier of viewer computing system . If not no action is taken. If so the information associated with the user ID is copied from clipboard state buffer into system clipboard . In some embodiments copying of the information involves uncompressing and or decrypting the information. Also in some embodiments information is deserialized to extract the information of various formats and store the information in system clipboard according to the respective format. The clipboard synchronizers of the host and viewer computing systems compare the information of system clipboard to determine whether the user has subsequently placed information into system clipboard before regaining control of the shared application. If so the information of system clipboard is overwritten by the information of system clipboard . One of the benefits of storing information for viewer computing systems in clipboard state buffer is that the data does not have to be retransmitted from viewer computing system to host computing system each time that control is passed to the user of viewer computing system .

When control is passed from the user of viewer computing system to another user such as a user of either a viewer computing system or host computing system the same procedure is followed. Clipboard state buffer is updated to store a copy of system clipboard associated with the user that was previously in control. Clipboard state buffer then determines whether it contains information associated with the user ID of the new controlling user. If so the information is copied from clipboard state buffer to system clipboard .

First and second portions and store information copied from the system clipboard of host computing system . In some possible embodiments the information from the system clipboard is available in multiple formats. For example first portion includes information A stored in various formats including A A. Similarly second portion includes information B stored in various formats B B. More or less formats are used in other embodiments. In some embodiments the information stored within first and second portions and is serialized. Also in some embodiments the information is encrypted and or compressed. The information can be deserialized unencrypted and uncompressed if necessary prior to moving the information back onto the system clipboard.

Operation is performed to determine whether the current controller is the first user or another user. If the controller is a user other than the first user operation is performed to synchronize the system clipboard of the current controller with the system clipboard of the first user. In some embodiments this is accomplished by clipboard synchronizers operating on the computing systems of the users. The clipboard synchronizers monitor the system clipboard for changes and if a change occurs the content of the clipboard is sent to the system clipboard of the other user. In this way the content of the system clipboards are synchronized such that they both contain the same information. If during operation it is determined that the controller is the first user then operation is performed.

Following operations or operation is performed to determine whether a control change is being made. If not method continues to synchronize the system clipboards in operation if the controller is not equal to the first user in operation . If a control change is occurring operation is performed to copy the content of the system clipboard of the first user to the state buffer and to associate that content with the controller i.e. the user that is now giving up control . Operation is performed to change control to the next controller referred to as user x. User x can be any user including the first user or any other user that is sharing the application shared in operation .

Operation is then performed to determine whether the state buffer contains data that has been previously stored and associated with user x. If not the system clipboard of user is cleared in operation and method returns to operation . If the state buffer does contain data associated with user x operation is performed to copy the data associated with user x from the state buffer and into the system clipboard for the first user.

Method continues in this manner until application sharing is terminated. Method results in clipboard functionality that allows a user to perform a cut or copy operation either on the user s own computing system or remotely on another computing system and to have the result of a subsequent paste operation contain the data previously cut or copied and not data that someone else previously cut or copied. As a result some embodiments make the clipboard easy to use and intuitive. Some embodiments also improve security and confidentiality by preventing the inadvertent pasting of data cut or copied by another user. Some embodiments can be implemented in such a way that the software application being shared does not itself require changes or customization such that preexisting software applications can benefit from the method.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

