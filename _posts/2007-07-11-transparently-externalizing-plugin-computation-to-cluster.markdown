---

title: Transparently externalizing plug-in computation to cluster
abstract: External processing of a request directed to an external software program from an invocation source to a cluster of computing devices. A wrapper tool is provided for processing the request from the invocation source. The request includes operations to be performed by the external software program on the host computer. The wrapper tool intercepted the request and extracts information included in the intercepted request. The extracted information is transmitted to a cluster scheduler. The cluster scheduler identifies a set of computing devices in the cluster of computing devices for processing the request. The identified set of computing devices processes the intercepted request as a function of the intercepted request, the information and the invocation source. A result is provided in response to the processed request from the identified set of computing devices to the invocation source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908375&OS=07908375&RS=07908375
owner: Microsoft Corporation
number: 07908375
owner_city: Redmond
owner_country: US
publication_date: 20070711
---
Plug ins applications or external software programs perform significant roles in enhancing user experience with a host application. The plug in applications or external software programs interact with the host application and provide additional features or more specialized solutions to the general functions available in the host application. For example a plug in application or an external software program to a browser application may enable the browser application display or render a particular type of file e.g. a media file or the like.

In using the plug in application the host application frequently uses a invoking iteratively calling convention in calling the plug in application. Application following this convention will finish a bunch of homogeneous problems in a single calculate activity. The plug ins will be invoked once for each of the problem.

For example a financial analyzer may wish to recalculate a spreadsheet with 1500 rows. Each row represents a risk evaluation of a single portfolio unit. The risk evaluation will be performed by a third party plug in s executable library. However invoking this kind of third party function is likely to take a long time. In the above example two to three seconds are needed for a personal computer PC to calculate a single risk evaluation which has 15000 Monte Carlo simulations. That means the total time for calculating the 2000 rows would be about 4000 to 6000 seconds which is more than one hour.

Currently plug ins are typically implemented as shared libraries that must be installed in a place prescribed by the main application. As such in solving the problem described above multi threading is proposed as a solution to the problem. A computer with several CPUs or a CPU that has several cores can start a couple of threads to perform the simulations at the same time. However the number of processors or cores of a processor of a computer could have is limited and it is inefficient or unpractical to rely on a solution based on the number of processors alone.

The second approach involves redesigning the plug in applications in a cluster enabled or distributed computing environment as most of the applications are designed for only single thread execution. As such current practices have required the developer to manually modify the plug ins or and the hosting application then recompile rebuild for the specific usage. The second type of practices involve requiring the user to change their behavior and operating style such as to change user defined functions e.g. myfunction a b to different functions e.g. cluster run myfunction new object 2 a b that are able to take advantage of the processing powers of the cluster of the computing devices.

These two practices suffer from the source level modification limits since only the developer of hosting applications and plug ins will have their source code. The user level modification is also unacceptable since user has to reformat or reconfigured the user s codes and data to adapt to the cluster execution.

Embodiments of the invention enable a plug in application or an external software program user to receive the advantages of the cluster computing without the cumbersome and daunting tasks of modifying user defined functions or the plug in by providing a wrapper tool that intercepts the plug in calls directed to the plug in applications. Aspects of the invention provide a non manual intervene computation parallelization so that users can externalize a plug ins to cluster by simply in turns running the tools. There is no need to have any source code of the hosting application or the plug ins. In addition aspects of the invention transparently break out the single thread based invocation into client multiple service style without changing of any existing source code or user behavior. Furthermore the user experience is improved as embodiments of the invention externalize the calculation of user defined functions in a spreadsheet onto the cluster and without any change on user s spreadsheet.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the invention enable processing of plug in applications or external software programs by a cluster of computing devices. Referring now to a diagram illustrates an exemplary embodiment of a system for external processing of a request directed to an external software program originating from an invocation source to a cluster of computing devices according to an embodiment of the invention. The system includes at least a host computer having a memory area and a processing unit not shown for processing or executing a host application . For example the host computer may a computing device such as a personal computer PC a workstation computer a personal digital assistance PDA a cellular phone a Smartphone or other portable computing devices.

The host computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by host computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by host computer . Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The memory area of the host computer also includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. It is known that the memory area may include read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within host computer such as during start up is typically stored in ROM. RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit.

The host computer may also include other removable non removable volatile nonvolatile computer storage media. For example the host computer may also include a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface.

In one embodiment the host application is a software program executable by the processing unit of the host computer . For example the host application may be any software program executable programming module application application programs or the like. A user may use the host application to perform a number of functions such as creating opening or editing text documents browsing network resources or documents creating opening or editing spreadsheet documents.

For example embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The system also includes an external software program and it is external or auxiliary with respect to the host application . For example the external software program may provide additional features specific features specific functionalities or the like to the host application . In one embodiment the external software program is a plug in add on add in application or dynamic link libraries DLL or other library files with a collection of subprograms that provides functionalities to the host application .

In one example the user may use the host application to access a spreadsheet document . The spreadsheet document includes an invocation source hereinafter spreadsheet document and the invocation source are collectively referred to as the invocation source which may be a cell within the spreadsheet document. It is to be understood that other types of documents may be used without departing from the scope of embodiments of the invention. For example a hypertext markup language HTML document may include an invocation source such as a link to invoke or call the external software program .

Still referring to the user uses the host application to perform various functions to the invocation source . When the user wishes to request the functionalities or features available on the external software program the user invokes the external software program from the host application . The external software program processes the request and returns the result to the host application . The host computer dedicates its processing resources during the execution of the external software program . As such if the request and the calculation are demanding the host computer may experience significant operational set backs. One approach to solve this problem is to use a cluster of computing devices to process the request via a network .

For example as computer clusters becoming more available the cluster of computing devices spread intensive calculations onto a cluster of computers which includes a set of PCs or workstations connected through ordinary network. The cluster of computing devices provide applications which invoking iteratively a linear increase in speed based on the amount of nodes invoked. For example if n nodes are used in calculating the spreadsheet simultaneously the total time will reduce to 1 n. The working mechanism includes having each allocated computer node on the cluster run 1 n number of total tasks. A dispatcher or scheduler will coordinate among the hosting application and computer nodes in the cluster and will be responsible for balancing the workload among computer nodes.

While this approach appears to be promising modifying of the external software program is typically required if the user wishes take advantages of the processing power of the cluster of computing devices . However the user is discouraged from taking such an approach because the source code of the external software program is usually unavailable. In addition the user is also likely required to modify any functions or codes that are defined by the user as part of the invocation source . For example the user may have created user defined functions within the invocation source or the document. Consequently the user defined functions may be not be operational or return incorrect values that may require additional checking of the invocation source or the document by the user .

Embodiments of the invention overcome at least the two deficiencies above by creating or providing a wrapper tool . Referring now to a diagram illustrates an implementation of the wrapper tool according to an embodiment of the invention. In one embodiment the wrapper tool includes codes libraries computer executable components that interface between the external software program and the cluster of computing devices for the purpose of processing the request from the invocation source . In one embodiment the wrapper tool intercepts the request from the user directed for the external software program and instead enables the deployment of the external software program to the proper location on cluster computer nodes in the cluster of computing devices . For example the wrapper tool receives or intercepts the request so that the external software program does not receive the request. In this example the wrapper tool may initially extract the signatures of the to be invoked functions from binary codes such as all managed code assemblies COM objects and some unmanaged code libraries of the external software program . A hosting application wrapper is obtained and it is deployed on each computer node of the cluster . In one embodiment the hosting application wrapper is a library implementing all the call backs interface from the external software program . It is developed according to the application programming interfaces APIs listed in the development document of the external software program . The host application wrapper may only need to be developed once for the hosting application and the host application may adapt to every external software program using the host application wrapper . In a further embodiment a copy of the external software program is stored on a shared memory accessible by the cluster . The computing devices in the cluster scheduled to process the request retrieve the codes from the shared memory and executed the external software program in order to provide the result to the invocation source . In one example external software program launchers for each computer node in the cluster scheduled to process the request load the external software program for each computer node so that the computer nodes process the request.

In another embodiment the wrapper tool may generate the codes which implement the identical signature of the original external software program . In an alternative embodiment the newly generated codes may replace the original external software program by the wrapper tool on the host computer .

Also the wrapper tool includes at least the following information cluster execution an invocation source address a head node address a wrapper tool address and batch execution. For example the cluster execution includes information whether cluster execution is enabled. The invocation source address the head node address and the wrapper tool address include information relating to the address which may be physical and or virtual address or a combination thereof of the invocation source the head node of the cluster and the wrapper tool respectively. In one embodiment the batch execution indicates to the wrapper tool whether the wrapper tool should batch a collection of calculations from the invocation source . Other information may be included without departing from the scope of embodiments of the invention.

Once the wrapper tool intercepted the request the wrapper tool extracts parameters or other information from the request. For example the parameters may include using spreadsheet invocation source as an example invocation reference identification cell range user defined functions parameters to the user defined functions etc.

As such embodiments of the invention beneficially provide the processing power of the cluster while the user does not need to modify user defined functions associated with the invocation source .

Referring now to and also referring to a diagram illustrates a typical process flow in system for external processing of a request directed to the external software program originating from the invocation source to the cluster of computing devices according to an embodiment of the invention. An arrow indicates when the host application or the invocation source calls or requests a service provided by the external software program . The request and or the invocation are intercepted by the wrapper tool . According to an arrow the wrapper external software program packs the request which includes the extract parameters cluster information such as the information described above including cluster execution the head node address or the like and all argument objects and sends the information to a router . In one embodiment the wrapper tool sends the information as a into a Service Oriented Architecture Protocol SOAP message.

In one embodiment on the first time the router receives such message or information it will contact the cluster scheduler e.g. a cluster scheduler in to allocate several computer nodes for this message. In one embodiment the scheduler is responsible for selecting available computer nodes according to known schedule schemes or scheduling policy. When the nodes are ready the router will run the external software program launcher on each node according to an arrow . In an alternative embodiment on each time the router receives a message from the wrapper tool the router will choose a computer node and forward the message to the external software program launcher on that node. The node selection is according to certain scheduling policy.

In one embodiment the external software program is stored on a shared memory area accessible by the computer nodes in the cluster . Once the external software program launcher receives the message and properly processes the included information such as the parameters and other information the computer node s responsible for processing the request in the cluster load the necessary external software program from the shared memory area at arrow . Once the processing is completed the computer node in the cluster returns the result of the processing to the invocation source according to an arrow .

On the other hand if the external software program is trying to call back to the host application such as requesting values relating to the invocation source and available on the host application the computer node in the cluster sends information including the invocation information and the extract parameters to a hosting application wrapper according to an arrow . According to one embodiment some requests or invocations will be processed locally by the hosting application wrapper while others will be forwarded back to the wrapper tool on the host computer through arrows . For example some information may include information relating to dependencies between the invocation source and the host application . The result of this call back will be then sent back to the computer node according arrows as described above.

In an alternative embodiment the result form the computer node to the invocation source may be packed as a SOAP message and returned to the router . In such an implementation the router forwards the returned message back to the wrapper tool and the wrapper tool further transmits the result to the host application and the invocation source to be provided to the user .

As the application launches a large amount of threads the requests are externalized to multiple computer nodes in a cluster and hence the application gets parallelized. As such embodiments of the invention transparently break out the single thread based invocation into client multiple service style without changing of any existing source code or user behavior. In addition aspects of the invention conveniently externalize the calculation of user defined functions onto a cluster without any change on user s document or invocation source.

At the extracted information is transmitted to a cluster scheduler e.g. cluster scheduler . In one embodiment the extracted information is first transmitted to a router e.g. router and the router transmits the extract information to the scheduler . The cluster scheduler identifies a set of computing devices in the cluster of computing devices for processing the request at . The identified set of computing devices processes the intercepted request as a function of the intercepted request the extracted information and the invocation source at . By so doing the host computer does not need to process the request and executes the external software program on the host computer . Instead the cluster of computing devices execute the external software program or codes generated by the wrapper tool that perform the same function as the external software program in handling the request from the invocation source . The user is benefited and the user experience is enhanced because the external software program does not require modification to permit the wrapper tool to extract information and to permit the computing devices in the cluster to process the request. At the result is provided in response to the processed request from the identified set of computing devices in the cluster of computing devices to the invocation source.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

