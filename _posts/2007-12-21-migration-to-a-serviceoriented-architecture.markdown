---

title: Migration to a service-oriented architecture
abstract: Migrating a computer-provided solution to a service-oriented architecture is disclosed. One or more primary concerns, each representing a core operation of the computer-provided solution, are identified. One or more secondary concerns, each being associated with a manner in which a core operation of the computer-provided solution is performed, are identified. One or more services, each of which addresses one or more of said one or more primary concerns in a manner determined at least in part by a service context configured to address one or more of said one or more secondary concerns at least in part by indicating as applicable a manner in which applicable ones of said one or more services are to be performed, are defined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930938&OS=08930938&RS=08930938
owner: EMC Corporation
number: 08930938
owner_city: Hopkinton
owner_country: US
publication_date: 20071221
---
Service oriented architectures have evolved to make available to service consumers sometimes referred to herein as clients typically via a public discoverable and standards based interface such as Web Services SOAP functionality traditionally provided by procedural and later object oriented architectures via a tightly defined and often proprietary API. In distributed environments such as network environments prior to the development and deployment of service oriented architecture some computing tasks were performed at clients by rich client side applications and or application frameworks which were communicated with via a typically proprietary API by third party applications or other code running at the client. Such rich client applications and or frameworks typically interacted with applications or other code executing at the client to determine what tasks the application or code required to be performed gathered at the client the data required to perform those tasks and communicated with a remote server on behalf of such application or code in an optimized manner to complete the tasks. In such an environment the gathering of information to perform tasks and the work required to perform those tasks were completed by invoking procedures business logic and or methods of software objects as required all orchestrated by logic at the server side and or the rich client application and or framework. Some functionality provided by software developed and written originally as procedural or object oriented applications have been made available via service oriented protocols but typically software owners have merely recast an API conceived for the procedural or object oriented paradigm as a Web Services or similar interface which approach can result in inefficiencies such as multiple round trip network interactions to accomplish a single task or delays resulting from unresolved dependencies etc.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or communication links. In this specification these implementations or any other form that the invention may take may be referred to as techniques. A component such as a processor or a memory described as being configured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. In general the order of the steps of disclosed processes may be altered within the scope of the invention.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Migrating from a non service oriented structure and interface such as a procedural or object oriented application and associated API to a service oriented architecture is disclosed. In some embodiments the procedural or object oriented application and or user e.g. client application interactions with same is are examined to determine a set of primary concerns e.g. core inbound and outbound operations and a set of secondary concerns e.g. context or other information relevant to the performance of core inbound outbound operations affecting for example an aspect of how such inbound outbound operations are performed . Primary concerns are grouped into related sets of one or more primary concerns. For each group a service and associated interface are defined. For each secondary concern a mechanism is defined to determine how the concern is to be addressed. In some embodiments a mechanism is defined and made available to service consumers to indicate how each secondary concern is to be addressed. Examples of such mechanism include indicated and default profiles service request parameters and filters as described more fully below.

As the example shown in illustrates in an object oriented architecture client applications or other client code may be tightly integrated via a complex API with a client side rich application or framework such as content management framework . The client application and client side framework interact as required to achieve an end result desired by the client application. However in the typical API multiple interactions may be required to achieve a desired end result. Traditionally each an API exposes separately each outward facing method component or business logic and each such method component or business logic may require data or functionality external to itself to perform a task i.e. not independent or self contained and as a consequence it may be necessary to invoke multiple methods etc. in succession to achieve a desired end result. For example retrieval of a most recent version of a content item using a typical object oriented API may require the following series of interactions between a client application and a content management system e.g. as accessed via a client side rich client application and or framework 

The above example illustrates a typical set of interactions such as may be require to achieve a desired end result via a procedural or object oriented API which enables a client to invoke functions and methods that may not be self contained and or otherwise not optimized for an environment in which a rich client and or application framework may not be available at the client. In some embodiments a sequence of interactions such as those described in the preceding paragraph would be reduced if possible to a single service request with matters such as which version to retrieve and whether related objects should be included in the response being determined by applicable service context data including potentially assumed inferred and or default context as described more fully below. For example a service may be configured to assume that a request to retrieve an object if no version or other information were included is intended as a request to retrieve a current version of the object with related objects if any being included or not as indicated by default and or user specified service context data without further interaction with the service consumer.

Migrating a non service oriented API such as a procedural or object oriented API to a service oriented architecture is disclosed. Primary and secondary concerns are identified. Primary concerns are grouped into services configured to address those concerns. Secondary concerns are addressed as context e.g. via profiles request parameters defaults filters etc. within which services addressing primary concerns are performed. In the context of a content management solution primary concerns include core inbound and or outbound operations such adding content to a body of managed content retrieving content identifying content items that satisfy specified criteria e.g. query searching for content etc. Secondary concerns in such a setting include how relationships between objects are handled how virtual documents and other complex objects are handled how multiple renditions of content are handled etc. in the context of application services.

Using techniques disclosed herein a non service oriented content management solution may be migrated to a service oriented architecture in a manner that recognizes the advantages and limitations and honors the requirements and expectations of such an environment better than merely using service protocols to project the functions and or methods of a preexisting non service oriented procedural and or object oriented application and or interface.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

