---

title: Method for test case generation
abstract: A system and method for providing randomly-generated test cases for a set of interfaces of a piece of software are disclosed. A test case generator is initialized with parameter arrays Swith cardinality mand a prime number q. For each independent parameter p of each of the set of interfaces, a test case number t is generated. A test case is then generated based on the values for each independent parameter p and based on t and S, m, and q.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865780&OS=07865780&RS=07865780
owner: SAP AG
number: 07865780
owner_city: Walldorf
owner_country: DE
publication_date: 20071005
---
Given a piece of software with an API or textual interface in general two different approaches currently exist for testing the software. One approach includes defining test cases manually as well as manual evaluation of test results. The other approach includes automatic generation of test cases. All possible input parameter combinations of an interface are called the test area number of possible combinations of input parameters of an interface increases exponentially with the number of input parameters. Thus for large pieces of software or those pieces of software having a large number of input parameters it becomes challenging to generate a test case that adequately relates to the test area.

Automatically generated test cases should at least touch all parts of the test area. Therefore automatically generated test cases must not correlate parameter values of independent parameters. Otherwise the process by which the test cases are generated will systematically leave out parts of the test area. What is needed is a way to reach a statistically even coverage of the test area.

In general this document discusses a system and method for automatically generating a test case that reaches a statistically even coverage of the test area.

In one aspect a system for providing randomly generated test cases for a set of interfaces of a piece of software includes a test case number generator that generates a test case number. The system further includes a test case generator comprising a parameter value generator that deterministically generates a parameter value for each of a set of one or more parameters for each interface of the set of interfaces based on the test case number the set of one or more parameter values providing a test case for a test area comprised of all possible parameter combinations for the set of interfaces.

In another aspect computer implemented method for providing randomly generated test cases for a set of interfaces of a piece of software includes steps of initializing a test case generator with parameter arrays Swith cardinality mand a prime number qfor each independent parameter p of each of the set of interfaces and generating a test case number t. The method further includes generating a test case based on the values for each independent parameter p and based on t and S m and q.

In yet another aspect a method includes steps of generating a test case number t for a set of interfaces of a piece of software and for each independent parameter p of each of the set of interfaces generating a cardinality mto be tested. The method further includes deterministically generating parameter values for each independent parameter p associated with m.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

This document describes a system and method for automatically generating a test case that reaches a statistically even coverage of a test area for a piece of software that has a number of input parameters to its API or textual interface.

Each test case is based on an integer referred to herein as test case number t. All parameters whose values shall be determined randomly are deterministically generated from t. This allows rerunning a test case by just knowing its test case number. The range from which t is chosen should exceed the maximum cardinality of all parameter value sets S and may also be negative.

For each independent parameter p the cardinality number of values to be tested is called m. The values are stored inside an array S. This allows using any kind of parameter types. The next prime number qthat is larger or equal to mis determined. S mand qare determined for each parameter during test initialization. Parameter values inside the arrays Shave to be chosen in a way that the number of values mis different for all parameters p. Single parameter values might be statistically overweight by putting them into the array several times.

To determine the actual parameter value for a single test case with number t the index ninside the array is determined according to the following rules mod 1 if mod

The actual parameter value in that case is the nelement of S. Thus in order to reach a statistically even coverage of the test area the test cases can be generated by generating the test case number t with a random number generator.

Of course this test case generation method can be applied to all kinds of interfaces including text based interfaces like SQL as well as application program interfaces APIs .

The following illustrates an example of the above described system and method for randomly generated test cases. The function to be tested can be described as F P1 int P2 char01 P3 int 

A system such as system executes methods and for generating randomly generated test cases for a set of interfaces of a piece of software. With method the test case generator is initialized. During initialization at for each parameter P the Array Sp is chosen in a way that the cardinality mis different for all Sps as described. The values in Sp are chosen in a way that they cover different regions of the test area.

With method a single test case is created. At a test case number t is generated. The range from which t is chosen should exceed the maximum cardinality of all parameter value sets S and may also be negative. At actual parameter values for the test case t are determined according to an algorithm below mod 1 if mod where each actual parameter value is the nelement of array S. Accordingly the test case can be executed at to test the interfaces of the piece of software.

Some or all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of them. Embodiments of the invention can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium e.g. a machine readable storage device a machine readable storage medium a memory device or a machine readable propagated signal for execution by or to control the operation of data processing apparatus.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also referred to as a program software an application a software application a script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to a communication interface to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks.

Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the invention can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the invention can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Certain features which for clarity are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features which for brevity are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the test case generation system and method described above can be applied to all types of interfaces including text based interfaces such as SQL as well as application programming interfaces APIs .

The steps recited in the claims can be performed in a different order and still achieve desirable results. In addition embodiments of the invention are not limited to database architectures that are relational for example the invention can be implemented to provide indexing and archiving methods and systems for databases built on models other than the relational model e.g. navigational databases or object oriented databases and for databases having records with complex attribute structures e.g. object oriented programming objects or markup language documents. The processes described may be implemented by applications specifically performing archiving and retrieval functions or embedded within other applications.

