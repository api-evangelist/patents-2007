---

title: On-demand multi-thread multimedia processor
abstract: A device includes a multimedia processor that can concurrently support multiple applications for various types of multimedia such as graphics, audio, video, camera, games, etc. The multimedia processor includes configurable storage resources to store instructions, data, and state information for the applications and assignable processing units to perform various types of processing for the applications. The configurable storage resources may include an instruction cache to store instructions for the applications, register banks to store data for the applications, context registers to store state information for threads of the applications, etc. The processing units may include an arithmetic logic unit (ALU) core, an elementary function core, a logic core, a texture sampler, a load control unit, a flow controller, etc. The multimedia processor allocates a configurable portion of the storage resources to each application and dynamically assigns the processing units to the applications as requested by these applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685409&OS=07685409&RS=07685409
owner: QUALCOMM Incorporated
number: 07685409
owner_city: San Diego
owner_country: US
publication_date: 20070221
---
Processors are widely used for various purposes such as computing communication networking etc. A processor may be a general purpose processor such as a central processing unit CPU or a specialized processor such as a digital signal processor DSP or a graphics processing unit GPU . A general purpose processor may support a generic set of instructions and generic functions which may be used by applications of various types. A general purpose processor may be inefficient for certain applications with specific processing requirements. In contrast a specialized processor may support a limited set of instructions and specialized functions which may be customized for specific applications. This allows the specialized processor to efficiently support the applications for which it is designed. However the range of applications supported by the specialized processor may be limited.

A device such as a cellular phone a personal digital assistant PDA or a laptop computer may support applications of various types. It is desirable to execute these applications as efficiently as possible and with as little hardware as possible in order to reduce cost power etc.

A device including a multimedia processor that can concurrently support multiple applications is described herein. These applications may be for various types of multimedia such as graphics audio video camera games etc. The multimedia processor comprises configurable storage resources to store instructions data and state information for the applications and assignable processing units to perform various types of processing for the applications. The configurable storage resources may include an instruction cache to store instructions for the applications register banks to store data for the applications context registers to store state information for threads of the applications etc. The processing units may include an arithmetic logic unit ALU core an elementary function core a logic core a texture sampler a load control unit a flow controller etc. which may operate as described below. The multimedia processor allocates a configurable portion of the storage resources to each application and dynamically assigns the processing units to the applications as requested by these applications. Each application thus observes an independent virtual processor and does not need to be aware of the other applications executing concurrently. The multimedia processor may further include an input interface unit to asynchronously receive threads from the applications an output interface unit to asynchronously provide results to the applications and a load control unit to fetch instructions and data for the applications as needed from a cache memory and or a main memory.

The multimedia processor may determine loading based on the percentage of time the processing units are assigned to the applications. The multimedia processor may adjust clock speed based on the loading in order to reduce power consumption.

System may support 2 dimensional 2 D and or 3 dimensional 3 D graphics. A 2 D or 3 D image may be represented with polygons typically triangles . Each triangle may be composed of picture elements pixels . Each pixel may have various attributes such as space coordinates color values texture coordinates etc. Each attribute may have up to four components. For example space coordinates may be given by either three components x y and z or four components x y z and w where x and y are horizontal and vertical coordinates z is depth and w is a homogeneous coordinate. Color values may be given by three components r g and b or four components r g b and a where r is red g is green b is blue and a is a transparency factor that determines the transparency of a pixel. Texture coordinates are typically given by horizontal and vertical coordinates u and v. A pixel may also be associated with other attributes.

System includes a multimedia processor a texture engine and a configurable cache memory . Multimedia processor may perform various types of processing for multimedia applications as described below. Texture engine may perform graphics operations such as texture mapping which is a complex graphics operation involving modification of the color of pixels with the color of a texture image. Cache memory is a fast memory that can store instructions and data for multimedia processor and texture engine . System may include other units.

Multimedia processor performs processing for the N applications. Multimedia processor may split the processing of each application into a series of threads e.g. automatically and transparent to the application. A thread or thread of execution may indicate a specific task that may be performed with a set of one or more instructions. Threads allow an application to have multiple tasks performed simultaneously by different units and further allow different applications to share processing and storage resources.

In the design shown in multimedia processor includes an input interface unit an output interface unit a thread scheduler a flow controller a master controller assignable processing units configurable storage resources and a load control unit . Input interface unit receives threads from the N applications and provides these threads to thread scheduler . Thread scheduler performs various functions to schedule and manage execution of the threads as described below. Flow controller assists with application program flow control. Master controller receives information such as processing mode data format etc. and configures the operation of various units within multimedia processor accordingly. For example master controller may decode command set up state for applications and control a state update sequence.

In the design shown in assignable processing units include an ALU core an elementary function core a logic core and a texture sampler . A core generally refers to a processing unit within an integrated circuit. The terms core engine machine processor processing unit hardware unit etc. may be used interchangeably. In general assignable processing units may include any number of processing units and any type of processing unit. Each processing unit may operate independently of the other processing units.

ALU core may perform arithmetic operations such as addition subtraction multiplication multiply and accumulate dot product absolute negation comparison saturation etc. ALU core may comprise one or more scalar ALUs and or one or more vector ALUs. A scalar ALU can operate on one component at a time. A vector ALU can operate on multiple e.g. four components at a time. Elementary function core may compute transcendental elementary functions such as sine cosine reciprocal logarithm exponential square root reciprocal square root etc. which may be widely used by graphics applications. Elementary function core may improve performance by computing the elementary functions in much less time than the time required to perform polynomial approximations of the elementary functions using simple instructions. Elementary function core may comprise one or more elementary function units. Each elementary function unit may compute an elementary function for one component at a time.

Logic core may perform logical operations e.g. AND OR XOR etc. bitwise operations e.g. left and right shifts integer operations comparison data buffer management operations e.g. push pop etc. and or other operations. Logic core may also perform format conversion e.g. from integers to floating point numbers and vice versa. Texture sampler may perform pre processing for texture engine . For example texture sampler may read texture coordinates attach code and or other information and send its output to texture engine . Texture sampler may also provide instructions to texture engine and receive results from the texture engine.

In the design shown in configurable storage resources include context registers an instruction cache register banks and a constant buffer . In general configurable storage resources may include any number of storage units and any type of storage unit. Context registers store state information or context for threads from the N applications. Instruction cache stores instructions for the threads. These instructions indicate specific operations to perform for each thread. Each operation may be an arithmetic operation an elementary function a logic operation a memory access operation etc. Instruction cache may be loaded with instructions from cache memory and or a main memory not shown in as needed via load control unit . Register banks store data for the applications as well as intermediate and final results from processing units . Constant buffer stores constant values e.g. scale factors filter weights etc. used by processing units e.g. ALU core and logic core .

Load control unit may control the loading of instructions data and constants for the N applications. Load control unit interfaces with cache memory and loads instruction cache register banks and constant buffer with instructions data and constants from cache memory . Load control unit also writes the data and results in register banks to cache memory . Output interface unit receives the final results for the executed threads from register banks and provides these results to the applications. Input interface unit and output interface unit may provide asynchronous interface to external units e.g. camera display unit etc. associated with the N applications.

Multimedia processor may implement one or more graphics application programming interfaces APIs such as Open Graphics Library OpenGL Direct3D Open Vector Graphics OpenVG etc. These various graphics APIs are known in the art. Multimedia processor may also support 2 D graphics or 3 D graphics or both.

A main memory may be part of system or may be external to system . Main memory is a large slower memory located further away e.g. off chip from multimedia processor . Main memory may store all instructions and data for the N applications being executed by multimedia processor . The instructions and data in main memory may be loaded into cache memory when and as needed.

Multimedia processor may be designed and operated such that it appears as an independent virtual processor to each application being executed. Each application may be assigned sufficient storage resources for instructions data constant and state information. Each application may have its own individual state e.g. program counter data format etc. which may be maintained by multimedia processor . Each application may also be assigned processing units based on the instructions to be executed for that application. The N applications may execute simultaneously without interfering one another and without having to be aware of the other applications. Multimedia processor may adjust the performance target for each application based on the application demand and or other factors e.g. priority.

Context registers may be dynamically assigned to threads from the N applications and may store various types of information for the threads as described below. Context registers may be updated as threads are accepted executed and completed. Instruction cache and register banks may be allocated to each application at the start of execution e.g. based on the requirements of the application. For each application the allocated portions for instruction cache and or register banks may change during the execution of the application based on its demand and other factors. Constant buffer may store constants that may be used for any application. Constants for a given application may be loaded into constant buffer when needed and may then be available for use by all applications.

The storage units may be designed to support flexible allocation of storage resources to the applications as described below. The storage units may also be designed to simplify memory access by the applications as also described below.

The time slots for ALU core may be assigned to any of the applications. In the example shown in ALU core is assigned to application App in time slots t and t 1 to application in time slot t 2 application N in time slot t 3 etc. Likewise the time slots for elementary function core logic core texture sampler flow controller and load control unit may be assigned to any of the applications. Multimedia processor may dynamically assign the processing units to the applications on demand based on the processing requirements of these applications.

As shown in each application may be assigned pertinent processing units in multimedia processor . The particular processing units to assign to each application may change over time depending on the processing requirements. Each application does not need to be aware of the other applications nor the assignments of processing units to the other applications.

Multimedia processor may support multi threading to achieve parallel execution of instructions and improve overall efficiency. Multi threading refers to the execution of multiple threads in parallel by different processing units. Thread scheduler may accept threads from the N applications determine which threads are ready for execution and dispatch these threads to different processing units. Thread scheduler may manage execution of the threads and utilization of the processing units.

Central thread scheduler may communicate with processing units and and context registers through via request Req and grant interfaces. Scheduler may issue requests to instruction cache and receive hit miss indications in response. In general the communication between these units may be achieved with various mechanisms such as control signals interrupts messages registers etc.

Central thread scheduler may perform various functions to schedule threads. Central thread scheduler may determine whether to accept new threads from the N applications dispatch threads that are for execution and release remove threads that are completed. For each thread central thread scheduler may determine whether resources e.g. instructions processing units register banks etc. required by that thread are available activate the thread and place it in active queue if the required resources are available and place the thread in sleep queue if any resource is not available. Active queue stores threads that are ready for execution and sleep queue stores threads that are not ready for execution.

Central thread scheduler may also manage execution of threads. In each scheduling interval e.g. each time slot central thread scheduler may select a number of candidate threads in active queue for evaluation and possible dispatch. Central thread scheduler may determine the processing units to use for the candidate threads check for read write conflicts of storage units and dispatch different threads to different processing units for execution. Multimedia processor may support execution of M threads concurrently where M may be any suitable value e.g. M 12 . In general M may be selected based on the size of the storage resources e.g. instruction cache and register banks the latency or delay for load operations the pipelines of the processing units and or other factors so that the processing units are utilized as fully as possible.

Central thread scheduler may update the status and state of threads as appropriate. Central thread scheduler may place a thread in sleep queue if a the next instruction for the thread is not found in instruction cache b the next instruction is waiting for results from a previous instruction or c some other sleep conditions are satisfied. Central thread scheduler may move a thread from sleep queue to active queue when the sleep conditions are no longer true.

Central thread scheduler may maintain a program counter for each thread and may update the program counter as instructions are executed or program flow is altered. Scheduler may solicit assistance from flow controller to control the program flow for the threads.

Flow controller may handle if else statements loops subroutine calls branches switch instructions pixel kill and or other flow altering instructions. Flow controller may evaluate one or more conditions for each such instruction indicate a change in the program counter one way if the condition s are met and indicate a change in the program counter another way if the condition s are not met. Flow controller may also perform other functions related to dynamic program flow. Central thread scheduler may update the program counter based on results from flow controller .

Central thread scheduler may also manage context registers and update these registers as threads are accepted executed and completed. Context registers may store various types of information for threads. For example a context register for a thread may store 1 an application program identifier ID for the application to which the thread belongs 2 a program counter that points to the current instruction for the thread 3 a coverage mask that indicates valid and invalid pixels for the thread 4 an active flag that indicates which pixels to operate on in case of a flow altering instruction 5 a resume instruction pointer that indicates when a pixel will be re activated if it is inactive 6 a stack that stores return instruction pointers for dynamic flow control 7 address registers for relative addressing 8 predicate registers that store condition calculation results 9 a load reference counter that tracks load requests and data back conditions and or 10 other information. Context registers may also store less more or different information.

Multimedia processor may support a comprehensive set of instructions for various multimedia applications. This instruction set may include arithmetic elementary function logical bitwise flow control and other instructions.

Two level decoding of instructions may be performed to improve performance. High level decoder may perform high level decoding of instructions to determine instruction type operand type source and destination identifiers IDs and or other information used for scheduling. Each processing unit may include a separate instruction decoder that performs low level decoding of instructions for that processing unit. For example an instruction decoder for ALU core may handle only ALU related instructions an instruction decoder for elementary function core may handle only instructions for elementary functions etc. Two level decoding may simplify the design of central thread scheduler as well as the instruction decoders for the processing units.

Resource usage monitor unit monitors the usage of the processing units e.g. by keeping track of the percentage of time each processing unit is assigned. Monitor unit may dynamically adjust the operation of the processing units in order to conserve battery power while providing the desired performance. For example monitor unit may adjust the clock speed for multimedia processor based on loading of the multimedia processor in order to reduce power consumption. Monitor unit may also adjust the clock speed for each individual processing unit based on loading or percentage utilization of that processing unit. Monitor unit may select the highest clock speed for full loading and may select progressively slower clock speed for progressively less loading. Monitor unit may also disable power down any processing unit that is not assigned to any application and may enable power up the processing unit when it is assigned.

Each thread may be packet based and may operate on a unit of data of up to a predetermined size. The data unit size may be selected based on the design of the processing and storage units the characteristics of the data being processed etc. In one design each thread operates on up to four pixels or up to four vertices in an image. Register banks may include four register banks that may store a up to four components of each attribute for pixels one component per register bank or b components of attributes for pixels one pixel per register bank. ALU core may include four scalar ALUs or a vector ALU that can operate on up to four components at a time.

A storage unit e.g. instruction cache or register banks may be implemented with a virtual memory architecture that allows for efficient allocation of storage resources to the applications and easy access of the allocated storage resources by the applications. The virtual memory architecture may utilize a virtual memory and a physical memory. Applications may be allocated sections of the virtual memory and may perform memory access via virtual address space. Different sections of the virtual memory may be mapped to different sections of the physical memory which stores the instructions and or data.

Storage unit implements a physical memory that stores instructions and or data for the applications. Physical memory includes S physical tiles through S. Each logical tile of virtual memory is mapped to one physical tile of physical memory . An example mapping for some logical tiles is shown in . In this example physical tile stores instructions and or data for logical tile physical tile stores instructions and or data for logical tile S etc.

The use of logical tiles and physical tiles may simplify the allocation of tiles to applications and the management of the tiles. An application may request certain amounts of storage resources for instructions and data. Multimedia processor may allocate one or more tiles in instruction cache and one or more tiles in register banks to the application. The application may be allocated additional fewer or different logical tiles as necessary.

In the design shown in physical address look up table includes S entries for the S logical tiles one entry for each logical tile. The S entries of table may be indexed by logical tile address. The entry for each logical tile indicates the physical tile to which that logical tile is mapped. In the example shown in logical tile is mapped to physical tile logical tile is mapped to physical tile logical tile is mapped to physical tile i logical tile is mapped to physical tile S etc. Look up tables and may be updated whenever an application is allocated additional fewer and or different logical tiles. The applications may be allocated different amounts of storage resources by simply updating the look up tables without having to actually transfer instructions or data among the physical tiles.

A storage unit may thus be associated with a virtual memory and a physical memory. Each application may be allocated a configurable portion of the virtual memory. At least one table may be used to map the portion of the virtual memory allocated to each application to a corresponding portion of the physical memory.

Each application is typically allocated limited amounts of storage resources in instruction cache and register banks to store instructions and data respectively for that application. Cache memory may store additional instructions and data for the applications. Whenever an instruction for an application is not available in instruction cache a cache miss may be returned to thread scheduler which may then issue an instruction request to load control unit . Similarly whenever data for an application is not available in register banks or whenever a storage unit overflows with data a data request may be issued to load control unit .

Load control unit may receive instruction requests from thread scheduler and data requests from other units. Load control unit may arbitrate these various requests and generate memory requests to a load the desired instructions and or data from cache memory or main memory and or b write data to cache memory or main memory .

The storage units within multimedia processor may store small portions of instructions and data that are currently used for the applications. Cache memory may store larger portions of instructions and data that might be used for the applications. Multimedia processor may support unlimited instruction and data access via cache memory . This capability allows multimedia processor to support applications of any size. Multimedia processor may also support generic memory load and texture load between cache memory and main memory .

The multimedia processor described herein may be used for wireless communication devices handheld devices game devices computing devices consumer electronics devices computers etc. An exemplary use of the multimedia processor for a wireless communication device is described below.

Wireless device is capable of providing bi directional communication via a receive path and a transmit path. On the receive path signals transmitted by base stations are received by an antenna and provided to a receiver RCVR . Receiver conditions and digitizes the received signal and provides samples to a digital section for further processing. On the transmit path a transmitter TMTR receives data to be transmitted from digital section processes and conditions the data and generates a modulated signal which is transmitted via antenna to the base stations.

Digital section includes various processing interface and memory units such as for example a modem processor a digital signal processor DSP a video audio processor a controller processor a display processor a central processing unit CPU reduced instruction set computer RISC a multimedia processor a camera processor an internal cache memory and an external bus interface EBI . Modem processor performs processing for data transmission and reception e.g. encoding modulation demodulation and decoding . DSP may perform specialized processing for wireless device . Video audio processor performs processing on video content e.g. still images moving videos and moving texts for video applications such as camcorder video playback and video conferencing. Video audio processor also performs processing for audio content e.g. synthesized audio for audio applications. Controller processor may direct the operation of various units within digital section . Display processor performs processing to facilitate the display of videos graphics and texts on a display unit . CPU RISC may perform general purpose processing for wireless device . Multimedia processor performs processing for multimedia applications and may be implemented as described above for . Camera processor performs processing for a camera not shown in . Internal cache memory stores data and or instructions for various units within digital section and may implement cache memory in . EBI facilitates transfer of data between digital section e.g. internal cache memory and a main memory . Multimedia applications may be executed for any of the processors in digital section .

Digital section may be implemented with one or more processors micro processors DSPs RISCs etc. Digital section may also be fabricated on one or more application specific integrated circuits ASICs and or some other type of integrated circuits ICs .

The multimedia processor described herein may be implemented in various hardware devices. For example the multimedia processor may be implemented within ASICs DSPs digital signal processing devices DSPDs programmable logic devices PLDs field programmable gate arrays FPGAs processors controllers micro controllers microprocessors electronic devices other electronic units. The multimedia processor may or may not include integrated embedded memory.

An apparatus implementing the multimedia processor described herein may be a stand alone unit or may be part of a device. The device may be i a stand alone IC ii a set of one or more ICs that may include memory ICs for storing data and or instructions iii an ASIC such as a mobile station modem MSM iv a module that may be embedded within other devices v a cellular phone wireless device handset or mobile unit vi etc.

The previous description of the disclosure is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to the disclosure will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other variations without departing from the spirit or scope of the disclosure. Thus the disclosure is not intended to be limited to the examples described herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

