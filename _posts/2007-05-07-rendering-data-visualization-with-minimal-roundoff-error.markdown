---

title: Rendering data visualization with minimal round-off error
abstract: Systems and methods in accordance with various embodiments of the present invention provide for the rendering of data visualizations with minimal round-off errors. The data visualization method represents a dataset as graphical elements within a graphical layout area by performing layout of a data value within the dataset on the graphical layout area. The data value is positioned on the graphical layout area by determining a floating point position of the data value. A round-off error is calculated by casting the floating point position to an integer position on the graphical layout area. The round-off error is distributed to one or more subsequent data values that are yet to be positioned on the graphical layout area.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08139063&OS=08139063&RS=08139063
owner: Oracle International Corporation
number: 08139063
owner_city: Redwood Shores
owner_country: US
publication_date: 20070507
---
This application also is related to the following U.S. patent applications each of which is hereby incorporated herein by reference 

U.S. patent application Ser. No. 11 773 895 filed Jul. 5 2007 entitled AGGREGATE LAYOUT FOR DATA VISUALIZATION TECHNIQUES 

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This invention relates generally to the visual display of data and more particularly to rendering data visualization with minimal round off error.

In an increasingly competitive world enterprises are constantly in need of business intelligence that empowers the decision makers in the organization to act on the information and thus impart extra competitive edge to the organization s products and services. Businesses succeed or fail based on their ability to accurately quantify how many leads become orders identify their most profitable customers forecast manufacturing capabilities manage reliable supply chains and create sales projections for example.

However obtaining information on which decision makers can act presents several practical challenges. One such challenge is the massive amount of data available to the enterprise in today s Information Age. Conversion of data to information which can be readily understood is the obstacle. Additionally enterprises today have data spread over multiple data sources ranging from legacy systems to relational databases and text files. Even if these problems are surmounted publishing information in a secure and reliable manner remains another concern for enterprises.

Reporting systems with data visualization functionalities can provide users with the capability to convert diverse data into information that can be easily visualized and deciphered to exploit the information and learn more about the business. Data visualization systems typically display ranges of data values as the ratios of sizes and positions of graphical marks or symbols within the area of a larger shape such as a rectangular graph or chart. For example scatter plots display ranges of data values in two data dimensions a horizontal dimension and a vertical dimension within a rectangle. The data values are displayed as ratios of positions of dots along the dimensions of the rectangle. In another example treemaps display hierarchical data by using nesting rectangles such that the ratios of the areas of the innermost nested rectangles correspond to the data values within groups at the lowest hierarchical level.

Typical data visualization algorithms use floating point arithmetic to minimize error while determining the size and position of the graphical representation of the data. Essentially rendering with greater precision corresponds to less error. Calculating positions of graphics with floating point arithmetic is most appropriate when rendering with graphics systems that support floating point coordinates such as Scalable Vector Graphics SVG or Java 2D an application programming interface for drawing two dimensional graphics using the Java programming language. However calculating positions with floating point arithmetic is not appropriate when rendering with graphics systems that only support integer positions such as an HTML rendering environment. Typical web browsers support the HTML rendering environment.

When graphics positions calculated with floating point arithmetic are rendered at integer positions round off error occurs when the fractional value of the floating point arithmetic is truncated into an integer. Round off error produces irregular gaps in the data visualization. Some data visualization methods render the graphics with floating point arithmetic at integer positions without regard for the round off error. In these methods the accuracy of the data representation is highly compromised because of the disregard of the round off error. Other data visualization methods attempt to minimize round off error on graphics systems which only support integer positions by necessitating the use of plug in components which support floating point arithmetic such as SVG or Java plug ins. However other methods of minimizing round off error without requiring plug in components are desirable.

Systems and methods in accordance with various embodiments of the present invention provide for the rendering of data visualizations with minimal round off errors. The effects of round off error are minimized in a data visualization when rendering floating point coordinates of data values at integer positions in a graphical layout area by distributing the round off error. More specifically the data visualization method represents a dataset as graphical elements within a graphical layout area by performing layout of a data value within the dataset on the graphical layout area. The data value is positioned on the graphical layout area by determining a floating point position of the data value. A round off error is calculated by casting the floating point position to an integer position on the graphical layout area. The round off error is distributed to one or more subsequent data values that are yet to be positioned on the graphical layout area.

A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

Data visualizations which lie on integer positions and minimize the effects of round off error are useful for rendering to graphics environments which have limited capabilities. In particular there is no method for drawing graphical forms at fractions of a pixel that works consistently throughout common web browsers. Since critical business decisions may be based on the information portrayed in the data visualization rounding error should be minimized in order to provide the most accurate graphical representation of data. For example unintentional differences in the sizes of graphics may be perceived as conveying differences in quantity among the data values. Decisions based on such erroneous representations may be equally erroneous.

One advantage of rendering data visualizations with minimal round off error is the improvement in the quality of data visualizations. The data visualizations may be adapted to render at integer positions such as in a web browser using tags such as standard HTML division DIV tags. The adaptation can be performed using a technique which diffuses round off error to subsequent data values to be positioned in the layout area. In one embodiment the rounding error from one data value is propagated to another data value during positioning such that the total error is distributed across the entire visualization. This produces a more informational visualization of data by preventing the accumulation of rounding error towards the later positioned data values. Moreover the error associated with the data value may be no more than might be expected if the edges of the visual representation were off by a single pixel.

Another advantage of such a solution is that it can make data visualization accessible to more people. For example users can employ data visualization techniques when rendered as basic HTML without the need for additional overhead to configure the web browser. Furthermore vision challenged users can interpret data visualizations when rendered as basic HTML because conventional screen readers are capable of reading text associated with HTML DIV elements.

In the description that follows various embodiments will be described in reference to subsystems on a platform for a software application such as a database application. However embodiments are not limited to any particular architecture environment application or implementation. For example although various embodiments will be described in reference to database applications aspects may be advantageously applied to any appropriate application. Therefore the description of the embodiments that follows is for purposes of illustration and not limitation.

At step a layout of the data value is performed. Layout is performed by mapping the data value to a fixed layout area where the magnitude of a cell characteristic corresponds to the proportion ratio. A cell represents the data value as a two dimensional region of the fixed layout area. A characteristic may include area color gray value texture orientation and length. It should be noted that other known characteristics may be applied to the methods described herein. For example in a treemap the ratio of the area occupied by one rectangle to the total layout area is equivalent to the proportion ratio. Thus in one embodiment the area of each rectangle in the treemap is proportional to the magnitude of the corresponding data value. In an alternative embodiment such as for a bar chart a bar is positioned such that the height or length of the rectangle corresponds to the magnitude of the data value. It should be noted that various layout methods may be used in conjunction with the methods described herein.

When layout is performed on an environment which supports integer positions fractional values are rendered using whole numbers. In one embodiment casting the floating point value to a whole number is performed by clipping the fractional portion. A threshold may be used whereby the system rounds up to the next highest integer if the floating point value meets or exceeds the threshold and rounds down to the next lowest integer if the floating point value is less than the threshold. Mathematical functions such as Floor and Ceiling functions may also be used to cast the floating point values to integer values.

At step an error from the layout process is calculated. Round off error is a byproduct regardless of the casting method used. The round off error may be calculated in many ways. For example the error in a treemap can be determined by examining the positioning of the rectangular shape representing the data value and more specifically the positioning of the width and height of the rectangle. For example a calculated error may be 0.25 pixels for a horizontal orientation. The error indicates that the width of the rectangle is off by 0.25 pixels. In one embodiment the error indicates positive and negative values. The error is less than 1 unit of measurement where the system positions at integer values. In some cases the error is 0 because the positioning rendered to integer values. For these cases casting is not required and thus round off error is not present.

The error is converted into a coordinate space of the actual data values at step . In one embodiment the error value is converted into the relative value of the actual data values retrieved from the database. For example a calculated error 0.25 corresponds to the rectangular layout space of the treemap whereas the data values are of a different coordinate space such as a data type NUMBER. The error 0.25 in the layout space coordinate system may correspond with a value of 10 in the data type NUMBER coordinate system. The converted error is the relative value of the error in the layout space.

At step the relative error is distributed to a subsequent data value. The subsequent data value within the range of data values has yet to be positioned. In one embodiment the subsequent data value to be positioned is modified by adding the error originating from the previously positioned data value. For example for a subsequent data value of 75 the converted error of value 10 is added producing a subsequent data value of 85. In alternative embodiments the round off error from rendering a floating point to an integer position may be disbursed among multiple data values yet to be positioned. The error may be propagated regardless of directional orientation such as horizontal or vertical orientation. In one embodiment a single instance of error is carried over to the subsequent data value to be positioned. In alternative embodiments multiple instances of error may be distributed.

In some cases for example a distributed bar chart the error from one data value should not be propagated to other data values. Instead the error remains localized on the single data value. In other cases error distribution is essential. The effects of error distribution are applicable to data visualizations with graphical elements in contiguous proximity. Graphical elements which are stacked next to each other would benefit from rounding error distribution because errors may be present at each level of the stack. The methods taught herein are particularly applicable to graphical representations including stacked bars stacked area graphs maps and heat maps for example. In one embodiment the graphical elements in contiguous proximity are limited to rectilinear shapes diagonal shapes or a combination of both.

This method reduces the accumulation of error on the last data values to be positioned by localizing the error. In one embodiment of a treemap one rectangle may be larger than it should be if round off error was not an issue. By localizing the error the subsequent data value may account for the error by positioning a rectangle to be smaller than it should be if round off error were not at issue. In this way the error is a local error which prevents the last data values to be positioned from being substantially error prone.

The process may be iterative looping back to step for each data value to be positioned. In one embodiment the layout algorithm iterates until all data values within the dataset have been placed. In the context of a treemap the layout algorithm subdivides the parent nodes to incorporate the children nodes. In one embodiment the direction for positioning alternates per subdivision level between horizontal and vertical positioning. Moreover improvements may be made to minimize an aspect ratio of a rectangle by taking the maximum of width height and height width. This seeks to keep the positioned areas as square as possible. In terms of usability it is easier for humans to compare areas of rectangles that are square in shape rather than long thin strips representing the data values.

At step the data visualization is published. Once the report including the data visualization has been created with all the required data and visualization formatting the data visualization may be published to enable the intended users to access the information easily. The data visualization information may be accessed in different formats. For example the data visualization information may be output in PDF HTML HTML cascading style sheets CSS RTF spreadsheet as well as data oriented formats such as XML and Delimited Data.

Where the data visualization information is accessed through the use of browsers most browsers can only support rendering to integer positions. In an alternative embodiment other modes of accessing the output information may also require rendering to be performed to integer positions. Rendering to thick clients requires significant overhead in order to properly render to non integer positions. For example rendering to Java swing components within a Java applet requires having a correct version of a Java run time including the correct Java interpreter in the browser. Moreover scalable vector graphics SVG is a plug in that can render vectors at non integer positions. Furthermore most types of image processing programs such as Photoshop Illustrator or Vector graphics render to non integer positions but all require significant overhead.

Rendering to thin clients places fewer constraints on the end user. The data visualization may be rendered in an environment that can only position within integer boundaries. For example HTML is limited to positioning rectangles at integer boundaries. The graphical elements of the data visualization may be rendered to HTML DIV elements without requiring the use of plug ins or other overhead such as a Java run time or versioning issues.

More specifically the conversion of the fractional coordinate into a whole number causes rounding error producing a positive or negative rounding error less than one. For example during layout of a data value the system may determine the position of the data value to be 1.75. To render at an integer position the system may cast to the next highest integer drawing a graphical line at 2. The error is calculated to be 0.25. The system distributes this error locally instead of allowing the error to accumulate to the last values to be positioned at integer boundaries.

An HTML DIV rendering algorithm thus can produce data visualizations such as shown in this figure capable of illustrating the same kind of information from the given dataset as more complex rendering systems. In one embodiment the rectangles can be sized and filtered to change the layout in addition to other functionalities.

In most embodiments the system includes some type of network . The network may can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example the network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

The system may also include one or more server computers which can be general purpose computers specialized server computers including merely by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. One or more of the servers e.g. may be dedicated to running applications such as a business application a Web server application server etc. Such servers may be used to process requests from user computers . The applications can also include any number of applications for controlling access to resources of the servers .

The Web server can be running an operating system including any of those discussed above as well as any commercially available server operating systems. The Web server can also run any of a variety of server applications and or mid tier applications including HTTP servers FTP servers CGI servers database servers Java servers business applications and the like. The server s also may be one or more computers which can be capable of executing programs or scripts in response to the user computers . As one example a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language such as Java C C or C and or any scripting language such as Perl Python or TCL as well as combinations of any programming scripting languages. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase IBM and the like which can process requests from database clients running on a user computer .

The system may also include one or more databases . The database s may reside in a variety of locations. By way of example a database may reside on a storage medium local to and or resident in one or more of the computers . Alternatively it may be remote from any or all of the computers and or in communication e.g. via the network with one or more of these. In a particular set of embodiments the database may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers may be stored locally on the respective computer and or remotely as appropriate. In one set of embodiments the database may be a relational database such as Oracle 10g that is adapted to store update and retrieve data in response to SQL formatted commands.

The computer system may additionally include a computer readable storage media reader a communications system e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments the computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

The computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. The communications system may permit data to be exchanged with the network and or any other computer described above with respect to the system .

The computer system may also comprise software elements shown as being currently located within a working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . It should be appreciated that alternate embodiments of a computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the pending claims along with their full scope or equivalents.

