---

title: Method for changing printer drivers in information processing apparatus
abstract: The information processing apparatus according to the present invention is an information processing apparatus comprises a determination unit that determines whether a combination of a source application and a destination printer driver is a combination of a first type application and a first type printer driver or a combination of a second type application and a second type printer driver; and a changing unit that changes the printer driver properties referenced by an operating system to properties value that satisfies the combinations in the event that the determination unit determines that the source application and the destination printer driver are neither of the combinations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08305610&OS=08305610&RS=08305610
owner: Canon Kabushiki Kaisha
number: 08305610
owner_city: Tokyo
owner_country: JP
publication_date: 20070306
---
The present invention relates to an information processing apparatus capable of performing print processing and the like using for instance a plurality of different graphics engines and a method for changing printer drivers in the information processing apparatus.

In order to print images and texts from an application executed by a host computer using a print apparatus an operating system is generally provided with a configuration such as that shown in . More specifically an application hands over graphics data to a graphics engine and the graphics data is processed by the graphics engine before being handed over to a printer driver . The printer driver generates print data generally referred to as PDL Page Description Language corresponding to a print apparatus. The print data is stored in a spooler and then sent to a print apparatus .

In particular the graphics engine performs processing of graphics data such as converting the dimension of graphics data created by the application or simulation processing according to the throughput of the printer driver . Therefore the application and the printer driver are both capable of independent operation. The graphics engine is normally provided as a part of an OS operating system .

On the other hand the number of graphics engines is not necessarily limited to one. Some configurations OSs allow two or more graphics engines to coexist.

For instance a hardware engineering conference titled WinHEC 2005 was hosted by Microsoft Corporation in 2005 in Seattle USA. At the conference Microsoft s new OS named Windows registered trademark Vista was introduced as having a configuration in which two graphic engines coexist as shown in Daniel Emerson Advances in Windows Printing WinHEC 2005 Conference TWPR05001 WinHEC05.ppt .

Microsoft s conventional printing systems use a graphics engine called GDI Graphic Device Interface through an application hereinafter referred to as a Win32 application using an API Application Programming Interface referred to as a Win32 API where print data is created from graphics data by a printer driver hereinafter referred to as a GDI printer driver called from the GDI. In the present embodiment this print processing flow shall be referred to as a GDI print path.

For Windows Vista a new print processing flow referred to as an XPS print path will be provided in addition to the conventional GDI print path. For the XPS print path a graphic engine called a WPF Windows Presentation Foundation is provided by the OS through an application hereinafter referred to as a WinFx application using an API called WinFx API. The WPF graphics engine hands over XPS XML Paper Specification format graphics data to a printer driver hereinafter referred to as an XPS printer driver whereby the printer driver converts the graphics data to print data.

The GDI and WPF graphics engines are also capable of collaborating with each other. This collaboration enables graphics data to be handed over from a Win32 application to the XPS printer driver or from a WinFx application to the GDI printer driver.

In order to make this collaboration work when printing from a WinFx application using the GDI printer driver graphics data is first converted into XPS format graphics data by the WPF graphics engine and then from XPS format graphics data to EMF format graphics data. The converted graphics data is stored in an EMF spool file and subsequently converted into print data by the GDI driver.

In addition when printing from a Win32 application using the XPS printer driver graphics data is first converted into EMF format graphics data by the GDI graphics engine and then from EMF format graphics data to XPS format graphics data. The converted graphics data is stored in an XPS spool file and subsequently converted into print data by the XPS printer driver.

As described four print processing flows are provided in Windows Vista. Thus print processing from both Win32 applications and WinFx applications may be realized by preparing either one of a GDI printer driver or an XPS printer driver.

However since the XPS format and the EMF format differ from each other conversion of graphics data formats has problems in terms of print quality print functions print speed and the like.

For instance graphics data containing logic operations such as ROP operations or raster operation processing operations which is supported in EMF format is not supported in XPS format. Therefore depending on specifications specified by Microsoft Corporation there is a risk that logic operation information may be lost from graphics data containing logic operations when undergoing conversion by a GDI GPS conversion module that converts EMF format into XPS format. When graphics data from which logic operation information is removed is handed over to the XPS printer driver the XPS printer driver may not be able to create the output result intended by the Win32 application.

Conversely sophisticated graphics data that is supported in XPS format is not supported in EMF format. For this reason when performing conversion using an XPS GDI conversion module that converts XPS format into EMF format such graphics data is converted into localized bitmaps in a process called flattering. In this case since graphics data is converted into bitmap data the GDI printer driver will be unable to determine original object properties and therefore will be unable to create an output result corresponding to the object properties. In other words quality of images output through data format conversion will deteriorate. For instance when printing multiple pages per sheet using a printer driver since data converted into bitmaps will be scaled down and arranged image quality will be lower than a case in which a graphical object is drawn in a reduced size.

Furthermore for instance electronic signature information that is supported in XPS format is not supported in EMF format. Moreover processing that is supported in EMF format in which information from an application is directly conveyed to the GDI printer driver is not supported in XPS format. Therefore when a conversion from XPS format to EMF format or vice versa is performed in the event that graphics data in the pre conversion format contains instructions using functions which are not supported in the post conversion format such functions will not be performed. In other words functions that are not achievable when data format conversion processing is performed may exist in graphics data of respective formats.

Additionally the occurrences of processing for GDI XPS conversion or XPS GDI conversion and the like may result in processing overhead and therefore print processing speed may be reduced in comparison to processing paths that do not require conversion.

As described when data format conversion is performed problems arise in all of the aspects of quality function and speed. Therefore it is desirable to avoid print processing paths that involve data format conversion.

On the other hand when both an XPS printer driver and a GDI printer driver for the same print apparatus are installed in a computer the selection of the printer driver to be used is left to the user s discretion. In other words in Windows registered trademark Vista the graphics engines will not automatically select processing paths that do not require data format conversion. Furthermore most users are not conscious of whether a certain application is a Win32 application or a WinFx application and are unaware that four print processing flows exist. Therefore when one printer driver is selected as a default printer driver the selected printer driver will be used regardless of application type. As described in print processing paths avoiding data format conversion such as GDI XPS conversion or XPS GDI conversion may prove difficult.

The present invention has been made in consideration of the above conventional examples and an object thereof is to solve the problems described above. In addition another object of the present invention is to provide in the event that a plurality of printer drivers are available for a printer an information processing apparatus capable of performing print processing using a printer driver corresponding to a graphics engine used by an application regardless of which printer driver is selected and a method for changing printer drivers at the information processing apparatus.

In order to achieve the above described objects the present invention is configured as follows. In other words an information processing apparatus in which a first graphics processing unit that converts graphics data output from a first type application into first print information that is processible by a first type printer driver and a second graphics processing unit that converts graphics data output from a second type application into second print information that is processible by a second type printer driver are operational the information processing apparatus comprising 

a determination unit adapted to determine based on a type of a destination printer driver and a type of a source application whether a combination of the source application and the destination printer driver is a combination of the first type application and the first type printer driver or a combination of the second type application and the second type printer driver and

a changing unit adapted to change the destination printer driver used by the source application to a printer driver that satisfies the combinations in the event that said determination unit determines that the source application and the destination printer driver are neither of the combinations.

From a different point of view the present invention is an information processing apparatus in which a first graphics processing unit that converts graphics data output from a first type application into first print information that is processible by a first type printer driver and a second graphics processing unit that converts graphics data output from a second type application into second print information that is processible by a second type printer driver operate under the management of an operating system and

the operating system references a printer driver properties to convert if necessary the graphics data into print information processible by a printer driver of a type that corresponds to the referenced properties the information processing apparatus comprising 

a determination unit adapted to determine based on a type of a destination printer driver and a type of a source application whether a combination of the source application and the destination printer driver is a combination of the first type application and the first type printer driver or a combination of the second type application and the second type printer driver and

a changing unit adapted to change the a printer driver properties referenced by the operating system to properties value that satisfies the combinations in the event that the determination unit determines that the source application and the destination printer driver are neither of the combinations.

According to the above described configurations in the event that a plurality of printer drivers are available for a printer printing may be performed using a printer driver corresponding to a graphics engine used by an application regardless of which printer driver is selected.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings .

An embodiment of a print control apparatus according to the present invention will now be described. The print control apparatus is realized by a computer information processing apparatus . An example of a software configuration of the computer will now be described. The hardware configuration of the computer is similar to that of a general purpose computer and includes a CPU a memory a user interface device keyboard display or the like and a file storage device or the like.

In this specification the print processing flow from the Win32 application via the GDI to the GDI printer driver by which print data is created shall be referred to as a GDI print path. Additionally the print processing flow from the WinFx application via the WPF to the XPS printer driver by which print data is created shall be referred to as an XPS print path. Furthermore the GDI print path and the XPS print path shall be referred to as straight print paths. However print processing flows are not limited to the GDI print path and the XPS print path and a print processing flow exists from the Win32 application via the GDI to the XPS printer driver at which print data is created. In addition there is also a print processing flow from the WinFx application via the WPF to the GDI printer driver at which print data is created. These paths are realized by data format conversion performed by a GDI XPS conversion unit and an XPS GDI conversion unit . Print paths in which the graphics engines convert data into each other s data format shall be referred to as crossed print paths.

An application and a printer driver forming respective ends of a print path are referred to as a source application and a destination printer driver respectively.

A print processing flow will be described with reference to . shows a mechanism of coexistence of two graphics engines in Windows registered trademark Vista. Four types of print processing paths exist in Windows registered trademark Vista namely paths and .

The print processing path represents a GDI print path. Graphics data handed over from the Win32 application is stored by the GDI in EMF Enhanced Metafile format as an EMS spool file. Conversion to print data is subsequently performed by the GDI printer driver .

The print processing path represents an XPS print path that is added in Windows registered trademark Vista. Graphics data handed over from the WinFx application is stored by the WPF in an XPS spool file and subsequently converted into print data by the XPS printer driver .

The print processing path represents a print processing path in a case where data from the WinFx application is printed by the GDI printer driver . Graphics data handed over from the WinFx application is converted into EMF format graphics data at the XPS GDI conversion module via the WPF . The converted graphics data is stored in an EMF spool file and subsequently converted into print data by the GDI driver .

The print processing path represents a print processing path in a case where data from the Win32 application is printed by the XPS printer driver . Graphics data handed over from the Win32 application is converted into XPS format graphics data at the GDI XPS conversion module via the GDI . The converted graphics data is stored in an XPS spool file and subsequently converted into print data by the XPS printer driver .

In a host computer is provided with a CPU that performs processing of documents containing a mixture of diagrams images texts tables such as spreadsheets and the like based on a document processing program and the like stored in a program ROM of a ROM or an external memory . The CPU performs overall control of respective devices connected to a system bus .

The program ROM of the ROM or the external memory also stores an operating system program hereinafter abbreviated as OS or the like that is a control program of the CPU . A font ROM of the ROM or the external memory stores font data and the like used during the above mentioned document processing while a data ROM of the ROM or the external memory stores various data used during the above mentioned document processing.

A RAM functions as a main memory a work area and the like for the CPU . A keyboard controller KBC controls key input from a keyboard or input from a pointing device not shown. A CRT controller CRTC controls display of a CRT display CRT . A disk controller DKC controls access to the external memory that is a hard disk HD a flexible disk FD or the like. The external memory stores boot programs various applications font data user files editing files printer control command generation programs hereinafter referred to as printer drivers and the like. The printer drivers according to the present invention are also stored in the external memory .

A printer controller PRTC is connected to the printer via a predetermined bidirectional interface and performs control processing of communication with the printer . The CPU enables WYSIWYG on the CRT by for instance performing deployment rasterization processing of outline fonts on a display information RAM configured on the RAM .

In addition the CPU opens various registered windows based on commands instructed through a mouse cursor and the like not shown on the CRT and executes various data processing. When performing printing a user may open a window related to print settings to configure printer settings or settings of a print processing method including print mode selection for a printer driver.

At the printer a printer CPU outputs an image signal as output information to a printing unit printer engine connected to a system bus based on a control program or the like stored in a program ROM of a ROM or a control program or the like stored in an external memory .

In addition the program ROM of the ROM also stores a control program or the like for the CPU . A font ROM of the ROM stores font data and the like that is used when generating the above mentioned output information while a data ROM of the ROM stores information and the like used on the host computer in the event that the printer is not equipped with an external memory such as a hard disk.

The CPU is arranged so that processing of communication with the host computer is enabled via an input unit and information and the like within the printer is notifiable to the host computer . A RAM functions as a main memory a work area and the like for the CPU . The RAM is configured so that memory expansion may be performed by means of an optional RAM connected to an expansion port not shown. The RAM is used as an output information deployment area an environmental data storage area and an NVRAM or the like. Access to the above mentioned external memory that is a hard disk HD an IC card or the like is controlled by a memory controller MC .

The external memory is optionally connected to store font data emulation programs form data and the like. In addition switches for operations LED display devices and the like are arranged on an operating panel . Furthermore the above mentioned external memory need not be limited to one. Alternatively one or more external memories may be provided so that in addition to internal fonts pluralities of optional font cards and external memories storing programs that interpret printer control languages of different language systems may be connected. Moreover a NVRAM not shown may be provided to store printer mode setting information from an operating panel .

The GDI printer driver is composed of a GDI UI or user interface driver and a GDI graphics driver . The GDI user interface driver stores contents displayed on a user interface of the printer driver and print setting information input by the user into a registry. The GDI graphics driver receives corresponding graphics data DDI Device Driver Interface functions from a graphics engine and creates print data from the graphics data according to print setting information stored in the GDI user interface driver .

The XPS printer driver is composed of an XPS user interface driver and an XPS graphics driver . The XPS user interface driver stores contents displayed on a user interface of the printer driver and print setting information inputted by the user into a registry. The XPS graphics driver receives corresponding graphics data XPS data from the graphics engine and creates print data from the graphics data according to print setting information stored in the XPS user interface driver .

While the GDI user interface driver and the XPS user interface driver are described as being separate components a single common user interface driver equipped with functions and interfaces of both user interface drivers may alternatively be used. In this case the GDI printer driver will be composed of the common user interface driver and the GDI graphics driver while the XPS printer driver will be composed of the common user interface driver and the XPS graphics driver .

As shown in the user interface drivers according to the present embodiment receive initialization instructions from the applications or the graphics engines . In response thereto the user interface drivers acquire information on whether the application calling the user interface driver is the Win32 application or the WinFx application through an application information obtainment unit .

The user interface drivers according to the present embodiment receive initialization instructions from the applications or the graphics engines . In response thereto the user interface drivers acquire a name of an application that is calling the user interface driver using the application information obtainment unit . In addition the user interface drivers also acquire information i.e. application type information on whether the application is the Win32 application or the WinFx application . In the present embodiment a process name executable file name calling the user interface driver may be acquired by using a GetModuleFileName function or the like provided by the Win32 API. Additionally determination of whether the application calling the user interface driver is the Win32 application or the WinFx application may be performed as follows. More specifically a DLL Dynamic Link Library which is imported by an executable file of which the name was acquired by the above mentioned function is acquired from a header portion retained by the executable file. Then a determination is made on whether a module unique to the WinFx application exists within the imported DLL. For instance the module may be determined to be a WinFx unique module by tabulating and storing WinFx unique module names in advance and when a search performed on module names acquired from the table results in a hit.

Determination of whether an application is the Win32 application or the WinFx application is performed in this manner. In addition to the above for instance if the OS provides an API that conveys application types application type information may be acquired using the API. Alternatively a method may be adopted in which a user interface driver stores an application table storing application names or type information indicating whether an application is a Win32 application or a WinFx application in association with process names executable file names . For the purpose of maintenance of the application table this method is desirably arranged so that a maintenance user interface is displayed and the application table may be updated through user input. The user interface driver uses a GetModuleFileName function and the like to acquire a name of a process calling the user interface driver and uses the process name to search the application table. A hit will mean that the application name corresponding to the relevant process name is the name of the application that called the user interface driver. In addition the application type corresponding to the relevant process name is the type of the application that called the user interface driver.

Application types may also be determined using a method such as that described below. A Win32 application attempts to acquire print setting information from the user interface driver in a format called DEVMODE. On the other hand a WinFx application attempts to acquire print setting information from the user interface driver in a format called Print Ticket. The user interface driver is capable of creating print setting information in either format. Thus an application type may be determined based on such an acquisition request.

Next a determination is made by a combination determination unit on whether the combination of the application and the user interface driver called by the application is appropriate. The criteria used for this determination is shown in . An appropriate result means that the graphics engine and the printer driver to be used by the application are consistent. In other words in this case there is no need to perform conversion for instance EMF XPS conversion on the format of the graphics data output from the graphics engine. Graphics engines to be used by applications are fixed according to application type. Therefore a determination may be performed on whether a combination is appropriate if application type information and the printer driver selected by the application are known. Application types may be acquired in the manner described earlier. If information regarding a selection of a printer driver is stored on the computer the selected printer driver may be identified by referencing such information. In addition if information an identifier or the like of a printer driver to be used is handed over from the application that performs printing to the graphics engine and is referenceable by the user interface driver the printer driver may be identified by referencing such information. Then if an identifier of a printer driver may be referenced the printer driver type whether the printer driver is an XPS printer driver or a GDI printer driver may be determined. For instance by creating and storing in advance a table that associates names of printer drivers with type information thereof a printer driver type may be determined by referencing the table. Incidentally an appropriate combination may also be expressed as a combination of an application and a printer driver of the same type. Since the graphics engines also need to determine whether the types are the same in order to determine whether data format conversion is required the same determination criteria may be adopted.

In the event that the combination determination unit determines that the combination is inappropriate an initialization instruction unit issues an initialization instruction to an appropriate user interface driver configuring a straight path. An appropriate user interface driver is included in a printer driver corresponding to the same destination printer of a printer driver initially selected by the user and at the same time is included in a printer driver that forms a straight path together with a graphics engine corresponding to the application. It is assumed that the GDI printer driver has information indicating whether an XPS printer driver that shares the same destination printer is installed in the information processing apparatus. Similarly it is assumed that the XPS printer driver has information indicating whether a GDI printer driver that shares the same destination printer is installed in the information processing apparatus. In addition if the user interface driver is a common user interface driver the user interface driver obviously has information indicating whether a GDI graphics driver and or an XPS graphics driver exist. This description assumes that the GDI user interface driver and the XPS user interface driver are configured as separate user interface driver modules.

Subsequently a driver handle is received from the user interface driver that performed initialization processing in response to the initialization instruction. The driver handle from the user interface driver is received by a driver handle return unit . The driver handle return unit transmits hands over the received driver handle to the application or the graphics engines from which the initialization instruction was issued to the user interface driver.

In the present embodiment two drivers exist for each printer. Therefore if one of the drivers is determined to be inappropriate the other driver is selected as an appropriate driver. It is needless to say that an appropriate user interface driver may be selected using a table for example shown in which will be described later. In addition initialization processing includes for instance memory allocation driver handle response and the like. A driver handle is an identifier used to uniquely identify a driver. The handle enables identification of user interface drivers and printer drivers.

Meanwhile in the event that the combination determination unit determines that a combination is appropriate a driver initialization unit performs initialization of a user interface driver as is. The driver handle generated through initialization processing is returned by the driver handle return unit to the application or the graphics driver that issued the initialization instruction.

The application or the graphics engine that receives the driver handle from the user interface driver activates a user interface driver that is identified by the driver handle that was handed over and allows the user to input print settings. In addition since the application or the graphics engine that receives the driver handle from the user interface driver outputs graphics data to the printer driver identified by the driver handle that was handed over an appropriate printer driver that forms a straight print path performs print data conversion or in other words creates a print job. As seen by having a user interface driver that receives an activation request hand over a driver handle that is appropriate for an application by which printing is to be performed print processing capable of producing high quality results may be performed in a speedy manner.

Incidentally there may be cases in which a user interface display instruction is handed over to the user interface driver together with the initialization instruction of the driver to allow the user to perform print settings. In such a case if the combination of the application and the printer driver is determined to be appropriate by the combination determination unit a user interface dialog is displayed on a user interface display unit . The user changes print settings at a user interface setting unit via the displayed UI. On the other hand if the combination is determined to be inappropriate by the combination determination unit the initialization instruction unit issues a user interface display instruction in addition to a driver initialization instruction to an appropriate driver. In this manner the user may change print settings using an appropriate driver.

Similarly a selection of the XPS printer driver when printing from the WinFx application will result in a determination of appropriate . This is due to the fact that the WPF graphics engine is used during printing by the WinFx application and the XPS printer driver performs print processing as a straight print path using the XPS graphics driver . In addition a selection of the GDI user interface driver when printing from the WinFx application will result in a determination of inappropriate . This is due to the fact that the WPF graphics engine is used during printing by the WinFx application XPS GDI conversion is performed and the GDI printer driver performs print processing as a crossed print path using the GDI graphics driver . Therefore values according to determination results are registered for corresponding items.

By inscribing corresponding driver handles in the fields of the printer drivers in the table shown in a driver handle appropriate for an application may be acquired from the table of .

Meanwhile in the user interface driver receives an initialization instruction and a user interface display instruction . In step the combination determination unit determines whether the user interface driver is appropriate for the issuing source application of the initialization instruction. shows that the driver is determined to be appropriate. In this case the user interface driver receiving the initialization instruction performs initialization processing of a corresponding graphics driver in step and returns the driver handle in step to the issuing source of the initialization instruction or in other words the application. The application performs print processing using a printer driver corresponding to the driver handle. In this manner printing may be performed by an appropriate graphics driver while avoiding so called cross flows such as the processing path or the processing path .

Firstly in step the user interface driver receives an initialization instruction. The user interface driver acquires a name of the application executable file name that called the user interface driver. Based on the acquired name the user interface driver acquires information type information indicating type of application or more specifically indicating whether the calling application is a Win32 application or a WinFx application in step . This processing is as described with reference to . Based on the acquired application type information the user interface driver determines in step whether the printer driver including the user interface driver is appropriate for the application. This determination is performed for instance using the table shown in . If determined to be inappropriate the user interface driver issues an initialization instruction to an appropriate driver in step . Then in step a driver handle returned from the appropriate driver is received and in turn returned to the application by the user interface driver.

In step when it is determined that the printer is appropriate for the calling source application the user interface driver initializes its own driver in step and returns a driver handle created during the initialization to the application.

A printer driver that receives an initialization instruction from another printer driver also operates according to the procedure shown in . Since there are two types of printer drivers in the present embodiment the result of the determination in step in the procedure shown in will always be appropriate for a user interface driver that receives an initialization instruction from another user interface driver. Additionally in this case the return destination of the driver handle will be the user interface driver that is the transmission source of the initialization instruction.

The application or the graphics engine that receives the driver handle from the user interface driver creates print data using the printer driver graphics driver identified by the driver handle and transmits the print data to the printer. The printer driver hands over graphics data output from the graphics engine to the printer driver for conversion into print data of a predetermined format that is described in PDL XML or the like which can be interpreted by a print apparatus.

As a result of the above described processing an application can perform actual printing using an appropriate graphics driver. In other words data output by the graphics engine no longer must be converted into data of a format that is processible by a printer driver. Thus in the event that a plurality of printer drivers are available for a printer printing may be performed using a printer driver corresponding to a graphics engine used by an application regardless of which printer driver is selected. As a result printing speed may be improved information loss attributable to data conversion may be prevented and print quality may be enhanced.

The first embodiment is a printing system in which initialization of a printer driver is performed at the same time a user interface display for print setting is performed from an application. However this does not necessarily apply to all printing systems. Depending on the specification of an OS cases may be envisaged in which initialization processing of a printer driver is not performed upon performing user interface display for configuring print settings and the like for a user interface driver. An initialization instruction is issued to a graphics driver of a printer driver upon actually performing print processing. In such a printing system since an initialization instruction is not issued to a user interface driver a driver used by an application may not be switched even when the user interface driver performs the processing shown in of the first embodiment. In this light the present invention is arranged so that in response to a user interface display instruction the user interface driver performs processing for switching to an appropriate driver. System configuration other than the items described below are shared with the first embodiment and therefore a description thereof will be omitted.

Similar to the first embodiment a GDI graphics driver and an XPS graphics driver according to the second embodiment do not perform any special processing and merely operate as general graphics drivers. On the other hand a GDI user interface driver and an XPS user interface driver or a common user interface driver hereinafter collectively referred to as user interface driver perform processing characteristic of the second embodiment.

Upon receiving a setting change instruction from applications or graphics engines the user interface driver according the second embodiment performs user interface display at a user interface display unit . A user interface setting unit stores print settings inputted by a user. In response thereto an application information obtainment unit acquires information on whether the application calling the user interface driver are Win32 applications or WinFx applications . The determination processing performed by the application information obtainment unit and a combination determination unit is the same as that performed in the first embodiment.

When the combination determination unit determines that the combination is inappropriate the driver name changing unit of the user interface driver hands over a name of an appropriate driver to the application. More specifically in the present embodiment this is performed using print setting information DEVMODE for a GDI user interface driver Print Ticket for an XPS user interface driver handed over to the application from the user interface driver. In other words the driver name changing unit stores a name of a driver appropriate for the print setting information and the print setting information is handed over to the application by the driver name return unit .

The application acquires a driver name from the print setting information that was handed over. The application then performs printing using a printer driver having the driver name. This allows the processing paths or to be avoided.

On the other hand when the combination determination unit determines that the combination is appropriate no particular operations are performed and the user interface driver that received the user interface display instruction hands over the print setting information to the application without changing the driver name already stored in the print setting information.

The user interface driver receives the user interface display instruction in step performs user interface dialog display in step to accept input for changing print settings from the user. Then in step the user interface driver stores print setting values input by the user into print setting information.

The user interface driver next acquires a name of the application executable file name that called the user interface driver. Based on the name in step the user interface driver acquires type information indicating whether the calling application is a Win32 application or a WinFx application. This processing is similar to that performed in the first embodiment. Based on the acquired application type information the user interface driver determines in step whether the printer driver including the user interface driver is appropriate for the application. If determined to be inappropriate a driver name item in the print setting information is changed to an appropriate driver name in step . In step print setting information including the changed driver name is returned to the application.

When determined to be appropriate in step the user interface driver in step returns the print setting information created in step as is to the application.

An appropriate driver name may be obtained by for instance additionally associating and registering the driver name to the field to which a printer driver type was registered in the table shown in . For example a driver name defined as being appropriate with respect to the acquired application type is searched. An obtained driver name is a name of a driver that is appropriate for that application. The driver name in the print setting information is substituted with the obtained driver name. The application issues a print initialization instruction to a printer driver having the driver name in the print setting information and uses that printer driver to perform print processing. As a result the print processing paths or may be avoided.

In this manner the present embodiment enables switching of a driver to be used by an application to an appropriate driver even when the application does not issue an initialization instruction to a user interface driver. Therefore data output by the graphics engine no longer must be converted into data of a format that is processible by a printer driver. As a result printing speed may be improved information loss attributable to data conversion may be prevented and print quality may be enhanced.

In the second embodiment drivers may be changed in cases in which an application performs print initialization or print processing based on a driver name contained in print setting information that had been changed by a user interface driver. However there are cases in which for instance the application stores the name of a driver used when calling a user interface driver into a local area and a driver of the stored driver name is also used during print processing. In such cases the user interface driver is incapable of changing the driver used by the application.

In consideration of the above the third embodiment has been arranged so that as shown in a graphics driver is able to receive both print data from GDI and print data from WPF via a GDI interface and an XPS interface. Therefore only one user interface driver is provided which is activated when either interface is used. Then a change is made to driver properties type information indicating either a GDI driver or an XPS driver identified by an OS. In other words driver properties of a printer driver that is selected as a driver to be used by the application is stored so as to be accessible from the operating system. Based on the driver properties information determination is made on whether the format of data output from the graphics engine requires conversion.

As seen in the present embodiment information registry availability of files and the like identified by the OS is acquired and if appropriate processing by the user interface driver is performed without modification while if inappropriate information of the OS indicating driver properties is changed. Therefore data output by the graphics engine no longer must be converted into data of a format that is processible by a printer driver. As a result printing speed may be improved information loss attributable to data conversion may be prevented and print quality may be enhanced.

In addition the present invention may be applied to a system comprising a plurality of devices for example a host computer an interface device a reader or a printer or apparatuses composed of a single device for example a copying machine or facsimile machine . Furthermore the object of the present invention may also be achieved by supplying a storage media that stores a program code capable of realizing the functions of the above described embodiments to a system or an apparatus and having a computer of the system or apparatus read out and execute the program stored in the storage media. In this case the program code itself that is read out from the storage media achieves the functions of the above mentioned embodiments while the program code itself and the storage media storing the program code will compose the present invention.

Moreover the present invention includes configurations in which the function of the aforementioned embodiments are achieved through processing performed by an operating system OS or the like which is running on a computer that performs a portion or all of the actual processing based on instructions from the program code. In addition the present invention also applies to cases in which a program code read out from a storage media is written onto a function enhancement card inserted into a computer or a memory built into a function enhancement unit connected to a computer. In such cases the functions of the aforementioned embodiments may also be achieved by having a CPU or the like built into the function enhancement card or the function enhancement unit perform a portion or all of the actual processing based on instructions from the program code.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2006 075551 filed Mar. 17 2006 which is hereby incorporated by reference herein in its entirety.

