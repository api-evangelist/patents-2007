---

title: Software execution with minimal impact deployment
abstract: Software execution with minimal impact deployment allows software to be executed on a system without first running a conventional installation process. Techniques are used to avoid any requirement of writing settings to restricted areas of operating system maintained data stores.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185888&OS=08185888&RS=08185888
owner: Microsoft Corporation
number: 08185888
owner_city: Redmond
owner_country: US
publication_date: 20070605
---
Software applications often require the use of resources such as operating system files files shared with other applications hardware devices etc. The location of these files and devices may vary from system to system and as a result installation programs for software often determine and store settings indicating the locations of the resources at the time of installation. Installation programs may also save other settings.

These settings are often kept in restricted access data stores maintained by an operating system. To add or modify settings in these areas often requires elevated or administrative security rights. Performing normal operations with elevated or administrative rights may lead to security risks including increased exposure to viruses Trojan horses and other malicious software. As a result some organizations do not provide users with elevated or administrative rights. It may be necessary for a user to either log in with elevated security rights or to have an administrator log in to enable the software installation to complete.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

In accordance with one implementation presented herein a software application or original software is processed. If the original software has dependencies on resources included with the original software the resources are copied to a common location which may be one or more directories in a file system one or more files a device such as a flash drive or any other location or locations capable of storing the resources. References to those resources in the original software are updated to reference the common location. The resulting prepared software can be run on another device a target computer without requiring an installation process and without making permanent changes to the target computer s restricted access data store.

The detailed description provided below in connection with the appended drawings is intended as a description of example implementations and is not intended to represent the only forms in which software execution with minimal impact deployment may be constructed or utilized. The description sets forth the functions of example implementations and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by alternate implementations.

Described herein are among other things examples of various technologies and techniques that allow software execution with minimal impact deployment. Although the examples are described and illustrated herein as being implemented in a personal computer system the system described is provided as an example and not a limitation. As those skilled in the art will appreciate the present examples are suitable for application in a variety of different types of systems.

In some implementations original software is first preprocessed to create what will be referenced herein as prepared software. First the original software is installed on a host computer. The original software is then executed and user settings or other configuration information is saved to a configuration file. Files that make up the original software associated data files and configuration files are then analyzed for dependency information and copied to a common location. The dependency information is then used to determine if additional files should be copied to the common location. References to components or data store entries that are hard coded in the original software are then replaced or tokenized with abstract place holders or tokens in the prepared software.

Once the original software has been preprocessed the prepared software may be made accessible by copying or sharing the files for example from the common location to a target computer where the prepared software may be executed without being installed. At runtime the tokens that replaced hard coded references to components or data store entries are replaced with values appropriate for the target computer allowing the prepared software to execute properly.

Host computer includes software preparation module . Software preparation module may perform a process similar to that shown in which prepares software to execute with minimal impact deployment. Generally software preparation module will process original software to produce prepared software which may be executed on a target computer without the prepared software requiring installation on the target computer. By way of example and not limitation software preparation module may parse or read files which make up the original software and determine what other files system settings or other information the software requires to execute properly. Software preparation module may then copy all of the required files system settings and information to a common location which may be on a hard drive not shown on host computer . Software preparation module may then update any references in the copy of the software to reference the copies of the required files system settings and other information in the common location. The resulting prepared software may include executable files shared files data files data store entries configuration files and other files.

In this example host computer has original software installed. Original software in this example includes original executable files original shared files original data store entries original configuration files original data files and original other files . Original software is processed by software preparation module which outputs prepared software . In this example prepared software includes prepared executable files prepared shared files prepared data store entries prepared configuration files prepared data files and prepared other files .

The prepared software may be executed on a target computer that has access to the common location or a copy of the common location. In one implementation target computer includes hard drive and is coupled to host computer via a network . Target computer may copy the prepared software files over network to hard drive . Once the prepared software is copied to hard drive it may be executed. In an alternate implementation target computer may execute prepared software that has been made available or shared on host computer without copying the prepared software to hard drive . Network may include a wired connection wireless nodes routers hubs and any number of other network devices as well as other computers. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

In another example implementation prepared software prepared by host computer are copied to removable storage media . Removable storage media is then coupled to target computer to allow the prepared software to be executed without first being installed. Removable storage media include media implemented in any method or technology. Removable storage media includes but is not limited to flash memory such as flash drives or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices.

Mass storage contains a common location . Common location contains prepared executable files prepared shared files prepared configuration files prepared data files and prepared other files . Prepared executable files may include but are not limited to executable files dll s or the like included with the prepared software. Prepared shared files may include but are not limited to dll s that were included with the operating system or any other files the prepared software may require to provide functionality. Prepared configuration files may include configuration information used by the prepared software to determine which directory to use for data files which default font to use in an editor or any other settings that may be saved and used by the software. Common location may include one or more directories within a conventional file system may be implemented as a file within a conventional file system or may be implemented using any technology or combination or technologies providing similar functionality.

Data store contains prepared data store entries which may be stored or retrieved by the prepared software . Prepared data store entries may include configuration information such as location or version information for the files that make up the prepared software. In an alternate implementation configuration information may be stored in configuration file and a data store may not be used. In another implementation the prepared data store entries may also include configuration information and there may not be any configuration files . In yet another implementation the configuration information may be split between data store and configuration file .

Data store may be implemented in many different ways. In at least one implementation data store is provided and maintained by an operating system with application programming interfaces available to write or read data stored therein. In another implementation the prepared software creates and maintains a data store. Data store may be made up of several files databases or other forms of data stores and combinations thereof. Any technique for storing and retrieving configuration information may be used for data store . Data store may be stored on mass storage in memory such as RAM or may be stored and maintained in any manner providing similar functionality. In at least one implementation data store will have some areas that require elevated or administrative rights to update while other areas will not require elevated rights to update.

To create prepared software the original software is first installed. is a flow chart showing an example original software installation process. In this example a conventional installation program is executed . The installation program then copies executable files and data files for the original software to a common location.

Some files such as dll s may be installed in a shared directory so that other software may use the same copy. If the original software being installed includes a different version of a shared dll than the version currently in the shared directory the shared dll is updated . Configuration files are updated and any other files that may be associated with the original software are copied . A data store is then updated . This data store update may include such information as which directory the executable files and data files have been installed in what dynamic link libraries dlls or other dependencies the software may have what functions the software exposes to other applications or any other configuration information. This configuration information may also be stored in one or more configuration files instead of or in addition to the data store or may be split between both one or more configuration files and the data store. Once any updates to the data store are complete the installation is finished .

After the installation is finished the software is executed and any additional configuration information is saved. Additional configuration information may include a default font or a default author s name for a word processor for example. Configuration information may be saved in a data store in one or more files in the common location a combination of data stores and files or the like.

The software may have associated therewith one or more files such as executable files dynamic link libraries dll s data files or the like. An operational loop is executed for each of the software files.

A file for the original software is copied to the common location. The file is then examined to determine if there is a dependency on another file a dependent file such as a dll a runtime library file or any other component file. If there is a dependency the file on which there is a dependency is tokenized and copied to the common location. If any of these dependencies refer to absolute paths in a data store the paths are tokenized. As an example a path originally set to a MICROSOFT WINDOWS registry entry of HKEY LOCAL MACHINE Software SomeValue may be replaced with ZeroSetupRoot Software SomeValue. Determining and tokenizing and copying are repeated until all file dependencies are copied locally. Determining may be performed by parsing text comparing binary data with a known set of binary data or any other process for pattern matching or by reading data at a known offset within a file. The data used by determining may be contained within a file which has the dependency within a file associated with the file that has the dependency or within any other file associated with the original software.

A determination is made as to whether there are files included in the original software or in the dependent files that have not yet been processed. If so operational loop is repeated for all unprocessed files. When it is determined that there are no unprocessed files the processing finishes .

While this example shows processing for all files included with the original software alternate implementations may allow selectively including or excluding files to be processed.

The configuration file created in step of is read and tokens in it if any are updated to reflect a current location of prepared software. The updated values are saved in a section of a data store for which elevated or administrative rights are not required. Continuing with the MICROSOFT WINDOWS example above a value of ZeroSetupRoot Software SomeValue in the tokenized data may be added as HK CURRENT USER Software SomeValue in the data store assuming the HK CURRENT USER hive does not require elevated or administrative permission. In at least one alternate embodiment the updated values are saved to a file rather than to the data store. In other embodiments the updated values may be saved to a database while in yet another embodiment the updated values may be saved through the use of a web service. One skilled in the art will appreciate that alternate methods and locations could be used to saving the updated values.

Once the data store is updated redirection hooks for calls to the data store are set up . Any calls to restricted areas of the data store will be processed by the redirection hooks with no changes to the calls in the original software which continues executing normally. The redirection hooks may be created during execution by trapping calls to particular application programming interfaces. For example any call to read from one area of a data store may be intercepted and replaced with a call to read from a different area in the data store. Alternatively the original software s executable code may be modified with calls for reading configuration information from one area replaced with calls to get the configuration information from a different area.

The application may terminate for a number of reasons. For example a user may terminate it the application may run until completion or a system shutdown request may terminate the application. Any number of other conditions known in the art may cause the application to terminate. Once it is determined that the application has terminated changes that were made to the operating environment such as updates to the data store are undone by removing any entries that had been placed in the data store while executing the target software. The process is then finished .

In at least one alternate implementation some values may be persisted in the data store. In another implementation software may be slightly modified to prepare for software execution with minimal impact deployment by adding programming instructions to allow for easier hooking of the data store calls.

While has been described using the prepared software from the process of one skilled in the art will appreciate that other processes may have been used to prepare the software.

Although not required embodiments of the invention will be described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

