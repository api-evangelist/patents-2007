---

title: Interface module
abstract: An interface module for a telecommunications network service entity, the interface module being operable to communicate with an application provided on the telecommunications network service entity and a session layer of the telecommunications network service entity, the interface module comprising a generic container to communicate with the application and a protocol connector operable to communicate with an API of the session layer and the generic container, wherein the protocol connector is operable to receive a message from the protocol stack API in accordance with a corresponding protocol, and pass the message to the generic container, which passes the message to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327389&OS=08327389&RS=08327389
owner: Hewlett-Packard Development Company, L.P.
number: 08327389
owner_city: Houston
owner_country: US
publication_date: 20070710
---
The present application claims priority to PCT application number PCT EP2007 057059 having an international filing date of Jul. 10 2007 which claims priority to EP patent application serial number 06300841.1 filed Jul. 31 2006 both of which are incorporated by reference in their entireties.

This invention relates to an interface module particularly but not exclusively for supporting services on a telecommunication network service entity.

The provision of a service execution platform for providing multi media and IP based services requires the control of network resources through a number of complex protocols. The protocols can include legacy protocols based on SS7 and other SIGTRAN protocols and also IP based protocols such as HTTP SIP Radius Diameter MSRP MRCP RTSP and so on. Application servers such as HttpServlet SIP Servlet and so on provide an environment for applications which use a particular protocol but it is difficult to adapt such servers to new protocols.

To provide for portable service applications it is known to provide a further API which can sit on top of a protocol stack to provide a network layer independent API but again such API s are proliferating such as the JAIN family of protocol API s. The growing numbers of possible interfaces and protocols can hinder the development and provision of new services and protocols.

According to a first aspect of the invention we provide an interface module for a telecommunications network service entity the interface module being operable to communicate with an application provided on the telecommunications network service entity and a protocol stack of the telecommunications network service entity the interface module comprising a generic container to communicate with the application and a protocol connector operable to communicate with an API of the protocol stack and with the generic container wherein the protocol connector may be operable to receive a message from the protocol stack API in accordance with a corresponding protocol and pass the message to the generic container which passes the message to the application.

The protocol connector may be operable to act as a listener to receive the message from the protocol stack API.

The generic container may be operable to deploy one of a plurality of protocol connectors corresponding to the required protocol stack.

The generic container receives protocol information from the protocol connector when the protocol connector may be deployed.

The generic container may be operable to permit deployment of the application when the protocol connector confirms that the required protocol resources are available.

Referring to an appropriate computer system for providing a plurality of services hereinafter referred to as a telecommunication network service entity is shown generally at . Starting at the top a service layer is generally shown at . The service layer includes all the programs or service applications which provide services running on the platform including interpreters and service wrappers where appropriate. The service layer overlies a communication layer which gives access to network media and system resources and this includes a plurality of protocol stacks generally shown at . At a hardware layer is shown including the physical components necessary to provide data connection channels and signalling channels generally to establish and receive calls over a telecommunication network. Each protocol stack is provided with an appropriate interface in the form of an application programming interface API . The API provides a set of functions which may be called by a service application and through which the protocol stack may be accessed.

An application to provide a service is shown at running in the service layer . To provide for inter operability between the application and a protocol stack an interface module comprising a generic container and a protocol connector is provided between the application and the protocol stack API as will be discussed in more detail below. The protocol corrector communicates with the protocol stack API . The generic container provides a generic container application programming interface which communicates with the application and a service provider interface which communicates with the protocol corrector .

To provide communication with different protocol stacks with varying APIs the interface module is provided with access to one or more protocol connector files generally shown at . Each of the protocol connector files comprises an archive file requiring the necessary information to instantiate a protocol resource particularly a desired protocol stack and provide the necessary information to the generic container to facilitate deployment of the stack. As illustrated in a protocol connector file comprises a connector deployment descriptor which defines the major information required by the protocol connector such as the root classes the factory classes and other information as desired. At the protocol connector bytecode is shown and at step the protocol specific rules required for the generic container . The protocol specific rules enable the generic container to interact with the application through the generic container in an appropriate manner connected with the protocol and perform protocol specific actions as needed. Although shows the protocol connector file as being associated with interface module the protocol connector could instead packaged the corresponding protocol stack.

When it is desired to provide a new protocol stack for a new application the interface module is operable as shown in . At step the generic container reads the archive corresponding to the protocol connector for example by unzipping a zip file containing the archive or otherwise. At step the general container reads the connector deployment descriptor and at step loads the byte code for the protocol connector . At step the generic container reads the protocol specific rules description and at step instructs the protocol connector to instantiate the required protocol resources. The protocol connector instantiates the resources as shown at step and at step reports to the generic container the list of protocol resources it has instantiated for example one or more protocol stacks and provides a unique identifier for each resource. At step the generic container receives confirmation of the instantiated protocol resources and providing the application can be provided with the necessary protocol resources loads the application at step . When a connector protocol stack is deployed by the generic container it registers to the container and provides a factory A factory is a mechanism that can be invoked to instantiate the objects of the connector and protocol stack even though the container has no knowledge of the classes provided by the connector stack. This permits the container to remain protocol agnostic.

As shown in the protocol connector appears as a listener to the API and so when there is a signalling event the event is duly received via the protocol connector as shown at step . At step the protocol connector packages the protocol specific message in a generic format and sends the event to the generic container SPI . The generic container then processes the message at step and forwards the messages or events to the application in a protocol agnostic manner through the generic container API at step . The generic container cannot process protocol specific events so by encapsulating events in a generic manner the events can be passed to the application without requiring any protocol specific action from the generic container .

Accordingly it will be apparent that the interface module as described herein provides complete independence between the generic container the application and the protocol stacks used by the application . The protocol stacks the interface module and the application can be packaged and deployed separately. The generic container is run first the appropriate protocol connector is instantiated the appropriate protocol resources are activated and the application is then only deployed when all the protocol resources which it requires is available. The generic container is completely protocol independent and all the protocol specific information required is packaged in the protocol specific rules description in the archive. Consequently a new protocol stack may be provided simply by providing an appropriate archive without needing to modify the generic container. Accordingly it will be apparent that new protocols may be provided and new applications provided in the application layer without needing to perform recompilation or reinstallation of the platform or the applications.

In the present specification comprise means includes or consists of and comprising means including or consisting of .

The features disclosed in the foregoing description or the following claims or the accompanying drawings expressed in their specific forms or in terms of a means for performing the disclosed function or a method or process for attaining the disclosed result as appropriate may separately or in any combination of such features be utilised for realising the invention in diverse forms thereof.

