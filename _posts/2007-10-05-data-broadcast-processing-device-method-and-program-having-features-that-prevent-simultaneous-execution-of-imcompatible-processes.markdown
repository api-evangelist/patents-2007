---

title: Data broadcast processing device, method and program having features that prevent simultaneous execution of imcompatible processes
abstract: The present invention relates to a data broadcast processing device, method, and program which enable secure control of an operation of a data broadcast processing device. Since a flag standalone is not set in a script NCL Script , the script NCL Script  is executed from time t till time t, simultaneously with a script NCL Script  and a script NCL Script . In contrast, a script NCL Script , in which the flag standalone is set, is prohibited from being executed simultaneously with another script NCL Script  in which the flag standalone is set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875182&OS=08875182&RS=08875182
owner: Sony Corporation
number: 08875182
owner_city: 
owner_country: JP
publication_date: 20071005
---
The present application is a national phase entry under 35 U.S.C. 371 of International Application No. PCT JP2007 069547 filed Oct. 5 2007 published on Apr. 17 2008 as WO 2008 044625 A1 which claims priority from Japanese Patent Application No. JP 2006 275235 filed in the Japanese Patent Office on Oct. 6 2006.

The present invention relates to a data broadcast processing device method and program. In particular the present invention relates to a data broadcast processing device method and program which achieve secure control of the data broadcast processing device.

In data broadcasting that is currently carried out in Japan a BML Broadcast Markup Language which is described in Non Patent Document 1 for example is used. The BML does not only allow designation of frames for text a still image to be included a video image an audio and so on but also allows inclusion of an ECMA European Computer Manufacture Association Script. This enables operation of a data broadcast reception device.

Non Patent Document 1 Wataru Kameyama and Tsuyoshi Hanamura Kaiteiban Dejitaru Housou Kyoukasho Jou Revised Digital Broadcasting Textbook Vol. 1 Inpuresu R D Impress R D Oct. 11 2004 p. 246 to 286.

Meanwhile in Brazil there is a plan for implementation of data broadcasting using an NCL Nested Content Language . In the NCL a Lua script can be used as a script language. The Lua script however does not have a function of prohibiting overlapping execution of a plurality of processes that should be prohibited from being executed simultaneously. This leads to the possibility that a plurality of processes that should not be performed in an overlapping manner might be executed simultaneously making it difficult to securely control an operation of the data broadcast reception device.

The present invention has been devised in view of the above situation and makes it possible to control the operation of the data broadcast processing device more securely.

One aspect of the present invention is a data broadcast processing device that receives and processes a data broadcast the data broadcast processing device including determination means for determining whether or not each of processing units that are to be processed sequentially along a time axis is prohibited from being executed simultaneously with another processing unit execution means for executing the processing unit if the processing unit is not prohibited from being executed simultaneously with the other processing unit and prohibition means for prohibiting execution of the processing unit if the processing unit is prohibited from being executed simultaneously with the other processing unit.

The determination means may determine whether or not the processing unit is prohibited from being executed simultaneously with the other processing unit based on a flag of the processing unit.

The data broadcast processing device may further include selection means for selecting the processing unit wherein the determination means determines whether or not the processing unit selected by the selection means is prohibited from being executed simultaneously with the other processing unit based on a flag of the processing unit.

The data broadcast processing device may further include selection means for when there are a plurality of processing units that are prohibited from being executed simultaneously with the other processing unit selecting one of the processing units as a processing unit to be executed.

The processing unit may be one of a video image a still image an audio text and a processing unit for controlling a function of the data broadcast processing device.

In the case where the processing unit is the processing unit for controlling the function of the data broadcast processing device the prohibition means may prohibit execution of the processing unit selected until completion of processing of a processing unit that is already being executed.

The processing unit may be a procedural object described by an NCL script that has been transmitted from a broadcasting device in accordance with the ISDB T standard.

Another aspect of the present invention is a data broadcast processing method for receiving and processing a data broadcast the data broadcast processing method including a determination step of determining whether or not each of processing units that are to be processed sequentially along a time axis is prohibited from being executed simultaneously with another processing unit an execution step of executing the processing unit if the processing unit is not prohibited from being executed simultaneously with the other processing unit and a prohibition step of prohibiting execution of the processing unit if the processing unit is prohibited from being executed simultaneously with the other processing unit.

Yet another aspect of the present invention is a program for receiving and processing a data broadcast the program causing a computer to execute a process including a determination step of determining whether or not each of processing units that are to be processed sequentially along a time axis is prohibited from being executed simultaneously with another processing unit an execution step of executing the processing unit if the processing unit is not prohibited from being executed simultaneously with the other processing unit and a prohibition step of prohibiting execution of the processing unit if the processing unit is prohibited from being executed simultaneously with the other processing unit.

Another aspect of the present invention is a data broadcast processing device that receives and processes a data broadcast that has been transmitted from a broadcasting device in accordance with the ISDB T standard the data broadcast processing device including determination means for determining whether or not a procedural object that has been sent via the data broadcast and is composed of a program that is described by an NCL script is prohibited from being executed simultaneously with another procedural object execution means for executing the procedural object if the procedural object is not prohibited from being executed simultaneously with the other procedural object and prohibition means for prohibiting execution of the procedural object if the procedural object is prohibited from being executed simultaneously with the other procedural object.

The data broadcast processing device may further include selection means for when there are a plurality of procedural objects that are prohibited from being executed simultaneously with the other procedural object selecting one of the procedural objects as a procedural object to be executed.

Yet another aspect of the present invention is a data broadcast processing method for receiving and processing a data broadcast that has been transmitted from a broadcasting device in accordance with the ISDB T standard the data broadcast processing method including a determination step of determining whether or not a procedural object that has been sent via the data broadcast and is composed of a program that is described by an NCL script is prohibited from being executed simultaneously with another procedural object an execution step of executing the procedural object if the procedural object is not prohibited from being executed simultaneously with the other procedural object and a prohibition step of prohibiting execution of the procedural object if the procedural object is prohibited from being executed simultaneously with the other procedural object.

Yet another aspect of the present invention is a program for receiving and processing a data broadcast that has been transmitted from a broadcasting device in accordance with the ISDB T standard the program causing a computer to execute a process including a determination step of determining whether or not a procedural object that has been sent via the data broadcast and is composed of a program that is described by an NCL script is prohibited from being executed simultaneously with another procedural object an execution step of executing the procedural object if the procedural object is not prohibited from being executed simultaneously with the other procedural object and a prohibition step of prohibiting execution of the procedural object if the procedural object is prohibited from being executed simultaneously with the other procedural object.

According to one aspect of the present invention it is determined whether or not each of processing units that are to be processed sequentially along a time axis is prohibited from being executed simultaneously with another processing unit. The processing unit is executed if the processing unit is not prohibited from being executed simultaneously with the other processing unit whereas execution of the processing unit is prohibited if the processing unit is prohibited from being executed simultaneously with the other processing unit.

According to another aspect of the present invention it is determined whether or not a procedural object that has been sent via a data broadcast and is composed of a program that is described by an NCL script is prohibited from being executed simultaneously with another procedural object. The procedural object is executed if the procedural object is not prohibited from being executed simultaneously with the other procedural object whereas execution of the procedural object is prohibited if the procedural object is prohibited from being executed simultaneously with the other procedural object.

As described above according to an aspect of the present invention it is possible to control an operation of a data broadcast processing device more securely.

Hereinafter embodiments of the present invention will be described with reference to the accompanying drawings.

The television receiver has a reception section an output section a communication section and a control section . The reception section receives a broadcast radio wave and demodulates it. The output section is composed of an LCD Liquid Crystal Display a CRT Cathode Ray Tube a loudspeaker or the like and displays an image based on a signal obtained as a result of the demodulation by the reception section and also outputs an audio. The communication section receives an infrared signal from the remote controller and outputs a signal corresponding to the received signal to the control section . The control section is composed of a microcomputer or the like for example and controls an operation of each part of the television receiver .

The television receiver has an OS Operating System a Java R VM Virtual Machine which operates thereon and a Java R library which operates thereon. The Java R library has a Java R library as Ginga J which reads the contents NCL Apps and and executes them. The Java R library is coupled to an NCL browser via an NCL Java R bridge . A Lua script in the NCL browser is incapable of control of an operation based on a user operation such as channel selection or programming on the television receiver but when the Lua script is coupled to the Java R library via the NCL Java R bridge is made capable of controlling it via a Java R script.

The NCL browser has an NCL as Ginga NCL and the Lua script . As with the Java R library the NCL browser reads the contents NCL Apps and and executes them. A resident program is an EPG Electronic Program Guide or other programs which are started upon activation of the OS 63 Operating System and stay running all the time.

The Lua script is a procedural language that has been designed and developed by TecGraf the Computer Graphics Technology Group at the Department of Information Engineering in the Catholic University of Rio de Janeiro with the view of incorporating it into a host program in the C language. The Lua script is characterized by a high speed operation great portability ease in incorporation and so on and has been used in many game industries and so on in recent years.

In the NCL the Lua script and a Java R program in xlet format can be embedded in its own data and it is possible to allow these programs to run so as to be synchronized with other objects displayed. These embedded codes are handled as NCL objects and have states such as start stop pause and resume.

The Lua script and the Java R library are capable of operating each other by defining a element which represents a reference to a element in which Xlet supporting Ginga J on the NCL is embedded or using a function of Ginga J capable of monitoring an arbitrary NCL event on Ginga J for example. This is the NCL Java R bridge .

A procedural object is inserted in an NCL document and seeks to add a new calculation feature primarily to a declarative document. A method of adding the procedural object into the NCL document is to define the element. A content of this element as located through an src attribute is a procedural code to be executed. Both EDTV and BDTV profiles of NCL 3.0 version allow two media types to be associated with the element. One is application x ginga NCLua for Lua procedural codes an extension thereof is .lua and the other is application x ginga NCLet for Java R i.e. XLET procedural codes an extension thereof is .xlet .xlt or .class . That is the Lua script and Java R scripts forming the Java R library are all procedural objects.

Content producers are able to define NCL links to start stop pause or resume the execution of the procedural code. This technique is the same as that which is applied for common objects that can be displayed. A procedural player i.e. an execution engine for the language must be connected to a procedural type execution environment using an NCL formatter.

As with common media contents the procedural player must control event state machines associated with an NCL procedural node NCLua or NCLet . For example if the execution of a code is completed the player must generate a stop transition in a main event presentation state machine corresponding to the execution of a procedure.

The NCL allows the procedural code to be synchronized with other NCL objects either procedural or not . A element containing the procedural code may also define anchors through elements . Also it may define properties through elements .

The elements must define only an id attribute. The procedural code may register a listener for these elements. If external links start stop pause or resume anchor presentation callbacks in the procedural code must be triggered. Definition of a method for these callbacks is a responsibility of each procedural code associated with the NCL procedural object.

On the other hand the procedural code may also start stop pause or resume these anchors based on a request from an API Application Programming Interface offered by the procedural language. These transitions can be used as conditions of NCL links to trigger actions on other NCL objects in the same document. Thus a two way synchronization can be established between the procedural code and the remainder of the NCL document.

Another method of causing the procedural code to be synchronized with other NCL objects achieves the synchronization through elements in the NCL. The element is defined as a child of a element representing a procedural code that can be mapped to a code function or method or to a code attribute. When it is mapped to a function code a link having an action set applied to its property must be executed so as to involve a value for setting as interpreted as a parameter to be passed to the function. A name attribute of the element is used to identify a procedural code function. When the procedural code is mapped to the element the action set must be set as a value for the attribute.

A element is defined as a child of a element representing the procedural code so as to involve a role as an NCL link. In this case the NCL formatter must query a property value in order to evaluate a link expression. If the element is mapped to a code attribute a code attribute value must be returned by a procedural data execution player to the NCL formatter. If the element is mapped to a code function the function must be called and its output value must be returned by the procedural data execution player to the NCL formatter.

Procedural languages should offer an API that allows procedural codes to query any pre defined or dynamic properties values of an NCL settings node. The NCL settings node is a element of an application x ginga setting type.

 1 In one direction the NCL achieves the bridging by defining a element representing a reference to a element in which Xlet an application x ginga NCLet type supporting Ginga J is embedded. In addition similarly this can be achieved also by a Lua script referring to a Ginga J method. In this case the Lua script is a element of an application x ginga NCLua type.

 2 In the opposite direction it is accomplished by using a function of Ginga J that is capable of monitoring an arbitrary NCL event. Alternatively it may be accomplished by using a function of Ginga J that performs a process of changing an NCL element and property through definition relationships of the elements or an NCL edit command.

As noted previously the Ginga NCL is capable of operating Ginga J through the element of the application x ginga NCLet type or the element.

As with traditional media contents the NCL is capable of causing an Xlet code to be synchronized with other NCL objects regardless of whether they are an procedural object or not . Producers of NCL contents are able to describe execution of an Xlet procedural code such as for start stop pause or resume as an NCL link. The code is expressed as a element of the application x ginga NClet type. An NCLet player having a Java R engine as a basis must have an interface with a procedural execution environment involving the NCL formatter.

A element including a Java R code may define the anchor through the element or may define the attribute through the element. The player must control a state machine for an event related to these interface elements.

The element of an NCLet object must have the id attribute defined at least. The Xlet code may register a listener for the element. When an anchor expression with an external link is started stopped paused or resumed a callback in the Xlet code must be triggered. Meanwhile the Xlet code may give a command to start stop pause or resume such an anchor through the API offered by the procedural language. A transition that occurs because of such a command can be used as a condition of the NCL link for a trigger action on another NCL object in the same document. Thus a two way synchronization can be established between the Xlet code and other objects in the NCL document.

The element is defined as a child of a element of the application x ginga NCLet type which is mapped to an Xlet code method or an Xlet code attribute. When it is mapped to a function code a link having the action set applied to its property must be executed so as to involve a value for setting as interpreted as a parameter to be passed to the function. The name attribute of the element is used to identify the procedural code function. When the Xlet code is mapped to the element the action set must be set as a value for the attribute. The element may be associated with a role as the NCL link. In this case the NCL formatter must query a property value in order to evaluate a link expression.

If the element is mapped to a code attribute a code attribute value must be returned by the procedural data execution player to the NCL formatter. If the element is mapped to the code function the function must be called and its output value must be returned by the procedural data execution player to the NCL formatter.

There is a likelihood that depending on how middleware is made Lua is provided with an equivalent of an API offered by Ginga J in order to access a resource in a set top box or a function of Ginga.

In addition to the bridging through a Ginga J method that is related to an interface the element and element of a element representing the Xlet procedural code any Ginga J application is capable of registering itself as a listener of any state transition that may arise from an event state machine that is related to the NCL document. Thus any NCL state transition can be used as a trigger for a Ginga J application function.

Ginga J offers an API that allows Xlet codes to query any pre defined or dynamic properties values of an NCL settings node. The NCL settings node is a element of the application x ginga setting type.

Moreover Ginga J offers as an NCL API group a group of methods for supporting an NCL edit command and private base manager command.

The NCL browser reads and executes a monomedium and a script described in an NCL contained in a demodulated signal so that an image of a data broadcast including text as illustrated in a video image a still image an audio and so on are outputted to the output section for example.

In this embodiment as illustrated in processing units to and processing units to are described in the NCL in an order in which they are processed along a time axis and are transferred from a broadcast station. In other words they are procedural objects that have been transmitted from the broadcasting device in accordance with the ISDB T standard. In the example of the processing unit JPEG is executed at time t so that a still image is displayed. If a certain button on the remote controller is operated during the execution of the processing unit JPEG the processing unit HTML is executed so that a menu screen or the like is displayed for example.

When the processing of the processing unit JPEG has been completed at time t the processing unit MPEG is next executed until time t so that a video image is displayed. The processing unit JPEG and the processing unit WAV are executed simultaneously from time t till time t so that a still image and an audio are outputted.

In this embodiment an NCL Script which is a script as well as monomedia JPEG HTML MPEG and WAV can be described as media in the NCL. In the example of the processing unit NCL Script which is a script is executed from time t till time t so that a function or operation of the television receiver is controlled. For example in the television receiver data is stored in an internal non volatile memory or EPG data is read.

Moreover in this embodiment a flag can be set so that a script as a medium can be prohibited from being executed simultaneously with another script. Thus it is possible to define standalone as a descriptor parameter descriptorParam which is a content of an element of a descriptor of Extended Descriptor Module. Simultaneous start of scripts in which this flag is set is prohibited.

In an embodiment of for example scripts NCL Scripts and are executed sequentially from time t time t and time t respectively. These are procedural objects described by NCL scripts. A script NCL Script is executed from time t till time t simultaneously with the script NCL Script and the script NCL Script such that part of operation periods thereof overlap with each other . The flag standalone is not set in the script NCL Script and therefore such simultaneous execution thereof with another script is possible. For example in cases such as when an adding subtracting process is performed with software simultaneous execution of multiple processes is possible because an operation of hardware is not necessary.

On the other hand the flag standalone is set in each of the script NCL Script and the script NCL Script . The script NCL Script in which the flag standalone is set is prohibited from being executed simultaneously with another script NCL Script in which the flag standalone is set. Accordingly as illustrated in in the case where the processing of the script NCL Script has been programmed to start after completion of the processing of the script NCL Script for example the processing of the script NCL Script may be completed later than expected for some reason. In this case because the execution of another script NCL Script in which the flag standalone is set is in progress at the time when the processing of the script NCL Script should be started the processing of the script NCL Script is prohibited. Thus unfortunate simultaneous execution of conflicting processes which would result in occurrence of an error is prevented. For example regarding a function for program selection simultaneous execution of multiple processes is prohibited when the number of channels through which the reception section can receive data is one.

Next with reference to flowcharts of processes of controlling the monomedia and the scripts will now be described below. First with reference to FIG. a process of controlling the still image video image text and audio monomedia JPEG MPEG HTML and WAV will now be described below.

At step S the determination section determines whether or not there are next monomedia among the monomedia that should be processed sequentially along the time axis. If there are the next monomedia the selection section selects the next monomedia at step S.

At step S the determination section determines whether or not the monomedia selected at step S include a monomedium in which the flag descriptorParam is standalone. If the monomedia selected include a monomedium in which the flag descriptorParam is standalone the determination section determines at step S whether or not there is any monomedium that is already being executed and in which the flag descriptorParam is standalone.

If there is a monomedium that is already being executed and in which the flag descriptorParam is standalone the deletion section deletes the monomedium in which the flag descriptorParam is standalone from a list of the selected monomedia at step S. Then at step S the execution section executes the monomedia selected at step S. At this time because the monomedium in which the flag descriptorParam is standalone was deleted at step S execution of that monomedium is prohibited in essence. This contributes to achieving secure control of the operation of the television receiver .

If it is determined at step S that there is no monomedium that is already being executed and in which the flag descriptorParam is standalone the determination section determines at step S whether or not the monomedia selected include a plurality of monomedia in which the flag descriptorParam is standalone. If they include a plurality of monomedia in which the flag descriptorParam is standalone the selection section selects one of the plurality of monomedia in which the flag descriptorParam is standalone at step S. This results in a prohibition of simultaneous execution of a plurality of monomedia in which the flag descriptorParam is standalone. Then the monomedium selected is executed by the execution section at step S. For example in the embodiment of in the case where the two monomedia JPEG and WAV are selected at time t if the flag descriptorParam is set to standalone in each of them it is impossible to execute them at the same time and therefore one of them is selected and executed.

If it is determined at step S that there is only one monomedium in which the flag descriptorParam is standalone that means that there is no other monomedium in which the flag descriptorParam is standalone and therefore it is not necessary to prohibit its execution. Thus the monomedia selected at step S are executed at step S.

Similarly if it is determined at step S that the monomedia selected do not include any monomedium in which the flag descriptorParam is standalone it is not necessary to prohibit its execution. Accordingly in this case the processes of steps S to S are skipped and the monomedia selected at step S are executed at step S.

After the execution process at step S control returns to step S and if there are next monomedia the monomedia are selected and similar processes are repeated. If it is determined at step S that there is no next monomedium this procedure is finished.

Next with reference to the flowchart of a process of controlling the scripts NCL Scripts will now be described below.

At step S the determination section determines whether or not there are next scripts NCL Scripts among the scripts NCL Scripts that should be processed sequentially along the time axis. If there are the next scripts NCL Scripts the selection section selects the next scripts NCL Scripts at step S.

Next at step S the determination section determines whether or not the scripts NCL Scripts selected include a script NCL Script in which the flag descriptorParam is standalone. If the scripts NCL Scripts selected include a script NCL Script in which the flag descriptorParam is standalone the determination section determines at step S whether or not there is any script NCL Script that is already being executed and in which the flag descriptorParam is standalone.

If there is any script NCL Script that is already being executed and in which the flag descriptorParam is standalone the control section suspends the script NCL Script in which the flag descriptorParam is standalone at step S. For example the script NCL Script is put into a queue. In other words the execution thereof is prohibited until completion of the processing of the processing unit that is already being executed. Thereafter control returns to step S and next scripts NCL Scripts are selected and similar processes are performed.

For example as illustrated in in the case where at step S the script NCL Script in which the flag descriptorParam is standalone is selected at time t if the flag descriptorParam is standalone in the script NCL Script which is already being executed a determination of YES is made at step S and the suspending process is performed at step S. In other words simultaneous execution of the script NCL Script and the script NCL Script is prohibited in essence. This contributes to achieving secure control of the operation of the television receiver .

The script NCL Script suspended will be selected as appropriate at step S as a next script NCL Script. That is after completion of the processing of the script NCL Script that was already being executed and in which the flag descriptorParam is standalone it is determined at step S that there is no script NCL Script that is already being executed and in which the flag descriptorParam is standalone. As a result processes of step S and later will be performed.

If it is determined at step S that there is no script NCL Script that is already being executed and in which the flag descriptorParam is standalone the determination section determines at step S whether or not the scripts NCL Scripts selected include a plurality of scripts NCL Scripts in which the flag descriptorParam is standalone. If there are a plurality of scripts NCL Scripts in which the flag descriptorParam is standalone the selection section selects one of the scripts NCL Scripts in which the flag descriptorParam is standalone at step S. Then the script NCL Script selected is executed by the execution section at step S. In other words in the case where the flag descriptorParam is standalone in each of the plurality of scripts NCL Scripts selected at step S one of them is selected at step S and executed in order to prohibit simultaneous execution of all of them.

If it is determined at step S that there is only one script NCL Script in which the flag descriptorParam is standalone that means that there is no other script NCL Script in which the flag descriptorParam is standalone and therefore it is not necessary to prohibit its execution. Thus the scripts NCL Scripts selected at step S are executed at step S. For example in the embodiment of in the case where at step S the script NCL Script in which the flag descriptorParam is standalone is selected at time t if the flag descriptorParam is not standalone in the script NCL Script which is already being executed it is not necessary to prohibit the execution of the script NCL Script . Accordingly the script NCL Script is executed at step S.

Similarly if it is determined at step S that there is no script NCL Script in which the flag descriptorParam is standalone it is not necessary to prohibit its execution. Accordingly the scripts NCL Scripts selected at step S are executed at step S.

After the execution process at step S control returns to step S and if there are next scripts NCL Scripts these scripts NCL Scripts are selected and similar processes are repeated. If it is determined at step S that there is no next script NCL Script this procedure is finished.

While the foregoing description refers to the case where the present invention is applied to the NCL the present invention is also applicable to cases where other languages are used.

The above described series of processes may be implemented either in hardware or in software. In the case where the series of processes is implemented in software a program that forms the software is installed via a program storage medium into a computer having a dedicated hardware configuration a general purpose personal computer that when various programs are installed thereon becomes capable of performing various functions or the like.

Note that in the present specification steps that describe the program stored in the program storage medium may naturally be performed chronologically in the order described herein but that they may not necessarily be performed chronologically. Some of them may be performed in parallel or independently of one another.

The term communication naturally encompasses wireless communication and wired communication and also encompasses a mixture of the wireless communication and the wired communication in which the wireless communication is performed in one section while the wired communication is performed in another section. Further while communication from one device to another device is performed via the wired communication communication from the latter device to the former device may be performed via the wireless communication.

Note that embodiments of the present invention are not limited to the above described embodiments and that various modifications are possible without departing from the scope of the present invention.

