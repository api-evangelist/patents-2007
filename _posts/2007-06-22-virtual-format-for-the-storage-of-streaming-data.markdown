---

title: Virtual format for the storage of streaming data
abstract: Systems and methods for storing streaming data are provided. A system is disclosed that includes a computer program which, when executed on a computing device, is configured to store a data stream in memory of the computing device in a virtual file format. The virtual file format may include a timeline of events. The events in the timeline may include a plurality of spanning events. Each spanning event may contain respective state information representing a state of the data stream across an interval in the timeline, and may be linked to at least one other spanning event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925773&OS=07925773&RS=07925773
owner: Microsoft Corporation
number: 07925773
owner_city: Redmond
owner_country: US
publication_date: 20070622
---
Recording streams of data such as digital television streams can be a complicated task. Once recorded manipulation of the recorded video stream also poses challenges. For example it may be desirable to add metadata to a recorded video stream to describe an attribute of the video stream that is in effect over a range of time. To accomplish this by prior techniques an instantaneous event would be inserted into a video stream at a location in the stream where the metadata commenced i.e. a start position. To change the value of the attribute at a given point in time later in the stream another instantaneous event would be inserted at a downstream location which changed the value of the attribute or turned the attribute off. Another prior approach involved writing all metadata event information into each and every event in the data stream.

These techniques have several drawbacks. First inserting the metadata into a recorded stream may require the entire stream to be altered which is processor intensive and time consuming. Second determining a current state of a recorded stream at an arbitrary point in the stream is difficult when represented by instantaneous events because this requires searching backwards from the point of inquiry through the entire stream for all instantaneous events that set metadata or otherwise affect the state of the stream at the arbitrary point in the stream. This is also processor intensive and time consuming. Third adding all metadata to each and every event in the data stream results in a undesirably large size. As a result these prior techniques may result in slow access and an undesirable user experience for users who record and manipulate data streams such as digital television streams.

The present disclosure relates to systems and methods for storing streaming data. A system is disclosed that includes a computer program which when executed on a computing device is configured to store a data stream in memory of the computing device in a virtual file format. The virtual file format may include a timeline of events. The events in the timeline may include a plurality of spanning events. Each spanning event may contain respective state information representing a state of the data stream across an interval in the timeline and may be linked to at least one other spanning event. The spanning events may be accessed to determine the state of the data stream at a target position.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In one example API may act as an intermediary between one or more application programs and data stored in the virtual file format. Thus API may be configured to receive and process requests to store and retrieve data in the virtual file format from one or more application programs and process the requests accordingly. Alternatively application program may be configured to directly store and retrieve data from the virtual file format .

Computing device may be provided with a communications interface configured to communicate with a data source via a communications link such as a network connection USB connection firewire connection etc. The data source may be a streaming media data source configured to output a data stream for example containing streaming audio data and or streaming video data which is received by the communications interface via the communications link . The application program may be configured to read the data from the communications interface and to record the data stream by storing the data stream in the virtual file format in memory which in turn is stored in on disk file format on mass storage device .

As shown in virtual file format includes one or more timeline and one or more tables . One of the timelines may be designated as a root timeline to which other timelines are referenced such as a timeline in which time is represented as discussed below. The timelines may be used to store streaming data and metadata and other data related thereto and the tables may be used to index the data in the timelines for quick recall.

As shown in each timeline is a data structure that is an array of events which are ordered in an increasing byte offset from a beginning of the timeline. While each timeline is an array of events ordered in an increasing byte offset in the virtual file format it will be appreciated that the timeline may be stored in the on disk file format in an independent manner. For example a name for the timeline may be stored in a master file table in the on disk file format and the data in the timeline may be stored as a value associated with the name in runs located at various addressed locations on the disk. Thus it will be appreciated that the byte offset in the timeline in the virtual file format is independent of the physical location of the data for timeline as stored in the on disk file format .

Events are constructs which carry data. Each of events may include a type a size a context a position and or a payload of data . Type may be defined by a globally unique identifier GUID . The type may be well known to the virtual file format or alternatively may not be known to the virtual file format. Examples of well known event types include media sample state table and seekpoint which will be explained below. An example of an event type that may not be known to the virtual file format is an attribute of a sample that is encoded as metadata. The nomenclature SBF EVENT may be used to refer to an event and SBF EVENT.Type may refer to the type of the event.

Context may include one or more flags which may be used to indicate a context for the event. Context may also contain data indicating the timeline with which the event is associated. It will be appreciated that events need not include a payload of data or may include a payload set to nullset zero bytes in length etc. Such events with empty data fields may be used to indicate that a state is no longer active as will be explained below.

Each event has an offset indicating its distance in bytes from the beginning of the timeline. In the Figures the byte offset increases to the right. In some embodiments all events may be aligned on 64 bit boundaries in the timeline. Thus there may be a gap of some number of bytes to ensure the alignment following an event that has a size that is non 64 bit aligned.

Events are of variable size are identifiable and have well defined positions within the data stream as a whole that are global to the virtual file format. The position of an event indicates its position in the data stream stored in the virtual file format rather than its byte offset in a timeline. Thus it will be appreciated that the position of an event in the data stream is different from its offset in a timeline although the two concepts are related as illustrated in . In contrast to the byte offset which represents distance in bytes along the timeline the position of an event is similar to a counter value. Successive events may have incrementing position values although they may be separated by many bytes. illustrates that as the position Pi of an event increases so does the offset of the event i.e. for i less than or equal to k Pi is less than or equal to Pk and Offset i is less than or equal to Offset k .

Referring to since event position is global to the virtual file format it will be appreciated that events in a plurality of different timelines within the virtual file format may be ordered relative to each other within the data stream as a whole. Events that have the same position value are said to be concurrent in the virtual file format. Because the position is global to the file events in more than one timeline can be concurrent. For example if a sample attribute is inserted after the file is created and rather than upsetting and reordering the entire timeline with an insertion a new timeline may be created and the attribute may be added to the new timeline with the same position value. Thus as shown in events at positions and in a first timeline A and a second timeline B are concurrent.

As illustrated in the timeline of virtual file format may further include one or more spanning events . A spanning event is persistent that is it exists until it is replaced or erased and it is part of the state for events that follow in position on its stream. Examples of a spanning event include stream format such as MPEG or WMV or stream encoding such as standard definition SD or high definition HD . Once a spanning event for stream format or encoding is set the format or encoding applies to all same stream samples that follow that is the spanning event is persistent. Querying the virtual file format to recover state from spanning events has speed efficiency over prior techniques that required querying all events in a stream to find those events which affected state and has size efficiency over methods which require the state information to be written into each event.

An event may be indicated as a spanning event through setting a spanning event flag A within context field . Each spanning event further includes a previous field configured to contain a pointer to the next previous spanning event of any type in the same timeline. The previous field may be represented by the nomenclature SBF SP EVENT.prev for example. The previous field may indicate the byte offset in the timeline of the next previous spanning event. Alternately the previous field may indicate a next previous spanning event in another suitable manner.

As illustrated in the inclusion of a pointer to the next previous spanning event enables the spanning events to be chained together. Spanning events may be used to represent the state of a data stream and the state for a selected attribute may be recovered i.e. detected for an arbitrary or user selected position in the data stream by traversing backwards to a spanning event and then traversing backwards along the spanning event chain until a spanning event with a value for the attribute is found. This saves processor time over traversing backwards through all events in the timeline and results in a smaller file than inclusion of all metadata event information in each event in the data stream.

In the example illustrated in the spanning event A may be a encoding spanning event that indicates that the video stream from that point forward is encoded in a first format HD and a second spanning event B may be a format spanning event that indicates that the video stream from that point forward is encoded in a second format SD. Thus the spanning event A describes the state of the format of the stream over the interval between spanning event A and spanning event B. Spanning event B describes the format of the stream from that point forward until the end of the stream or the next format spanning event.

As discussed above data relating to the spanning events and other data associated with the timeline may be encoded in a table which may be stored in band in the timeline as an event itself or may be stored elsewhere in the virtual file format. A table may be used for example to store data that is well suited to tabular storage for example indexes and global metadata. Data in a table is arranged contiguously. Adding entries to or removing entries from the end of a table is relatively inexpensive but inserting or removing entries that are not at the end causes data to be moved to maintain the contiguous layout which is processor intensive. It will be appreciated that each of tables is bound to a respective timeline . If a table is global to the file such as for stream time then it is bound to the root timeline as discussed below.

Variable sized entries table includes a table header also in the form of a first name value pair a redirector in the form of a second name value pair and a list of variable sized entry data in the form of a third name value pair. The header name value pair is similar to the header of the like the fixed size entries header except that the specified entry size SBF TABLE HEADER.EntrySize has a value indicating that the size is variable e.g. SBF ENTRY SIZE VARIABLE. The redirector contains the offsets to each of the variable sized entries. The redirector itself has fixed size entries so it allows constant lookups into the variable sized entries e.g. using the lookup Entry N Entries Redirector N .

In some embodiments a plurality of spanning events in effect at a given point in a timeline may be consolidated into a spanning event table ST as illustrated in . A spanning event table ST is typically a variable sized entries table . The spanning event table ST is itself a spanning event and occurs in band in the timeline as a timeline event of well known type to the virtual file format . Although requiring additional memory space consolidation of spanning events into a spanning event table ST may decrease the search time necessary for recovery of the state of a stream.

An algorithm may be implemented in computer program to determine those spanning events that change infrequently and store those infrequently changing spanning events in an in band spanning events table ST for efficient lookup. The algorithm may further be configured to determine those spanning events that occur frequently and omit such frequent spanning events from spanning events tables in the case where a timeline lookup of frequent spanning events would be more efficient than storing these frequent spanning events in spanning event tables.

Virtual file format A also may include an events index A a time based index B a metadata index C and a spanning event index D. Events index A may be a fixed entry length table including table entries representing the byte offset and identity of all events in timeline. The time based index B may be a fixed length entries table and may include entries that correlate event position in the virtual file format to an absolute time scale. The metadata index C may be a variable length entries table containing metadata events in the audiovideo timeline. Spanning event index E typically is a variable length entries table including a list of all spanning events in timeline A.

As illustrated in timeline A of virtual file format A may include a plurality of well known events including seekpoints SK spanning events SP spanning event state tables ST media samples MS and metadata MD. Seekpoints are points from which optimal resumption of the audiovideo stream may occur and are typically set at a predetermined interval throughout the audiovideo timeline such as every half second although any suitable interval may be selected such as every second or two seconds. Borrowing from the example used in the first timeline A may carry audiovideo data in the form of a plurality of media samples MS. These are encoded in HD at the beginning of the stream which is indicated in a spanning event A. The format is changed to SD towards the end of the stream which is indicated by spanning event B. To recover the state of the stream at a target position a search algorithm first goes to a seekpoint SK such as indicated at C and then traverses backwards along chained spanning events until a most recent state table ST indicated at D is reached. State information is retrieved for the first stream from the state table ST at D which will indicate that the value of the encoding attribute of the state is HD.

In addition the state table may provide a pointer to spanning events which contain state information for events of a concurrent position in the second timeline B. For example the state table at D may include a pointer directly pointing to a state table indicated at E associated with a concurrent position in the second timeline B. Thus it can be determined from the state table at E that the content tag of the data stream at the target position indicates that the data stream is a basketball game. Later in the second timeline B the content tag changes value to indicate the data stream is a tennis match. Alternatively it will be appreciated that the state table at E associated with a concurrent position in timeline B may be located via spanning events index D. In this way attributes of the state of the audiovideo stream in effect at the target position which are contained in both the first and second timelines may be efficiently recovered.

It will be appreciated that target position at which the state of the data stream is to be analyzed may be selected so as to coincide with a seekpoint SP as illustrated in to optimize rapid searching. Alternatively the computer program may be configured to allow free selection of a target position at a arbitrary or user selected position within the data stream and a search algorithm in the computer program can be configured to search backwards from the arbitrary or user selected position to find the most recent spanning event SP that occurs at or prior to the target position and which affects a target attribute of the state of the data stream.

At the method may include to recover an attribute of a state of the data stream at a target position within the data stream accessing a spanning event with current state information for the attribute. At the method may further include reading state information from the spanning event accessed at .

A variety of methods may be used to access the spanning event with current state information for the attribute at . For example at the method may include identifying a seekpoint spanning event associated with the target position. At the method may include identifying a pointer to a previous spanning event in the timeline within the seekpoint spanning event. As illustrated at the pointer may indicate a byte offset of a next previous spanning event. At the method may include accessing the previous spanning event via the pointer. And at the method may include determining whether the previous spanning event is a state table YES at and if so the method may include reading state information regarding the attribute at from the state table. If the previous spanning event is not a state table NO at then the method may include backwardly traversing one or more spanning events in the timeline via a previous spanning event pointer contained in each respective spanning event until a state table spanning event is reached.

Alternatively instead of or in addition to the steps outlined in the method may include reading state information from spanning events in the timeline in another manner such as those described above. For example instead of accessing a seekpoint and or state table state information may be read directly from spanning events that are not seekpoints or state tables which are previous to or concurrent with the target position and which affect the current state of the attribute.

At the method may include determining whether there is another timeline in the virtual file format. If it is determined that there is another timeline YES at then the method may further include at accessing an additional state table in the other timeline with state information for the target position that is based on one or more events in the other timeline. If it is determined that there is not another timeline NO at then the method ends.

The above described systems and methods may be used to efficiently store and retrieve streaming data from a virtual file format on a computing device.

It should be understood that the embodiments herein are illustrative and not restrictive since the scope of the invention is defined by the appended claims rather than by the description preceding them and all changes that fall within the metes and bounds of the claims or equivalence of such metes and bounds thereof are therefore intended to be embraced by the claims.

