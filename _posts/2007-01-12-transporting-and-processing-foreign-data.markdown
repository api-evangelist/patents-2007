---

title: Transporting and processing foreign data
abstract: A set of importers accept a variety of formats of 2D and 3D content (source asset) for computer games in the format created by the artists' authoring tool. The source asset is standardized and normalized and is stored as a strongly typed object in a content object model. An object from the content object model can be deserialized to a file for debugging. The object can be converted to a managed object to which game code can be written. An executable object is generated from the object created during game development automatically.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843881&OS=08843881&RS=08843881
owner: Microsoft Corporation
number: 08843881
owner_city: Redmond
owner_country: US
publication_date: 20070112
---
A computer game is a computer controlled game where players interact with objects displayed on a screen. The term computer game also includes games which display only text or use other methods such as sound or vibration as their primary feedback device or which use a controller or which use a combination of feedback mechanisms. A video game is a computer game played on a personal computer or on a console or arcade machine. In common usage however computer game or PC game refers to a game that is played on a personal computer and console game refers to one that is played on a device specifically designed for playing these types of games. The console typically interfaces with a standard television set. Video game is used to refer to any of the above and includes games made for any other device including but not limited to mobile telephones PDAs advanced calculators and so on.

Computer games are immensely popular fostering a great market for new games. However developing video games is difficult time consuming and there is a need to keep costs low enough to attract publisher investment. The average video game development team size as well as the average development time of a game have grown along with the size of the industry and the technology involved in creating games.

Broadly speaking video game development includes content creation and code development. Content refers to the graphics two dimensional 2D and three dimensional 3D sounds and animation on which the program code of the video game operates. In the early days of game development home computers were so limited that having specialized personnel for art was unnecessary. Up until about the early 1990s almost all art for video games was created by the game programmers in code by specifying pixel colors and coordinates. In modern computer and video games however game artists create 2D art from which is developed concept art textures or 3D models and animations. In fact the number of game artists on a project can far exceed the number of programmers and testers on the game development team. Even when existing content is used e.g. 2D pictures are obtained from the Internet one of the challenges involved in the development of new video games is consuming this content because frequently the content is not in the form required by the game engine. Artists typically generate their artwork in one of a small number of general purpose packages which are designed for producing web artwork and artwork for movies not for producing game content. The packages produce content in any one of a number of file formats defined by the tool. These formats typically are not very close to what the game engine wants the content to look like. Therefore a developer must typically take the content and transform it programmatically. This work is difficult and tedious and is not easily reuseable. Developers must write a lot of code and understand how the 3D content is created in order to make it compatible with the content exporters or the game engine that will consume it. Furthermore existing content must typically undergo a conversion process so that it works properly with the other content being used. For instance an authoring tool may describe content using procedural descriptions of the curves and modifier functions that were used to construct it whereas the game engine just wants to consume a list of triangles. Furthermore the format of data that can be consumed by a game engine will frequently be restricted by the implementation details of what currently available graphics cards are able to render which is rarely a perfect match for the more flexible editable data structures used in the authoring tool. Typically the way this problem is handled today is that people export the content to a well known format and then work with that well known format. If the artist did not originally export the file in the well known format the game development team must go back to the artist and ask the artist to do so. This process is not easily automated and so if the artist has produced hundreds of files each file must be exported individually. It would be helpful if there were a way to ease video game development by making the use of 2D and 3D content easier.

2D and 3D content for games is transported and processed by a set of tools including a managed runtime environment which facilitates computer game design development and management so that content is able to be used more easily. A set of importers are provided that can generate a number of different formats for game content. The transformed content is normalized and stored in a Document Object Model DOM . The DOM utilizes strong typing for graphics data from which a managed object is created so that a user can easily extend game logic on top of the content. Binary files for multiple target platforms are written without user extension. A content loader is provided that is very lightweight and easy to use. All of the components are extensible by third parties so that solutions can be provided on top of the transport and processing system.

2D graphics was the norm for games released through the mid 1990s but today almost all games support full 3D graphics. One of the most popular personal computer target platforms is Microsoft Windows because of its enormous user base. Popular 3D graphics APIs for Microsoft Windows are DirectX and OpenGL. Both are natively supported on most modern 3D hardware for the PC. DirectX actually is a collection of game APIs. Direct3D sometimes called DirectX Graphics is DirectX s 3D API. A form of Direct3D is used on Microsoft s Xbox and portable devices which run the Windows Mobile operating system . The various APIs of DirectX may be used for input sound effects music networking and the playback of videos. OpenGL is a portable 3D API. Commercial libraries are also available.

3D computer graphics are works of graphic art created with the aid of digital computers and specialized 3D software. 3D computer graphics are different from 2D computer graphics in that a three dimensional representation of geometric data is stored in the computer for the purposes of performing calculations and rendering 2D images. Sometimes these images are later displayed in a pre rendered form and sometimes they are rendered in real time.

Microsoft XNA Game Studio is a set of tools including a managed runtime environment which facilitates computer game design development and management. XNA Game Studio does this by freeing game designers from performing boilerplate coding and by bringing all aspects of game production into a single system. The XNA Framework is based on the .NET Framework. It includes an extensive set of class libraries including those specific to game development and promotes maximal code reuse across target platforms. It also includes a version of the Common Language Runtime which is optimized for gaming requirements to provide a managed execution environment for the XNA games. The runtime is available for Windows XP Windows Vista and the Xbox 360. Because XNA games are written for the runtime XNA games will run on any platform supporting the XNA Framework with minimal or no modification. Games targeting the XNA Framework can be written using the C language although other suitable languages could be used including any managed or unmanaged language including .NET languages Visual Basic C J Script F and Iron Python and so on. In some embodiments of the invention the language used for the games is C .

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The processor can be implemented as a client processor and or a server processor. In a basic configuration the processor can include at least one processing portion and memory portion . The memory portion can store any information utilized in conjunction with playing computer games for example. Depending upon the exact configuration and type of processor the memory portion can be volatile such as RAM non volatile such as ROM flash memory etc. or a combination thereof. The processor can have additional features functionality. For example the processor can include additional storage removable storage and or non removable storage including but not limited to magnetic or optical disks tape flash smart cards or a combination thereof. Computer storage media such as memory portion and include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices universal serial bus USB compatible memory smart cards or any other medium which can be used to store the desired information and which can be accessed by the processor . Any such computer storage media can be part of the processor .

The processor can also contain communications connection s that allow the processor to communicate with other devices such as other devices in an online gaming scenario for example. Communications connection s is an example of communication media. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media. The processor also can have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. also can be included. In an example embodiment output device comprises display portion .

A graphics processing unit GPU and a video encoder video codec coder decoder form a video processing pipeline for high speed and high resolution graphics processing. Data is carried from the graphics processing unit to the video encoder video codec via a bus. The video processing pipeline outputs data to an A V audio video port for transmission to a television or other display. A memory controller is connected to the GPU to facilitate processor access to various types of memory such as but not limited to a RAM Random Access Memory .

In an exemplary embodiment the multimedia console includes an input output I O controller a system management controller an audio processing unit a network interface controller a first USB host controller a second USB controller and a front panel I O subassembly that can be implemented on a module . The USB controllers and serve as hosts for peripheral controllers a wireless adapter and an external memory device e.g. flash memory external CD DVD ROM drive removable media etc. . The network interface and or wireless adapter provide access to a network e.g. the Internet home network etc. and can be any of a wide variety of various wired or wireless adapter components including an Ethernet card a modem a Bluetooth module a cable modem and the like.

System memory is provided to store application data that is loaded during the boot process. A media drive is provided and can comprise a DVD CD drive hard drive or other removable media drive etc. The media drive can be internal or external to the multimedia console . Application data can be accessed via the media drive for execution playback etc. by the multimedia console . The media drive is connected to the I O controller via a bus such as a Serial ATA bus or other high speed connection e.g. IEEE 3394 .

The system management controller provides a variety of service functions related to assuring availability of the multimedia console . The audio processing unit and an audio codec form a corresponding audio processing pipeline with high fidelity and stereo processing. Audio data is carried between the audio processing unit and the audio codec via a communication link. The audio processing pipeline outputs data to the A V port for reproduction by an external audio player or device having audio capabilities.

The front panel I O subassembly supports the functionality of the power button and the eject button as well as any LEDs light emitting diodes or other indicators exposed on the outer surface of the multimedia console . A system power supply module provides power to the components of the multimedia console . A fan cools the circuitry within the multimedia console .

The CPU GPU memory controller and various other components within the multimedia console are interconnected via one or more buses including serial and parallel buses a memory bus a peripheral bus and a processor or local bus using any of a variety of bus architectures. By way of example such architectures can include a Peripheral Component Interconnects PCI bus PCI Express bus etc.

When the multimedia console is powered ON application data can be loaded from the system memory into memory and or caches and executed on the CPU . The application can present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . In operation applications and or other media contained within the media drive can be launched or played from the media drive to provide additional functionalities to the multimedia console .

The multimedia console can be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode the multimedia console allows one or more users to interact with the system watch movies or listen to music. However with the integration of broadband connectivity made available through the network interface or the wireless adapter the multimedia console can further be operated as a participant in the larger network community such as an online gaming community for example.

In accordance with embodiments of the invention build coordinator manages the flow of game content through the various importers content processors and serialization mechanisms described more fully below. The build coordinator is responsible for coordinating the build process. It calls the various importers content processor and serializers in the appropriate sequence and keep track of intermediate file names. It also performs incremental checks to make sure that the build coordinator does not perform any unnecessary work. For instance if a particular asset such as but not limited to a mesh or texture has not changed since the previous time the content was built there is no need to waste time rebuilding that file or if the same texture is referenced by several different meshes it only needs to be built once and the results of that processing can be shared by all the meshes that use the texture.

Importer may accept input files source assets in the format in which authoring tools such as 3D Studio Max and Maya developed by Autodesk Media Entertainment LightWave and SoftImage present them. Importer pulls content from the source assets files as part of the game build process. The source assets may be 3D file formats such as .FBX and .X 2D file formats such as .DDS .BMP. .JPG .PNG .TGA material file formats such as .FX and audio file formats such .XAP. Importer takes the content conditions it and normalizes it in into a common format. Normalization in the context of content processing acts to bring the content into a range that is more standardized hence the term normalization. Often the motivation is to achieve range consistency. The importer component of the system in some embodiments of the invention is extensible that is third parties can add their own importers into the build system to support other file formats from other tools.

Thus in contrast to traditional approaches in which extensions for authoring tools are written in order to export content in a format that is more suitable for use in games programming the importers of embodiments of the invention import content in whatever format the authoring tool produces extracts the necessary information conditions it normalizes the content and outputs the content in a common format.

The content generated from the importer is provided to the Content DOM Document Object Model . The DOM is an object model defined in managed code that stores the game content in a standardized way. The DOM is a set of classes that hold game content data and enforce desirable characteristics of the game data. The Content DOM converts the data into a standard format so that all the processing that must be performed on the data to convert it into game format can begin from a known common point increasing the reusability of the content.

Suppose for example a developer is writing a game and starts with the content generated by the 3D Studio Max authoring tool. Suppose the developer writes a quantity of code to convert the 3D Studio Max file into his game format. If either the game or the authoring tool for the artist to use changes the code the developer has written cannot be re used the developer has to start over from scratch. In contrast by converting the file into a standard object model using the Content DOM the content generated is more readily reusable because it conforms to a standard structure. The DOM categorizes the content data into standardized pieces that can be separately accessed e.g. a vehicle X may include one or several wheels W. By categorizing the vehicle X as composed of parts including wheels W an already created wheel W can be used in another item such as another vehicle Y . It will be appreciated that the DOM generates a standardized in memory representation of the content which is accessible via an API enabling the system to work with the vendor s processor s as well as the processors of third parties. Thus the Content DOM and the Graphics DOM abstract the differences in the file formats generated by different authoring tools. It also decouples the import process from the process that converts the data to game format enabling these two processes to work independently which traditionally has been performed as one integrated step.

The DOM in some embodiments of the invention imposes strong typing on graphics data. Strong typing means that the programming language or implementation enforces constraints upon programs preventing them from running code which uses data in an invalid way. For instance an integer addition operation may not be used upon strings a procedure which operates upon linked lists may not be used upon numbers. Typically the language compiler performs checks for type constraint violations. Operations or function calls which attempt to disregard data types are prohibited. Implicit type conversion is not allowed. Values of one type cannot be converted to another type implicitly. The content processor performs explicit type conversions automatically without requiring a human to produce the conversion code . Types include geometry materials textures bones weights animation and hierarchy. Thus the Content DOM abstracts the differences between digital content creation tools including but not limited to the ones listed above so that a consistent view of the source content as managed objects is provided. The Content DOM defines base types and building block functionality for use by more specialized object models such as the Graphics DOM. The Graphics DOM defines intermediate types for representing and manipulating content including graphic and non graphic assets such as audio and animation. The DOM in some embodiments of the invention generates the standard structure by serializing and deserializing content data. The object can be serialized to a file an intermediate format for debugging.

One or more content processors such as content processor uses the standardized data created by the Content DOM to create managed objects and to transform the data for use during execution of the game. A processor converts between the document object model objects and the execution or runtime types. In some embodiments of the invention the language used for the processors is C . A processor may be written for simplistic objects such as a Mesh Texture or Effect or for complex game types such as a game character or vehicle. Declarative mappings are used in some embodiments of the invention to create a processor using a simple markup method. The declarative statements are used by the build coordinator to generate code to create the processor. Hence declarative mappings functionality provides an easy way to define and refer to an object in the object model that may use a number of processors. The declarative mappings provide a way to identify the content in a way that makes it easy for the person writing the code to reference and manipulate. For example a processor that is converting a car model for use in a racing game might want to separate the source artwork into separate meshes for the body of the car the wheels and the doors so that the game can easily make the wheels spin when it comes to display the car model. This can easily be implemented by using a query expression to search the Graphics DOM object model locating particular objects that have been marked as wheels.

A content compiler takes the data created by the content processors stored in the object model and converts it into a tightly packed binary format suitable for a game console such as Xbox or for PC platforms. The content compiler serializes processor data into a binary bitstream. It also provides an incremental build for content so that only the items that have actually changed are rebuilt instead of rebuilding everything in the project as is traditionally the case in game building. The content compiler also determines dependencies this piece of code requires another piece of code to run and rebuilds all the dependencies too. The content compiler also generates a list of build errors. When the user creates a class via a processor or declarative mapping the user has created a design time class. Typically a user will develop a game on a PC even if the game when built will run on a console and will be subject to the hardware characteristics of the graphics card of the console. Thus the design time object and the object that will be executed the runtime object are not the same. The code generator takes the user defined class as a processor or declarative map and converts it to the proper class required for execution. It also creates a class the user can use when writing game logic code. This way the user does not have to use different processors for the target platform which makes is easier to build cross platform games. The content loader is the portion of the system used during execution of the game game runtime . It is responsible for converting compiled content e.g. compiled asset into executable game objects e.g. game object . Assets are identified by unique names. The loader loads in associated data for the asset and manages the execution lifetime of the object and unloading of the object following execution.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

