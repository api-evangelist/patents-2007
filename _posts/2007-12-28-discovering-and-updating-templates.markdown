---

title: Discovering and updating templates
abstract: Embodiments are provided to maintain templates associated with a client. New and updated templates can be provided to the client and accessed by a user. In an embodiment, a system can be configured to automatically update locally stored templates with updated templates associated with a library. The updated templates can replace or be used to update the locally stored templates and be used by an application user. In one embodiment, a client can be configured to automatically initiate an update process to retrieve and/or receive new and updated templates from an associated document library. The update process can also be used to provide additional information associated with a template, such as metadata describing aspects of an associated template.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933871&OS=07933871&RS=07933871
owner: Microsoft Corporation
number: 07933871
owner_city: Redmond
owner_country: US
publication_date: 20071228
---
Collaboration systems can be used by groups of users when working on collaborative projects. A collaboration system can include document libraries which can be used as repositories for maintaining documents and document templates. A document library can be included on a dedicated server and document templates can be accessed by users having appropriate access credentials. A document template can be used as a starting point for users to develop their own work product. Correspondingly a user may save many hours when using a document template as a building block to create a personalized document. Moreover document templates can be used to maintain a consistent document appearance and behavior for collaborating teams.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are provided to maintain templates and other information associated with a client. New and updated templates can be provided and used by a user. In an embodiment a system can be configured to automatically update locally stored templates with updated templates associated with a library. The updated templates can replace or be used to update the locally stored templates and then be used by an application user. In one embodiment a client can be configured to automatically initiate an update process to retrieve and or receive new and updated templates from an associated document library. The update process can also be used to provide additional information associated with a template such as metadata describing aspects of an associated template.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

Embodiments are provided to automatically provide templates to users. In an embodiment a system can be configured to automatically locate and provide templates associated with a document library to application users. The templates can be stored locally and used by an application user when creating documents projects spreadsheets presentations emails drawings etc. In one embodiment a system can automatically provide new and updated templates as part of an update process. The system includes a client which can be configured to initiate the update process with a server to update templates stored locally with the client. Updated templates can replace or be used to update the locally stored templates and be used by an application user. For example template parameters of a local template can be compared to template parameters of an updated template to determine what parts of the locally stored template should be updated as compared with the updated template. The update process can also be used to provide additional information associated with a template such as extensible markup language XML data and metadata describing aspects of a template and an associated document library.

In another embodiment a processor based system can automatically provide document templates based in part on user links as part of a web service call. The user links point to targets such as sites libraries templates etc. that are available for the associated user. In one embodiment the system includes a client that can be configured to periodically make a web service call to obtain a list of links on a server wherein the links are targeted to an associated user. The links point to document libraries which include document templates that can be propagated to the client from associated websites or other locations. For example templates associated with a user s my links can be automatically provided to a client and stored locally for use by an application user. Thereafter the templates are available to an offline or online user for use in generating a work product such as a tailored document based on an updated document template for a collaboration project.

As described below components of the system can be configured to provide templates to one or more clients associated with the system . For example an administrator can upload new and or updated document templates to a shared site and associated users can use the uploaded document templates to create collaborative documents for a workgroup. New and or updated templates can be provided to a client so that an associated user has the most up to date templates for use in creating documents. In an embodiment components of the system can be configured to automatically provide document templates associated with one or more document libraries to associated users as part of a client initiated update process. Correspondingly once the updated document templates are in place users can generate work product such as tailored documents from the associated document templates.

The system includes networking security and or other communication functionality to provide a collaborative interactive environment for associated users. Accordingly the system and its components include functionality to communicate with other computing devices communication devices and or other systems and the system is not intended to be limited to the embodiments and examples described herein. The system and its components can be configured to communicate via a wired wireless and or combination of various communication networks.

For example WAN LAN distributed cellular pager and other network communication services can be used as a communication means for components of the system . In one embodiment the system can be configured as a networked software based system as part of a distributed computing environment such as a .NET framework for example. Additionally while a certain number and configuration of components are shown in the system can include other numbers of components and various configurations. For example the system can include a plurality of computing devices clients servers libraries and other components.

With continuing reference to the system includes a computing device including a client and a serving computing device hereinafter referred to as server but the system is not so limited. For example the computing device can be configured as a desktop laptop handheld tablet or other computing device. While the system is shown to include a client the system can include multiple clients wherein each client can include various functionality and other components. The client includes an update component that can be configured to initiate an update or synchronization process with the server in order to update templates stored locally in store . As described below as part of the update process the update component can also store XML data and or XML files associated with templates template locations user group s and other information.

As shown in the system also includes a number of document libraries n where n is an integer. The document libraries n include an associated number of templates n . For example a template can consist of an XML based representation which can include a set of XML files representing an application definition and a set of manifest XML files representing an associated application structure. Templates can be configured to include a predefined structure that addresses a particular user need or implementation such as word processing templates site templates presentation templates etc.

As an example templates can be used as a starting point to create a site where users can create organize and share information create a site having a blank home page for customization create a site for document collaboration create a site where users can quickly and easily add edit and link web pages create a site where users can post information and allow others to provide comments create a site to plan organize and track meetings create a blank meeting workspace site for user customization create a site for reviewing documents and recording decisions made at an associated meeting create a site to assist in planning and coordinating social occasions create a site with tools to plan organize and track meetings with multiple pages etc.

According to an embodiment the document libraries can use SharePoint collaboration service functionality to provide a collaboration and storage site for templates and other information. According to one embodiment structured query language SQL functionality can be used to store and maintain content associated with the document libraries. Document libraries can be described as information repositories including information collections and other data. For example certain document libraries can include content associated with designated applications users etc. To simplify the discussion document library and the associated templates will be used in the following description.

The document library includes a number of templates that can be shared by designated users such as users associated with user groups or having certain access rights. The document library can also include metadata XML data and other data that can be used in describing aspects of the templates including template name location modification date administrator s user group s size uniform resource locator URL of the path to the template s etc. As described below the client can use the update component to automatically maintain and update the templates stored locally in store .

In an embodiment the update component can be configured to compare one or more parameters of stored templates with one or more parameters of associated templates located in a document library as part of an update process to update local templates stored in the store . As part of the update process the update component can be used to retrieve and or receive new and or updated templates from the server . In one embodiment the update component can be configured to examine one or more template attribute values when determining whether to update a locally stored template.

For example the update component can compare template modification data and or file name data to ascertain whether a locally stored template should be replaced with an updated template maintained in the document library . Accordingly the update component can be used to maintain templates stored locally and can also be used to receive new templates. In an alternative embodiment components of the server can be configured to determine whether a new template should replace a template stored locally on the computing device and can operate to communicate a new template or updated template to the client for local storage to the store .

With continuing reference to the server can be configured to provide web hosting functionality document storage functionality navigation functionality search functionality application integration functionality interactive functionality personalization functionality and other collaborative functionality. Additionally the server can include various functionality and other components such as a front end functionality web servicing functionality metadata managing functionality markup language functionality etc. In one embodiment the server can be configured as a web server and information associated with the document libraries n can be provided by and accessed through a web service infrastructure.

As shown in the server can be configured to include a service component and a generator component but the server is not so limited. The service component can be used to update information associated with the document libraries n . For example a user such as an administrator can use a web browser or other interactive interface and use the service component to interact with the document library when updating or adding associated content. A user such as an administrator can use the service component to add new templates update templates define user groups define access rights update add content and or perform other operations associated with the document library .

The service component can also be used to set one or more indicators to identify particular document libraries having templates to refer to during an update process when updating templates associated with a client such as client . Each indicator can be included as part of an associated user link e.g. my links data structure which can be retrieved using a web service call. In one embodiment the service component can be used to set a template synchronization flag to identify a document library to use when updating one or more templates as part of an update process. For example the service component can be used to set a flag identifying each document library and the associated templates for use in updating one or more of the templates stored locally in store wherein the flag can be included in the data structure of an associated URL.

The service component can be used to control user access to certain document libraries. In one embodiment the service component can be used to define a set of document libraries that can be used to acquire templates. For example an administrator can use the service component to associate a first group of users with a first set of document libraries while associating a second group of users with a second set of document libraries. Correspondingly the first group of users can use templates associated with the first set of document libraries and the second group of users can use templates associated with the second set of document libraries. Moreover the first group of users can receive or retrieve template updates from the first set of document libraries while the second group of users can receive or retrieve template updates from the second set of document libraries.

As described briefly above the server also includes a generator component . The generator component can be used by the server to generate information associated with an update process for an associated client such as client but the generator component is not so limited. In an embodiment the generator component can be configured to generate XML data associated with a document library and associated templates as part of the update process. As described below the generated XML data can be used to update templates and other information associated with the client .

In one embodiment the generator component can generate XML data to include an enumeration of templates associated with a document library including descriptive data for each template contained in the document library. The generator component can also be configured to generate an XML file describing templates for an associated document library wherein the XML file can include a URL of a save path to the document library. The URL can be used when determining a default save location of any of the templates described in the XML file. The XML files and or XML data can be communicated to the client as part of an update process and stored to store .

As described above as part of an update or synchronization process the client can use the update component to receive or retrieve updated templates associated with one or more document libraries. As part of the update process the update component can use a number of template parameters associated with locally stored templates to determine whether to update one or more locally stored templates. In one embodiment the update component can compare cached XML data associated with the local template parameters to XML data associated with updated template parameters generated by the generator component to determine whether to update one or more locally stored templates. For example the update component can compare template modification data e.g. filenames modification dates etc. to determine whether a locally stored template should be replaced with an associated template of a document library. The server can use the template parameters to package new and updated templates which can be communicated to the client.

In another embodiment the server can be configured to compare template modification data such as a modification date or modified file name for example to determine if an updated template should be communicated to the client . If an associated template has been updated and the indicator indicates using a particular document library for updates the server can generate XML data and or XML files so that the proper templates can be delivered to or retrieved from the appropriate document library by an associated client . Correspondingly the system TOO can automatically provide the templates for access and use by designated users. For example a document template can be automatically downloaded from a document library to a designated client and provided in a link menu for use as a building block to generate tailored documents.

In one embodiment the client and server can be configured to communicate using a number of application programming interfaces APIs such as a number of web service APIs for example. As described above a markup language such as XML for example can also be used to communicate information between the client server and one or more document libraries. In one embodiment one or more APIs can be configured to read a default save location from an XML file generated by the generator component as part of a save operation. As described above the generator component can generate an XML file to include a description of all the templates at a site location such as a document library or other information repository. The one or more APIs can use the generated XML file to apply a default save location to a user generated document wherein the default save location can be made dependent on the underlying template used to generate the user s document.

With continuing reference to at the client can be used to register with the server . For example a user can register using a profile with a shared services provider SSP to be associated with one or more document libraries. In one embodiment as part of a registration process and in order for the client to gain visibility with the server a URL associated with each document library can be added to a list associated with a user s links. An indicator such as a flag for example associated with each document library can also be set to identify that a particular document library should be used when providing templates to an associated user. For example an SSP administrator can add URLs of appropriate document libraries to a published links location associated with the server to make sure that the client will have access to templates and other information associated therewith.

Additionally as part of the registration process a user can navigate to each desired document library and add the associated URL to a list associated with the user s links. For example a user can use the my links interface to associate one or more document libraries with the user s profile. A user initiated action can also operate to set an indicator associated with each selected document library to indicate a preferred template repository. Thereafter as described below templates associated with each document library are available to an associated user.

As described briefly above new and or updated templates can be automatically provided to the client after registering with the server and logging in. For example a user can use the client to register with the server to create a profile username and password for logging in to the system . An administrator can also control which document libraries and templates that a user can access. For example certain group members are only able to access templates from document libraries that are associated with the particular group. Accordingly the group members would be able to automatically retrieve or receive updated templates from the associated document libraries.

Once registered and logged in the client can be configured to automatically locate templates for access and use by an associated user. Additionally the client on some basis can use the update component to automatically retrieve or receive template updates as part of a template update procedure. For example the client can periodically use the update component to identify document libraries to use and update locally stored templates. In one embodiment the template update procedure can be configured to occur as part of an idle task associated with the client .

As shown in at the client can use the update component to check an update or synchronization time to determine whether to update locally stored templates. For example the update time can be programmed for each hour day week month etc. In another embodiment the client can use the update component and begin the template update process when an application first launches or at a time when a user would like to see all available templates. For example the client can use the update component to start the update process when a user selects file and new or the file and open dialog.

If it is not time to update the flow returns to . If it is time to update at the client calls the server with a request for template updates. In one embodiment the client can be configured to make a web service call e.g. using a Simple Object Access Protocol SOAP requesting a list of relevant URLs from the server wherein the relevant URLs are associated with document libraries having templates of interest to the user. For example the client can use a PublishedLinksService web service call to obtain a list of published links on the server that are targeted to the client . The call can be implemented in part by writing a registry key that identifies the URL of the service that the client calls to get a list of resource URLs that are appropriate for the client . The client can use the URLs to locate and download templates of interest from the associated document library.

At the server returns a list of URLs e.g. a user s my links and associated flags based in part on the client request. In an embodiment the client can operate to cache the returned URLs and flags in the registry and create links for a site list based on the URLs and flags. At the client creates provider entries for each list entry in the list of URLs wherein each provider entry corresponds to a document library having one or more templates of interest. In another embodiment the server can be configured to create the provider entries for each list entry associated with the list of URLs. Alternatively the server can use the URLs to automatically push templates to the client .

At the client sends a request to the server for XML data and any templates from each provider delineated at . In one embodiment the client can be configured to request an XML file including any metadata which describes the template architectures template locations template modification information and or other template data. For example the client can request an XML file from each provider to include a URL of a save path to an associated document library and the URL can be used when determining a default save location of any of the templates described in the XML file. At the server can operate to return the requested XML data from each designated provider including relevant template information which can be used to determine whether to replace templates stored locally with the client . For example the server can return an XML file which includes an enumeration of templates including template data and metadata associated with each document library. Each XML file can include binary template files schema and any associated metadata but the XML files are not so limited.

In one embodiment the server can also return template modification data that the client can use to determine whether to replace locally stored templates by comparing the associated modification data with cached modification data. For example the server can return XML data which includes a template modification date and or a template name that can be used to compare to a date and or name of a locally stored template. At the client can use the update component to compare the XML data associated with the relevant templates to the locally stored template data. For example the client can compare template attribute data to similar data cached in the local registry.

If the client determines that the locally stored templates are out of date or otherwise require updating at the client can replace the local templates with any new and or updated templates associated with each document library. In one embodiment the client can compare local template attribute values with attribute values of templates associated with flagged document libraries to determine whether the local templates should be replaced with updated templates. In an alternative embodiment the client can be configured communicate template data associated with locally stored templates to the server which the server can use to determine if updated templates should be communicated to the client to replace any outdated templates.

The client can then operate to store any updated templates locally for use. If the update process is interrupted for some reason e.g. timeout network disconnect etc. the client can resume the update process during a subsequent update process or idle period. Once the update process is complete any new and or updated templates are available to the user for some use. In one embodiment new and or updated templates can be presented to a user when the user selects file and then new from an associated application dialog. For example templates from SharePoint site locations discovered by the client can be displayed to a user having authoring rights. Additionally a user s work product generated from a template can be saved locally as well as at a default location associated with the document library. Furthermore since any new or updated templates are saved locally a user is able to work with a template while in an offline or disconnected mode.

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld tablet or other type of computer capable of executing one or more application programs. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM .

The computer further includes a mass storage device for storing an operating system application programs and other program modules. The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments of the invention the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of input types including a keyboard mouse pen stylus finger and or other means. Similarly an input output controller may provide output to a display a printer or other type of output device. Additionally a touch screen can serve as an input and an output mechanism.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store application programs such as a word processing application a spreadsheet application e mail application drawing application etc.

It should be appreciated that various embodiments of the present invention can be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

