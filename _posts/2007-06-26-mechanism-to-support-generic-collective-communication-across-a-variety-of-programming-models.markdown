---

title: Mechanism to support generic collective communication across a variety of programming models
abstract: A system and method for supporting collective communications on a plurality of processors that use different parallel programming paradigms, in one aspect, may comprise a schedule defining one or more tasks in a collective operation, an executor that executes the task, a multisend module to perform one or more data transfer functions associated with the tasks, and a connection manager that controls one or more connections and identifies an available connection. The multisend module uses the available connection in performing the one or more data transfer functions. A plurality of processors that use different parallel programming paradigms can use a common implementation of the schedule module, the executor module, the connection manager and the multisend module via a language adaptor specific to a parallel programming paradigm implemented on a processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984448&OS=07984448&RS=07984448
owner: International Business Machines Corporation
number: 07984448
owner_city: Armonk
owner_country: US
publication_date: 20070626
---
This invention was made with Government support under Contract. No. B554331 awarded by Department of Energy. The Government has certain rights in this invention.

The present invention is related to the following commonly owned co pending United States Patent Applications filed on even date herewith the entire contents and disclosure of each of which is expressly incorporated by reference herein as if fully set forth herein. U.S. patent application Ser. No. 11 768 777 for A SHARED PERFORMANCE MONITOR IN A MULTIPROCESSOR SYSTEM U.S. patent application Ser. No. 11 768 645 for OPTIMIZED COLLECTIVES USING A DMA ON A PARALLEL COMPUTER U.S. patent application Ser. No. 11 768 781 for DMA SHARED BYTE COUNTERS IN A PARALLEL COMPUTER U.S. patent application Ser. No. 11 768 784 for MULTIPLE NODE REMOTE MESSAGING U.S. patent application Ser. No. 11 768 697 for A METHOD AND APPARATUS OF PREFETCHING STREAMS OF VARYING PREFETCH DEPTH U.S. patent application Ser. No. 11 768 532 for PROGRAMMABLE PARTITIONING FOR HIGH PERFORMANCE COHERENCE DOMAINS IN A MULTIPROCESSOR SYSTEM U.S. patent application Ser. No. 11 768 857 for METHOD AND APPARATUS FOR SINGLE STEPPING COHERENCE EVENTS IN A MULTIPROCESSOR SYSTEM UNDER SOFTWARE CONTROL U.S. patent application Ser. No. 11 768 547 for INSERTION OF COHERENCE EVENTS INTO A MULTIPROCESSOR COHERENCE PROTOCOL U.S. patent application Ser. No. 11 768 791 for METHOD AND APPARATUS TO DEBUG AN INTEGRATED CIRCUIT CHIP VIA SYNCHRONOUS CLOCK STOP AND SCAN U.S. patent application Ser. No. 11 768 795 for DMA ENGINE FOR REPEATING COMMUNICATION PATTERNS U.S. patent application Ser. No. 11 768 799 for METHOD AND APPARATUS FOR A CHOOSE TWO MULTI QUEUE ARBITER U.S. patent application Ser. No. 11 768 800 for METHOD AND APPARATUS FOR EFFICIENTLY TRACKING QUEUE ENTRIES RELATIVE TO A TIMESTAMP U.S. patent application Ser. No. 11 768 572 for BAD DATA PACKET CAPTURE DEVICE U.S. patent application Ser. No. 11 768 593 for EXTENDED WRITE COMBINING USING A WRITE CONTINUATION HINT FLAG U.S. patent application Ser. No. 11 768 805 for A SYSTEM AND METHOD FOR PROGRAMMABLE BANK SELECTION FOR BANKED MEMORY SUBSYSTEMS U.S. patent application Ser. No. 11 768 905 for AN ULTRASCALABLE PETAFLOP PARALLEL SUPERCOMPUTER U.S. patent application Ser. No. 11 768 810 for SDRAM DDR DATA EYE MONITOR METHOD AND APPARATUS U.S. patent application Ser. No. 11 768 812 for A CONFIGURABLE MEMORY SYSTEM AND METHOD FOR PROVIDING ATOMIC COUNTING OPERATIONS IN A MEMORY DEVICE U.S. patent application Ser. No. 11 768 559 for ERROR CORRECTING CODE WITH CHIP KILL CAPABILITY AND POWER SAVING ENHANCEMENT U.S. patent application Ser. No. 11 768 552 for STATIC POWER REDUCTION FOR MIDPOINT TERMINATED BUSSES U.S. patent application Ser. No. 11 768 527 for COMBINED GROUP ECC PROTECTION AND SUBGROUP PARITY PROTECTION U.S. patent application Ser. No. 11 768 813 for MESSAGE PASSING WITH A LIMITED NUMBER OF DMA BYTE COUNTERS U.S. patent application Ser. No. 11 768 619 for ASYNCRONOUS BROADCAST FOR ORDERED DELIVERY BETWEEN COMPUTE NODES IN A PARALLEL COMPUTING SYSTEM WHERE PACKET HEADER SPACE IS LIMITED U.S. patent application Ser. No. 11 768 682 for HARDWARE PACKET PACING USING A DMA IN A PARALLEL COMPUTER and U.S. patent application Ser. No. 11 768 752 for POWER THROTTLING OF COLLECTIONS OF COMPUTING ELEMENTS .

The present disclosure relates generally to parallel computer and more particularly to a method and system for supporting generic collective communication across a variety of programming models.

Parallel computer applications often use message passing to communicate between processors. Message passing utilities such as the Message Passing Interface MPI support two types of communication point to point and collective. In point to point messaging a processor sends a message to another processor that is ready to receive it. In a collective communication operation however many processors participate together in the communication operation. Examples of collective operations are broadcast barrier all to all etc.

Each collective communication operation needs to be optimized to maximize performance. The known methodologies implement the collective communication operations through separate calls and in a separate software stack. Most typical implementations are specific to hardware or part of specific languages or runtimes. Such implementation methods result in high development and maintenance overheads. In addition in known methodologies this type of implementations is repeated for every new version of a parallel computer. For different parallel computers or different versions of a parallel computer several different parallel programming paradigms need to be supported and each of them may define its own collective primitives. Each of these requires separate implementations and optimized runtimes.

Thus a framework that isolates the fundamental components of collective communication to minimize the development effort across different parallel programming languages and supercomputer architectures is desirable.

System and method for supporting collective communications on a plurality of processors that use different parallel programming paradigms are provided. The system in one aspect may comprise a schedule module operable to define one or more tasks in a collective operation an executor module operable to execute said one or more tasks a multisend module operable to perform one or more data transfer functions in said one or more tasks a connection manager operable to control one or more connections and identify an available connection. The multisend module is further operable to use the available connection in performing the one or more data transfer functions. The system may also include a language adaptor operable to interface at least to the multisend module. A plurality of processors that use different parallel programming paradigms may use a common implementation of the schedule module the executor module the connection manager and the multisend module via the language adaptor specific to a parallel programming paradigm.

A method of supporting collective communications on a plurality of processors that use different parallel programming paradigms in one aspect may comprise receiving an application call invoking a collective operation from a processor via a language adaptor creating a schedule defining one or more tasks in a collective operation creating a executor for executing said one or more tasks and invoking a multisend operation to perform a communication tasks associated with said one or more tasks.

In another aspect a method of supporting collective communications on a plurality of processors that use different parallel programming paradigms may comprise receiving a plurality of application calls invoking a collective operation from a plurality of processors using different parallel programming language each of the plurality of application calls being received via a language adaptor specific to a parallel programming language implemented in a processor. The method may also include for each of the plurality of application calls creating a schedule defining one or more tasks in a collective operation associated with an application call creating a executor for executing said one or more tasks and invoking a multisend operation to perform a communication tasks associated with said one or more tasks.

Yet in another aspect a program storage device readable by a machine tangibly embodying a program of instructions executable by the machine to perform a method of supporting collective communications on a plurality of processors that use different parallel programming paradigms may comprise receiving an application call invoking a collective operation from a processor via a language adaptor creating a schedule defining one or more tasks in a collective operation creating a executor for executing said one or more tasks and invoking a multisend operation to perform a communication tasks associated with said one or more tasks.

Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements.

The system and method of the present disclosure in one embodiment modularize and support a plurality of functionalities and sub functionalities in providing a collective framework that can be used across different parallel computers that use different message passing programming languages or models. Modules or functionalities of the collective framework in one embodiment may include 1 programming language semantics which handles sub functionalities such as collective API application programming interface and synchronization modes 2 data transfer functionality 3 collective operations and algorithms functionality which may include sub functionalities such as phase by phase traversal of virtual and physical topologies and network optimizations 4 specific optimization functionalities such as pipelining phase independence and multi color routes.

A schedule for instance handles a functionality of collective operations and algorithms. A schedule includes a set of steps in the collective algorithm that executes a collective operation. Collective operation may be a call in MPI such as broadcast allreduce and other calls. Collective algorithm describes how the collective is done for example spanning tree broadcast algorithm. A schedule traverses graphs and topologies of nodes in the parallel computer. In one embodiment the schedule is generated for each node in the collective operation. The schedule may depend on the rank of the node and the rank of the root of the collective. Briefly ranks identify processes participating in the message passing operation.

A schedule may split a collective operation into phases. For example a broadcast can be done through a spanning tree schedule where in each phase a message is sent from one node to the next level of nodes in the spanning tree. In each phase a schedule lists sources that will send a message to a processor and a list of tasks that need to be performed in that phase. Examples of tasks may be sending messages or performing arithmetic operations. A schedule may be implemented as a C class which may be called by an executor. An executor then performs the list of tasks specified by the schedule .

An executor may handle functionalities for specific optimizations such as pipelining phase independence and multi color routes but not limited to only those optimizations. An executor may query a schedule on the list of tasks and execute the list of tasks returned by the schedule. An executor may also handle pipelining and specific optimizations for each collective operation. Typically each collective operation is assigned one executor.

A multisend interface provides an interface to multisend. The collective framework of the present disclosure in one embodiment may call the multisend interface . The interface may be implemented on a specific architecture for example the BlueGene P multisend implementation . For example in the Blue Gene P product there may be provided a multisend implementation to allow the collective framework to be available on Blue Gene P.

A multisend is a message passing backbone of a collective framework in the system and method of the present disclosure in one embodiment that provides data transfer functionalities. Multisend functionality allows sending many messages at the same time each message or a group of messages identified by a connection identifier Multisend provides connection functionalities for a distinct stream of data. It is typically one to many or even many to many message passing event. Multisend functionality also allows an application to multiplex data on this connection identifier.

In one embodiment of the present disclosure multisend provides point to point message passing capabilities with many messages being sent. In this embodiment the data is only sent between a pair of processors. The receiving processor needing to process the message processes the message and chooses to forward it only on a different multisend call. Thus in one embodiment of a multisend functionality of the present disclosure data is not forwarded automatically. In addition connections are managed externally and no communicators are required. That is in one embodiment multisend is independent of communicators as it may not require a group or communicator to be setup before the multisend is called. A call to multisend lists all the processors that need to participate.

Such implementation of a multisend functionality provides a good match for massive parallel computer system e.g. BlueGene P hardware or other architectures with slow cores because the message posting and startup overheads are amortized across many messages. Multisend interface allows a code implementing collective operations to be device independent. Each multisend may be a phase of a given collective operation.

A processor may multicast a message to many other destinations in a multisend call. For example a processor of rank can multicast data to processors of ranks in one call. The data from the processor of rank are then received by processors of ranks in their respective local buffers on completion of the multisend call. On the Blue Gene P torus network a multisend can be used to send a deposit bit send to destinations along a dimension of a torus. For example a processor can make a deposit bit multisend call to all its X neighbors on the torus. No predetermined groups are needed for the multisend call. A processor can issue multisends to any destinations.

A multisend of the present disclosure in one embodiment communicates to multiple nodes via a single message request. Send mechanism may involve sending data originating from at least one node to one or more destinations in which the data from different sources is distinguished at destinations using a tuple that includes at least a stream or connection identifier. The tuple may include . The multisend interface at the destination passes the data using this tuple to the schedule executor waiting for that data.

When several processors issue multisend calls to the same destination processor that destination processor would need to manage these different streams of data. In one embodiment each node keeps a connection list and if the different sources send data on different connections the data can be distinguished from one and another using the connection list and identifiers. A system and method of the present disclosure in one embodiment provides and uses a connection manager component to choose the connections for each multisend call. A connection manager in one embodiment controls a connection identifier for each multisend operation. For example many classes of a collective operation with the same schedule and executor can overlap with each other with different connection identifiers generated by the connection manager. A connection manager may maintain a list of available connections between a pair of processors and hand each multisend call an available connection. When all connections are in use a multisend call can wait for a connection to become available. Connections are identified by connection identifiers in one embodiment.

A language adaptor interfaces the collective framework to a programming language. For example a language adaptor such as for a message passing interface MPI has a communicator component . Briefly an MPI communicator is an object with a number of attributes and rules that govern its creation use and destruction The communicator determines the scope and the communication universe in which a point to point or collective operation is to operate. Each communicator contains a group of valid participants and the source and destination of a message is identified by process rank within that group. Communicators are dynamic that is they can be created and destroyed during program execution. A language adaptor may also define an API which is suitable for that programming language. The API for Unified Parallel C UPC collectives is likely to be different from MPI collectives.

Each application or programming language may implement a collective API to invoke or call collective operation functions. A user application for example implemented in that application programming language then may make the appropriate function calls for the collective operations. Collective operations may be then performed via an API adaptor using its internal components such as an MPI communicator for MPI in addition to the components in the collective framework like schedules executors multisends and connection managers.

Once all components have been implemented only the language adaptor needs to be different for each programming language. Thus all components except for the language adaptor may be reused across different processors on multiple parallel computers even on those that use different programming languages or models. Thus the system and method of the present disclosure in one embodiment abstracts collective communication into components. The scheme presented herein is general and applicable to most parallel computer hardware and most programming languages. It provides program once and use at many scenarios paradigm.

The common paradigm for collective operations of the present disclosure in one embodiment supports various semantics algorithms optimizations and data transfer in effecting collective operations. In a collective communication operation a group of processors either from a predetermined communicator or on the fly participate to do a global operation where each of them either receives data or contributes to that operation.

The different programming languages have their own semantics with regard to collectives. The following illustrates examples of semantics that the system and method of the present disclosure in one embodiment supports in its framework.

A collective algorithm is a set of steps to perform a specific collective operation. It usually involves a group of processors interacting with each other in a specific order forming a virtual topology. The virtual topology can then be aligned to the physical topology of the communication network inter connecting the processors. A schedule functionality of the present disclosure shown in may provide this functionality.

The following illustrates examples of collective operations that the system and method of the present disclosure in one embodiment supports in its framework. Collective operations supported in the system and method of the present disclosure are not limited to only those shown here.

For each collective operation there could be many specific optimizations that are exclusive to that operation. Examples of optimizations that is supported in the system and method of the present disclosure may include but are not limited to pipelining multi color collectives and phase independence.

Pipelining optimization can be applied to broadcast reduce and all reduce collectives. Here the collective is performed in small chunks and moved to intermediate nodes while the starting nodes work on the next chunk.

In a multi color collective data moves along multiple edge disjoint routes of a dense interconnection network. A collective operation can be parallelized across the different independent routes. Multi color collective is generally known and may be supported by framework of the present disclosure. An example of a multi color collective may include but is not limited to multi color rectangular broadcast where packets can go along X Y Z X directions in a nonblocking manner with packets along Y Z X Y . Each of these is represented by a color. Packets along one color do not block the other colors.

Phase independence guarantees that some collective operation phases are independent. That is the tasks in one phase are not dependent on the tasks in another phase. An executor component shown in may provide the functionalities of optimization.

In a broadcast for example the same data is sent in all phases. Each none root node receives the data once and sends data many times. Hence the data transfer operations in the different phases are independent of each other and can be done simultaneously.

A collective framework in the system and method of the present disclosure is network device independent. It functions with an external support for message passing for processors to communicate with each other in a collective operation. The data transfer in one embodiment may be through a published multisend interface. For instance the collective framework of the present disclosure may be built on top of a lower level messaging library which provides the multisend call implementation.

The above schedule is initially created or agreed upon among the processors involved in the collective operation. A schedule on each participating processor has a list of tasks specific to the respective processor s rank and the root of the collective. A schedule class may be written by a programmer who is aware of the collective operation and the topology constraints.

The executor executes the schedule and performs the sending and receiving of data as directed by the schedule. The executor calls multisend to do the actual data movement. For example on the root there may be three calls to multisend to send the data shown in . Depending on how many broadcasts are in flight the connection manager generates a unique connection identifier so that the data from the different broadcasts can be distinguished. For example a broadcast on communicator a group of processes in MPI could use the communicator identifier as the connection identifier so that many broadcasts of different collectives can occur together.

The present disclosure described a common programming paradigm for performing collective operations on parallel computers such as BlueGene P. Examples of techniques that can be used to implement the common paradigm of the present disclosure may include but are not limited to following methods. Any other mechanism may be used to extend the collective framework of components. In a new parallel computer a new multisend call may be implemented. Once that is done all the supported programming languages i.e. for which adaptors have been designed can be supported on this platform. To support a new collective algorithm or optimization for a specific architecture a new schedule may be developed to take advantage of the new features in the architecture. To extend the framework to a new programming language a new language adaptor may be developed. This would allow the collective calls in the programming language to use the general interfaces in the collective framework.

The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.

