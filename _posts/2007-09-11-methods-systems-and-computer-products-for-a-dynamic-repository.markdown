---

title: Methods, systems and computer products for a dynamic repository
abstract: A software development service offering of generating and installing software applications packages on computer systems running a set of operating systems including LINUX and UNIX operating systems, by creating a dynamic repository; populating a plurality software packages; running a tool that creates a set of index files, wherein the set of index files includes a menu of the plurality of software packages, wherein each software package in the plurality of software packages contains a set of contents; determining whether a software package is included in a menu of the plurality of software packages; and delivering to a client system the software package requested in a selection request, or delivering to the client system an other software package, when the software package is not included in the menu of the plurality of software packages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003399&OS=09003399&RS=09003399
owner: International Business Machines Corporation
number: 09003399
owner_city: Armonk
owner_country: US
publication_date: 20070911
---
IBM is a registered trademark of the International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be trademarks and registered trademarks or trade or product names of International Business Machines Corporation or other companies.

The present invention relates generally to computer systems management software services and application solutions. More particularly the present invention relates to efficiently creating software services and applications packages on demand for information technology IT solutions.

Yum yast apt repositories provide basic infrastructure to deploy software packages on Linux systems. The procedure for creating a repository requires populating the software packages and running a tool which creates index files. These index files serve as menus for client systems to pick and choose the packages required on the client systems. The client systems can then request specific packages from the Yum yast apt repository and install those packages. However this approach restricts the client systems by requiring the clients to choose only the packages available in the index files menus. This basic infrastructure for deploying software packages on Linux systems precludes the client system from selecting software packages from a range of available and desirable software packages. Additionally in this basic infrastructure for deploying software packages software packages cannot be created from the Yum yast apt repositories on demand even when the repositories have all of the content required for the software packages.

This basic infrastructure especially limits the creation of driver software packages. In most cases a driver software package built for one version of a kernel can be reused by a newer version of the kernel. Since it is impossible to determine from operating system OS vendors what all their future kernel versions will contain then making available the driver packages for those future kernel versions is impossible. This motivates the need for a dynamic repository system.

Therefore the need exists for a dynamic Yum yast apt repository infrastructure for deploying software packages on Linux systems.

Further the need exists for a method and system of selecting by client systems software packages on demand which are not restricted to predetermined menu selections.

In addition the need exists for a method and system of creating software packages by reusing content from existing software packages.

A method and system of a computer systems software development service offering by a provider computer processor is disclosed herein. The computer systems software development offering method and system efficiently create software services and applications packages on demand for information technology IT solutions. Further the computer systems software development offering method and system include providing deploying and or installing software packages on computer systems running a set of operating systems. The computer systems software development offering method and system perform the operations of creating by the provider computer processor a repository populating a plurality software packages and running a tool that creates a set of index files where the set of index files can include a menu of the plurality of software packages and where each software package in the plurality of software packages contains a plurality of content data. Further the computer systems software development offering method and system perform the operations of receiving from a client system a selection request for a software package determining whether the software package is included in the menu of the plurality of software packages and performing either delivering to the client system the software package requested in the selection request when the software package is included in the menu of the plurality of software packages or delivering to the client system an other software package when the software package is not included in the menu of the plurality of software packages. Further the computer systems software development offering method and system perform the operations of either notifying the client system when the software package is in the menu of the plurality of software packages or notifying the client system when the other software package cannot be delivered. Delivering the other software package includes sub operations of specifying that a set of contents data from the plurality of contents data in each software package in the menu of the plurality of software packages can be reused generating index files that accommodate new content data of software packages created on demand notifying the client system when the other software package is available for creation and delivery notifying the client system when the other software package is being dynamically created on demand and dynamically delivered on demand to the client system populating the other software package created dynamically updating the dynamically created software package updating the index of files where updating the index files includes providing information indicating that the dynamically created software packages are created once and used many times in deploying software packages onto computer systems running the set of operating systems and receiving from the client system a request for non existent on demand software packages. The set of operating systems includes at least one of LINUX and UNIX operating systems. Furthermore in delivering and or deploying software to the client systems for installation on the set of operating systems running on the client systems the delivering and or the deploying further includes delivering update express service software packages through a standard repository.

An exemplary embodiment of a computer systems software development service offering method and system is described in detail below. The disclosed exemplary embodiment is intended to be illustrative only since numerous modifications and variations therein will be apparent to those of ordinary skill in the art. In reference to the drawings like numbers will indicate like parts continuously throughout the view. Further the terms a an first second and third herein do not denote a limitation of quantity but rather denote the presence of one or more of the referenced item.

Computer systems software development service offering method referred to herein as dynamic repository method and computer systems software development service offering system referred to herein as dynamic repository system are illustrated in and respectively. Referring to dynamic repository method describes the exemplary operations of providing to a client user connected in dynamic repository system by a provider user of system the computer systems software development service offering of creating software services and applications packages on demand for information technology IT solutions. Further dynamic repository method includes providing deploying and or installing software packages on computer systems running a set of operating systems where the set of operating systems includes LINUX UNIX and any other UNIX like operating systems.

Referring to dynamic repository system includes provider computer processor having display controller program unit memory controller input output controller herein referred to as I O controller algorithm unit and memory . Algorithm unit contains a plurality of algorithms including a first algorithm A a second algorithm A up to an A to the nth algorithm An i.e. third fourth fifth etc. algorithms up to an infinite number of algorithms . Dynamic repository resides in memory and contains a plurality of repository entry locations R through Rn. In addition dynamic repository accommodates the storage of a plurality of provider user systems management applications data in repository entry locations up to and including Rn. Thus dynamic repository holds the information about existing software packages about systems and software applications the provider user has encountered before about applications that both the provider user and client user are familiar with about known operating system versions and about what data that projected but not existent versions may include about what solutions have been applied to other versions and data about what the provider user can learn lessons from and apply those lessons to current and prospective unknown versions. Dynamic repository is the virtual representation of a standard repository for the provider user knowledge base however physically dynamic repository can be implemented in all known forms of memory devices and storage devices including hard drives and can be set up in storage appliances all over the world. Thus the representation of dynamic repository illustrated in coincides with the verbal representation of dynamic repository described above.

In an object oriented approach dynamic database repository stores in the plurality of repository entry locations R through Rn each data item of a data model constructed to represent each object representing the class structure i.e. the knowledge representation of the class structure that supports application programming interface API fuzzy matching queries in regard to non existent LINUX kernel driver versions.

Client applications database is connected to client network and contains a plurality of client systems management applications . Provider input device is connected to I O controller . Client applications database client control computer CSI a plurality of client computers i.e. client computer C client computer C through client computer Cx and provider network interface are connected to client network . Each client systems management application of the plurality of client systems management applications is available for running on any of the plurality of client computers C and C through Cx and the plurality of client computers C and C through Cx can be accessed by provider computer processor via provider network interface depending on a degree of access the provider user receives from the client user. In this case client computer Cx theoretically represents an infinite number of client computers where x equals infinity limited only by known network physical and bandwidth capacities. The plurality of provider systems management applications are accessed by provider computer processor through memory controller . Provider input device provides interaction with provider computer processor by the provider user. Client control computer C includes client display device client input device and client output device . Client input device provides interaction with provider computer processor by the client user via client network .

Referring to and at operation start of dynamic repository method an operator user using provider input device activates and initiates program where dynamic repository method is stored as executable program code on a computer executable medium. Input device can be any one of a plurality input devices including any one or more of a mouse a keyboard a joystick a thumb wheel and a touch screen. The operator user activates program and performs other selections in dynamic method by making entries using input device thus causing program to be executed by provider computer processor to perform the operations of dynamic repository method thereby providing a computer systems software development service offering of providing deploying and installing software packages on computer systems running a set of operating systems.

At operation create repository herein referred to as operation program when executed by provider computer processor causes provider computer processor of dynamic repository system to create a dynamic repository that provides the basic infrastructure to deploy software packages on LINUX UNIX and UNIX like operating systems. Where dynamic repository method and system generate software packages on the fly in response to the demand of the client system through client control computer C by reusing the content of other existing software packages. In the exemplary embodiment a driver package built for one version of a LINUX and or UNIX kernel can be reused by a newer version of the kernel even when kernel versions released and or to be released by an operating vendor are unknown. Thus the exemplary embodiment removes the restriction on client systems of only being able to select packages available from a menu.

At operation populate repository herein referred to as operation program when executed by provider computer processor causes provider computer processor of dynamic repository system to populate a plurality of contents of the dynamic repository with data including content data D stored in repository entry location R of dynamic repository and version data D stored in entry location R for deployment and installation in software packages including a plurality of driver software packages for use in a plurality of versions of LINUX UNIX and UNIX like operating system kernels released by operating system vendors. The content data D can include loading installation or plugin data package install argument data size type and length data. Index file data D can be stored in repository entry location R.

At operation run tool to create index files herein referred to as operation program when executed by provider computer processor causes provider computer processor of dynamic repository system to run a tool by calling one or more of the plurality of algorithms from algorithm unit which includes first algorithm A second algorithm A up to nth algorithm An which creates a plurality of index files. The plurality of index files function in a manner similar to a menu for the client systems to select the packages they require causing provider computer processor to receive a signal from client control computer C requesting selected packages.

At operation receive client software request herein referred to as operation program when executed by provider computer processor causes provider computer processor of dynamic repository system to receive a client request for a software package selected on behalf of the client system over client network by the client through client control computer C where the client control system C can request specific packages to be deployed and installed from the dynamic repository where the specific packages are installed on the plurality of client computers C C up to Cx.

At operation requested software is in menu of plurality software herein referred to as operation program when executed by provider computer processor causes provider computer processor of dynamic repository system to determine whether the software package requested by client control computer C is in the menu and or is available through an application programming interface API call directed to accessing by either the operator user of dynamic system or the client control computer C the index files created in operation .

When provider computer processor determines that the software package requested by client control computer C is in the menu and or is available through an API call from the index files created in operation YES then program causes provider computer processor to perform operation notify client software is in menu herein referred to as operation and causes provider computer processor to perform operation deliver software to client herein referred to as operation .

At operation program causes provider computer processor to notify client control computer C that the software selected by client computer C is either in the menu and or is available through an API call directed to the index files created in operation . The notification can be transmitted by provider computer processor and received by client control computer C by one or more electrical electronic and or physical modes of transmitting and receiving including audio indicators including speakers visual indicators including display screens such as client display device and LEDs including provider computer processor transmitting the notification in response to receiving a signal from client input device accessing an Internet file over client network including electronic mail devices and or scanned documents sent via facsimile over client network .

At operation program causes provider computer processor to deliver a software package selected by client control computer C based on a selection signal transmitted by client control computer C and said selection signal being received by provider computer processor over client network . The software package selected by client control computer C can be transmitted by provider computer processor and received by client control computer C by one or more electrical electronic and or physical modes of transmitting and receiving including audio indicators including speakers visual indicators including display screens such as client display device including provider computer processor transmitting the software package in response to receiving a signal from client input device accessing an Internet file over client network including electronic mail devices and or scanned documents sent via facsimile over client network .

When provider computer processor determines that the software package requested by client control computer C is not in the menu and or is not available through an API call directed to the index files created in operation i.e. NO then program causes provider computer processor to determine at operation is an other software package delivered herein referred to as operation whether or not an other software package can be delivered to the client system i.e. to client control computer C. When provider computer processor determines at operation that an other software package can be delivered YES then program causes provider computer processor to deliver an other software package to client control computer C.

At operation deliver an other software package to client by performing sub operations herein referred to as operation program causes provider computer processor to deliver an other software package to client control computer C by performing sub operations through .

At sub operation program causes provider computer processor to specify that the content data D of a software package can be reused thus program causes provider computer processor to retrieve applicable content data D from dynamic repository and from that data generated for the an other package on demand from client control computer C by reusing the content data D of existing packages where the content data D of existing packages are stored in dynamic repository .

At sub operation program causes provider computer processor to run an index creation tool by calling one or more of the plurality of algorithms from algorithm unit create a plurality of index files containing index file data D stored in repository entry location R of dynamic repository that represent an other non existent packages where the other non existent packages represented however can be created on demand by reusing content data D of existing packages combined with index file data D.

At sub operation program causes provider computer processor to notify client control computer C when the other software packages known to be non existent are available and can be supplied on demand by dynamic repository system . The notification can be transmitted by provider computer processor and received by client control computer C by one or more electrical electronic and or physical modes of transmitting and receiving including audio indicators including speakers visual indicators including display screens such as client display device and LEDs including provider computer processor transmitting the notification in response to receiving a signal from client input device accessing an Internet file over client network including electronic mail devices and or scanned documents sent via facsimile over client network .

At sub operation program causes provider computer processor to notify client control computer C that the other software packages advertised as known to be non existent are now being dynamically created and delivered on demand to client control computer C. The notification can be transmitted by provider computer processor and received by client control computer C by one or more electrical electronic and or physical modes of transmitting and receiving including audio indicators including speakers visual indicators including display screens such as client display device and LEDs including provider computer processor transmitting the notification in response to receiving a signal from client input device accessing an Internet file over client network including electronic mail devices and or scanned documents sent via facsimile over client network .

At sub operation program causes provider computer processor to populate the dynamically created other software package including populating the other software package with content data from dynamic repository . The content data can include loading installation or plugin data package install argument data size type and length data.

At sub operation program causes provider computer processor to perform updating of the one or more dynamically created other software package and or packages in a manner that causes these dynamically created other software packages to be delivered as updated express software packages delivered through a standard repository that can accommodate and store non standard and or non existent data by creating content data D by combining existing content data D version data D and index file data D in dynamic repository through fuzzy matching selections conducted by provider computer processor .

At sub operation program causes provider computer processor to perform updating of the index file data D of index files representing the one or more dynamically created other software package and or packages in a manner that causes these dynamically created other software packages to be created once and used many times.

At sub operation program causes provider computer processor to receive from client control computer C additional requests for non existent on demand software packages.

At operation return end dynamic repository method and system can be directed by program to either return to any of the above operations and or sub operations to continue iteratively processing and performing said operations and sub operations for a plurality of existent and non existent software application packages or directed by program to end all operations and sub operations of method and system .

When dynamic repository method and system are directed by program to return to any of the above operations and or sub operations to continue iteratively processing and when at operation provider computer processor determines that there is not an other software package that can be delivered to client control computer C NO then at operation notify client control computer C that an other software package cannot be delivered herein referred to as operation program causes provider computer processor to notify client control computer C that any other software package cannot be created and delivered and then dynamic repository method and system ends all operations and sub operations and operation return end .

Control database repository contains a plurality of repository entry locations R through Rn. In addition control database repository accommodates the storage of a plurality of provider user systems management application data in repository entry locations up to repository entry location Rn. Thus control database repository holds data about problems that have already been solved about operating systems the provider user has encountered before about systems that both the provider user and client user are familiar with about known version data D and about what solutions have been applied to other operating systems software problems before that the provider user can learn lessons from and apply those lessons to current and prospective unsolved computer operating systems version management problems. Control database repository is the virtual representation of a standard repository for the provider user knowledge base however physically control database repository can be implemented in all known forms of memory devices and storage devices including hard drives and can be set up in storage appliances all over the world. Thus the representation of control database repository illustrated in coincides with the verbal representation of control database repository described above.

In an object oriented approach control database repository stores in the plurality of repository entry locations R through Rn each data item of a data model constructed to represent each object representing the class structure i.e. the knowledge representation of the class structure that supports application programming interface API fuzzy matching queries.

While the disclosure has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the disclosure. In addition many modifications may be made to adapt a particular situation or material to the teachings of the disclosure without departing from the essential scope thereof. Therefore it is intended that the disclosure not be limited to the particular exemplary embodiment disclosed as the best mode contemplated for carrying out this disclosure but that the disclosure will include all embodiments falling within the scope of the appended claims.

