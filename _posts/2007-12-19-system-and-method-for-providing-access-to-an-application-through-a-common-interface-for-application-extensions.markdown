---

title: System and method for providing access to an application through a common interface for application extensions
abstract: A method and system to permit externally created business objects to access a business management application database without using direct database language statements. An add-on framework includes an add-on extension manager to start an add-on application, register a form from the add-on application, and receive and route an event from the business management application to the add-on application through a user interface application programming interface component object model interface. A persistency layer provides a set of programming language classes and interface definitions to develop a persistent business object in the add-on extension, and connect the persistent business object to a database through a data interface application programming interface component object model interface to read and write data from the database associated with the business management application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07860890&OS=07860890&RS=07860890
owner: SAP AG
number: 07860890
owner_city: Walldorf
owner_country: DE
publication_date: 20071219
---
This application claims the benefit of and priority to U.S. application Ser. No. 10 953 772 filed Sep. 30 2004 which is hereby incorporated by reference in its entirety.

The invention relates to software applications for and in particular to methods and systems to permit business objects to read data from and write data to a business management application database without using direct database language statements.

It is common that organizations using commercial off the shelf business management software applications accounting logistics and customer relationship management software need to extend the software to meet their specific requirements. For example the organizations may need to permit add on applications i.e. extensions to read data from and write data to a database associated with the business management software. Unfortunately this usually requires creating individual programs using database language statements for example structured query language SQL statements for each add on business application. In addition to each add on application needing code specific to the particular add on the code must also be tailored for the specific type database that it is trying to access. Typically current business management software applications do not directly provide a simple and uniform access mechanism for add on business applications to access the databases associated with the business management software applications.

There is a need for a method and system to permit business objects to read data from and write data to the business management application database without using database language statements and to have a business object layer communicate with a persistence layer via a well defined interface.

As described herein exemplary embodiments of the present invention include a business management software application add on framework that provides a generalized method mechanism to permit add on business applications for example user and or third party add on applications to read data from and write data to a database associated with the business management software without requiring the add on business application to use structured query language SQL statements. The add on framework may be connected to and permit an add on business application to communicate with the business management software application through a user interface UI application programming interface API and a data interface DI API. The add on business application may have a persistent business object to communicate with a persistency layer via a well defined interface.

In accordance with some embodiments of the present invention the persistency layer may provide a single unified interface for all application s designed as an add on to the business management software application to access the main data base management system without having to use SQL statements. The persistency layer may simplify the implementation of persistent business objects since the persistency layer may not only generate SQL statements it may also handle the conversion of data according to the corresponding data type. For example a date can be treated in different ways depending on which database management system DBMS is used. The persistency layer may also ensure the security of the add on application by preventing backward contamination of the add on application s data since there may exist situations in which a SQL injection could contaminate the data in the add on application. SQL injection is a technique in which an attacker passes a SQL string input to an application in an attempt to manipulate the SQL statement to change or damage the data in the business management software application s database. The backward contamination of the add on application may occur when data returned from the main database in response to the user s SQL query is already contaminated by a SQL injection and likewise contaminates the add on application.

In addition in accordance with some embodiments of the present invention the persistency layer may permit add on applications to use different DBMS transparently. As a result a user may switch between the different DBMS such as for example Microsoft SQL and DB 2 without having to change the source code in the add on application since requests from the add on application are all formatted the same to communicate with the persistency layer which automatically translates each request into the proper format to access the desire DBMS. The functionality of the persistency layer may be specifically designed to be used with the add on framework. This means that the persistency layer may cover special requirements that are typical for the business management software for example the management of business object collections and data browsing through such a collection.

 Add on framework refers to an infrastructure for example a set of C class templates and utility functions to develop and run add on applications with functional extensions for a software application such as a business management software application.

 Add on refers to a software component started by the software application which enables functional extensions.

 GUID refers to a globally unique identifier that is used to identifying COM entities for example interfaces libraries objects etc.

Add on framework may be used to develop add on application to access business management software application and DBMS . Add on framework may be used to define a proven design pattern that is to be followed by add on application as well as all other add on application s and to provide a simplified interface to business management software application . Add on framework may also include some minor components like logging tracing and common data types which are not shown for ease of illustration.

Add on framework may include an extension manager and a persistency layer . Extension Manager may enable simplified processing of events that have been started in UI API for example a COM interface. In addition extension manager may be connected to a set of for example classes e.g. C classes that may be used when a developer implements add on application also called an extension . Add on application may include one or more forms i.e. screens and one or more persistent business objects . The template classes e.g. C template classes may enable add on application to handle general events such as start of application end of application etc. and for the implementation of one or more forms i.e. screens within add on application .

The persistency layer may provide a set of classes that are to be used to implement persistent business object . Persistency Layer may be the mechanism for addressing the underlying storage and provide a simple interface generating SQL statements for received data and converting the data according to the data type required by the DBMS . A developer of extension may implement persistent business object through persistency layer without the requiring the kind of DBMS to be defined expressly for it and without using SQL statements. Persistency Layer may connect persistent business object to DBMS using DI API COM interface .

In accordance with an embodiment of the present invention in add on framework may consist of two parts add on extension manager and a set of classes and interface definitions for developing extensions. Add on extension manager may be implemented as a COM object which may be started by business management software application and may offer the following interfaces to 

The main task of add on extension manager in is to receive events from the business management software application and dispatch the events to appropriate extensions . Of course add on extension manager may also be responsible for starting all registered extensions . A registered extension is an extension that has been previously identified to and saved by the business management software application.

With the help of the framework classes and interface definitions a skeleton for creating extension may be provided. Extension may run under control of add on extension manager . Add on extension manager may also be implemented as a COM object which may provide interfaces for handling events from business management software application dispatched by add on extension manager . For example these events may include 

These events may be broadcast to all instances of add on extension while item events may be distributed only to extensions that have registered a form to receive events. In this case the extension may provide an additional COM object to be passed to the add on extension manager in a form registration request. The object may offer particular interfaces for handling item events handling menu events and providing the add on extension manager with some form specific data.

Further add on extension may register standard business management forms as well as its own self created forms. Before registering the standard form add on extension may perform some modifications to it for example add a new button. For forms created by add on extension add on framework may offer support for loading forms from XML definition files.

Add on extension manager may be implemented as an API executable e.g. a win32 executable which may implement the COM object as a singleton object. This means that there may only be one COM object providing services to all extensions. The reasons for this may include 

To reduce the number of add on processes and to be consistent with the behavior of the business management software application business object UI Server add on COM object may be implemented as a singleton. Consequently the implementation of add on extension manager may be aware of existing instances already started. In general the first instance is responsible for maintaining the add on COM object and will therefore run as long as business management software application business object UI Server is running. All subsequent instances just need to inform the first one that a new business management software application has been started and terminate immediately after that. Add on extension manager may require extensions to be implemented as an API data link library dll .

Add on framework may be used to develop an add on application to access business management software application and DBMS . Add on framework may be used to define a proven design pattern that is to be followed by add on application as well as all other add on application s and to provide a simplified interface to business management software application . Add on framework may also include some minor components like logging tracing and common data types which are not shown for ease of illustration.

Add on framework may include an extension manager and a persistency layer . Extension Manager may enable simplified processing of events that have been started in UI API for example a COM interface. In addition extension manager may be connected to a set of for example classes that may be used when a developer implements add on application also called an extension . Add on application may include one or more forms i.e. screens and a persistent business object . The template classes may enable add on application to handle general events such as start of application end of application . etc. and for the implementation of one or more forms i.e. screens within add on application .

Persistency layer may provide a set of classes that are to be used to implement persistent business object . Persistency Layer may be the mechanism for addressing the underlying storage and provide a simple interface generating SQL statements for received data and converting the data according to the data type required by the DBMS . A developer of extension may implement persistent business object through persistency layer without the need to know what kind of DBMS is actually in use and without using SQL statements. Persistency Layer may conned persistent business object to DBMS using a DI API COM interface in SDK .

In accordance with an embodiment of the present invention in add on framework may consist of two parts add on extension manager and a set of classes and interface definitions for developing extensions. Add on extension manager may be implemented as a COM object which may be started by business management software application and may offer the following interfaces to 

In accordance with the present embodiment the main task of add on extension manager in is to receive events from business management software application and dispatch the events to appropriate extensions . Of course add on extension manager may also be responsible for starting all registered extensions .

With the help of the framework classes and interface definitions a skeleton for creating extension may be provided. Extension may run under control of add on extension manager . Add on extension manager may also be implemented as a COM object which may provide interfaces for handling events from business management software application dispatched by add on extension manager . For example these events may include 

These events may be broadcast to all instances of add on extension while item events may be distributed only to extensions that have registered a form to receive events. In this case the extension may provide an additional COM object to be passed to the add on extension manager in a form registration request. The object may offer particular interfaces for handling item events handling menu events and providing the add on extension manager with some form specific data.

Further add on extension may register standard business management forms as well as its own self created forms. Before registering the standard form add on extension may perform some modifications to it for example add a new button. For forms created by add on extension add on framework may offer support for loading forms from XML definition files.

In the present embodiment add on extension manager may be implemented as an API executable e.g. a win32 executable which may implement the COM object as a singleton object. This means that there may only be one COM object providing services to all extensions. The reasons for this may include 

To reduce the number of add on processes and to be consistent with the behavior of the business management software application business object UI Server add on COM object may be implemented as a singleton. Consequently the implementation of add on extension manager may be aware of existing instances already started. In general the first instance is responsible for maintaining the add on COM object and will therefore run as long as business management software application business object UI Server is alive. All subsequent instances just need to inform the first one that a new business management software application has been started and terminate immediately after that. Add on extension manager may require extensions to be implemented as an API data link library dll .

Add on COM object may be connected to one or more event sink COM objects in business management application add on extension . In general there will only be one instance of add on COM object for each business management application to provide interfaces for form registration storing providing extension specific data message logging and providing state progress information on initialization. In addition add on COM object may maintain a map of event sink objects for every running business management application. The key in this map is the business management application ID. Every running business management application may have exactly one event sink COM object to which it may deliver business management application events.

Event sink COM object may provide interfaces for receiving business management application menu events item events and application events. Event sink COM object may maintain a list of extension objects and a map of registered forms objects. The key in this map may be a business management application form UID. Because more than one extension may register the same standard form the map may contain several items with the same key. Add on extension COM object may provide interfaces to receive start stop of business management application events form creation events menu events and business management application administration events change language change company etc. . Add on form COM object may include interfaces to receive business management application item and menu events and provide form specific data.

The add on extension manager may receive all events from business management application in event sink COM object . A subset of business management application events may be distributed to all extensions in add on extension COM object . Remaining business management application events may be delivered directly to the add on extension in add on form COM object via a map of registered forms . Extension registers form and stores retrieves form specific data to the add on extension manager in add on COM object . All extensions may send log messages to the add on extension manager in add on COM object . All extensions may send information about the progress of initialization to the add on extension manager in add on COM object .

In a handle to a business management application UI Server process handle may be obtained to monitor when the execution of the process should end. The first instance of the add on extension manager may run as long as the business management application UI Server is running. The method may also include creating one or more read write shared memory events as not being signaled. The method may also create an instance of an add on COM object and start one or more extensions and create a new connection to the business management application for the first instance of the add on extension manager. When creating a connection to the business management application all extensions may also be instantiated at this time. This process is further described below in relation of . In the method may further include signaling that the shared memory read event has been completed. The method may still further include determining whether the business management application UI Server process has finished or the write shared memory event signal is received. Any connections between the first instance of the add on extension manager may be destroyed and the method may terminate if the business management application UI Server process was determined to be finished. However if the write memory event was determined to be signaled the shared memory buffer may be read and the method may loop back and continue by starting the next extension associated with the first instance of the add on extension manager and continue as described above.

In if it is determined that the first instance of the add on extension manager already exists then all subsequent instances may wait to receive a read shared memory event signal write the command line parameters into the shared memory and signal a shared memory write event occurred.

If it is determined that there are no more registered extensions left on the list the method may include notifying the event sink COM object to be ready to receive events from the business management application and adding event sink COM object to a map in add on COM object with the key being the business management application ID. The map may provide a list of add on extension COM objects that should receive broadcast events.

In accordance with an embodiment of the present invention form creation is demonstrated in the following two examples. One example is to include using an eXtensible Markup Language XML form definition first and a second example is to include using UI API . The add on framework may completely support creating forms using XML definitions and an XML form definition may be provided either as an external file included in the resources or as a string created directly in source code. Likewise an XML form definition may be created either with an external form editor or manually with a text or XML editor. The add on framework may also provide a mechanism for localization of the XML form definitions via string resources. If XML form definition does not support all of the functionality provided by UI API some additional calls to UI API may be needed after form creation e.g. for initialization of the fields etc. . The add on framework may provide an easy way to add these additional calls.

In accordance with the present embodiment after a form is created for example add on form it may be registered with add on COM object in add on extension manager to receive item events. The same may also be applicable for the standard forms in the business management application. Registration of the forms may be done automatically using provided class templates.

Further in general an extension may need some database tables to operate. These additional tables may be created as user tables. Similarly there may also be a need to extend existing company tables with some user fields. The add on framework may provide support for these operations. For example the complete functionality may be described as including creating a user table creating user fields in the user table creating user keys loading data records into the user table and extending standard tables with the user fields. Database definitions may be provided by the add on extension in an XML file and the add on framework may includes a class definition responsible for loading the file and performing database activities as necessary.

The add on extension may prepare the database at the beginning of its execution i.e. when it is being loaded. This may involve checking the current state of the installation and to speed up the check the framework may maintain versions of currently installed add on extension tables and the state of the installation in one of its own database tables. A check function may compare the version of the extension with the stored one. When an extension is run for the first time there may be no tables. In this case the add on extension may start the create procedure.

During initialization add on extension manager may display a kind of splash screen to show the progress of the various initialization steps. If an extension intends to display its own specific messages there the extension may have to call an interface method associated with add on COM object . Regardless the database initialization progress may be displayed automatically. Add on extension manager may detect whether any database installation actions were performed on initialization. If installation actions did occur the user may or may not need to restart the business management application to allow the database changes to take effect so that the add on extensions can work properly in the running application.

Add on extension manager as well as every extension may log messages using a central logging functionality. Add on extension manager may provide a COM interface as the logging function. In general all messages may be written to one or more central log file s and the central logging function may be the only component that may access the log file s directly. All other components for example add on extension manager and add on extension COM objects may access the log via the COM interface. Add on extension manager may log the following events start of a business management application instance start of an add on extension receiving and dispatching events from UI API Server and registration of forms. In addition each add on extension may log individual messages.

In accordance with an embodiment the add on extension COM objects may need to both read data from and write data to the database. This may need to be done in a generalised way unfortunately since standard SQL is not able to fully provide all of the necessary capabilities specific data retrieval and storing classes for each database may need to be created separately. However using SQL statements within the business objects may not be safe due to SQL injection discussed above . Therefore to prevent SQL injection the add on extension COM objects and the persistency layer may be separated and the add on extension COM objects may communicate with the persistency layer via a well defined interface only. As a result how and where the data may be stored is hidden from the add on extension COM object. In general the persistency layer may be generic in most aspects with only a persistence interface object that may be specific for each add on extension COM object. The persistence interface object may encapsulate the knowledge about the data structures and may be the only object in the persistency layer that may be directly used by each add on extension COM object.

In general the persistence interface object may be derived from a common class so that the application programmer doesn t need to know any SQL. The persistency layer may automatically create all necessary SQL statements from the requests received from the add on extension COM objects. As in SQL columns may be fetched from different tables in the same database and the persistency layer may support inner and outer joins. The persistency layer may also hide which database is being used from the add on extension application. So we can switch to a different database system without modifying the add on extension application. The generic class may provide the means to navigate through the records. If only one record within an application is needed a second interface class may be provided by the persistency layer. This class may include the same data fetching and modification methods as the first interface class with the exception of being able to browse through records.

In accordance with the present embodiment for data transport a container class may be implemented to have member variables for all columns and at least the following two methods a map to container method and a container to map method. The persistency layer may work with a map of fields so that the values may be transferred within the above methods from the map to the container variables or vice versa. These methods may be called automatically from the second interface class.

To use a persistence collection the add on extension application may connect to the persistency layer and load the collection. The collection may be initialized using for example but not limited to connect and load initialization methods to offer several manipulation methods. The methods may include for example a first method to fetch the first record of the collection a last method to fetch the last record of the collection a next method to fetch the next record of the collection a previous method to fetch the previous record of the collection an eof method to test if the end of file was reached a bof method to test if begin of file was reached a getbykey method to fetch the record with the specified key from the collection a find method to find a record in the collection by any column as long as that column is part of the collection an exists method to test if the record exists in the database a remove method to delete one record from the master table a removerange method to delete a range of records from the master table an add method to add a new record into the master table an update method to update the master table a refresh method to trigger a new select with the same query string that was used for load and a getrecordcount method to return a count of selected records.

In in accordance with the present embodiment if the method determines that no more add on extensions COM objects associated with the business management application being deleted the method may include destroying the map of registered forms and destroying the list of add on extension COM objects in add on extension manager . The method may further include removing the event sink COM object from the map in add on COM object.

In display component may be capable of displaying full color e.g. 24 bit colors and may include for example a standard CRT a liquid crystal display and a flat panel display. Input component may include for example a keyboard a writing tablet and a voice to text. Communication component may include for example a dial up modem a digital cable modem a direct network connection and a wireless modem.

Several embodiments of the present invention are specifically illustrated and described herein. However it will be appreciated that modifications and variations of the present invention are covered by the above teachings and come within the purview of the appended claims without departing from the spirit and intended scope of the invention.

