---

title: Adaptive content platform and method of using same
abstract: An adaptive content platform includes one or more content-enabled, dependent applications, each of which includes a user interface and business logic. A services layer, which is interfaced with the dependent applications and a software infrastructure, provides one or more services that are usable by the dependent applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971144&OS=07971144&RS=07971144
owner: OpenPages
number: 07971144
owner_city: Waltham
owner_country: US
publication_date: 20071031
---
This application is a continuation of application Ser. No. 10 256 613 now U.S. Pat. No. 7 356 771 B2 filed Sep. 26 2002 and claims priority from U.S. Provisional Patent Application Ser. No. 60 394 441 entitled Adaptive Content Platform and filed on Jul. 9 2002. The above are incorporated by reference herein for all purposes.

This invention relates to software development and more particularly to software development platforms.

For a suite of applications developed for a common software platform e.g. an application server platform each application within the suite typically includes a group of services e.g. content management services workflow services publishing services search and query services that are common amongst the applications in the suite.

As the software platform does not allow the services of one application to be shared by another these services must be coded for and included in each application written for the software platform even though multiple applications use common services.

According to an aspect of this invention an adaptive content platform includes one or more content enabled dependent applications thus forming an application layer each of which includes a user interface and business logic. A services layer which is interfaced with the content enabled dependent applications and a software infrastructure e.g. an application server provides one or more services that are usable by the content enabled dependent applications.

One or more of the following features may be included. The services layer includes a unique application programming interface for each of the one or more services such that dependent applications using a specific service make requests through the application programming interface assigned to that service.

The services include a content management service for storing and managing files which includes a repository service for storing files and a search service for allowing users to search files stored by the repository service for example.

The services also include a workflow and collaboration service for managing projects and users which includes a workflow service for managing the workflow of files a user management and authentication service for managing the users and user groups and an events and notification service for managing and broadcasting notifications to the users that were generated by the services for example.

Additionally the services include a multi modal content creation service for manual creation and automated importation and conversion of files which includes a transformation and content handling service for converting the formats of files a desktop integration service for manual contribution of content and an import service for facilitating file importation from external systems for example.

The services further include a multi channel deployment service for publishing files to one or more publishing channels which includes a publishing service for publishing files to one or more publishing channels such as a web site an email broadcast a wireless broadcast a syndication stream or a printed publication for example a dynamic publishing service and a static publishing service for example.

A data layer is interfaced with the software infrastructure such that the data layer includes one or more databases.

The above described adaptive content platform may be implemented in a distributed computing system in that a first or local computing device executes the content enabled dependent applications and a second or remote computing device executes the services layer. This second computer may be a web server.

In a distributed computing system the first and second computing devices are interconnected by a network such as a local area network the Internet or an intranet for example.

The above described adaptive content platform and distributed computing system may be implemented as a method or a sequence of instructions executed by a processor.

One or more advantages can be provided from the above. By providing the programmer with a common set of reusable services applications are no longer required to include stand alone services. Since these applications are not required to include services application development is significantly accelerated and deployment is simplified. Additionally by using a common set of services compatibility issues are minimized. Further as applications share a common set of services application size is reduced. In addition by separating an application s services from the application s business logic user interface distributed computing is possible leading to superior scalability and availability.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

Referring to an adaptive content platform includes one or more dependent applications each of which includes a user interface e.g. user interface and business logic e.g. business logic . This group of dependent applications may be referred to as an application layer . Each user interface allows a user of the dependent application to access and use the functionality of the dependent application. Business logic performs the functions native to the dependent application. Note that while dependent applications typically include some form of user interface this is not required.

Typically the dependent applications are content enabled dependent applications in that they manage and process content e.g. documents images audio clips video clips . Examples of content enabled applications are web content management systems shareholder and regulatory reporting applications corporate marketing and communications systems newspaper publishing systems and so forth. Content enabled applications typically include a combination of content management workflow management and publishing capabilities.

Adaptive content platform is a multi tiered software architecture that includes a services layer for interfacing the application layer and a software infrastructure e.g. an application server . Examples of an application server are BEA Weblogic and IBM Websphere both of which implement the Java 2 Enterprise Edition standard J2EE .

Services layer provides a group of services which are available for use by dependent applications . Examples of these services include content management services search services and file conversion services for example. These services which will be discussed below in greater detail are shared services common to the dependent applications as opposed to each dependent application s native functions which are handled by the dependent application s business logic.

Dependent applications may be J2EE Java 2 Enterprise Edition compliant dependent applications that adhere to v1.3 standards and are compatible with and run on a Java 2 Enterprise Edition application server.

A data layer is interfaced to the software infrastructure and provides data services for platform . Data layer may provide access to database servers such as Oracle IBM DB2 and Microsoft SQL Server . Further data layer may provide access to file servers such as Microsoft Windows 2000 Servers Microsoft Windows NT Servers and Unix Servers . Additionally data layer may allow access to legacy systems i.e. applications and data that have been inherited from languages platforms and techniques earlier than current technology .

Data layer is typically interfaced with an operating system OS layer which includes the operating system that manages the above described layers infrastructures and dependent applications. Examples of compatible operating systems are Windows Solaris and Linux .

Typically a web server layer is interfaced with the application layer i.e. dependent applications and allows a user not shown to use and access the functionality of the individual dependent applications from with a web browser e.g. Microsoft Internet Explorer Netscape Navigator . Examples of web server layer are Microsoft Internet Information Server and Apache Web Server .

By combining the user interface and business logic of a dependent application with one or more of the services offered by the services layer the functionality of a stand alone independent application can be emulated without the application having to include dedicated services .

Concerning the services offered by services layer these services can typically be loosely described as four groups of services namely content management workflow and collaboration multi modal content creation and multi channel deployment each of which will be discussed below in greater detail.

Referring to the content management group which stores and manages files and content used by the adaptive content platform may include a repository service and a search service .

Repository service works in conjunction with the data layer generally and the database servers the file servers and the legacy systems specifically to store organize and manage files and content hereinafter files .

Repository service allows for the production organization and management of numerous content types that define the specific type of files being produced and managed. Additionally repository service allows users administrators to define numerous property fields or meta data fields e.g. release date revision number production date revision date and approval date for example that define and refine the files stored by the data layer. Access to the files managed by repository service can be controlled by regulating the users who can view check out edit print and save a particular file for example. Additionally the data structure in which the files are stored e.g. the directory tree structure is defined and controlled using repository service . Typically repository service works in conjunction with a relational database e.g. database that is accessed through data layer .

The search service allows a user to search the files stored by the repository service . Searches may be performed on either file properties or content. If the files are stored in a structured database as described above search service may be an SQL structured query language database query engine. Alternatively if the files are stored as HTML or XML Extensible Markup Language based documents search service may use search engine technology to generate a list of relevant documents.

The dependent applications described above may access each service offered by content management group e.g. repository service and search service by making the appropriate request of and establishing a connection through the API application programming interface assigned to that particular service. For example API is assigned to repository service and API is assigned to search service . Therefore if a user of a dependent application e.g. dependent application wanted to execute a search for a particular file dependent application would make the appropriate request from API .

Referring to the workflow and collaboration group which manages projects and users of the adaptive content platform may include a workflow service a user management and authentication service and an events and notification service .

The workflow service allows the administrator or user to control the workflow of files through the adaptive content platform. For example if a file is produced for publishing purposes that file might need to be approved by a midlevel manager prior to it being sent to an upper level manager. Further the upper level manager might have to approve the file prior to it being published or otherwise disseminated. Therefore workflow service could mandate that the file be approved by a midlevel manager prior to it being sent to the higher level manager who approves it prior to publication. Further workflow service may assign time limits for the completion of certain tasks such as the midlevel or upper level review and approval process.

The user management and authentication service provides a set of tools to the user administrator that allows them to manage users and user groups. Individual users can be produced and deleted using user management and authentication service . Further the rights and privileges of these individual users also can be controlled and regulated. Additionally these users can be assigned to moved between and deleted from various users groups which are also maintained using user management and authentication service . Further as rights and privileges can be assigned to a user group by adding an individual user to a user group the rights or privileges of an individual user can be efficiently defined.

The events and notification service allows for the delivery of notification events generated by the services offered by the applet service layer . These message can be delivered to individual users of the system broadcast to entire user groups or delivered to the various services offered by the applet service layer .

As above the dependent applications described above may access each service offered by workflow and collaboration group e.g. workflow service user management and authentication service and the events and notification service by making the appropriate request of and establishing a connection through the API assigned to that particular service. For this particular group API is assigned to the workflow service API is assigned to the user management and authentication service and API is assigned to the events and notification service .

Referring to the multi modal content creation group which imports and converts files for the adaptive content platform may include a transformation and content handling service an import service and a desktop integration service .

The transformation and content handling service provides file format conversion services thus allowing the user to import files of various types and convert them over into a common format e.g. XML and HTML . Converter templates are available for popular applications such as Microsoft Word Microsoft Excel Adobe PDF and Microsoft PowerPoint for example.

The import service allows for automated import of files from external systems. Import service is configured to monitor on a periodic basis the files located on a network drive an FTP file transfer protocol site and an HTTP site. When new files are detected on one of these sources the files are automatically imported into the system. Further if a format conversion is required import service will work in conjunction with transformation service to import and convert the file.

The desktop integration service allows content to be contributed by users via standard desktop creation tools. These tools include the Microsoft Office suite as well as Adobe and Macromedia applications. The service uses the WEBDAV protocol WEB based Distributed Authoring and Versioning which is an extension of the HTTP protocol to communicate with the desktop tools.

As above the dependent applications described above may access each service offered by multi modal content creation group e.g. transformation service import service and desktop integration service by making the appropriate request of and establishing a connection through the API assigned to that particular service. For this particular group API is assigned to the transformation service API is assigned to the import service and API is assigned to the desktop integration service .

Referring to the multi channel deployment group which publishes files to one or more publishing channels may include a static publishing service and a dynamic publishing service .

The static publishing service allows for proactive publishing of files based on predefined templates. Therefore the structure and format of the file published and the document produced is defined ahead of time and is not varied depending on the content of the document. Additionally the content itself is semi dynamic in that it changes periodically e.g. a few times a week . An example of static documents generated using a static publishing service is a newsroom home page of a corporate web site in which one hundred press releases are currently being displayed. The home page is a collection of one hundred summary links and each link leads to a press release detail page. A corporate communications officer can publish the home page and the one hundred detail pages by invoking the static publishing service which merges the appropriate press release content with the detail page template to generate HTML. By generating the pages using static publishing the communications officer ensures that web site visitors have fast page retrieval since the content is already in HTML format and does not need to be regenerated for every website visitor.

The dynamic publishing service allows for reactive publishing of files that are dynamically altered based on current conditions user preferences and query results for example. In an online auction house that has one hundred items for sale a dynamic document may be created in response to a user query. For example while one hundred items may be offered the user an avid World War II buff may only be interested in those items that relate to World War II. Therefore the user would enter their search criteria and a dynamic document would be generated that includes fourteen items each of which is related to World War II. This dynamically generated list which itemizes the fourteen items may also specify the starting bid the current bid and the auction ending time for each item. By generating this document with dynamic publishing services documents can be generated that more accurately reflect current conditions.

Regardless of whether the static publishing service or dynamic publishing service produce the file the file can be published over various channels such as a web site an email broadcast a wireless broadcast a syndication stream and a printed publication for example. The file can also be published in various formats such as HTML XML and PDF for example.

For web site publishing the file being published may be posted to a website so that the file is accessible by various users and guests. If security or access is a concern the file may be published on an intranet which is not remotely accessible or within a restricted access user section of a website.

For email broadcasts the file can be published as an attachment to an email that is sent out to a distribution list of individual users. Alternatively the file may be converted into a format e.g. ASCII text and HTML that is easily incorporated into the body of an email.

For wireless broadcasts the file can be transmitted to users over a wireless network. This file may be text based such as an email attachment sent to a wireless email device or multimedia based such as a sound file sent to a cellular telephone .

For syndication streams the file may be published on data streams that are text based such as streaming messages audio based such as streaming audio video based such as streaming video or multimedia based such as streaming audio video for example.

For printed publications the file being published may be printed on traditional printing systems laser printers and distributed using traditional distribution paths e.g. interoffice mail courier or the postal service for example .

As above the dependent applications described above access each service offered by multi channel deployment group e.g. static publishing service and dynamic publishing service by making the appropriate request of and establishing a connection through the API assigned to that particular service. For this particular group API is assigned to the static publishing service and API is assigned to the dynamic publishing service .

Referring to a distributed computing system is shown which incorporates the adaptive content platform described above. Distributed computing system includes a local or first computing device that executes one or more content enabled dependent applications . As described above each of the dependent applications includes business logic and a user interface .

A storage device stores the individual instruction sets and subroutines of dependent applications . Storage devices may be a hard disk drive a tape drive an optical drive a RAID array a random access memory RAM or a read only memory ROM for example. Local computing device includes at least one processing unit not shown and main memory system not shown .

A remote or second computing device e.g. a web server executes the services layer as described above. Typically services layer is interfaced with a software infrastructure not shown which is interfaced with a data layer not shown which is interfaced with an OS layer not shown .

A storage device stores the individual instruction sets and subroutines of services layer and any additional required layers or infrastructure . Storage device may be a hard disk drive a tape drive an optical drive a RAID array a random access memory RAM or a read only memory ROM for example. Remote computing device includes at least one processing unit not shown and main memory system not shown .

Local computing device and remote computing device are interconnected with a network such as a LAN local area network WAN wide area network the Internet or an intranet for example.

While the above described embodiment discusses the deployment of the services layer on a single second computer other configurations are possible such as those in which each service or a group of services is deployed on its own dedicated computer.

While the above described embodiment describes a local and a remote computing device this is not intended to define the physical location of either computing device and is merely intended to indicate that the second computing device is remote i.e. separate from the first computing device.

While the above described embodiment discusses the use of content enabled dependent applications other configurations are possible such as data enabled dependent applications i.e. those designed to manage data as opposed to content .

While the above described embodiment specifies a software infrastructure that is an application server other configurations are possible such as a general purpose operating system e.g. UNIX Windows 2000 or a special purpose operating system e.g. embedded OS real time OS .

While the above described embodiment illustrates the availability of three services and three dependent applications the actual number of services and dependent applications can be adjusted based on system requirements.

Referring to a distributed computing method is shown. One or more content enabled dependent applications are executed on a local computing device. Each dependent application includes a user interface and business logic. A services layer which is interfaced with the dependent applications and a software infrastructure is executed on a remote computing device. The services layer provides one or more services that are usable by the content enabled dependent applications.

A data layer which includes one or more databases is interfaced with the software infrastructure. A unique application programming interface is assigned to each of the services. Dependent applications using a specific service make requests through the application programming interface assigned to that service.

Referring to a multi tier software development method is shown. One or more content enabled dependent applications are provided each of which includes a user interface and business logic. A services layer is provided which is interfaced with the one or more content enabled dependent applications and provides one or more services that are usable by the content enabled dependent applications. The services layer is interfaced with a software infrastructure interfaced with a data layer. The data layer includes one or more databases.

The embodiments described herein are not limited to the embodiments described above it may find applicability in any computing or processing environment. The embodiments may be implemented in hardware software or a combination of the two. For example the embodiments may be implemented using circuitry such as one or more of programmable logic e.g. an ASIC logic gates a processor and a memory.

The embodiments may be implemented in computer programs executing on programmable computers that each includes a processor and a storage medium readable by the processor including volatile and non volatile memory and or storage elements . Each such program may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the programs can be implemented in assembly or machine language. The language may be a compiled or an interpreted language.

Each computer program may be stored on an article of manufacture such as a storage medium e.g. CD ROM hard disk or magnetic diskette or device e.g. computer peripheral that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform the functions of the embodiments. The embodiments may also be implemented as a machine readable storage medium configured with a computer program where upon execution instructions in the computer program cause a machine to operate to perform the functions of the embodiments described above.

The embodiments described above may be used in a variety of applications. Although the embodiments are not limited in this respect the embodiments may be implemented with memory devices in microcontrollers general purpose microprocessors digital signal processors DSPs reduced instruction set computing RISC and complex instruction set computing CISC among other electronic components.

The embodiments described above may also be implemented using integrated circuit blocks referred to as main memory cache memory or other types of memory that store electronic instructions to be executed by a microprocessor or store data that may be used in arithmetic operations.

A number of embodiments of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the embodiments described above.

