---

title: Utility service in multi-processor environment
abstract: Methods and systems for telecommunication devices to share a network connection between a utility engine and an application. While the outgoing data of the utility engine and the application are merged over the shared network connection, incoming data is filtered via an IP data filter to route utility engine specific data to the utility engine while allowing all other data to pass through for use by the application. Numerous utilities may be supported by different forms of utility engines. Among such utilities include GPS service, where GPS related data may be received from a GPS server and utilized by applications which provide location specific information based on a location determined by the GPS server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364850&OS=08364850&RS=08364850
owner: QUALCOMM Incorporated
number: 08364850
owner_city: San Diego
owner_country: US
publication_date: 20070719
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 60 832 347 titled GPS service in multi processor multi mode environment filed on Jul. 20 2006 incorporated by reference herein in its entirety.

The present invention relates to methods and systems for transmitting and or receiving GPS specific information and application specific information over a single shared network connection.

The increased mobility of telecommunication devices wireless modem equipped laptops PDA devices smart phones etc. has spawned software applications which may provide or utilize location relative information. Such applications for example may include up to date digital maps addresses of nearby facilities like restaurants businesses and shops local weather forecasts listing a of nearby entries from a personal address book or local geographic data. The software applications themselves run on an application processor but may utilize external GPS Global Positioning System information to acquire the device s position as input for the various location based applications.

Complex GPS enabled mobile devices especially those with multiple processors may need a way to share or multiplex a given network connection between GPS related data traffic and application related data traffic. This may be because only one point to point PPP connection is available for a given network at one time.

An embodiment of a mobile telecommunications device mobile device may include one or more processors including at least one application processor as well as at least one modem processor which may support the implementation of a utility or service required by one or more applications running on the application processor. The application processor may manage and execute a number of software application programs as well as control the user interface. The modem processor may manage the radio frequency physical resources and the lowest level radio and protocol link to one or more fixed base stations the associated networks and the network servers. The modem processor may also provide an application programming interface API for the mutual interaction between the application processor and the modem processor. An example of such utility or a service is a GPS engine coupled to or running within a modem that provides GPS services to applications running on the application processor. Utilities or services available on one processor such as a modem processor may need to access an external data source as part of their functioning at the same time that applications running on the application processor are accessing a different external data source. This situation creates routing issues to enable multiple applications to access external networks simultaneously. To solve this routing issue an embodiment includes an IP data filtering mechanism to enable simultaneous data transfer by two applications accessing different external servers. Further an embodiment provides an application interface for sharing the common service information like GPS coordinate information among a number of applications.

In another embodiment one or more utility engines running on the modem processor requires access to a network connection. To do so the utility engine may need to select among various network connections and share one or more active data network connections with an application running on the application processor. To share a data network connection with an application program the utility engine may initiate an IP data filter to monitor packet data traffic over the shared data network connection. The filter routes to the utility engine all data packets that are relevant to the utility engine and routes all other data packets to the application sharing the network connection.

Various embodiments of the present invention will be described in detail with reference to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

An embodiment mobile device may include one or more processors including at least one application processor as well as at least one modem processor. The at least one modem processor may support the implementation of at least one utility engine. A utility engine is a process or circuit process that provides services or data that are utilized by a number of applications. A GPS engine is an example of a utility engine since the geographic location information it generates may be used by a number of location related applications. The application processor may manage and execute a number of software application programs as well as control the user interface. The at least one modem processor may manage the radio frequency physical resources and the lowest level radio and protocol link to one or more fixed base stations the associated networks and the network servers. A modem processor may also provide an application programming interface API for the mutual interaction between the at least one application processor and the modem processor.

A GPS engine may run on the modem processor since the modem processor possesses radio frequency receiver resources which may be co opted and utilized to receive signals from one or more GPS satellites. Upon receiving the satellite signals the GPS engine may send the information over a shared network connection to a remote GPS server processor. The remote GPS server processor may be capable of calculating the location of the mobile device based upon information received from the GPS engine. Once the mobile device s location is determined the GPS server or some other network resource may also provide the mobile device with other supplementary information based on the determined mobile device location. Examples of such supplementary information include but are not limited to up to date digital maps addresses of nearby facilities like restaurants businesses and shops local weather forecasts a listing of nearby entries from an address book or local geographic data. Such supplementary information may not otherwise be available locally on the mobile device.

Due to the volume of data manipulated the GPS engine on the modem processor may use a packet switched data network connection to communicate with the remote GPS server. Packet switching data networks enable improved data transmission rates compared to conventional circuit switching. Packet switched data network connections are available on 2G and 3G mobile telecommunications devices. For example Universal Mobile Telecommunication System UMTS devices are 3G devices which are packet switched devices.

A PDP Packet Data Protocol e.g. IP X.25 FrameRelay context is a data structure present on UMTS devices which contains the subscriber s session information when the subscriber has an active session i.e. periods of interactions between computer systems . When a mobile device wants to use UMTS it must first attach and then activate a network profile. Such a network profile may be but is not limited to a PDP context. This allocates a network profile data structure in the Serving GPRS Service Node SGSN that the subscriber is currently visiting and the Gateway GPRS Service Node GGSN serving the subscribers access point. UMTS allows for multiple network profile support. Thus multiple network connections may be maintained by the UMTS device to support multiple applications.

However in a UMTS environment with multiple PDP Packet Data Protocol context support a utility service such as a GPS service may be available on only one network profile. The GPS engine on the modem may be configured with the particular network profile associated with the GPS server. In instances where the network profile supporting a utility engine e.g. a GPS engine is already in use by another application process the utility engine may piggyback on or share the data network connection with an application running on the application processor.

The utility engine itself a connection manager or another software module may select the appropriate data network connection to be shared. As only one IP address is assigned to the mobile device during PDP activation from a given domain there may be routing issues in attempting to support simultaneous data transfer between the network and one or more applications on the multiple processors. To solve this routing issue an embodiment can include an IP data filtering mechanism for simultaneous data transfer of the utility engine specific information and the application specific information. Further an embodiment may provide an application interface to share the location information among the applications.

A variety of utility engines may be used by a mobile device including for example a GPS engine. For ease of illustration the organization and functioning of various embodiments are first described with reference to a GPS engine because the GPS service is an example of a utility service that can be used by a number of applications and require simultaneous network connection to an external data source i.e. a GPS server . Embodiments of mobile devices having a general utility engine or engines are then described with reference to .

In a multimode mobile device such as a cellular telephone handset or laptop modem there can be several networks available and several packet data network connections for the transmission and reception of data. In addition a multimode mobile device may have access to multiple wireless networks employing a variety of wireless technologies e.g. 1x EvDO UMTS WLAN and WiFi and multiple IP networks e.g. IPv4 IPv6 . While UMTS networks can support connectivity to multiple domains simultaneously only one of the data network connections may support a GPS service. In such multiple data network connection scenarios the multimode mobile device may identify a data network connection supporting the GPS service over the network. Once that data network connection is identified the data network connection may be assigned to the GPS engine for receiving the GPS service.

However the data network connection supporting the GPS service may also provide remote services for other GPS and non GPS service applications such as Internet connectivity. Specifically a data network connection which supports the GPS service may need to be shared between an application program and a GPS engine running simultaneously on the multimode device. The application program need not be a GPS application. The only relationship between the GPS engine and the application program sharing the data network connection may be that both need essentially simultaneous access to the same data network connection. A connection manager may be used by the mobile device to allocate a limited number of possible data network connections and to manage the sharing of a data network connection.

Specifically in a UMTS environment with multiple PDP support the mobile device can have multiple network profiles active simultaneously. One network profile which may include the IP address of the GPS service may be required by the GPS engine. The network profile parameters may include a network profile number an APN name a PDP type an IP network family v4 or v6 and a technology type e.g. CDMA EV DO GSM GPRS UMTS WLAN etc. . For some types of devices i.e. form factors such as PDAs smart phones and modems embedded in laptops the parameter settings may be configured on the application processor and all the packet data connections may be allocated by the application processor. The parameter settings can alternatively be allocated by the modem processor such as in the case of a standalone cell phone or a cell phone acting as a modem for a tethered laptop computer.

Meanwhile an application program not necessarily related to GPS may require access to the same data network connection related to the network profile of the GPS engine. That is the application program and the GPS engine need to share the same packet data call.

The application processor may manage and execute a number of software application programs. For example the application processor may manage at least a GPS application a wireless application protocol WAP application an Internet Explorer application and a Multimedia Message Service MMS application as well as other software applications. The application processor may also control the user interface through a display and keypad or keyboard not shown .

The modem processor may manage the radio frequency physical resources and lowest level radio and protocol link . The radio and protocol link may provide wireless communications with one or more wireless communication networks . The modem processor may also provide an API applications programming interface to the application processor for the mutual control and data interactions between the application processor and modem processor .

Wireless communication networks to which the modem processor establishes communication links typically include at least one fixed base station and at least one data server not shown . The at least one data server may itself be or may include a GPS server .

A GPS engine may be a software module running on the modem processor . Alternatively the GPS engine may be in the form of hardware or firmware such as an ASIC chip. The GPS engine may share and utilize the radio frequency transceiver transmitter receiver found within the modem processor in order to receive wireless signals from one or more GPS satellites . That is the receiver resources of the radio frequency transceiver normally used for network communication may be time shared or temporarily co opted for GPS satellite signal reception. This may include portions of the transceiver circuitry such as amplifiers or filters memory units and data connection and routing circuits or time sharing of central transceiver circuits and functions such as temporarily changing reception frequencies and the manner of signal decoding of the transceiver in order to receive GPS satellite time signals.

Upon receiving and decoding the GPS satellite signals from a sufficient number of satellites the GPS engine processes the GPS satellite signals into a digital data form to be transmitted through a TCP IP or similar communication stack .

The processed digital data signal can then be transmitted through the radio transceiver over the wireless communications network to a GPS server . The GPS server may further process the GPS satellite signals received from the GPS engine to determine the location coordinates of the mobile device and or additional supplementary location information. Location data determined by the GPS server is then transmitted back to the GPS engine over the wireless communications network . Such location relative information may not otherwise be available locally on the mobile device . The information provided by the GPS server for example may identify the mobile device s location with respect to a street address city county country or other political region. Because the modem processor located within the mobile device may lack sufficient hardware to perform the non trivial time consuming high precision 3 dimensional geometrical computation the mobile device may seek to offload such computations to an external GPS server instead of performing the calculations on the modem processor which may lack a built in hardware floating point arithmetic unit. Thus embodiments of the GPS Engine may require access to a data network connection to send and receive necessary GPS data to the GPS server .

To communicate with the external GPS server the GPS engine on the modem processor requires a data network connection such as implemented by a software communication stack . Specifically in a UMTS environment with multiple network profile support the GPS service may be available on only one network profile. The GPS engine on the modem processor may be configured with the particular network profile associated with a specific GPS server . This specific configuration or provisioning information may need to be passed from the GPS engine to the connection manager . While there can be a direct information path to do that a well designed packet data PD application interface may pass that information through the packet data manager in a more structured and disciplined software protocol.

To support GPS location services as well as other application programs running on the application processor the GPS engine may need to share one of potentially several data network connections with the application processor . This is because only one IP address may be assigned to the device during PDP activation from a given domain. Therefore there may need to be some other way of correctly routing data packets from the wireless communications network to the GPS engine as well as the one or more application programs . . . executing on the application processor .

To solve this routing issue an embodiment may include an IP data filter for simultaneous data transfer of the GPS specific information and the application specific information over the same data network connection that is by sharing the one assigned IP address. The filter is a software module which specifically monitors data packets watching for data packets having a specific expected format or content. In the example embodiment illustrated in the IP data filter is configured to specifically watch for and separate out GPS related data packets from the GPS server . The GPS related format or content may include a TCP port number and an IP address or other unique content which identifies the data packet as originating from the GPS server based upon the source address in the data packet. If the IP data filter identifies a packet as being GPS related the packet is passed to the GPS engine . Otherwise the IP data filter passes the packet as is to the application program which is sharing the PDP activation the network connection and the IP address. Operating in a similar manner the IP data filter can also allow more than one application program on the device to share the same PDP activation network connection and IP address.

An embodiment may employ the following procedure for sharing the information about the data network connection selection between the connection manager and the GPS engine . While the connection manager is in charge of allocating data network connections the GPS engine may need to dictate which PDP activation to use for receiving GPS data services. That is there may need to be informative handshaking between these software entities on the separate processors.

The data network connection which is shared with the GPS engine may not be the same data network connection that the GPS Application may be using. That is the GPS engine may be sharing a data network connection with some other application which requires access to a network resource. For example the GPS Engine may require a specific PDP activation data network connection and IP address for communication with a GPS server . However the GPS application initiating the GPS location fixes may be accessing a network resource on a different network and therefore through a different PDP activation and network connection. The network resource for example may be a source of map graphics or geographical data.

The operation of an exemplary embodiment is explained with reference to both . shows the various interacting components of an application processor a modem processor and a network s GPS server along with the control and or data flow paths connecting the components. The control and data paths in are identified by the number of the corresponding functional step shown in which precipitates information flow over the control and or data flow path.

In step the packet data manager requests a service from the GPS engine through the packet data applications programming interface PD API in the modem processor . As part of this step the packet data manager may obtain communication parameters from the GPS engine such as the provisioned network connection that provides the required GPS service the desired interface family type or whether a GPS fix session is already in progress. In this manner the packet data manager may identify the network connections that support GPS data. This control flow step begins the management of PS packet switched data connections.

In step a user may activate an application which requires GPS location information. For example the user may employ his her mobile device to obtain driving directions to the nearest golf course. Activating a GPS application stored on the mobile device causes a request to be sent to the packet data manager to initiate a GPS location fix session to determine the location of the mobile device . The packet data manager in turn may send a signal to the packet data API so that the request to determine the location of the mobile device is forwarded to the GPS engine . If the data network connections which support the GPS services have already been identified in step the packet data manager may send a signal to the GPS engine informing the GPS engine of the identified data network connection to be used.

In step the GPS engine attempts to initiate a packet switched data call. To do so the GPS engine signals the packet data manager to initiate the requested network interface CDMA UMTS WLAN . . . . The requested interface such as a provisioned UMTS PDP context is one that is appropriate to connect the GPS engine to a GPS server over a wireless communications network . The GPS engine may provide the packet data manager with the requested interface name family type and technology to perform the packet switched data call. Besides specifying CDMA UMTS WLAN etc. the GPS engine may also request a specific IP version IPv4 IPv6 etc. . For UMTS in particular the GPS Engine may provide the access point name APN the PDP type e.g. IP X.25 FrameRelay the desired quality of service QoS etc. as parameters of the interface request. These parameters may be needed to fully establish a data network connection to a specific server.

In step the packet data manager requests initiation of a packet switched PS data call through the connection manager . Parameters for making the data call may be obtained from the GPS engine in step and passed to the connection manager . Alternatively the data call parameters such as the APN name PDP type IP family etc. may be provisioned internally by the network provider. In response the connection manager directs the modem processor to call the appropriate available interface based on the parameters provided by the packet data manager .

In step the connection manager requests activation of an appropriate available network interface through the RF transceiver transmitter receiver based on the selection parameters provided by the packet data manager in step . The parameters provided by the packet data manager may be different each time a data call is initiated. The parameters may vary depending on the location of the mobile device and the available network or networks.

In step once an appropriate network interface connection is active through the RF transceiver unit the connection manager queries the wireless communications network for final interface parameters and returns this information APN Device IP address Type of call to the packet data manager .

In step the packet data manager informs the GPS Engine via the packet data API that the packet switched data call was successfully opened. The packet data manager then provides the GPS engine via the packet data API with the necessary network information for the GPS engine to access the GPS server . The network information for the GPS engine may include the connection request information generated above in step . This information may include the interface name technology CDMA UMTS WLAN etc. the interface family IPv4 IPv6 etc. and the interface specific information for UMTS the APN name the PDP type the QoS the domain name the services supported by domain etc. . In addition the network information may include the interface IP address that was assigned for the data call session.

In step the GPS engine uses the provided network interface parameters to uniquely identify the network interface brought up using the network information from packet data manager of the application processor . The GPS engine binds to the network interface for sending and receiving IP traffic for GPS location fixes through the TCP IP communication stack and the IP data filter .

In step the network GPS information is automatically extracted from the IP data traffic using the IP data filter and the TCP IP communication stack . That is GPS related received data traffic is stripped out or filtered by the IP data filter and routed to the GPS engine . Specifically every incoming data packet of an expected specific GPS related form is diverted to the GPS Engine through the communication stack . Any other data packet received on the same network connection is not routed through the communication stack but is routed to the application processor such as through a PPP interface . This routing may occur transparently to the user. Any data transmitted by the GPS engine is merged or interleaved with data transmitted from the application processor over the same network connection.

In step an application using GPS services determines whether further GPS location fixes are required. If so steps and are repeated an indefinite number of times.

In step if no more GPS location fixes are required the GPS application notifies the packet data manager to halt the session with the GPS server. Alternatively the packet data manager may detect that the GPS application has not requested GPS location fixes for a period of time. Such a time out period may be necessary in mobile devices where applications may never be explicitly terminated by the user. In either case the packet data manager notifies the connection manager that the packet switched data call is no longer to be shared with the GPS Engine . If the packet switched data call is no longer being shared with some application program the call is terminated. If the packet switched data call is in use by some application program the call is not terminated by the connection manager and operation of the application processor continues as normal.

In step the packet data API notifies the GPS engine that the packet switch data call has been terminated and terminates the IP data filter since there is no further need to filter out GPS related data packets.

The GPS engine may also communicate with a GPS application program at a higher level such as at a TCP protocol level or at a level higher in the open systems interconnect OSI hierarchy.

As shown in the IP data filter of the alternative embodiment may examine packets on more than one network connection at a time as opposed to examining a single network connection as shown in the embodiment of . Such a configuration permits the sharing or piggybacking of more than one network connection at a time.

Referring to an embodiment may include a GPS interface which shares GPS location information from the GPS engine among multiple GPS applications . The shared GPS interface may simply be an extension of the packet data manager . For example a first GPS application program such as application program of or B may establish a GPS location fix session as described above in connection with steps through . Then other GPS applications may access the available location information through calls to the shared GPS interface as shown in respectively. Because one application such as GPS application starts the GPS service through the packet data manager as in step of it may be appropriate for the packet data manager to be extended with the shared GPS interface as shown in . The shared GPS interface may present a managed high level sharable virtual GPS resource which hides how GPS is implemented. In other words the interface would be the same as when a fully self standing GPS processor is present.

In other alternative embodiments multiple GPS applications may be running simultaneously. In such instances a packet switched data call for the GPS engine may already be active. This may be because a first GPS application has already precipitated the connection when another GPS application or requests GPS service. In this case the packet data manager or more specifically the shared GPS interface can simply return a success status to a GPS application or when further GPS service is requested.

In step a user may activate an application stored within the mobile device which requires the GPS location of the mobile device . By activating a GPS application a request is sent to the shared GPS interface to initiate a GPS location fix session to determine the location of the mobile device . The packet data manager in turn may send a signal to the packet data API so that the request to determine the location of the mobile device is forwarded to the GPS engine .

In step the GPS engine requests initiation of a packet switched data call. To do so the GPS engine signals the shared GPS interface to initiate the requested interface CDMA UMTS WLAN . . . . The requested interface such as a provisioned UMTS PDP context is one which is appropriate to connect the GPS engine to a GPS server over the wireless communications network . The GPS engine may provide the shared GPS interface with the requested interface name family type and technology to perform the packet switch data call. Besides specifying CDMA UMTS WLAN etc. the GPS engine may also request a specific IP version IPv4 IPv6 etc. for example. For UMTS in particular the GPS engine may provide the APN name the PDP type the desired QoS quality of service etc. as parameters of the interface request. Next in step the shared GPS interface requests initiation of a packet switched data call through the connection manager . The data call may be made using a combination of the parameters obtained from GPS engine in step .

Next in step the connection manager initiates activation of the data call to an appropriate available data network connection through the RF transceiver transmitter receiver based on the selection parameters provided by the shared GPS interface in step . The appropriate available data network connection is activated by the modem processor based on the parameters provided by the shared GPS interface in step . The parameters provided by the shared GPS interface may be different each time a data call is initiated. The parameters may vary depending on the location of the mobile device and the available network or networks.

In step once an appropriate network interface connection is active through the RF transceiver unit the connection manager queries the wireless communications network for final interface parameters and returns this information APN Device IP address Type of call to the shared GPS interface .

In step the shared GPS interface informs the GPS engine via the packet data API that the packet switched data call was successfully opened. The shared GPS interface then provides the GPS engine via the packet data API with the necessary data network connection information for the GPS engine to access the GPS server . The data network connection information for the GPS engine may include the connection request information generated above in step . This connection request information may include the interface name technology CDMA UMTS WLAN etc. the interface family IPv4 IPv6 etc. and the interface specific information for UMTS the APN name the PDP type the QoS the domain name the services supported by domain etc. . In addition the data network connection information may include the interface IP address that was assigned for the data call session.

In step the GPS engine uses the network interface parameters described above in step to uniquely identify the network interface brought up using the network information from the shared GPS interface of the application processor . The GPS engine binds to the network interface for sending and receiving IP traffic for GPS location fixes through TCP IP communication stack . The filter is configured to filter and route data packets of a specific form through communication stack and all others to the particular communication stack of the application sharing the network connection.

In step the network GPS information is automatically extracted from the IP data traffic using the IP data filter of the TCP IP communication stack . That is GPS related received data traffic is stripped out or filtered by the IP data filter and routed to the GPS engine . Specifically every incoming data packet of an expected specific form is routed to the GPS engine through the communication stack and not forwarded on to the application processor . Any other data packet received on the same data network connection is not routed through communication stack but is routed to the application processor such as through a PPP interface . The routing may occur transparently to the user. All data transmitted by the GPS engine is merged or interleaved with data transmitted from the application processor over the same data network connection.

At this point in step A a second GPS application program of or application program of begins execution and requests GPS location fixes through the shared GPS interface . In response the shared GPS interface increments a count of applications currently requiring GPS location fix sessions. Step A can occur at any other time in the process and is placed as it is in for illustration purposes only. Further a third GPS application could similarly be initiated by a user and require service through the shared GPS interface at any time.

The purpose of the shared GPS interface is to manage and synchronize all requests for GPS services. The shared GPS interface and the packet data API in effect present a virtual shared GPS service. The shared GPS interface may be implemented by the packet data manager . Alternatively the shared GPS interface may be implemented by augmenting the packet data API however locating the GPS interface within the packet data API may limit the accessibility of the GPS interface by the application of or from the application of .

In step one of the GPS applications or currently active determines whether it no longer needs the services of the shared GPS interface . This may be because that particular GPS application or has ceased executing or has been inactive for a specified period of time. In this case the count of applications utilizing the shared GPS interface is decremented by one. If the count is not zero the shared GPS interface will continue supporting the other GPS applications currently needing GPS location fixes continuing to perform step .

If the count of active GPS applications as decremented by the shared GPS interface is zero step may then be executed. In step the shared GPS interface notifies the connection manager that the packet switched data call is not longer required to be shared with the GPS engine . If no other application is currently sharing the packet switched data call with the GPS engine the connection manager terminates the data call. In any case the shared GPS interface notifies the packet data API to stop the GPS fix session in step . Step may include deactivating the IP data filter in the communication stack since there may no longer be any GPS related data packets to be filtered out.

The GPS application is assumed to be a GPS related application in order to show how it relates to the GPS engine and the various software components of the application processor . Except for the change in the control and data paths between the GPS application and the shared GPS interface the steps executed by the embodiments illustrated by may be the same as those in . The steps of set up the GPS engine for sharing a packet switched data call with an application already connected to a network over that packet switched data call. Embodiments of may specifically need to configure the communication channels or respectively between the application processor and the external processor . This is performed in step of .

Other arrangements interconnections or numbers of GPS and utility engines are possible. For example in the GPS engine and the utility engine have individual communication stacks but share a single composite filter . With a composite filter data extracted from the stream of data packets can be routed for the appropriate destination namely the TCP IP stack of each processor and the GPS engine the utility engine or another application in the application processor sharing the data connection.

Referring to a sequence of steps for an alternative embodiment is illustrated in conjunction with the system for performing the method steps. In step the packet data manager registers its presence with connection sharing manager through the packet data applications programming interface PD API in the modem processor . The packet data manager may obtain communication parameters from the connection sharing manager through the packet data manager and PD API . These communication parameters may specify the provisioned data network connections to a utility related server required by a utility engine for which it is managing shared data network connections. The parameters provided to the packet data manager may include the desired interface family type or whether utility services are already in progress. This control flow step begins the management of packet switched data connections.

In step a user may activate an application which requires services from a utility engine . By activating an application a request is sent to the packet data manager to initiate services from a utility engine . The packet data manager in turn may send a signal to the packet data API so that the utility service request is forwarded to the connection sharing manager which in turn may forward the request to a utility engine which provides the requested services. If more than one application at a time may request service from a particular utility engine the PD manager or the connection sharing manager may maintain a count of the number of applications requiring such service for each utility engine .

In step the connection sharing manager requests initiation of a packet switched data call. To do so the connection sharing manager signals the packet data manager to initiate the requested interface CDMA UMTS WLAN . . . . The requested interface such as a provisioned UMTS PDP context is one which will connect the appropriate utility engine to a utility server over the wireless communication network . The connection sharing manager may provide the packet data manager with the requested interface name family type and technology to perform the packet switch data call. Besides specifying CDMA UMTS WLAN etc. the connection sharing manager may also request a specific IP version IPv4 IPv6 etc. for example. For UMTS in particular the connection sharing manager may provide the APN name the PDP type the desired QoS quality of service etc. as parameters of the interface request. Next in step the packet data manager requests initiation of a packet switched data call through the connection manager . The data call may be made using a combination of the parameters obtained from the connection sharing manager in step .

Next in step the connection manager initiates activation of the data call to an appropriate available network interface through RF transceiver transmitter receiver based on the selection parameters provided by the PD manager in step . The appropriate available interface is activated by the modem processor based on the parameters provided by the packet data manager in step . The parameters provided by the packet data manager may be different each time a data call is initiated. The parameters may vary depending on the available network or networks.

In step once an appropriate date network connection is active through the RF transceiver unit the connection manager queries the wireless communications network for final interface parameters and returns this information APN Device IP address Type of call to the packet data manager .

In step the packet data manager informs the connection sharing manager via the packet data API that the packet switched data call was successfully opened. The packet data manager then provides the utility engine through the packet data API and the connection sharing manager with the necessary network information to access the utility server . The network information for the connection sharing manager may include the connection request information generated above in step . This connection request information may include the interface name technology CDMA UMTS WLAN etc. the interface family IPv4 IPv6 etc. and the interface specific information for UMTS the APN name the PDP type the QoS the domain name the services supported by domain etc. . In addition the network information may include the interface IP address that was assigned for the data call session.

In step the connection sharing manager uses the network interface parameters described above in step to uniquely identify the network interface brought up using the network information from the PD manager of the application processor . The connection sharing manager binds the related utility engine to the network interface for sending and receiving IP traffic from the utility server through TCP IP communication stack . The connection sharing manager configures the IP data filter to examine and route data packets of a specific form through communication stack and all others to the particular communication stack of the application sharing the network connection.

In step the inbound data from utility server is automatically extracted from the IP data traffic by the IP data filter . That is utility related received data traffic is stripped out or filtered by the IP data filter and routed to the appropriate utility engine as so configured by the connection sharing manager . Specifically every incoming data packet of an expected specific form or from the utility server is routed to the connection sharing manager through the communication stack or . That data packet is not forwarded on to the application processor . Any other data packet received on the same network connection is not routed through communication stack but is routed to the application processor such as through a PPP interface . The routing may occur transparently to the user. All data transmitted by the utility engine or is merged or interleaved with data transmitted from the application processor over the same data network connection.

At this point in step A another application program may begin execution and may request modem utility services through the PD manager . In response the packet data manager may increment a count of applications currently requiring modem utility services. Alternatively this count may be maintained by the connection sharing manager. Step A can occur at other times in the process and is placed as it is in for illustration purposes only. Further a third application if it executes could similarly be initiated by a user at any time in this process and require service through the packet data manager . The purpose of the packet data manager is to manage and synchronize all application requests for the utility services.

Step determines whether one of the currently active applications no longer needs the utility services. This may be because that particular application has ceased executing or has not used the services for a specified period of time time out period . Alternatively the application may explicitly notify the PD manager that the utility services are no longer required. In either case the packet data manager or alternatively the connection sharing manager decrements the count of applications utilizing the utility engine providing the unneeded services. If the count is not zero the packet data manager will continue supporting the other applications currently needing the service so the process continues at step .

If the count of active applications using a particular utility engine as decremented by the packet data manager is zero step may then be executed. In step the packet data manager notifies the connection manager that the packet switched data call is not longer required to be shared with the connection sharing manager . If no application is currently sharing the packet switched data call with the connection sharing manager the connection manager terminates the data call. In any case the PD manager notifies the connection sharing manager through the packet data API to stop the particular utility engine in step . Step may include reconfiguring the IP data filter since there may no longer be any utility related data packets from utility server to be filtered out and routed to the particular utility engine .

The hardware used to implement the steps of and may be processing elements and memory elements configured to execute a set of instructions wherein the set of instructions are for performing method steps corresponding to the above events. Alternatively some steps may be performed by circuitry that is specific to a given function.

Those of skill in the art would appreciate that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

While the present invention has been disclosed with reference to specific example embodiments numerous modifications alterations and changes to the described embodiments are possible without departing from the sphere and scope of the present invention as defined in the appended claims. Accordingly it is intended that the present invention not be limited to the described embodiments but that it have the full scope defined by the language of the following claims and equivalents thereof.

