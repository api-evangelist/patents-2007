---

title: Run-time code injection to perform checks
abstract: A digital rights management system permits an application owner to cause code to be injected into the application's run-time instruction stream so as to restrict execution of that application to specific hardware platforms. In a first phase, an authorizing entity (e.g., an application owner or platform manufacturer) authorizes one or more applications to execute on a given hardware platform. Later, during application run-time, code is injected that performs periodic checks to determine if the application continues to run on the previously authorized hardware platform. If a periodic check fails, at least part of the application's execution string is terminatedâ€”effectively rendering the application non-usable. The periodic check is transparent to the user and difficult to circumvent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375369&OS=08375369&RS=08375369
owner: Apple Inc.
number: 08375369
owner_city: Cupertino
owner_country: US
publication_date: 20070427
---
This application constitutes a continuation from and claims priority to U.S. patent application Ser. No. 11 207 045 filed Aug. 18 2005 now U.S. Pat. No. 7 694 341 issued Apr. 6 2010 which is a continuation in part of U.S. patent application Ser. No. 11 144 867 entitled Run Time Code Injection to Perform Checks filed 3 Jun. 2005 now abandoned each of which is hereby incorporated by reference in its entirety.

The invention relates generally to digital rights management and more particularly by way of example to performing a check at run time to determine if a software application is authorized to execute on a specific hardware platform.

It has become common practice for computer system manufacturers to preload their hardware platforms with one or more software applications. The single most widespread application being the operating system. In many instances the developer of an application may wish to restrict its execution to a specific computer system or hardware platform. Once an application has been distributed however the application s developer owner has little control over its subsequent re distribution. This is becoming an especially vexing problem in that virtually every new computer system in the marketplace includes the software and hardware needed to make exact copies of digital content e.g. applications and multimedia content transfer these copies to magnetic or optical disks and distribute these copies via a computer network e.g. the Internet or corporate or academic intranet .

The application owner may of course require the user to promise not to copy distribute or use the application on another platform as part of the transaction by which the user obtains their copy. Such promises are however easy to make and easy to break. The application owner may also attempt to prevent re distribution or re use in a number of ways usually involving encryption and decryption of the application or the use of specialized security hardware devices dongles . There is very little however that these approaches can do to thwart a determined user.

Thus it would be beneficial to provide a mechanism to restrict the execution of one or more applications to a specific hardware platform that is transparent to the user.

In one embodiment the invention provides a method to manage the execution rights of an application. The method includes selecting an execution unit associated with the application whose execution is to be monitored and controlled. Once selected instructions are injected into the application s run time instruction sequence to generate a cryptologic challenge. In one embodiment instructions are injected into the application s run time instruction sequence at a later time to obtain and verify a response to the cryptologic challenge. If the obtained response fails verification the execution unit is halted. Illustrative execution units include threads and processes. Illustrative applications include operating system and user applications. Illustrative operating system applications include user interface critical applications. Methods in accordance with the invention may be implemented as computer executable instructions and stored in any media that is readable and executable by a computer system.

Methods devices and systems to limit the execution of software applications to unique hardware platforms by injecting code in a run time environment are described. Illustrative software applications include but are not limited to operating systems user applications and specific versions of operating systems and user applications. Illustrative hardware platforms include but are not limited to personal computers server computer systems personal digital assistant devices and mobile telephones. While the claimed subject matter is not so limited the following embodiments of the invention described in terms of Trusted Platform Modules TPMs and operating system software from APPLE COMPUTER INC. of Cupertino Calif. are illustrative only and are not to be considered limiting in any respect.

One of ordinary skill in the art will recognize that TPMs are commercially available components that perform a set of cryptographic crypto capabilities internally such that hardware and software agents outside the TPM do not have access to the execution of these functions. Accordingly hardware and software external to the TPM can only provide input output to the TPM. Illustrative crypto capabilities include but are not limited to an RSA engine for encryption and decryption operations a SHA 1 hash algorithm engine a random number generator and private non volatile memory. Stored within a TPM s non volatile memory is an endorsement key comprising a public private key pair that is unique to each instance of a TPM the private component of which is never exposed outside the TPM. A TPM is typically embodied in a semiconductor chip that is affixed to a hardware platform s circuit board e.g. a computer system s motherboard . It will further be recognized that TPM operations may conform to Trusted Computing Platform Alliance TCPA specifications as published by the Trusted Computing Group see https www.trustedcomputinggroup.org home including the support of industry standard cryptographic Application Programming Interfaces APIs .

Referring to authorization technique in accordance with the invention generally includes pre use phase and run time phase . During pre use phase a hardware platform is authorized to run specified applications such as for example an operating system or a specified version thereof. In one embodiment pre use phase is performed at the time a hardware platform e.g. computer system is manufactured or at least prior to delivery to the end user. During run time phase periodic challenges are generated that verify the platform is authorized to use the specified application s . Accordingly run time phase is performed during end user activities on a generally on going basis.

Referring to in one embodiment pre use phase is performed at platform manufacture time. Following assembly of the target hardware platform including inter alia inclusion of TPM block the unit s hardware is tested block . On successful conclusion of hardware tests the platform is authorized to execute the specified applications block after which applications may be loaded onto the platform s non volatile storage device s block and the unit shipped to the end user block .

The acts of authorizing a hardware platform in accordance with one embodiment of the invention and pursuant to block of are illustrated in . As shown the TPM s public key is obtained block and used to encrypt the authorizing entity s key block . That is the authorizing entity s private key may be encrypted external to TPM . In one embodiment the authorizing entity s key may be a key unique to the application being authorized. In another embodiment the authorizing entity s key may be a key unique to the entity e.g. the business . One of ordinary skill in the art will recognize that key blob resulting from the acts of block is clear text. That is it can be read stored and transmitted as ordinary text. Once generated the key blob is stored on the target platform block . Typically key blob would be stored within TPM although it may also be stored in non volatile memory e.g. non volatile RAM and or disk memory associated with system . In another embodiment the authorizing entity s key may be transmitted to the TPM which encrypts it using internal hardware capabilities see discussion above . Again the resulting key block could be stored within TPM and or in non volatile memory associated with the rest of system .

At some point in time following completion of pre use phase a user obtains and begins using system . It is at this time that run time phase begins. Referring to run time phase periodically generates a challenge to system block . As discussed more fully below a challenge causes system to inject code into an application s executing code sequence stream that causes data to be sent to TPM for cryptologic signing. The resulting signature is then checked to verify that it was signed using the authorizing entity s key in accordance with . If the comparison determines that the platform is authorized to execute one or more running applications the YES prong of block another challenge is generated in accordance with the acts of block at some time in the future. If the platform is not authorized the NO prong of block the effective use of system is halted block .

In general the component generating the challenge injecting code into an executing code path at run time is a trusted component of system so that its operation can be relied upon. In one embodiment designed for use on a platform executing the MAC OS X operating system OS from APPLE COMPUTER INC. of Cupertino Calif. the component responsible for generating challenges block determining the veracity of the results thereto block and if necessary halting the system block is the dynamic translator component of the operating system.

It will be recognized that the dynamic translator is that component of the operating system that invokes and manages dynamically generated object code threads. That is threads or processes whose object code and execution are controlled through just in time JIT compilation techniques. In the MAC OS X the dynamic translator is responsible for the execution of inter alia system and user interface critical applications such as for example the system font server and system user interface server applications. In other embodiments however dynamically generated object code entities e.g. threads or processes may be associated with any application. For example spreadsheet word processing or audio playback applications. Referring to in the MAC OS X environment dynamic translator retrieves code at run time associated with certain system critical applications APP through APP N and compiles the code for execution into threads T through T M that run in operating system dedicated RAM . As part of this process dynamic translator maintains information identifying which applications have threads instantiated in memory which applications each thread is associated with and the state of each thread e.g. executing or blocked .

Referring to a more detailed discussion of the acts associated with block are described. At periodic times e.g. every 5 10 minutes dynamic translator selects a thread from those it has instantiated block . In general the selected time period should be small enough to prevent significant use of an unauthorized application or system yet long enough so as not to degrade system performance. In one embodiment threads are selected randomly from all those threads available to dynamic translator excluding those currently being used to generate challenges. In another embodiment dynamic translator selects a thread based upon one or more specified criteria. For example the most recently or least recently invoked thread not already being used to generate a challenge. Next dynamic translator injects instructions into the translated code stream to cause the selected thread to generate a cryptographic challenge block . At some time in the future e.g. 30 seconds to 2 minutes dynamic translator injects instructions into the translated code stream to cause the selected thread to obtain the results of the cryptographic challenge from TPM and prove the challenge block . It will be recognized that the acts of block are performed after TPM has had an opportunity to complete its tasks see discussion below .

In one embodiment instructions injected into a thread s translated code stream by dynamic translator in accordance with block perform the functions outlined in . First a quantum of data is generated block . In one embodiment the quantum is twenty 20 bytes of randomly generated data. Next the data quantum and key blob obtained during the acts of block are transmitted to TPM block which is then commanded to sign the data quantum block . In accordance with cryptologic standards TPM will then initiate a process that extracts the authorizing entity s private key from key blob and use the extracted private key to sign the data quantum producing a signed block. In one embodiment key blob is transmitted to a TPM each time a challenge is generated see . In another embodiment the TPM is loaded with key blob at computer system boot time and or whenever a system wake event occurs i.e. upon coming out of a system sleep operation .

In one embodiment instructions inserted into a thread s translated code stream by dynamic translator in accordance with block perform the functions outlined in . As shown the thread first obtains the signed block block and then verifies the signature by performing a cryptologic signature verification block . Illustrative signature verification algorithms include but are not limited to the digital signature algorithm DSA as specified in the digital signature standard DSS published by the US government see for example the Federal Information Processing Standards Publication 186 or a compatible algorithm such as for example an RSA digital signature algorithm.

Referring again to in the described embodiment the acts of block correspond to determining whether the signature verification algorithm used in accordance with block indicates a match meaning the data quantum generated in accordance with block was signed by the private key encoded within key blob and passed to the TPM during the acts of block or not. Since the only way the data quantum could have been signed using the authorizing entity s private key was for that key to be encoded within key blob during pre use phase a match the YES prong of block indicates the hardware platform is authorized to use the specific application s executing thereon. A match failure the NO prong of block indicates the hardware platform is not authorized to do so. In accordance with block the thread associated with a failed challenge is terminated effectively disabling continued use of system . In one embodiment only the thread associated with the failed challenge is halted. In another embodiment the dynamic translator is halted. In yet another embodiment all threads associated with the application associated with the failed challenge are halted.

In an embodiment utilizing dynamic translator or a functionally similar component threads may not be able to obtain the results of a challenge for one or more reasons. For example the selected thread may terminate abnormally before a challenge is proved block . In addition the selected thread may block precluding the timely performance of proving a challenge. In the event either of this conditions are detected such information being available to dynamic translator another thread may be selected where after acts in accordance with block are initiated for that thread. It will be understood that this approach permits more than one challenge to be in progress at any given time.

A digital authorization or run time check technique in accordance with the invention permits an authorizing entity to restrict the execution of specific applications to unique pre authorized hardware platforms in a secure manner. For example using dynamic translator or a functionally similar component in the manner described permits a substantially unpredictable memory location from which challenges are generated and proved. Additional security may be obtained by calculating the authorizing entity s public key see block rather than retrieving it from a predetermined location. For still additional security memory assigned by dynamic translator or a functionally similar component to a thread used in accordance with the invention may be tagged for immediate reuse by another thread application in the event authorization in accordance with block fails or once the thread completes processing in the event authorization in accordance with block is successful . Further by ensuring the time between issuing successive challenges is relatively short e.g. 5 to 10 minutes a single authorized platform can be precluded from acting as an authoring agent for a commercially significant number of secondary systems. That is the TPM component of an authorized platform can be substantially prevented from being used by secondary unauthorized systems. 

Various changes in the materials components circuit elements as well as in the details of the illustrated operational methods are possible without departing from the scope of the following claims. In one variation pre use phase can be implemented after manufacture as long as the agent providing the authorizing entity s key has access to same. In these post build embodiments TPM or system flash memory may be used to retain a plurality of hardware platform specific key blobs one for each application or entity granting a user the right to execute their application s . In another variation TPM is not used. That is the inventive techniques to perform checks through run time code injection may be used in systems that do not have a TPM or other hardware dedicated cryptologic computational engine. In these cases a general purpose computational element e.g. a central processing or arithmetic processing unit may be used instead of TPM . In addition the illustrative system of may include additional or fewer components than shown. Further acts in accordance with may be performed by a programmable control device executing instructions organized into one or more program modules. A programmable control device may be a single computer processor a special purpose processor e.g. a digital signal processor DSP a plurality of processors coupled by a communications link or at least in part by a custom designed state machine. Custom designed state machines may be embodied in a hardware device such as an integrated circuit including but not limited to application specific integrated circuits ASICs or field programmable gate array FPGAs . Storage devices suitable for tangibly embodying program instructions include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

The preceding description was presented to enable any person skilled in the art to make and use the invention as claimed and is provided in the context of the particular examples discussed above variations of which will be readily apparent to those skilled in the art. Accordingly the claims appended hereto are not intended to be limited by the disclosed embodiments but are to be accorded their widest scope consistent with the principles and features disclosed herein.

