---

title: Replenishing data descriptors in a DMA injection FIFO buffer
abstract: Methods, apparatus, and products are disclosed for replenishing data descriptors in a Direct Memory Access (‘DMA’) injection first-in-first-out (‘FIFO’) buffer that include: determining, by a messaging module on an origin compute node, whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold, each data descriptor specifying an application message for transmission to a target compute node; queuing, by the messaging module, a plurality of new data descriptors in a pending descriptor queue if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold; establishing, by the messaging module, interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue; and injecting, by the messaging module, the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08037213&OS=08037213&RS=08037213
owner: International Business Machines Corporation
number: 08037213
owner_city: Armonk
owner_country: US
publication_date: 20070530
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for replenishing data descriptors in a DMA injection FIFO buffer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost. Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather.

When a parallel application running on a compute node transmits a message to another compute node connected to the data communications network the application typically provides messaging software with a pointer to an application buffer storing the message. The messaging software creates a data descriptor that describes the message and injects the data descriptor in an injection first in first out FIFO buffer for a direct memory access DMA engine. The DMA engine in turn processes the data descriptor and sends the message through the network using a DMA transfer operation. The problem often arises however that the injection FIFO buffer becomes full of data descriptors because the DMA engine cannot process the descriptors as fast as the messaging software injects the descriptors into the injection FIFO buffer. Readers will therefore appreciate advancements in administering the injections of data descriptors in the DMA injection FIFO buffer and in particular advancements in replenishing data descriptors in the DMA injection FIFO buffer.

Methods apparatus and products are disclosed for replenishing data descriptors in a Direct Memory Access DMA injection first in first out FIFO buffer that include determining by a messaging module on an origin compute node whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold each data descriptor specifying an application message for transmission to a target compute node queuing by the messaging module a plurality of new data descriptors in a pending descriptor queue if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold establishing by the messaging module interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . The parallel computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The system of operates generally for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention as follows A messaging module on an origin compute node determines whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold. If the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold then the messaging module queues a plurality of new data descriptors in a pending descriptor queue. The messaging module establishes interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue. The messaging module then injects the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria. In this specification readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message.

A data descriptor is a data structure that specifies a message for transmission to a target compute node and specifies transmission data related to the message. For example a data descriptor may describe the address of the buffer storing the message and the size of the message and may specify the particular message type of the message and the packet headers to be used in transmitting the message. The data descriptor may also specify a data transfer operation for transferring the application message to the target compute node.

Interrupt criteria are conditions established by the messaging module that generate a processor interrupt on the origin compute node to allow the messaging module to resume processing control of the processor in order to inject new data descriptors stored in the pending descriptor queue into the DMA injection FIFO buffer. The interrupt criteria may be implemented as the expiration of an interrupt timer or the processing of a replenish descriptor by the DMA engine. A replenish descriptor is a special type of data descriptor specifying a DMA data transfer operation carried out locally on the origin compute node to notify the messaging module when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates an application buffer for storing a message for transmission to another compute node.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

In the example of the messaging module operates generally to replenish data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The messaging module operates generally to replenish data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention by determining whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold each data descriptor specifying an application message for transmission to a target compute node queuing a plurality of new data descriptors in a pending descriptor queue if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold establishing interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injecting the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of replenishing data descriptors in a DMA injection FIFO buffer in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in replenishing data descriptors in a DMA injection FIFO buffer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of replenishing data descriptors in a DMA injection FIFO buffer in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for replenishing data descriptors in a DMA injection FIFO buffer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with assigned to the root node assigned to the first node in the second layer of the tree assigned to the second node in the second layer of the tree assigned to the first node in the third layer of the tree assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the origin compute node and an application installed on the target compute node . In the example of the application on the origin compute node has an application message for transmission to the application on the target compute node . Data communications between applications are effected using messaging modules installed on each of the compute nodes . Applications and may communicate by invoking function of an application programming interfaces API exposed by the application messaging modules and . To transmit application messages to the application the application of may invoke a function of an API for messaging module that passes buffer identifiers for an application buffers containing the application messages to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin compute node and messaging module installed on the target compute node . Each messaging module and exposes a set of APIs to its respective application and in the application layer . When an application invokes an API for the messaging module the messaging module of receives the buffer identifier from the application through the messaging module s API exposed to the application . The messaging module then creates a data descriptor that specifies a DMA transfer operation for transferring the application message from the origin compute node to the target compute node and injects that data descriptor in an injection FIFO buffer for a DMA engine that processes the transmission.

The messaging module of operates generally for replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention. The messaging module determines whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold and queues a plurality of new data descriptors in a pending descriptor queue if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold. The messaging module then establishes interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injects the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

Interrupt criteria are conditions established by the messaging module that generate a processor interrupt on the origin compute node to allow the messaging module to resume processing control of the processor in order to inject the plurality of new data descriptors stored in the pending descriptor queue into the DMA injection FIFO buffer . The interrupt criteria may be implemented as the expiration of an interrupt timer or the processing of a replenish descriptor by the DMA engine. A replenish descriptor is a special type of data descriptor specifying a DMA data transfer operation carried out locally on the origin compute node to notify the messaging module when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue. When the number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold the messaging module of injects the replenish descriptor into the injection FIFO buffer . After the DMA engine processes the data descriptors in the injection FIFO buffer the DMA engine will process the replenish descriptor which in turn generates an interrupt that allows the messaging module to replenish the injection FIFO buffer with the new data descriptors stored in the pending descriptor queue .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and many other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes a transmission stack for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stack for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in replenishing data descriptors in a DMA injection FIFO buffer according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes an injection FIFO buffer for storing data descriptors that specify DMA transfer operations for transferring data such as for example a memory FIFO data transfer operation or a direct put operation. The data descriptors of stored in the injection FIFO buffer may be regular data descriptors that specify messages to be sent to other DMA engines on other compute nodes or may be special replenish descriptors that are used to provide processing control to the messaging module in order to replenish the injection FIFO buffer with the new data descriptors queued in the pending descriptor queue . Although not shown the exemplary DMA engine of also includes a number of reception FIFO buffers used to store packets received from the network through the communications hardware . Although only illustrates a single injection FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers.

A memory FIFO data transfer operation is a mode of transferring data using DMA engines typically a DMA engine on an origin node and a DMA engine on a target node. In a memory FIFO data transfer operation data is transferred along with a data descriptor describing the data from an injection FIFO for the origin DMA engine to a target DMA engine. The target DMA engine in turns places the descriptor in the reception FIFO and caches the data. A core processor then retrieves the data descriptor from the reception FIFO and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

A direct put operation is a mode of transferring data using DMA engines typically a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

In addition to specifying DMA data transfer operations each data descriptor of also specifies one of the DMA counters for use in the DMA transfer operation specified by the data descriptor . Some or all of the DMA counters may be implemented as shared DMA counters. A shared DMA counter is a DMA counter that is utilized concurrently for multiple data transfer operations. That is more than one descriptor in the injection FIFO buffer may specify the same counter . The use of shared DMA counters helps to avoid the problem of having to pend data transfers until a dedicated DMA counter is available to be assigned to a data descriptor for use in a DMA transfer operation. Dedicated DMA counters for each data transfer operation may not always be available because of the limited number of DMA counters typically allocated to the DMA engine. In fact in many system configurations the DMA engine may only have access to sixty four DMA counters.

In traditional systems the DMA counters are dedicated to a single data transfer operation and are not shared concurrently among multiple data descriptors. Dedicated DMA counters are used by the origin compute node to identify when a data transfer is complete. The DMA engine uses a dedicated DMA counter associated with a particular data descriptor to track the amount of message data remaining to be sent for that descriptor by setting the value of the counter to the size of the data to be transferred and decrementing the value of the counter as the data is transferred to the target compute node. Each DMA counter corresponds with a single bit in a counter status register . When the value of one of the counters reaches zero the DMA engine sets the bit in the counter status register that corresponds to the DMA counter that reached zero. When the processor polls the counter status register and identifies that one of the bits in the counter status register is set the processor notifies the application initiating the data transfer that the data transfer is complete. The processor may poll the counter status register periodically or in response to an interrupt generated by the DMA engine when a bit in the counter status register is set.

As mentioned above some of the DMA counters may be implemented as shared DMA counters which do not provide a way to track when a particular data transfer specified by a data descriptor is complete because a single shared DMA counter is shared among multiple data descriptors. Because the shared DMA counters in the example of are not typically utilized to track the completion of a data transfer in systems capable of replenishing data descriptors in a DMA injection FIFO buffer according to the present invention the origin DMA engine disregards values for the shared DMA counters . The origin DMA engine disregards values for the shared DMA counters by disabling a counter hit zero interrupt that occurs when a counter reaches zero or simply not setting the bits in the counter status register when a counter reaches zero.

For further explanation sets forth a flow chart illustrating an exemplary method for replenishing data descriptors in a DMA injection FIFO buffer according to the present invention. The method of includes creating by the messaging module a data descriptor for an application message . A data descriptor is a data structure that specifies a message for transmission to a target compute node and specifies transmission data related to the message. For example a data descriptor may describe the address of the buffer storing the message and the size of the message and may specify the particular message type of the message and the packet headers to be used in transmitting the message. The data descriptor may also specify a data transfer operation for transferring the application message to the target compute node. The messaging module may create a data descriptor for an application message according to the method of in response to receiving from an application a buffer identifier of a buffer containing the application message for transmission to target compute node. The application may provide a buffer identifier to the messaging module as a parameter to a send messaging function of the messaging module used by the application to transmit the message to the target compute node.

The method of includes determining by a messaging module on an origin compute node whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold . Each data descriptor of in the DMA injection FIFO buffer specifies an application message for transmission to a target compute node. The predetermined threshold of represents the maximum number of data descriptors that the messaging module injects in the injection FIFO buffer before queuing any new data descriptors in a pending descriptor queue . The messaging module may determine whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold according to the method of by comparing the number of data descriptors in a DMA injection FIFO buffer to the predetermined threshold . If the number of data descriptors in a DMA injection FIFO buffer is greater than the predetermined threshold then the number of data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold . If the number of data descriptors in a DMA injection FIFO buffer is less than the predetermined threshold then the number of data descriptors in the DMA injection FIFO buffer does not exceed the predetermined threshold .

The method of includes injecting by the messaging module the data descriptor into the injection FIFO buffer if the number of the data descriptors in the DMA injection FIFO buffer does not exceed the predetermined threshold . The messaging module may inject the data descriptor into the injection FIFO buffer according to the method of by passing the data descriptor to the DMA engine through an API exposed by the DMA engine for storage in the next available slot of injection FIFO buffer .

The method of also includes queuing by the messaging module a plurality of new data descriptors in a pending descriptor queue if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold . The data descriptors in the example of are new in the sense that these descriptors were created after the number of data descriptors in the injection FIFO buffer exceeded the predetermined threshold. The messaging module may queue a plurality of new data descriptors in a pending descriptor queue according to the method of by storing the new data descriptors in the next available slot of the pending descriptor queue .

The method of includes establishing by the messaging module interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue . Establishing by the messaging module interrupt criteria according to the method of is carried out by setting an interrupt timer . The interrupt timer of represents a timer that generates an interrupt when the timer expires that allows the messaging module to resume processor control. The messaging module may set the interrupt timer according to the method of by initializing the interrupt timer with a initial counter value that is predetermined or based on historical metrics measuring the time period required by the DMA engine to process all the data descriptors in the injection FIFO buffer .

The method of also includes injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria. Injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria according to the method of is carried out by injecting the plurality of new data descriptors into the injection FIFO buffer when the interrupt timer has expired. The messaging module may inject the plurality of new data descriptors into the injection FIFO buffer according to the method of by retrieving the plurality of new data descriptors from the pending descriptor queue and storing the plurality of new data descriptors in the next available slots of the injection FIFO buffer . Readers will note that injecting the plurality of new data descriptors into the injection FIFO buffer when the interrupt timer has expired advantageously interrupts the processor only periodically in order to efficiently move multiple data descriptors from the pending descriptor queue to the injection FIFO buffer during a single interrupt rather than generating an interrupt after each descriptor in the injection FIFO buffer is processed in order to move a single data descriptor from the pending descriptor queue to the injection FIFO buffer at a time.

The method of is similar to the method of . That is the method of includes creating by the messaging module a data descriptor for an application message of an application determining by a messaging module on an origin compute node whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold injecting by the messaging module the data descriptor into the injection FIFO buffer if the number of the data descriptors in the DMA injection FIFO buffer does not exceed the predetermined threshold if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold queuing by the messaging module a plurality of new data descriptors in a pending descriptor queue establishing by the messaging module interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

The method of differs from the method of in that establishing by the messaging module interrupt criteria is carried out by injecting a replenish descriptor in the injection FIFO buffer for a local memory FIFO transfer. A local memory FIFO transfer operation is a memory FIFO data transfer operation for which the origin compute node and the target compute node are the same compute node. That is a compute node transfers data to itself in a local memory FIFO transfer operation. As mentioned above a replenish descriptor is a special type of data descriptor specifying a DMA data transfer operation carried out locally on the origin compute node to notify the messaging module when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue. In the example of the replenish descriptor specifies a packet header for a replenish packet . The packet header of specifies a DMA packet handler for notifying the messaging module to replenish the injection FIFO buffer with the plurality of new data descriptors . In the example of the packet header specifies a DMA packet handler using a packet handler identifier . The messaging module injects the replenish descriptor in the injection FIFO buffer for a local memory FIFO transfer according to the method of by storing the replenish descriptor in the next available slot in the injection FIFO buffer . A slot is kept available in the injection FIFO buffer by configuring the predetermined threshold lower than the maximum number of slots capable of being stored in the injection FIFO buffer .

The method of also includes sending by a DMA engine on the origin compute node the replenish packet to a local reception FIFO buffer using the local memory FIFO transfer. The DMA engine may send the replenish packet to a local reception FIFO buffer using the local memory FIFO transfer according to the method of by retrieving the packet header from the replenish descriptor in the injection FIFO buffer creating the replenish packet having the packet header and transmitting the replenish packet to the reception FIFO buffer using a local memory FIFO data transfer operation as specified by the replenish descriptor . The replenish descriptor specifies the local memory FIFO data transfer operation using a transfer operation identifier and a local transfer flag . The transfer operation identifier is used to specify whether the particular data transfer operation is a memory FIFO transfer operation or a direct put transfer operation. The location transfer flag indicates whether the data transfer operation is carried out locally such that the origin compute node and the target compute node for the operation are the same compute node. In the example of the transfer operation identifier specifies that the data transfer operation is a memory FIFO data transfer operation and the local transfer flag is set to indicate that the transfer is a local transfer.

The method of also includes processing by the DMA engine the replenish packet using the DMA packet handler specified in the packet header of the replenish packet . Processing by the DMA engine the replenish packet using the DMA packet handler specified in the packet header of the replenish packet according to the method of includes triggering an interrupt that returns processor control to the messaging module when the replenish packet arrives in the reception FIFO buffer thereby notifying the messaging module to replenish the injection FIFO buffer . The DMA engine may then go on to process the replenish packet using the DMA packet handler specified in the packet header of the replenish packet according to the method of by retrieving from a packet handler table a pointer to a packet handler function associated with the packet handler identifier specified in the packet header of the replenish packet and calling the packet handler function identified by the retrieved pointer .

As mentioned above the method of includes injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria. Injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria according to the method of includes injecting the plurality of new data descriptors into the injection FIFO buffer in response to receiving the notification to replenish the injection FIFO buffer from the DMA engine . The messaging module may inject the plurality of new data descriptors into the injection FIFO buffer according to the method of by retrieving the plurality of new data descriptors from the pending descriptor queue and storing the plurality of new data descriptors in the next available slots of the injection FIFO buffer when processing control returns to the messaging module . As mentioned above processing control returns to the messaging module through the interrupt generated by the DMA engine notifying the messaging module to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue . Readers will note that injecting the plurality of new data descriptors into the injection FIFO buffer in response to receiving the notification to replenish the injection FIFO buffer from the DMA engine advantageously interrupts the processor only periodically in order to efficiently move multiple data descriptors from the pending descriptor queue to the injection FIFO buffer during a single interrupt rather than generating an interrupt after each descriptor in the injection FIFO buffer is processed in order to move a single data descriptor from the pending descriptor queue to the injection FIFO buffer at a time.

In the example of the messaging module establishes interrupt criteria by injecting a replenish descriptor in a DMA injection FIFO buffer for a local memory FIFO transfer. Readers will note however that the messaging module may also establish interrupt criteria by injecting a replenish descriptor in a DMA injection FIFO buffer for a local direct put operation. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for replenishing data descriptors in a DMA injection FIFO buffer according to the present invention that includes injecting a replenish descriptor in the injection FIFO buffer for a local direct put operation.

The method of is similar to the method of . That is the method of includes creating by the messaging module a data descriptor for an application message of an application determining by a messaging module on an origin compute node whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold injecting by the messaging module the data descriptor into the injection FIFO buffer if the number of the data descriptors in the DMA injection FIFO buffer does not exceed the predetermined threshold if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold queuing by the messaging module a plurality of new data descriptors in a pending descriptor queue establishing by the messaging module interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

The method of differs from the method of in that establishing by the messaging module interrupt criteria is carried out by injecting a replenish descriptor in the injection FIFO buffer for a local direct put operation. A local direct put transfer operation is a direct put operation for which the origin compute node and the target compute node are the same compute node. That is a compute node transfers data to itself in a local direct put transfer operation. As mentioned above a replenish descriptor is a special type of data descriptor specifying a DMA data transfer operation carried out locally on the origin compute node to notify the messaging module when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue. In the example of the replenish descriptor specifies a DMA counter . The DMA counter of represents a dedicated DMA counter assigned to the replenish descriptor . The DMA counter is dedicated in the sense that it is not a shared DMA counter utilized concurrently in multiple DMA transfer operations.

The method of includes processing by a DMA engine on the origin compute node the replenish descriptor . The DMA engine may process the replenish descriptor according to the method of by initializing the DMA counter to the size of the data to be transferred using the direct put operation. The size of the data to be transferred is typically included in the metadata of the replenish descriptor . The replenish descriptor of specifies a local direct put operation using a transfer operation identifier and a local transfer flag . The transfer operation identifier is used to specify whether the particular data transfer operation is a memory FIFO transfer operation or a direct put transfer operation. The location transfer flag indicates whether the data transfer operation is carried out locally such that the origin compute node and the target compute node for the operation are the same compute node. In the example of the transfer operation identifier specifies that the data transfer operation is a direct put transfer operation and the local transfer flag is set to indicate that the transfer is a local transfer. Processing by a DMA engine on the origin compute node the replenish descriptor according to the method of includes performing the local direct put operation and decrementing the DMA counter as the local direct put operation is performed. When the DMA counter has been decremented to a value of zero then a hit zero interrupt is triggered that results in processing control returning to the messaging module .

As mentioned above the method of includes injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria. Injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria according to the method of includes injecting the plurality of new data descriptors into the injection FIFO buffer in response to an interrupt indicating that the DMA counter has been decremented to a value of zero. The messaging module may inject the plurality of new data descriptors into the injection FIFO buffer according to the method of by retrieving the plurality of new data descriptors from the pending descriptor queue and storing the plurality of new data descriptors in the next available slots of the injection FIFO buffer when processing control returns to the messaging module . As mentioned above processing control returns to the messaging module through the interrupt generated when the DMA counter has been decremented to a value of zero. Readers will note that injecting the plurality of new data descriptors into the injection FIFO buffer in response to an interrupt indicating that the DMA counter has been decremented to a value of zero advantageously interrupts the processor only periodically in order to efficiently move multiple data descriptors from the pending descriptor queue to the injection FIFO buffer during a single interrupt rather than generating an interrupt after each descriptor in the injection FIFO buffer is processed in order to move a single data descriptor from the pending descriptor queue to the injection FIFO buffer at a time.

In the example of readers will note that the replenish descriptor was assigned a dedicated DMA counter used to generate an interrupt that returned processor control to the messaging module. In some embodiments however the replenish descriptor may be assigned a shared DMA counter that is unable to properly trigger an interrupt to return processor control to the messaging module and thereby allow the messaging module to replenish the DMA injection FIFO buffer with new data descriptors. When the replenish descriptor is assigned a shared DMA counter the DMA engine may perform a local direct put operation to interrupt on touch memory capable of generating the interrupt to return processor control to the messaging module. Interrupt on touch memory is a type of memory that generates an interrupt each time the memory is accessed. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for replenishing data descriptors in a DMA injection FIFO buffer according to the present invention in which a replenish descriptor specifies a location in interrupt on touch memory .

The method of is similar to the method of . That is the method of includes creating by the messaging module a data descriptor for an application message of an application determining by a messaging module on an origin compute node whether a number of data descriptors in a DMA injection FIFO buffer exceeds a predetermined threshold injecting by the messaging module the data descriptor into the injection FIFO buffer if the number of the data descriptors in the DMA injection FIFO buffer does not exceed the predetermined threshold if the number of the data descriptors in the DMA injection FIFO buffer exceeds the predetermined threshold queuing by the messaging module a plurality of new data descriptors in a pending descriptor queue establishing by the messaging module interrupt criteria that specify when to replenish the injection FIFO buffer with the plurality of new data descriptors in the pending descriptor queue and injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria.

The method of differs from the method of in that establishing by the messaging module interrupt criteria is carried out by injecting a replenish descriptor in the injection FIFO buffer for a local direct put operation. As mentioned above the replenish descriptor specifies a location in interrupt on touch memory for transferring data using a local direct put operation. Transferring data to the location in interrupt on touch memory generates an interrupt that returns processor control to the messaging module thereby allowing the messaging module to replenish the injection FIFO buffer with the new data descriptors in the pending descriptor queue .

The method of also includes processing by a DMA engine on the origin compute node the replenish descriptor including performing the local direct put operation. The DMA engine processes the replenish descriptor according to the method of by storing data specified in the replenish descriptor at the location in interrupt on touch memory . Upon storing the data in interrupt on touch memory an interrupt is generated that returns processing control to the messaging module .

As mentioned above the method of includes injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria. Injecting by the messaging module the plurality of new data descriptors into the injection FIFO buffer in dependence upon the interrupt criteria according to the method of includes injecting the plurality of new data descriptors into the injection FIFO buffer in response to an interrupt indicating that the local direct put operation stored a value at the location in the interrupt on touch memory . The messaging module may inject the plurality of new data descriptors into the injection FIFO buffer according to the method of by retrieving the plurality of new data descriptors from the pending descriptor queue and storing the plurality of new data descriptors in the next available slots of the injection FIFO buffer when processing control returns to the messaging module . As mentioned above processing control returns to the messaging module through the interrupt generated when the DMA engine performs a direct put operation to store data specified by the replenish descriptor in interrupt on touch memory . Readers will note that injecting the plurality of new data descriptors into the injection FIFO buffer in response to an interrupt indicating that the local direct put operation stored a value at the location in the interrupt on touch memory advantageously interrupts the processor only periodically in order to efficiently move multiple data descriptors from the pending descriptor queue to the injection FIFO buffer during a single interrupt rather than generating an interrupt after each descriptor in the injection FIFO buffer is processed in order to move a single data descriptor from the pending descriptor queue to the injection FIFO buffer at a time.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for replenishing data descriptors in a DMA injection FIFO buffer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

