---

title: Apparatus for file system management with virtual file name
abstract: An apparatus for file system management includes a non-volatile storage device, a volatile memory device, and a processing unit. The non-volatile storage device stores a file containing actual file content. The volatile memory device storing physical file handle context comprises a pointer to the beginning of the actual file content. The processing unit receives a virtual file generation request with a physical file handle corresponding to the physical file handle context, and mapping information of a segment of the actual file content, and generates a virtual file name including the physical file handle and the mapping information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831578&OS=07831578&RS=07831578
owner: Mediatek, Inc.
number: 07831578
owner_city: Hsin-Chu
owner_country: TW
publication_date: 20070423
---
The present application claims the benefit of U.S. provisional application entitled VIRTUAL FILE Ser. No. 60 745 862 filed Apr. 28 2006 now abandoned.

The invention relates to an operating system and more particularly to methods and apparatuses for file system management.

In computing a file system contains various file manipulation methods for storing to and retrieving files from storage devices such as hard disks non volatile memory devices and others. The file system defines the directory structure for tracking files and path syntax required for accessing files. The file system typically provides several application programming interfaces API enabling file manipulation methods to be performed by software applications.

Apparatuses for file system management are provided. An embodiment of an apparatus for file system management comprises a non volatile storage device a volatile memory device and a processing unit. The non volatile storage device stores a file containing actual file content. The volatile memory device stores physical file handle context storing a pointer to the beginning of the actual file content. The processing unit receives a virtual file generation request with a physical file handle corresponding to the physical file handle context and mapping information of a segment of the actual file content and generates a virtual file name comprising the physical file handle and the mapping information.

An embodiment of an apparatus for file system management comprises a non volatile storage device a volatile memory device and a processing unit. The non volatile storage device stores a file containing actual file content. The processing unit receives a file open request with a file name determines whether the file name is a physical file name or a virtual file name generates and stores physical file handle context in the volatile memory device comprising a pointer to the beginning of the actual file content when the file name is the physical file name and assigns a physical file handle corresponding to the physical file handle context. The processing unit generates and stores virtual file handle context in the volatile memory device comprising the assigned physical file handle and mapping information of a segment of the actual file content when the file name is the virtual file name and assigns a virtual file handle corresponding to the virtual file handle context.

An embodiment of an apparatus for file system management comprises a non volatile storage device a volatile memory device and a processing unit. The non volatile storage device stores a file containing actual file content. The volatile memory device stores physical file handle context comprising a pointer to the beginning of the actual file content and a current access position from the beginning of the actual file content. The volatile memory device further stores virtual file handle context comprising the assigned physical file handle a current access position from the beginning of the segment of the actual file content and mapping information of a segment of the actual file content. The processing unit receives a file seek request with a file handle and forward reverse distance determines whether the file handle is the physical file handle or the virtual file handle and modifies the current access position of the actual file content of the physical file handle context by increasing decreasing the forward reverse distance when the file handle is the physical file handle. The processing unit further modifies the current access position of the segment of the actual file content of the virtual file handle context by increasing decreasing the forward reverse distance when the file handle is the virtual file handle.

When opening a physical file software application calls the API FS Open and provides a physical file name with a logical drive identifier and a logical path i.e. a full physical file name to the file system for example FS Open C DIR FILE.EXT where C indicates a logical drive identifier DIR indicates a logical path following the logical drive identifier and FILE.EXT indicates a physical file name stored in the indicated logical drive and the logical path. Subsequently the file system creates and stores physical file handle context in the volatile memory device and responds to the software application with the created physical file handle. The physical file handle is a temporary reference typically a number assigned by the file system to the designated physical file corresponding to the file open request of software application . The physical file handle is used throughout the session to access the designated physical file. When opening a virtual file corresponding to a physical file the software application can also call the same API FS Open and provide a virtual file name containing mapping information regarding a physical file handle an offset from the beginning of the corresponding physical file and a length of a segment of the corresponding physical file for example FS Open PSEUDOFILE 56324170 CHECKSUM 1024 2048 where PSEUDOFILE indicates the keyword of virtual file 56324170 indicates a physical file handle 1024 indicates a offset from the beginning of the corresponding physical file of bytes and 2048 indicates a length of a segment of the corresponding physical file of bytes. The offset and the length may be also called segment information. Those skilled in the art will also realize that the segment information in two offsets such as a start offset from the beginning of the corresponding physical file and an end offset from the beginning of the corresponding physical file describe a segment of the corresponding physical file. Subsequently the file system creates and stores virtual file handle context in the volatile memory device and responds to the software application with the created virtual file handle. The virtual file handle is also a temporary reference typically a number assigned by the file system to the designated virtual file corresponding to file open request of software application .

In step S physical file handle context for a physical file is created and stored in the volatile memory device . In step S the file system responses to the application with a newly created physical file handle. is a diagram illustrating details of exemplary physical file open with reference to steps S S S and S . After acquiring a physical file name of a physical file F referring to step S of the file system creates and stores physical file handle context H providing relevant information for accessing the opened physical file F in the volatile memory device referring to step S of . The physical file F contains metadata F and actual file content F. The metadata F may comprise supplementary information of the physical file F such as a file index file properties the stored directory or path of the non volatile storage device or others. The physical file handle context H mainly contains a physical file name the duplication of the metadata F of the non volatile storage device a pointer to the beginning of the metadata F of the non volatile storage device a pointer to the beginning of the actual file content F of the non volatile storage device a current offset i.e. a current access position from the beginning of the stored actual file content F or others. After creating and storing the file handle context H the file system assigns and responds with a physical file handle for the opened physical file referring to step S .

In step S virtual file handle context for a virtual file is created and stored in the volatile memory device . In step S the file system responses to the application with a newly created virtual file handle. is a diagram illustrating details of an exemplary virtual file open operation with reference to steps S S S and S . After acquiring a virtual file name corresponding to previously opened physical file F referring to step S of the file system extracts physical file handle and mapping information from the acquired virtual file name. Virtual file handle context H providing the extracted physical file handle and mapping information for accessing a portion of the opened physical file F is created and stored in the volatile memory device referring to step S of . The generation of virtual file name is to be described in detail in the following and is only briefly described herein. The virtual file handle context H mainly contains a virtual file name a virtual file handle keyword or tag the extracted physical file handle to the stored physical file handle context H of the volatile memory device the extracted mapping information regarding a segment of the stored actual file content F of the non volatile storage device F a current offset i.e. a current access position from the beginning of the virtual file or others. After creating and storing the virtual file handle context H the file system assigns and responds with a virtual file handle for the opened virtual file referring to step S .

When generating a virtual file the software application must call the API FS VFGen and provide the previously acquired physical file handle and information regarding a segment of a physical file for example FS VFGen 56234170 1024 2048 where 56234170 indicates a physical file handle 1024 indicates an offset of bytes from the beginning of the corresponding physical file and 2048 indicates a length of the segment of the corresponding physical file. Subsequently the file system generates a virtual file name comprising the provided physical file handle and information regarding the segment of physical file for example PSEUDOFILE 56324170 CHECKSUM 1024 2048 and responds to the software application with the generated virtual file name. The software application can further utilize the generated virtual file name to open a virtual file. is a flowchart illustrating an embodiment of a virtual file generation method performed by the file system . In step S a physical file handle and mapping information of a segment of a physical file are acquired via the provided API FS VFGen where the provided API FS VFGen when called is a virtual file generation request issued from an application. In step S a virtual file name comprising the acquired physical file handle and mapping information is generated. In step S the file system responses to the software application with the generated virtual file name.

When seeking a physical file the software application calls the API FS Seek and provides the previously acquired physical file handle and forward reverse distance of bytes for example FS Seek 56234170 10 where 56234170 indicates a physical file handle and 10 indicates a reverse distance of 10 bytes. Subsequently the file system modifies a current access position of the physical file in the physical file handle context H by increasing decreasing the provided forward reverse distance and responds with a success message. Similarly when seeking a virtual file the software application must call the same API FS Seek and provide the previously acquired virtual file handle and forward reverse distance of bytes for example FS Seek 66234170 10 where 66324170 indicates a virtual file handle and 10 indicates a forward distance of 10 bytes. Subsequently the file system modifies a current access position of the virtual file in the virtual file handle context H by increasing decreasing the provided forward reverse distance and responds with a success message. is a flowchart illustrating an embodiment of a file seeking method performed by the file system . In step S a file handle and a forward or reverse byte are acquired via the API FS Seek where the provided API FS Seek when called is a file seek request issued from an application. In step S it is determined whether the acquired file handle is a physical or virtual file handle. If the acquired file handle is a virtual file handle the process proceeds to step S otherwise to step S. In step S a current access position of the virtual file in the virtual file handle context H is increased decreased by the acquired forward reverse distance. In step S a current access position of the physical file in the physical file handle context H is increased decreased by the acquired forward reverse distance. In step S the file system responds to the software application with a success message.

Software application calls the API FS Read to read a physical file and obtain the previously acquired physical file handle and a read length of bytes for example FS Read 56234170 100 where 56234170 indicates a physical file handle and 100 indicates a read length of 100 bytes. Subsequently the file system determines a start read position of the beginning of the actual file content F plus current access offset of the physical file handle context H acquires the read length data from the determined start read position of the actual file content F and responds with the acquired data. Similarly when reading a virtual file the software application must call the API FS Read and provide the previously acquired virtual file handle and a read length of bytes for example FS Read 66234170 100 where 66234170 indicates a virtual file handle and 100 indicates a read length of 100 bytes. Subsequently the file system determines a start read position of the beginning of the actual file content F plus the offset of the virtual file handle context H further plus current access offset of the virtual file handle context H acquires the read length data from the determined start read position of the actual file content F and responds with the acquired data. are flowcharts illustrating an embodiment of a file read method performed by the file system . In step S a file handle and a read length of bytes are acquired via the provided API FS Read where the provided API FS Read when called is a file read request issued from an application. In step S it is determined whether the acquired file handle is a physical or virtual file handle. If the acquired file handle is a virtual file handle the process proceeds to steps S through S and otherwise to steps S through S. In step S physical file handle context corresponding to the acquired virtual file handle is acquired according to a pointer of the stored virtual file handle context. In step S a pointer to the beginning of the actual file content F of non volatile storage device is retrieved from the physical file handle context H . In step S an offset from the beginning of the actual file content F and a current access offset are retrieved from the virtual file handle context H . In step S data of the acquired read length is acquired from the retrieved pointer plus the retrieved offset and current access offset of the actual file content F of non volatile storage device . In step S the file system responds to the software application with the acquired data. In step S a pointer to the beginning of the actual file content F of the non volatile storage device and a current access offset are acquired from the physical file handle context H . In step S data of the acquired read length is acquired from the retrieved pointer plus current access offset of the actual file content F of the non volatile storage device . In step S the file system responds to the software application with the acquired data.

Methods for file system management or certain aspects or portions thereof may take the form of program codes i.e. instructions embodied in tangible media such as floppy diskettes CD ROMS hard drives or any other machine readable storage medium wherein when the program codes are loaded into and executed by a machine such as a computer a DVD recorder or similar the machine becomes an apparatus for practicing the invention. The disclosed methods may also be embodied in the form of program codes transmitted over some transmission medium such as electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program codes are received and loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program codes combine with the processor to provide a unique apparatus that operate analogously to specific logic circuits.

Certain terms are used throughout the description and claims to refer to particular system components. As one skilled in the art will appreciate consumer electronic equipment manufacturers may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function.

Although the invention has been described in terms of preferred embodiment it is not limited thereto. Those skilled in the art can make various alterations and modifications without departing from the scope and spirit of the invention. Therefore the scope of the invention shall be defined and protected by the following claims and their equivalents.

