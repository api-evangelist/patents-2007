---

title: Responding to detected application vulnerability exploits
abstract: A security module detects attempted exploitations of vulnerabilities of an application executing on a computer. A robust function of the application having native error handling functionality is identified. The security module wraps the robust function with an exception handler that catches a “security violation” exception. The exception handler returns an error code of a type that is handled by the application's native error handling functionality. The security module also hooks the application. When a hook is followed, the security module determines whether a vulnerability in the application is being exploited. If an attempted exploit is detected, the security module throws the security violation exception. The application's native error handling functionality unwinds the call stack for the application until it reaches the exception handler wrapping the robust function. The exception handler catches the security violation exception and returns the error code to the application's native error handling functionality.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962961&OS=07962961&RS=07962961
owner: Symantec Corporation
number: 07962961
owner_city: Mountain View
owner_country: US
publication_date: 20071213
---
This invention pertains in general to computer security and in particular to detecting and responding to attempted exploits of vulnerabilities of applications and other programs executing on a computer.

Applications executed on modern computers are often susceptible to a wide variety of network based attacks. Web browsers for example are particularly susceptible to attacks because browsers receive large amounts of content from the Internet. The content can include hypertext markup language HTML web pages scripts in languages such as VBScript and JavaScript and executable content. Other types of applications are also vulnerable. For example email programs and even word processors provide interfaces for executing network based content.

Malicious attackers can compromise such applications by crafting specially formulated inputs that exploit vulnerabilities in the programs. Each input contains code that when executed gives the attackers control over the applications and allows them to perform malicious acts such as capturing keystrokes sending messages on the network deleting files installing malicious software malware such as spyware and adware etc.

One technique for detecting and preventing these malicious exploits is scanning network traffic entering the computer in order to detect malicious code. For example an intrusion detection system IDS can scan network traffic entering an enterprise network for characteristics of malicious code and then prevent the code from entering the enterprise. A problem with this approach is that attackers use classical obfuscation and encryption techniques to evade detection. For example an attacker can create a seemingly innocent script that passes through the IDS but produces a malicious script when executed by an application.

Security software is often configured to detect exploits at the application level due to the difficulty with network based detection described above. Unfortunately application level detection means that when the exploit is detected the vulnerable application may have already begun to process the input that constitutes the exploit. As a result it is difficult to block the exploit without terminating or otherwise adversely impacting the application.

The difficulties described above are addressed by a computer method and computer readable storage medium that use the application s native error handling functionality to address an attempted vulnerability exploit. A computer adapted to detect an attempted exploit of a vulnerability of an application executed by the computer the application having a native robust function having associated native error handling functionality comprises an analysis module configured to determine whether malicious code is attempting to exploit a vulnerability of the application. The computer also comprises an exception generation module configured to throw a security violation exception that is not native to the application responsive to the determination that malicious code is attempting to exploit the vulnerability. The computer further comprises a function wrapping module configured to wrap a native robust function of the application with an exception handler configured to catch the security violation exception and to activate native error handling functionality associated with the robust function in response to catching the security violation exception.

Embodiments of the method comprise determining whether malicious code is attempting to exploit a vulnerability of the application and throwing a security violation exception that is not native to the application responsive to the determination that malicious code is attempting to exploit the vulnerability. The method also comprises wrapping the native robust function of the application with an exception handler configured to catch the security violation exception and to activate the native error handling functionality associated with the robust function in response to catching the security violation exception.

Embodiments of the computer readable storage medium comprise an analysis module configured to determine whether malicious code is attempting to exploit a vulnerability of the application. The computer readable storage medium also comprises an exception generation module configured to throw a security violation exception that is not native to the application responsive to the determination that malicious code is attempting to exploit the vulnerability. The computer readable storage medium further comprises a function wrapping module configured to wrap a native robust function of the application with an exception handler configured to catch the security violation exception and to activate native error handling functionality associated with the robust function in response to catching the security violation exception.

The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

The server provides content to the client via the network . In one embodiment the server is a web server that provides content such as HTML web pages scripts written in interpreted languages such as VBScript and JavaScript executable programs images music multimedia content and the like. In other embodiments the server is a different type of server such as a server dedicated to providing a specific type of content.

In some instances the server may surreptitiously provide malicious code to the client . For example the server may include a malicious script as part of a seemingly innocuous web page. The script when executed by the client attempts to compromise the client by exploiting a vulnerability of a client application. One common vulnerability is a buffer overflow where the malicious code can compromise the client by storing data beyond the boundaries of a fixed length buffer and thereby overwriting adjacent memory locations. Another common vulnerability is faulty logic error processing where the malicious code performs an illogical operation that causes the computer to enter a state where it can be compromised. Once the client is compromised the code can perform other malicious actions.

In one embodiment the client is a computer used by one or more users to connect to servers such as web servers on the network . The client for example can be a personal computer or other network capable device like a personal digital assistant PDA mobile telephone pager or television set top box. For purposes of this description the term client also includes computers such as servers and gateways that have the characteristics described herein.

The client executes one or more applications such as a web browser email program word processor spreadsheet image viewer or music player. The application has an interface for executing or otherwise loading content received from the server via the network stored on a local disk or located elsewhere. In a common example the application is a web browser such as MICROSOFT INTERNET EXPLORER or MOZILLA FIREFOX that includes functionality for downloading web pages from the server and executing scripts written in VBScript or JavaScript contained therein. As mentioned above some content downloaded and or accessed by an application contains malicious code that attempts to exploit a vulnerability in the application and thereby compromise the client . For example VBScript code can attempt to exploit a vulnerability in the web browser or other application executing the script. Executing as used herein also includes methods such as interpreting scripts and performing just in time JIT compiling of scripts into bytecode.

A security module executing on the client detects when malicious code such as a script is attempting to exploit a vulnerability of an application and blocks the exploit. In one embodiment the security module hooks certain functions in the application when the application s executable image is loaded into memory. In addition the security module wraps a robust function in the application with a specialized exception handler. The robust function is one for which the application provides robust error handling functionality.

The hooks cause control to pass to the security module when a hooked function is executed by the application . The security module analyzes the state of the client and or application to determine whether a vulnerability exploit is occurring. If an exploit is occurring the security module throws generates a security violation exception that is handled by only the specialized exception handler. The native exception handling functionality of the application unwinds the call stack for the application until it reaches the specialized exception handler wrapped around the robust function. The specialized exception handler catches processes the security violation exception and returns an error code of a type that the application natively handles to the caller of the robust function. Thus an attempted vulnerability exploit detected by the security module is gracefully handled by the application s own error handling functionality. In many cases the application will continue to run normally.

The network represents the communication pathways between the server and client . In one embodiment the network is the Internet. The network can also utilize dedicated or private communications links that are not necessarily part of the Internet. In one embodiment the network uses standard communications technologies and or protocols such as Ethernet 802.11 etc. Similarly the networking protocols used on the network can include the transmission control protocol Internet protocol TCP IP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL Secure HTTP and or virtual private networks VPNs . In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

The processor may be any general purpose processor such as an INTEL x86 compatible CPU. The storage device is in one embodiment a hard disk drive but can also be any other device capable of storing data such as a writeable compact disk CD or DVD or a solid state memory device. The memory may be for example firmware read only memory ROM non volatile random access memory NVRAM and or RAM and holds instructions and data used by the processor . The pointing device may be a mouse track ball or other type of pointing device and is used in combination with the keyboard to input data into the computer . The graphics adapter displays images and other information on the display . The network adapter couples the computer to the network .

The types of computers utilized by the entities of can vary depending upon the embodiment and the processing power utilized by the entity. For example a client that is a mobile telephone typically has limited processing power a small display and might lack a pointing device . The server in contrast may comprise multiple blade servers working together.

As is known in the art the computer is adapted to execute computer program modules. As used herein the term module refers to computer program logic and or data for providing the specified functionality. A module can be implemented in hardware firmware and or software. In one embodiment the modules are stored on the storage device loaded into the memory and executed by the processor .

In addition this description uses the term application to refer to a program executed by the computer . The application is formed of one or more files that typically reside on the storage device and are loaded into memory when executed. At least one of the files loaded into memory is referred to as the executable image and is executed as a process.

The call stack is a dynamic stack data structure which stores information about the active subroutines of the application . When the application calls a function or other subroutine the application pushes the return address of the current function onto the stack. When the called function finishes the return address of the calling function is popped off the stack and execution continues at that address.

As mentioned above the robust function is always or almost always present in the call stack. When the application executes a calling function within the application will typically call the robust function . The robust function will in turn call other functions. Thus the return address of the robust function and the function that called the robust function will be on the call stack during normal execution of the application .

A function wrapping module wraps the robust function of the application with a wrapping function. The wrap causes a call that would normally invoke the robust function to instead invoke the wrapping function. In one embodiment the function wrapping module wraps the robust function when the application image is loaded into memory.

In one embodiment the wrapping function wraps the robust function in an exception handler including a try catch statement. A try catch statement includes a try . . . section that contains code that might throw an exception and a catch section that includes handler code that catches certain types of exceptions. If a catch section does not catch the particular type of exception that was thrown the application s native exception handling functionality will unwind the call stack until it reaches a catch section that catches the exception. In this embodiment the code of the robust function is wrapped within the try section. In addition the catch section is configured to handle one or more specific security violation exceptions that are thrown only in response to the security module detecting an attempted exploit of a vulnerability in the application .

If the catch section of the exception handler detects a security violation exception it returns an error message back to the calling function i.e. the function that called the robust function . In one embodiment the error message is in the form of a standard function error code. For example in embodiments using the MICROSOFT WINDOWS operating system the error message can take the form of a standard HRESULT value. In embodiments using a variant of the UNIX operating system the error message can take the form of a Boolean value. The calling function will process the error message using the application s native error handling functions. For example if the application is a web browser and the robust function retrieves a web page from a web site the error message returned by the exception handler can indicate that an object on the web page failed to retrieve properly. The application s native error handling function can handle this error e.g. by attempting to retrieve the object again or displaying an error message to the user of the client.

An embodiment of the security module includes a hooking module . The hooking module hooks locations in the application to transfer control flow to the security module . In one embodiment the hooking module hooks the application at locations corresponding to functions methods or interfaces likely to be used by multiple types of exploits. For example the hooking module hooks the interfaces provided by the scripting component of the application that allow executing scripts to interact with the other components of the application. Virtually all malicious scripts must interact with components other than the scripting components in order to perform malicious actions. Therefore the interfaces provided by the scripting components serve as a funnel or chokepoint where a single hook allows detection of multiple types of vulnerability exploits. Different embodiments of the hooking module hook different and or other locations depending upon variations such as the operating system executing on the client the application and the particular vulnerabilities and exploits detected by the security module .

The hooking module uses different hooking techniques in different embodiments. If the application is a web browser an embodiment of the hooking module installs a browser helper object BHO that acts as a hook. The BHO has access to the application programming interface API of the web browser and can monitor operations performed by the web browser. Other embodiments use dynamic link library DLL injection techniques to hook the application .

An interception module activates when hooked code in the application is executed. An embodiment of the interception module saves the state of the application including the parameters of the hooked call if any for analysis. In addition an embodiment of the interception module restores the original state of the application and transfers control flow back to the application if the analysis indicates that no exploit is in progress.

An exploit detection module analyzes the state of the application and or client to determine whether an attempted vulnerability exploit is in progress. In one embodiment the exploit detection module uses a virtual machine in which the state of the application can be analyzed without influencing the external state of the application or client . The virtual machine is bytecode driven and provides general Turing machine functionality allowing it to execute bytecode programs supporting essentially any type of analysis. The virtual machine selectively executes programs called signatures that are designed to programmatically analyze the state of the application and or client in order to detect whether a hooked call is attempting to exploit a vulnerability. Different signatures allow detection of different types of exploits. In one embodiment each signature is designed to detect an exploit of a particular vulnerability of a particular application. For example one signature is designed to detect a logic error such as whether HTML code is exploiting a vulnerability of a particular web browser by creating an object as a child object of a parent where the parent is not allowed to have a child object. Another signature in contrast is designed to detect an exploit of a buffer overflow vulnerability of an email program by determining whether a script is attempting to copy a parameter into a too small destination buffer.

An exception generation module throws a security violation exception if an attempted exploit is detected by the exploit detection module . In one embodiment the exception generation module throws only a single type of security violation exception while in other embodiments it throws different types of exceptions depending upon the type of detected exploit and or other factors. Since the security violation exception is not native to the application any native try catch statements in the application will not catch the exception aside from catch all statements as mentioned below . Accordingly the application s native exception handler will unwind the application s call stack until it reaches the exception handler that wraps the robust function . This function handler catches the security violation exception as described above.

A reporting module reports the results of the analyses performed by the security module . In one embodiment the reporting module provides an alert dialog box or other user interface notification to a user of the client if an exploit is detected and or blocked. The reporting module can perform additional actions such as maintaining a log of analyses performed or exploits detected by the exploit detection module .

The application is analyzed to identify a robust function . In one embodiment this analysis is performed by a security specialist working for the enterprise that provides the security module . For example the security specialist can be employed by the enterprise for the purpose of identifying robust functions in common and popular applications. In one embodiment this analysis is performed by examining the operation of the application using a debugger or other analysis tool. A typical application has only a small number of calls in its call stack. Thus the security specialist can analyze each function in the call stack to identify the robust function. In addition the security specialist can use the analysis tool to investigate the native error handling functions of the application and identify the error codes it uses to represent different types of errors.

An application might include one or more native exception handlers that unintentionally catch the security violation exception issued by the exception generation module . For example the application can include a native exception handler that catches all exceptions. Any such native exception handlers are detected when the application is analyzed to identify the robust function . These exception handlers are subverted or disabled when security violation exceptions are thrown.

In one embodiment the results of the analysis are provided to security modules in the clients via the network or other means. Data describing the locations of robust functions in multiple common applications are stored in a file which is then distributed to the security modules at the clients as a software update. The security module at a client receives the software update and identifies any of the common applications that are installed on the client.

The security module at the client wraps the robust function of an application with the exception handler . The wrapping can occur when the application is executed by the client or at other times. In addition the security module hooks function calls in the application. The security module also modifies any native exception handlers that catch the security violation exception so that they no longer catch it. This modification occurs when the security violation exception is thrown because exception handlers are generally dynamically created and thus cannot be patched statically like other types of intercepted functions.

A hooked function call of the application is intercepted . The state of the application and or client is analyzed to determine whether an attempted exploit of a vulnerability is in progress. If no exploit is in progress the execution is returned to the hooked function. If on the other hand an exploit is in progress then the security module throws a security violation exception. The application s native error handling code unwinds the call stack until it reaches the exception handler wrapping the robust function . This exception handler catches the exception and returns an error code to the function that called the robust function thereby invoking the application s native error handling functionality. The application handles the security violation in the same manner as it handles normal errors.

The above description is included to illustrate the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

