---

title: Apparatus, system, and method for soap access to data source procedures
abstract: An apparatus, system, and method are disclosed for web service access to a remote data source procedure. The method includes receiving a web service request from a client and identifying the procedure call identifier within the web service request. The web service request includes a procedure call identifier and zero or more parameters. The method includes creating a procedure call to a data source procedure accessible through an Application Program Interface. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request. The parameters of the procedure call are ordered without using an explicit parameter mapping. The method includes sending a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08627345&OS=08627345&RS=08627345
owner: International Business Machines Corporation
number: 08627345
owner_city: Armonk
owner_country: US
publication_date: 20070613
---
This invention relates to web services and more particularly relates to Simple Object Access Protocol SOAP access to data source procedures.

A popular computer network architecture is a client server network. In this architecture a client sends requests over a computer network to a server which responds to the requests. The client server architecture may be implemented with many network types. The Internet is and example of a computer network that relies on client server relationships. Clients are typically personal computers laptop computers etc. with a web browser. The client sends out requests over the Internet to web servers around the world for web services. Web servers in turn may request other web services to formulate a response to the client s request.

A client request may be for a file or a directory but may also be a request to access a data source procedure. A data source procedure once called executes a computer program a subroutine or the like which typically returns information from a data source. Typically a data source procedure requires zero or more parameters to be passed to the data source procedure by way of a procedure call. The data source procedure then may return requested information or results or may also return some kind of message such as an error message.

One common type of data source is a database. A database is typically managed by a database server or a database management system. A procedure call to the database server may be used to retrieve data from the database managed by the database server. The database server may respond to database commands. Each database command typically performs a different function to manipulate and or extract data in the database to provide desired information or a desired result. Typically one or more parameters are passed to a database command using a procedure call. The database command executes and returns requested information or other message. For example a banking database server may respond to a procedure call containing an account number as a parameter to prepare an account statement.

A data source procedure or database command if a database is the data source typically differs from a request for a request for a file etc. in that the data source procedure requires more than merely retrieving a particular table entry file or directory. Many files directories tables etc. are currently available over the Internet by way of a web service in a client server relationship. Currently web services are being developed as part of a Service Oriented Architecture SOA . A SOA is advantageous because a client can access information from a server independent of the data path between the client and the server and does not require a connection to be maintained until the response is sent.

One protocol that follows the SOA standard is Simple Object Access Protocol SOAP . SOAP is a protocol for exchanging Extensible Markup Language XML messages over computer networks such as the Internet typically using Hypertext Transfer Protocol HTTP . SOAP provides a basic message messaging framework upon which more abstract layers can build. SOAP messages commonly use a Remote Procedure Call RPC pattern in which one network node the client sends a request message to another network node the server and the server sends a response message back to the client. SOAP messages are typically for data source procedures and are distinguished from other HTTP messages that may request a file or directory. SOAP is a popular protocol for XML messages. However other protocols are also available and provide similar benefits such as XML Remote Procedure Call XML SOAP and Representational State Transfer REST .

Many databases and other data sources are legacy data sources and may not have been designed as a web service. Significant resources may be invested in legacy databases and the owners typically would rather make a database available as a web service rather than converting a database to a type that allows web access. Examples of legacy database programs are DB2 from International Business Machines Oracle from Oracle Corporation MySQL from MySQL AB and Sybase from Sybase Inc. Many other legacy data sources not contained in database form contain useful information that may be made available to users if offered as a web service.

Legacy database systems may for example be available through a user through a user interface. Currently making a database available as a web service requires a change to a web server to include explicit mapping of database commands and parameters necessary to expose database procedures as a web service. Typically the Web Services Description Language WSDL is used to communicate details about how a client may call and use a web service. In addition the web server or application server references an explicit mapping that defines how the web service name and parameters map to database procedure names and parameters. This is a disadvantage because data source owners and or database developers must create a custom mapping for every database procedure. This mapping must be deployed to the web server configured to communicate with the data source. Requiring a database owner or developer to create an explicit mapping to make a data source and or its database procedures accessible as a web service is cumbersome and inefficient. Data source administrators may be exposed to client technologies with which they might not be familiar or comfortable.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method that would eliminate a requirement for explicit mapping for a data source procedure to make a data source available as a web service. Beneficially such an apparatus system and method would use an implicit mapping of a web service request with a data source procedure and accompanying ordered parameters to create a procedure call. The apparatus system and method would not require a data source owner to create a custom middle layer with explicit mapping of the data source procedure and parameters.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available methods to provide web access to data source procedures. Accordingly the present invention has been developed to provide a method apparatus and system for web service access to a remote data source procedure that overcome many or all of the above discussed shortcomings in the art.

A method of the present invention is also presented for web service access to a remote data source procedure. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented below with respect to the operation of the described apparatus and system. In one embodiment the method includes receiving a web service request from a client and identifying the procedure call identifier within the web service request. The web service request includes a procedure call identifier and zero or more parameters. The method includes creating a procedure call to a data source procedure accessible by way of an Application Program Interface API . The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call are ordered without using an explicit parameter mapping. The method includes sending a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.

In one embodiment the method includes confirming that the data source procedure associated with the procedure call identifier is supported by a coupled data source server. In another embodiment the method includes verifying that the type of data for the zero or more parameters of the web service request matches zero or more parameters of the data source procedure. In another embodiment the web service request is in the form of a Simple Object Access Protocol SOAP request. In yet another embodiment the SOAP request is coded using an extended markup language XML and a Hyper Text Transfer Protocol HTTP .

The procedure call in one embodiment includes a database call and the data source procedure includes a database stored procedure managed by a database server. In another embodiment the method includes identifying a database type from the web service request and selecting a servlet. The servlet is capable of creating a procedure call compatible with the database type. The method also includes creating a web service response based on a response from a database server of the database type. In another embodiment the database call includes a native call to a database server where the native call is compatible with a client interface supported by the database server. In a further embodiment the client interface is Java Database Connectivity JDBC Object Linking and Embedding Database OLE DB Open Database Connectivity ODBC or Call Level Interface CLI . In yet another embodiment the database server is DB2 Oracle MySQL or Sybase.

In one embodiment ordering the zero or more parameters of the procedure call without using an explicit parameter mapping includes ordering the zero or more parameters of the procedure call without referencing an explicit mapping defined for an application server receiving the web service request. In another embodiment the web service request is an XML Remote Procedure Call XML RPC request or a Representational State Transfer REST request.

The apparatus for web service access to a remote data source procedure is provided with a plurality of modules configured to functionally execute the necessary steps of receiving a web service request creating a procedure call and sending a response back to a client. These modules in the described embodiments include a receive module that receives a web service request from a client. The web service request includes a procedure call identifier and zero or more parameters. The apparatus includes an identification module that identifies the procedure call identifier within the web service request. The apparatus includes a call module that creates a procedure call to a data source procedure by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call is ordered without using an explicit parameter mapping. The apparatus includes a response module that sends a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.

A system of the present invention is also presented for web service access to a remote data source procedure. The system may be embodied by a data source and a web server with a processor and a memory in communication with the data source and a client. In particular the web server includes a receive module that receives a web service request from a client. The web service request includes a procedure call identifier and zero or more parameters. The web server includes an identification module that identifies the procedure call identifier within the web service request. The web server includes a call module that creates a procedure call to a data source procedure by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request and the parameters of the procedure call is ordered without using an explicit parameter mapping. The web server includes a response module that sends a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call.

In one embodiment the data source server is a database server and the data source is a database. In a further embodiment the database server is a DB2 server an Oracle server a MySQL server or a Sybase server and the database is encoded in a format compatible with the database server.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module. Where modules or portions of modules are implemented in software the software is stored on a computer readable medium.

Indeed a module of executable code maybe a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a signal bearing medium may take any form capable of generating a signal causing a signal to be generated or causing execution of a program of machine readable instructions on a digital processing apparatus. A signal bearing medium may be embodied by a transmission line a compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The schematic flow chart diagrams included herein are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

The client includes an HTTP request . The HTTP request is an Extensible Markup Language XML message . The XML message is a SOAP request with a procedure call identifier and zero or more parameters . The system includes a DB2 database server communicating with a DB2 database an Oracle database server communicating with an Oracle database and a MySQL database server communicating with a MySQL database . The database servers are in communication with the web server . Each element of the system is described below in more detail.

In general the present invention overcomes the limitations of the prior art by allowing a client to a send web service request to a data source without explicit mapping done by middleware such as a web server . Software comprising the present invention may be installed on a web server serving a data source such as a database without customizations specific to the database such as adding explicit mapping instructions for data source procedures and related parameters. The present invention provides an implicit mapping between a procedure identifier and parameters of a web service request and a procedure call to the data source.

In a preferred embodiment the present invention identifies the procedure call identifier and parameters with the structure of a SOAP request written as an XML message and sent as an HTTP request . The present invention then creates a procedure call based on the procedure call identifier as a namespace of the SOAP request . The present invention formats the procedure call with the parameters of the SOAP request based on the order of the parameters found within the SOAP request . The present invention then makes a blind procedure call to the data source. The present invention then formats results received in a reply from the data source into a SOAP return message that is then sent to the client .

Beneficially a data source owner or database owner need not modify any middleware to provide access to the data source as a web service. A client also does not require knowledge of explicit mapping rules defined for the web server receiving the web service request. The client must simply have knowledge of the data source procedure and related parameters and parameter ordering. The client can then simply create a SOAP request or similar request with the correct procedure call identifier in the namespace of the SOAP request and then place the proper parameters in order in the SOAP request without any regard to what is happening in the middleware web server .

The system includes a web server in communication with at least one client over a computer network such as the Internet. The computer network may includes switches routers other web servers cables wireless connections and other equipment known to those of skill in the art. The web server includes a computer with one or more processors and memory . The web server may include other servers and processes for facilitating communication with a client and for providing web services. One of skill in the art will recognize other features and functions of a web server .

The web server includes an HTTP handler that receives and processes HTTP requests responses messages etc. . In one embodiment the HTTP handler receives HTTP requests and parses SOAP requests from other requests and then sends the SOAP requests to the SOAP handler . The HTTP handler may include other servers processes handlers etc. to handle various web service requests. The HTTP handler may also parse out SOAP requests from an HTTP request and then send the SOAP request to the SOAP handler while processing or otherwise handling the non SOAP portions of the HTTP request . In other embodiments the SOAP handler may receive SOAP requests from other types of web service requests other than HTTP requests .

The SOAP handler handles web service requests and portions of web service requests that include embedded SOAP requests . In one embodiment the SOAP handler handles SOAP requests that are part of an HTTP request . A SOAP request is typically distinguished from other HTTP requests without a SOAP message in that SOAP requests typically involve a call to some type of data source procedure function subroutine etc. where other HTTP requests typically include a request for a specific file directory table entry etc. and often does not invoke a function subroutine etc.

In one embodiment the SOAP handler determines which database type is requested and then sends the SOAP request to a servlet that handles database requests of the database type. For example if the SOAP handler determines that a SOAP request is a request to a DB2 database the SOAP handler sends the SOAP request to a DB2 servlet .

A stored procedure translator in the DB2 servlet then creates a procedure call from the SOAP request . The stored procedure translator may then send a generated procedure call to the appropriate database server . In another embodiment another part of the web server sends the procedure call to the appropriate database server . In another embodiment the web server is in communication with a single data source so that the SOAP handler sends the SOAP request to a stored procedure translator that creates a procedure call for that data source.

The web server in one embodiment includes a SOAP return handler that handles results from a data source such as a database server and formats the results in a SOAP message that is returned to the client in response to a SOAP request corresponding to the results. The SOAP return handler may be part of a servlet of a particular data source or database may be in communication with a servlet or in the case of a single data source or database may reside in the web server . In another embodiment the SOAP return handler is included with the SOAP handler . The SOAP return handler formats the results using the SOAP protocol. The SOAP return handler in one embodiment returns the SOAP return message to the client . In another embodiment the HTTP handler or other function within the web server returns the SOAP return message to the client .

The system includes at least one client . The client may be a personal computer a laptop computer a workstation a server accessed by other computers a hand held device such as a personal digital assistant PDA a cellular phone or the like a mainframe computer a cable box or other computing device capable of sending a web service request. The client makes a web service request in the form of a SOAP request . In one embodiment the SOAP request is formatted using an Extensible Markup Language XML . The SOAP request in another embodiment is comprises or is a part of an HTTP request . In other embodiments the SOAP request may be formatted using another programming language or may be sent using a protocol other than HTTP.

The SOAP request includes a procedure call identifier and zero or more parameters . The procedure call identifier is a name of a data source procedure or some other designated way to signify to the web server that the client intends to call the data source procedure by way of the SOAP request . In one embodiment the data source procedure is a stored procedure. In another embodiment the data source procedure is a remote procedure call RPC . The procedure call identifier invokes the RPC or stored procedure for executing a function or retrieving data from a data source. The data source may be a database or other location where data is stored. One of skill in the art will recognize other procedure call identifiers used to invoke a data source procedure by way of a SOAP request .

The procedure call identifier is implicitly mapped to the data source procedure without any explicit mapping. Prior art methods required an explicit mapping between the name of the data source procedure and a procedure call identifier received from a client . With explicit mapping the name of the data source procedure and the procedure call identifier could be different. However a data source administrator was required to provide the explicit mapping to the middleware web server defining what procedure call identifiers would be allowed and would trigger creation of a data call with the name of the data source procedure derived from the explicit mapping. The present invention does not require the explicit mapping but instead provides an implicit mapping by blindly mapping the procedure call identifier to a data source procedure name slot within a created procedure call. The same procedure call identifier that is received from the client in a web service request is used to form the procedure call.

The SOAP request also includes zero or more parameters . Each parameter is formatted in the SOAP request to be used with the procedure call identifier to create a procedure call to the data source procedure. A parameter may be a number an array a range a string a data structure or any other form required by the data source procedure. The parameters are arranged in order in the SOAP request so that the data source procedure translator can create a procedure call to the data source based on the order of the parameters without any explicit mapping between the parameter and required parameters of the data source procedure. The significance of placement of the parameters in the SOAP message will be discussed in further detail in the discussion of .

The system includes one or more data sources. depicts a system with three databases and accompanying database servers . A system of the present invention may include any number of data sources in communication with a web server . Each database server communicates with the web server over a client interface. The client interface may be Java Database Connectivity JDBC Object Linking and Embedding Database OLE DB Open Database Connectivity ODBC Call Level Interface CLI or any other client interface that allows the web server to issue requests and receive responses from a database through a database server . The client interface may use an application programming interface API . One of skill in the art will recognize other ways that a web server may send requests to and receive responses from a database .

Each database server is running on one or more computers and includes a database management system to access data in an associated database . For example a DB2 database server includes a database management system with software connections etc. sufficient to access the DB2 database . Each database comprises data storage devices of some form. For example each database may include one or more hard disk drives tape storage drives optical drives and the like. The data storage devices may be individually accessible may be in a Redundant Array of Independent Inexpensive Disks Drives RAID may be part of a storage area network SAN etc. Each database may have a backup copy which may comprise a synchronous mirror and asynchronous mirror or the like. One of skill in the art will recognize other ways that a database may be implemented and managed by a database server .

The apparatus includes a receive module that receives a web service request from a client . The web service request comprises a procedure call identifier and zero or more parameters . Typically the receive module is part of the HTTP handler when the web service request is in the form of an HTTP request . The receive module in another embodiment may also be incorporated in some other way in the web server and may receive non HTTP web service requests with a procedure call identifier and zero or more parameters . The HTTP handler may receive other HTTP requests as well that do not include SOAP call having a procedure call identifier . Such requests may be serviced by the HTTP handler to retrieve file directory table entry etc.

The apparatus includes an identification module that identifies the procedure call identifier within the web service request. In one embodiment the identification module is part of the SOAP handler . In another embodiment the identification module operates partially or completely separate from the SOAP handler .

The identification module in one embodiment determines if a web service request is an HTTP request . In another embodiment the identification module determines if the web service request uses an HTTP POST method or verb . Typically HTTP requests may be in the form of the following methods HEAD GET POST PUT DELETE TRACE OPTIONS and CONNECT. A POST method submits data to be processed to an identified resource and the data is included in the body of the request. Typically a SOAP request with a procedure call identifier and parameters is submitted using a POST method in order to submit data. Determining if an HTTP request uses a POST method or uses other HTTP methods such as a GET or a HEAD can be used as a test to distinguish between a web service request not accessing a data source procedure and a web service request accessing a data source procedure.

In another embodiment the identification module determines if the web service request is a SOAP request . In another embodiment the identification module determines if a web service request is an XML message . Optionally the identification module determines if parameters of the web service request are of a correct type. When the identification module determines that a web service request does not comply with a requirement the identification module may generate an error return the web service request for further processing trigger another function etc. The filtering functions of the identification module provide a way to verify that the web service request complies with formatting requirements prior to further processing by the call module .

Where protocols other than SOAP are used such as XML Remote Procedure Call XML RPC and Representational State Transfer REST the identification module may be altered to verify that a web service request complies with the requirements of the particular protocol being used. In another option the identification module confirms that data source procedure associates with the procedure call identifier identified as part of the web service request is supported by a coupled data source server. For example the identification module may confirm that a database procedure of a coupled DB2 database associated with a DB2 procedure call identifier in a SOAP request is supported by the DB2 database server . One of skill in the art will recognize other ways that the identification module may be used to filter web service requests to ensure that a web service request complies with formatting requirements prior to further processing.

Where the web server communicates with multiple data sources the web server includes a database selection module that identifies a data source or database type from the web service request and selects a servlet capable of creating a procedure call compatible with the data source or database type . The servlet through a SOAP return handler also creates a web service response based on a response from a data source or database server of the data source or database type . A web server may then service multiple data sources by having a servlet for each data source. In another embodiment a servlet may communicate with two or more data sources. The database selection module may reside in the SOAP handler or another location in the web server . Typically the database selection module acts as a switch to redirect a web service request to a data source identified in the web service request.

The web server includes a call module that creates a procedure call to a data source procedure by way of an Application Program Interface API . The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the parameters in the web service request. The parameters of the procedure call are ordered without using an explicit parameter mapping. The call module relies on the structure of the web service request to construct a procedure call from the procedure call identifier and parameters .

For example where the web service request is a SOAP request the call module relies on the known structure of the SOAP request to create a procedure call based on the contents of the SOAP request and ordering of parameters in the SOAP request . The call module may be part of a data source procedure translator of a servlet or may reside in the web server and may cooperate with a servlet or data source procedure translator . In another embodiment the call module acts independently to create a procedure call.

By relying on the structure of the SOAP request the call module does not need to look to any explicit mapping of parameters. Instead the call module may use implicit mapping of the procedure call identifier and parameters to construct a procedure call and to send it to a coupled data source server . The data source owner does not need to create explicit mapping for the web server acting as a middle layer.

The client also does not need to have any special knowledge about the web server but instead only needs to have knowledge of the data source procedure and associated parameter type and order. The client can then create a SOAP request that complies with SOAP standards and requirements while placing the procedure call identifier and related parameters in the SOAP request . By following the simple formatting rules of SOAP and knowing the formatting requirements of the data source procedure being invoked the client does not need to worry about other information on the web server relating to the data source procedure.

The web server includes a response module that sends a web service response to the client in response to receiving a response from the data source procedure. The web service response includes information responsive to the procedure call generated by the call module . The response module may be part of or cooperate with the SOAP return handler of a servlet or may act independently. For example after the call module generates a procedure call to a data source such as a DB2 database the DB2 database server typically executes the procedure call and generates a result which is returned to the web server . The response module creates a response based on the results from the DB2 database server and sends the response to the client .

If the web service request upon which the procedure call was based is a SOAP request the response module uses the results from the DB2 database server to generate a SOAP message with the results and sends the SOAP message to the client as a response. Typically the response module would be part of a DB2 servlet and a SOAP return handler within the servlet if the web server is coupled to a DB2 database . In the case where the web server is coupled to only one source the response module may not be part of a servlet and may act independently or within a SOAP return handler . In another embodiment the response module generates a response to a client using another protocol other than SOAP such as XML RPC or REST. One of skill in the art will recognize other possible implementations of a response module that sends a web service response to a client in response to receiving results from an executed data source procedure.

The identification module identifies a procedure call identifier within the web service request. The call module creates a procedure call to a data source procedure accessible by way of an API. The data source procedure is identified by the procedure call identifier without an explicit procedure call identifier mapping. The procedure call identifier is mapped to the name of the data source procedure in the procedure call. The procedure call is created at least in part by ordering parameters of the procedure call based on an order of the zero or more parameters in the web service request. The parameters of the procedure call are ordered without using an explicit parameter mapping. The response module sends a web service response to the client after receiving a response from the data source procedure and the method ends . The web service response includes information responsive to the procedure call.

If the identification module determines that the web service request is an XML message the identification module determines if the XML message is a SOAP request . If the identification module determines that the XML message is not a SOAP request the web server or HTTP handler continues processing the web service request and the method ends follow A on to A on .

Optionally prior to determining if the XML message is a SOAP request the identification module may determine if the XML message is an as HTTP request using an HTTP POST method. If the XML message is not an HTTP request using an HTTP POST method the HTTP handler continues processing the request. In an alternate embodiment the web server or HTTP handler may process a web service request received by the receive module and may only invoke the identification module if the web service request cannot be processed by the HTTP handler or similar handler in the web server . Web service requests can be either filtered or parsed out prior to processing by the HTTP handler or may be first processed and then filtered using the identification module after the web service request is unsuccessfully processed by the HTTP handler or similar handler in the web server .

If the identification module determines that the XML message is a SOAP message the database selection module identifies the data source or database listed in the SOAP request and selects the applicable data source or database . The identification module determines if the SOAP request includes a procedure call identifier and if the procedure call identifier matches a data source procedure supported by the data source or database coupled to the web server follow B on to B on . If the identification module determines that the SOAP request does not includes a procedure call identifier or if the identification module determines that the procedure call identifier does not match a supported data source procedure the identification module generates an error and the method ends .

If the identification module identifies a procedure call identifier and if the procedure call identifier matches a supported data source procedure of a coupled data source or database the identification module determines if the parameters are of a correct type range etc. based on requirements of the data source procedure. If the identification module determines that the parameters are not correct the identification module generates an error and the method ends .

If the identification module determines that the parameters are correct the call module creates a procedure call to the data source procedure based on the procedure call identifier and the parameters of the SOAP request . The call module creates the procedure call by using the procedure call identifier as the name of the stored procedure and by ordering the parameters of the SOAP request in the same order that the parameters are listed in the SOAP request without an explicit mapping. Note that creating a procedure call also includes transmitting the call to the coupled data source.

The response module determines if a response to the procedure call has been received from the coupled data source. In one embodiment the response module continues to wait for a response from the coupled data source. In another embodiment not shown if the response module determines that no response has been received for example after a timeout period has expired the response module generates an error and the method ends.

Once the response module determines that a response has been received the response module sends a web service response to the client that is based on the response from the coupled data source and the method ends . The response module formats the response to the client using the same protocol as the web service request. In the depicted embodiment the response module formats a SOAP response using the results returned from the coupled data source.

The method depicted in may be modified and customized as necessary based on a chosen protocol of the web service request and the number and type of coupled data sources. The method may be implemented in the web server in a generic way so without explicit mapping based on data source procedures of one or more coupled data sources. This allows a client to use a standard protocol such as SOAP to format a web service request and to simply use the procedure call identifier as the name of the data source procedure and order parameters based on data source procedure requirements without having to follow additional requirements of a middle layer explicit mapping.

The client may generate a web service request for a data source procedure called getProduct with a procedure call identifier or namespace of getProduct. The web service request includes a parameter 100 101 1 which is a string representing a serial number. The client sends the web service request to the DB2 database server by way of the web server to invoke the getProduct procedure in the DB2 database server . The web service request is formatted an XML SOAP request and send using an HTTP POST method.

In this example web service request the procedure call identifier is defined as a namespace or signature as http ibm.com db2 soap getProduct. This signature also identifies the database as DB2. In this simple example only one parameter is included and is labeled param0. Where other parameters are submitted they must be ordered in the SOAP request based on an order requirement of the getProduct data source procedure.

The receive module in the HTTP handler receives the web service request . The identification module in the SOAP Handler verifies that the web service request is a SOAP request as well as verifies that the web service request is an XML message not shown . The database selection module determines that the web service request is directed to the DB2 database xmlns ns 1 http ibm.com db2 soap and sends the request to the DB2 servlet .

The identification module or a portion of the identification module residing in the DB2 servlet if the procedure call identifier getProduct is a data source procedure stored procedure supported by the DB2 database server and optionally if the 100 101 1 parameter is a string. The call module in data source procedure translator within the DB2 servlet then creates a procedure call to the DB2 database server . Because the DB2 servlet handles DB2 stored procedures the data source procedure translator within the DB2 servlet is able to format procedure calls specific to the DB2 database server . The DB2 servlet or data source procedure translator submits the procedure call to the DB2 database server by way of a client interface using an API. Typically the client interface is JDBC is used but ODBC OLE DB CLI or the like may be used.

The DB2 database server executes the getProduct procedure call and retrieves data from the DB2 database responsive to the 100 101 1 parameter and the getProduct procedure. In this example the results are the string Sugar Spice. The DB2 database server returns results to the web server and response module in the SOAP return handler of the DB2 servlet creates a SOAP response based on the response received from the DB2 database server that relates to the getProduct procedure call. The SOAP response is then returned to the client depicted as the received response .

The system is beneficial because another stored procedure may be added to the DB2 database without explicit mapping being added to the web server . In this example the DB2 database includes a stored procedure called New Stored Procedure and requires two parameters param0 and param1. As long at the client knows the name of the stored procedure and the order and type of the parameters the client can create a SOAP request with the proper procedure call identifier and parameters ordered correctly and can have confidence that the SOAP message will be translated properly into an effective procedure call to the DB2 database . The database owner does not need to create an explicit web services mapping on the web server for the DB2 database .

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

