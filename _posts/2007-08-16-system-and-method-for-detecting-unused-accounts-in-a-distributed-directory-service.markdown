---

title: System and method for detecting unused accounts in a distributed directory service
abstract: A distributed information processing system in an enterprise computer network comprising a collection of servers providing a directory service and a directory-enabled access control system is augmented with the ability to detect user accounts in the directory service for users who have not recently authenticated to an application that uses the directory-enabled access control system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917636&OS=07917636&RS=07917636
owner: Informed Control Inc.
number: 07917636
owner_city: Austin
owner_country: US
publication_date: 20070816
---
This application claims the benefit of PPA Ser. No. 60 838 077 filed Aug. 16 2006 by the present inventor which is incorporated by reference.

This invention relates generally to management of identity information held in directory servers in enterprise computer networks.

A typical identity management deployment for an organization will incorporate a directory service. In a typical directory service one or more server computers host instances of directory server software. These directory servers implement the server side of a directory access protocol such as the X.500 Directory Access Protocol DAP as defined in the document ITU T Rec. X.519 Information technology Open Systems Interconnection The Directory Protocol specifications or the Lightweight Directory Access Protocol LDAP as defined in the document Lightweight Directory Access Protocol v3 by M. Wahl et al of December 1997. The client side of the directory access protocol is implemented in other components of the identity management deployment such as an identity manager or access manager.

A directory access protocol follows a request response model of interaction in which the client establishes a connection to a directory server and over that connection sends one or more requests. The directory server processes those requests and sends responses over that connection. The types of requests in a directory access protocol include 

In order to provide an anticipated level of availability or performance from the directory service when deployed on server computer hardware and directory server software with limits in anticipated uptime and performance the directory service often will have a replicated topology. In a replicated topology there are multiple directory servers present in the deployment to provide the directory service and each directory server holds a replica a copy of each element of directory information. One advantage of a replicated topology in an identity management deployment is that even if one directory server is down or unreachable other directory servers in the deployment will be able to provide the directory service to other components of the identity management deployment. Another advantage is that directory service query operations in the directory access protocol can be processed in parallel in a replicated topology some clients can send queries to one directory server and other clients can send queries to other directory servers.

Some directory server implementations which support the X.500 Directory Access Protocol also support the X.500 Directory Information Shadowing Protocol DISP as defined in the document ITU T Rec. X.519 Information technology Open Systems Interconnection The Directory Protocol specifications which specifies the procedures for replication between directory servers that implement the X.500 directory access protocol.

In many large and multinational enterprises the deployment might incorporate multiple distinct implementations of a directory server and there may be directory server implementations that are not based on the X.500 protocols. Examples of directory server implementations that are not based on the X.500 protocols include the Microsoft Active Directory the Sun Java Enterprise System Directory Server OpenLDAP directory server and the Novell eDirectory Server. As there is currently no standard replication protocol between directory server implementations from different vendors that are not both implementing the X.500 protocols synchronization mechanisms are often used in addition to replication protocols in order to maintain the consistency of directory information between directory servers in the deployment. Synchronization products such as a metadirectory server are used in enterprise identity management deployments that incorporate directory server implementations from multiple vendors. These synchronization products interconnect these directory servers and transfer changes made in one directory server to another directory server so that all directory servers have copies of the data.

A primary component of the information model of a directory server is the directory information tree. The directory information tree comprises a set of one or more directory entries. Each entry has a distinguished name that is unique amongst the entries in the directory information tree. Each entry comprises a set of one or more attributes. Each attribute has an attribute type and there is at most one attribute in an entry of each attribute type. Each attribute has one or more values. Each entry has an attribute objectClass with one or more values that are names of object classes defining the contents of the entry.

A directory schema defines the semantics associated with each object class and attribute type. The schema specifications for an object class include the attribute types of attributes which must be present in an entry when the entry has that object class and the attribute types of attributes which may be present in an entry when the entry has that object class. The schema specifications for an attribute type include the maximum number of values of the type which can be present in an entry the syntax of the values of the attribute type and how values of the attribute are compared with each other. The directory schema is represented in the directory as values of the two operational attributes attributeTypes and objectClasses as described in the document Lightweight Directory Access Protocol LDAP Directory Information Models by K. Zeilenga of June 2006.

The choice of schema to use in a directory server is determined by the administrator of the directory server. Some directory server implementations have a single fixed schema others are extensible and permit the administrator to add attribute type and object class definitions. Several recommended schemas have been published including the documents ITU T X.520 ISO IEC 9594 6 The Directory Selected attribute types ITU T X.5211 ISO IEC 9594 7 The Directory Selected object classes Definition of the inetOrgPerson LDAP Object Class by M. Smith of 2000 Lightweight Directory Access Protocol LDAP Directory Information Models by K. Zeilenga of Jun. 2006 and Lightweight Directory Access Protocol LDAP Schema for User Applications by A. Sciberras of June 2006. In each of these schemas a user of directory enabled applications is represented by a single entry. The set of allowed attributes of the object class for such an entry include an attribute which comprises the authentication credentials of the user such as the user s password. For example the inetOrgPerson object class allows the attribute userPassword which contains the password of the user represented by an object of that class.

A metadirectory as described in U.S. Pat. No. 7 191 192 B2 to Yellepeddy et al is a software product which translates the contents of one data repository to be appropriate for use in another repository in which the data repositories may be directory servers or other forms of databases. One primary use of a metadirectory is the translation of directory entries from one schema to another for deployments in which two or more implementations of directory servers are present and the directory servers have fixed incompatible schemas.

A directory proxy server is a specialized server which implements a directory access protocol typically LDAP but does not maintain a copy of the directory information tree. Instead the directory proxy server will forward requests it receives to one or more other directory servers for further processing.

A directory server and a directory proxy server typically generate access logs in a text file or in a relational database and these access logs have one log record for each request received by the directory server or directory proxy server.

A directory enabled access control system comprises a set of middleware components which rely upon a directory server to maintain information about the users in an enterprise in particular each user s authentication credentials and access rights.

Typically an implementation of a directory enabled access control system in the prior art will when a user attempts to authenticate by providing their name and credential send a search request to a directory server to locate the entry for that user. If an entry is found for that user then the implementation either may read an attribute containing a credential from the returned directory entry and compare that credential with a credential presented by the user or the implementation may send a bind request to the directory server to perform the comparison in which the bind request comprises the distinguished name of the entry and the credential supplied by the user.

Some existing implementations of directory enabled access control systems update a user s directory entry when that user successfully logs in by sending a modify request to the directory for the entry corresponding to the user. That modify request will cause the directory server to replace an attribute in that user s entry which represents the user s last login time with the current date and time. The limitations of this prior art approach include 

It is an advantage of this invention that it can detect authentication attempts performed by the access control component which are realized as search requests.

It is an advantage of this invention that it does not incorrectly categorize a user as having an inactive account should a network partition prevent the records for authentications from that user at a directory server from being transferred to the unused account detection component.

This invention defines and implements an approach to determine the last login date and time of a user and thus determine whether that user s account is still active. In this approach a log parsing agent collects log information from each directory server and each directory proxy server. The log parsing agent then filters this log information and sends it to a central unused account detection component for aggregation. The unused account detection component uses the aggregated log information to trim a set of directory entries representing all the users in a deployment into a resulting set of entries which correspond to users with unused accounts.

The client application component is a software component that relies upon an access control component to assist in the process of authenticating the users of the client application. A user will typically begin the authentication process to a client application by providing their userid and an authentication credential such as their password. The client application component will provide the userid and credential to the access control component via an application programming interface API a system call or a network protocol. The access control component will respond to the client application component with an indication of whether the user has been successfully authenticated.

The access control component is a software component that provides an authentication and access control service to the client application component . The access control component will establish connections to one or more directory server or directory proxy server components. In order to authenticate a user who is accessing a client application the access control component will submit one or more DAP or LDAP requests over these connections in which the request locates a directory entry for the user and either validates the user s authentication credential against that directory entry or retrieves the stored authentication credential from the directory entry.

The directory proxy server component is a software component that forwards requests it receives from the access control component to one or more directory servers for further processing. When the directory proxy server forwards a request to a directory server or receives a response from a directory server the directory proxy server will write the parameters of the request or response in its access log. The directory proxy server is used in the situation of directory servers which do not generate an access log of search or bind requests. In this situation a directory proxy server can be placed between the access control and the directory server and the directory proxy server will be configured to generate the access log.

The directory server component is a software component that implements the server side of a directory access protocol such as DAP or LDAP. The directory server component maintains a directory information tree of one or more directory entries. Each user of a client application is represented by a directory entry in the directory information tree.

The log parsing agent component is a software component that collects and processes access log information. A log parsing agent is installed on each server computer where a directory server or directory proxy server is installed to collect access log information from that directory server or directory proxy server. The log parsing agent retrieves patterns from the LPA database which is configured with a set of patterns that indicate the forms of bind and search operations generated by the access control component when it authenticates a user. Each log parsing agent has access to a pattern for each directory enabled access control component present in the deployment that relies upon the directory server or directory proxy server whose log is monitored by that log parsing agent. The behavior of the log parsing agent component is illustrated by the flowchart of and .

The LPA database component is a software component that maintains the persistent state of the log parsing agent component. The LPA database can be implemented as a relational database which comprises five tables the authenticator table the bind pattern table the search pattern table the element set table and the log status table . The structure of these tables is illustrated by the diagrams of and .

There is one row in the authenticator table for each access control component in the deployment. Rows in this table are created by the administrator. The primary key of this table is the AUTHENTICATOR ID column. The columns of this table are 

Examples of values used in the STATUS column in rows in the authenticator table include disabled to indicate that the access control component has been temporarily disabled and deleted to indicate that the access control component has been permanently disabled. A NULL value in the STATUS column indicates that access control component is active.

There is one row in the bind pattern table for each access control component in the deployment which uses a bind request to authenticate a client. Rows in this table are created by the administrator. The primary key of this table is the PATTERN ID column. The columns of this table are 

There is one row in the search pattern table for each access control component in the deployment which uses a search request to authenticate a client. Rows in this table are created by the administrator. The primary key of this table is the PATTERN ID column. The columns of this table are 

There is one row in the element set table for each record to be transferred to the unused account detection component. Rows are added to and removed from this table by the log parsing agent component. The primary key of this table is the ELEMENT ID column. The columns of this table are 

There is one row in the log status table . This row is updated by the log parsing agent component. The columns of this table are 

The unused account detection component is a software component that receives element sets from one or more log parsing agent components via a network connection. The network connection comprises an application layer protocol exchange carried within a secure sockets layer session layer protocol exchange which provides encryption such as the secure sockets layer protocol Transport Layer Security TLS protocol described in the document The Transport Layer Security TLS Protocol Version 1.1 by T. Dierks et al of April 2006 carried within the Transmission Control Protocol TCP on an Internet Protocol IP based computer network. The unused account detection component updates the UAD database identity and agent tables. The unused account detection component is configured with a time interval for user inactivity for example 30 days and a time interval for log parsing agent contact such as one day. The behavior of this component is illustrated by the flowchart of and .

The UAD database component is a software component that maintains the persistent state of the unused account detection component. The UAD database can be implemented as a relational database which comprises two tables the identity table and the agent table . The structure of these tables is illustrated by the diagram of .

There is one row in the identity table for each user that accesses the client application component. The primary key of this table is the USER ID column. The columns of this table are 

Initially rows are added to the identity table for each user. In each row the initial value of the LAST LOGIN ATTEMPT DATE column is set to the current date and time and the value of the STATUS column is set to NULL.

There is one row in the agent table for each log parsing agent. The primary key of this table is the AGENT ID column. The columns of this table are 

The processing components of this invention can be implemented as software running on computer systems on an enterprise computer network.

The log filtering agent component comprises a single thread of execution. At step the thread will create an empty element set by initializing the element set table . At step the thread will read the log checkpoint from the log status table and compare this checkpoint with the access log of the directory server or directory proxy server. At step the thread will test whether there are unread access log records which the log parsing agent has not yet processed. If there are no unprocessed log records then at step the thread will wait for log updates from the directory server or directory proxy server or until a timeout period is reached.

At step the thread will traverse each log record in the log of the directory server or directory proxy server that has not yet been handled by the log parsing agent. At step the thread will parse the record from the log. At step the thread will test whether the log record is a bind operation or a search operation. If it is a bind operation then the thread will search the bind pattern table for a row in which the value of the SOURCE ADDRESS column if not NULL matches the network address of the directory access protocol client the value of the BASE DN column is a suffix of the distinguished name of the request the value of the MATCH TYPE column matches an attribute type in the least significant relative distinguished name of the bind request and the value of the STATUS column is NULL. If it is a search operation then the thread will search the search pattern table for a row in which the value of the SOURCE ADDRESS column if not NULL matches the network address of the directory access protocol client the value of the BIND DN if not NULL matches the distinguished name by which the client authenticated to the directory server the value of the SEARCH BASE column if not NULL matches the baseObject field of the search request the value of the SEARCH SCOPE column matches the scope field of the search request the value of the FILTER PATTERN column matches the filter of the search request the value of the MATCH TYPE column is an attribute type of an equality filter in the filter in the search request the value of the REQUESTED TYPES column if not NULL matches the value of the attributes field of the search request and the value of the STATUS column is NULL. At step the thread will test whether one or more rows were found in either the bind pattern table or the search pattern table. If no search was performed or no rows were found then at step the thread will test whether the operation is a delete operation or an operation such as a modify which changes the state of the user. If so then the thread will continue at step . If no search was performed no rows were found and the operation is not a delete operation or does not change the state of the user then the thread will continue at step . If the search was performed and one or more rows were found then at step the thread will process record by pattern to extract the userid of the user being authenticated. At step the thread will add an element to the element set table for the record. After the records have been handled the thread will continue at step .

At step the thread will test whether it has a connection to the unused account detection component. If it does not have a connection then at step the thread will establish a connection to the unused account detection component. If the connection establishment failed then at step the thread will report an error and continue to step . At step the thread will send the element set to the unused account detection component over the connection. At step the thread will test whether the unused account detection component successfully received the element set. If the unused account detection component did not successfully receive the element set then at step the thread will report an error at step the thread will close the connection and the thread will continue at step . Otherwise at step the thread will close the connection clear the element set and save the log state to the log status table . The thread will then continue at step .

The unused account detection component has a single thread of execution. At step the thread will set the initial value of the LAST LOGIN ATTEMPT DATE column in each row of the identity table to the current date and time and set the initial value of the LAST CONTACT DATE column in each row of the agent table to the current date and time. At step the thread will wait either until a connection is attempted from a log parsing agent or until a timer event occurs. The timer is set to the log parsing agent contact interval. If a timer event occurred then the thread will continue at step . Otherwise at step the thread will receive an element set from a log parsing agent over the connection and then close the connection. If the element set transfer failed then the thread will loop back to step . Otherwise at step the thread will set the value in the LAST CONTACT DATE column for the row in the agent table for the log parsing agent to the current date and time. At step the thread will traverse the elements in the element set. At step the thread will parse the element extract the userid of the user from the element and search the identity table for a row in which that userid matches a value of the USER ID column. At step the thread will test whether a row was found. If a row is found then at step the thread will test whether the date and time in the value of the LAST LOGIN ATTEMPT DATE in the row is more recent than the date in the element. If an identity is found and the date and time in the row is not more recent than the date and time in the element then at step the thread will set the value of the LAST LOGIN ATTEMPT DATE column of the row in the identity table to the date and time of the element. At step the thread will loop back to step until all elements of the element set have been processed.

At step the thread will search the agent table for rows in which the value of the STATUS column is NULL. If one or more rows have a value in the LAST CONTACT DATE that is older than the configured log parsing agent interval then the thread will loop back to step . Otherwise at step the thread will traverse the log parsing agents represented by the rows of the agent table . At step the thread will compute the time difference between the current date and time and the last contact date and time of the agent from the value of the LAST CONTACT DATE column. After all the rows for the log parsing agents have been traversed at step the thread will select the largest of the time differences calculated add the user inactivity time interval to this largest time difference to form a sum and set an inactivity date and time to be this sum subtracted from the current date and time. At step the thread will search the identity table for rows in which the value of the STATUS column is NULL. At step the thread will traverse each user record in the identity table. At step the thread will compare the user s last login date and time from the value of the LAST LOGIN ATTEMPT DATE column with the inactivity date and time. At step the thread will test whether the value of the LAST LOGIN ATTEMPT DATE column is earlier than the inactivity date and time. If the value is earlier then at step the thread will update the row in the identity table by setting the value of the STATUS column to inactive . At step the thread will loop back until each record has been processed. The thread will then continue at step .

Many different embodiments of this invention may be constructed without departing from the scope of this invention. While this invention is described with reference to various implementations and exploitations and in particular with respect to systems for monitoring the last login times of users with accounts in a distributed directory service it will be understood that these embodiments are illustrative and that the scope of the invention is not limited to them.

