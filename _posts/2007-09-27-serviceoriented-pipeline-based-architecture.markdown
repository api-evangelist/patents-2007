---

title: Service-oriented pipeline based architecture
abstract: Service-oriented systems employing pipeline architecture to accommodate third party extensions for extending existing functionality or providing additional functionality are provided. User or third party provided plug-ins are registered through metadata and executed in a pipeline along with platform operations. The pipeline is extendable on the fly with newly uploaded plug-ins. Dependency analyses for ordering synchronous or asynchronous pipeline operations enable multiple parties to extend the system and operate predictably. Loop detection mechanisms prevent misuse of system resources through accidental or malicious creation of infinite loops with exceptions for non-degenerate infinite loops.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08146099&OS=08146099&RS=08146099
owner: Microsoft Corporation
number: 08146099
owner_city: Redmond
owner_country: US
publication_date: 20070927
---
Hosted services are becoming increasingly common where various applications service a large number of customers on shared hardware referred to as a multi tenant system . Hosted services may provide a common type of service to many clients or multiple services to a single client. As such hosted services can be fairly complex systems. A representative example of complex hosted service systems is a web based Customer Relationship Management CRM service.

CRM solutions provide tools and capabilities needed to create and maintain a clear picture of customers from first contact through purchase and post sales typically in a hosted computer application environment. For complex tenants a CRM system may provide features and capabilities to help improve the way sales and marketing organizations target new customers manage marketing campaigns and drive sales activities. CRM systems may include many components hardware and software utilized individually or in a shared manner by users internal or external to the tenant.

Complex systems such as hosted CRM services need to perform a series of operations in response to client requests. These operations can be synchronous or asynchronous can have order dependencies and can be implemented by disparate parties. One challenge in implementing such a system is managing complexity of the system especially as third party providers add operations. This challenge may be exacerbated in Software as a Service SaaS applications where third party extensions are not fully trusted by the service provider.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to providing a hosted service employing pipeline architecture. Third party extensions for extending existing functionality or providing additional functionality are registered through metadata and executed in a pipeline serially with platform operations where an order of operations and a stage of each operation are exchanged through metadata such that system functionality and custom functionality are treated symmetrically. Loop detection mechanisms may also be employed to prevent misuse of system resources through accidental or malicious creation of infinite loops.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

As briefly described above pipeline architecture may be implemented in a service oriented system for managing third party plug in functionality. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.

Referring to diagram of example multi tenant service system architecture is illustrated. In a typical multi tenant system users associated with different tenants may request operations from a service which may perform synchronous and asynchronous operations involving tenant specific information.

As discussed above hosted services facilitate interactions between various applications and a large number of customers on shared hardware with numerous aspects of default and customized functionality. For example a Customer Relationship Management CRM service may enable user associated with multiple tenants to record follow up analyze and process contacts sales leads and so on while providing security and custom functionality to each tenant. Some of the custom or default functionality for these so called Software as a Service SaaS applications may be provided in the form of third party extensions or plug ins that are registered and executed alongside core platform operations.

In a typical hosted service environment scalable and redundant groups of web services servers work with tenant data stores to store and process data associated with individual tenants of the service. Supplemental services may be also provided through another group of servers and or data stores. For example synchronous and asynchronous processing may be performed by different groups of servers in a distributed manner optimizing system performance.

By employing independent distribution of synchronous and asynchronous processes and the interaction between the servers and the databases any part of the hosted service group may be made scalable. Thus multiple instances of the servers and or databases may be provided to address increased workload additional tenants data capacity and so on.

In an operation the hosted service receives input data e.g. new contact information in a CRM service and requests for processing from user . User may be associated with a separate system of user applications tools and or plug ins for customizing the hosted service. Data associated with the separate system may be stored in user data store s . User may provide extensions plug ins to the hosted service for additional or customized functionality where the plug ins are registered and executed along with the core platform operations. According to some embodiments such plug ins may not only provide additional functionality but also expand existing default functionality of the service.

User may provide the plug ins itself or request a plug in from a third party not shown to be registered by the hosted service. In such a scenario the hosted service may interact with the third party provider directly for registering the plug in in the platform. Furthermore third party providers may contact the hosted service upon request of a user tenant to register one or more of their extensions and provide credentials ensuring the hosted service that the offered plug in is truly requested by the user.

This complex interaction of course may result in challenges for the service to control its operational integrity and security of user data. Not all third party providers may be trusted sources there may be compatibility issues associated with the service platform and the plug in s and an integration of the plug in into the operational structure of the service may not be simple.

According to some embodiments a flexible and extensible platform with plug in functionality based on pipeline architecture may be executed serially in response to a client request. A request object may be passed as a parameter to each plug in in the pipeline and each plug in can create or manipulate the response object. Arbitrary state may also be passed along the pipeline to pass data among plug ins.

The sequence of actions to execute in response to a client request is represented in a system according to one embodiment by a pipeline configuration. The order of actions in the pipeline can be determined through a dependency graph analysis. New actions can be configured without recompilation of the system through registration of a plug in in the pipeline configuration. This way new functionality may be added or existing functionality modified forming a dynamic and extensible execution model. More importantly pipeline configuration consists of dependency information defining a sequence of actions to be executed as well as the actual plug in code module.

Actions in the service oriented pipeline architecture may also be asynchronous in which case the state of the pipeline may be saved and restored to be processed. Thus asynchronous actions cannot affect the response. According to some embodiments the plug in configuration including plug in code may be stored centrally allowing for cluster based systems that have a coherent view of the current pipeline configuration.

According to one embodiment a service oriented architecture may be implemented as the front end for invocation of a pipeline architecture system. The pipeline configuration including plug in code can be then configured through the Application Programming Interface API of the service oriented system e.g. through web services . Plug in execution may use a managed execution environment to enforce limited trust for plug ins depending on their author e.g. determined by code signing .

In order to build a plug in for a service oriented system according to embodiments implementers may design an interface through which the plug in code is to be invoked. Upon invoking a plug in the system may pass a context object with the current state of the pipeline. From this context object the plug in can obtain an interface through which additional system functionality can be executed.

As shown in the figure web services interacts with applications tools and workflow business process to process user requests. In addition web services receives user plug ins e.g. to perform user defined actions. User defined actions through plug ins may include customization by extension of existing functionalities or new functionality that is parallel to existing functionality. The plug ins are registered in the API through metadata which may include and order and stage of the plug ins e.g. has an operation been cancelled completed etc before another plug in is to be activated . Plug ins can then be executed by the execution pipeline along with platform operations some before e.g. some after e.g. depending on their order of registration as defined by the metadata.

In an example scenario one plug in may be configured to update contact information as new information is added or existing information modified deleted while another plug in executed in series with the first plug in is employed to audit the user s contact records based on the updates performed by the first plug in. In a system according to embodiments the plug ins are given the ability to define their own transaction boundary enabling a flexible and extensible system. The plug ins may be executed in series or in parallel. Embodiments are not limited to one particular method of execution.

As mentioned previously a system according to embodiments may include many instances of the individual servers and processing hosts e.g. asynchronous processing hosts . By implementing a reliable queue of the processes where long running requests are queued by the individual servers for later processing each of these server clusters may be scaled independently.

The ability to invoke system behavior from such plug ins even in a managed execution environments opens the possibility of infinite loops. This can result in system performance degradation especially for other tenants in a multi tenant system. Such loops may include degenerate loops that accidentally or maliciously generate infinite amount of data or non degenerate loops that are infinite but not degenerate e.g. birthday reminders that are to be processed once a year for an indeterminate period . In order to terminate or control such loops a default budget and a correlation id may be set when client requests are received. Upon invoking system methods within a plug in the correlation identifier and a portion of the budget may be passed along. If a child invocation has insufficient budget it results in an error terminating the loop.

A system according to embodiments assigns a cost for each operation against the set budget which is distributed among child operations. Thus an action that has been independently initiated by a caller and does not have previous context associated with it and an action that is a result of another action e.g. child action with inherited context can be tracked by using accounts for operations associated with a caller. For example a user may call to create a new account via web services and the creation of the account may cause a plug in to invoke a call that creates a task. A call to create a task has context inherited from the original creation of the account. If a new account is being created the budget may be set at that time and each time an operation is performed for that account the budget may be decremented. According to another embodiment a depth parameter may be utilized to terminate infinite loops. A count of number of operations children may be set initially and incremented as additional operations are performed children created . When the initially set depth limit is reached the loop is terminated.

Time based resetting of the budget may be employed according to other embodiments to allow infinite loops that are non degenerate such as asynchronous events timed to sleep for a year before waking up for a birthday reminder. The system may reset the budget or the depth if there is a predefined delay in the operational sequence. Yet another embodiment employs exception for finite tree structured operations children in infinite loop detection and termination. For example regional account creations may be non uniform each state has varying number of sales regions resulting in a finite tree structure. A budget based loop detection algorithm may attempt to terminate operations if the budget or depth is distributed in a fixed manner to all children. The system may be configured to take into account such finite tree structures as and exempt them when loop detection is performed.

In the example system of CRM web services processes such user requests by executing platform core operations default functionality along with plug ins that provide extended or alternative functionality allowing the service to be customized for the user. The plug ins are executed in the CRM execution pipeline serially and their sequence may be defined by the user . According to one implementation the plug ins may be grouped as pre event and post event operations for pre processing or post processing data handled by the core functionality but this grouping is not a limitation. In a system according to embodiments the plug ins and the core operations may be grouped in any manner or not grouped at all.

CRM web services may interact with specific CRM application utilize CRM tools and store business processes as CRM workflow . According to an example implementation utilizes CRM web services may be utilized as a transport for user requests. A relational database such as a Structured Query Language SQL database may be used as a repository of the pipeline configuration and another database may be used as a repository of plug in code modules.

The service oriented systems and operations described in are exemplary for illustration purposes. A system for employing pipeline architecture in a multi tenant service may be implemented using additional or fewer components and other schemes using the principles described herein.

Such a system may comprise any topology of servers clients Internet service providers and communication media. Also the system may have a static or dynamic topology. The term client may refer to a client application or a client device. While a networked system implementing pipeline architecture in a multi tenant service may involve many more components relevant ones are discussed in conjunction with this figure. Furthermore a system according to embodiments may also be a single tenant system for serving users associated with a single tenant.

Requests for processing may come from users through individual client devices . The users themselves or a third party provider through server may provide plug ins for extended or additional functionality to the pipeline architecture service managed by one or more servers e.g. server . The service may also be implemented in one or more servers. Tenant databases may be embodied in data stores . Dedicated database servers e.g. database server may be used to coordinate data retrieval and storage in one or more of such data stores.

Network s may include a secure network such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s provide communication between the nodes described herein. By way of example and not limitation network s may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources data distribution systems may be employed to implement pipeline architecture in a service oriented system. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Web services may be a separate application or an integral module of a hosted service application that provides data and processing services to client applications associated with computing device . Plug ins may provide additional functionality customizing the operations of web services for specific users and or operations as described previously. This basic configuration is illustrated in by those components within dashed line .

The computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here.

The computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a wireless network in a distributed computing environment for example an intranet or the Internet. Other computing devices may include server s that execute applications associated with another service or third party providers that provide plug ins. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

The claimed subject matter also includes methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where a user constructed schema and or operation is received by the pipeline architecture service. The schema and or operation is associated with one or more plug ins that may be provided by the user or by a third party authorized by the user. Processing advances from operation to operation .

At operation the schema is configured automatically. For example in a CRM system utilizing SQL databases SQL data queries may be generated based on the schema associated metadata and the operations themselves. The system does not perform any operations yet since no actions have been requested by the user associated with user data. Processing moves to operation from operation .

At operation user plug ins are received. The plug ins perform user requested actions providing extended or alternative functionality in a symmetric fashion to the service s core functionality. Processing proceeds to operation from operation .

At operation the user actions are registered in the system API through metadata which also includes an order and stage or each plug in when they are executed in the pipeline. Processing moves from operation to operation where upon request from the user the service executes the registered plug ins in the specified order for processing the user data. The system may perform additional operations such as a dependency analysis to order the pipeline operations as plug ins are uploaded enabling multiple parties to extend the system and work predictably. Processing moves to a calling process from operation for further operations.

As mentioned previously by allowing users to register and have executed their own extensions in any order and on the fly the system may be vulnerable to performance degradation due to accidentally or maliciously generated infinite loops. Therefore a loop detection mechanism may be employed to detect and terminate infinite loops while allowing certain quasi infinite infinite but non degenerate loops to be exempted from termination. Such mechanisms are discussed in more detail below.

Process begins with operation where a call is received. The call may be for a first action or for an action on an existing account. This is determined by the system by checking a context passed along with the call. Processing proceeds to decision operation from operation .

At decision operation a determination is made whether the passed context includes an existing budget depth or not. If no existing budget depth is found for the requested action one is created in at operation . If an existing budget depth is found associated with the call the budget or depth is decremented at operation based on the number or type of operations associated with the call. Every operation has a cost against the budget which is distributed among the children. A depth that is based on the count of children or operations may also be used instead of a budget as discussed before.

Skipping the optional operations and for now at decision operation a determination is made whether the assigned budget is exhausted. If the budget is exhausted operations are terminated. If there is still available budget the operations associated with the call are performed at subsequent operation .

While preventing degenerate loops a system according to embodiments may also facilitate exceptions for seemingly infinite loops which should not be terminated as part of standard operating procedure. For example a birthday reminder operation for a contact is one that is set for an indeterminate time. Therefore the system can perceive it as an infinite loop and attempt to terminate it. Optional operation following operation is intended to make that exemption. The budget depth is reset if the operations include a predefined delay such as the one year delay between birthday reminders .

Another example exception is operations involving finite tree structure. For example sales regions for a CRM service may be non uniformly distributed. While one state may be assigned one sales region another more populous state may be assigned multiple sales regions. If a fixed depth or budget assignment is employed among children the system may again perceive this action as being infinite and try to terminate it. At optional operation the budget or depth may be reset if the call involved a finite tree structure thereby preventing termination of the operations prematurely.

The operations included in processes and are for illustration purposes. Providing a hosted service employing pipeline architecture may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

