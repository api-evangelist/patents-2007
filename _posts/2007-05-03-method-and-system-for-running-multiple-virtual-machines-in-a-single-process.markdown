---

title: Method and system for running multiple virtual machines in a single process
abstract: A method and system for running a Java ME application on a computer system are described. The Java ME application is a software program designed for execution on a resource-constrained platform. A first virtual machine is launched in a process, the first virtual machine being is caused to run an application emulator. A second virtual machine is launched in the process, the second virtual machine being caused to run the Java ME application. The application emulator interfaces with application programming interfaces of the second virtual machine to interface with inputs and outputs of the Java ME application and redirect the inputs and outputs to local devices controlled by the application emulator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730492&OS=07730492&RS=07730492
owner: Oracle America, Inc.
number: 07730492
owner_city: Redwood Shores
owner_country: US
publication_date: 20070503
---
This Application is related to U.S. Pat. No. 7 080 387 entitled System and Method for Mediating Communication Between Software Applications which issued on Jul. 18 2006 and is incorporated herein by reference.

A virtual machine is a software layer between an application and a platform that isolates the application from the platform on which it is running. A platform comprises computer hardware and the operating system that drives low level operations of the hardware such as memory and thread management. Operating systems are written and compiled to function only with a particular central processing unit CPU . There are different types of virtual machines. One type of virtual machine allows a multi platform software application to execute without being written and compiled for the specific platform on which it is running. Another type of virtual machines permits a program designed to operate on one platform to operate on a different platform by modeling the hardware operations in the software domain. In either case software instructions of the application are converted into native instructions rather then being directly executed natively by the CPU. The conversion of software instructions into native instructions may be performed using an interpreter a just in time JIT compiler or a combination of an interpreter and JIT compiler.

In the realm of resource constrained platforms which includes battery operated devices such as wireless phones pagers personal digital assistants camcorders game devices MP3 players small retail payment terminals and smart cards etc. virtual machines are commonly used to provide cross platform operability to software applications. One example of such a virtual machine is the Java CVM which is used to launch and execute Java applications written to the connected device configuration CDC . A resource constrained platform having a CVM installed can execute cross platform Java code to impart desired functionality to the system. For example a mobile phone having an implementation of CVM can run Java software to implement a game a calendar an alarm or other desired function.

Computer systems implemented in mobile devices or other resource constrained platforms are generally not well suited for software development. For example it can be difficult if not impossible to connect a keyboard and full size monitor to a resource constrained platform such as a cell phone to write a software application much less compile the application into byte code suitable for execution on the virtual machine. Because it is not practical to develop and debug software intended for execution on a resource constrained platform on that same system it would be desirable to configure a version of the CVM to operate on a desktop computer system. However in this case the input and output of the user interface and other specialized hardware such as networking connectivity must be mapped from the resource constrained platform to the desktop computer system. Since each resource constrained platform type e.g. a particular model of a mobile phone is provided with a corresponding CVM that is specifically designed with hardware specific application programming interfaces to operate a specific configuration it is not practical to reconfigure each CVM with modified APIs that provide user input and output mapped from the resources available in the resource constrained platform to the desktop computer system.

U.S. Pat. No. 7 080 387 issued on Jul. 18 2006 the 387 patent presents a mechanism for placing a Java applications in communication with a native application in a different process. Using this mechanism a function in the native application can be called from the Java application operating in a virtual machine. Thus the mechanism described the 387 patent can be used to allow a CVM operating a Java ME applicationJava ME application intended for execution on a resource constrained platform to function on a desktop computer system by allowing a separate application emulator program to access input and output of the Java ME applicationJava ME application. Once the application emulator has access to the inputs and outputs of the Java ME applicationJava ME application it can map those inputs and outputs as desired to the actual interface and devices connected to the desktop computer system.

Unfortunately the local TCP IP connection implemented by the mechanism described in the 387 patent represents a bottle neck that restricts data flow between the two virtual machines thereby reducing performance of the system as a whole. To avoid this performance hit a new approach is needed to allow connectivity between the application emulator and the CVM.

Broadly speaking the present invention fills these needs by providing a method and system for running multiple virtual machines in a single process. It should be appreciated that the present invention can be implemented in numerous ways including as a process an apparatus a system a device or a method. Several inventive embodiments of the present invention are described below.

In one embodiment a method for running a Java ME applicationJava ME application on a computer system is provided. The Java ME applicationJava ME application is a software program designed for execution on a resource constrained platform. In the method a first virtual machine is launched in a process the first virtual machine being caused to run an application emulator. A second virtual machine is launched in the same process as the first virtual machine the second virtual machine being caused to run the Java ME applicationJava ME application. The application emulator interfaces with application programming interfaces of the second virtual machine to access inputs and outputs of the Java ME applicationJava ME application. The application emulator further redirects the inputs and outputs to local devices controlled by the application emulator.

In another embodiment a computer readable medium embodying software instructions for running a Java ME applicationJava ME application on a computer system is provided. The Java ME applicationJava ME application is a software program designed for execution on a resource constrained platform. The computer readable medium includes software instructions for launching a first virtual machine in a process and for causing the first virtual machine to run an application emulator in the first virtual machine. The computer readable medium further includes software instructions for launching a second virtual machine in the same process and for causing the second virtual machine to run the Java ME applicationJava ME application in the second virtual machine. The application emulator interfaces with application programming interfaces APIs of the second virtual machine to access inputs and outputs of the Java ME applicationJava ME application and redirects the inputs and outputs to local devices controlled by the application emulator.

In yet another embodiment a computer system is described. The computer system includes a user interface a central processing unit CPU for executing software instructions and a memory system. The user interface includes input devices receptive to user interaction and output devices including a graphical display. The memory system includes a computer readable medium for storing and reading software and data. The software includes an operating system for managing the processes executing on the CPU and the memory system an initialization code that is executed by the operating system and CPU a Java virtual machine JVM that is executed in a process by the initialization code so that the JVM occupies a virtual memory space and a connected device configuration virtual machine CVM that is executed in the process by the initialization code so that the CVM also occupies the virtual memory space. The initialization code causes the CVM to launch a test program the test program being a computer program written in the Java language for execution on a resource constrained platform. The initialization code additionally causes the JVM to launch an application emulator the application emulator being a computer program written in the Java language. The application emulator displays graphical information generated by the test program on the graphical display and passes messages corresponding to user interactions with the input devices to the test program.

The advantages of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of the invention.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known process operations and implementation details have not been described in detail in order to avoid unnecessarily obscuring the invention.

Memory system may include a plurality of memories for permanent and temporary storage of software applications and data. For example memory system may include a multi tiered random access memory system using virtual address spaces for each process that stores executing software and temporary data in a variety of locations including memory caches active memory and hard drive storage. In addition memory system may include hard non volatile storage e.g. using a hard drive storage device. Memory system is therefore includes a computer readable storage medium.

Memory system can contain a variety of applications and operating system specific software. In one embodiment memory system includes one or more Java ME applicationJava ME applications an application emulator initialization code a Java virtual machine JVM a connected device configuration CDC virtual machine CVM and an operation system . In one embodiment the Java ME applicationJava ME applications are written in conformance with the Java ME specification.

Initialization code is a small program that launches JVM and CVM in a common process as indicated by dotted line . Since JVM and CVM execute in a single process they share a common memory space. That is to say the CPU and operating system assign a common virtual address space that is occupied and accessed by both JVM and CVM . Initialization code causes e.g. by way of a command line argument JVM to launch application emulator which is a Java application that runs in JVM . Likewise initialization code causes CVM to launch one or more Java ME applicationJava ME applications which also may be performed by way of a command line argument.

Currently available versions of JVM and CVM are not designed to operate in a common memory space. Specifically the JVM and CVM have conflicting names for some JNI types and methods and which are not compatible. Therefore a JNI object created in one virtual machine could not be accessed from the other virtual machine due to the conflicting types. For example JVM has a type called a JNIEnv. A CVM object of type JNIEnv could be created however if it were accessed from the Java application the Java application would receive data from the object in an unrecognized format and the system could crash.

With the above embodiments in mind it should be understood that the invention can employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. Further the manipulations performed are often referred to in terms such as producing identifying determining or comparing.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose or the apparatus can be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines can be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. In addition the invention may be encoded in an electromagnetic carrier wave in which the computer code is embodied.

Embodiments of the present invention can be processed on a single computer or using multiple computers or computer components which are interconnected. A computer as used herein shall include a standalone computer system having its own processor s its own memory and its own storage or a distributed computing system which provides computer resources to a networked terminal. In some distributed computing systems users of a computer system may actually be accessing component parts that are shared among a number of users. The users can therefore access a virtual computer over a network which will appear to the user as a single computer customized and dedicated for a single user.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

