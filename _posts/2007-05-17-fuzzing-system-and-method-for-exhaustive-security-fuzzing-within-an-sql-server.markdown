---

title: Fuzzing system and method for exhaustive security fuzzing within an SQL server
abstract: Systems and methods that incorporate fuzzing capabilities within an SQL server to facilitate penetration testing. A fuzzing component associated with the SQL server provides an entry point for accessing the fuzzing system to update explicit user specified parameters associated with SQL, wherein the server's in depth knowledge regarding semantics of the language code (e.g., manner of parsing) can be employed to determine vulnerabilities thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953674&OS=07953674&RS=07953674
owner: Microsoft Corporation
number: 07953674
owner_city: Redmond
owner_country: US
publication_date: 20070517
---
Advent of a global communications network such as the Internet has facilitated exchange of enormous amounts of information. Additionally costs associated with storage and maintenance of such information has declined resulting in massive data storage structures. Hence substantial amounts of data can be stored as a data warehouse which is a database that typically represents business history of an organization. For example such stored data is employed for analysis in support of business decisions at many levels from strategic planning to performance evaluation of a discrete organizational unit. Such can further involve taking the data stored in a relational database and processing the data to make it a more effective tool for query and analysis.

Accordingly it is important to store such data in a manageable manner that facilitates user friendly and quick data searches and retrieval. In general a common approach is to store electronic data in a database. A database functions as an organized collection of information wherein data is structured such that a computer program can quickly search and select desired pieces of data for example. Commonly data within a database is organized via one or more tables and the tables are arranged as an array of rows and columns.

Moreover such tables can comprise a set of records wherein a record includes a set of fields. Records are commonly indexed as rows within a table and the record fields are typically indexed as columns such that a row column pair of indices can reference particular datum within a table. For example a row can store a complete data record relating to a sales transaction a person or a project. Likewise columns of the table can define discrete portions of the rows that have the same general data format wherein the columns can define fields of the records.

In general each individual piece of data standing alone is not very informative. Database applications allow the user to compare sort order merge separate and interconnect the data so that useful information can be generated from the data. Moreover capacity and versatility of databases have grown incredibly to allow virtually endless storage capacity utilizing databases.

In such databases it is often required to perform penetration testing for related software products. Such testing can evaluate the security of software application and computer systems by simulating attacks by hackers. Fuzz testing or fuzzing has typically been widely employed as an effective way for penetration testing wherein random data is fed into the input of software and potential crash scenarios evaluated.

In the case of Structured Query Language SQL servers fuzz testing has been focused on feeding random data and changing parameters to Transact SQL T SQL statement. In order to get fuzzed input into the program such can also require valid syntax correct SQL statements so that tests are not rejected upfront by language parsing and syntax checking. Moreover creating valid T SQL statements that are supported can be a difficult and time consuming task e.g. possible existence of a myriad of valid individual T SQL statements each of which can be employed in different ways with many different options and parameters. Such difficulties can significantly limit fuzz testing capabilities.

The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify key or critical elements of the claimed subject matter nor delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation providers for systems and methods that incorporate fuzz testing fuzzing capabilities within an SQL server e.g. within a parser or lexical analyzer thereof via employing a fuzzing component that facilitates penetration testing. The fuzzing component provides an entry point for accessing the fuzzing system to update explicit user specified parameters which are associated with SQL statements e.g. constant values table names and the like . Accordingly from a parser s point of view an output thereof includes fuzz values that are potentially generated inside the SQL server e.g. risky constructs random values and the like and which replace user defined concepts. Hence when fuzzing is enabled the server s in depth knowledge regarding semantics of the language code e.g. manner of parsing can be employed to determine vulnerabilities thereof. In addition logic of testing can be employed in conjunction with the code that understands how to implement it.

For example as part of defining SQL statements associated with the parser values can be separated into the actual grammar and values that are explicitly defined by the user. When the parser receives the SQL statements values that are explicitly defined by the user can be updated wherein an output of the parser includes fuzz values that form a valid text in place of user defined concepts. Accordingly fuzzing can be performed in a smart manner since the fuzz values that replace explicit user defined concepts can be generated within the server. For example the parser s knowledge about what to fuzz and what not to fuzz can be leveraged to perform smart fuzzing and facilitate testers s operation. In addition a legitimate data tree structure e.g. correct syntax for SQL statements can be obtained with fuzz values in place of what user has initially defined.

According to a further aspect of the subject innovation the T SQL language fuzz testing is built into capabilities of the SQL server itself. Various language entry points are identified wherein SQL statements such as data modification language DML data definition language DDL stored procedure SP functions and the like can subsequently be processed. Moreover code can be injected in such locations so the language inputs and parameters can be fuzzed e.g. randomly or deterministically based on different fuzzing algorithms. Hence the fuzz code within the product can change the input parameters and inputs on the fly while iterating through typically all different combinations applicable to the statements coming in.

Furthermore a signal can be generated to indicate that fuzzing is no longer required for the current statement and another statement is then evaluated for fuzzing. The fuzzer capability can be switched on off during run time e.g. without restarting SQL server to indicate whether received SQL statements should go through fuzzing code path or achieve fuzzer testing automatically. Such built in fuzzer can also retain information statements and combinations that it has exercised e.g. to avoid a subsequent fuzzing when the same statement and combination are encountered next time. Such enables fuzzer testing to operate deep into product code and carry out fuzzing at deeper level as compared to conventional fuzzer testing that are typically focused at network protocol layer language entry points and simply reject most malformed requests and inputs of normal fuzzer testing which further leave the internal product code untested.

The subject innovation further enables fuzzing of a server e.g. the target system to determine which tokens in the statement are under the control of the attacker without generating a parsing error. The initial user inputs are replaced with fuzz values while maintaining conformance to formats and preconditions of SQL statements e.g. without generating parser error to obtain fuzzer tests executed through inside layers of the product code path. Hence syntactical errors can be mitigated while using existing data flow and testing infrastructures.

In a related aspect a fuzz tracking component can track the fuzzed values and keep track of language statements and objects which have been fuzzed e.g. not repeat them in future. Hence by maintaining track of a previous state e.g. what statements have been fuzzed and what was the outcome of the fuzzing strategy non repetitive fuzzing of interesting language statements and objects of the system can be obtained.

Additionally the target system can specify a finite list of known malicious interesting values to provide an exhaustive non repetitive iteration through combinations for any given statement using each member of such list. Moreover a transformation tracking component can track transformations that have occurred so that the system can apply exactly the same transformation on same tokens that are received again. Such allows any subsequent statements to run with the same transformation and preserve any existing preconditions e.g. if input token data01 was transformed once to fuzzed token fuzzed01 anytime the system encounters the same token again the exact same transformation can be performed thereon. 

It is to be appreciated that the fuzzing system can employ pluggable fuzzing logic. Such plug in component can be created by external entities e.g. third parties and incorporated into the fuzzing systems e.g. via extensibility hooks to enable various testing scenarios.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

The various aspects of the subject innovation are now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

The test driver can supply structured and or potentially invalid input and SQL statements for the SQL server and associated software application programming interfaces APIs and network interfaces to maximize the likelihood of detecting errors that can lead to system vulnerabilities. The fuzzing component can replace initial user inputs with fuzz values while maintaining conformance to formats and preconditions of SQL statements e.g. without generating parser error to obtain fuzzer tests executed through inside layers of the product code path. Hence syntactical errors can be mitigated while using existing data flow and testing infrastructures.

The SQL server can associate with a data storage system wherein such data storage system can be a complex model based at least upon a database structure wherein an item a sub item a property and a relationship are defined to allow representation of information within a data storage system as instances of complex types. For example the data storage system can employ a set of basic building blocks for creating and managing rich persisted objects and links between objects. An item can be defined as the smallest unit of consistency within the data storage system which can be independently secured serialized synchronized copied backup restored and the like. Such item can include an instance of a type wherein all items in the data storage system can be stored in a single global extent of items. The data storage system can be based upon at least one item and or a container structure. Moreover the data storage system can be a storage platform exposing rich metadata that is buried in files as items. The data storage system can include a database to support the above discussed functionality wherein any suitable characteristics and or attributes can be implemented. Furthermore the data storage system can employ a container hierarchical structure wherein a container is an item that can contain at least one other item. The containment concept is implemented via a container ID property inside the associated class. A store can also be a container such that the store can be a physical organizational and manageability unit. In addition the store represents a root container for a tree of containers within the hierarchical structure.

In general the parsing component is responsible for translating SQL statements received from the test driver into an equivalent relational algebra tree. For example the parsing component can operate on a textual representation of received SQL statements from the test driver and divide such statement into fundamental components e.g. tokens and verify that the statement conforms to the SQL language grammar rules. The output of the parsing component can be in form of a relational operator RelOp tree. Hence when fuzzing is enabled in the fuzzing component the server s in depth knowledge regarding semantics of the language code e.g. manner of parsing can be employed to determine vulnerabilities thereof wherein logic of testing can be used in conjunction with the code that understands how to implement it.

For example as part of defining SQL statements associated with the parsing component values can be separated into the actual grammar and values that are explicitly defined by the user. When the parsing component receives the SQL statement from the test driver the values that are explicitly defined by the user can be updated wherein an output of the parsing component includes fuzz values that form a valid text in place of user defined concepts. Accordingly since the fuzz values that replace explicit user defined concepts can be generated within the SQL server fuzzing can be performed in a smart manner. For example knowledge of the parsing component about what to fuzz and what not to fuzz can be leveraged to perform smart fuzzing and facilitate testers s operation. Moreover a legitimate data tree structure e.g. correct syntax for SQL statements can be obtained with fuzz values in place of what user has initially defined.

Typically the SQL server can specify a finite list of known malicious interesting values to provide an exhaustive non repetitive iteration through combinations for any given statement using each member of such list. Moreover a transformation tracking component can track transformations that have occurred so that the system can apply exactly the same transformation on same tokens that are received again. Such allows any subsequent statements to run with the same transformation and preserve any existing preconditions e.g. if input token data01 was transformed once to fuzzed token fuzzed01 anytime the system encounters the same token again the exact same transformation can be performed thereon. 

Moreover previously encountered statements and fuzzing combination can be stored in a data store for easy look up purposes as well as for parallelism. Such statements are then passed to execution engine of the server for normal execution and the results are logged and checked by Test Driver. If there exists additional variations that can be fuzzed the fuzzing methodology can loop through various combinations. It is to be appreciated that the fuzzing system can employ pluggable fuzzing logic. Such plug in component can be created by external entities e.g. third parties and incorporated into the fuzzing systems e.g. via extensibility hooks to enable various testing scenarios.

The AI component can employ any of a variety of suitable Al based schemes as described supra in connection with facilitating various aspects of the herein described invention. For example a process for learning explicitly or implicitly how a value related to a parsed SQL statement should be replaced can be facilitated via an automatic classification system and process. Classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. For example a support vector machine SVM classifier can be employed. Other classification approaches include Bayesian networks decision trees and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

As will be readily appreciated from the subject specification the subject innovation can employ classifiers that are explicitly trained e.g. via a generic training data as well as implicitly trained e.g. via observing user behavior receiving extrinsic information so that the classifier is used to automatically determine according to a predetermined criteria which answer to return to a question. For example with respect to SVM s that are well understood SVM s are configured via a learning or training phase within a classifier constructor and feature selection module. A classifier is a function that maps an input attribute vector x x1 x2 x3 x4 xn to a confidence that the input belongs to a class that is f x confidence class .

In such communication session presentation and application service elements can be provided by Tabular Data Stream TDS . Since TDS does not require any specific transport provider it can be implemented over multiple transport protocols and the network . Responses to client commands that are returned can be self describing and record oriented e.g. the data streams can describe names types and optional descriptions of rows being returned. 

On the client side the data can be a Structured Query Language SQL command being in a language that the server side can accept a SQL command followed by its associated binary data e.g. the data for a bulk copy command or an attention signal. When a connection is desired the client can send a connection signal to the server. Even though the client can have more than one connection to the server each connection path can be established separately and in the same manner.

Once the server has received the connection signal from the client it will notify the client that it has either accepted or rejected the connection request. Like wise to send SQL command or batch of SQL commands then the SQL command e.g. represented by a Unicode format can be copied into the data section of a buffer and then sent to the SQL Server side . By enabling fuzzing on the SQL server side the server s in depth knowledge regarding semantics of the language code e.g. manner of parsing can be employed to determine vulnerabilities thereof wherein logic of testing can be used in conjunction with the code that understands how to implement it.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Similarly examples are provided herein solely for purposes of clarity and understanding and are not meant to limit the subject innovation or portion thereof in any manner. It is to be appreciated that a myriad of additional or alternate examples could have been presented but have been omitted for purposes of brevity.

Furthermore all or portions of the subject innovation can be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed innovation. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a computer and or computers those skilled in the art will recognize that the innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures and the like which perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the innovative methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the innovation can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects of the subject innovation is described that includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 11 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates a disk storage wherein such disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 60 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that various components described herein can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes various exemplary aspects. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing these aspects but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the aspects described herein are intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

