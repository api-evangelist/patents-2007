---

title: Ordering recognition results produced by an automatic speech recognition engine for a multimodal application
abstract: Ordering recognition results produced by an automatic speech recognition (‘ASR’) engine for a multimodal application implemented with a grammar of the multimodal application in the ASR engine, with the multimodal application operating in a multimodal browser on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non-voice modes, the multimodal application operatively coupled to the ASR engine through a VoiceXML interpreter, includes: receiving, in the VoiceXML interpreter from the multimodal application, a voice utterance; determining, by the VoiceXML interpreter using the ASR engine, a plurality of recognition results in dependence upon the voice utterance and the grammar; determining, by the VoiceXML interpreter according to semantic interpretation scripts of the grammar, a weight for each recognition result; and sorting, by the VoiceXML interpreter, the plurality of recognition results in dependence upon the weight for each recognition result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07840409&OS=07840409&RS=07840409
owner: Nuance Communications, Inc.
number: 07840409
owner_city: Burlington
owner_country: US
publication_date: 20070227
---
The field of the invention is data processing or more specifically methods apparatus and products for ordering recognition results produced by an automatic speech recognition ASR engine for a multimodal application.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Currently a multimodal application performs speech recognition by submitting digitized speech to an automatic speech recognition ASR engine. The ASR engine receives digitized speech from the multimodal application and matches the digitized speech with a set of recognized words or phrases. The matched set of word or phrases are then returned to the multimodal application. Often the ASR engine returns more than one word or phrase for each clip of digital speech submitted by the multimodal application for recognition because the audible characteristics of the results are similar. Consider for example that a multimodal application provided an ASR engine with digitized speech for the song title That Girl. The ASR engine may return the following matched phrases 

The order in which the ASR engine returns each of the matched results is typically based on the confidence level that the ASR engine calculates for each result which specifies how confident the ASR engine is that each result matches the digitized speech. The result with the highest confidence level is first in order the result with the second highest confidence level is second in order the result with the third highest confidence level is third in order and so on. The drawback to this current method of ordering recognition results is that the current method does not take into account other available information that might be used to order the recognition results in a manner that more accurately reflects the probability that each recognition result matches the digitized speech. As such readers will appreciate that room for improvement exists in ordering recognition results produced by an ASR engine for a multimodal application.

Ordering recognition results produced by an automatic speech recognition ASR engine for a multimodal application implemented with a grammar of the multimodal application in the ASR engine with the multimodal application operating in a multimodal browser on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes the multimodal application operatively coupled to the ASR engine through a VoiceXML interpreter includes receiving in the VoiceXML interpreter from the multimodal application a voice utterance determining by the VoiceXML interpreter using the ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result and sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for ordering recognition results produced by an automatic speech recognition ASR engine for a multimodal application according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention. Ordering recognition results produced by an ASR engine for a multimodal application in this example is implemented with a multimodal application operating in a multimodal browser on a multimodal device . The multimodal application is composed of one or more X V pages . The multimodal device supports multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application . The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The multimodal application is operatively coupled to an automatic speed recognition ASR engine through a VoiceXML interpreter . The operative coupling may be implemented with an application programming interface API a voice service module or a VOIP connection as explained more detail below.

Ordering recognition results produced by an ASR engine for a multimodal application is implemented with a grammar of the multimodal application in the ASR engine . The grammar of communicates to the ASR engine the words and sequences of words that currently may be recognized. In the example of the grammar includes grammar rules that advise an ASR engine or a voice interpreter which words and word sequences presently can be recognized. Grammars for use according to embodiments of the present invention may be expressed in any format supported by an ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a VoiceXML interpreter which words presently can be recognized. In the example above rule expansions includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a VoiceXML interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush or tom and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

As mentioned above the multimodal application operates in the multimodal browser which provides an execution environment for the multimodal application . To support the multimodal browser in processing the multimodal application the system of includes a VoiceXML interpreter . The VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The VoiceXML interpreter of is improved for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention. The VoiceXML interpreter may operate generally for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention by receiving in the VoiceXML interpreter from the multimodal application a voice utterance determining by the VoiceXML interpreter using the ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result and sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result.

A multimodal device on which a multimodal application operates is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also providing more than one mode of output such as graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art a multimodal application may refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. The speech engine of is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine not shown . As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick multimodal client or thick client because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin multimodal client or simply a thin client because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

A multimodal application in this example provides speech for recognition and text for speech synthesis to a speech engine through the VoiceXML interpreter . As shown in the VoiceXML interpreter may be installed locally in the multimodal device itself or the VoiceXML interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own VoiceXML interpreter . The VoiceXML interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the VoiceXML interpreter and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

The VoiceXML interpreter provides grammars speech for recognition and text prompts for speech synthesis to the speech engine and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. In a thin client architecture the VoiceXML interpreter is located remotely from the multimodal client device in a voice server the API for the VoiceXML interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the VoiceXML interpreter on the voice server . For ease of explanation only one of the multimodal devices in the system of is shown with a VoiceXML interpreter but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present invention. Each of the example multimodal devices in the system of may be configured to order recognition results produced by an automatic speech recognition ASR engine for a multimodal application by installing and running on the multimodal device a VoiceXML interpreter that orders recognition results produced by an automatic speech recognition ASR engine according to embodiments of the present invention.

The use of these four example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to an ASR engine through a VoiceXML interpreter and receiving and playing speech prompts and responses from the VoiceXML interpreter may be improved to function as a multimodal device according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention is a data communications data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of also includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices X V markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. A multimodal application in a multimodal device then upon receiving from the web sever an X V markup document as part of a multimodal application may execute speech elements by use of a VoiceXML interpreter and speech engine in the multimodal device itself or by use of a VoiceXML interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for ordering recognition results produced by an ASR engine for a multimodal application according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server .

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured to order recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications. Voice server application may be implemented as a web server implemented in Java C or another language that supports ordering recognition results produced by an ASR engine for a multimodal application according embodiments of the present invention.

The voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and synthesizing human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes a grammar a lexicon and a language specific acoustic model . The language specific acoustic model is a data structure a table or database for example that associates Speech Feature Vectors with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in a human language. The lexicon is an association of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out ordering recognition results produced by an ASR engine for a multimodal application the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector SFV . An SFV may be defined for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

In the example of the voice server application passes the speech along to the ASR engine for recognition through a VoiceXML interpreter . The VoiceXML interpreter is a software module of computer program instructions that accepts voice dialogs from a multimodal application running remotely on a multimodal device. The dialogs include dialog instructions typically implemented in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The VoiceXML interpreter of is improved for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention. The VoiceXML interpreter may operate generally for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention by receiving in the VoiceXML interpreter from the multimodal application a voice utterance determining by the VoiceXML interpreter using the ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result and sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application VoiceXML interpreter speech engine including ASR engine and TTS Engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture ISA buses and Peripheral Component Interconnect PCI buses.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for ordering recognition results produced by an ASR engine for a multimodal application of a multimodal application in a thin client architecture according to embodiments of the present invention. The example of includes a multimodal device and a voice server connected for data communication by a VOIP connection through a data communications network . A multimodal application operates in a multimodal browser on the multimodal device and a voice server application operates on the voice server . The multimodal application may be a set or sequence of one or more X V pages that execute in the multimodal browser .

The multimodal device supports multiple modes of interaction including a voice mode and one or more non voice modes. The example multimodal device of also supports voice with a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The example multimodal device of may support non voice modes of user interaction with keyboard input mouseclicks a graphical user interface GUI and so on as will occur to those of skill in the art.

In addition to the multimodal sever application the voice server also has installed upon it a speech engine with an ASR engine a grammar a lexicon a language specific acoustic model and a TTS engine as well as a Voice XML interpreter that includes a form interpretation algorithm . VoiceXML interpreter interprets and executes VoiceXML dialog received from the multimodal application and provided to VoiceXML interpreter through voice server application . VoiceXML input to VoiceXML interpreter may originate from the multimodal application implemented as an X V client running remotely in a multimodal browser on the multimodal device . The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

VOIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VOIP protocols. VOIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application through the multimodal browser an API and a voice services module then packages the digitized speech in a recognition request message according to a VOIP protocol and transmits the speech to voice server through the VOIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications providing responses to HTTP requests from multimodal browsers running on multimodal devices.

The voice server application receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The multimodal application is operatively coupled to the ASR engine through the VoiceXML interpreter . In this example the operative coupling to the ASR engine through a VoiceXML interpreter is implemented with a VOIP connection through a voice services module . The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialogs and speech for recognition to a VoiceXML interpreter and receiving in response voice prompts and other responses including action identifiers according to embodiments of the present invention. The VoiceXML interpreter in turn utilizes the speech engine for speech recognition and generation services.

The VoiceXML interpreter of is improved for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention. The VoiceXML interpreter may operate generally for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention by receiving in the VoiceXML interpreter from the multimodal application a voice utterance determining by the VoiceXML interpreter using the ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result and sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result.

In the example of the voice services module provides data communications services through the VOIP connection and the voice server application between the multimodal device and the VoiceXML interpreter . The API is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application .

Ordering recognition results produced by an ASR engine for a multimodal application of a multimodal application according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in ordering recognition results produced by an ASR engine for a multimodal application of a multimodal application according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. Rather all the components needed for speech synthesis and voice recognition in ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly as do parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a VoiceXML Interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine a grammar a lexicon a language dependent acoustic model and a TTS engine . The VoiceXML interpreter administers dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine useful for ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports ordering recognition results produced by an ASR engine for a multimodal application according to embodiments of the present invention. The multimodal application implements speech recognition by accepting speech utterances for recognition from a user and sending the utterance for recognition through VoiceXML interpreter API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V pages executing in a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through a VoiceXML interpreter API directly to an embedded VoiceXML interpreter for processing. The embedded VoiceXML interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . The embedded VoiceXML interpreter may then issue requests to the action classifier to determine an action identifier in dependence upon the recognized result provided by the ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

The multimodal application is operatively coupled to the ASR engine through a VoiceXML interpreter . In this example the operative coupling through the VoiceXML interpreter is implemented using a VoiceXML interpreter API . The VoiceXML interpreter API is a module of computer program instructions for use by an application level program in providing dialog instructions speech for recognition and other input to a VoiceXML interpreter and receiving in response voice prompts and other responses. The VoiceXML interpreter API presents the same application interface as is presented by the API of the voice service module on in a thin client architecture. At the application level calls to the VoiceXML interpreter API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. The VoiceXML interpreter in turn utilizes the speech engine for speech recognition and generation services.

The VoiceXML interpreter of is improved for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention. The VoiceXML interpreter may operate generally for ordering recognition results produced by the ASR engine for the multimodal application according to embodiments of the present invention by receiving in the VoiceXML interpreter from the multimodal application a voice utterance determining by the VoiceXML interpreter using the ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result and sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result.

The multimodal application in this example running in a multimodal browser on a multimodal device that contains its own VoiceXML interpreter and its own speech engine with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application as well as all or most of the functionality for ordering recognition results produced by an ASR engine for a multimodal application of a multimodal application according to embodiments of the present invention is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of ordering recognition results produced by an ASR engine for a multimodal application of a multimodal application according to embodiments of the present invention. Ordering recognition results produced by an ASR engine for a multimodal application in this example is implemented with a multimodal application composed of at least one X V page . The multimodal application operates in a multimodal browser on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode may be implemented in this example with audio output through a speaker and audio input through a microphone. Non voice modes may be implemented by user input devices such as for example a keyboard and a mouse.

The multimodal application is operatively coupled to the ASR engine through a VoiceXML interpreter . The operative coupling provides a data communications path from the multimodal application to the ASR engine for grammars speech for recognition and other input. The operative coupling also provides a data communications path from the ASR engine to the multimodal application for recognized speech semantic interpretation results and other results. The operative coupling may be effected with a VoiceXML interpreter on when the multimodal application is implemented in a thick client architecture. When the multimodal application is implemented in a thin client architecture the operative coupling may include a voice services module on a VOIP connection on and a VoiceXML interpreter on .

The method of includes receiving in the VoiceXML interpreter from the multimodal application a voice utterance . The voice utterance of represents digitized human speech provided to the multimodal application by a user of a multimodal device. As mentioned above the multimodal application may acquire the voice utterance from a user through a microphone and encode the voice utterance in a suitable format for storage and transmission using any CODEC as will occur to those of skill in the art. In a thin client architecture the VoiceXML interpreter may receive the voice utterance from the multimodal application according to the method of as part of a call by the multimodal application to a voice services module on to provide voice recognition services. The voice services module then in turn passes the voice utterance to the VoiceXML interpreter through a VOIP connection on and a voice server application on . In a thick client architecture the VoiceXML interpreter may receive the voice utterance from the multimodal application according to the method of as part of a call directly to an embedded VoiceXML interpreter by the multimodal application through an API exposed by the VoiceXML interpreter .

Ordering recognition results produced by an ASR engine for a multimodal application according to the method of is implemented with the grammar of the multimodal application in an ASR engine . Through the operative coupling between the multimodal application and the ASR engine the multimodal application may provide the grammar to the ASR engine . The X V page of the multimodal application may specify the grammar using the VoiceXML element as follows 

The source attribute src specifics the URI of the definition of the exemplary grammar. Although the above example illustrates how a grammar may be referenced externally a grammar s definition may also be expressed in line in an X V page.

The method of also includes determining by the VoiceXML interpreter using an ASR engine a plurality of recognition results in dependence upon the voice utterance and the grammar . The VoiceXML interpreter may determine a plurality of recognition results using an ASR engine according to the method of by passing the voice utterance and the grammar received from the multimodal application to an ASR engine for speech recognition receiving a plurality of recognition results from the ASR engine and storing the recognition results in an ECMAScript data structure such as for example the application variable array application.lastresult some other field variable array for a field specified by the X V page .

As mentioned above the ASR engine often returns more than one recognition result for each voice utterance submitted by the multimodal application for recognition because the audible characteristics of each result is similar. Consider for example that a multimodal application operates to play a song when a user speaks the song s title. In such an example the VoiceXML interpreter received a voice utterance comprising the song title That Girl. The VoiceXML interpreter may receive the following recognition results from an ASR engine 

As mentioned above the VoiceXML interpreter of may store the recognition results in an ECMAScript data structure such as for example the application.lastresult array. ECMAScript data structures represent objects in the Document Object Model DOM at the scripting level in an X V page. The DOM is created by a multimodal browser when the X V page of the multimodal application is loaded. The application.lastresult array holds information about the last recognition generated by an ASR engine for the multimodal application . The application.lastresult is an array of elements where each element application.lastresult i represents a possible result through the following shadow variables 

When the VoiceXML interpreter stores the recognition results in an ECMAScript field variable array for a field specified in the multimodal application the recognition results may be stored in field variable array using shadow variables similar to the application variable application.lastresult . For example a field variable array may represent a possible recognition result through the following shadow variables 

Because the VoiceXML interpreter typically receives the recognition results from an ASR engine in the order of each result s confidence level the VoiceXML interpreter stores the plurality of recognition results in the application.lastresult array such that the result with the highest confidence level is ordered first in the application.lastresult array the result with the second highest confidence level is ordered second in the application.lastresult array the result with the third highest confidence level is ordered third in the application.lastresult array and so on. For further explanation consider that the VoiceXML interpreter receives the following recognition results from an ASR engine in the following order according to each result s confidence level 

The VoiceXML interpreter may store the exemplary recognition results above in the application.lastresult array as illustrated below in the following table 

Although the text above describes using the application.lastresult array to store the recognition result returned to the VoiceXML interpreter by an ASR engine readers will note that in other ECMAScript data structure may also be used to store the recognition results . For example the VoiceXML interpreter may store the recognition results in a field variable array similar to the application variable array described above.

The method of includes determining by the VoiceXML interpreter according to semantic interpretation scripts of the grammar a weight for each recognition result . Each weight is a characteristic of each recognition result used to reorder the recognition results received from an ASR engine. Each weight incorporates information used to order the recognition results beyond the mere confidence level used by the ASR engine. For example in a multimodal application that returns song titles the weights determined by the VoiceXML interpreter may incorporate information concerning each songs popularity. In a multimodal application that retrieves patient information for a doctor the weights determined by the VoiceXML interpreter may incorporate information concerning the doctor s current patients.

In the example of the weight for each recognition result may be represented using an ECMAScript data structure such as for example a shadow variable for each element in the application.lastresult array or a field variable array. For further example consider the following exemplary shadow variable the application.lastresult array 

In the example of each weight may be statically or dynamically assigned to a recognition result using semantic interpretation scripts in the grammar . Semantic interpretation scripts are instructions embedded in the grammar that are executed by the VoiceXML interpreter based on the recognition results matched by the grammar . Semantic interpretation scripts operates to transform the recognition result from the format matched by the ASR engine into a format more suitable for processing the multimodal application. Semantic interpretation scripts may be embedded in the grammar according to the Semantic Interpretation for Speech Recognition SISR specification promulgated by the W3C or any other semantic interpretation specification as will occur to those of skill in the art.

In the example of the semantic interpretation scripts of the grammar may statically define the weight for each recognition result . For example consider the following segment of an exemplary grammar that includes semantic interpretation scripts 

The exemplary grammar segment above illustrates four semantic interpretation scripts each semantic interpretation script enclosed in curly brackets and . A multimodal application may utilize the exemplary grammar segment above to specify a set of valid responses from a user prompted by the multimodal application to provide a song title. The exemplary grammar segment above communicates various phrases to an ASR engine for use in recognizing a voice utterance containing the name of a song. A VoiceXML interpreter stores recognized results from an ASR engine in the songfield field variable array. In the example above each semantic interpretation script statically defines the weight for each recognition result by instructing the VoiceXML interpreter to assign a static value to the shadow variable weight of the songfield field variable array. Therefore when the recognition result songfield.utterance contains Bad Girl the weight songfield.weight is statically defined as 100. When the recognition result songfield.utterance contains Dad s Girl the weight songfield.weight is statically defined as 55. When the recognition result songfield.utterance contains That Girl the weight songfield.weight is statically defined as 203. When the recognition result songfield.utterance contains Third World the weight songfield.weight is statically defined as 21. The static values 100 55 203 and 21 may represent the popularity of a particular song with higher numbers representing more popular songs and lower numbers representing less popular songs. Readers will note that the example above is for explanation and not for limitation.

Rather than statically defining the weight for each recognition result in the example of the semantic interpretation scripts of the grammar may dynamically define the weight for each recognition result . For example consider the following segment of an exemplary grammar that includes semantic interpretation scripts 

Again the semantic interpretation script in the exemplary grammar segment above is enclosed in curly brackets and . In the example above the semantic interpretation script dynamically defines the weight for each recognition result by instructing the VoiceXML interpreter to call the ECMAScript function getSongRank using the song name for the recognized result as a parameter. The semantic interpretation script then instructs the VoiceXML interpreter to store the value returned from the getSongRank function in the weight songfield.weight for the recognized result for a song. The getSongRank function may access the rank for the recognized song name from a song data repository. Readers will note that the example above is for explanation and not for limitation. Regardless of whether the semantic interpretation scripts of the grammar statically or dynamically define the weight for each recognition result the VoiceXML interpreter may determine a weight for each recognition result according to the method of by executing the semantic interpretation script in the grammar corresponding to each recognition result .

The method of claim also includes sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result . Sorting by the VoiceXML interpreter the plurality of recognition results according to the method of includes sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result and a sorting attribute for the grammar . The sorting attribute of is specified by the multimodal application using a VoiceXML element in the X V page . For example consider the following exemplary element 

The source attribute src specifics the URI of the definition of an exemplary grammar grammar.le that includes semantic interpretation scripts defining the weights for each recognition result statically or dynamically as explained above. The exemplary sorting attribute sort weight specifies whether to sort the plurality of recognition results according to a value of the weight for each recognition result . A value of true for the exemplary sorting attribute sort weight specifies sorting the recognition results according to a value of the weight for each recognition result from highest to lowest. A value of false the default value for the exemplary sorting attribute sort weight specifies sorting the recognition results according to the confidence level calculated by the ASR engine. Although in the example above a value of true for the weight sorting attribute sort weight specifies sorting the recognition results according to a value of the weight for each recognition result from highest to lowest readers will note that in some embodiments a value of true may specify sorting the recognition results from lowest to highest.

For further explanation of sorting by the VoiceXML interpreter the plurality of recognition results in dependence upon the weight for each recognition result and a sorting attribute for the grammar consider the following table containing exemplary recognition results returned by the ASR engine and the corresponding weights for each recognition result determined by the VoiceXML interpreter according to semantic interpretation scripts of the grammar 

In the exemplary table above each of the exemplary recognition results are matched by an ASR engine to the voice utterance received in a VoiceXML interpreter. The confidence level for each recognition result is calculated by the ASR engine and returned to the VoiceXML interpreter along with each recognition result. As mentioned above the VoiceXML interpreter may store the recognition results in the ECMAScript application.lastresult array in the order returned by the ASR engine which is from highest confidence level to lowest confidence level. The recognition result may be stored in the application.lastresult .utterance shadow variable and the confidence level may be stored in the application.lastresult .confidence shadow variable. The weights are determined by the VoiceXML interpreter according to the semantic interpretation scripts in the grammar for the rules of the grammar used to match the recognition results. The weight for each recognition result may be stored in the application.lastresult .weight shadow variable.

When the sorting attribute specifies sorting the plurality of recognition results according to a value of the weight for each recognition result such as for example sort weight true then the VoiceXML interpreter may sort the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute to produce the following results in the application.lastresult array 

Readers will note after the VoiceXML interpreter sorts the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute the song title That Girl is now in the first element of the application.lastresult array because That Girl has the highest weight. In the recognition results returned to the VoiceXML interpreter by the ASR engine however the song title Bad Girl was the first element in the application.lastresult array because it had the highest confidence level. The VoiceXML interpreter may sort the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute according to the method of using any number of sorting algorithms as will occur to those of skill in the art. Sorting the plurality of recognition results in dependence upon the weight for each recognition result and a sorting attribute according to the method of therefore advantageously orders the recognition results produced by the ASR engine based on a weighting other than the result s confidence level.

In the example of the sorting attribute may also specify sorting the plurality of recognition results according to an ECMAScript script. For example consider the following exemplary element 

The source attribute src specifics the URI of the definition of an exemplary grammar grammar.le that includes semantic interpretation scripts defining the weights for each recognition result statically or dynamically as explained above. The exemplary sorting attribute sort expr specifies sorting the plurality of recognition results according to an ECMAScript script reorderWeights . For further explanation again consider the following table containing exemplary recognition results returned by the ASR engine and the corresponding weights for each recognition result determined by the VoiceXML interpreter according to semantic interpretation scripts of the grammar 

In the exemplary table above each of the exemplary recognition results are matched by an ASR engine to the voice utterance received in a VoiceXML interpreter. The confidence level for each recognition result is calculated by the ASR engine and returned to the VoiceXML interpreter along with each recognition result. As mentioned above the VoiceXML interpreter may store the recognition results in the ECMAScript application.lastresult array in the order returned by the ASR engine which is from highest confidence level to lowest confidence level. The recognition result may be stored in the application.lastresult .utterance shadow variable and the confidence level may be stored in the application.lastresult .confidence shadow variable. The weights are determined by the VoiceXML interpreter according to the semantic interpretation scripts in the grammar for the rules of the grammar used to match the recognition results. The weight for each recognition result may be stored in the application.lastresult .weight shadow variable. After the VoiceXML interpreter determines weights for each recognition result in the application.lastresults array the VoiceXML interpreter may execute the reorderWeights script to reorder the application.lastresult array based on the weight of each recognition result.

In the example above the reorderWeights script sorts the recognition results based on both the weight for each result and the confidence level for each result. In particular the exemplary reorderWeights script sorts the recognition results based on the product of the confidence level for each recognition result and the weight for each recognition result . Readers will note however that the exemplary reorderWeights script is used for explanation only and not for limitation. When the sorting attribute specifies sorting the plurality of recognition results according to the exemplary ECMAScript script reorderWeights then the VoiceXML interpreter may sort the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute to produce the following results in the application.lastresult array 

Readers will note after the VoiceXML interpreter sorts the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute the song title That Girl is now in the first element of the application.lastresult array because That Girl has the highest product for the weight and confidence level. In the recognition results returned to the VoiceXML interpreter by the ASR engine however the song title Bad Girl was the first element in the application.lastresult array because it had the highest confidence level. The VoiceXML interpreter may sort the plurality of recognition results in dependence upon the weight for each recognition result and the sorting attribute according to the method of using any number of sorting algorithms as will occur to those of skill in the art. Sorting the plurality of recognition results in dependence upon the weight for each recognition result and a sorting attribute according to the method of therefore advantageously orders the recognition results produced by the ASR engine based on a weighting other than the result s confidence level.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for ordering recognition results produced by an ASR engine for a multimodal application. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

