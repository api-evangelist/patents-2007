---

title: Hierarchical grouping columns
abstract: A system and process that automatically responds to changes in displayed table data to determine and reestablish a hierarchy for the table. A column hierarchy order component checks each column of a table to determine the number of groupings of entries and reorders the columns based on the number of groupings. A column order at the time a table is loaded is saved and can be used to restore that original order.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558169&OS=09558169&RS=09558169
owner: SAP SE
number: 09558169
owner_city: Walldorf
owner_country: DE
publication_date: 20071120
---
The invention relates to table management. Specifically the embodiments of the invention relate to a method and system for reorganizing tables to maintain a hierarchy or order of columns in response to user changes to the grouping of fields within columns.

Tables are utilized in a large number of different applications. The applications include spreadsheet applications such as EXCEL by Microsoft Corporation of Redmond Wash. supply chain management applications such as SCM by SAP AG of Waldorf Germany database applications such as MySQL by MySQL AB of Uppsala Sweden and similar applications. These applications access stored data draw a table and insert the data into the table.

Tables are organizations of data as entries or records. Each entry or record includes a set of fields that are common amongst the entries. The entries can be displayed in rows and columns where each row corresponds to an entry and each column to a field of the entry. Often values in the fields of different entries are identical. Organizing entries with identical values in a given field can help the user establish relationships between the entries and identify information about the data set as a whole. The relationships between the entries can constitute a hierarchy of information within the table.

Some applications provide a grouping functionality to assist the user in manipulating the ordering of data to reveal a hierarchy that can be an explicit hierarchy or pseudo hierarchy. The grouping function is performed by the application which draws the tables. As a result of grouping of any of the columns in the table a hierarchy may be altered or lost. A table that includes grouped columns that are ordered left to right from fewest groupings to most groupings loses this order when a user ungroups a highly grouped column. As a result the hierarchy displayed by the ordering of the table columns is lost.

Embodiments of the invention include a system and process that automatically responds to changes in displayed table data to determine and reestablish a hierarchy for the table. A column hierarchy order component checks each column of a table to determine the number of groupings of entries and reorders the columns based on the number of groupings. A column order at the time a table is loaded is saved and can be used to restore that original order.

The applications A C can be any type of applications including word processing programs spreadsheet applications supply chain management applications database management applications and similar types of applications that utilize and rely on tables to display sets of data to a user. A set as used herein refers to any positive whole number of items including one item. The system can include any number of applications A C that can be executed by a single computer system or a set of computer systems. The applications A C rely on a user interface layer to generate basic aspects of the application interface.

The user interface layer can be a library set of classes or similar components that are utilized by applications to generate basic user interface elements such as windows menus icons and similar user interface elements. The user interface layer is implemented separately from the applications A C to allow for reuse of the functionality of the user interface layer across applications to provide a consistent style and to simplify programming requirements. The user interface layer can be exposed to applications through an application programming interface API or similar interface set of classes or library. The user interface layer can be provided as part of an operating system programming platform or environment such as Java by Sun Microsystems of Santa Clara Calif. or similar software.

The context layer can be a library set of classes or similar components available that are utilized by applications to provide a software environment to the applications including providing functionality and data to the user of the applications. The context layer can store data including user data environment data and similar data. The context layer can also include a column order restoration component and a column hierarchy order component .

A column order restoration component can store the column order of each table or a particular table that is loaded by the applications A C. A separate instance of a column order restoration component can be created for each table that is loaded by an application A C. In another embodiment a set of stored column order restoration components store the column order data for multiple tables. The column order restoration component can store column order data in any format or in any data structure including hash tables lists objects and similar data structures.

The column order restoration component also receives requests event calls interrupts or similar actions from applications A C or user interface layer during the use of the tables. For sake of clarity the example of servicing an event is presented. One skilled in the art would understand that other paradigms can operate on similar principles. The events can include an indicator for a table or similar table data. The indicator can be an object representing the table data a link or pointer to the table data an identifier for the table data or similar representation of the table data. The column order restoration component returns the stored order to the application A C or user interface layer to allow the identified table to be redrawn and reorganized into the column order it was loaded referred to herein as the original column order. In another embodiment the column order restoration component directly rearranges the display of table data before returning from the event that activated the column order restoration component . The column order restoration component can be an event listener or similar object that services events.

A column hierarchy order component is a class library object or similar component that is accessible by applications A C or the user interface layer . The column hierarchy order component receives calls events requests or similar actions from the applications A C or user interface layer that indicate a table to be reorganized. For sake of clarity the example of servicing an event is presented. One skilled in the art would understand that other paradigms can operate on similar principles. The events can include an indicator for a table or similar table data. The indicator can be an object representing the table data a link or pointer to the table data an identifier for the table data or similar representation of the table data. The column hierarchy order component analyzes the indicated table to determine hierarchy information for the table. The column hierarchy order component then reorders the table columns according to the determined hierarchy data. The table data is then returned to the requesting application A C or to the user interface layer to be redrawn or displayed to the user.

The backend interface I F is an abstraction of the communication components that allow the applications A C user interface layer and context layer to communicate with a backend implementation . The backend interface can be implemented using any combination of remote function calls RFC remote procedure calls RPC open database connectivity ODBC Java database connectivity JDBC or similar backend communication and interfacing technologies. The backend interface can vary depending on the type of backend implementation . In one embodiment multiple backend implementation can be utilized. Each backend implementation can have a separate backend interface or share any combination of backend interfaces .

The backend implementation can be any server such as a database management system file system web server or similar program. The backend system provides and manages data utilized by the applications A C including application and user data. The backend implementation can store table data customization data user data and similar types of data to be accessed by the applications A C. The backend implementation can be local to the machines executing the applications A C or remote from the machines executing the applications A C. The backend implementation can exchange data with the applications through the backend interface . The data provided by the backend implementation can be stored on fixed disks such as arrays of hard drives optical drives and similar storage systems. As a result the access times for the data provided by the backend implementation can be on the order of milliseconds seconds or longer. Thus it can be advantageous to minimize the number of times that the backend system is accessed to improve performance of the applications A C.

The context layer improves overall system performance including application A C performance by storing data such as the column hierarchy order by the column order restoration component and performing functions such as the column hierarchy ordering and column order restoration. Storing these components and data locally and performing these functions independent of the backend implementation minimizes the number of accesses to the backend implementation and improves system performance.

The components of the context layer are independent of the backend implementation and the applications A C. Thus the applications A C do not have to replicate the functionality of the context layer components or manage the storage of the data in the context layer . Similarly the applications A C do not have to communicate with the backend implementation to reorganize and manipulate the column hierarchy order or to restore a column hierarchy.

In one embodiment a column hierarchy order component executes in response to receiving an event or similar call from an application the user interface layer or another context layer component. The method for invoking the column hierarchy order component can vary dependent on the implementation of the component. For example the component can be implemented as a set of objects with methods available to other components and applications or as a listener for specific events generated within the system such as the accessing of table data or interaction of the user with a set of user interface input mechanisms. The received event includes an indicator or reference to a table to be analyzed and modified.

The column hierarchy order component iterates or similarly examines each column of a table to count the number of groupings in each column. A grouping is a merger of values that are identical in a column all identical values can be merged or a subset of the identical values can be merged depending on the organization of the table. In one embodiment the fewer the total number of groupings in a given column the higher the level it is in an inherent hierarchy for that table. In another embodiment the organization of a hierarchy can be based on any formula utilizing the groupings count or similar column data. The example of total number of groupings is described herein for clarity. However one skilled in the art would understand that the principles described in the context of grouping count can be applied to other hierarchy criteria. The groupings are tallied for each column of the table indicated by the event block .

The column hierarchy order component then reorganizes the columns of the table based on the determined hierarchy block . The type of reorganization based on hierarchy can be predetermined or selected by a user. In one embodiment the tally data for each column is used to organize the columns left to right from lowest tally count to highest tally count. In cases of ties the relative column order of two columns with equal tally counts can be maintained. In other embodiments a tie breaking scheme can be utilized to determine relative order of columns with equal tally counts. Any other type of ordering based on the tally count e.g. high to low can be implemented as selected by a programmer administrator or user.

The column hierarchy order component then returns a reorganized table to the requesting application user interface layer or context layer component. The reorganized table in the form of an indicator or similar representation of the table or table location is returned to the requesting application or user interface component block . In another embodiment the column hierarchy order component can directly manipulate and redraw the column for an application or component.

The backend implementation responds to the request by returning the table data. The application context layer or user interface layer determines the column order of the table. The column order can be encoded in any format and stored in any type of data structure block . The data structure can be a shared data structure for multiple open tables or each table can have a separate instance of a data structure for storing original column order. In another embodiment the original table can be stored or some portion of the table can be stored to preserve a record of the original column order. The stored column order can be deleted or removed when the table data is no longer used by the application for example when the application is closed.

The loaded table data is then returned to the user interface and application to draw and display the table block . The application then allows a user to modify and rearrange the loaded table data. The original column order can be lost during use but can be restored because it has been stored. Further the restoration can be quick because the requisite data is stored in the context layer and the backend implementation does not have to be accessed.

In one embodiment a column order restoration component executes in response to receiving an event or call from an application or the user interface layer. The method for invoking the column order restoration component can vary dependent on the implementation of the component. For example the component can be implemented as a set of objects with methods available to applications or as listeners for specific events generated within the system such as the accessing of table data or interaction of the user with a set of user interface input mechanisms. The received event includes an indicator or reference to a table to be analyzed and modified.

The column order restoration loads a stored column order for the table indicated by the event block . The column order restoration component then reorganizes the columns of the table based on the stored column order block . The reorganization based on stored column order can match the table column order exactly with the original column order. In another embodiment the column order reorganization is limited to a subset of the total columns or similar alterations from the original column order can be made. In other embodiments a stored column order may be retrieved that is not the original column order. The stored column order can be created at any time during the use of the table to preserve a particular column order.

The column order restoration component then returns a reorganized table to the requesting application or user interface component. The reorganized table in the form of an indicator or similar representation of the table or table location is returned to the requesting application or user interface component block . In another embodiment the column order restoration component redraws and manipulates the table before returning.

The interface for the table also includes a reset columns input mechanism . A user could activate this input mechanism to call the column order restoration component. In one embodiment the column order restoration component would resent the column order to that illustrated in . The column order restoration does not alter the groupings of data. In the examples provided because no values have been altered and the data has not been sorted if the reset columns button were activated in then the table data would revert back to the format of .

In one embodiment the column hierarchy order and column order restoration system can be implemented as hardware devices. In another embodiment these components may be implemented in software e.g. microcode assembly language or higher level languages . These software implementations may be stored on a machine readable medium. A machine readable medium may include any medium that can store or transfer information. Examples of a machine readable medium include a ROM a floppy diskette a CD ROM a DVD flash memory hard drive an optical disk or similar medium.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

