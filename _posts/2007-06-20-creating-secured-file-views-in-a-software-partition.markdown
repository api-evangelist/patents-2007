---

title: Creating secured file views in a software partition
abstract: A computer implemented method, apparatus, and computer program product for creating secured file views of a protected file. The process receives a request to access the file, wherein the file is stored in a common location, and wherein the request includes a set of file viewing parameters. The process identifies a callback function associated with the file and calls the callback function with the set of file viewing parameters to form a set of virtual viewing parameters. Thereafter, the process generates a secured file view of the file using the virtual viewing parameters, wherein the secured file view is viewable by a user of an authorized partition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341733&OS=08341733&RS=08341733
owner: International Business Machines Corporation
number: 08341733
owner_city: Armonk
owner_country: US
publication_date: 20070620
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method and apparatus for managing protected data. Still more particularly the present invention relates to a computer implemented method apparatus and computer usable program product for creating secured file views of a protected file in a partitioned computing device to control access to a protected file.

Partitions are divisions of a computer system s resources into multiple sets of resources. The sets of resources may include for example processors memory input output devices and storage. In addition each partition may run a separate instance of an operating system for independently controlling a set of the computer system s resources. Thus a single computer system may be partitioned into a number of separate computing environments. Each of these environments may be dedicated for different uses. For example partitions may be used for combining multiple test development quality assurance and production work environments on the same computing system.

The use of partitions in a computer system yields a number of advantages. Some advantages include for example reduced cost ease of maintenance and ease of accessing certain computer files by the various partitions of the computer system. The ease at which certain computer files may be accessed is attributable to the fact that the computer files of a partitioned computer system are stored in central locations such as the computer system s hard disk drive. Further the computer files within the hard disk drive may be accessed by the various partitions by implementing simple mechanisms such as name fs file mounting or sharing read only memory segments.

However certain types of protected data such as the collection of files in an AIX Object Data Manager ODM may not be easily accessible by the various managed partitions of a computer system. AIX a UNIX based operating system is a registered trademark of International Business Machines Inc. The AIX ODM is a data manager used for managing a computer system s device configuration information and other system resource information.

A user of a computer system s administrative partition may have the authorization to view and modify the content of a protected file. A protected file is a file containing restricted information. The restricted information is information designated as inaccessible to a user. Restricted information may include for example user account information software hardware configuration data financial data or any other type of data having personal or confidential nature. The protected file may also have unrestricted information that may be presented to one or more users.

A user of a managed software partition however may lack the necessary authorization to access the protected file. The user of the managed software partition may be denied access to a protected file for any number of reasons. For example a managed partition may lack authorization to access a file particular to a different partition or because system security settings prevent access by the managed partition.

One currently implemented method for giving a user of a managed partition access to a protected file involves providing the managed partition with a copy of the file. However this method of sharing the protected file often results in the creation of multiple copies of the protected file. The necessity of creating multiple copies of computer files consumes system resources and may lead to the existence of file copies containing different information.

Another currently used method for sharing protected data between partitions of a computer system is providing all managed partitions of a computer system full access to the protected data of the computer system. However this method of sharing protected data may enable an inexperienced or malicious user to modify a critical system file thereby crashing the computer system. In addition full access to the protected files of a computer system may result in the dissemination of sensitive and personal information of the various users.

In yet another currently used method for sharing protected data between partitions of a computer system users of the various partitions are provided read only access to the protected files. This solution however may allow users to reverse engineer access passwords and gain full access to the protected files.

The illustrative embodiments described herein provide a computer implemented method apparatus and computer program product for creating secured file views of a protected file. The process receives a request to access the file wherein the file is stored in a common location and wherein the request includes a set of file viewing parameters. The process identifies a callback function associated with the file and calls the callback function with the set of file viewing parameters to form a set of virtual viewing parameters. Thereafter the process generates a secured file view of the file using the virtual viewing parameters wherein the secured file view is viewable by a user of an authorized partition.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub NB MCH and a south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are coupled to north bridge and memory controller hub . Processing unit may contain one or more processors and even may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the NB MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB and other ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The illustrative embodiments described herein provide a computer implemented method apparatus and computer program product for creating secured file views of a protected file. The process receives a request to access the file wherein the file is stored in a common location and wherein the request includes a set of file viewing parameters. The process identifies a callback function associated with the file and calls the callback function with the set of file viewing parameters to form a set of virtual viewing parameters. Thereafter the process generates a secured file view of the file using the virtual viewing parameters. A secured file view is a file generated from the unrestricted information within a protected file and is only viewable by a user of an authorized partition.

The set of virtual viewing parameters is one or more parameters usable to generate a secure file view. In particular the set of virtual viewing parameters may be used to control a user s access to a protected file. Alternatively the set of virtual viewing parameters may be used to identify the unrestricted information within a protected file after the protected file has been accessed by the user.

In limiting a user s access to a protected file the set of virtual viewing parameters may be parameters usable by a system call for limiting a user s ability to access portions of a protected file. In this embodiment the process identifies an inode associated with the requested file. The process then calls a callback function identified by the inode. A callback function is an executable code module that in this example converts a set of file viewing parameters to a set of virtual viewing parameters. A set of file viewing parameters is one or more variables for identifying a file or a portion of a file for access by a user. As an example the set of file viewing parameters may specify the name of a protected file and the portions of the file requested by a user.

In an illustrative embodiment a callback function converts the set of file viewing parameters to a set of virtual viewing parameters by implementing an offset map. In this embodiment the offset map is a one to one translation table for mapping a file viewing parameter to a virtual viewing parameter. Using file viewing parameters to retrieve portions of a protected file may result in the return of restricted information. However the use of virtual viewing parameters allows a user to receive only the unrestricted information within the protected file. Consequently the restricted information of a protected file may be filtered out. The remaining unrestricted information may then be used to generate a secured file view.

The set of virtual viewing parameters may be used by a system call to retrieve a file. The set of file viewing parameters may be for example file offset values. An offset value is an indicator usable to identify portions of data stored in a protected file. For an unprotected file the file offset values may be used to retrieve the entire requested file or a portion of a requested file corresponding to the file offset values. The actual file returned however corresponds to the set of virtual viewing parameters rather than the set of file offset values. In this example the set of virtual viewing parameters is the set of virtual offset values.

In another embodiment the set of virtual viewing parameters may be used to identify restricted information from a protected file after the file has been accessed. For example the set of virtual viewing parameters may be identifiers contained within a file for identifying unrestricted information. The virtual viewing parameters may include for example a variable a string of text or other identifier encoded into a protected file. Once the protected file has been accessed a callback function may filter the restricted information from the protected file by referencing the virtual viewing parameters.

Turning now to a diagram of components of a computing device for use in controlling access to the protected file is depicted in accordance with an illustrative embodiment. Computing device is a computing device such as server and client in .

Computing device is operable by user to access file . File is a protected file stored in HDD . HDD is a storage device such as HDD in . Although HDD is depicted as a component of computing device in other embodiments HDD may be a network storage device such as storage in .

Computing device is executing operating system which includes partitions and . Partitions and are managed partitions of computing device . In this example partitions and have authorization to view computer files stored in a common location such as file stored in HDD . A common location is a component or device for storing information and data that is accessible by the various partitions of a computing device. Thus because both partitions and have access to the files stored within HDD HDD is a common location. In other embodiments a common location may be for example a shared memory location a removable storage device a networked storage device or any other device capable of storing information accessible by the partitions of computing device .

However partitions and have varying levels of authorization so that each partition has the ability to view different portions of file . For example file may be a file storing account information for the various users of computing device . If partitions and are each assigned to individual users then each partition would have authorization to view only those portions of file corresponding to the account information of the user of the partition.

Although in this example operating system is the AIX operating system offered by IBM in alternate embodiments operating system may be an operating system including without limitation Solaris HP UX Linux and VMWare . Solaris is a registered trademark of Sun Microsystems Inc. HP UX is a registered trademark of Hewlett Packard Co. Linux is a registered trademark of Linus Torvalds. VMWare is a registered trademark of VMWare Inc.

To access file from partition user causes application to generate a request for file . Application is a software application such as for example a text editor an account manager a device manager or any other application capable of execution in computing device . In this illustrative example application is executing in partition . However in alternate embodiments application may be executing in the administrative partition of computing device .

In this example the request generated by application is system call . System call is a system call for requesting service from operating system . System call may be for example an open a read a seek or a tell system call for accessing file . In the illustrative example in system call requests operating system kernel to retrieve file .

System call includes a set of file viewing parameters usable by operating system kernel to identify the user requested file. In this example the user requested file is file . In addition the set of file viewing parameters may indicate that user requests access to file in its entirety or that user requests access to only a portion of file . In one embodiment the set of file viewing parameters includes a set of file offset values. The set of file offset values correspond to information of file .

For example to illustrate the use of a file offset value for requesting data from a file consider a read system call. A simplified read system call generally takes the following form read filehandle buffername nbyte . Filehandle is a reference to the internal control structure of an open file. Buffername is a reference to the buffer into which data is read and nbyte is a number of bytes that the read system call will read into buffername. Thus the above referenced read system call reads nbyte number of bytes from the file represented by filehandle into buffername. More specifically the read system call starts reading a portion of a file at a specified starting location and continues reading until the specified number of bytes has been read. After each byte is read a file offset value is incremented. Thus by providing a starting location within a file and a specific file offset value a user can generate a request for specific portions of a file.

If the set of file viewing parameters is used to retrieve file then user may receive restricted information contained within file . Thus the set of file viewing parameters is converted to a set of virtual viewing parameters. Virtual viewing parameters are parameters that identify the unrestricted information within file . The virtual viewing parameters are usable to filter the restricted information from file .

In this example the callback function converts the set of file viewing parameters defined in system call to a set of virtual viewing parameters. Callback function is an executable code module that implements API . API is an application programming interface created by an operating system developer that defines the functionality of callback function . For example API may specify that callback function should convert a set of file viewing parameters to a set of virtual viewing parameters. In particular API may specify the format of the file viewing parameters receivable by callback function and the manner in which callback function returns virtual offset values.

In one embodiment API dictates that callback function converts a set of file viewing parameters received in system call to a set of virtual viewing parameters. In this example callback function implements this conversion by utilizing offset map . In this example offset map is a translation table mapping file viewing parameters to virtual viewing parameters. Although in this example offset map is a table in other embodiments offset map may be a database registry or other similar structure capable of facilitating or enabling the conversion of file offset values to virtual offset values. More detail of this mapping is provided in below.

Depending upon the particular implementation callback function may filter the restricted information of file either before file is retrieved from HDD or after file has been retrieved. For example callback function may determine that offset map contains an identification system that would permit callback function to identify the unrestricted information of file before retrieval from HDD . In this example offset map may contain a list identifying the restricted information and unrestricted information. Consequently once callback function receives system call containing a set of file viewing parameters callback function may use offset map to filter out from file the restricted information. A more detailed description of offset map is provided in .

In an alternate embodiment callback function may implement another method or algorithm for identifying and filtering restricted information from file . For example the restricted information within file may be identified in file by a designated pattern of binary values a variable a string of text or other identifier encoded into a protected file. The identifiers may be defined in offset map and may function as tags to identify restricted information from unrestricted information. In this embodiment callback function may filter the restricted information from file after file has been retrieved from HDD .

Operating system kernel receives system call . In response operating system kernel identifies the callback function associated with the requested file. In this example callback function is associated with file the requested file. Furthermore in this example operating system kernel identifies callback function by referencing an inode structure associated with file . In this example inode is the inode associated with file .

Inode is one or more data structures that store basic information about file system objects such as file . The basic information stored in inode may include fields commonly found in inodes of existing computing systems. Inode may include for example file name and file size . File name is a field of inode that specifies the name of its associated file. File size is a field of inode that indicates the size of file .

In this illustrative example in inode is modified to include file status and callback function identifier . File status is a field of inode for indicating whether the associated file file has a protected status. A protected status is a designation of a file indicating that the file contains restricted information. The protected status of file may be designated by any method including for example a string of text a flag a character or symbol. For example the protected status of file may be indicated by the word protected. In addition the existence of a flag in file status may designate a protected status of file .

File status may also include relevant policy based information for controlling access to a common file. For example file status may also include information specifying the identity of those partitions of computing device having authorization to access file . File status may specify a policy indicating that a user of partition may access file but not a user of partition . Thus a user of an unauthorized partition will be denied access to file if a rule within file status prevents retrieval of the requested file by a requesting partition.

Callback function identifier is a field of inode that stores information for identifying the callback function associated with the requested file. In this example callback function identifier identifies callback function that is associated with file . Callback function identifier may identify the callback function associated with the requested file by storing a name of the callback function a memory location of the callback function or any other identifier.

Inode is stored in file system . File system is a system for the storage hierarchical organization manipulation navigation access and retrieval of computer files and data.

Once callback function returns the set of virtual offset values operating system kernel generates an input output request for the file using the virtual offset values. The input output request is passed to input output controller . Input output controller retrieves from HDD the requested portions of file corresponding to the set of virtual viewing parameters. Input output controller is a device driver for providing an interface between operating system kernel and HDD . In this example input output controller receives an input output request from operating system kernel retrieving files stored in HDD .

After operating system kernel receives from input output controller the requested information operating system kernel provides the requested information to application in the form of secured file view . Secured file view is a file generated from the unrestricted information of file requested by user . Application presents secured file view to user .

Thus as described above user operating computing device may request access to file a protected file. Restricted information of file is filtered out from file to create secured file view . In this embodiment callback function performs the requisite filtering of file . Thereafter secured file view is presented to user . Secured file view is generated from information stored in file a protected file stored in a shared location that is accessible by all partitions within computing device . Further secured file view is only viewable by a user of an authorized partition. In user utilizing partition receives secured file view . Another user operating partition is incapable of viewing secured file view . In contrast a user of partition would receive a different secured file view that may contain different information.

In this illustrative example in a single inode inode was associated with a single callback function callback function to simply illustrate the interaction of the components of computing device . However in alternate embodiments file system may contain multiple inodes. Further more than one inode may identify the same callback function. In addition callback function may also be a library of callback functions storing multiple callback functions.

Although in this illustrative example callback function is an executable code module residing in an administrative partition callback function may be stored in a managed partition inserted as code within operating system kernel or stored in a local storage device such as HDD . Further callback function may also be stored in a remote network storage device such as storage in . Similarly in other embodiments offset map may also be stored in a local storage device or a remote network storage device.

Importantly access to offset map and callback function must be restricted when stored in locations of computing device that may be easily accessed by user . For example security measures should be implemented if offset map and callback function are stored in user space or in HDD . Appropriate security measures should be implemented to prevent a user such as user of partition from discovering that a requested file contains protected information.

Turning now to an exemplary offset map for use in forming a set of virtual viewing parameters is depicted in accordance with an illustrative embodiment. Offset map is an offset map such as offset map in .

Offset map is populated with a set of file viewing parameters and a corresponding set of virtual viewing parameters. In this illustrative example the set of file viewing parameters is a set of file offset values stored in file offset field . Similarly the set of virtual viewing parameters is a set of virtual offset values corresponding to the set of file offset values. The set of virtual viewing parameters are stored in virtual offset field .

File offset field and virtual offset field are fields containing file offset values and virtual offset values respectively. The set of file offset values contained in file offset field are the offset values corresponding to actual positions within a requested file such as file in . Because file is a protected file the set of file offset values necessarily references restricted information. Consequently satisfying a system call using the file offset values may result in the return of restricted information. Thus system calls are carried out using virtual offset values.

The virtual offset values stored in virtual offset field are offset values corresponding to positions of the file referencing unrestricted information. Each virtual offset value corresponds to a file offset value. Thus a system call specifying a file offset value may be replaced with the corresponding virtual offset value. By converting file offset values of a system call to virtual offset values only unrestricted information will be provided in response to system calls requesting restricted information.

In offset map row the file offset value 0 zero corresponds to the virtual offset value 0 zero . Likewise in offset map row file offset value 100 corresponds to the virtual offset value 200. In offset map row file offset value 300 corresponds to the virtual offset value 550. Finally in offset map row file offset value 600 has no corresponding virtual offset value. A file offset value may not have a corresponding virtual offset value if for example the protected file has no remaining unrestricted information corresponding to the remaining offset values.

For example because the set of file offset values in the range of 0 99 correspond to the set of virtual offset values having the same range then in this example file offset values 0 99 contain unrestricted information. Consequently if a callback function receives a system call identifying for retrieval any information within file offset range of 0 99 the callback function would return a virtual offset value corresponding to the requested file offset value.

Turning now to offset map row if the callback function receives a system call requesting access to information within file offset range 100 199 then the callback function will return a corresponding virtual offset value in the range 200 299 as depicted in offset map row . For example if the system call requests access to information represented by file offset value 100 105 then the callback function returns virtual offset values of 200 205. This result may occur because the information identified by file offset values 100 199 is deemed restricted. Likewise the information identified by virtual offset values 200 299 may be deemed unrestricted. Therefore by returning one or more virtual offset values corresponding to a file offset value only unrestricted information will be returned.

In some instances a system call may specify a set of file offset values that may not have a corresponding virtual offset value. This result may occur when no additional unrestricted information remains in file . For example in offset map row file offset value 600 lacks a corresponding virtual offset value. Consequently a callback function receiving a file offset value of 600 may return an error. In an illustrative embodiment the nature of this error would be identical to an error received when an attempt is made to read outside the valid range of a normal file not implementing an offset map for converting file offset values to virtual offset values.

In sum the file offset value is converted to a virtual offset value by a callback function such as callback function in . In the depicted embodiment the callback function requires the use of offset map to complete this conversion. In particular once a callback function receives a call specifying a set of file offset values the callback function locates the file offset value in offset map and returns the corresponding virtual offset value. The virtual offset value may then be used to create a secured file view of a requested file.

Turning now to a flowchart of a process for filtering restricted information from a protected file in accordance with an illustrative embodiment. In this illustrative embodiment of the process may be performed by a software component such as operating system kernel in .

The process begins by receiving a request for a file step . The request may be a system call such as system call in .

Thereafter the process makes the determination as to whether the file is protected step . In one illustrative embodiment the process may make the determination that the requested file is protected by referencing an inode associated with the requested file. In particular the process may reference a field of the inode designating the status requested file. The referenced field may be a file status field such as file status field in . Of course the determination may be made using other mechanisms depending on the implementation.

If the process makes the determination that the file is not protected then the process generates an I O request for the file step . As used herein retrieval of the file can mean retrieving the entire file or a requested portion of the file.

The process receives the requested file step and makes a determination as to whether the received file needs to be filtered step . If the file is an unprotected file then the file does not need to be filtered. Consequently the process returns the file to the requesting application step . The process terminates thereafter.

Returning now to step if the process makes the determination that the file is protected the process makes the subsequent determination as to whether the restricted information of the protected file can be filtered before the file is retrieved step .

If the process makes the determination that the restricted information of the protected file can be filtered before retrieving the file the process identifies a callback function associated with the file step . The process may identify the callback function associated with the requested file by referencing an inode associated with the requested file. In particular the process may reference a field of the inode identifying the associated callback function. The referenced field may be a callback function identifier field such as callback function identifier in .

Thereafter the process calls the callback function step and determines whether the requested file has been retrieved step . If the process makes the determination that the requested file has not yet been retrieved then the process continues to step . Here the requested file was filtered prior to retrieval and as a result the requested file has not yet been retrieved.

The process generates an I O request for the file step receives the file step and makes the determination as to whether the file needs to be filtered step . Because the file was filtered in step by the callback function the process makes the determination that the file does not need to be filtered again and proceeds to step .

Returning now to step if the process makes the determination that the restricted information of the protected file cannot be filtered prior to retrieving the file then the process generates an I O request for the file step receives the requested file step and makes the determination as to whether the file needs to be filtered step . Because the file has not yet been filtered the process makes the determination that the file needs to be filtered. Consequently the process identifies the callback function associated with the file step calls the callback function and makes the determination as to whether the file has been retrieved step . Because the file has already been retrieved immediately prior to filtering the process continues to step .

Turning now to a flowchart of a representative process for converting a set of file viewing parameters to a set of virtual viewing parameters is depicted in accordance with an illustrative embodiment. In this illustrative embodiment in the process may be performed by a software component such as callback function in .

The process begins by receiving a call having a set of file access parameters step . In one embodiment the set of file access parameters is a set of file offset values.

The process then loads an offset map into memory step . Thereafter the process identifies a file access parameter from the set of file access parameters step .

Next the process locates the file access parameter in the offset map step and returns a virtual access parameter associated with the file access parameter step . The virtual access parameter may be for example a virtual offset value.

Subsequently the process makes the determination as to whether there are additional file access parameters in the set of file access parameters step . If the process makes the determination that there are no additional file access parameters in the set of file access parameters the process terminates thereafter. However if the process makes the determination that there exist additional file access parameters in the set of file access parameters then the process returns to step .

The flowcharts and block diagrams in the different depicted embodiments illustrate the architecture functionality and operation of some possible implementations of methods apparatus and computer program products. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified function or functions. In some alternative implementations the function or functions noted in the block may occur out of the order noted in the figures. For example in some cases two blocks shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

The illustrative embodiments described herein provide a computer implemented method apparatus and computer program product for creating secured file views of a protected file. The process receives a request to access the file wherein the file is stored in a common location and wherein the request includes a set of file viewing parameters. The process identifies a callback function associated with the file and calls the callback function with the set of file viewing parameters to form a set of virtual viewing parameters. Thereafter the process generates a secured file view of the file using the virtual viewing parameters wherein the secured file view is viewable by a user of an authorized partition.

Using the methods and apparatus disclosed herein a user s access to a protected file from a managed partition may be controlled. This method of access control prevents a user from realizing that any information has been withheld. Consequently greater security is achieved because the user has no incentive to attempt to investigate the existence of withheld information. However even if the user wanted to search for restricted information within the protected file the user would be unable to access that information. For example a user generated seek or read system call for restricted data would yield only unrestricted information or an error message.

Furthermore this solution obviates the need for creating unnecessary copies of a protected file thereby preserving system resources. Additionally this solution prevents file drifting that results when multiple versions of a single file are created and modified.

In addition because the callback functions may be stored in a callback function library this solution is extensible and allows for an unlimited number of mapping configurations. The different mapping configurations may be based on any number of factors such as for example the identity of the partition from which a file access request is generated the identity of the user who generated the file access request or the particular content of the file itself.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

