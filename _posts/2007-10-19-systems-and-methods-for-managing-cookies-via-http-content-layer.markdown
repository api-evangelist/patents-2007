---

title: Systems and methods for managing cookies via HTTP content layer
abstract: The cookie management system and methods of the present solution address issues with rewriting cookie headers by handling cookies in the content layer of HTTP instead of the HTTP transaction layer. The present solution maintains cookie information for a browser via an intermediary and installs the correct cookie parameters in the browser via the HTTP content layer. Instead of using the headers of the HTTP transaction layer which may cause issues due to rewriting, the present solution manages the cookies outside of this layer. This avoids the browser managing the cookies incorrectly. Set cookies headers served from a server in response to client HTTP requests are removed by the intermediary. Cookie information from the headers are stored in a cookie jar on the intermediary. The intermediary delivers instructions and scripts via the content layer of the HTTP response to set the cookie in the browser. The scripts detect browser changes to the cookie and communicates the changes to the intermediary to update the cookie jar. With the present solution, the domain and path names of a cookie are set correctly on the browser when delivering content via a reverse proxy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925694&OS=07925694&RS=07925694
owner: Citrix Systems, Inc.
number: 07925694
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20071019
---
The present application generally relates to data communication networks. In particular the present invention relates to systems and methods for managing cookies via an intermediary for a browser outside of the HTTP transaction layer.

A reverse proxy is a forwarding topology where the proxy is on behalf of a back end HTTP server. A reverse proxy is installed within the neighborhood of one or more servers. Typically reverse proxies are utilized in front of web servers and operate as an application proxy for servers using HTTP. In some cases a reverse proxy may rewrite content delivered from the web server to the client. For example a reverse proxy may rewrite a URL of a web page served to a client. Some of the pages served by an HTTP server may include a set cookie header in the HTTP transaction to set a cookie for the client. In rewriting content the reverse proxy may rewrite the set cookie header to have a browser accept and manage the cookie. A reverse proxy may disregard the path and domain values of the set cookie header in rewriting the cookie. In another case the reverse proxy may re write the cookies to encode the path and domain values into an element of the set cookie header. These re written set cookie headers may lead to security leaks and data corruption.

The cookie management systems and methods of the present solution address issues with rewriting cookie headers by handling cookies in the content layer of HTTP instead of the HTTP transaction layer. The present solution maintains cookie information for a browser via an intermediary and installs the correct cookie parameters in the browser via the HTTP content layer. Instead of using the headers of the HTTP transaction layer which may cause issues due to rewriting the present solution manages the cookies outside of this layer. This avoids the browser managing the cookies incorrectly. Set cookie headers served from a server in response to client HTTP requests are removed by the intermediary. Cookie information from the headers may be stored in a cookie jar on the intermediary. This cookie jar may include configured cookie information. The intermediary delivers instructions and scripts via the content layer of the HTTP response to set the cookie in the browser based on the cookie information stored in the cookie jar. The script detects browser changes to the cookie and communicates the changes to the intermediary to update the cookie jar. With the present solution the domain and path names of a cookie are set correctly on the browser when delivering content via a reverse proxy.

In some embodiments the intermediary may consume many or most of the set cookie headers or cookies served from the server. The intermediary may use configuration information to determine which cookies should or should not be present or made available to the client and the type and content of the cookie to be set on the client if any. Based on the configuration and functionality of the intermediary the present solution may use the content layer of an HTTP request response to establish and maintain the cookies on the client. Furthermore the intermediary may install scripts via the content layer to detect client side cookie activity such as establishing and changing of cookies by any client side element. In addition to supporting the configuration of the intermediary the present solution maintains cookies for these client side elements that may be using cookies for communications or for storing or transmitting state to a server.

In one aspect the present invention is related to a method for managing browser cookies by an intermediary between a client and server via content of a Hypertext Transfer Protocol HTTP message. The method includes receiving by an intermediary a response of the server to a request of the client. The response may include a header and a message body. The header may include cookie information specifying a domain and a path attribute values of a cookie. The method also includes removing the cookie information from the header of the response and storing the cookie information in a storage element. The method further includes modifying by the intermediary the message body of the response to include script instructions for execution by a browser of the client to set a value of the domain and the path of the cookie based on the cookie information stored in the storage element and to include a script for execution by the browser to detect a change to the cookie by the browser. The intermediary forwards the modified response to the client.

In some embodiments the method includes modifying by the intermediary the message body to identify a Uniform Resource Locator of the script that detects the change to the cookie. The Uniform Resource Locator may identify a location in storage of the intermediary. In another embodiment the method includes inserting by the intermediary in the message body of the response instructions of the script to detect the change to the cookie. The intermediary may receive a message to update cookie information in the intermediary based on the script detecting the change to the cookie. In some embodiments of the method the intermediary modifies the message body of the response to include one or more scripts to detect an event of the browser to add delete or modify the cookie. The intermediary may modify the message body of the response to include one or more scripts to remove the cookie upon detection of an unload event of the browser.

In response to the message the intermediary may make the change to the cookie information stored in the storage element. In another embodiment the method includes the step of receiving by the intermediary a request from the browser including a second cookie having encoded values representing changes to the cookie and in response to receiving the second cookie updating the cookie information in the storage element based on the second cookie. In some embodiments the intermediary provides a virtual private network connection between the client and the server and rewrites a Uniform Resource Locator in the modified response to translate the Uniform Resource Locator between a first network of the client and a second network of the server. The intermediary may rewrite the domain and the path of the cookie information in the modified response to translate between the first network of the client and the second network of the server. In another embodiment the intermediary receives from the browser a second request modifies the header of the request to include cookie information stored in the storage element and forwards the modified request to the server.

In another aspect the present invention is related to a method for managing cookies by a script for a browser via content of an Hypertext Transfer Protocol HTTP message. The method includes a step of receiving by a browser of a client a response from a server to a request of the client. The response includes a message body and a header. The header may exclude cookie information specifying a domain and a path. The message body of the response may include script instructions to set a value of the domain and the path of a cookie. The message body may also include a script to detect a change to the cookie by the browser. Upon loading of the body message of the response the browser may execute the script instructions to set the domain and the path of the cookie. The browser may also execute the script to detect the change to the cookie by the browser. The script may set one or more values of a second cookie to encode the change to the cookie. The browser may transmit the second cookie to the intermediary. In response to the detection the script may transmit to an intermediary a message communicating the detected change of the cookie to store via the intermediary.

In some embodiments the script manages the cookie in the context of the browser transparently to the browser. The script may establish or manage the cookie external to a transaction layer or a header layer of HTTP. In one embodiment the browser receives the response from the server via the intermediary. The intermediary may remove cookie information from the header and modify the message body of the response to include the script instructions and the script.

In one embodiment the script executes in response to a browser event. The script may detect an add delete or modification to the cookie. The script may remove the cookie from the browser in response to an unload event. The browser may obtain via the script instructions a copy of the script from the intermediary.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the servers may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm may be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office. In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server.

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliances is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm .

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and or form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and or form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. In yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via streaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiment the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and or form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiment the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operates under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of UNIX operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element comprises a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor . The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol.

The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to an embodiment of a cookie management system is depicted. In this embodiment an intermediary such as an appliance or client agent may manage cookies for a browser using the content or body of an HTTP response instead of the set cookie header or transaction layer. The cookie management system of maintains cookie information for a browser via an intermediary and provides the correct cookie parameters in the browser via the HTTP content layer. Set cookie headers served from a server in response to client HTTP requests are removed by the intermediary. A cookie jar of the intermediary may store configured cookies to be used by the intermediary for the clients such as in accordance with a policy. In some cases cookie information from the removed headers may be stored in a cookie jar on the intermediary. The intermediary delivers instructions and scripts via the content layer of the HTTP response to set the cookie in the browser based on the cookie information stored in the intermediary. The scripts detect browser changes to the cookie and communicate the changes to the intermediary to update the cookie jar.

In brief overview of the system of a client may include a browser having a scripting engine. The client via the browser may request content from a server such as an HTTP server. The request may traverse an appliance acting as a proxy or intermediary between the client and the server. The server may communicate a response to the client request. The response may include a header portion and a message body portion. The server may set one or more cookies via the header of the HTTP transaction such as using the set cookie header . The set cookie header may include cookie information such as name value pairs and domain and path names. The appliance receives the response and removes the set cookie header from the response . The appliance may store the cookie information in a storage referred to as a cookie jar.

The engine of the appliance inserts script instructions and scripts to form a modified response forwarded to the client . The script instructions set the cookie in the browser in accordance with configured cookies or cookie information in the cookie jar . The script provides or identifies a script for detecting changes to the cookie and reporting the changes to the appliance . The browser receives the response and executes the content of the body message of the response . This sets the cookie in the browser in accordance with the maintained or configured cookie information of the cookie jar . The browser loads the scripts which execute upon one or more events that may change the information of the cookie. In response to detecting such changes the scripts may transmit the changes to the appliance for updating the cookie jar .

The client may include any embodiments of the client agent previously described in conjunction with . The client may include any type and form of user agent. A user agent may be a browser editor spider web traversing robots or any other end user tool or program. The client may include any type and form of browser. In one embodiment the browser is any version of Internet Explorer manufactured by Microsoft Corporation of Redmond Wash. In another embodiment the browser is any version of the Netscape browser manufactured by the Netscape Communications Corporation. In other embodiments the browser is any version of the open source browser referred to as Firefox and provided by Mozilla Foundation of California and found at www.mozilla.com. In yet another embodiment the browser is any version of the browser referred to as Opera manufactured by Opera Software ASA of Oslo Norway. In some embodiments the client executes or includes any type and form of application or program for displaying web pages web content or HTTP content.

In one embodiment the client may execute a remote display client such as an ICA client manufactured by Citrix Systems Inc or a Remote Desktop Protocol manufactured by the Microsoft Corporation. In these embodiments a server may execute the browser on behalf of the client and display output from the browser on the client via a remote display protocol such as ICA or RDP to a remote display client agent . The client via the browser an application or remote desktop client may display one or more pages such as any web or HTTP page or content served from a server . The page or pages may include or more objects. The page or pages may identify one or more objects. For example a page may identify an object via a URL or hyperlink.

The browser may include any type and form of scripting engine which may execute any type and form of scripts. The scripting engine may support and execute any implementation dialect or version of the ECMAScript standardized by Ecma International in the ECMA 262 specification. In one embodiment the scripting engine supports and executes Java Script. In another embodiment the scripting engine supports and executes Microsoft s implementation of the ECMAscript standard referred to as Jscript. In one embodiment the scripting engine operates with Jscript .Net. In some embodiments the scripting engine supports and executes VBscript.

The appliance may include any embodiments of the packet processing engine previously described in connection with . The engine may process packets communicated between a client and a server. The engine may receive requests from a client modify the requests and forward the modified requests to a server. The engine may receive responses from a server modify the responses and forward the modified responses to the client. In some embodiments the engine is HTTP aware and understands how to access read HTTP transactions and modify the HTTP transaction in accordance with the policies design and construction of the appliance . In one embodiment the engine is constructed designed or adapted to perform any of the cookie management operations or techniques described herein.

The engine may access one or more scripts stored in or accessible by the appliance . The scripts may be stored as data within the engine such as via objects or data structures. In some cases the scripts are stored in one or more memory elements. In other cases the scripts are stored to disk. In one embodiment the scripts are accessible via the network from another computing device such as a server . In some embodiments the engine accesses the scripts via disk or the network and loads the scripts into memory. In some embodiments the engine requests the script from a server.

The appliance may include any type and form of storage element for storing or providing storage for cookie information. This storage element may be referred to as the cookie jar as a plurality of cookies from one or more servers for one or more clients may be stored to this storage element. In some embodiments the storage element may comprise memory such as a data structure or object. In other embodiments the storage elements may include one or more files or a database. The scripts may include contents of one or more scripts such as the executable instructions. The script may include URLs or locations to other scripts or portions of scripts such as functions.

The appliance and or engine may store cookie information into the cookie jar in any arrangement layout format relationship or combination. In some embodiments the engine stores cookie information in the cookie jar based on type of cookie. In other embodiment the engine stores cookie information in the cookie jar in association with a service or server. In another embodiment the engine stores cookie information in the cookie jar in association with a type of service appliance or server. In one embodiment the engine stores cookie information in the cookie jar in association with a user or group of users. In yet another embodiments the engine stores cookie information in the cookie jar in association with a URL. The engine may store cookie information in the cookie jar in associate with a domain name a host name or other network identifier such as an IP address. In one embodiment the engine stores cookie information in the cookie jar based on the cookie header or any portion thereof.

The engine may use any type of indexing key or other relationship scheme to query or find any cookie information in the cookie jar . In some embodiments the engine may encode cookie information obtained from a response in any manner to store in the cookie jar . The engine may parse any information from a header to obtain name value pairs of the cookie information . In other embodiments the engine may perform any type and form of hash function on the cookie information or any portion thereof for storage and retrieval from the cookie jar . In one embodiment the engine may store the cookie information encoded or otherwise in a cache. In some embodiments the engine uses the cookie jar as a cache or as a compression history. In another embodiment the engine stores compressed cookie information in the cookie jar .

The cookie jar may include any type and form of configured cookies to be used for a client. For example an administrator of the appliance may configure one or more cookies to be used by a user or a client. In some cases the administrator configures cookie information in the cookie jar to provide a cookie for a predetermined application. In other cases the administrator configures cookie information in the cookie jar to provide a cookie for a predetermined group of users. In one case the administrator configures cookie information in the cookie jar to provide a cookie for users of an SSL VPN connection. In various embodiments the administrator configures cookie information in the cookie jar to provide cookies to clients instead of using cookie information from the server. For example the administrator may configure cookies in the cookie jar to replace or use instead of any server provided cookies.

Still referring to the responses depicts a transaction layer and a content layer of an HTTP transaction. In an embodiment of HTTP a request and or response may include a header and a message body . The header portion of the response may be directed to transactional information and directives such as caching cookie setting language character encoding allowed methods authorization etc. The message body or content layer of the HTTP response includes the message body or body of a request and or response is used to carry the entity body associated with the request or response. The server may serve up content such as web pages URLs file or other requested resource. An HTTP message may have a body of data sent after the header lines. In a response the body is where the requested resource is returned to the client or perhaps explanatory text if there s an error. In a request the body is where user entered data or uploaded files may be sent to the server.

A server or a client such as a browser may have rules for handling header information at the transaction layer. For example the server and the client may manage state and state information using any cookie and set cookie header . Upon receiving an HTTP response a browser may keep track of state information that arrives via the set cookie header provided by a server. If the cookie set by the header does not follow predetermined cookie rules the browser may reject any cookies or not store and or keep track of cookie information. For example the browser ignores any attribute value pairs of the set cookie header the browser does not recognize. A browser may have security or other cookie settings to prevent possible security or privacy violations and may reject cookies set via the set cookie header that does not meet these settings. In some cases the browser has rules regarding cookie management via headers directed towards limiting the set of servers for which a cookie is valid. The rules may reject or accept cookies via the cookie header based on the values of the path domain and port attributes and or the request URI request host and request port.

Some example of browser rules for rejecting or accepting cookies via the transaction layer or headers of an HTTP transaction include 2 rejecting the cookie via the set cookie header if the version attribute is missing 2 the value for the path attribute is not a prefix of the request URI 3 the value for the domain attribute contains no embedded dots and the value is not .local. 4 the effective host name that derives from the request host does not domain match the domain attribute 5 the request host is a host domain name HDN not IP address and has the form HD where D is the value of the domain attribute and H is a string that contains one or more dots and 6 the port attribute has a list of ports and the request port was not in the list. The browser may also include limits on the number of cookies for a server.

An intermediary such as the appliance or a client agent may remove the set cookie header of a response and forward the modified response to the requester such as the client . In some embodiments by removing the set cookie header from the transaction layer the cookie and state management rules of the browser user agent or client for the transaction layer are bypassed and or avoided. If the response received by the requester or client does not have any set cookie headers in the header portion the requester such as the browser may not perform any cookie or state management based on the response.

In one embodiment the intermediary obtains stores and maintains the cookie information identified and or removed from the header of the response to the cookie jar . The intermediary may maintain this cookie information in the cookie jar on behalf of or for any user agent browser or client. The intermediary may maintain this cookie information outside of the transaction layer of the HTTP response. Furthermore the intermediary may set or otherwise provide this cookie information to the user agent browser or client outside or external to headers or transaction layer of a request or response. Although the server may set the cookie via the header the intermediary removes the cookie header from the response and sets and manages the cookie external to the header . For example in some embodiments the intermediary sets and manages the cookie via the message body or content layer of the request response.

In some embodiments the intermediary does not store or maintain the cookie information identified and or removed from the header of the response . For example the intermediary may remove and ignore cookies served from the server and manage and set client side cookies based on configuration and policy of the intermediary. The intermediary may remove the set cookie header s from the response to prevent cookie management at the HTTP transaction layer. The intermediary may desire to use the cookie information configured or maintained by the intermediary such as in the cookie jar instead of the information set by the server via the set cookie header. In one embodiment the intermediary may determine not to provide a cookie or a set a cookie on the client even if the server provided a set cookie header. For example the intermediary may not provide or set a client side cookie for a Microsoft Outlook Web Access application. In another embodiment the intermediary may determine to provide an intermediary configured or predetermined cookie instead of the server cookie provided via the set cookie header. For example the intermediary may use intermediary configured cookie information or profiles to set the cookie on the client side for a Web Interface application of Citrix Systems Inc. The intermediary may determine whether or not to set the cookie on the client based on a policy of a policy engine. The intermediary may also determine which cookie information to set on the client based on a policy of a policy engine.

As depicted in the embodiment of the appliance as an intermediary in the appliance sets and manages the cookie via the message body portion of the response . The engine may insert modify or otherwise include in body of the response one or more scripts instructions to set the cookie in the browser via one or more APIs. The script instructions may include any type and form of scripts programming language already discussed herein. The script instructions may set any one or more of the attribute value pairs for a cookie. The script instructions may set the values of the cookie in accordance with the cookie information removed from the header and stored in the cookie jar . By way of example and in no manner limiting the scripting instructions may use the document.cookie property and API such as via the following instructions 

The script instructions may set the domain path and any port related attributes of the cookie. The cookie inserted on the client browser via the script instructions may be set correctly to host domain and content path requested. In some embodiments the script instructions identify one or more scripts available on the intermediary or via the network to set the attribute values of the cookie.

The intermediary may determine the names and values for these instructions in accordance with any policies such as content rewriting policies or rules such as content rewriting rules. For example the intermediary may rewrite content for traversing between a first network e.g. public network and a second network e.g. private network of an SSL VPN connection between the client and server. Any portion of the cookie may be set via the instructions to set values and information to support any of the functionality of the appliance and or client agent described herein such as those embodiments described in connection with or .

The appliance may also provide via the body of the response one or more scripts to manage the cookies within the context of the browser or user agent of the client. The engine may insert modify or otherwise include in body of the response one or more scripts to manage any changes to the cookie. In one embodiment the script identifies or directs the browser to obtain and load a script from a location such as storage . For example the script may identify the source of the scripts via a URL. Responsive to one or more events of the browser or user agent the script may determine if there are any changes to the cookie set via the instructions such as an addition deletion or modification to the cookie. For example the script may trigger any property change events that change a cookie. In another example the script may trigger on or detect any unload events. The script may delete or de establish the cookie upon an unload event. In some cases the script may trigger on or detect any document attach events. In another embodiment the script may poll the value of the cookie to determine if there are any changes to the cookie since the cookie was set via the script instructions . In these embodiments the script may execute on a predetermined frequency. In some of these embodiments the script may poll the values of the cookie to detect changes based on detection or triggering of an event. Other embodiments of the script for updating the cookie jar will be discussed below in conjunction with .

Although the script is generally described for detecting changes to the cookie made by the browser this may include any components libraries scripts controls applets or other programs and scripts loaded or managed by the browser or otherwise executed on the client. The browser may make changes to a cookie based on executing or operating any of these types and forms of executable instructions regardless if provided by an intermediary or not. When the browser is generally discussed as executing the execution may include running or operating any of these types of and forms of executable instructions in the context of the browser or external thereto. Any of these executable instructions or applications on the client side may use cookies as a communication mechanism or channel or otherwise to store or transmit state. The script may used to detect and manage any of these cookies or cookie changes from any of these client side executable instructions or applications. By doing so the present solution may continue to support these applications and executable instructions while performing any of the operations described herein.

Upon detecting or determining a change to the cookie the script may communicate these changes to the intermediary using any communication mechanism and format. In one embodiment the script transmits a message to the intermediary via a transport layer connection. In another embodiment the script transmits the message to the intermediary via an HTTP based message or transaction. In other embodiments the script submits or otherwise includes these changes via any communication of the browser or another program on the client to the server or intermediary.

In some embodiments the script encodes the changes in a cookie. In one embodiment the script creates a second cookie to specify the changes. In some embodiments the script encodes the cookie and or second cookie with any data or meta information not present in a standard HTTP cookie header. For example the script may encode information in a value of any attribute to represent the data or meta information for these changes. The script may attach the cookie having these changes to any request from the browser. The script may include the cookie having these changes in any communication from the client traversing the intermediary. The intermediary may detect this cookie and the encoded changes therein. The intermediary may update the cookie jar with the changes to the cookie.

Although the cookie management techniques are generally described in the context of HTTP requests and responses the techniques of the present solution may be used with any protocol. Furthermore although generally described in the context of an appliance as the intermediary any of the functions operations and methods of the appliance may be deployed via the client agent . For example the client agent may include the engine or any portion thereof for performing any of the operations described herein. The client agent may also include and manage the cookie jar as well as maintaining any cookie management scripts .

Referring now to an embodiment of steps of a method for providing cookie management by an intermediary via the content layer of the response is depicted. In brief overview of method at step the intermediary receives a response from the server to a request of the client. The response includes a header and a message body. The header includes a set cookie header for example setting the domain and path of the cookie. At step the intermediary removes the set cookie header from the response. The intermediary may store the cookie information from the header into a storage element such as the cookie jar . At step the intermediary modifies the message body of the response to include script instructions. The script instructions and or script set the value of the cookie via the message body based on cookie information stored in the cookie jar which may include any configured cookies. At step the intermediary modifies the message body of the response to include a script for detecting any changes to the cookie.

In further details of step the intermediary may receive any type and form of response from the server. In some embodiments the intermediary may server a response on behalf of the server such as a via a cache of the appliance. The intermediary may receive an HTTP response to an HTTP request. In another embodiment the intermediary may receive a response comprising XML or any other markup language. In one embodiment the response includes a header without a message body . In another embodiment the response includes a plurality of headers . In other embodiments the intermediary receives a response have multiple cookie headers. In various embodiments the intermediary may receive a response having headers other than a cookie related header. In one embodiment the intermediary receives a response having a cookie header and a non cookie related header. In yet another embodiment the intermediary receives a response that includes a script or script instructions. In one embodiment the intermediary receives a response that includes script instructions and or script . The intermediary may receive via the header or transaction layer of the response any type and form of cookie information. In one embodiment the intermediary receives a set of one or more attribute value pairs for the cookie. In some cases the intermediary receives values for a domain host path and or port for the cookie.

In some embodiments the intermediary consumes e.g. removes all set cookie headers served from the server. In other embodiments the intermediary consumes set cookie headers served from the server based on the type or name of the application. For example the intermediary may consume set cookie headers of a first application while leaving intact the set cookie header for a second application. In another embodiment the intermediary consumes set cookie headers served from the server based on the user. In one embodiment the intermediary consumes set cookie headers served from the server based on the user. In yet another embodiment the intermediary consumes set cookie headers served from the server based on one or more policies.

At step the intermediary identifies the cookie information in the header portion of the response . The intermediary may remove the cookie information from the response . In some embodiments the intermediary removes the one or more set cookie headers from the response. In one embodiment the intermediary removes the set cookie header entirely. In another embodiment the intermediary removes a portion of the set cookie header. In other embodiments the intermediary removes the attribute value portions of the set cookie header. In yet one embodiment the intermediary removes all headers from the response. In another embodiment the intermediary modifies the set cookie header in the response to disable the cookie or otherwise cause an error be ignored or rejected when received by the requester.

The intermediary such as via engine may store the identified information of the cookie header to the cookie storage . The intermediary may encode the cookie information in any manner and store the encoded cookie information to the storage . In some embodiments the intermediary stores the cookie information as script instructions or a portion thereof. The intermediary may store the cookie information in association with any other information known by the intermediary. In one embodiment the intermediary stores the cookie information in association with one or more of the server the client the browser and or the user. In other embodiments the intermediary does not store or maintain the removed cookie information . Instead the intermediary may use configured or default information in the cookie jar. In another embodiments the intermediary may choose not to provide any cookies to the client or the application.

At step the intermediary modifies the message body of the response to provide a modified response including instructions to set the cookie for the requester. In one embodiment the intermediary modifies the message body of the response to include instructions for setting the cookie in a context of the browser. In another embodiment the intermediary modifies the message body of the response to include instructions for setting the cookie in a context of a session. The intermediary may provide scripting instructions in the body of the response to set a cookie in accordance with the cookie information maintained by the intermediary. In one embodiment the intermediary may provide scripting instructions to set the cookie in a manner corresponding to the set cookie header received by the server. In yet another embodiment the appliance provides instructions to set the cookie in accordance with a configured cookie policy. In some embodiments the appliance provides instructions to set the cookie in accordance with any configured cookies of the appliance. In still one embodiment the appliance may not provide instructions to the client to set or establish the cookie. In another case the appliance provides instructions to the client that do not set or establish a cookie.

At step the intermediary modifies the message body of the response to provide a modified response including a script to monitor and or detect changes to the cookie provided by the appliance or otherwise to any client side cookies. The intermediary may provide a script in the response to monitor and or detect changes to a cookie in a context of the browser. In some cases the intermediary may provide a script in the response to monitor and or detect changes to a cookie in a context of a session. In one embodiment the intermediary modifies the message body to provide an instruction to load the script from an identified location. In other embodiments the intermediary includes content of one or more scripts in the modified response . In some embodiments the intermediary provides instructions via the message body for the scripting engine to load or use a script . In another embodiment the appliance provides instructions to the client agent to monitor or detect changes to the cookie.

As will be discussed in more detail below the browser of the client receives the modified response. Upon loading the message body of the response the browser executes the script instructions to set the cookie in accordance with the values in the cookie jar maintained by the intermediary. The setting of the cookie is performed via the HTTP content layer instead of the header or HTTP transaction layer. This bypasses the browser cookie management rules upon receiving a set cookie header. Upon loading the message body of the response the browser may load or execute the script for detecting and monitoring changes to the cookie.

Referring now to an embodiment of a system for client side management of cookies is depicted. In brief overview the client includes an embodiment of a client agent and a browser. The browser includes a script engine for loading or executing one or more scripts. The browser may load or may execute a script received from the intermediary such as a script delivered via a message body of a response. The script may monitor the cookie via events of the browser or via polling the cookie . The cookie may have been set or established via the content layer of a response. Upon detecting a change to the cookie the script may communicate the change to the intermediary such as the appliance . The script may communicate a message to the intermediary. In another embodiment the script may provide a cookie to indicate the changes to the cookie such as encoding the cookie with change values. The intermediary may update the cookie jar based on the changes communicated via message or cookie .

Referring now to an embodiment of steps of a method for providing cookie management from a client side perspective is depicted. In brief overview of method at step the browser of the client receives a response from a server. The response includes a message body and a header. The header may exclude cookie information such as a set cookie header. The message body of the response may include script instructions and or a script . The script may be for monitoring and detecting changes to a cookie set by the script instructions or for cookies set or established by client side programs. At step upon loading the message body of the response the browser executes the script instructions to establish the cookie . This sets the cookie in accordance with the cookie jar maintained by the intermediary. At step the browser also loads or executes the script from the response to monitor changes to cookies. At step the script detects a change to a cookie and communicates the change to the intermediary. At step the intermediary may modify requests to the server to include cookie header information in the header of the request based on values stored in the cookie jar .

In further details at step the client receives a response from the server such as the modified response described in conjunction with . In some cases the response comprises a message body and a header . In other embodiments the response comprises a message body and no header . In another case the response comprises a plurality of headers . In these embodiments one more or all of these headers may not include cookie information. In one embodiment the header of the response includes a set cookie header for a first cookie and the body of the response includes instructions to establish a second cookie in the browser. In some embodiments the intermediary removes all set cookie headers from the response forward to the client . The client may receive the script instructions and the script in the same response or different responses. In one embodiment the intermediary may not send the script if the intermediary knows or thinks the client or browser already has the script .

At step the client client agent browser or other user agent may load the body message of a response. Upon loading the body message of the response the cookie may be set on the client in accordance with the script instructions . In one embodiment the browser executes the instructions to establish the cookie. In some embodiments the cookie is established in the context of the browser. In other embodiments the cookie is established in the context of a session. The instructions may set one or more attribute value pairs of a cookie . In some embodiments the instructions set the domain path and or port attributes of the cookie in accordance with the appliance and or the cookie jar . In another embodiment the instructions are configured to set the attribute value pairs such as domain and path in accordance with any content management or content rewriting rules of the appliance . In one embodiment the instructions are configured to set the attribute value pairs in accordance with any policies of a policy engine of the appliance or a server. For example the instructions may establish a cookie for the browser based on a configured cookie or default profile of the appliance.

At step the client client agent browser or other user agent may load or execute the script . The script may be loaded or executed at any time. In one embodiment the script is loaded or executed upon receipt of the response. In another embodiment the script is loaded upon a predetermined event. In some embodiments the script is executed upon a predetermined event. In other embodiments the intermediary transmits a signal to the client such as via client agent or browser to load or execute the script. In another embodiment the browser loads the script upon startup. In one embodiment the browser loads or executes the script responsive to executing or completing the execution of script instructions . In yet another embodiment the scripting engine the client agent or the browser executes the script on a predetermined frequency.

The script may detect one or more changes to the cookie . In one embodiment the script detects the creation addition deletion or modification of any cookie. The script may detect changes to any cookie of the browser regardless if set via the technique of the intermediary or otherwise. In another embodiment the script detects a change to the cookie or any other cookie made via the browser such as via any cookie and state management functionality of the browser. In some embodiments the script is executed upon an event related to a change to a cookie or cookie management. In other embodiments the script is executed upon any type of event and checks during execution if any value or information of a cookie has changed. In another embodiment the script determines the browser added an attribute value pair of a cookie. In some embodiments the script determines the browser modified a value of an attribute value pair of a cookie. In other embodiments the script determines the browser deleted any portion of a cookie. In yet further embodiments the script monitors and determines changes for a plurality of cookies.

At step the script may communicate or cause to communicate information to the intermediary regarding changes to a cookie. In some embodiments the script may generate and transmit a message to the intermediary. The message may encode or otherwise indicate changes to a cookie such as cookie such as additions modifications or deletions. In one embodiment the script transmits the message via a transport layer connection to the intermediary. In some embodiments the script uses an application layer protocol to communicate the changes to a cookie. In another embodiment the script creates a set cookie header message and transmits this message to the intermediary via an HTTP based protocol. The script may encode the detected cookie changes in a cookie such as cookie or a second cookie . In some embodiments the browser transmits the second cookie to the intermediary with a request such as a subsequent request of the browser or client.

Upon receipt of a message such as message or cookie indicating a change to the cookie the intermediary updates the cookie jar with the changes. In some embodiments the intermediary receives multiple messages and or and updates the cookie jar one at time based on each message. In other embodiment the intermediary may update the cookie jar with the last message received if receive multiple messages within a certain time period. In another embodiment the intermediary determines the changes indicated in the message are already stored in the cookie jar . In these embodiments the intermediary may not take any further action with respect to the message. In yet another embodiment the intermediary may determine the changes are for a cookie not yet stored in the cookie jar. In response to the determination the intermediary may create and store a record in the cookie jar for the cookie represented by the changes of any of the messages and or .

At step the intermediary may modify any requests to the server to include cookie information based on the information stored in the cookie jar . In some embodiments the browser of the client transmits a request using the cookie established for the browser. In other embodiments the browser of the client transmits a request having any cookies created or changed by the browser. In other embodiments the browser transmits a request not having a cookie or a cookie header. The intermediary may intercept or otherwise receive the request . The intermediary modifies the request to include cookie header information and forwards the modified request to the server. The intermediary may modify the header of the request to include cookie information based on cookie information of the request from the client cookie information in the cookie jar policies of the intermediary configuration of the intermediary or any combination thereof.

In this manner the intermediary maintains for the server the cookie information in the header or transaction layer of the request. The intermediary may keep the content based cookie management technique transparent to the server. Furthermore the intermediary may maintain or set cookies in the content layer of HTTP for the client in accordance with any policies or functionality of the intermediary while maintaining any cookies of any client side applications for transmission to the server. Cookie management of the intermediary and the client may be handled outside of the set cookie header cookie header content of the transaction layer and managed in the message body content layer of request and responses between the client and the intermediary.

Any portion of the cookie management techniques discussed herein may be performed transparently and seamlessly to the browser and or the server. Although the script instructions and or script are executed by the browser the browser may be unaware that the management of the cookie outside of the transaction layer of HTTP is being handled via these scripts and or the intermediary. The server sends set cookie headers to the client and receives cookie headers from the client and as such may be unaware of the cookie management operations at the content layer performed by the intermediary or any of the client side scripting.

In view of the structure functions and operations of the systems and methods described herein the present solution provides a useful way for managing cookies outside of the transaction or header layer of HTTP. This provides advantages in the context of a rewriting reverse proxy such as appliance or a content rewriting agent such as the client agent or network engine . The present solution installs the correct cookies in the client browser respecting any and all cookie parameters. By correctly maintaining cookie parameters such as across an SSL VPN connection the present solution avoids compromised and corrupted cookie data leading to security leaks and application instability.

