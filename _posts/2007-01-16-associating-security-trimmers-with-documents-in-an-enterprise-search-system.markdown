---

title: Associating security trimmers with documents in an enterprise search system
abstract: Methods and computer-readable media are provided for associating security trimmers with documents in an enterprise search system. According to one method, a search index is maintained that includes one or more document identifiers corresponding to documents stored at back-end computing systems. Each document identifier in the search index is associated with one or more security trimmer implementations. When a query request is received from a user, the search index is queried to identify documents referenced by the search index that match search terms provided with the query request. For each document that matches the search terms, the associated security trimmer implementations are identified and executed to retrieve the access rights to view the document for the current user from the back-end computing system where the document is stored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979458&OS=07979458&RS=07979458
owner: Microsoft Corporation
number: 07979458
owner_city: Redmond
owner_country: US
publication_date: 20070116
---
Enterprise search systems allow content stored within an organization to be indexed searched and displayed to authorized users within the organization. In order to provide this functionality enterprise search engines typically must index and query against structured and unstructured data and documents stored by multiple independent third party enterprise software applications and systems. For instance in many cases an enterprise search system must index and query against data stored in intranets document and content management systems file servers corporate desktops business applications such as customer relationship management and business intelligence applications and other types of content stores.

In contrast to public search engines that search publicly available data and allow virtually any user to execute queries on the data such as World Wide Web Web search engines enterprise search systems generally index data for which access may be limited. For instance a document indexed by an enterprise search system may have an associated access control list ACL that includes one or more access control entries ACEs that identify the access rights a user has to the document. As a result when an enterprise search system executes a query it must ensure that the user executing the query has sufficient access rights to view each of the search results returned in response to the query.

In order to determine whether a user has sufficient access rights to view search results an enterprise search system may retrieve and store the access rights for each document at the time the document is added to the search index. At query time the enterprise search system can utilize the previously stored access rights to determine if the user executing the query has sufficient rights to view the search results. Storage of access rights for all of the documents referenced by a search index however can be cumbersome and expensive to perform and maintain.

Alternatively an enterprise search system may query the back end system at which each document in a set of search results is stored for access rights to the documents for the user at the time the query is performed. In this type of implementation the back end system provides the document at crawl time and the access rights for the document at query time. Often however the security sub systems of each back end computer system utilize application programming interfaces APIs that are disparate arcane and possibly proprietary. As a result it is generally necessary for custom program code called security trimmers to be utilized in order to invoke the different APIs provided by various back end systems for obtaining the access rights. It can be difficult however for an enterprise search system to determine the security trimmer that should be utilized with respect to each document present in a set of search results.

Methods and computer readable media are provided herein for associating security trimmers with documents in an enterprise search system. Through the implementations described herein security trimmers can be easily associated with documents identified in a search index. At query time the appropriate security trimmers can be identified and utilized to obtain the access rights for each document in a set of search results.

According to one aspect presented herein a method is provided for associating security trimmers with documents in an enterprise search system. According to one method a search index is maintained that includes one or more document identifiers corresponding to documents stored at back end computing systems. The document identifiers for instance may be uniform resource locators URLs for the documents stored at the back end computing systems.

Each document identifier in the search index is associated with one or more security trimmers. A security trimmer is program code capable of invoking an API on a back end system for determining whether a user has access rights to view a document. When a query request is received from a user the search index is queried to identify documents referenced by the search index that match search terms provided with the query request. For each document that matches the search terms the associated security trimmers are identified and executed to retrieve the access rights to view the document for the current user. The identified security trimmers may be executed simultaneously.

When the access rights to view each document are received a determination is made as to whether the current user has sufficient access rights to view each document. If the user has the appropriate access rights to view a document the document is displayed to the user in the search results. In one implementation a security trimmer resolver program performs the tasks of selecting the appropriate trimmer implementations for each document executing the security trimmer implementations and combining the results received from the trimmer implementations to determine whether the document should be shown in the search results.

In one implementation each document identifier is associated with one or more crawl rules. A crawl rule is a regular expression on a document URL. Therefore defining a crawl rule results in defining a subset of documents in a subset of back end computing systems. Each crawl rule is associated with one or more security trimmer implementations. In this manner document identifiers are associated with crawl rules which are in turn associated with one or more trimmer implementations. Each crawl rule may also be associated with a particular security trimmer resolver.

According to other implementations each crawl rule has an associated priority value. The priority value is utilized to select the appropriate crawl rule when more than one crawl rule corresponds to a document. Additionally in other embodiments opaque security data may be retrieved from the back end computing system at which a document is stored at crawl time and persisted in the search index. At query time the security data may be provided to a security trimmer implementation and transmitted to the back end system with the request for access rights to the document. The security data may then be utilized by the back end system to determine the access rights to the document.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to systems methods and computer readable media for associating security trimmers with documents identified in a search index of an enterprise search system. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

The subject matter described herein is also described as being practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network and wherein program modules may be located in both local and remote memory storage devices. It should be appreciated however that the implementations described herein may also be utilized in conjunction with stand alone computer systems and other types of computing devices. It should also be appreciated that the embodiments presented herein may be utilized with any type of local area network LAN or wide area network WAN .

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for associating security trimmers with documents will be described. In particular is a computer software architecture and network diagram illustrating one operating environment for the subject matter described herein that includes a client computer a network and one or more Web server computers A B. It should be appreciated that although only two Web server computers A B two back end systems A B and one client computer have been illustrated in any number of these computing devices may be present and utilized in the manner described herein.

As shown in the client computer and the Web server computers A B are communicatively coupled to one another through respective connections to the network . According to one implementation the network comprises the Internet. However it should be appreciated that the network may comprise a LAN WAN or other type of network suitable for connecting the client computer and the Web server computers A B. The Web server computers A B are also coupled to one or more back end systems A B. The back end systems A B are computing systems capable of storing documents in a respective content store A B. As used herein the term document means any indexable unit of data. Additional details regarding the operation of the back end systems A B are provided below.

In order to perform the document identification and indexing process the search crawlers A B are seeded with information about content stores. The search crawlers A B then retrieve documents from the content stores index the documents and store the indexed content and any associated metadata in a database called the search index . The search crawlers A B may also identify links to other documents contained in each document and follow the links to obtain and index additional documents. This process is referred to as crawling. 

During the crawl process the search crawlers A B may also obtain security data for the documents that are indexed. For instance in one implementation the access rights for each document that is indexed are retrieved and stored in the search index . For instance the search crawlers A B may obtain a list of authorized users for each document. Because the security data is typically meaningless to the Web server computers A B the security data may be referred to herein as being opaque.

According to one implementation the client computer includes a Web browser program referred to herein as a browser . The browser is operative to request receive and display information pages such as Web pages from the server computers A B. In particular the browser is operative to establish a connection with one of the Web server applications A B executing on the server computes A B. Through the connection the browser may request a Web page for executing a query of the search index . Such a query request is processed by a query processor A B executing on the Web server computer A B that fields the query request.

The query processors A B respond to user queries by identifying the documents in the search index that contain the keywords in the user query. The query processors A B also evaluate whether or not each document should be returned as a search result based upon whether the user performing the query has sufficient access rights to view each document. As will be described in greater detail below each query processor A B may dynamically query the appropriate back end system A B for access rights indicating whether the user executing the query has the appropriate access rights to view each document in the search results.

In one implementation the queries to the security APIs exposed by the back end systems A B are invoked through the use of security trimmers and a security resolver. As will be described in greater detail below with reference to each document identifier in the search index may be associated with one or more security trimmer implementations responsible for invoking an API on a back end system for determining whether a user has access rights to view the corresponding document.

Referring now to additional details regarding a software architecture including a security trimmer resolver and security trimmers provided herein will be described. As discussed briefly above a query processor may utilize a security trimmer resolver and one or more security trimmers A C to communicate with the security APIs exposed by the back end systems A C at which index documents are stored. Each security trimmer resolver is program that is operative to select which of the security trimmers A C to invoke to obtain the access rights for a particular document. The security trimmer resolver is also operative to receive the access rights from each of the security trimmers A C and to make a decision based on the rights as to whether a current user is authorized to view a document. According to implementations this determination may be made by conjunctively chaining the results of all matching trimmers. Alternatively this determination may be made by disjunctively selecting a security trimmer based on a performance heuristic or a combination of the two. The security trimmer resolver passes the results of the decision to the query processor for use in generating the search results that are actually provided to the user.

As also discussed briefly above the security trimmers A C are programs that are operative to invoke an API exposed by a back end system A C that determines whether or not to display a document in a set of search results. The security trimmers A C are programmed to interoperate with a particular type of back end system. For instance the security trimmer A may be configured to operate with an API exposed by the back end system A while the security trimmer A is configured to operate with an API exposed by the back end system B. The security trimmers A C handle all aspects of communication with the back end systems A C including authentication communication of an end user security context and the translation of a document URL into a document identifier native to the particular back end system A C.

In one implementation each of the security trimmers A C includes an associated URL queue A C respectively. Each URL queue A C may be utilized by the security trimmer resolver to queue up a multitude of document identifiers for which access rights should be retrieved. When all of the document identifiers for documents in a set of search results have been queued the security trimmer resolver may cause the security trimmers A C to be executed simultaneously. Depending upon the configuration of the security trimmer resolver a result may be provided to the query processor for a document as soon as the first of the back end systems A C responds with the requested access rights.

According to another implementation each security trimmer A C may also include a security data queue A C respectively. In this implementation security data may be retrieved from the back end systems A C at crawl time and persisted in the search index for each document. At query time the security data is retrieved and placed into the appropriate security data queue A C. When a security trimmer A is executed on a URL the security trimmer A transmits the security data in the associated security data queue A to the back end system A with the request for access rights to a document. The security data may then be utilized by the back end system A to determine the access rights to the document.

As will be described in greater detail below any document referenced in the search index may be associated with one or more security trimmers A C to determine whether or not to display the document in response to search query submitted by a user. illustrate an exemplary mechanism for associating documents referenced in the search index with the security trimmers A C.

Referring now to additional details will be provided regarding the embodiments presented herein for associating documents with security trimmers. In particular is a flow diagram showing an illustrative mechanism for associating documents identified in the search index with one or more security trimmers . is described in conjunction with which shows several data structures utilized to store data for associating documents referenced in the search index with the security trimmers.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination.

The routine begins at operation where a security trimmer implementation is defined by associating a security trimmer with a unique security trimmer identifier and configuration information for the implementation. In one implementation the security trimmer identifier comprises a unique integer. The configuration information comprises a set of name value pairs that are utilized at execution time to configure the operation of the referenced instance of a security trimmer . In this manner the same instance of a security trimmer may be registered against multiple security trimmer identifiers each behaving differently based on the configuration information associated with the security trimmer identifier . As shown in a trimmer configuration store may be utilized to store the security trimmer identifiers and the associated configuration information .

From operation the routine continues to operation where one or more crawl rules are defined for each subset of the URL space in which documents referenced in the search index are stored. Crawl rules are regular expressions on a document URL. For instance a crawl rule may be defined such as bdc SAP CUSTOMER ID to identify all documents on any server that are customers within an SAP system. In this manner wildcards or regular expressions may be utilized to define a subset of documents in a subset of back end computing systems. Each crawl rule is also assigned a unique crawl rule identifier such as an integer value.

Once the crawl rules have been defined the routine continues from operation to operation . At operation one or more security trimmer identifiers are associated with each crawl rule . A single optional trimmer resolver identifier identifying a security trimmer resolver that should be utilized with the crawl rule may also be specified. In one implementation these data items are stored in a crawl rule definition store .

In one embodiment a crawl rule priority value may also be associated with each crawl rule. The priority value may be utilized to disambiguate the crawl rules. For instance during a search crawl the search crawler may discover a document URL that matches the regular expressions specified by multiple crawl rules . In this case only the crawl rule with the highest priority value is utilized and the crawl rule identifier is stored in the search index associated with the document URL of the identified document.

As shown in the search index includes a document identifier such as the document URL for each document referenced therein. The search index may also store the security data retrieved at crawl time for the referenced document. A crawl rule identifier is also associated with the document identifier and stored in the search index at crawl time. The crawl rule identifier associates the document identifier with a crawl rule . Each crawl rule is also associated with one or more security trimmer identifiers one optional trimmer resolver identifier and a priority value . Each security trimmer identifier corresponds to a particular security trimmer implementation that may be configured uniquely utilizing the configuration information . The use of this data to select and execute the appropriate security trimmers for each document in a set of search results will be described below with respect to .

Referring now to an illustrative routine will be described that illustrates the processing operations performed by the search crawlers A B for crawling the content stores A B. The routine begins at operation where a search crawler A crawls documents in available content stores in the manner described above. During the crawl process the routine continues to operation where a determination is made as to whether a document has been found. If not the routine branches back to operation where the crawling process continues. When a document is found the routine continues from operation to operation .

At operation the search crawler A stores the URL of the located document in the search index . The routine then continues to operation where the search crawler A identifies the crawl rule that matches the location of the discovered document and that also has the highest priority value . Once the appropriate crawl rule has been identified the routine continues to operation where the crawl rule identifier of the matching crawl rule is associated with the document identifier in the search index .

From operation the routine then continues to operation where security data associated with the discovered document is also stored in the search index . As mentioned above the security data may optionally be transmitted to the back end system with the request for access rights to the document. From operation the routine returns to operation where the crawling process continues in the manner described above.

Turning now to an illustrative routine will be described that illustrates the processing operations performed by the query processor A for executing a search query on the search index . The routine begins at operation where search terms are received from a user for instance of the client computer . The routine then continues to operation where the query processor A queries the search index for documents identified therein that match the provided search terms. The routine then continues to operation where a determination is made as to whether search results were located in the search index matching the search terms. If no matching documents were located there are no search results to trim and the routine branches to operation where it ends. If search results were located the routine continues to operation .

At operation a variable identifying a current search result is set to the first returned search result. This variable is utilized to identify the current search result during iteration through all of the returned search results. From operation the routine continues to operation where the crawl rule for the current search result is identified from the data stored in the search index and described above with reference to . The routine then continues to operation where the security trimmers associated with the identified crawl rule are instantiated. If a particular security trimmer has already been instantiated it is unnecessary to re instantiate the object.

From operation the routine continues to operation where a URL queue is associated with each security trimmer and the URL of the current search result is placed into the URL queues. The routine then continues to operation where a security data queue is also associated with each security trimmer and any security data associated with the current search result is placed into each security data queue . At operation any security trimmer resolver associated with the crawl rule is instantiated.

From operation the routine continues to operation where a determination is made as to whether more search results remain to be processed. If more search results remain to be processed the routine branches to operation where the value of the current search result variable is set to the next search result. The routine then returns from operation to operation where the next search result is processed in the manner described above. If at operation the query processor determines that no additional search results remain the routine continues from operation to operation .

At operation all of the instantiated security trimmers are executed simultaneously. The security trimmers process the URLs in their associated URL queues and transmit requests for the access rights for the identified documents to the appropriate back end systems . When the security trimmers receive responses from the back end systems the results are passed to the security trimmer resolver . This occurs at operation .

At operation the security trimmer resolver determines based on the information received from each of the security trimmers whether each search result should be displayed to the current user. The results of this determination are then returned to the query processor which utilizes this information at operation to display only those search results that the current user is authorized to view. The routine then continues from operation to operation where it ends.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments presented herein will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer and may be utilized to embody the client computer the Web server computers A B or the back end systems A B.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop or server computer such as the WINDOWS XP or WINDOWS VISTA operating systems from MICROSOFT CORPORATION of Redmond Wash. Other operating systems such as the LINUX operating system or the OSX operating system from APPLE COMPUTER INC. may be utilized. It should be appreciated that although the embodiments presented herein are described in the context of a desktop or laptop client computer and a remote Web server computer many other types of computing devices and systems may be utilized to embody the various aspects presented herein.

The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a Web browser a Web server application and the other program modules described above with respect to . Other program modules may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that systems methods and computer readable media for associating documents with security trimmers are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

