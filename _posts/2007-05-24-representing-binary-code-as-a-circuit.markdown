---

title: Representing binary code as a circuit
abstract: A high level intermediate representation of a binary is generated. Circuit nodes from the high level intermediate representation are built, wherein a circuit node represents an operation in the high level intermediate representation. The circuit nodes are connecting using a flow analysis of the binary to build a circuit that represents the binary.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996798&OS=07996798&RS=07996798
owner: Microsoft Corporation
number: 07996798
owner_city: Redmond
owner_country: US
publication_date: 20070524
---
There are many representations for program analysis or verification at the source code level. However binary code also needs analysis. Binary analysis may determine the integrity of the binary and look for malicious code. Also many developers only ship binaries and do not make their source code available to others. However recipients of such binaries still may wish to verify the integrity of the binary code.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the invention are directed to representing binary code as a circuit. In one example a binary is extracted to an Intermediate Representation IR level and then to a High level Intermediate Representation HIR . A circuit representation of the binary may then be built from the HIR.

Many of the attendant features will be more readily appreciated as the same become better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present examples may be constructed or utilized. The description sets forth the functions of the examples and the sequence of steps for constructing and operating the examples. However the same or equivalent functions and sequences may be accomplished by different examples.

Binary analysis tool receives a binary for analysis. A binary includes machine executable code. In one embodiment binary is compatible with x86 or x64 processor architectures. Binary analysis tool lifts binary to an Intermediate Representation IR and performs flow analysis of binary . The IR may resemble assembly like code. In one embodiment binary analysis tool includes a Microsoft Vulcan binary analysis tool.

The IR and flow analysis from tool is passed to HIR tool . Tool raises the IR to a HIR and performs further flow analysis. HIR tool may remove replace register calls with variables and convert the instruction sequence to a Directed Acyclic Graphical DAG like format.

Circuit generator uses the HIR and enhanced flow analysis from HIR tool to build circuit nodes. The resulting circuit may be presented to a user in a code as circuit User Interface UI . An example code as a circuit UI is described below in connection with . System may include a graph walk application to enable a user to walk through the circuit to gather detailed information about the circuit and to perform binary verification such as backtracking for root cause analysis discussed below .

Turning to an embodiment of a circuit node is shown. A circuit node may represent one or more operations in the HIR. As will be discussed further below a circuit node may represent a program function i.e. a set of operations . Circuit node includes a gate having one or more inputs and one or more outputs . Output may be inputted into another circuit node as part of a circuit. Circuit node may include predicate which is a control condition that enables or disables gate . A gate may represent a simple operation such as ADD or may represent a defined abstraction whose semantics are known. For example a gate may represent a C language function strcat string concatenate that appends two strings together.

Turning to an embodiment of representing binary code as a circuit is shown. A binary shown in source code form at has been analyzed by binary analysis tool . The resulting Intermediate Representation is shown at . It will be appreciated that IR appears as assembly like code e.g. IR references machine registers . Analysis of IR by HIR tool results in a High level Intermediate Representation . It will be appreciated that HIR is a high level abstraction of the binary that is machine independent and in a directed acyclic like format. HIR shows a compare statement where if Z does not equal zero then variable C takes on the sum of variables A and B.

HIR may be expressed using circuit node . In circuit node the inputs A and B are provided to a gate that performs an addition operation. The predicate of node is the compare statement CMP Z 0 of HIR . Thus when Z is not equal zero then the addition operation of gate may be performed to add inputs A and B and output the sum as output C. In one embodiment when multiple circuit nodes are connected to create a circuit the circuit flow is read from left to right. As will be described below the circuit may be traced backwards i.e. read from right to left to determine potential root causes of a flawed output.

Turning to a flowchart shows the logic and operations of representing binary code as a circuit in accordance with an embodiment of the invention. In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting at block a binary is received. At block an IR is generated of the binary. Next at block flow analysis of the binary is performed. In one embodiment the logic of blocks and may be performed by a binary analysis tool such as Microsoft Vulcan.

Proceeding to block a HIR is generated from the IR and the flow analysis. Generating the HIR raises the IR to a platform independent representation which is easier for code analysis. For example register calls are replaced with temporary variables and global stack variables as appropriate. Generating the HIR includes performing enhanced flow analysis that may investigate factors such as virtual functions global references field references and the like. At least a portion of this enhanced flow analysis is performed using the IR. In one embodiment Microsoft Symval APIs may be used to raise the IR to an HIR. An embodiment of generating the HIR is discussed below in connection with .

Next in block circuit nodes are built from the HIR. Each circuit node may be a simple operation e.g. add subtract greater than comparison etc. or represent a function having several operations which semantics may be defined e.g. a strcat function a user defined function etc. . Continuing to block the circuit nodes are connected using the enhanced flow analysis to build the circuit. In one embodiment the circuit may be built for a subset of operations or edges that are of interest.

Turning to a flowchart shows the logic and operations of representing binary code as a circuit in accordance with an embodiment of the invention. Flowchart shows an embodiment of performing flow analysis of the binary as in block . In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting in block data flow chains are built to abstract the flow of data in the binary. Proceeding to block a control flow graph is built that describes the paths that the binary execution may take. In one embodiment the stream of instructions is divided into basic blocks i.e. a portion of code without a jump . The basic blocks are connected according to the control flow to produce the control flow graph. Next in block a dependence graph is built that abstracts how a set of instructions depend on a conditional i.e. predicate instruction for execution.

Next in block a call graph is built. The call graph describes the calling interactions between basic blocks. In one embodiment the call sites for direct calls are connected. These direct calls may be used later to connect circuit nodes. A call to an import is marked as a pseudo circuit node. An import is a call to a function in an external module which may be made using libraries e.g. dynamic linking Component Object Model COM etc. in which case these instructions i.e. the external module are not available for analysis. These calls may be simulated using a pseudo circuit node to represent the external module.

Turning to a flowchart shows the logic and operations of representing binary code as a circuit in accordance with an embodiment of the invention. Flowchart shows an embodiment of generating an HIR as in block . Analysis performed in flowchart may be performed using the IR. In one embodiment at least a portion of the logic of flowchart may be implemented by computer readable instructions executable by one or more computing devices.

Starting in block redundant intermediary instructions are removed from the call stack associated with the binary. Proceeding to block context insensitive flow analysis is used to add missing edges to the call graph. In context insensitive flow analysis all possible calls between basic blocks are represented while in context sensitive flow analysis values of the variables are taken into account when connecting the basic blocks.

Next in block virtual functions are added to the call graph using context insensitive flow analysis and relocation information. Relocation information is used to detect the virtual calls that are made through virtual function tables vtables . Since vtables have a specific format embedded with relocations fixups the vtables can be used to determine the possible locations of a virtual call.

Proceeding to block alias chains are built with context insensitive flow analysis for alias variables in the binary. Flow insensitive alias analysis is used to connect HIR nodes to add more information to the data flow chains.

Continuing to block a global reference list and a field reference list are built for global variables and fields respectively in the binary. In object oriented programming a field also referred to as data member is data within a class and is available to each instance of the class. Global variables and fields may be connected across call boundaries. This will help in tracking value flow through global variables and field members.

Next in block a system dependency list is built for the binary. The system dependency list describes system variables e.g. config file registry etc. that the binary is dependent on. These system variables may be read from the platform on which the binary is to execute. The system variables in the dependency list may then by simulated by special circuit nodes and supplied with any value as desired. For example reads or writes to system locations like a registry store file may be marked as special circuit nodes which can be supplied any value in the circuit graph simulation. In another example if a binary reads the registry to obtain the Internet Explorer version the registry on that machine can be read and passed to the code as a circuit application for simulation.

Embodiments of the invention may be used for analysis of a binary. Such analysis may include static debugging code coverage analysis root cause analysis and runtime tracing. illustrates how embodiments of the invention may be used for improving code coverage testing. Code is represented as a circuit . Code and code in and is shown as pseudo code to aid in understanding but it will be understood that circuit is built from the binary code version of code . Tracing circuit backwards exposes the code coverage for testing the binary. Ranges for a variable that may result in uncovered code may be discovered. Testing may then be modified to ensure coverage of this previously uncovered variable range.

In if variable c is greater than 18 then the if block of code would not get covered. In circuit the if block is entered at node and the Boolean output of node serves as a predicate for node . Node corresponds to statement in the if block of code . Thus by walking backwards through circuit a user may determine which values of variable c will result in the coverage of the code represented by node .

Turning to a circuit may be used in registry key analysis. Operation RegOpen is used to open a registry key having the specified key name passed in as RString. Circuit node performs a concatenation shown by a symbol on strings A and B to form RString. In analysis of the circuit graph given RString a user can chase back to determine the input string. For example RString may be built by performing 

Using circuit given RString the user can chase back to find the complete input string to RegOpen is HKEY LOCAL MACHINE Software Microsoft Internet Explore Version .

In embodiments herein circuit representations may be built per function also referred to as a procedure in a binary without having global and inter functional edges or may be built for the binary as a whole. Turning to an embodiment of the invention involving global variables is shown. Code represented by circuit has a global variable s. In code a use of global variable s is shown at and a definition of global variable s is shown at . In circuit global variable s is shown as a global line . Global line may serve as an input to a circuit node and be modified by a circuit node output. The uses and definitions of global variable s by nodes in circuit may simply be connected to global line . In circuit node corresponds to global variable s use at and node corresponds to global variable s definition at .

Global line also referred to as a global edge may be carried across multiple procedure calls. In an alternative embodiment an inter functional edge may also be represented similarly as global line . An inter functional edge may follow along the side of the circuit and will terminate at program exit points.

Turning to shows an embodiment of a code as a circuit UI for displaying a circuit representing code in . UI includes circuit section assembly instructions and circuit information section . UI also includes a button Open Binary to select a binary for circuit representation.

Circuit section shows a circuit that represents code . At the bottom of section is a key for the connections between nodes of the circuit. The key includes connections for local variables temporary variables Boolean variables and immediate variables. Values for variables may be fed into the circuit and the circuit executed for evaluating the circuit logic.

Section shows an Intermediate Representation of the binary labeled Assembly instructions . The user can view the IR of the binary that was used to construct the circuit. In one embodiment the instructions shown in section include assembly instructions derived by Microsoft Vulcan.

Section includes information about the circuit. A user may select portions of the circuit in section to display detailed information in section . For example a user may select a gate to learn more information about that particular gate. In the user has selected gate number 5 the greater than gate . Section shows that the inputs to gate number 5 are temporary variable T and local variable c. The output of gate number 5 is Boolean P. Gate number 5 has a predicate of Boolean P. P is an always true predicate for a set of instructions that are not guarded by any condition such as on entry to a function .

In one embodiment graph walk application may be used to walk over the graphical representation of the circuit shown in UI . The graph walk application may be used in root cause analysis of the binary code. For example a user may use the circuit representation to find the set of variables that drive an output. If the output is faulty then the circuit may be traced backwards from the output to find an input variable that may be a potential cause of the bad output. To obtain the set of instructions that might influence the output variable the graph walk application may traverse over the data and predicate edges backwards from the given output. Also variables found on the edges such as global variables may be tracked as the circuit is traversed backwards.

Also given the circuit representation a user may see the independent flow paths that are available within a block of code such as within a function. For example multiple independent operations may be performed within a function like adding values to a list and then checking for the consistency of the list. These operations can be reviewed separately as independent operations by looking at the circuit graph in UI .

In one embodiment the user may define a portion of the circuit as a black box and define the semantics for the black box. The semantics may include the inputs and resulting outputs. The black box may represent a function e.g. user defined library call etc. where the circuit node inputs are parameters passed to the function and the circuit node outputs are return values of the function. For example a portion of the circuit may include a strcat function. When the function strcat is encountered by the graph walk application a simulation of the function takes the two strings concatenates them and returns the output without walking over a circuit graph of the strcat function. This enables a user to focus the circuit on the section of code of interest.

Embodiments herein may be used for debugging code with runtime trace data. A trace of the code may be collected that includes the values involved at the predicates where a control transfer decision was made. A circuit representation of the code may be used to statically rerun and debug the code using the collected trace information. Information that is lost at join points during the flow analysis may be marked. For example see the following code 

Imprecise static analysis may lose which specific location the value of x came from i.e. case 1 or case 2 . At runtime since the specific path that is taken is known the path can be tracked and recorded. In the above example the user will then know which path case 1 or case 2 was taken at runtime. The trace shows which path is taken during runtime and helps a user understand the root cause of a crash or other error. In some cases call sites that cannot be resolved during static analysis may be resolved with runtime tracing.

Embodiments of the invention enable binary code to be represented as a circuit. Portions of the code may be represented by circuit nodes that are connected according to flow analysis of the binary code to produce a circuit representation. The circuit may help a user visualize the dependencies between variables and the flow of data. Embodiments of the invention may reduce code review time and aid in detection of code bugs. Also embodiments herein may be used with dynamic tracing using data available at runtime.

Although not required embodiments of the invention are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device . The term computer storage media as used herein refers to a statutory article of manufacture that is not a signal or carrier wave per se.

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared Near Field Communication NFC and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

In the description and claims the term coupled and its derivatives may be used. Coupled may mean that two or more elements are in contact physically electrically magnetically optically etc. . Coupled may also mean two or more elements are not in contact with each other but still cooperate or interact with each other for example communicatively coupled .

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Various operations of embodiments of the present invention are described herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment of the invention.

The above description of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the embodiments to the precise forms disclosed. While specific embodiments and examples of the invention are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification. Rather the following claims are to be construed in accordance with established doctrines of claim interpretation.

