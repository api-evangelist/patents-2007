---

title: Suppressing repeated events and storing diagnostic information
abstract: Events that repeatedly occur during a detection period are intercepted and suppressed before being written to a log. When the same error has been detected a predetermined number of times within the detection period, the event logging for the event is suppressed for a suppression period. At the end of the suppression period an entry is made in the log summarizing the events during the suppression period. Additionally, diagnostic information relating to an application is collected and then stored within a high speed memory. Upon the occurrence of a triggering event, the diagnostic information from the high speed memory is stored within a data store for later use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617074&OS=07617074&RS=07617074
owner: Microsoft Corporation
number: 07617074
owner_city: Redmond
owner_country: US
publication_date: 20070706
---
Software applications may use logs to record event information. Generally the application specifies the events that trigger the event information being recorded in the log. For example the event may relate to operation of the application a security event a system event and the like. The event log may be used to assist in identifying and diagnosing current problems as well as helping to identify potential problems. Developers may also use trace logs to obtain more detailed operational flow of an application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Events that repeatedly occur during a detection period are intercepted and suppressed before being written to a log. When the same error has been detected a predetermined number of times within the detection period the event logging for the event is suppressed for a suppression period. At the end of the suppression period an entry is made in the log summarizing the events during the suppression period. Additionally diagnostic information relating to an application is collected and stored within a high speed memory. Upon the occurrence of a triggering event the diagnostic information from the high speed memory is stored within a data store for later use.

Referring now to the drawings in which like numerals represent like elements various embodiment will be described. In particular and the corresponding discussion are intended to provide a brief general description of a suitable computing environment in which embodiments may be implemented.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Distributed computing environments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments will be described. The computer architecture shown in may be configured as a desktop or mobile computer and includes a central processing unit CPU a system memory including a random access memory RAM a read only memory ROM a cache and a system bus that couples the memory to the central processing unit CPU . System memory provides volatile memory to computer .

A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system trace event log application program s and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive the computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . The network connection may be wireless and or wired. The network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS VISTA operating system from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store one or more application programs . The trace event log is configured to store events and diagnostic information logged by applications such as application program . Generally the events that are written to log are determined by the developers of the software program. The log may record many different types of events including both critical and non critical events.

In conjunction with the operation of the application application program utilizes event manager to manage event information. Generally the event manager is configured to collect diagnostic information relating to application program and store the information within a high speed memory such as cache . When a predefined event occurs the cache is flushed and the information is saved for later use. For example the diagnostic information may be saved to trace event log . Error detector is configured to prevent the same event from being repeatedly written to trace event log . Additional details regarding the event manager will be provided below.

Configuration includes information that defines what events are to be monitored what information should be collected and stored as well as settings relating to a detection period a suppression period and a threshold value that triggers suppression of errors. The configuration information may vary depending on the application. For example one application program may be configured to record information relating to critical events whereas another application may be configured to record information relating to non critical events. The events may be categorized according to a type of event or some other warning level scheme. For example an event may be classified as a critical event an error event a warning event and an information event. A critical event is an event that indicates an unexpected processing or an error condition. For example a critical event may include a memory exception a thread exception a stack exception a system hang exception and the like. An error event includes events that indicate an unexpected processing or an error condition. In this situation the application was not able to perform a task as expected but the application remains executing. A warning event indicates that a possible problem has occurred or may occur but the application is still functioning correctly at the current point in time. An information event is any event in which information is desired. For example these events may include state information for an application that may be useful in management of the application.

Event manager is configured to store diagnostic information within data structure within cache . This diagnostic information is low level information relating to the processing of application that may be used for debugging and or application optimization. This diagnostic information may also include flow events between processing activities and components. According to one embodiment the information stored within cache is for a predetermined period of time of operation of the application. For example the information stored may be for the last two minutes ten minutes and the like. According to another embodiment the amount of information stored within cache is for a predetermined number of events. For example the cache may be configured to store the last one hundred events two hundred events and the like. As the diagnostic information is initially stored within a high speed memory the application continues to operate normally without being bogged down by constantly logging the information to a slower memory device. The data is transferred to a permanent store such as log upon the occurrence of a triggering event. For example when application creates a triggering event the data from data structure is flushed from cache and stored within event trace log . The information may also be stored in some other data store. As discussed above the triggering event may be specified to be any type of event. The API provides a mechanism that allows a developer to define a triggering event and how long the event should remain in effect. According to one embodiment the API includes default behavior to automatically treat the most severe errors as a triggering event. Once a triggering event is detected event manager notes the category of the event the current time and the current trace verbosity in data structure . Event manager may also automatically adjust the current verbosity of the diagnostic information for the specified category to output all trace data including Verbose messages that may have been previously disabled . Periodically the event manager compares the current time with the time stored in the data structure to determine if the error condition is still in effect. When the error condition is not in effect the verbosity may be returned to the previous level before the triggering event. According to another embodiment the verbosity remains constant.

Event manager is also configured to detect events that are repeatedly attempted to be written to event trace log using error detector . Generally when an application is in a bad state it may attempt to repeatedly write events to event trace log making it difficult for an administrator to diagnose the problem. For example the same error may be in the log fifty times. Error detector detects repeated events and when detected prevents the errors from being repeatedly written to the event trace log . The error detector keeps track of the number of events attempted to be written to the log over a period of time the detection period . For example the detection period may be one minute five minutes ten minutes and the like. According to one embodiment the detection period is about three minutes. When error detector detects that the same error has been attempted to be written to the log a predetermined number of times the suppression threshold within the detection period the event logging for the event is suppressed from being written for a suppression period. According to one embodiment the suppression period is for approximately twenty minutes. The suppression threshold may be configured for as little as two events within the detection period. During the suppression period event manager stores information relating to the event as well as the number of times the event is attempted to be written to the log. At the end of the suppression period a summary is written to the log that summarizes the number of times the event was attempted to be written. The summarizing event may also include other information such as the times of the event diagnostic information related to the event and the like. API provides a mechanism that allows a developer to define spamming and how long a spam condition should remain in effect. For instance the application can specify rules for each category that specify how many events per detection period constitute spamming and how long to suppress events once the suppression threshold has been exceeded by setting the suppression period. According to one embodiment the event manager suppresses events after three events occur within a single minute. Many other settings may be used.

Referring now to an illustrative process for obtaining and storing diagnostic information will be described. When reading the discussion of the routines and processes presented herein it should be appreciated that the logical operations of various embodiments are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly the logical operations illustrated and making up the embodiments described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

After a start operation the process flows to operation where the configuration settings relating to the collecting and storing of diagnostic information is obtained. The settings may include default settings user configured and or a combination of default settings and user configured settings. As discussed above the settings relating to storing diagnostic information generally include the event s to be monitored a verbosity level of the information and the length of the error condition.

Moving to operation the diagnostic information is stored in a high speed memory such as a cache. In this way the application is not as affected as compared to writing to a slower speed memory device such as a disk drive or some other data store. The diagnostic information is stored within a data structure in the high speed memory. According to one embodiment the data structure is configured to store a predetermined amount of diagnostic information. For example the data structure may be configured to store diagnostic information for a period of time e.g. one minute two minutes five minutes . . . or the data structure may be configured to store a predetermined number of events e.g. one hundred events five hundred events one thousand events . . . of operation of application . According to one embodiment the amount of diagnostic information stored is configurable. Additionally the size of the data structure may be adjusted in response to the occurrence of an event.

Flowing to operation a determination is made as to whether a triggering event has occurred. As discussed above a triggering event may be any type of event. When a triggering event has not occurred the process returns to operation .

When a triggering event has occurred the process moves to operation . According to one embodiment the verbosity level for writing the diagnostic information is adjusted to a higher verbosity level in response to the triggering event. In this way the diagnostic information includes more detailed diagnostic information during the time of the error condition.

Moving to operation the information stored in the high speed memory is flushed and written to a data store. According to one embodiment the diagnostic information is written to a trace log. As long as the process is within the configured length of the error condition the diagnostic information is output to the data store for later use. During this period the diagnostic information may be directly written to the data store or alternatively the information may be stored within a high speed memory for the length of the error condition and then flushed at the end of the error condition or when the high speed memory is full. The process then flows to an end operation and returns to processing other actions.

After a start operation the process flows to operation where the configuration settings for the event suppression are determined. According to one embodiment the settings include a detection period a threshold value indicating the number of events triggering the suppression and a suppression period. Other configuration settings may also be included.

Moving to operation the process monitors for any event that is to be written to a log such as an error log.

Flowing to operation a determination is made as to whether an event is to attempting to be written to the log. When an event is not to be written to the log the process returns to operation where the monitoring continues. When an event is to be written to the log the process flows to operation where information relating to the event is temporarily stored. According to one embodiment the information includes the event the time of the event as well as the number of times the event has occurred within the detection period.

Flowing to operation a determination is made as to whether the event should be suppressed. According to one embodiment the event is suppressed when the occurrences of an event has exceeded the threshold value during the detection period.

When the event is not to be suppressed the process flows to operation where a determination is made as to whether the time period for the event is outside of the detection period. When the event is outside of the detection period the process flows to operation where the event count is reset and the event s is written to the log. In this scenario the event is not repeatedly attempting to be written to the log. The process then returns to operation where the monitoring continues. When the event does not occur outside of the detection period the process returns to operation .

When the event is to be suppressed any occurrences of the event are suppressed during the specified suppression period. The process then moves to operation where a summary of the events that were suppressed are written to the log. As discussed above the summary may include the number of times the event occurred as well as a description of the event. The process then flows to an end operation and returns to processing other actions.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

