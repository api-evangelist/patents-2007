---

title: System and method for the managed security control of processes on a computer system
abstract: Managing and controlling the execution of software programs with a computing device to protect the computing device from malicious activities. A protector system implements a two-step process to ensure that software programs do not perform malicious activities which may damage the computing device or other computing resources to which the device is coupled. In the first phase, the protector system determines whether a software program has been previously approved and validates that the software program has not been altered. If the software program is validated during the first phase, this will minimize or eliminate security monitoring operations while the software program is executing during the second phase. If the software program cannot be validated, the protector system enters the second phase and detects and observes executing activities at the kernel level of the operating system so that suspicious actions can be anticipated and addressed before they are able to do harm to the computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07565549&OS=07565549&RS=07565549
owner: International Business Machines Corporation
number: 07565549
owner_city: Armonk
owner_country: US
publication_date: 20070703
---
The present application is a continuation of and claims priority to pending U.S. patent application Ser. No. 10 336 299 filed Jan. 3 2003 which claims priority to and incorporates herein provisional patent application entitled System and Method for the Managed Security Control of Processes on a Computer System filed on Jan. 4 2002 and assigned U.S. application Ser. No. 60 345 432.

The present invention is generally directed to managing the security of a network. More specifically the present invention provides kernel level protection of a computer system from rogue or malicious computer programs.

The security of computing networks is an increasingly important issue. With the growth of wide area networks WANs such as the Internet and the World Wide Web people rely on computing networks to locate transfer and store an increasing amount of valuable information. This is also true of local area networks LANs used by companies schools organizations and other enterprises. LANs generally are used by a bounded group of people in an organization to communicate and store electronic documents and information. LANs typically are coupled to or provide access to other local or wide area networks. Greater use and availability of computing networks produces a corresponding increase in the size and complexity of computing networks.

With the growth of networks and the importance of information available on the networks there is also a need for better and more intelligent security. One approach to securing larger and more complex computer networks is to use a greater number and variety of security assessment and intrusion detection devices. Security assessment devices can be used to evaluate elements in the network such as desktop computers servers and routers and determine their respective vulnerability to attack from hackers. Intrusion detection devices on the other hand identify and prevent entry of foreign or malicious computer programs and can notify a network manager of the presence or attempted entry of such a computer program. Security assessment and intrusion detection devices can also be used more frequently to monitor the activity or status of the elements in a computing network.

However simply adding devices or filters to a network is not always the only and best solution to maintaining network security. Adding security devices can complicate the network and inundate the network manager with security data. Threats to the security of a device or network can take a variety of forms including the introduction of harmful computer code unauthorized attempts to gain access and misuse by people with authority to use a device or network. The various types of harmful computer code that can threaten a computing device or distributed computing system can generally be categorized as either a virus or some form of malware . Computer viruses harm computing devices and systems by entering and then propagating. In some respects the propagating nature of computer viruses makes them easier to detect and there are many commercially available products that detect and exclude viruses from computing devices and systems.

In contrast malware is a general description for other types of programs and computer code that are designed to harm a computing device or system in ways other than simply propagating as a virus does. Malware presents a more sophisticated challenge for network security and traditional anti virus software is not designed to prevent malware from harming computing devices and networks. Malware can take a variety of forms including corrupted applications and applications that retrieve corrupted code that is modified to harm a computing device or network.

There are generally two different approaches to protecting against malware. The first approach involves virtual execution of a computer code to attempt to identify harmful code before it is allowed to actually execute. Virtual execution is limited in its ability to detect harmful code because it does not actually execute every process of the code. Instead the virtual execution technique performs a quick and high level walk through of the processes in the code to attempt to detect suspicious patterns in the code. By its nature the virtual execution technique is limited in its ability to detect suspicious activities embedded in a piece of code. As a result when the virtual execution technique is implemented it must be used conservatively which produces a high number of false positive alerts. In other words because the virtual execution security technique is not as accurate as actually running the code it is implemented to identify a broader scope of potentially suspicious code and produces a greater number of alerts to the user. A high percentage of false positive security alerts is undesirable because it translates into a greater number of security interruptions for the user.

The second approach involves controlling and monitoring a computing device in real time while it is actually running a program and attempting to anticipate any harmful activity the program may try to initiate. One example of a real time solution is set forth in U.S. Pat. No. 5 987 611 which describes a client based monitoring system for filtering network access in conjunction with a centralized enforcement supervisor. The supervisor maintains access rules for the client based filtering and verifies the existence and proper operation of the client based filter application. Access rules specify network access criteria for a client such as 1 total time a user can be connected to the Internet e.g. per day week month or the like 2 time a user can interactively use the Internet e.g. per day week month or the like 3 a list of applications or application versions that a user can or cannot use in order to access the Internet 4 a list of URLs or WAN addresses that a user application can or cannot access 5 a list of protocols or protocol components that a user application can or cannot use and 6 rules to determine what events should be logged including how long are logs to be kept .

By intercepting process loading and unloading and keeping a list of currently active processes each client process can be checked for various characteristics including checking executable names version numbers executable file checksums version header details configuration settings and the like. With this information a determination can be made whether a particular process in question should have access to the Internet and what kind of access i.e. protocols Internet addresses time limitations and the like is permissible for the given specific user.

The limitation with the solution presented in U.S. Pat. No. 5 987 611 and other similar real time prior art solutions is that they are packet based. In other words the security decisions are based on the data packets that are passing between the computing device that is being monitored and external networks or computing resources. When security decisions are based on the traffic of data packets it is more likely the security systems will not detect harmful activities until after the harm has already begun. Accordingly the second approach is not satisfactory because conventional real time security monitoring solutions do not detect security problems early enough and allow time for a response before the malicious program does harm.

In view of the foregoing there is a need in the art for a security system which will provide early detection of security threats to a computing device or network before any harm can be done. Specifically a need exists to be able to quickly and efficiently examine code in real time but before it is able to harm a computing device or system. A further need exists for a computer security system that can accurately identify security threats contained in software programs so that users are not interrupted frequently to address potential security questions. Finally a security system is needed that can efficiently and effectively respond to security threats detected in software programs.

The present invention satisfies the above described needs by evaluating and monitoring software programs running on a computing device. The invention uses a protector system that comprises several different software modules for performing evaluation detection monitoring and response functions. Implementing a two phased approach at the kernel level of the computing device s operating system the present invention provides fast and efficient security that minimizes interruptions for the user. The first phase the pre execution process performs a rapid validation check to determine whether the program has been approved for the computing device or network. If the program is validated it can be run without further monitoring or interruptions for the user. If the program is not validated it can be monitored at the kernel level of the operating system during the second phase while the program is executing. Detection and monitoring modules of the present invention can identify suspicious activities triggered by the program and monitor the activities before they are able to cause harm to the computing device or network. In the event the program is initiating harmful activities the protector software module can respond by taking remedial action to address the threat.

In one aspect the present invention comprises a method for determining whether a program is approved to execute by comparing it to a predetermined list of approved programs. The operating system kernel notifies a pre execution monitoring module when a new program begins to load so that it can be validated before execution. A validation module can compare the new program to the predetermined list of approved programs. If the new program is validated the pre execution monitoring module allows the operating system to continue loading and executing the program. Once a program is validated in the pre execution phase little or no additional security monitoring needs to be performed on the new program while it is executing. If the new program is not validated the program can continue to load and execute but other execution security modules are responsible for detecting monitoring and responding to suspicious activities. For example the execution security modules can control access to certain files or registry settings or limit network access. The execution security modules can also consider whether a new program was previously permitted to execute on the computing device.

In another aspect the present invention provides a protector system for improving and expediting security on a computing device or network. The protector system comprises several software modules coupled to the operating system kernel of the computing device that manage and control activities at the kernel level. The protector system comprises a pre execution monitoring component that can suspend a new program as it is loading into memory and before it can execute. The pre execution monitoring component can operate with a validation module to determine whether the user has already validated the new program. If the pre execution component validates the new program it can continue to load and execute with minimal security concerns. However if the pre execution component is unable to validate the new program execution security modules can perform additional monitoring while the new program is executing. Execution security modules can intercept various operating system triggers and calls before they are executed to determine if the activity is suspicious. If the program s activities are deemed suspicious or malicious the execution security modules can respond by terminating the activities or taking other responsive measures to protect the security of the computing device or network.

The present invention employs a protector system comprising several software modules to support the protection of computing devices and computing networks from malicious software programs. Specifically the present invention employs a two step process to validate software programs and monitor non validated software programs. The two step process provides an efficient and effective means for protecting a computing device or network while minimizing disruptions for the user. In the first phase of the process the protector system validates authorized programs to ensure that they have not been corrupted before running them. For programs that cannot be validated the protector system can monitor the programs as they execute during the second phase. If during the monitoring step the program initiates any suspicious activities the protector system can respond by taking one or more remedial actions.

Although the exemplary embodiments will be generally described in the context of software modules running in a distributed computing environment those skilled in the art will recognize that the present invention also can be implemented in conjunction with other program modules for other types of computers. In a distributed computing environment program modules may be physically located in different local and remote memory storage devices. Execution of the program modules may occur locally in a stand alone manner or remotely in a client server manner. Examples of such distributed computing environments include local area networks of an office enterprise wide computer networks and the global Internet.

The detailed description that follows is represented largely in terms of processes and symbolic representations of operations in a distributed computing environment by conventional computer components such as database servers application servers routers security devices firewalls clients workstations memory storage devices display devices and input devices. Each of these conventional distributed computing components is accessible via a communications network such as a wide area network or local area network.

The processes and operations performed by the computer include the manipulation of signals by a client or server and the maintenance of these signals within data structures resident in one or more of the local or remote memory storage devices. Such data structures impose a physical organization upon the collection of data stored within a memory storage device and represent specific electrical or magnetic elements. These symbolic representations are the means used by those skilled in the art of computer programming and computer construction to most effectively convey teachings and discoveries to others skilled in the art.

The present invention also includes computer programs that embody the functions described herein and illustrated in the appended flow charts. However it should be apparent that there could be many different ways of implementing the invention in computer programming and the invention should not be construed as limited to any one set of computer program instructions. Further a skilled programmer would be able to write such a computer program to implement the disclosed invention based on the flow charts and associated description in the application text for example. Therefore disclosure of a particular set of program code instructions is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed computer program will be explained in more detail in the following description in conjunction with figures illustrating the program flow.

Referring now to the drawings in which like numerals represent like elements throughout the several figures aspects of the present invention and the preferred operating environment will be described.

Referring to an exemplary architecture is illustrated for computing device . The exemplary computing device is divided into two general regions referred to as the user space and the kernel space . The kernel space refers to the central part of the operating system . The kernel space typically represents that portion of the operating system that directly accesses the hardware of the computing device . In contrast the user space represents portions of the computing device that interact with software and data received from outside the computing device . The exemplary architecture shown in illustrates the components of an exemplary protector system that operates to protect the computing device from rogue or malicious software.

Beginning with the user space the system management module manages security operations on the computing device and can coordinate the functions of the protector system with other security devices that may be coupled to or operating on the computing device . If the computing device is coupled to a network as shown in the exemplary architecture in the system management module can also be used to coordinate security settings and responses with other components on the network . The system management module can also comprise a list of programs and processes that are allowed to run on the computing device .

In the user space the command line interface and the protector application are coupled to the system management module . The command line interface is typically implemented as a wrapper around the protector API library . The primary purpose of the command line interface is to configure various security settings such as how to respond to a certain threat and to load the settings into the protector driver management interface . The protector application communicates with the protector driver management interface via the API library and provides user level services in the protector system . The protector application can provide the initial configuration load when the protector system is initialized and can interact with a user on certain security decisions. The protector application also interacts with database . The database can comprise various data used in performing protector security functions which will be described in greater detail in connection with .

Communication between the user space and the kernel space is performed with the API library and the protector driver management interface . The API library is preferably implemented as a C level application programming interface that allows various processes to maintain the data in database and provide instructions to the drivers in the kernel space .

The binary execution monitor implements the primary functions of the protector system . The binary execution monitor is an in kernel driver that monitors the loading of binary executable files and other executable libraries in real time by recognizing and validating any executable file that is being loaded. Validation of an executable file is implemented with the validity module and can be performed using a variety of techniques described in greater detail herein. When the binary execution monitor is installed it establishes the presence of its processing at the system process creation hooks within the kernel where it can observe all process and creation activities. When a program is initially loaded into memory in anticipation of execution the binary execution monitor works with the validity module to validate the program. Using the system process creation hooks the binary execution monitor can recognize the initial loading of executable files and any subsequent loading of executable libraries that can occur while a program is executing. The binary execution monitor s functions performed prior to execution of an executable file can also be generally described as being performed by a pre execution module of the protector system .

If the binary execution monitor is unable to validate a program the detect drivers can monitor the non validated program when it is executing and identify potential threats to the computing device before they are executed. The detect drivers are plug in modules linked to the system call hooks within the kernel. The detect drivers communicate system call hooks using component interface to associated behavior monitoring modules that can react to the suspicious activities. The binary execution monitor also works in conjunction with the behavior monitoring modules to analyze and respond to system call hooks communicated from the detect drivers . The behavior monitoring modules are a collection of in kernel modules that are associated with the detect drivers . For example the privacy monitor reacts to a program s attempt to use a network connection to other computer systems. The file protection monitor can react to an attempt to alter a specified file. The registry protection monitor protects against unauthorized changes to registry settings. Generally the behavior monitors can take direct action to address a security threat or instruct the protector application to query the user for instructions on how to handle the threat. Other behavior monitors and their associated detect drivers can be plugged into the protector system to implement different security functions. Furthermore those skilled in the art will understand that the architecture of the protector system shown in is an example and that various components can be located external to the computing device or on the network in other embodiments. The functions of the binary execution monitor the detect drivers and the behavior monitors performed during execution of an executable file can generally be referred to as being performed by an execution module of the protector system .

Referring to an exemplary setup process is illustrated. The setup process is typically performed prior to the protector system operating on the computing device . In step of exemplary process the user stores a list of allowed executable files in the system management module . This list of allowed executable files is associated with programs that are approved to run on the computing device . The list of allowed executable files may be defined by the user or by a network manager if the computing device is coupled to a network such as in a workplace environment. In step the user can set access rights for each of the allowed executable files. The access rights for the allowed executable files define which components of the computing device or the network to which the computing device is coupled may be accessed by that executable. Defining access rights can also include defining which files are restricted from access.

Steps and provide specific examples of validation steps conducted during the setup process using the validity module . The binary execution monitor works with the validity module to validate each of the allowed executable files. The validation module can be any one of a variety of pieces of software that are used to verify that a program has not been tampered with. For example the validation module can represent the MD5 software module commonly known to those in the art. The MD5 software module calculates a checksum for each allowed program and that checksum is stored for later comparison. As described in connection with the checksum data can be stored in database in step .

Finally in step of the setup process the configuration settings chosen by the user are stored in the database . The configuration settings can be chosen by the user of the computing device or by a network administrator if the computing device is coupled to a network. The configuration settings can include predetermined responses to particular threats and decision rules as to when the user should be queried about a security threat.

The subject matter of the remaining drawings B and generally can be categorized in two phases of execution of a program. The first phase called pre execution occurs as a program is being loaded into memory but before it can execute. The second phase is the execution process for the program. One advantage of the protector system is that it performs the majority of the security decision making in the pre execution process illustrated in B and . By moving much of the security decision making to the pre execution process the protector system enables the execution process represented by to run more smoothly and with fewer interruptions for the user.

Referring to an exemplary process is illustrated for performing the steps in the pre execution phase for an executable file. Beginning with step the user or another software module may attempt to load a new executable file for running on the computing device . In step the kernel begins loading the new executable file into memory in anticipation of running the program. As the executable file is loading a system process creation hook notifies the binary execution monitor of the loading process. By initiating the monitoring process at the kernel level the protector system is able to begin performing its functions before the program can execute and cause possible harm.

In step the kernel will determine whether this executable is already running on the computing device . If in fact the executable is running the yes branch is followed to step and the executable will not be loaded. If the executable is already running it has been approved previously and the protector system can skip the validation process described in connection with . If however the executable has not already been loaded the binary execution monitor will respond to the system process creation hook by suspending execution of the executable file in step. until the program can be validated.

The pre execution process performed by the binary execution monitor and the other associated components of the protector system supports an initial determination of whether the new executable is safe for loading onto the computing device . Continuing with step illustrates a representative step for validating the new executable. Step will be described in greater detail in one exemplary embodiment in the discussion in connection with below. In step if the binary execution monitor is able to validate the new executable the suspended state will be released in step and loading of the executable will continue in step . However if the binary execution monitor is unable to validate the executable in the pre execution process additional precautionary steps will have to be taken in the execution phase as described in greater detail in connection with .

Referring to the exemplary process referred to in step is illustrated in greater detail. As mentioned earlier the checksum technique illustrated in is only one example of a method for validating an executable. Other validation techniques can use various software modules to analyze the behavior or characteristics of certain executable files in order to validate them. In step the binary execution monitor retrieves the checksum data that was previously calculated and stored in database . In step the binary execution monitor calculates a checksum for the new executable which is being loaded on the computing device . If the executable is associated with an allowed program and the program has not been corrupted the binary execution monitor should find a match between the data contained in the checksum data and the checksum calculated for the new executable. If the binary execution monitor finds a match with the checksum data the new executable will be found to be valid in step . If the program associated with the new executable is not one of the allowed programs designated during the setup process then the executable is found to be not valid in step . Additionally if the executable corresponds to an allowed program but the program has in someway been corrupted the checksum calculated for the new executable will not match the previously calculated checksum and the new executable is found to be not valid in step .

As mentioned above the exemplary processes illustrated in and occur after the pre execution process and concern executable files that the binary execution monitor could not not validate in the pre execution phase. Referring to an exemplary process is illustrated for executing an executable file that has not been validated. Once the pre execution process terminates and the suspended state is lifted in step the protector application will consult the database to determine if the user has been previously queried about the new non validated executable file. If the user has been previously queried about this executable and the previous decision was to not allow this executable file to load the executable will be terminated in step without interrupting the user for a decision. If the user has previously approved the loading of this executable file in step or if the user approves the new executable in this instance in step then execution of the executable file will proceed.

Although the user has allowed the non validated executable file to proceed the protector system will take steps to protect the computing device and the network that it may be connected to. Steps through illustrate exemplary processes that may be performed in allowing the non validated executable file to proceed. In step the protector application will notify the system management module that the non validated executable file is allowed to execute. This notification will serve to allow the system management module to take any precautions in step to protect other components of the computing device or other network components coupled to the computing device. In step the binary execution monitor will release the suspended state for the new executable and the program will continue to load and execute in step .

As the program is executing the other components of the protector system such as the detect drivers and the behavior monitoring modules operate to prevent the non validated program from performing any malicious activities on the computing device or on the network . The detect drivers are linked to the kernel activities through system call hooks . In step certain activities performed by the program will trigger system call hooks that in turn trigger the detect drivers . The detect drivers are then coupled to the behavior monitoring modules which can observe the program s behavior and respond to any malicious activity. An exemplary process for triggering a detect driver is illustrated in greater detail in .

Referring to an exemplary detection process is illustrated that employs the file input output detector . The exemplary process is illustrative of the operations of detect drivers and their associated behavior monitors . In step the executable file attempts to open a file in connection with a process or activity it is performing. As the kernel attempts to follow the instruction of the executable and open the file the system call hook linked to this activity triggers the file input output detector in step . The file input output detector in turn notifies the file protection monitor in step .

Any files that have restricted access as determined by the user or network administrator in the setup process will be identified in the file lock data in database . The file protection monitor consults the file lock data in step to determine whether the subject file has been restricted. If the file is not restricted the file protection monitor permits the system call hook to proceed with opening the file. However if the file does appear in the file lock data in step the file protection monitor can limit access to the file. For instance the file protection monitor can provide read only access to a file or can prohibit access entirely.

In other examples of how the behavior monitors function the type of response can depend on the type of activity that is detected as well as the configuration settings selected by the user or the network administrator. For instance if the program is attempting to perform functions that may seriously impair the computing device or the network the protector system may immediately terminate execution of the program. Alternatively if the file protection monitor determines that the threat is less severe the protector application may simply query the user to insure that it is safe to continue executing the program.

In conclusion the present invention enables and supports security from malicious software programs for a computing device or computing network. The two step process of the protector system provides an effective and efficient method for implementing security while minimizing the burdens and interruptions for the user. The pre execution process provides an efficient method for determining whether an uncorrupted program is allowed to execute. By validating certain programs during the pre execution process the protector system minimizes the amount of work that must be done in monitoring and controlling programs during the execution phase. The validation step also reduces the number of false positive alarms thereby reducing security interruptions for the user.

It will be appreciated that the present invention fulfills the needs of the prior art described herein and meets the above stated objects. While there has been shown and described the preferred embodiment of the invention it will be evident to those skilled in the art that various modifications and changes may be made thereto without departing from the spirit and the scope of the invention as set forth in the appended claims and equivalence thereof. Although the present invention has been described as operating on a computing device coupled to a network it should be understood that the invention can be applied to other types of distributed computing environments. Furthermore it should be readily apparent that the components of the protector system can be located in various local and remote locations of a distributed computing environment.

