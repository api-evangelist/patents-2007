---

title: Copy process substituting compressible bit pattern for any unqualified data objects
abstract: A copy procedure detects qualified data objects in a body of source data, and copies the source data to a target storage unit except for unqualified data objects, which are replaced with a prescribed bit pattern. Following completion of the backup, a record is prepared indicating that all data objects exist in the specified target storage, regardless of whether each data object was replaced with a predetermined bit pattern rather than being physically written to the specified target storage. This process may, be repeated in order to perform data reclamation, effectively removing user files no longer qualifying for backup.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774317&OS=07774317&RS=07774317
owner: International Business Machines Corporation
number: 07774317
owner_city: Armonk
owner_country: US
publication_date: 20070522
---
This application is a continuation of U.S. patent application Ser. No. 11 057 737 filed on Feb. 14 2005 which is a continuation of U.S. patent application Ser. No. 10 055 635 filed on Jan. 22 2002 and which patent applications are both incorporated herein by reference in their entirety.

The present invention relates to digital data storage management. More particularly the invention concerns a copy procedure that distinguishes between qualified and unqualified data objects in a body of source data and copies the source data to a target storage unit except for unqualified user files which are replaced with a prescribed compressible bit pattern. Regardless of whether data objects are copied or replaced with the prescribed bit pattern the copy process reports them as having been copied successfully.

The electronic management of data is central in this information era. Scientists and engineers have provided the necessary infrastructure for widespread public availability of an incredible volume of information. The Internet is one chief example. In addition the high technology industry is continually achieving faster and more diverse methods for transmitting and receiving data. Some examples include satellite communications and the ever increasing baud rates of commercially available computer modems.

With this information explosion it is increasingly important for users to have some means for storing and conveniently managing their data. In this respect the development of electronic data storage systems is more important than ever. And engineers have squarely met the persistent challenge of customer demand by providing speedier and more reliable storage systems.

As an example engineers at INTERNATIONAL BUSINESS MACHINES CORPORATION IBM have developed various flexible systems called storage management servers designed to store and manage data for remotely located clients. One example is the TIVOLI STORAGE MANAGER TSM product. With this product a central server is coupled to multiple client platforms and one or more administrators. The server provides storage backup retrieval and other management functions for the server s clients.

Although the TSM product includes some significant improvements over prior storage systems IBM continually seeks to improve the efficiency of this and other such systems. One area of possible focus is space utilization namely minimizing the amount of storage space required to store data. To minimize the cost of disk tape and other storage media customers wish to minimize the storage space that their data occupies. Customers also seek to minimize other storage assets such as tape library storage slots etc. Although some useful approaches have been proposed to address these concerns IBM is nevertheless seeking better solutions to benefit its customers.

Broadly the present invention concerns a copy procedure that detects unqualified data objects in a body of source data and copies the source data to a target storage unit except for unqualified data objects which are replaced with a prescribed bit pattern. The invention detects and processes unqualified data objects whether they are aggregated or not. Aggregated data objects are data objects that have been concatenated for processing as a single unit to aid efficiency.

More specifically a storage director initially reviews a body of source data to determine whether its data objects are already present in target storage. Data objects already present in target storage need not be copied. As for data objects not present in target storage the storage director selectively copies the data objects to target storage. Then the storage director applies prescribed criteria such as differentiating between predetermined active and inactive data object designations to determine which of the data objects qualify for copying and which do not. Then the storage director forms a copy of the source data on the target storage. In this copy operation however the storage director replaces each unqualified data object with a predetermined bit pattern. Responsive to completion of the copy operation the storage director prepares a record indicating that the data object exists in target storage regardless of whether it was physically copied or replaced with the substitute bit pattern. The storage director may later repeat similar techniques to make a copy of the last copy thereby performing a storage reclamation operation that consolidates storage to take advantage of any data objects that have become inactive after the first copy was made.

The foregoing features may be implemented in a number of different forms. For example the invention may be implemented to provide a method of copying data. In another embodiment the invention may be implemented to provide an apparatus such as a storage subsystem configured to copy data. In still another embodiment the invention may be implemented to provide a signal bearing medium tangibly embodying a program of machine readable instructions executable by a digital data processing apparatus to copy data as discussed herein. Another embodiment concerns logic circuitry having multiple interconnected electrically conductive elements configured to copy data as disclosed herein.

The invention affords its users with a number of distinct advantages. For example the copy technique disclosed herein may be used to implement a backup operation that essentially limits backup to active files and omits inactive files from backup. Rather than being copied the inactive files are replaced with a predetermined substitute bit pattern. Moreover this entire process may be repeated to implement a reclamation process. By maintaining and using well organized metadata active inactive file status can be quickly determined with a minimum of processing overhead. Importantly storage space can be conserved by using a substitute bit pattern that is highly compressible for example by hardware components that apply compression algorithms upon storage. Moreover when substituting the prescribed bit pattern for any user files that are members of an aggregate file the same length bit pattern is used so that the bit pattern when uncompressed occupies the same amount of storage as each respective substituted user file when uncompressed . Consequently offsets of each data object within an aggregate file are retained preserving the accuracy of the original metadata. The invention also provides a number of other advantages and benefits which should be apparent from the following description of the invention.

The nature objects and advantages of the invention will become more apparent to those skilled in the art after considering the following detailed description in connection with the accompanying drawings.

One aspect of the invention concerns a storage management system which may be embodied by various hardware components and interconnections. One example is shown by the storage management system of . Broadly the system includes a data storage subsystem one or more administrator stations and one or more client stations . The subsystem operates in response to directions of the client stations as well as the administrator stations .

The administrator stations are used by system administrators to configure monitor and repair the subsystem . Under direction of an end user the client stations use the subsystem to store and manage data on their behalf. More particularly each client station creates and regards data in the form of user files also called client files. In this regard each client station separately employs the subsystem to archive back up retrieve and restore its user files. Optionally each user file may be associated with a single client station which is the source of that user file.

Each client station may comprise a general purpose computer such as a file server workstation personal computer etc. The client stations may comprise similar or different machines running similar or different operating systems. Some exemplary operating systems include UNIX OS 2 WINDOWS NT DOS etc.

The client stations are interconnected to the subsystem by a network . The network may comprise any desired connection including one or more conductive wires or busses fiber optic lines data communication channel wireless links Internet telephone lines etc. In one example a high speed communication channel such as a T link is may be used employing a network protocol such as TCP IP.

The administrator stations comprise electronic equipment for a human or automated storage administrator to convey machine readable instructions to the subsystem . Thus the stations may comprise processor equipped general purpose computers of dumb terminals depending upon the specific application. The administrator stations may be coupled to the subsystem directly or by one or more suitable networks not shown .

In an exemplary embodiment the data storage subsystem may comprise a commercially available server such as an IBM TSM product However since other hardware arrangements may be used as well a generalized view of the subsystem is discussed below.

The data storage subsystem includes a storage director having a construction as discussed in greater detail below. The storage director exchanges signals with the network and the client stations via an interface and likewise exchanges signals with the administrator stations via an interface . The interfaces may comprise any suitable device for communicating with the implemented embodiment of client station and administrator station. For example the interfaces may comprise ETHERNET cards small computer system interfaces SCSIs parallel data ports serial data ports telephone modems fiber optic links wireless links etc.

The storage director is also coupled to a database and a storage hierarchy . As discussed in greater detail below the storage hierarchy is used to store managed files . A managed file may include an individual user file stored as such or multiple constituent user files stored together as a single aggregate file. Although the term file is used for illustration numerous other data objects may be utilized in place of a file such as a table space image database binary bit pattern etc.

The subsystem s storage of user files protects these files from loss or corruption on the client s machine assists the clients by freeing storage space at the client stations and also provides more sophisticated management of client data. In this respect operations of the storage hierarchy include backing up files from the client stations backing up client stations files contained in the storage hierarchy retrieving stored files from the storage hierarchy for the client stations and restoring files backed up on the hierarchy .

The database contains information metadata about the files contained in the storage hierarchy . This information for example includes the addresses at which files are stored various characteristics of the stored data certain client specified data management preferences etc. The contents of the database are discussed in detail below.

As mentioned above the storage director may be implemented in various forms. As one example the storage director may comprise a digital data processing apparatus as exemplified by the hardware components and interconnections of the digital data processing apparatus of .

The apparatus includes a processor such as a microprocessor personal computer workstation or other processing machine coupled to a storage . In the present example the storage includes a fast access storage as well as nonvolatile storage . As one example the fast access storage may comprise random access memory RAM and may be used to store the programming instructions executed by the processor . The nonvolatile storage may comprise for example battery backup RAM EEPROM one or more magnetic data storage disks such as a hard drive a tape drive or any other suitable storage device. The apparatus also includes an input output such as a line bus cable electromagnetic link or other means for the processor to exchange data with other hardware external to the apparatus .

Despite the specific foregoing description ordinarily skilled artisans having the benefit of this disclosure will recognize that the apparatus discussed above may be implemented in a machine of different construction without departing from the scope of the invention. As a specific example one of the components may be eliminated furthermore the storage and or may be provided on board the processor or even provided externally to the apparatus .

The storage hierarchy may be implemented in storage media of various number and characteristics depending upon the clients particular requirements. To specifically illustrate one example depicts a representative storage hierarchy . The hierarchy includes multiple levels where levels nearer the top of the FIG. represent incrementally higher levels of storage performance. The levels provide storage devices with a variety of features and performance characteristics 

In this example the first level includes high speed storage devices such as magnetic hard disk drives writable optical disks or other direct access storage devices DASDs . The level provides the fastest data storage and retrieval time among the levels albeit the most expensive. The second level includes DASDs with less desirable performance characteristics than the level but with lower expense. The third level includes multiple optical disks and one or more optical disk drives. The fourth and fifth levels include even less expensive storage means such as magnetic tape or another sequential access storage device.

The levels may be especially suitable for inexpensive long term data archival whereas the levels are appropriate for short term fast access data storage. As an example one or more devices in the level and or level may even be implemented to provide a data storage cache.

Devices of the levels may be co located with the subsystem remotely located or a combination of both depending upon the user s requirements. Accordingly storage devices of the hierarchy may be coupled to the storage director by a variety of means such as one or more conductive wires or busses fiber optic lines data communication channels wireless links Internet connections telephone lines SCSI connection ESCON connection etc.

Although not shown the hierarchy may be implemented with a single device type and a corresponding single level. Ordinarily skilled artisans will recognize the hierarchy being used illustratively since this disclosure contemplates but does not require a hierarchy of storage device performance.

Optionally the storage hierarchy may utilize storage pools including primary storage pools and copy storage pools as shown by the example of . Primary copies of user data are stored in primary storage pools such as while backup copies of user data from the primary storage pools are copied to secondary storage pools called copy storage pools. In the illustrated embodiment each storage pool represents a plurality of similar storage devices such as DASDs optical disks magnetic tape devices etc. In fact all storage devices within a single storage pool may be identical in type and formal Additional information about storage pools and copy pools is disclosed in U.S. Pat. No. 6 148 412 which issued on Nov. 14 2000 in the names of David Maxwell Cannon et al. The entirety of the foregoing patent is incorporated herein by reference.

Storage pools may be implemented in numerous ways beyond that which is practicable and necessary for discussion herein as such would be apparent to ordinarily skilled artisans having the benefit of this disclosure. For instance the primary pools and may all share the same copy pool. Additionally data from one primary pool may be backed up to multiple copy pools.

As mentioned above the database is used to store various information about data contained in the storage hierarchy . This information for example includes the addresses at which data objects are stored in the storage hierarchy various characteristics of the stored data certain client specified data management preferences etc. Further explanation of the database is provided below.

The subsystem manages various data objects which are embodied by managed files for purposes of this illustration. Each managed file comprises one user file or an aggregation of multiple constituent user files. The use of aggregate files is optional however and all managed files may constitute individual user files if desired. The user files are created by the client stations and managed by the subsystem as a service to the client stations . The subsystem s use of aggregate files however is transparent to the client stations which simply regard user files individually. This internal management scheme helps to significantly reduce file management overhead costs by using managed files constructed as aggregations of many different user files. In particular the subsystem treats each managed file whether aggregate or not as a single file during backup move and other subsystem operations reducing the file management overhead to that of a single file.

The managed file includes multiple user files also identified by alphabetic designators a p . The user files are stored adjacent to each other to conserve storage space. The position of each user file in the managed file is denoted by a corresponding one of the offsets . In an exemplary implementation the offsets may represent bytes of data. Thus the first user file has an offset of zero bytes and the second user file has an offset of ten bytes. In the simplified example of each user file is ten bytes long.

The database is composed of various information including tables that store information about data contained in the storage hierarchy . shows the contents of the database in greater detail. Namely these tables include an inventory table a storage table mapping tables and an aggregate attributes table . Other tables may be utilized as well depending upon the nature of the intended application. Each table provides a different type of information exemplified in the description below. Ordinarily skilled artisans having the benefit of this disclosure will quickly recognize that the tables shown below are merely examples that this data may be integrated consolidated or otherwise reconfigured and that their structure and contents may be significantly changed all without departing from the scope of the present invention. Moreover instead of tables this data may be organized as one or more object oriented databases relational databases linked lists etc.

TABLE 1 below shows an example of the inventory table . The inventory table contains information specific to each user file stored in the subsystem regardless of the location and manner of storing the user files. Generally the inventory table cross references each user file with various client information and various policy information. More particularly each user file is listed by its filename which may comprise any alphabetic alphanumeric numeric or other code uniquely associated with that user file. The inventory table contains one row for each user file.

The client information includes information relative to the client station with which the user file is associated. In the illustrated example the client information is represented by client number and source columns. For each user file the client number column identifies the originating client station . This identification may include a numeric alphabetic alphanumeric or other code. In this example a numeric code is shown. The source column lists a location in the client station where the user file is stored locally by the client. As a specific example a user file s source may comprise a directory in the client station.

In contrast to the client information of TABLE 1 the policy information includes information concerning the client s preferences for data management by the subsystem . Optimally this information includes the client s preferences themselves as well as information needed to implement these preferences. In the illustrated example the policy information is represented by the retention time and active columns. Under the column heading active the table indicates whether each user file is considered active or inactive. In one embodiment this is manually specified by an operator host application or other source. Alternatively the active inactive determination may be made automatically by appropriate criteria. One such criterion for being inactive includes files that have been stored in the storage hierarchy while their counterpart at a client station is later modified or deleted. Other examples of criteria for active inactive status include the frequency or recency of use of a file the file s source location the length of time since the file has been referenced by a client station etc. In still another embodiment the active column may be omitted with the active inactive determination being made on the fly whenever the active inactive status of a file affects any action to be taken. The policy information may also include other columns not shown for example listing a maximum number of backup versions to maintain time stamps of backed up data etc.

TABLE 2 below shows an example of the storage table . In contrast to the inventory table described above the storage table contains information about where each managed file is stored in the storage hierarchy . The storage table contains a single row for each storage instance of a managed file.

In the illustrated example the storage table includes managed filename storage pool volume location file s containing substitute pattern and any other desired columns. The managed filename column lists all managed files by filename. Each managed file has a filename that comprises a unique alphabetic alphanumeric numeric or other code. For each managed file the storage pool identifies a subset of the storage hierarchy where the managed file resides and more particularly one of the primary or copy storage pools. As mentioned above each storage pool is a group of storage devices of the storage hierarchy having similar performance characteristics. Identification of each storage pool may be made by numeric alphabetic alphanumeric or another unique code. In the illustrated example numeric codes are used.

The volume column identifies a sub part of the identified storage pool. In the data storage arts data is commonly grouped stored and managed in logical volumes where a volume may comprise a tape or a portion of a DASD. The location column identifies the corresponding managed file s location within the volume. As an example this value may comprise a track sector combination for DASDs or optical disks a tachometer reading for magnetic tape address etc.

The file s containing substitute bit pattern column identifies any constituent user files of the listed managed file that have been replaced by a predetermined bit pattern rather than being physically stored. Alternatively instead of using this column the invention may make a nonspecific notation 1 for each managed file that is a user file that contains the substitute bit pattern and 2 for each managed file that is an aggregate file having one or more constituent user files that have been replaced with the substitute bit pattern. In still another embodiment the file s containing substitute bit pattern column may be omitted entirely as explained in greater detail below.

TABLES 3A 3B below provide an example of the mapping tables . Generally these tables operate to bidirectionally cross reference between aggregate files and user files. The mapping tables identify for each aggregate file all constituent user files. Conversely for each user file the mapping tables identify one or more aggregate files containing that user file. In this respect the specific implementation of TABLES 3A 3B includes an aggregate user table TABLE 3A and a user aggregate table TABLE 3B .

The aggregate user table contains multiple rows for each aggregate file each row identifying one constituent user file of that aggregate file. Each row identifies a aggregate user file pair by the managed filename managed filename column and the user filename user filename .

Conversely each row of the user aggregate table lists a single user file by its name user filename column cross referencing this user file to one managed file containing the user file managed filename . If the user file is present in additional managed files the mapping tables contain another row for each additional such managed file. In each row identifying one user managed file pair the row s user file is also cross referenced to the user file s length length column and its offset within the aggregate file of that pair offset column . In this example the length and offset are given in bytes.

TABLE 4 below shows an example of the aggregate attributes table . This table accounts for the fact that after time an aggregate file may contain some empty space due to deletion of one or more constituent user files. As explained below the subsystem generally does not immediately consolidate an aggregate file upon deletion of one or more constituent user files. This contributes to the efficient operation of the subsystem by minimizing management overhead for the aggregate files.

If desired to conserve storage space reclamation may be performed to remove unused space between and within aggregate files as taught by U.S. Pat. No. 6 021 415 which issued on Feb. 1 2000. The reclamation procedure as discussed in the 415 patent utilizes knowledge of aggregate file attributes as maintained in the aggregate attributes table.

Each row of the aggregate attributes table represents a different managed file identified by its managed filename managed filename column . Each row lists one aggregate file along with its original size upon creation original size present size not including deleted user files in use size and number of non deleted user files in use files .

The database may also be implemented to include a number of other tables if desired the content and structure being apparent to those of ordinary skill in the art having the benefit of this disclosure . Some or all of these tables for instance may be added or incorporated into various existing tables discussed above. In one embodiment the database includes a storage pool table not shown indicating whether each storage pool is a primary or copy storage pool rather than including this information in the storage pool column of the storage table .

Having described various structural features an operational aspect of the present invention will now be described.

Wherever the functionality of the invention is implemented using machine executed program sequences these sequences may be embodied in various forms of signal bearing media. In the context of this signal bearing media may comprise for example the storage or another signal bearing media such as a magnetic data storage diskette directly or indirectly accessible by a processor . Whether contained in the storage diskette or elsewhere the instructions may be stored on a variety of machine readable data storage media. Some examples include direct access storage e.g. a conventional hard drive redundant array of inexpensive disks RAID or another DASD sequential access storage such as magnetic tape electronic non volatile memory e.g. ROM EPROM or EEPROM battery backup RAM optical storage e.g. CD ROM WORM DVD or other suitable signal bearing media including analog or digital transmission media and communication links and wireless communications. In an illustrative embodiment of the invention the machine readable instructions may comprise software object code assembled from assembly language compiled from a language such as C etc.

In contrast to the signal bearing medium discussed above some or all of the invention s functionality may be implemented using logic circuitry instead of using a processor to execute instructions. Such logic circuitry is therefore configured to perform operations to carry out the method of the invention. The logic circuitry may be implemented using many different types of circuitry as discussed above.

The routine begins when the storage director receives a BACKUP instruction step . This instruction may be manually sent by a client administrator another process or machine automatically triggered by predetermined schedule etc. The BACKUP instruction specifies a body of source data to back up and the target storage to be used. In the illustrated example the source data comprises a primary storage pool such as although different sizes and definitions of source data may be used such as one or more volumes physical devices logical devices logical devices storage assemblies extents ranges folders directories etc.

In step the director begins to process a first managed file of the source data. While this file is being processed it is referred to as the current file. The director may select the first and each subsequent managed file for processing based on any helpful set of criteria such as size order priority or even arbitrarily. The storage director identifies the constituent managed files of the source data by using the storage table TABLE 2 above .

In step the storage director checks the storage table to determine whether the current file was previously backed up. If the current file was previously backed up to the target storage there is no need to repeat another backup for this file and step advances to step discussed below . On the other hand if the current file has not been backed up step advances to step discussed below.

The director next determines whether the current file is an aggregate file or an individual user file step . This is done by consulting the mapping tables and in particular concluding that the current file is an aggregate file only if it is shown in TABLE 3A. If the current file is a user file the director determines whether the current file passes predetermined backup criteria step also called qualifying for backup. In the illustrated example user files are only backed up if they are active as shown by the inventory table TABLE 1 above . Alternatively the director may utilize other criteria to determine whether files qualify for backup which may be available by predetermined list to minimize overhead as with active inactive status or this determination may be made on the fly by examining relevant characteristics of the current file such as size priority age content owner etc.

Instead of being written to storage inactive files are replaced with a prescribed dummy pattern as explained below. More particularly step advances to step if the current file passes the backup criteria i.e. is active in which case the storage director writes the file to target storage. Otherwise if the current file fails the backup criteria i.e. is inactive the storage director writes a prescribed bit pattern to target storage instead of the current user file step . The length of the bit pattern need not match that of the replaced user file since individual user files have no offsets to be preserved unlike aggregate files as discussed below . Upon completion of either step or the storage director inserts an entry into the storage table to show that the current file has been backed up if step was executed the file s containing substitute bit pattern column of this same entry reflects that the bit pattern has been used in substitution for the current user file.

In an exemplary embodiment the predetermined bit pattern may be prestored in a memory buffer not shown of the subsystem in order to expedite repeated copying of the bit pattern to target storage. The bit pattern of step and step below is selected to be easily recognized and efficiently compressed by automatic software and or hardware compression processes that physically write data to the storage hierarchy . More particularly the bit pattern is selected such that if provided as input to a certain digital data compression process it would be compressed with at least a particular predicted compression efficiency . Compression efficiency may be measured for example as a ratio of pre compression to post compression storage size or another suitable computation. The compression efficiency is predicted based upon knowledge of how the implemented compression process treats the predetermined bit pattern this may be near or even equal the actual compression efficiency achieved when compression is subsequently performed. Optimally the predetermined bit pattern is selected because of its high compressibility thereby achieving the maximum compression efficiency when compressed. In this respect certain bit patterns may be chosen because they have an obviously high compressibility by many compression processes without requiring any specific knowledge of particular compression processes operation. As an example desirable bit patterns include a sequence of repeating binary zeros or a sequence of repeating binary ones. Both of these patterns are easily compressed by most known compression processes such as the well known Lempel Ziv Welch LZW and run length encoding RLL techniques. Preferably the same bit pattern is used each time step and step below is invoked although the bit pattern may be varied between and or within steps if desired.

In step the storage director asks whether the source data includes any remaining managed files to process. If so processing of the next managed file begins step with this file becoming the current file for processing starting in step . Otherwise if step finds that the source data does not contain any other managed files to process the program ends step .

In contrast to the foregoing description of processing individual user files a different sequence is used if step finds that the current file is an aggregate file. Namely step advances to step where the storage director begins by considering a first user file within the subject aggregate file. While this constituent user file is being processed it is referred to as the current user file. The director may select the first and each subsequent constituent user file for processing based on any helpful criteria such as size order priority or even arbitrarily. The storage director identifies the constituent user files within the current aggregate file by using the mapping tables namely TABLE 3A shown above .

The director next determines whether the current user file passes the predetermined backup criteria step namely whether the current user file is an active file. If the current file passes the backup criteria i.e. is active the storage director writes the file to target storage step . Otherwise if the current file fails the backup criteria i.e. is inactive the storage director writes the prescribed bit pattern to target storage instead of the current user file step . In the illustrated example length of the prescribed substitute bit pattern uncompressed is the same as the length of the current user file uncompressed in order to preserve the original offsets of user files within the subject aggregate file.

In step the storage director asks whether the current aggregate file includes any other constituent user files to process. If so processing of the next user file begins step with this file becoming the current user file for processing starting in step . Otherwise if step finds that the current aggregate file does not contain any other user files to process then processing of the current aggregate file is complete. At this point step the storage director inserts an entry into the storage table to show that the current aggregate file has been backed up and if appropriate which user files of that aggregate file contain the predetermined bit pattern.

After step step asks whether the source data contains any more managed files left to process. If so the next managed file is selected step and processing of that file begins in step . Otherwise the program ends in step .

The operations of sequence may be applied to a backup data operation as discussed above or to achieve reclamation of backup data in order to conserve space. Broadly reclamation consolidates data storage space by eliminating unwanted or unused space. More specifically in the context of the illustrated environment reclamation involves applying the steps to form a further copy of backup data with any user files that have become inactive since being backed up being replaced with the substitute bit pattern. In reclamation however steps are omitted because the data inherently exists. Also in steps metadata is additionally updated to remove references to the original copy.

The routine begins when the storage director receives a RESTORE instruction step . As one example this instruction may be manually instituted by the administrator . Alternatively the instruction may emanate from another process or machine automatic trigger predetermined schedule etc. The RESTORE instruction identifies subject files and a primary storage pool providing directions to restore these files by copying them from one or more copy storage pools back into the primary storage pool. The RESTORE instruction identifies the subject files by storage location name rules characteristics wildcard characters or any other criteria useful in determining which files should be restored.

After step the storage director B begins to process the managed files identified in the RESTORE instruction of step one managed file at a time. More particularly in step the storage director starts with a first managed file of the data to be restored. While this file is being processed it is referred to as the current file. The director may select the first and each subsequent managed file for processing based on any helpful criteria such as size order priority efficiency or even arbitrarily.

After step the storage director asks whether the current managed file has been previously backed up and identifies each different backup if there are more than one step . If the current managed file is a user file then step involves consulting the storage table TABLE 2 above to determine whether this file exists in any copy storage pool and to identify these copy storage pools if any . If step finds that there no backups step advances to step which fails the RESTORE operation for this file and returns a suitable error code or returns a suitable error message to the source of the original RESTORE instruction.

If step finds one or more backup copies of the current file the director chooses an appropriate backup site from which to carry out the restoration step . The choice of step may be based upon various considerations such as the following 

The routine begins when the storage director receives a RESTORE instruction step . This instruction may be manually or automatically submitted by or on behalf of a client station such as the client station that has experienced the data loss. The RESTORE instruction identifies one or more user files to be restored by sending them from one or more primary or copy storage pools back to the client station . The RESTORE instruction identifies the subject user files by name rules characteristics wildcard characters or any other criteria useful in determining which files should be restored.

After step the storage director begins to process a first one of the user files identified in the RESTORE instruction step . While this file is being processed it is referred to as the current file. The director may select the first and subsequent user files for processing based on any helpful criteria such as size order priority efficiency or even arbitrarily.

After step the storage director attempts to locate the current user file in its primary storage location step . In the illustrated environment this step is performed using the mapping tables namely TABLE 3B above and the storage table TABLE 2 above . If the current user file was found the storage director reads the current user file from the primary location and copies it to the client station also in step . After step step asks whether the operation of step succeeded. If so step advances to step described below.

On the other hand if the current user file cannot be found at the primary location step advances to step which asks whether the current user file had been previously backed up from the primary location and identifies each different backup if there are more than one. This is performed by consulting the storage table TABLE 2 above to determine whether this file exists in any copy storage pool and to identify these copy storage pools if any . If step find that there no backups step advances to step which fails the RESTORE operation for this user file and returns a suitable error code or returns a suitable error message to the source of the original RESTORE instruction.

If the current user file has been previously backed up the director chooses an appropriate backup site step . If there are multiple backup sites the choice among backup sites may be made using similar considerations as discussed above in conjunction with . If there are one or more backups available but the current user file has been replaced by the substitute bit pattern in each backup site then step jumps to step where the storage director fails the RESTORE operation. In this case the storage director may optionally invalidate the file in the manner discussed above. After step control passes to step to determine whether there are more files left to restore. If step completes successfully however the storage director proceeds to step where it carries out the restore operation from the chosen backup site.

After step or step or an affirmative answer to step step checks whether there are more user files left to restore according to the original RESTORE instruction of step . If so the director proceeds selects the next user file in step and returns to step . Otherwise if there are no further user files to restore step advances to step where the routine ends.

While the foregoing disclosure shows a number of illustrative embodiments of the invention it will be apparent to those skilled in the art that various changes and modifications can be made herein without departing from the scope of the invention as defined by the appended claims. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated. Additionally ordinarily skilled artisans will recognize that operational sequences must be set forth in some specific order for the purpose of explanation and claiming but the present invention contemplates various changes beyond such specific order.

