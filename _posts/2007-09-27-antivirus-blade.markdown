---

title: Anti-virus blade
abstract: An anti-virus blade provides anti-virus services to a storage system and eliminates the need to develop an interface to initiate a scan operation at the blade. An anti-virus engine executed at the blade receives a request to scan data maintained by the storage system. The anti-virus engine creates a stub file (e.g., a file that has the same name as the Currently Amended file indicated in the request, but does not contain data) and issues an I/O command to the file. A file framework module executed at the blade intercepts the I/O to the dummy file and passes the I/O to an anti-virus application, which is registered with the file framework to receive I/Os from the anti-virus engine. The anti-virus application, in turn, initiates a scan operation by issuing a read request to the stub file, without receiving the request for scanning directly from the storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08042185&OS=08042185&RS=08042185
owner: NetApp, Inc.
number: 08042185
owner_city: Sunnyvale
owner_country: US
publication_date: 20070927
---
The present invention relates to anti virus solutions for storage devices and more particularly to a manufacturer neutral anti virus solution.

A storage system is a processing system adapted to store and retrieve data on behalf of one or more client processing systems clients in response to external input output I O requests received from clients. A storage system can provide clients with a file level access to data stored in a set of mass storage devices such as magnetic or optical storage disks tapes or non volatile memory and thus can be implemented as a network attached storage NAS device . Alternatively a storage system can provide clients with a block level access to stored data and implemented as a Storage Area Network SAN device rather than file level access or with both file level access and block level access. Data storage space has one or more storage volumes comprising of a cluster of physical storage disks defining an overall logical arrangement of storage space.

Network storage devices provide convenient data access centralized storage and data management solutions for an enterprise. Because an enterprise s most important assets are often contained in its information it is essential to maintain data integrity and keep the data virus free. For example a single virus infected file in a storage system can infect large amounts of data thereby causing disruption to storage services and other difficulties.

Anti virus solutions have been offered by various vendors to provide security and data integrity for storage systems. One such a solution represents a server that executes an anti virus application that provides virus scanning pattern updates event reporting and anti virus configuration. Exemplary servers in communication with a storage system via Remote Procedure Calls RPC are shown in . Each server can be a computer system executing Windows operating system provided by Microsoft Corporation of Redmond Wash. Server executes an anti virus application which can be provided by Trend Micro Inc. of Cupertino Calif. by Symantec Corporation of Cupertino Calif. or by any other manufacturer. In order to perform virus checking of the data stored at the storage system an anti virus application has to be able to receive requests for scanning from the storage system to obtain data from the storage system to scan and to provide results of the scanning to the storage system. To this end manufacturers of anti virus applications typically have to modify an anti virus application to enable the application to perform these tasks. For example a component such as a scan server can be implemented on the server for purposes of receiving requests for scanning sending the requests to the anti virus application and providing results of the scanning to the storage system. Such a scan server can be ServerProtect provided by Trend Micro of Cupertino Calif. Furthermore manufacturers of anti virus applications also implement a Common Internet File System CIFS client or network file system NFS client that would allow an anti virus application to send requests for data to be scanned to and otherwise communicate with the storage system using the protocol that is understood by the storage system.

Still with reference to storage system can be a storage system provided by Network Appliance of Sunnyvale Calif. As shown in storage system can be registered with multiple servers . However each server is dedicated to a single storage system. When a user of a client system client attempts to access data on the storage system or to store new data an anti virus client executed at the storage system issues a request to one of the registered servers . Scan server at server receives the request and sends the request for scanning to anti virus application . The anti virus application initiates a scan operation by issuing a request for data to storage system . The anti virus application uses for example a CIFS client or NFS client not shown in to translate the request to the protocol that can be understood by the storage system. A protocol layer at the storage system the protocol layer is not shown in receives the request passes the decoded request to a file system or a volume manager shown in obtains the data for scanning and sends the data to the anti virus application . The anti virus application scans data for viruses and sends the results of the scanning to the scan server . The scan server in turn provides the results of the scanning to the storage system . Based on the scan results client system is either allowed to access data or denied access to the data.

The above described approach however has a number of drawbacks. A chief among them is that it requires each anti virus manufacturer to develop an interface such as a scan server to communicate with the storage system and to issue requests to scan data to an anti virus application. Developing the interface at the storage system often requires manufacturers of storage systems entering into licensing arrangements with the manufacturers of anti virus applications which may be costly. Since only few manufacturers develop scan servers users of client systems are limited to the number of manufacturers of anti virus solutions. Moreover a request for data is processed in a protocol stack of the storage system thereby slowing down the performance of the storage system.

Accordingly what is needed is a seamless easy to deploy and high performance anti virus solution for storage systems.

Embodiments of the present invention provide a system method and computer program product that overcomes prior art limitations by eliminating the need to implement a proprietary interface such as a scan server that sends a request for scanning from a storage system to an anti virus application. Instead a blade that hosts an anti virus application is provided. An anti virus engine executed at the blade receives a request to scan a file e.g. a container an object a simulation of a volume or any other storage entity maintained by the storage system. The anti virus engine creates a dummy file or a stub file e.g. a file that has the same name as the Currently Amended file indicated in the request but does not contain data and issues an input output I O command to the file. A file framework module executed at the blade intercepts the I O to the dummy file and passes the I O to the anti virus application which is registered with the file framework module to receive I Os issued by the anti virus engine. The anti virus application in turn initiates a scan operation by issuing a read request to the stub file. Importantly the scan operation is initiated by the anti virus application without receiving a scan request directly from the storage system. Advantageously the present invention eliminates the need to require manufacturers of anti virus applications to develop an interface such as a scan server to trigger a scan operation. Since the need for having such an interface is eliminated users of anti virus solutions have more flexibility in choosing anti virus manufacturers.

According to an embodiment of the present invention the anti virus application maintains an interceptor module which registers I O callbacks with the file framework module on the blade. A callback represents instructions passed to the filter for execution often to call other procedures or functions. A callback may be stored in a data structure in memory at the anti virus blade. The file framework module determines which I O callbacks need to be invoked when an I O request is intercepted and invokes the callback. For example according to an embodiment of the present invention an interceptor module of the anti virus application registers for read requests initiated by the anti virus engine and thus can intercept the read request to a stub file issued by the anti virus engine.

The anti virus blade also executes a virtual file filter which registers with the file framework at the blade for read requests initiated by the anti virus application. Thus the file framework can intercept a read request to the stub file initiated by the anti virus application. The virtual file filter is responsible for accessing e.g. by issuing calls for data directly to the anti virus filter executed at the storage system. Advantageously the anti virus filter sends a request for data to the file system or to the volume manager at the storage system rather than to a protocol stack and provides data directly to the virtual file filter at the blade. The virtual file filter then sends the data to the anti virus application for scanning. Thus rather than requiring the anti virus application to translate its requests for data to a protocol that can be understood by the storage system the present invention implements the virtual file filter at the anti virus blade that can intercept I O requests to the stub file created by the anti virus engine and pass the requests directly to the anti virus filter at the storage system. By circumventing the need to send the requests for data to the protocol stack the present invention improves performance of the storage system as compared to prior art implementations. Moreover the present invention offers a seamless solution since the anti virus blade does not need to be managed separately from the storage system.

Furthermore the present invention can be implemented both in NAS and SAN environment. Thus if the storage system is implemented as a SAN device which provides for block based access for data sending a request to scan every block indicated in access requests may result in unnecessary operations. Such operations may slow down performance of the storage system. As a result according to this embodiment the anti virus filter at the storage system may send requests for scanning less frequently as compared to the NAS implementation . For example the anti virus filter may send requests for scanning according to a schedule as to avoid blocks to be scanned unnecessarily. Such a schedule may be stored in a configuration file in a persistent storage e.g. disks . When a configuration file is loaded in memory it becomes part of a data structure accessed by the anti virus filter.

Other aspects of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate the principles of the invention by way of example.

Referring now to it illustrates environment in which the present invention is implemented. The environment includes a client system client requesting access to data maintained by storage system . The environment also includes an anti virus blade that executes a commercially available anti virus application an anti virus engine communicating with storage system and a virtual file filter . The anti virus application includes an interceptor module which registers I O callback procedures referred to herein as callbacks with a file framework module . A callback represents instructions passed to the filter for execution often to call other procedures or functions. Virtual file filter also registers I O callbacks with the file framework module . These components are described in greater detail below.

Client communicates with storage system over network which can be a local area network a wide area network or the application network. Although one client is shown in those skilled in the art would understand that any number of clients can communicate with storage system over network . The client transmits requests for data to the storage system and receives responses to the requests over network . Data transmitted between client and storage system is encapsulated in data packets. If client executes the Windows operating system data packets can be transmitted using the Common Internet File System CIFS protocol over Transmission Control Protocol Internet Protocol TCP IP . On the other hand if client runs the UNIX operating system it may communicate with the storage system using either the Network File System NFS protocol over TCP IP or the Direct Access File System DAFS protocol over a virtual interface VI transport in accordance with a remote DMA RDMA protocol over TCP IP. It will be apparent to those skilled in the art that client systems running other types of operating systems may also communicate with the storage system using other file access protocols. Clients may utilize block based access protocols such as the Small Computer Systems Interface SCSI protocol when accessing information in the form of blocks disks or vdisks over a SAN based network. SCSI is a peripheral input output I O interface with a standard device independent protocol that allows different peripheral devices such as the storage devices to attach to the storage system .

Although not shown in client can execute a client software which can be CIFS client software NFS client software DAFS client software or any other application. Client further includes a protocol stack not shown which may include TCP IP protocol stack Internet Protocol layer and its supporting transport mechanisms the Transport Control Protocol layer and the User Datagram Protocol layer .

Storage system is a device that manages storage of data that can be stored for example on storage devices . Those skilled in the art would understand that data can be stored on any other media. Storage system also executes storage operating system . In the illustrative embodiment storage operating system can be the Data ONTAP operating system available from Network Appliance Inc. of Sunnyvale Calif. As used herein the term storage operating system generally refers to the computer executable code operable on a computer that manages data access. The storage operating system can be implemented as an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

The storage operating system comprises a series of software layers that are organized as a network protocol stack including a network driver layer e.g. an Ethernet driver a network protocol layer e.g. an Internet Protocol layer and its supporting transport mechanisms the Transport Control Protocol layer and the User Datagram Protocol layer as well as a file system protocol server layer e.g. a CIFS server a NFS server etc. . The protocol stack also supports block based access protocols such as the Small Computer Systems Interface SCSI and Fiber Channel FC . In addition the storage operating system includes a disk storage module that implements a disk storage protocol such as a Redundant Array of Independent or Inexpensive Drives RAID protocol. In one embodiment disk storage module can be a software module executed on the storage system . In an alternative embodiment disk storage module can be a separate controller implemented as hardware.

Storage system further includes a disk driver module that implements a disk access protocol such as e.g. a Small Computer Systems Interface SCSI protocol.

Storage system further includes a virtualization system that may be abstracted through the use of a file system or a volume manager. The file system logically organizes the information as a hierarchical structure of named directory and file objects hereinafter directories and files on the storage devices . Each file stored on storage devices may be implemented as a set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The file system uses index nodes modes to identify files and file attributes such as creation time access permissions size and block location . The file system can be implemented as a Write Anywhere File Layout WAFL file system which can also provide volume manager capabilities. Those skilled in the art would understand that any appropriate file system may be enhanced for use in accordance with the inventive principles described herein. The volume manager can be a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as storage devices . That is the volume manager provides functions such as i aggregation of the storage devices ii aggregation of storage bandwidth of the storage devices and iii reliability guarantees such as minoring and or parity RAID .

Bridging the protocol stack and file system is anti virus filter which is responsible for intercepting I O requests such as read write open close rename etc from clients and issuing requests to scan data for viruses e.g. scan requests to the anti virus blade based on a set of rules. The term viruses means undesired codes programs commands or computer instructions particularly those introduced into a computer system network program or data for malicious purposes. Viruses may a self replicate or self reproduce b cause the loss or corruption of a program or data c cause malfunction or interruption in operation of a computer system network or other intelligent system or d permit unauthorized access to a program data computer system network or other intelligent system. A scan request operation may also find security vulnerabilities.

Anti virus filter intercepts I O requests using a filter framework described in detail in a commonly owned U.S. patent application Ser. No. 11 789 073 entitled System and Method for Filtering Information in a Data Storage System by Paul Yuedong Mu now issued as U.S. Pat. No. 7 809 868 on Oct. 5 2010 the contents of which are hereby incorporated by reference herein. Briefly anti virus filter registers I O callback procedures with a filter framework implemented at the storage system . A call to a filter invokes the filter often with passed parameters while a callback represents instructions passed to the filter for execution often to call other procedures or functions. In an exemplary embodiment of the present invention the filter framework includes an I O map not shown and an event map not shown . Both the I O map and the event map are stored in memory shown in of storage system . The I O map is a data structure that holds identifiers for filters such as anti virus filter and I O operations for which the filters are registered. Those of skill in the art would understand that any data structure can be used to hold identifiers and I O operations and that using a map is just one implementation of such a data structure. The identifiers are used to provide the registered callbacks for the registered filters. The event map is a data structure that holds identifiers for filters and filter characteristics such as an indication of whether a filter is a remote filter.

When filter framework intercepts an I O received from clients it determines which I O callback needs to be invoked and invokes the callbacks. According to an embodiment of the present invention anti virus filter registers I O callbacks with the filter framework for I O access requests coming from the protocol stack .

As will be described in more detail herein anti virus filter is also responsible for obtaining data for scanning from file system and providing the data to the anti virus application at the anti virus blade . Once the results of the scanning procedure return anti virus filter completes the client request based on the scan results. For example anti virus filter may allow the request to be served based on the scan results or blocks the request as will be described in more detail herein in the Methods of Operation section .

Still referring to anti virus blade providing anti virus services to storage system according to an embodiment of the present invention is shown. Anti virus blade communicates with storage system over a network which can be a local area network. Anti virus blade executes anti virus application interceptor module anti virus engine and virtual file filter other hardware and software components of the anti virus blade are described herein in reference to . Anti virus blade also executes a file framework module . Virtual file filter and interceptor module register their I O callback procedures with the file framework module so that the file framework module calls registered filters when an I O request is received. As described herein a callback represents instructions passed to the filter for execution often to call other procedures or functions. In an exemplary embodiment of the present invention the filter framework includes an I O map not shown and an event map not shown . Both the I O map and the event map are stored in memory shown in of anti virus blade . The I O map is a data structure that holds identifiers for filters such as virtual file filter and I O operations for which the filters are registered. The identifiers are used to provide the registered callbacks for the registered filters. The event map is a data structure that holds identifiers for filters and filter characteristics such as an indication of whether a filter is a remote filter. Those of skill in the art would understand that any data structure can be used to hold identifiers for filters and store registered callbacks. According to an embodiment of the present invention the file framework module identifies an I O request determines which I O callback needs to be invoked and invokes the callback.

Anti virus application is a commercially available product that can be provided by Trend Micro Inc. of Cupertino Calif. by Symantec Corporation of Cupertino Calif. or any other manufacturer. Anti virus application may use both rule based and pattern recognition technology to detect and remove viruses. As described herein viruses can mean undesired codes programs commands or computer instructions particularly those introduced into a computer system network program or data for malicious purposes. The anti virus application scans data for a virus using various compression algorithms such as PKZIP PKZIP SFX LHA UNIX COMPACKED UNIX LZW as well as other algorithms.

Anti virus engine is responsible for receiving requests for scanning creating a dummy file or a stub file e.g. file that has the same name as the Currently Amended file indicated in the request but does not contain data and adding an entry to a directory of a local file system . Those skilled in the art would understand that other types of data structures than file system and directory can be used. The anti virus engine is also configured to issue a read command to the stub file. According to an embodiment of the present invention interceptor module of the anti virus application registers the I O callback for the read request initiated by anti virus engine . When anti virus engine issues a read request file framework module calls the interceptor module which forwards the read to the anti virus application . The anti virus application uses its rules described in more detail herein to determine whether to initiate a scan operation. Notably anti virus engine can be implemented by a manufacturer of the storage system and does not need to be implemented by the manufacturer of the anti virus application .

Thus the present invention leverages the ability of the anti virus application to intercept an I O request using the file framework module and to initiate a scan operation without receiving a scan request from a scan server or via any other proprietary interface. This novel approach is advantageous since it does not require anti virus manufacturers to develop an interface that triggers scanning operations. This in turn allows users of client systems to be more flexible in choosing anti virus manufacturers.

According to an embodiment of the present invention virtual file filter registers its I O callbacks with the file framework module to intercept read requests initiated by the anti virus application . Callbacks and modules registered for the callbacks can be stored in a data structure such as an I O map. For example when anti virus application issues a read request to the stub file the file framework module intercepts the read and determines using I O map and or event map which module has registered a callback for this read request and invokes the callback from that module. Virtual file filter is also responsible for issuing requests for data to be scanned to the anti virus filter executed at the storage system .

Referring now to it shows communications between various components of the storage system and components of the anti virus blade to scan data stored at the storage system according to an embodiment of the present invention.

Initially storage system receives a client access request. As previously described requests can be transmitted in the form of data packets using for example the Common Internet File System CIFS protocol over Transmission Control Protocol Internet Protocol TCP IP NFS protocol over TCP IP or DAFS protocol. The request can arrive using the SCSI or FC protocol. The request can be to read data maintained by the storage system to write data or to perform other operations. Protocol stack that includes for example CIFS server NFS server DAFS server ISCSI layer or FC layer receives the data packet and performs protocol translation step .

Filter framework module intercepts the read request. As described herein anti virus filter registers I O callbacks with the filter framework implemented at the storage system . According to an embodiment of the present invention anti virus filter registers I O callbacks with the filter framework module for I O access requests coming from the protocol stack . When an I O request comes in filter framework intercepts the I O and determines using the I O map and the event map described herein which I O callback needs to be invoked and invokes the callback to call anti virus filter . Anti virus filter in turn issues a request to scan data using its rules step . Anti virus filter maintains various rules for sending a request to scan data. These rules may be stored in memory . For example a rule may indicate that a scan operation can be sent on a first read request to the file and a last write request to the file. When a predetermined amount of time passes since a most current write request is received and no other write request is issued that write operation is called a last write. The time parameter can be stored in a configuration file in a persistent storage e.g. disks . When the file is loaded in memory it becomes part of a data structure accessed by the anti virus filter .

Anti virus filter sends a request for scanning to anti virus blade . Anti virus engine at the anti virus blade receives the command at step . The anti virus engine creates a stub file and adds an entry to a directory at the local file system at step . The created stub file has the same name and size as the Currently Amended file indicated in the scan request. Anti virus engine issues a read command to the stub file. The read command is intercepted by file framework module . File framework module determines which module registered an I O callback for that command. According to an embodiment of the present invention interceptor module of the anti virus application registers an I O callback for I O issued by the anti virus engine . File framework module calls the interceptor module which in turn forwards the read request to the anti virus application at step .

Anti virus application in turn maintains rules for scanning data. These rules are typically specified by a manufacturer. Thus a rule may specify that all files need to be scanned if they were not previously scanned. Files that have been scanned are flagged to that effect. If the file need not be scanned the read request is released and it goes back to the anti virus engine successfully. In this case anti virus engine closes the file.

If the file has not been previously scanned anti virus application opens the file and issues a read command to the file thereby triggering a scan operation at step . Thus by issuing a read command to the stub file the anti virus engine leverages the ability of the anti virus application to intercept an I O request and to initiate a scan operation. This novel approach can be contrasted with prior art implementations which required a component such as a scan server to be developed to initiate a scan operation. The novel approach eliminates dependency of users of client systems from a limited number of anti virus manufacturers who develop an interface that passes requests for scanning to an anti virus application.

The file framework module intercepts the read command issued by the anti virus application and identifies a module that has registered an I O callback for this command. According to an embodiment of the present invention virtual file filter registers the I O callback for this command. File framework module invokes a callback from the virtual file filter step . Virtual file filter issues an RPC for data to be scanned to the anti virus filter at the storage system step . Those skilled in the art would understand that techniques other than sending an RPC can be used to send a request for data.

Anti virus filter at the storage system receives the request for data and forwards the request for data to the file system step . The file system either fetches the data from memory or from storage devices . The file system returns data to anti virus filter .

Thus rather than requiring the anti virus application to send a request for data to the protocol stack at the storage system and then to the file system the request for data is sent to anti virus filter which directly accesses file system for data. Since a request no longer goes to the protocol stack the request does not need to be translated to a protocol understood by the storage system . By circumventing the need to send the requests for data to the protocol stack the present invention improves performance of the storage system as compared to prior art implementations.

Anti virus filter sends the data to virtual file filter at the blade step . Virtual file filter receives the data and sends the data to anti virus application for scanning step . Anti virus application uses various algorithms to scan data step . Thus in one embodiment anti virus application reads the first 4K block of the file the last 4K block of the file and then 4K block before the last block. Those skilled in the art would understand that a block of any size can be read. For certain files anti virus application also reads beyond the end of the file. As previously described anti virus application can use various algorithms to scan data for virus. If the virus is found anti virus application provides an indication that the file is infected. Virtual file filter can intercept the results of the scanning operation if the virus is found and send the results to anti virus filter at the storage system .

Anti virus filter receives scan results. A scan result may indicate for example whether a particular file is infected or not. Anti virus filter performs an action based on the scan results step using its rules which can be provided by a manufacturer. For example a rule may indicate that if a file is infected access to the file should not be allowed and a flag to indicate that the file is infected needs to be set. A rule may indicate that if a file is not infected access to the file has to be provided.

Although the present invention has been described in the context of the storage system implemented as a NAS device those skilled in the art would understand that the storage system can be implemented as a SAN device with several modifications as described herein.

For example when a storage system is implemented as a SAN device data is presented to clients as one or more logical units LUs . A logical unit comprises data blocks configured to store information. As described herein clients send block based requests to a volume using for example SCSI or FC protocols. According to this embodiment sending a request to scan every block indicated in access requests may result in unnecessary operations. This in turn slows down performance of the storage system . Thus according to this embodiment anti virus filter at the storage system may send requests for scanning less frequently as compared to the NAS implementation . For example anti virus filter may send requests for scanning according to a schedule as to avoid blocks to be scanned unnecessarily. Such a schedule may be stored in a configuration file in a persistent storage e.g. disks . When a configuration file is loaded in memory it becomes part of a data structure accessed by the anti virus filter . In another embodiment anti virus filter sends requests for scanning for certain block addresses. To this end anti virus filter monitors write requests and stores them in memory . It also stores a list of modified data blocks since the last scan operation. When anti virus filter sends a request for scanning the list becomes part of the request. As a result a request for scanning is issued for the modified blocks. In yet another implementation anti virus filter may request scanning operations based on the source of the originated client request. Thus anti virus filter sends a request to anti virus blade to scan certain blocks.

When anti virus blade receives a request to scan data identified by a block address s it creates a stub file step . According to this embodiment the created stub file simulates a volume and has the same name and size as the volume or other level of virtualized storage such as aggregates datasets etc. Anti virus engine issues a read command to the stub file to read blocks indicated in the request received from the anti virus filter . Anti virus application intercepts the read command using the above described filter framework mechanism and issues a read command to the stub file to read blocks indicated in the intercepted read command. Virtual file filter on the anti virus blade intercepts the read request from the anti virus application using the file framework module and issues an RPC or any other type of request to the anti virus filter at the storage system to read blocks indicated in the Currently Amended scan request.

The anti virus filter receives the request and sends the request for data blocks to the volume manager to obtain data for scanning. Thus according to this embodiment the requests for scanning data are sent to the anti virus blade according to a different policy than in the NAS implementation.

In the illustrative embodiment the memory comprises storage locations that are addressable by the processors and adapters for storing software program code. The memory can be a random access memory RAM . The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures stored in memory. The operating system portions of which are typically resident in memory functionally organizes the storage system by inter alia invoking storage operations on the storage system. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the inventive technique described herein.

The network adapter comprises the mechanical electrical and signaling circuitry needed to connect storage system to the network which may comprise a point to point connection or a shared medium such as a local area network.

The storage adapter cooperates with the operating system executing on the storage system to access information requested by the clients such as client shown in . The information may be stored on the storage devices that are attached via the storage adapter to storage system . Those skilled in the art would understand that information may be stored on other media.

In one exemplary implementation storage system can include a non volatile random access memory NVRAM that provides fault tolerant backup of data enabling the integrity of storage system transactions to survive a service interruption based upon a power failure or other fault. The size of the NVRAM depends in part upon its implementation and function in the storage system. It is typically sized sufficiently to log a certain time based chunk of transactions.

Referring now to other components of anti virus blade are shown in more detail. Anti virus blade is a computer system that comprises a processor a memory a network adapter and a local storage coupled by a bus .

The processor is the central processing units CPUs of the anti virus blade and thus controls the overall operation of the anti virus blade . In certain embodiments the processor accomplishes this by executing software such as that described in more detail with reference to .

Memory comprises storage locations that are addressable by the processor and a network adapter for storing software program code such as software modules and data structures associated with the present invention. The processor may in turn comprise processing elements and or logic circuitry configured to execute software modules such as anti virus engine virtual file filter file system anti virus application and file framework module . These components were described in more detail with reference to .

Memory can be a random access memory RAM a read only memory ROM or the like or a combination of such devices. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the anti virus blade to storage system over point to point links wide area networks such as network virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network.

Local storage is a device that stores information within anti virus blade such as software modules operating system not shown and data. Anti virus blade loads software modules into memory from which they are accessed by processor .

Thus embodiments of the present invention provide an anti virus blade that can host any third party anti virus application with high performance access to a storage system. Advantageously the present invention eliminates the need to require manufacturers of anti virus applications to develop an interface such as a scan server that triggers scanning operations.

Although the present invention for purpose of explanation has been described with reference to specific exemplary embodiments it will be understood that the invention is not limited to the embodiments described. A person of ordinary skill in the art would understand that the present invention can be practiced with modifications and alternations to those embodiments or can be practiced in other embodiments within the spirit and scope of the appended claims. For example according to another embodiment instead of having an anti virus engine to issue a read command to the stub file anti virus engine invokes an Application Programming Interface API directly to anti virus application to scan the data based on the name of the stub file.

According to yet another embodiment if the created stub file is a CIFS file or NFS file anti virus application can obtain data from the storage system by sending a request to the protocol stack. Although this embodiment requires accesses to a protocol stack still it eliminates the need to implement an interface such as a scan server that initiates scan operations.

Furthermore according to other embodiments of the present invention the anti virus blade can provide off node computing services such as encryption and decryption. In such an implementation client for example issues a write request to storage system . Anti virus filter intercepts a write request and sends an encryption request to anti virus blade to encrypt data indicated in the write request. Anti virus blade encrypts the data and sends the data back to the anti virus filter at storage system . The anti virus filter in turn forwards the encrypted data to the file system . Similarly anti virus filter intercepts a read request and sends a request to anti virus blade to decrypt data. Anti virus blade decrypts data and sends the decrypted data back to anti virus filter which in turn provides decrypted data to clients .

The present invention can be implemented by an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a machine such as a general purpose computer selectively activated or reconfigured by a computer program such as a collection of instructions for execution by a machine or processor for example stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks magnetic optical disks read only memories random access memories EPROMS EEPROMS magnetic or optical cards or any type of media suitable for storing physical e.g. electronic constructions and each coupled to a computer system bus. Each of these media may be coupled to a computer system bus through use of an appropriate device for reading and or for writing the media.

Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or system.

Unless specifically stated otherwise it is to be appreciated that throughout the discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer systems registers and memories into other data similarly represented as physical quantities within the computer system.

