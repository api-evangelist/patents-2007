---

title: Method and system for enabling a device to support enhanced features
abstract: A method and system for enabling an auxiliary system, such as a WINDOWS® SIDESHOW™ device, to support enhanced features is provided. Specifically, one embodiment of the present invention sets forth a method, which includes the steps of emulating a physical communication channel to establish a virtual communication channel, encapsulating data associated with a first function defined by a first Application Programming Interface (API) and utilized to implement an enhanced feature, and sending the encapsulated data through the virtual communication channel for an embedded operation system (OS) to manage hardware resources of the auxiliary system to perform the enhanced feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08069449&OS=08069449&RS=08069449
owner: NVIDIA Corporation
number: 08069449
owner_city: Santa Clara
owner_country: US
publication_date: 20071227
---
The present invention relates to WINDOWS SIDESHOW technology and more particularly to a method and system for enabling a SIDESHOW device to support enhanced features.

Unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

Windows Vista is a commercially available operating system from Microsoft Corporation of Redmond Wash. hereinafter referred to as WINDOWS VISTA. Windows SideShow is a commercially available application program from Microsoft Corporation of Redmond Wash. hereinafter referred to as WINDOWS SIDESHOW. With WINDOWS VISTA operating systems becoming the dominant operating systems for personal computers a variety of software or hardware applications compatible with Vista based computer systems are also becoming more and more popular. One of the Vista based software hardware applications is WINDOWS SIDESHOW which is a technology that supports an auxiliary screen to the Vista based computer system.

Since WINDOWS SIDESHOW technology is initially designed to only support an auxiliary screen to display some primitive system information a conventional WINDOWS SIDESHOW device is limited in its functionality and typically supports a minimal set of hardware resources. Without much hardware resources to manage the conventional WINDOWS SIDESHOW device is configured with a relatively basic and non expandable software stack. To illustrate is a simplified block diagram showing a software stack of the conventional WINDOWS SIDESHOW device. The software stack includes built in gadget a SIDESHOW Application Program Interface API and a tiny Common Language Runtime CLR which accesses and manages hardware resources . The tiny CLR implements a subset of CLR which is a virtual machine component of Microsoft .NET initiative.

The built in gadget is equipped with simple functions such as Open Universal Asynchronous Receiver Transmitter UART and Send UART provided by the SIDESHOW API . Functions provided by the SIDESHOW API are written in languages such as C or VB.NET and are recognized by the tiny CLR . Continuing with the Open UART and Send UART examples it should first noted that Open UART is basically configured to open a physical UART port supported by the hardware resources and Send UART is configured to have data delivered to the opened physical UART port. In other words the built in gadget in the software stack can access the hardware resources by opening a physical UART port and transferring data through the UART port. However both Open UART and Send UART functions are supported by the SIDESHOW API and recognized by the tiny CLR . Since the SIDESHOW API and the tiny CLR are designed to only support a limited set of functions and interact with a minimal set of hardware resources it is difficult to enhance the functionalities or the hardware resources of the conventional WINDOWS SIDESHOW device given the inherent restrictions imposed by the software stack .

What is needed in the art is thus a method and system that enable a WINDOWS SIDESHOW device to support enhanced features and access additional hardware resources to address at least the problems set forth above.

A method and system for enabling an auxiliary system such as a WINDOWS SIDESHOW device to support enhanced features is provided. Specifically one embodiment of the present invention sets forth a method which includes the steps of emulating a physical communication channel to establish a virtual communication channel encapsulating data associated with a first function defined by a first Application Programming Interface API and utilized to implement an enhanced feature and sending the encapsulated data through the virtual communication channel for an embedded operation system OS to manage hardware resources of the auxiliary system to perform the enhanced feature.

At least one advantage of the present invention disclosed herein is to enable a WINDOWS SIDESHOW device to support more advanced features than simply displaying primitive images.

Throughout this description a computer system may include a main system and an auxiliary system. The main system typically is configured with a feature rich operating system such as WINDOWS VISTA and much computing resources such as central processing units CPUs and memory systems. The auxiliary system on the other hand is typically configured with embedded software programs and limited hardware resources. A primary display broadly refers to the display mainly driven by the main system and an auxiliary display broadly refers to the display that can be driven by either the main system or the auxiliary system. Here an example of the main system is a laptop computer and an example of the auxiliary system is a WINDOWS SIDESHOW device coupled to the laptop computer.

In one implementation the virtual UART port is a software construct emulating the same attributes of a physical UART port such as the physical UART port . Once instantiated the virtual UART port is utilized to facilitate communications between different software components that operate on the WINDOWS SIDESHOW device . To further illustrate suppose the WINDOWS SIDESHOW device includes speakers in the hardware resources . For the built in gadget to access the speakers and cause it to play back certain music the virtual UART port is instantiated and utilized so that the built in gadget can properly communicate with the embedded OS .

To illustrate how the WINDOWS SIDESHOW device of can be configured to support an enhanced feature such as playing back music suppose the WINDOWS SIDESHOW API does not support any music playback related functions but the tiny media API does. With the tiny media API in the software stack the built in gadget can be written to allow a user of the WINDOWS SIDESHOW device to select a music file to play back. However since the tiny CLR is not designed to recognize the music playback related functions defined in the tiny media API one way for the built in gadget to still cause the selected music file to be played back is to emulate a particular communication channel that is supported by the tiny CLR such as a UART port. More specifically by going through the virtual UART port shown in and described above the commands and related data intended for the embedded OS can be encapsulated and sent through the virtual UART port to reach the embedded OS . Based on the received commands and data the embedded OS then accesses the hardware resources and causes the selected file to be played back on the speakers.

In conjunction with is a flow chart further detailing a process for enabling the WINDOWS SIDESHOW device to support enhanced features according to one embodiment of the present invention. Continuing with the music playback example the embedded OS is configured to emulate a communication channel that is supported by the tiny CLR in step . In one implementation the physical UART port is emulated so that the emulated software component the virtual UART port supports the same attributes and behaviors as the physical UART port . In step the embedded OS opens the virtual UART port and also the physical UART ports. In one implementation the emulation of the virtual UART port and the opening of both the physical and the virtual UART ports takes place as the WINDOWS SIDESHOW device completes its initiation process. For a new function supported by the tiny media API and invoked to perform the enhanced feature any command or data associated with the new function is encapsulated in step before delivery through the virtual UART port . In one implementation the encapsulation is accomplished by packetizing and encoding the command or data. After the embedded OS receives the encapsulated command or data in step the embedded OS extracts the command or data. Then the embedded OS executes the command and accesses the file to be played back according to the extracted information in step . The subsequent paragraphs further detail the processes of encapsulation and extraction of data.

In one implementation for the functions supported by the tiny media API and also invoked to carry out the enhanced feature before any data associated with such functions is delivered through the virtual UART the data first goes through an encapsulation process which involves packetizing and encoding and an extraction process which involves decoding. Again in conjunction with is a flow chart illustrating a sequence of pseudo function calls to perform an enhanced feature on the WINDOWS SIDESHOW device according to one embodiment of the present invention. Here the WINDOWS SIDESHOW device is configured with a new feature of playing back music on its own speakers. If the feature is selected to play back a particular song then a pseudo function call Open UART which is supported by the WINDOWS SIDESHOW API the tiny CLR and the embedded OS is invoked in step during the initialization process of the WINDOWS SIDESHOW device . The invocation of this pseudo function call opens all communication ports both the physical and the virtual ports. After successfully opening the communication ports the data associated with the selected feature is packetized in step via the invocation of the pseudo function calls of generate packet and encode packet . is a simplified diagram representing such a packet destined to be sent to the embedded OS according to one embodiment of the present invention. Particularly the packet includes a header field containing different types of commands e.g. play pause stop forward or rewind to be executed by the embedded OS a length field containing the size of the payload and a payload field containing the information such as which music file should be accessed e.g. song .

With the data associated with the selected feature of playing back music in a packet in step the packet is sent to the embedded OS as the pseudo function call Send UART is invoked. In one implementation this Send UART function is supported by the WINDOWS SIDESHOW API . If this function is invoked with a destination port number that is specifically associated with the virtual UART port then the packet is delivered through the virtual UART port. In step the embedded OS receives the packet by intercepting it from the virtual UART port and decodes the packet by invoking the decode packet pseudo function to extract the information residing in the packet. The embedded OS executes the command extracted from the header field of to operate on the file based on the information extracted from the payload field in step . It should be noted the embedded OS provides a layer of abstraction to the built in gadget WINDOWS SIDESHOW API and tiny CLR so that they are unaware of the existence of the virtual UART port and the processes of encapsulation and extraction.

It is worth noting that for the functions provided by the tiny media API which are mainly used to implement one or more enhanced features for the WINDOWS SIDESHOW device the data associated with these newly supported functions are sent to the embedded OS through a virtual communication port. In addition the embedded OS enables the WINDOWS SIDESHOW device greater flexibilities to access and manage the hardware resources . As also mentioned above by assigning port numbers that differ from the physical communication ports supported by the hardware to correspond to the virtual communication ports the embedded OS can use the port numbers to determine where to direct the received packet.

Instead of sending data or command from the built in gadget of to the embedded OS the embedded OS may need to respond to requests from the built in gadget for certain status information. is a flow chart illustrating a sequence of invoking pseudo function calls to respond to requests from the built in gadget according to one embodiment of the present invention. Suppose the embedded OS successfully accesses the speakers and causes the selected song to be played back on the speakers. In order for the WINDOWS SIDESHOW device of to display certain status information such as how much time of the selected song has elapsed the status information needs to be sent back to the built in gadget . Similar to the sequence shown in and discussed above in step the embedded OS generates and encodes a packet containing the requested status information and invokes the Send UART function with a port number associated with the virtual UART port in step . As a result the packet is sent through the virtual UART port and is received by the tiny media API in step . Then the packet is decoded and the status information from the decoded packet is extracted by the built in gadget in step .

As has been demonstrated the WINDOWS SIDESHOW device according to one embodiment of the present invention is capable of supporting enhanced features. Such a WINDOWS SIDESHOW device is configured with an enhanced API an embedded OS and virtual communication channels. By transferring data or commands via the virtual communication channels the WINDOWS SIDESHOW device not only maintains its compatibility with the existing WINDOWS SIDESHOW technology but it also is able to support enhanced features and additional hardware resources.

While the forgoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Therefore the above examples embodiments and drawings should not be deemed to be the only embodiments and are presented to illustrate the flexibility and advantages of the present invention as defined by the following claims.

