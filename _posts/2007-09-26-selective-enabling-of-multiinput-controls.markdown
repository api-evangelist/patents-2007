---

title: Selective enabling of multi-input controls
abstract: A control system is disclosed that is configurable (e.g., by a programmer) so as to enable input from multiple sources to capture to multiple controls. Also or alternatively, the system is configurable so as to enable input from multiple sources to capture to a single control. The system also provides a consistent and extendable scheme for filtering out conflicting events for individual controls. In one embodiment, this means that the system is configurable (e.g., based on the programmer's asserted preferences) so as to enable a selective determination as to whether additional inputs can be captured for a given control.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08436815&OS=08436815&RS=08436815
owner: Microsoft Corporation
number: 08436815
owner_city: Redmond
owner_country: US
publication_date: 20070926
---
Controls are interface elements utilized by computer programmers to build graphical user interfaces GUIs . Different controls support different types of interaction with a user of a computer program. Some controls such as radio buttons check boxes drop down lists and toolbars support selection type functionality. Other controls such as tabs and scrollbars support navigation type functionality. Other controls such as text boxes and combo boxes support text input functionality. Other controls such as tooltips progress bars and labels support output functionality. Still other controls support window oriented functions. In many cases a computer programmer will have access to control toolkits that contain a collection of controls from which to choose.

Recently devices that support simultaneous or practically simultaneous activation of multiple inputs by one or multiple users have been introduced. Unfortunately current control systems are generally not configured to effectively manage this type of multiple input scheme. Many current systems are limited to single input controls which are not particularly effective in terms of their ability to support a multi input e.g. multi touch scenario. It is common for single input controls to malfunction and or appear to be broken under such circumstances.

For example one can imagine an interface that incorporates a traditional scrollbar that is a composite control containing other controls such as an UP button a DOWN button and a THUMB slide for dragging and scrolling. Within many multi input systems should one try to press the UP and DOWN buttons simultaneously the buttons will fire up and down commands at the same time. The application is unlikely to be configured to effectively handle the conflicting events.

A reliable solution for avoiding control conflicts is to limit user input for the entire application to single inputs only. However in these circumstances the multi input functionality adds no value. Thus there is a need for a control scheme configured to effectively manage multiple inputs from one or multiple users.

The discussion above is merely provided for general background information and is not intended for use as an aid in determining the scope of the claimed subject matter.

A control system is disclosed that is configurable e.g. by a programmer so as to enable input from multiple sources to simultaneously capture to multiple controls. Also or alternatively the system is configurable so as to enable input from multiple sources to simultaneously capture to a single control. The system also provides a consistent and extendable scheme for filtering out conflicting events for individual controls. In one embodiment this means that the system is configurable e.g. based on the programmer s asserted preferences so as to enable a selective determination as to whether additional inputs can be captured for a given control.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended for use as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

Within a user is shown as interacting with user interface by way of one or more of input mechanisms and . By manipulating any or all of input mechanisms and user is able to interact with controls which are created and configured by programmer by way of interaction with framework . In one embodiment multiple inputs can be simultaneously or practically simultaneously communicated from more than one of inputs and and need not necessarily originate from just a single user. It should be noted that mechanisms and can be any input mechanism such as but not limited to a mouse input mechanism a touch screen input mechanism a voice input mechanism a laser pointer input mechanism or any other mechanism that enables user to communicate input. In theory there certainly could be more than the illustrated three input mechanisms. Further all three of inputs and can be individual inputs originating from a single input mechanism e.g. multiple simultaneous inputs to a single touch screen mechanism .

It should be noted that use of the term simultaneous herein should not be construed as strictly simultaneous. Conflicts are contemplated with any period of time between inputs for example within a few seconds milliseconds or within other suitable and or configurable time periods.

Framework illustratively includes multi capture components and capture gate components . Components and including corresponding application program interfaces APIs and support extensions of the functionality of framework to accommodate specialized support for multi input controls. Multi capture components illustratively enable a control to capture input from multiple input mechanisms e.g. one or more of mechanisms and or and to redirect all events from that device s to the control. Alternatively or in addition multi capture components enable multiple controls to capture input from multiple input mechanisms e.g. simultaneous inputs from multiple input mechanisms and to distribute events from the devices to appropriate controls. Capture gate components provide an organized way for programmer to filter out conflicting events. In one embodiment components illustratively enable programmer to define control specific logic that limits user input so as to avoid conflicting situations for a particular control.

Before turning to a more detailed description of the functionality of components and within user framework it is worth at least first diverting to a brief overview of current techniques for implementing single input controls. In a typical scenario a user interface framework will provide a way to redirect input to a particular control through a method of first capturing an input device and then binding it to a corresponding user interface element i.e. a corresponding control . Thus when the input device is captured an input pipeline redirects input from that device to the capturing control ignoring where the actual position of that device is during the captured time period e.g. ignoring where a cursor is placed once the mouse has been captured .

An example of a traditional single input scenario can be found in a typical painting application that supports interaction with a mouse input device. When the user is about to paint on a depiction of a canvas he or she moves the cursor over the canvas and initiates a mouse down event for example by pressing and holding a mouse button. Upon the mouse down event the application captures the mouse device to the canvas control. This capture is terminated upon a user initiated release in the form of a mouse up event for example by releasing the held down mouse button. During the captured time period all mouse events cursor movement etc. are forwarded to the canvas control even when the cursor position is outside of the canvas area e.g. over a toolbar user interface element .

Components illustratively extend the traditional approach by treating all pointer like devices including touch as independent physical or virtual devices and allowing a control library or an application to capture any of those devices independently. Thus in one embodiment a control is configured to be multi touch aware such that it will capture any contact that happens over it and will route all corresponding subsequent events to the control.

In one embodiment but not necessarily framework is configured to impose a restriction so as to limit the capture of an input device to a single control. Such a restriction may avoid potential ambiguity. However it is certainly contemplated for a single control to be configurable to capture multiple input devices. In one embodiment framework is configured to raise GotCapture and LostCapture events as acknowledgement that a capture has succeeded or has been released. In one embodiment when a device is disconnected e.g. when a finger leaves a touch device when the mouse button is released etc. framework is configured to release the capture automatically.

Components illustratively support a filtering out of conflicting events. In order to provide context for the description of this functionality an example will be provided. is a depiction of an example user interface . Interface is illustratively part of a painting application that enables a user to create a drawing in a pallet area . A group of buttons enables the user to switch between different functions e.g. paintbrush eraser magnifying glass etc. an illustrative four different buttons are shown in . A scroll bar enables the user to move the pallet area up and down as desired. A splitter divides a left side of the interface from a right side. Those skilled in the art are likely to be familiar with applications having interfaces substantially similar to interface .

In one embodiment capture gate components enable programmer to specify how various controls manage multiple inputs. Components illustratively provide an abstract class CaptureGate with at least two operations namely 1 Try to Acquire and 2 Release. Programmer through interaction with framework can leverage the CaptureGate functionality in order to enable appropriate implementation for a given control.

In one embodiment capture gate components extend framework by providing support that enables CaptureGate to be set in association with a particular user interface element. Further in one embodiment components are configured to find the top most CaptureGate along the parent chain for a particular element.

Those skilled in the art will appreciate that the details as to how capture gate functionality is integrated into a given user interface framework will vary based on the implementation details associated with a given framework. In other words the details of capture gate implementation is likely to be framework specific. As an example the Windows Presentation Foundation WPF a graphical subsystem associated with products offered by Microsoft Corporation of Redmond Wash. provides support for the ability to define an attached property that can be set and retrieved on any user interface element in the visual tree. In this case CaptureGate can be implemented as a value of an attached property. This is but one example of implementation within a specific framework.

Typically a user interface framework exposes support for the ability to manipulate capture through Capture and Release methods. In one embodiment capture gate components extend those methods with a capability to find the top most CaptureGate and to try to acquire it. An error is illustratively returned if the Acquire fails e.g. for the Capture . In addition components are configured to find the top most CaptureGate and Release it e.g. for the Release .

Still further in one embodiment at the framework level capture gate components illustratively provide implementation for specialized CaptureGates having specialized functionality. For example a SingleCaptureGate illustratively limits acquisition to a single device only. The SingleCaptureGate is essentially a specialization of the abstract CaptureGate class. Capture gate components illustratively empower a control author with an ability to choose to implement another CaptureGate with the same interface Acquire and Release to provide any behavior. For example if a button requires that it should be pressed by N simultaneous contacts the control author can provide a CaptureGate that allows N inputs at the same time and filters out the rest. Those skilled in the art will appreciate that the example specialization provided herein are just several of many examples of CaptureGate customizations within the scope of the present invention.

Accordingly in one embodiment support is provided to enable an author of a control class e.g. programmer to designate the class as single input only by setting CaptureGate on the control UI element. For the example above all RadioButtons Up and Down buttons may have SingleCaptureGate set on them in the Button constructor. When the button or any control tries to capture the input the capture method will automatically find the top most CaptureGate for the RadioButton1 GroupBox will be used as a source of the CaptureGate and try to acquire it. In one embodiment if the Capture returns a false indication then the control will ignore the input from that device and subsequent events from it. Continuing the example of shows certain user interface elements marked with CaptureGate indicated by dark circles so as to filter out unsupported inputs.

In one embodiment the other methods described herein are internal for the user interface framework and are indirectly called for example through Capture and Release which most user interface frameworks provide. All this being said those skilled in the art will appreciate that other implementation schemes are also within the scope of the present invention.

The embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with embodiments disclosed herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephone systems distributed computing environments that include any of the above systems or devices and the like.

The embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Those skilled in the art can implement the description and figures provided herein as processor executable instructions which can be written on any form of a computer readable medium.

The embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the embodiments include a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . Programs are shown as possibly including one or more components of a user interface development environment embodiments of which are described herein in detail. This is but one example of where such components might be implemented. Other implementations e.g. as part of programs operating system or programs should also be considered within the scope of the present invention.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

