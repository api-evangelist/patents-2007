---

title: Directory server plug-in call ordering
abstract: A method and apparatus for ordering callbacks for server plug-ins of a Lightweight Directory Access Protocol (LDAP) directory server. Each plug-in registers with the LDAP server and has a designated priority and set of dependencies. The priority and dependency data are stored in an LDAP callback configuration entry or set of entries. The LDAP server analyzes the priority and dependencies to determine the order of each plug-in or individual callback relative to one another. This allows the LDAP directory server and LDAP operations to rely on the order of callbacks thereby improving the efficiency of the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095625&OS=08095625&RS=08095625
owner: Red Hat, Inc.
number: 08095625
owner_city: Raleigh
owner_country: US
publication_date: 20070228
---
Embodiments of the present invention relate to the order in which calls to server plug ins are executed. Specifically the embodiments relate to a method and apparatus for configuring the order in which calls to server plug ins are executed.

The Light Weight Directory Access Protocol LDAP has become very popular due to its efficient and fast data access. A large number of applications services are currently in use and being developed which use an LDAP directory as their centralized data repository.

The LDAP directory stores entries as a tree. Each entry may consist of one or more attribute names and attribute values. An entry may be uniquely identified by its distinguished name DN that may include a common name cn attribute of the entry and DN of a parent entry.

The contents of the entries are governed by an LDAP directory schema. The schema defines object classes and each entry has an objectClass attribute containing named classes defined in the schema. The objectClass attribute may be multivalued and contain the class top as well as some number of other classes. The schema definition for each class an entry belongs to defines what kind of object the entry may represent e.g. a person organization or domain . Membership in a particular class gives the entry the option of containing one set of attributes optional attributes and the obligation of containing another set of attributes mandatory or required attributes . For example an entry representing a person might belong to the class person Membership in the person class would require the entry to contain the sn and cn attributes and allow the entry also to contain userPassword telephoneNumber and other attributes.

The LDAP directory may be maintained by an LDAP directory server. The LDAP directory server may include a set of modules or services that are available to the server as plug in modules. The plug in modules each register with the LDAP directory server during a start up sequence. The registration process make the plug in modules known to the LDAP directory server as well as the functions that are available from each plug in. The functions may be referred to as calls or callbacks. For sake of clarity these funcations are referred to herein as callbacks. The order that callbacks are executed by an LDAP directory server are not guaranteed but correspond to the order in which the respective plug in modules are registered with the LDAP directory server. Thus LDAP operations that utilize plug in callbacks cannot rely on the order of their execution and such operations must be utilized or programmed in accordance with this limitation to ensure data coherency.

Described herein is a method and apparatus for ordering callbacks for server plug ins of a Lightweight Directory Access Protocol LDAP directory server. Each plug in registers with the LDAP directory server and has a designated priority and set of dependencies. The priority and dependency data are stored in an LDAP callback configuration entry or set of entries. The LDAP directory server analyzes the priority and dependencies to determine the order of each plug in or individual callback relative to one another. This allows the LDAP directory server and LDAP operations to rely on the order of callbacks thereby improving the efficiency of the system.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be born in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing computing calculating determining displaying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each of which may be coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine accessible storage medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine accessible storage medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other type of machine accessible storage media.

The clients are coupled to the LDAP directory server via the network which may be a public network e.g. Internet or a private network e.g. a virtual local area network VLAN . The network may be a wide area network WAN such as the Internet a local area network LAN or similar type of network. The LDAP directory server may contain a server front end responsible for network communications plug ins or modules for server functions such as access control and replication a basic directory tree containing server related data and a database back end plug in responsible for managing the storage and retrieval of LDAP repository data and similar components.

In one embodiment the clients communicate with the LDAP directory server via a web server not shown . For example the clients may execute web browsers that communicate with the web server using HTTP to request information. The web server may then communicate with the LDAP directory server using LDAP to retrieve requested information from an LDAP repository . Alternatively the clients may communicate directly with the LDAP directory server using LDAP to request information stored in the LDAP repository .

The network architecture may also include one or more application servers that hosts various applications requesting information from the LDAP directory server . The application servers operate as clients in communication with the LDAP directory server . Similar to the clients the application servers may communicate with the LDAP directory server directly or via a web server.

The LDAP repository may be part of the LDAP directory server or it may reside externally e.g. on a database server . The LDAP repository may contain a tree of data entries. The structure of the entries may be specified in the definition of the LDAP repository . The definition of the LDAP repository may be represented as a schema a table or some other data structure and may reside independently or inside the LDAP repository . For example the schema may be included in the LDAP repository as a collection of LDAP repository entries rooted at the base DN cn schema.

The schema may define object classes and attributes associated with each object class. Each entry in the LDAP repository has an objectClass attribute containing one or more classes defined in the schema. The schema definition for each class that an entry belongs to defines what kind of object the entry may represent e.g. a person organization or domain .

In one embodiment the LDAP server may include a callback order list plug in registration module plug in initialization module and similar modules. In other embodiments these modules may be implemented as plugins or similarly implemented to provide services to the LDAP server . Any number of plug ins A C may be in communication with the LDAP server and provide any number of services to the LDAP server .

In one embodiment each plug in A C may be initiated by a plug in initialization module . The plug in initialization module may select the plug ins to be executed and the order in which the plug ins are started. The start up of plug ins may be controlled by the plug in initialization module during the boot sequence for the LDAP directory server . The plug in initialization module may also manage the initialization of plug ins during the normal operation of the LDAP directory server . The plug in initialization module may be a discrete module or may be part of a plug in management sub system or module that manages communication and other interaction between the LDAP directory server and the plug ins A C.

In one embodiment the plug in registration module may receive and service registration requests from plug ins A C initialized by the plug in initalization module . The registration module may manage configuration data as well as the callback order list . The plug ins A C register through the registration module by sending messages or invoking functions or methods of the registration module during the intialization of the plug ins A C or after initialization. The registration process allows the plug ins A C to notify the LDAP directory server of their availability including the functions and services provided by the plug ins A C as well as the methods and functions available for use by other modules and subsystems.

The callback order list is a data structure maintained by the LDAP directory server to determine the order in which functions and services of plug ins are utilized. If an LDAP operation utilizes multiple plug in services or functions directly or indirectly the execution of the services or functions that is the use of callbacks is ordered according to the list to ensure the coherent operation of the system. The callback order list may be used to enforce the order of callback execution by any module plug in client application or similar component of the LDAP system. For example an LDAP operation may include callbacks to a first plug in A and a second plug in B. However the callback to the first plug in A requires the completion of a callback to second plug in B. The callback order list may be used to enforce this ordering by placing the second plug in at a higher priority rank or similar position within an ordering hierarchy relative to the first plug in hence the relative order of execution can be guaranteed. The callback order list may be any data structure capable of representing an order of items including a linked list tree structure flat list or similar data structure.

At system startup the plug ins are not yet running and cannot be utilized by LDAP operations until they register and their callbacks are entered into the callback order list. LDAP operations may be executed using registered callbacks during startup even though not all of the plug ins have completed registration because relative order and dependencies between the plug ins and callbacks will be preserved thereby ensuring data coherency and improving LDAP directory server efficiency.

During the initialization of the LDAP directory server each of its components are started including the plug in initialization module block . The plug in initialization module may start the process of initializing each of the plug ins for the LDAP directory server. The LDAP directory server may also initialize its registration module to service registration requests from the plug ins block . The registration module may record or start an insertion operation to add each plug in to the callback order list. In another embodiment a plug in may have multiple callbacks associated with it. Each of these callbacks may be ordered separately allowing different callbacks of the same plug in to have separate priorities and dependencies. The registration module may be initialized or start prior to in parallel with or after the plug in initialization module.

The plug in initialization module may search for available plug ins or may access a configuration file or entry in the LDAP repository to determine which plug ins to initialize or which plug ins are present. The plug ins may be initialized serially or in parallel. For sake of clarity an embodiment with serial initialization is described. The principles and concepts present are equally applicable to parallel or multi threaded initialization of plug ins. The first plug in may be identified and its configuration data may be accessed block . The configuration data may include a set of users specified settings default settings or administrator settings for the plug in initialization parameters. These settings and parameters may be applied in the invocation instantiation execution or similar initialization of the plug in block . The plug ins initialize and run as separate processes threads or similarly execute.

After the plug in has been initialized or during the initialization process the plug in may generate a registration request or call the registration module block . The registration module may handle each of the registration requests in a first in first out prioritized or similar processing order scheme. The registration module may retrieve configuration priority and dependency data for each plug in as its registration request is received from a configuration file or similar source block . Priority and dependency data as well as other data may be stored as attribute values and retrieved using standard LDAP operations by the registration module initialization module or other component of the LDAP directory server. In another embodiment the registration requests may include the priority and dependency data. The registration module may either retrieve callback information for a plug in requesting registration or the request may include information about the callbacks to be registered either separately or together with the plug in.

The registration module processes the registration of each plug in including analyzing the callbacks block . The registration module may directly manage the insertion or addition of a callback to the callback order list or may utilize a separate dedicated callback insertion function that may either be a standalone function or a part of a library or application programming interface API block . The callback insertion process determines the proper location of each plug in or callback in the callback list and returns a success or fail feedback indicator to to the registration module. The plug in registration module may continue to register plug ins as the registration requests are received or stored in an input queue.

The plug initialization module may continue to search or identify plug ins to be initialized during the start up process or throughout the operation of the LDAP directory server. A check may be made to determine if all of the plug ins have been initialized or if the search for plug ins has completed block . If all of the known plug ins have not been initialized then the next plug in is selected and initialized block . If all of the known plug ins have been initialized then the initialization process may be halted rechecked intermittently block or similarly checked throughout the runtime of the LDAP directory server.

At the completion of the process a callback order list is created that ensures the proper order in the execution of plug ins and callbacks for the LDAP directory server. Any module or plug in may access the callback list as part of the enforcement of the list. A callback list may be structured to only include plug ins only include individual callbacks or to include a mix of plug ins and individual callbacks.

A position for the next stage of the insertion process depends on the outcome of the search for a match to the dependency. If the plug in or callback upon which the current plug in or callback depends has already been registered and added to the callback order list then the search continues from the position in the list after the position of the plug in or callback from which it depends to ensure that the current callback or plug in executes after its dependency block . If the current callback or plug in has more than one dependency then the dependency that is found deepest or latest in the callback order list sequence is used for this purpose and the process continues from the position after this dependency.

If the current plug in or callback does not have any dependencies or if there are no matches in the callback order list then the process continues from the first position in the ordered callback list. This may occur if there are no dependencies for the current plug in or callback or if the current plug in or callback is one of the first to register.

A check is then made to compare the priority of the registering plug in or callback with the plug in or callback at the current position in the ordered callback list block . If the registering plug in or callback has a priority that is lower than that of the plug in or callback at the current position in the list then the process advances to the next position in the callback list block . This comparison process may continue in this loop until the plug in or callback in the current position has a lower priority that is the registering plug in or callback has an equal or higher priority than the plug in or call back at the current position.

If the registering plug in or callback has a priority that is equal to or higher than the plug in or callback at the current position in the ordered list then the registering plug in or callback may be inserted at the current position block . In one embodiment this may push the plug in or callback at this position to a lower or higher position in the ordered list to make room for the inserted plug in or callback. In another embodiment more than one plug in or callback may be placed at the same level or tier in the ordered callback list. After insertion of the plug in or callback a search may be made of the remaining list to ensure that no dependency conflicts are present block . A conflict may occur if the list has been corrupted or updated without mutual exclusion mechanisms or under similar conditions.

An outcome of the search is checked to determine if a conflict has been discovered block . If a conflict is discovered then the insertion may be rolled back or similarly undone block . An error message may be generated and sent to the calling module such as the registration module block . If no conflict is found then the insertion may be confirmed block . The confirmation may be a return from the insertion processing module a return with an indicator of a successful insertion a notification of a successful insertion a storage of the modified ordered callback list or similar action.

The illustrated callback order list is ordered from top to bottom. The unregistered plug ins are listed in the order that they are to be processed in this example but there may be no guarantee of the order in which the plug ins are initialized as it is a non deterministic process. The top to bottom representation or order is for purposes of illustration and one skilled in the art would understand that the ordering is maintained based on the characteristics of the data structure used to implement the callback order list .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device may represent one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

The machine accessible storage medium may also be used to store LDAP repository data entries . LDAP repository data entries may also be stored in other sections of computer system such as static memory .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Thus a method and apparatus for managing an LDAP ordered callback list have been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

