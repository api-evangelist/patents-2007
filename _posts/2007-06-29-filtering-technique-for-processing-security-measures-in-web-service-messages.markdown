---

title: Filtering technique for processing security measures in web service messages
abstract: A message gateway apparatus is provided for use in a web service system to process a message containing a request for a destination web service application, in which the message includes a plurality of events within a structured document conforming to a web service protocol and each event of the plurality of events has a name and a content thereof. The message gateway apparatus comprises a message parsing module configured to sequentially identify the events of the plurality of events of the message, an input object creation module configured to sequentially extract the events of the plurality of events from the message parsing module, and a message filtering module configured to sequentially access the events of the plurality of events as the events are extracted from the message parsing module by the input object creation module to analyze the name of each event and perform security processing on the content of each event for which the corresponding name indicates that security measures have been applied according to a security protocol. The input object creation module is configured to construct an input object including input parameters for the destination web service application based on the message. The input object creation module constructing the input object by adding a representation of each event of the plurality of events to the input object after each event is accessed by the message filtering module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07934252&OS=07934252&RS=07934252
owner: International Business Machines Corporation
number: 07934252
owner_city: Armonk
owner_country: US
publication_date: 20070629
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to processing web service messages and particularly to techniques for efficiently processing security information in web service messages containing a requests for destination web service applications.

Web services are self contained self describing modular applications that can be described located and invoked over a computer network such as the World Wide Web. Web services utilize standardized interfaces and protocols for example a Web Application Programming Interface API to implement integration methods that allow different entities or web based applications to communicate data logic and processes with one another over a network. Furthermore these standardized methods permit different applications to exchange resources with other entities or applications that are running on different operating systems.

Web services generally rely on open industry standards that include for example XML extensible markup language SOAP WSDL Web service description language and UDDI universal description discovery and integration . XML provides a general data model oriented framework for the development and storage of application specific languages and information that can be represented as a tree based data structure. SOAP is an XML based extensible message envelope format that is used to transfer resources over particular transport protocols such as HTTP SMTP and FTP. A SOAP message also referred to as a SOAP envelope includes a header and a body of tagged data expressed as an XML listing. WSDL is used to describe what a web service offers and UDDI is a registry listing available web services which uses WSDL as a language.

As the use of web services has continued to increase concerns regarding the integrity confidentiality and authenticity of transferred messages have led to the development and continuing evolution of security specifications for web services. WS Security Web Services Security provides an evolving industry standard for securing a web service that defines a SOAP header element to carry security related data. WS Security specifies how one would embed the security information laid out by other specifications within a SOAP message as well as how to attach security tokens. For instance if XML Signature is used in a WS Security header element this header can contain the information defined by XML Signature that conveys how the message was signed the key that was used and the resulting signature value. Likewise if an element within the body of the message is encrypted the encryption information such as that conveyed by XML Encryption can be contained within the WS Security header element.

Generally upon receiving a web service message an application will process the data using object oriented APIs to create some form of internal representation of the message s contents. For example XML parsers such as Document Object Model DOM and Simple API for XML SAX may be used to process XML listings. DOM parsers provide an interface oriented API that allows for navigation of the entire document by transforming it into a tree structure of node type objects and branches representing the document s contents. SAX parsers function as a streaming push parser with an event driven API in which user defines a number of callback methods that will be called when events occur during parsing.

Tree based parsers like DOM must read the entire document into memory before any processing can begin so the amount of memory used by such a parser is a performance issue particularly because an in memory parse tree tends be several times larger than the document it models. For this reason the inventors herein have recognized that using a tree based parser for processing web service security information can be inefficient. For example the processes of validating and canonicalizing XML messages both require inefficient traversing of the parse tree and the process of decrypting messages requires the generation of a second parse tree for the decrypted data and discarding of the first parse tree for the pre description data.

Event based parsers like SAX are unidirectional thus previously parsed data cannot be read again without starting the parsing operation again. For this reason the inventors herein have recognized that using an event based parser for web service security processing can also be inefficient. For example certain kinds of XML security processing may require information from any already parsed part at any time in the parsed XML message and the determination of the required part may be dictated by the content of a later event. In the case the application would need to inefficiently record all of the previously parsed information.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a message gateway apparatus for use in a web service system to process a message containing a request for a destination web service application in which the message includes a plurality of events within a structured document conforming to a web service protocol and each event of the plurality of events has a name and a content thereof. The message gateway apparatus comprises a message parsing module configured to sequentially identify the events of the plurality of events of the message an input object creation module configured to sequentially extract the events of the plurality of events from the message parsing module and a message filtering module configured to sequentially access the events of the plurality of events as the events are extracted from the message parsing module by the input object creation module to analyze the name of each event and perform security processing on the content of each event for which the corresponding name indicates that security measures have been applied according to a security protocol. The input object creation module is configured to construct an input object including input parameters for the destination web service application based on the message. The input object creation module constructing the input object by adding a representation of each event of the plurality of events to the input object after each event is accessed by the message filtering module.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a computer implemented method for processing a message containing a request for a destination web service application in which the message includes a plurality of events within a structured document conforming to a web service protocol and each event of the plurality of events has a name and a content thereof. The method comprises sequentially extracting the events of the plurality of events from the message. The method further comprises sequentially accessing the events of the plurality of events as the events are extracted to analyze the name of each event and perform security processing on the content of each event for which the corresponding name indicates that security measures have been applied according to a security protocol. The method further comprises constructing an input object including input parameters for the destination web service application based on the message by adding a representation of each event of the plurality of events to the input object after each event is accessed by the message filtering module. The method further comprises transmitting the input object to a web service application processing unit that performs processing for the destination web service.

Computer program products corresponding to the above summarized method are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution that can be implemented to more efficiently process security measures in a web service message containing a request for a destination web service application.

The detailed description explains exemplary embodiments of the present invention together with advantages and features by way of example with reference to the drawings. The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

The following disclosure describes exemplary embodiments of filtering techniques and mechanisms for processing web service security measures contained in an incoming web service message received by a destination web service application server. In particular the processing of the web service security measures is performed by a filtering module that sequentially pulls events from the web service message using a streaming pull parser. The following is intended to provide a detailed description of an exemplary embodiment of the invention and should not be taken to be limiting of the invention itself. Rather any number of other embodiments may fall within the scope of the invention which is defined in the claims following the description.

Turning now to the drawings in greater detail is a block diagram illustrating an exemplary web service system in which exemplary embodiments of the present invention may be implemented and operate. Web service system allows for the exchange or transport of web service data or web service messages over a communications network between multiple web service client applications to any of multiple web services hosted by a web service application server or provider . Web services may include some combination of programming and data that are made available through application server for end users and other network connected application programs.

When a client application needs to invoke a remote web service at application server the invoking client application generates a request message in a web services protocol describing arguments to be given to the web services and requests processing by the web services. Upon receiving the request message application server performs the processing for the requested web services and returns a response message describing return values of the web services to the client application. In exemplary web service system client applications respectively send web service request messages and receive web service response messages 

Client applications are software applications that include one or more sequences of instructions that are executable by one or more processors. For example applications may be programs that are executable on a computer system such as the system illustrated in described below. Client applications are configured to transmit processing request messages to application server through network . Request messages request that application server perform processing for web services provided by the application server. Client applications are configured to thereafter receive through network processing response messages transmitted by application server which has performed the processing for the requested web services and obtain results of the processing performed by the application server.

In exemplary embodiments request messages can have any structured framework for storing an amount of text or any data the content of which can be defined as a particular structure. Some common web service communication protocols that may be employed for this purpose include SOAP and XML RPC extensible Markup Language Remote Procedure Call . Both of these protocols allow remote procedure calls to be requested and the results returned using an XML based data format. Request messages may include invocations to URLs Uniform Resource Locator of web services and may include a request to access or receive data from the web services. Request messages use one or more of several transportation protocols i.e. HTTP HTTPS SMTP XMPP FTP TCP etc. and are transferred over a particular transportation protocol layer. Request messages may be sent directly through network to application server or may be routed through one or more intermediaries that may modify request messages before they arrive at application server .

In exemplary embodiments described herein request messages are sent as XML element attributes or listings within SOAP envelopes that include a header and a body. SOAP defines an XML structure to call a method and pass parameter to that method and also defines an XML structure for return values that were requested. The SOAP envelopes may further include or may be modified before they arrive at application server to include web service messaging enhancements or layers. For example the SOAP envelope may be secured using forms of security measures applied according to web service specifications such as for example WS Security WS SecurityPolicy WS Trust WS Privacy WS Secure Conversion WS Federation WS Authorization RPC Method Authorization XML Encryption XML Signature XKMS SAML XACML binary security tokens such as assertions X.509 certificates Kerberos tickets and encrypted keys and combinations thereof for enhancing the integrity confidentiality and authenticity of the message before it is received by a web service.

In exemplary embodiments described herein the headers of the SOAP envelopes for request messages include security features and information incorporated at the application layer according to the current and evolving specifications for WS Security which describe ways of applying XML Encryption XML Signature XML Canonicalization security tokens and other message integrity and confidentiality configurations to SOAP messages.

Response messages may be returned and received by clients as structured documents such as XML documents. Response messages may be implemented in SOAP envelopes received from application server . Response messages use a particular transport protocol and are transferred over a particular transportation protocol layer. Response messages may use the same transport protocol as request messages .

Client applications and web services communicate with each other as well as with to other applications and web service systems through network . Network is configured to receive and pass on request response messages and accordingly and to use the transportation protocol or protocols used by messages and . Network includes intranets extranets and the Internet and may contain any number of network infrastructure elements including routers switches gateways etc. For example network may be the public Internet or a private LAN.

Network is connected to application server which provides web services to client applications through the network. Network passes each of request messages as a request message to and receives each of response messages as a response message from a web server application processing unit within the application server through a message gateway such as for example a firewall. Request message includes a SOAP envelope carrying a request message sent by one of client applications or by another client application web service or intermediary party. Response message may include a SOAP envelope carrying a response message to be received by one of client applications .

Message gateway receives request message in the form of a SOAP envelope from network and passes response message to the network. Message gateway serves as a SOAP processor that performs lexical analysis of the SOAP envelope of request message using the contents of a plurality of web service specification events in the message syntax as inputs to create an input object such as a Java object including parameters for invocation of one or more of web services based on the result of the lexical analysis. Message gateway sends input object to web service application processing unit which calls the appropriate web service s that correspond s the method invocation of the input object executes the appropriate logic and returns the result as an output object such as a Java object that includes the return values of the invoked web service s to the message gateway. Message gateway converts output object into SOAP response message and transmits the response message through network to the invoking client application.

As illustrated application processing unit such as WebSphere a product of International Business Machines Corporation oversees the execution of multiple web services that reside on application server . Application processing unit is configured to perform processing for application server based on input object received from message gateway and to return a result of the processing as output object to the message gateway. Application processing unit may also be supported by a database management system which may be any conventional data repository for storing managing and retrieving data. In exemplary embodiments database may be a relational or object relational database management system such as DB2 a product of International Business Machines Corporation.

In exemplary embodiments database may be internal to application server as shown in or alternatively reside externally on a separate machine. In exemplary embodiments application server may use a single database to serve multiple web services as illustrated in or alternatively use a separate database for each separate web service.

Referring now to a block diagram of an exemplary embodiment of message gateway that includes a parser a filtering module and a message processing engine is illustrated. Parser is based upon on a streaming pull parsing API and thus has the ability to read arbitrarily large documents while leaving control to the pulling application here message processing engine . Filtering module is configured to receive events included in an incoming request message as they are sequentially pulled or extracted from parser by message processing engine before they are received by the message processing engine. Filtering module identifies extracts and processes the contents of security related events then passes the contents of the each event as processed sequentially to message processing engine . Message processing engine which is a software application such as for example Apache Axis2 that knows how to handle SOAP requests and responses is configured to create input object based on the events pulled from filtering module then send the input object including parameters to application processing unit for execution of one or more of web services . Message processing engine is also configured to receive output object resulting from the web service processing by application processing unit and convert the output object into a SOAP message to send as response message .

In the present exemplary embodiment parser is installed as a StAX Streaming API for XML parser which is a streaming XML pull parsing API for reading and writing XML documents. By implementing parser as a streaming pull parser message gateway is able to utilize filtering module and StAX parser events to sequentially analyze and process the contents of security related events included in incoming request message before each event is loaded into message processing engine .

To enhance processing of request message filtering module includes one or more application layer filter units that each performs processing on the contents of varying security related event classes of the incoming request message. In the present exemplary embodiment filtering module examines the data contained in request message and performs filtering decisions based upon WS Security event information specified in SOAP header of the message. As illustrated in as message processing engine iterates through request message by sequentially pulling events from parser filtering module tests each event inspects its attributes and if a selected WS Security security event is identified processes the message using handlers that are responsible for acting on a header portion or a body portion or both of a SOAP message in a certain way. For example filtering module may include filter units in charge of recognizing WS Security event specifications for XML Encryption XML Signature and XML Canonicalization and corresponding handlers in charge of performing the appropriate integrity authentication and confidentiality processing on the appropriate part of request message to prepare it for processing by web services .

As permitted the processed event information which may include parts that were modified by filtering module during the WS Security processing may be built into input object by message processing engine as a parse tree structure representing the SOAP request message data as processed by the filtering module. By performing the security processing before building input object as described message gateway can allow for more efficient message processing. For example by processing the complex functionality implemented by security specifications such as XML Signature and XML Canonicalization using pulled StAX events in filtering module prior to generating a parse tree for the data in message processing engine the present exemplary embodiment avoids inefficient parse tree traversing steps within message processing engine that would otherwise occur during WS Security processing. As another example by performing decryption using StAX events in filtering module prior to generating input object in message processing engine the present exemplary embodiment avoids the inefficient processing steps of generating a first parse tree representing the pre decryption data decrypting the data parse tree to form a second parse representing the decrypted data and discarding the pre decryption parse tree.

Referring now to a block diagram of an exemplary embodiment of a message gateway that can be installed in exemplary application server in is illustrated. In this example message gateway includes a filtering module having a pipeline of multiple filter units and an AXIOM AXIs Object Model builder after the last stage of the pipeline. AXIOM builder which can be implemented within an Apache Axis2 message processing engine is thus the ultimate receiver of parser events. Filtering module and AXIOM builder are in communication with a StAX parser in the same manner as filtering module and message processing unit as described above with respect to the exemplary embodiment shown in . The use of a streaming pull parser such as StAX parser permits the chaining of the output one filter unit to the input of the next as depicted in .

Because filter units operate as event level filters that are each specific to one security related event or a subset of security related events each filter unit may not have an overall document view and may not know what to expect to grow as child nodes. In addition because parser is a streaming parser filter units may not get events that have already been pulled by AXIOM builder once before. In many instances however a handler function within one of the filter units may require information about a part of an event that has already passed through filtering module and further the determination of which part and or event the required information will come from may depend on the content of a later event. Thus filtering module should provide a way of providing information from prior events as a message is being processed by filter units 

In the present exemplary embodiment each filter unit is provided with a reference to AXIOM builder as indicated by dashed lines in . AXIOM builder incrementally builds input object for request message in memory within AXIOM tree but will not create the entire object model at once. Rather AXIOM builder only builds when the relevant information is absolutely required thereby incrementally building AXIOM tree . This deferred construction allows for referencing of AXIOM builder for one part of AXIOM tree even while other parts of the input object tree remain incomplete. Because each of filter units has a reference to AXIOM builder each filter unit can access the latest version of AXIOM tree under construction. Thus the present exemplary embodiment avoids the inefficient processing that would result by having each filter separately record the information in earlier parts. Rather filter units can directly reference AXIOM builder to get information from former parts.

An example of a process that may utilize filtering module and AXIOM builder of the present exemplary embodiment is the process of building a namespace mapping to obtain the namespace declarations for data that has been decrypted within one or more of filter units . Namespaces allow the use of multiple schema definitions within a structured document by building a grammar from several different schemas and providing a way to resolve name conflicts between the schemas. For XML documents namespaces are referred to using a mapping from an abbreviated namespace prefix to the full namespace URI. The namespace prefix is convenient for representing the namespace but is meaningful only within the document that defines that mapping. It is the namespace URI that defines the global meaning. Therefore the concept of a namespace prefix is not meaningful for raw data that has been decrypted within the streaming flow of filtering module because the raw decrypted byte sequence does not have the XMLNS mapping of the prefixes to namespace URIs as declared by the decrypted data s ancestors. Thus the namespace declarations of each decrypted part s ancestors should be gathered so that the each decrypted part can be wrapped with a dummy element that provides the corresponding prefix to namespace URI mapping.

For example because XML Encryption allows for encryption of any arbitrary element or data within an XML document filtering module does not know in advance which parts of inbound request message are encrypted. Thus if WS Security processing were performed within separate filter units without the references to AXIOM builder each filter unit would need to record all of the namespace declarations in the message as it is parsed. In the present exemplary embodiment however because each filter unit has a reference to AXIOM builder namespace declarations can be gathered if and only if encrypted parts are encountered.

If an encrypted part is encountered at step filtering module initiates the process of gathering the namespace declarations of the part s ancestors at step by referencing AXIOM builder which locates the encrypted part s ancestor in AXIOM tree . At step AXIOM builder creates and returns a dummy element that provides the prefix to namespace URI mapping declared by the part s ancestor. The encrypted part is then decrypted at step in one or more of filter units and wrapped with the dummy element returned by AXIOM builder . The process then returns to step and repeats pulling the next event from parser . Because process steps are only executed for encrypted parts and because storing the ancestor of an encrypted part in AXIOM builder takes less memory than storing all declared namespaces the exemplary process illustrated in can avoid the inefficient recording of all the namespace declarations in one or more of filter units 

Referring now to a block diagram of another exemplary embodiment of a message gateway that can be installed in exemplary application server of in is illustrated. Message gateway includes filtering module having a pipeline of multiple filters an AXIOM builder after the last stage of the pipeline filter and a shared memory component for temporarily sharing data that can be referenced by each of the multiple filters as indicated by dashed lines. As with message gateway shown in AXIOM builder is the ultimate receiver of parser events and filtering module and AXIOM builder are in communication with a StAX parser in the same manner as filtering module and message processing unit as described above with respect to the exemplary embodiment shown in . The use of a streaming pull parser such as StAX parser permits the chaining of the output of one filter to the input of the next. Shared data can for example be declared as a global variable at shared memory component that is accessible by all filters 

In the present exemplary embodiment shared memory component stores the information of the current event pulled from parser . Because the information of shared memory component is shared by each of filters the overlapping of multiple filters to realize complicated functions can be avoided. Moreover the overhead of an invocation for each event in each filter can be avoided because each filter does not have to get the information of the current event for itself.

The event processing of the exemplary embodiment illustrated in is shown in the flow diagram of . At step AXIOM builder pulls and filtering module gets the next event from parser . If next event is the end of the document the process ends at step . Otherwise the process proceeds to step at which filter gets the information of the current event and stores the information into shared memory component . The current event information is then shared among all filters so that each filter does not need to pull the information of the current event from parser . At step filters process the current event by reading and writing to the shared event information in shared memory component . Thus the overhead of only one invocation for the information of each event is needed among all filters as if the filters were a single filter during processing. At step AXIOM builder which is the ultimate receiver of the events from parser gets the information of the events from filter . The information returned by filter is the event information from shared memory component . In this way AXIOM builder only needs to access filter to get the information of each event.

The capabilities of exemplary embodiments of present invention described above can be implemented in software firmware hardware or some combination thereof and may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods and or functions described herein is suitable. A typical combination of hardware and software could be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein. Exemplary embodiments of the present invention can also be embedded in a computer program product which comprises features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods.

Computer program means or computer program in the present context include any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after conversion to another language code or notation and or reproduction in a different material form.

Therefore one or more aspects of exemplary embodiments of the present invention can be included in an article of manufacture for example one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately. Furthermore at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the exemplary embodiments of the present invention described above can be provided. To illustrate shows a block diagram of an exemplary embodiment of a hardware configuration for a computer system representing web service application server in through which exemplary embodiments of the present invention can be implemented.

As illustrated in computer system includes a CPU peripheral part having a CPU that accesses a RAM at a high transfer rate a display device and a graphic controller all of which are connected to each other by a host controller an input output part having a communication interface a hard disk drive and a CD ROM drive all of which are connected to host controller by an input output controller and a legacy input output part having a ROM a flexible disk drive and an input output chip all of which are connected to input output controller .

Host controller connects RAM CPU and graphic controller to each other. CPU operates based on programs stored in ROM and RAM and controls the respective parts. Graphic controller obtains image data created on a frame buffer provided in RAM by CPU and the like and displays the data on the display device . Alternatively graphic controller may include a frame buffer which stores image data created by CPU and the like therein.

Input output controller connects host controller to communication interface hard disk drive and CD ROM drive which are relatively high speed input output devices. Communication interface communicates with other devices through the network. Hard disk drive stores programs and data which are used by CPU in computer . CD ROM drive reads programs or data from CD ROM and provides the programs or the data to hard disk drive through RAM .

Moreover ROM flexible disk drive and input output chip which are relatively low speed input output devices are connected to input output controller . ROM stores a boot program executed by computer at its start a program dependent on the hardware of the computer and the like. Flexible disk drive reads programs or data from flexible disk and provides the programs or the data to hard disk drive through RAM . Input output chip connects the various input output devices to each other through flexible disk drive and for example a parallel port a serial port a keyboard port a mouse port and the like.

The programs provided to hard disk drive through RAM are stored in a recording medium such as flexible disk CD ROM or an IC card. Thus the programs are provided by a user. The programs are read from the recording medium installed into hard disk drive in computer through RAM and executed in CPU .

A program which is installed into computer and allows the computer to function as web service application server includes a message parsing module a message filtering module for security processing a message processing module and a web service application processing module. The above described program or modules work on CPU and the like and allow computer to function as parser filtering module or or message processing engine or an AXIOM builder and application processing unit respectively.

The above described program or modules may be stored in an external storage medium. In addition to flexible disk and CD ROM an optical recording medium such as a DVD and a PD a magneto optical recording medium such as a MD a tape medium a semiconductor memory such as an IC card and the like may be used as the storage medium. Moreover the program may be provided to computer through the network by using as the recording medium a storage device such as a hard disk or a RAM which is provided in a server system connected to a dedicated communication network or the Internet.

Although the preferred embodiment of the present invention has been described in detail it should be understood that various changes substitutions and alternations can be made therein without departing from spirit and scope of the inventions as defined by the appended claims.

Although exemplary embodiments of the present invention have been described in detail it should be understood that various changes substitutions and alternations can be made therein without departing from spirit and scope of the inventions as defined by the appended claims. For example it may be desirable to combine the functionality of exemplary filtering module described with reference to with that of exemplary filtering module described with reference to .

Variations described for exemplary embodiments of the present invention can be realized in any combination desirable for each particular application. Thus particular limitations and or embodiment enhancements described herein which may have particular advantages to a particular application need not be used for all applications. Also not all limitations need be implemented in methods systems and or apparatuses including one or more concepts described with relation to exemplary embodiments of the present invention.

While exemplary embodiments of the present invention have been described it will be understood that those skilled in the art both now and in the future may make various modifications without departing from the spirit and the scope of the present invention as set forth in the following claims. These following claims should be construed to maintain the proper protection for the present invention.

