---

title: System having minimum latency using timed mailbox to issue signal in advance to notify processor of the availability of the shared resources
abstract: The present invention provides an apparatus and method that increases the utilization by processors on shared resources. It provides the minimum latency in a multiprocessor system during usage right exchange between multi-processors on a shared resource. The apparatus provides a timed mailbox including a timer. The timed mailbox is at least associated with a first processor and a second processor. The second processor starts to utilize a shared resource to perform a task. According to a predetermined clock cycle number, the timed mailbox issues a signal in advance to notify the first processor of the availability of the shared resource to be utilized by the first processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099731&OS=08099731&RS=08099731
owner: Industrial Technology Research Institute
number: 08099731
owner_city: Hsinchu
owner_country: TW
publication_date: 20070118
---
The present invention generally relates to an apparatus and method for increasing the shared resource utilization by processors applicable to a multiprocessor platform where processors having minimum latency when exchanging the usage of shared resources.

When a computer system must process the special purpose for application software the computer usually employs an additional processor such as a digital signal processor DSP or a floating point unit FPU . For embedded multimedia applications such as mobile phones the micro processing unit MPU is used due to the power consumption and heat dissipation consideration and thus the mathematical computing capability is compromised. To provide multimedia applications a DSP is usually included to handle the multimedia compression or decompression. For example a dual core system on a chip SoC with a MPU and a DSP such as DM series of TI and the parallel architecture core PAC SoC by SoC Technology Center STC of ITRI are examples of such development.

When an MPU and a DSP are on the same platform and working together the platform can be considered as a multiprocessor platform. The multiprocessor platform usually faces the synchronization problem of shared resources therefore a mechanism must be provided so that only a processor is using the shared resource at any time. The conventional technique is to use a semaphore mechanism in the shared memory to lock the shared resource. The conventional semaphore suffers from the efficiency problem. In addition to prevent the error caused by multiple processors accessing the semaphore the processors will lock the bus which further reduces the utilization and efficiency. Another problem is the lack of an efficient mechanism to notify the waiting processor when a shared resource becomes available.

Another conventional technique is a mailbox mechanism in hardware. The mailbox mechanism issues an interrupt to the specific processor after writing to command and data register. Then the interrupt service routine ISR wakes up a specific application software to use the shared resource. The dsp gateway of Nokia uses such a mechanism and an inter process communication IPC framework is developed on the OMAP5912 platform so that the MPU processing schedule and the tasks on DSP can communicate with each other through a simple application programming interface API .

When DSP finishes data processing the shared resource is assigned to MPU shown as . The setting of shared resource by DSP to MPU will wake up the application software on MPU described as follows.

DSP to MPU mailbox receives the data transmission request from DSP and issues an interrupt command to MPU. MPU interrupt service routine receives interrupt command shown as . Then IPC framework wakes up the application software shown as and the application software on MPU starts to use the shared resource and process data shown as . Time T is the time when IPC framework on MPU end wakes up the application software to start using the shared resource.

A data latency problem leading to performance efficiency can be observed in . Theoretically the ideal situation should be that time T when DSP finishing processing data equals to time T when IPC framework on MPU waking up application software to use shared resource. Thus no data latency is observed. However in an actual application the following factors may contribute to the difference between T and T 

Items 1 3 of the above list are the simple register writing and hardware operation and may require tens of clock cycles to finish. With a 100 system bus the 10 clock cycles will take 0.1 us. Item 4 is defined as interrupt latency and item 5 is the necessary execution process for operating system and IPC framework.

The duration of item 6 depends on the operating system scheduling. The experiment with Linux2.6 Operating System shows that after the ISR finishes a scheduling algorithm evaluates whether to schedule the CPU to another task. In addition when the application software requests to IPC framework for shared resource while DSP has not yet finished processing data the application software is requested to hand over the CPU. When IPC framework informs the application software to use the shared resource the application software must wait until the CPU is available to the application software. Items 4 6 of the above list are defined as task latency. The task latency depends on the system workload and the time record can be used to estimate the task latency.

U.S. Pat. No. 6 938 253 disclosed a system and method for multiprocessor communication including the integration of semaphore and mailbox mechanism so that when the resource is not required to be locked the mailbox mechanism can be used to inform the specific processor and application software to use the shared resource. This patent emphasizes the elimination of the need to lock the resource to improve the semaphore efficiency in a multiprocessor environment. However when the system is busy the task latency problem remains for the mailbox mechanism.

Cirrus Logic Inc. proposed an IPC framework implemented with mailbox mechanism. But the technique does not address the performance improvement issue of IPC.

The present invention has been made to overcome the above mentioned drawback of conventional shared resource mechanism used in a multiprocessor environment. The primary object of the present invention is to provide an apparatus and method for improving the utilization by the processor on the shared resource. The present invention provides a method for the processors of a multiprocessor platform to experience the minimum latency during shared resource exchange.

The multiprocessor platform has at least one shared resource. The apparatus for improving the utilization by the processors on the shared resource of the present invention includes a timed mailbox connected to at least a first processor and a second processor. The second processor is currently using a shared resource in the platform. The timed mailbox uses a timer with a pre determined period to issue a warning signal in advance to inform the first processor to use the shared resource.

Based on the present invention the multiprocessor platform does not need to modify the operating system core. The pre determined period can be determined by the statistic estimation of the latency so that the apparatus can wake up the first processor in advance before the second processor finishes using the shared resource to avoid the task latency and improve the utilization.

A dual core platform is used as a working example to describe the present invention. The dual core platform includes an MPU and a DSP. Through the timer of the timed mailbox an interrupt command is issued in advance at a pre determined period to the MPU to prepare for using shared resource. Therefore when the DSP finishes processing data and releases the shared resource to the MPU the MPU can immediately start using the shared resource and the latency of the shared resource exchange is reduced.

In other words the present invention reduces the waiting time of the shared resource and improves the utilization of the shared resource. In addition the timed mailbox can replace the hardware mailbox in the conventional technique. Compared to the conventional technique the present invention does not need extra hardware cost.

Based on the present invention the pre determined period of the timer can be set by the first processor or the second processor. The task latency of the system Tcan be estimated in advance. The data processing time Tof the second processor can also be estimated in advance. The pre determined period can be set to T T and the timed mailbox can use the timer to control the issuing of the interrupt command. The time between the timed mailbox issuing an interrupt command to the first processor and the first processor waking up the application software to prepare for using the shared resource is approximately equal to the data processing time of the second processor.

The foregoing and other objects features aspects and advantages of the present invention will become better understood from a careful reading of a detailed description provided herein below with appropriate reference to the accompanying drawings.

In multiprocessor platform the first processor and the second processor can be connected to a plurality of peripheral devices for example the first processor is connected to an LCD unit a first timer a UART unit a DMA unit and a mailbox unit while the second processor is connected to a DMA unit a second timer and for receiving the signals from the mailbox.

As described earlier the latency affecting system utilization includes the time from the first processor receiving the interrupt command to ISR executing the time for IPC framework execution and the time to wake up the application software to use the shared resource collectively called task latency. The task latency can be estimated statistically. Therefore the pre determined period T can be estimated and the first processor or the second processor can set timer accordingly.

The timed mailbox includes a timer in a conventional mailbox mechanism. The timed mailbox based on T of timer issues a warning signal such as an interrupt command in advance to the first processor to prepare for using the shared resources. Compared to the conventional technique configuring a plurality of hardware mailboxes in the multiprocessor platform the timed mailbox of the present invention does not require any additional hardware. In addition the timed mailbox issues the interrupt command at the same time when the second processor is processing data to avoid the utilization reduction caused by latency.

The data processing time of the second processor can also be estimated in advance for example the cycles of mp3 H.264 algorithms. shows a schematic view of the time to describe a warning signal is issued during the second processor processing the data. As shown in the second processor requires Tcycles to finish processing data and system estimated task latency is Tcycles. Therefore the timer in the timed mailbox is set to be T T. In other words the timed mailbox issues an interrupt signal in T Tcycles in advance.

Step is to set the value of the timer of timed mailbox to T. The value T equals T Tcycles. Step is to inform the second processor to start processing data and when the T cycles of the timer count down to zero a warning signal is issued to the first processor to use the shared resource.

It is worth noticing that there exist two mechanisms to set the timer to T. The first mechanism is for the first processor to set the timer and the second mechanism is for the second processor to set the timer. Using the MPU with DSP platform as an example for many applications with DSP as the co processor the MPU can estimate the processing time required by the DSP such as mp3 or H.264 decoding. Therefore the MPU is preferred to perform the timer setting.

On the other hand when the MPU cannot predict the processing time required by the DSP such as the ISR of DSP usually depending on the information from the mailbox only the DSP can estimate the processing time T hence DSP is preferred to perform the timer setting.

In step because the first processor can estimate the task latency T the first processor can set the timer to T Tif the first processor can also estimate the data processing time Trequires by the second processor . Otherwise the second processor can set the timer to T T.

After the first processor receives the interrupt command from the timed mailbox the ISR of the first processor starts to execute wakes up the application software of the first processor and checks whether the second processor has released the shared resource. Therefore the task latency for the first processor to receive the interrupt command and wake up the application is Tcycles. The data processing time for the second processor is T. Hence the time for the second processor to release the shared resource is almost simultaneous with the time for the first processor to start using the shared resource which leads to the improvement of utilization by reducing the waiting.

If the processing time Tof the DSP can be estimated by the MPU and the MPU estimates the task latency is T the MPU can set the value of the timer to T T shown as .

Otherwise the ISR of the DSP receives the interrupt command from the MPU to DSP mailbox estimates the DSP s data processing time of Tclock cycles according to the estimated MPU s task latency of Tclock cycles and the DSP can set the value of the timer to T T shown as .

Then the DSP uses the shared resource to process data shown as and the mailbox timer starts to count down. When the timer counts down to zero i.e. after T Tcycles the timed mailbox issues an interrupt command to the MPU shown as to prepare for using the shared resource.

After the ISR of the MPU receives the interrupt command the Operating System of the MPU checks whether the data is accessible and application software should be awaken shown as . In the meantime the DSP finishes processing data at time T. When the DSP finishes data processing the ISR of the DSP releases the shared resource to the MPU and sets the shared resource to be available.

Because the Operating System of the MPU checks whether the data is accessible and application software should be awaken at time T and the MPU detects that the DSP has released the shared resource the application software on the MPU can use the shared resource to process data. Under the circumstance that the workload of the system has a little difference the time when the DSP finishes data processing is close to the time when the MPU starts to use the shared resource thereby reducing the latency.

The present invention can use a checking mechanism such as a flag register to verify that the shared resource is released before waking up the application software. When the workload of the system has a larger difference the MPU may find out through the flag register that the DSP has not yet released the shared resource. This situation can be solved by repeatedly checking the flag register until the flag register indicates that the DSP has released the shared resource.

Although the present invention has been described with reference to the preferred embodiments it will be understood that the invention is not limited to the details described thereof. Various substitutions and modifications have been suggested in the foregoing description and others will occur to those of ordinary skill in the art. Therefore all such substitutions and modifications are intended to be embraced within the scope of the invention as defined in the appended claims.

