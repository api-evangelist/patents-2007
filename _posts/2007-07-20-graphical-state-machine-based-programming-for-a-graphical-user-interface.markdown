---

title: Graphical state machine based programming for a graphical user interface
abstract: In one embodiment, a graphical arrangement of one or more interface elements and a definition of one or more events associated with the interface elements is used to build a state diagram model of a graphical user interface (GUI). The state diagram model of the GUI includes a plurality of states, and one or more transitions linking at least some of the states. The state diagram model may be displayed to a user, and in some cases, simulated to test functionality of the GUI. In response to user input, the state diagram model may be modified to change functionality of the GUI and/or to add functionality to the GUI. The GUI may then be generated from the state diagram model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856667&OS=08856667&RS=08856667
owner: The MathWorks, Inc.
number: 08856667
owner_city: Natick
owner_country: US
publication_date: 20070720
---
This application is a continuation of copending U.S. patent application Ser. No. 11 110 182 which was filed on Apr. 19 2005 by Thomas Gaudette for GRAPHICAL STATE MACHINE BASED PROGRAMMING FOR A GRAPHICAL USER INTERFACE.

The present invention generally relates to technical computing and more particularly to providing graphical finite state machine based programming for a graphical user interface.

Many computer programs use graphical user interfaces referred to as GUIs as an intuitive and convenient means to present information and functionality for users to interact with the computer program. A user can interact with a user interface through a myriad of user interface elements or widgets. A graphical user interface typically has some elements that display information only such as labels and images and other elements that receive input from a user through an input mechanism such as menus buttons and check boxes. Furthermore these user interface elements can include a graphical element with a collection of input elements. For example a tree widget may provide a hierarchy of widgets where each widget has its own window dialog or form for interacting with the computer program. In another example a set of property sheets may have multiple tabs with each tab handling a portion of user input for the user interface. The display and input elements can be placed and arranged within a window frame property sheet or other container widget which can be moved resized closed etc. Users may interact with user interface elements to view display elements and modify input elements across multiple forms or screens.

The design and development of graphical user interfaces can be quite complex in considering the myriad of user interface components and implementing event driven and parallelism programming paradigms with state and control considerations. Although an event based model may follow a parallelism paradigm the user interface also needs to have structure and data to track and manage state and control of information in accordance with the desired functionality. For example it may be desired to have the execution of instructions related to an event behave differently based on the state of user interface components or the currently assigned values to user interface components.

Furthermore the design and development of a graphical user interface can increase in complexity with the increase in the number of user interface elements the number of generated events and the complexity of the desired functionality along with the related state and control of the user interface functionality. Moreover some software programmers may be challenged by the complexities of implementing a design and development of a graphical user interface considering event driven and parallelism paradigms.

The present invention provides systems and methods for the design development and execution of a graphical user interface using a state machine based programming paradigm integrated with a componentized graphical user interface. In one embodiment the present invention generates a state diagram model having a finite state machine representation of the graphical user interface. The state diagram model includes states representing elements of the graphical user interface and any events associated with these elements. The state diagram model provides a graphical structure for handling events associated with the graphical user interface such as events generated by inputs provided by a user via a graphical user interface element. Furthermore functionality for the graphical user interface such as underlying control structure state management and event processing can be implemented with a high level textual programming language integrated with the state machine.

Additionally in another embodiment the present invention provides a graphical execution environment for executing a graphical model such as a state diagram model implementing the state machine representation of the graphical user interface. The graphical execution environment provides a visual and interactive debugging and simulating environment for executing the graphical user interface. Also the present invention provides systems and methods for automatically generating code from the state diagram model. The code can be used to build an executable form of the state machine implementation of the graphical user interface on a target hardware platform and operating system.

The techniques of the present invention provide for a graphical programming implementation of an event based model paradigm for a graphical user interface. Furthermore the present invention provides a visual formalism of the graphical user interface and incorporates a textual programming language to capture data flow related processing to facilitate implementing user interface related algorithms and computations. In summary the techniques of the present invention provides a more seamless integration of a graphical event driven model and a componentized user interface model with a textual programming language to simplify the design and development of graphical user interfaces.

In one aspect the present invention is related to a method for providing a graphical state diagram model representation of a graphical user interface. The method provides a graphical user interface comprising one or more graphical elements and generates from the graphical user interface a graphical state diagram model representing and or related to the graphical user interface. The state diagram model may include a finite state machine such as a graphical representation of the finite state machine or any other type of state machine such as a non deterministic state machine. The state diagram model may include either a partial or complete implementation of the graphical user interface.

In another aspect a method of the present invention provides in the graphical state diagram model a state diagram element identifying a state of the state machine representing a state of a graphical element of the graphical user interface. The graphical element may be any one of the following 1 a push button 2 a slider 3 a radio button 4 a check box 5 a text field 6 a pop up menu 7 a list box 8 a toggle button 9 a panel and 10 a button group.

In one aspect of the present invention the method provides in the graphical state diagram model a state diagram element identifying a state of a state machine representing an event associated with a graphical element of the graphical user interface. Also the method may provide a graphical state diagram element comprising 1 a data element 2 an event 3 a truth table 4 a graphical function 5 a place 6 a queue 7 a ticket or 8 a token. Additionally the method may provide executable instructions associated with the graphical state diagram model to represent a portion of processing of an event associated with the graphical user interface element.

In a further aspect a method of the present invention provides one or more of the following graphical state machine elements to represent a portion of the graphical user interface 1 a state 2 a transition from a state 3 a transition to a state 4 a decision point junction between states and 5 a condition associated with a transition. In another embodiment a method of the present invention may also provide an executable action associated with one of the following state machine elements to represent a portion of the graphical user interface 1 a state 2 a transition and 3 a condition.

In one aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to a method for providing a state diagram model representation of a graphical user interface.

In another aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to a method for providing a state diagram model representation of a graphical user interface.

In one aspect the present invention relates to a method for providing a graphical user interface by executing a graphical state diagram model representation of the graphical user interface having one or more graphical elements. The method includes the steps of providing a graphical state diagram model having a state machine representation of a graphical user interface and invoking an execution of the state diagram model to provide the graphical user interface. The method may display the graphical user interface with the execution of the graphical state diagram model. Additionally the state diagram model may include a graphical representation of the finite state machine.

In another aspect of the present invention a method activates a state of the state machine representing a graphical element of the graphical user interface. Furthermore the method may also activate a first state of the state machine representing a first graphical element concurrently with an active second state of the state machine representing a second graphical element.

In one aspect a method of the present invention executes a portion of the state machine in response to an input provided to the one or more graphical elements. In one embodiment the method may also invoke executable instructions associated with a state of the state machine in response to an event provided by the one or more graphical elements.

In another aspect of the present invention a method may execute the graphical state diagram model graphically in a graphical execution environment. Also the method may automatically generate code from the graphical state diagram model to represent the state machine implementation of the graphical user interface. The code may be executed to provide execution of the state machine and or the graphical user interface.

In one aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to method for providing a graphical user interface by executing a state diagram model representation of the graphical user interface having one or more graphical elements.

In another aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to method for providing a graphical user interface by executing a state diagram model representation of the graphical user interface having one or more graphical elements.

In another aspect the present invention relates to a system for providing a graphical user interface via a graphical state diagram model representation. The system comprises a graphical user interface tool and a state diagram modeling tool. The graphical user interface tool provides a graphical user interface having one or more graphical elements. The state diagram modeling tool in communication with the graphical user interface tool provides a graphical state diagram model representing the graphical user interface. The graphical state diagram model may include a finite or non deterministic state machine. Additionally the graphical user interface tool and or the state diagram modeling tool may execute in a distributed manner on multiple computing devices in a network environment.

In one aspect of the present invention the graphical user interface tool and or the state diagram modeling tool generates the graphical state diagram model from the graphical user interface. The graphical state diagram model may be generated via an application programming interface of the state diagram modeling tool. In one case the graphical user interface tool generates the graphical state diagram model upon saving the graphical user interface. In another case the graphical user interface tool generates the graphical state diagram model or any portion thereof based on input activity in the graphical user interface tool such as adding or changing a graphical user interface element.

In a further aspect of the present invention an element of the state machine identifying a state of the state machine is used to represent a state of the one or more graphical elements. Additionally a state of the state machine may be used to represent any event associated with the one or more graphical elements. Also the state machine may include executable instructions representing a portion of event processing associated with the event.

In an additional aspect the state diagram modeling tool of the present invention may execute the graphical state diagram model to provide the graphical user interface. The state diagram modeling tool may execute a portion of the state machine in response to an input provided to the one or more graphical elements. Also the state diagram modeling tool may execute executable instructions associated with a state of the state machine in response to an event provided by the one or more graphical elements.

In yet a further aspect the system of the present invention also includes a code generator tool. The code generator tool provides for the automatic generation of code from the graphical state diagram model to provide an executable form of the graphical user interface with the state machine.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides systems and methods for the design development and execution of a graphical user interface using a graphical state machine based programming paradigm. The present invention provides a visual formalism implementation of the graphical user interface via a state diagram model integrated with a component based programming paradigm. The graphical user interface development environment of the present invention provides a componentized approach for providing user interface elements for a graphical user interface design with a state and control structure underlying and related to the graphical design. The state and control structure is modeled using a hierarchical and graphical state machine that supports parallelism. Since graphical user interfaces may be event driven and contain state information the graphical state machine representation of the user interface of the present invention is well suited for visual formalism of graphical user interface design.

The graphical state diagram model of the present invention provides for a graphical programming implementation of an event based model paradigm for the graphical user interface. The structure for event callback and event handling of a graphical user interface is represented and integrated with the state diagram model. Furthermore the present invention provides a formalism using a textual language to capture data flow related processing to facilitate implementing user interface related algorithms and computations. The present invention provides a more seamless integration of the graphical event driven model and the componentized user interface model with an integrated textual program language to simplify the design and development of graphical user interfaces.

Additionally the illustrative embodiment of the present invention provides an environment for executing a graphical model of the user interface represented by the graphical state machine implementation and including execution of the textual language integrated with the graphical model. The graphical execution environment of the illustrative embodiment provides a visual and interactive simulator and debugger for the graphical user interface. After design and developing a graphical user interface using the techniques of the present invention the graphical model of the user interface can be simulated to view the behavior of and validate the design. The graphical debugger helps to determine and resolve errors and diagnose unexpected behavior in the design. Active states and transition paths of the graphical state machine representation of the user interface can be viewed and examined. For example the execution of events driven by user input via the graphical user interface can be traced and debugged.

Furthermore the illustrative embodiment of the present invention can automatically generate code from the graphical model of the user interface having a graphical state machine and integrated textual language. The generated code may be compiled and built into a form executable by a target operating and processor environment. Although the graphical user interface is designed and developed with graphical programming and textual language techniques of the present invention code for the graphical user interface can be generated and built into an executable form. For example a C programming language based implementation of the graphical user interface design may be generated and compiled for a specific target hardware platform or operating system.

The illustrative embodiment will be described solely for illustrative purposes relative to a user interface graphical model and state diagram modeling environment provided by the software products from The MathWorks Inc. of Natick Mass. Although the illustrative embodiment will be described relative to a MATLAB and or Simulink based application including the use of Stateflow one of ordinary skill in the art will appreciate that the present invention may be applied to other user interface graphical model and state diagram modeling environments such as any environments using software products of LabVIEW or MATRIXx from National Instruments Inc. MSC.Adams from MSC.Software Corporation of Santa Ana Calif. Virtuoso from Cadence of San Jose Calif. Dymola from Dynasim AB of Lund Sweden Rational Rose from IBM of White Plains N.Y. Mathematica from Wolfram Research Inc. of Champaign Ill. Mathcad from Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The computing device may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . Additionally the computing device may include any type of input device for receiving user input such as a joystick. In other embodiments the computing device may include any type of haptic or tactile feedback device such as a vibration generating mouse or a force feedback device such as a force feedback joystick. Also the computing device may include any type of sound producing I O device such as any suitable sound card. The computing device may include other suitable conventional I O peripherals.

For installing software programs the computing device may support any suitable device readable medium such as a CD ROM DVD ROM floppy disks tape device USB device hard drive or any other suitable device. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software. The present invention of a graphical development and execution environment may comprise software that is installed via a device readable medium and stored in the storage device . Additionally the operating system and graphical development and execution environment can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T T 56 kb X0.25 broadband connections e.g. ISDN Frame Relay ATM cluster interconnection Myrinet peripheral component interconnections PCI PCI X wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention is related to a graphical development and execution environment as illustrated in . In brief overview the illustrative graphical development and execution environment includes a graphical user interface development tool GUI tool a state diagram modeling tool and a graphical model simulation tool . The GUI tool provides an environment for the design and development of a graphical user interface and may provide a user interface component based paradigm. The state diagram modeling tool provides an environment for the design and development of a graphical state machine diagram model or state diagram model. The state diagram modeling tool may be in communication with or have any suitable type and form of interface to the GUI tool . The graphical model simulation tool provides an environment for the simulation and execution of a graphical model such as a graphical model incorporating or referencing a graphical state diagram model . The graphical model simulation tool may be in communication with or otherwise have any suitable type and form of interface to the state diagram modeling tool .

The GUI tool of the present invention comprises a design and development environment for creating any type and or form of graphical user interface . In an exemplary embodiment and by way of example the GUI tool may comprise GUIDE the MATLAB Graphical User Interface Development Environment manufactured by The MathWorks Inc. of Natick Mass. GUIDE includes a graphical and interactive environment as known by those ordinarily skilled in the art by which users can create modify and save a graphical user interface . The GUI tool such as GUIDE can provide a layout editor for placing and arranging user interface elements such as user interface components for example panels buttons text fields sliders and menus into a design layout area. Additionally the GUI tool may provide an environment for programming functionality and other portions of the graphical user interface . For example in the exemplary embodiment of GUIDE as the GUI tool the textual programming language of MATLAB may be use to program and implement the graphical user interface . One ordinarily skilled in the art will recognize and appreciate the various forms and types of graphical user interface development environments that may be used as the GUI tool in practicing the operations of the present invention as described herein.

The graphical user interface of the present invention may comprise any type and or form of graphical user interface . In some embodiments the graphical user interface may be included in any type of client program in a client server or distributed application or system. In other embodiments the graphical user interface may comprise any type of web page or Internet based application such as a graphical user interface implemented with a Hypertext Markup Language HTML or any other markup language.

Additionally the graphical user interface may comprise any elements widgets or components to receive input from a user or otherwise to receive input programmatically from other sources. The graphical user interface may be designed with and comprise any type of widget such as a text field edit box choose list combo box check list a push button a slider a check box a pop up menu a list box a toggle button a button group and a radio button and may comprise any type of container widget holding grouping organizing or otherwise associating one more widgets with the container widget as one ordinarily skilled in the art will appreciate. In some embodiments a container widget may comprise a tree widget a frame widget a grid widget a tab widget a property sheet a collection object or any custom widget or object. In other embodiments a technical widget may be used as an element of the graphical user interface . A technical widget may comprise an aggregate or composition element or widget that includes a collection representation or implementation of one or more user interface components such as a collection of one or more of the base user interface components of GUIDE from The MathWorks Inc. For example a single technical widget may be used to represent a combination or composition of a label with a text box. Additionally any widget of the graphical user interface may comprise an ActiveX control a Java implemented control or any custom control or widget.

Furthermore any elements of the graphical user interface may comprise any component based user interface elements for a componentized approach to graphical user interface design and development. Any of these user interface components may be provided by any suitable means and or mechanisms of the GUI tool . In one embodiment the GUI tool provides a palette or toolbox of the user interface components for dragging and dropping or otherwise placing into a layout design area of the GUI tool . In other embodiments the GUI tool may provide access to user interface components via a library file database or other suitable storage or location accessible and readable by the GUI tool .

Additionally any elements of the graphical user interface such as a component based element may include any type of means and or mechanisms for interfacing or otherwise interacting with the element. In an exemplary embodiment the user interface components may be object oriented and may include any type and number of properties methods and events. In some embodiments the user interface component may provide events associated with input provided to the component either from a user via an input device or programmatically by executable instructions. In other embodiments events may be provided for activation deactivation instantiation or any other activity associated with the implementation of the component and as may be desired for the component s functionality. One ordinarily skilled in the art will recognize and appreciate the multitude of types and forms of graphical user interfaces and user interface elements such as component based elements that may be used in practicing the operations of the present invention as described herein.

The state diagram modeling tool of the present invention comprises a design and development environment for creating a state machine diagram model that can provide a state diagram representation of the graphical user interface provided by the GUI tool . In an exemplary embodiment and by way of example the state diagram modeling tool may comprise Stateflow an interactive design and simulation tool for event driven systems manufactured by The MathWorks Inc. of Natick Mass. The state diagram modeling tool such as Stateflow provides elements to describe a language logic and systems in a visual form such as a form that is readable and understandable by a human user such as a designer. In one embodiment of the present invention the state diagram modeling tool provides a visual formalism of the graphical user interface in accordance with the operations of the present invention described below.

The state diagram modeling tool is used to provide a state machine diagram model also referred to as a state diagram model state diagram a state chart or chart. In an exemplary embodiment of Stateflow the state machine diagram model may be referred to as a Stateflow chart. A state machine diagram model comprises a graphical representation of a state machine such as a finite state machine or a non deterministic state machine where states and transitions form the building blocks of a system. As known to those ordinarily skilled in the art a state machine is a representation of an event driven system where the system makes a transition from one state to another state provided any conditions associated with the transition are met. A state may be a mode of behavior that can be either active or inactive based on inputs outputs transitions and conditions. A transition links one state to another state and may have a condition such as any logic computation algorithm or executable instruction used to determine if and when a transition between states may occur. In some embodiments a truth table graphical or otherwise may be used to represent the relationships between inputs outputs states transitions and conditions of a finite state machine. Although generally discussed herein as a graphical state machine one ordinarily skilled in the art will recognize and appreciate that any type of graphical state machine such as a finite non deterministic or a virtual state machine or any other type of state machine may be used in practicing the present invention.

The state diagram modeling tool may provide elements such as states junctions and function such as graphical functions of Simulink and or Stateflow that may be placed and arranged graphically in a window design area or otherwise collectively in a state diagram model . States and junctions may be connected together in the state diagram model to form flows and transitions for an implementation of a state machine. The state diagram modeling tool and or state diagram model may provide for parallelism in that two or more orthogonal states may be active at the same time. Additionally the state diagram modeling tool and or state diagram model may provide a mechanism for specifying transitions and or conditions based on historical information related to execution of the state diagram model .

The state diagram modeling tool and or state diagram model may use any type and or form of notation for state machine representation such as any notation known by those ordinarily skilled in the art or any custom notation suitable for practicing the operations of the present invention. Additionally the state diagram modeling tool and or state diagram model may use any type and or form of graphical element to visually represent such notation in a state machine diagram model . Furthermore the state diagram modeling tool may provide for organizing incorporating and referring sub charts into a state diagram model . For example a first state diagram model representing a portion of an overall state machine design may be incorporated into or referenced by a top level state diagram model . The state diagram model may be organized hierarchically into any number and or levels of state diagram models to represent a finite state machine.

In one embodiment the state diagram modeling tool may be able to execute the graphical state diagram model . For example in the exemplary embodiment of Stateflow the state diagram modeling tool has a graphical execution and debugging environment that provides a user control of the simulation execution of the state diagram model and access to debug related tasks such as setting breakpoints. Additionally the state diagram modeling tool may display information about the state machine such as active and inactive states during execution or other information as requested or desired by the user.

The graphical model simulation tool of the present invention provides a graphical modeling environment such as the graphical modeling environment of Simulink from the MathWorks Inc. of Natick Mass. for creating designing simulating testing and verifying a graphical model such as a block diagram model. In the graphical model simulation tool configurable and customizable finctional blocks are used to create block diagram models that may represent a design or algorithm for a control system a signal processing system a communication system any other time varying or dynamic system or any computational hardware device. Additionally the graphical model simulation tool comprises an automatic code generation application such as the automatic code generator of Real Time Workshop from The MathWorks Inc. of Natick Mass. to generate source code from a graphical model to translate the functionality of the graphical model into a program that may be designed to run on any microprocessor real time operating system or otherwise customized to run on a specific target hardware platform.

The graphical model of the present invention can comprise any type and or form of graphical model . The graphical model simulation tool may provide any type of tools libraries and configuration mechanisms to graphically create and or edit a graphical model . In an exemplary embodiment the graphical model may comprise a block diagram model provided by the Simulink environment of The MathWorks Inc. For example the block diagram model may comprise a series of different type of blocks arranged in a desired manner and connected via connection lines to represent signal values traversing the blocks. The graphical model may comprise any type of element to form a graphical model such as connectors blocks or any other graphical form and representation of functionality supported by the graphical model simulation tool . One ordinarily skilled in the art will recognize and appreciate the various forms of graphical models and the elements and content thereof.

In one embodiment the graphical model incorporates references or otherwise uses the state diagram model provided by the state diagram modeling tool . In an exemplary embodiment Stateflow is integrated and used with Simulink to provide an environment combing state diagram modeling of Stateflow with the graphical modeling of Simulink . The graphical model can include any elements provided for creating a graphical model by the graphical model simulation tool such as any elements of a block diagram model known by those ordinarily skilled in the art and can include a state diagram model or any portion thereof that may be provided by the state diagram modeling tool . For example the graphical model may comprise a block diagram model with blocks connected as inputs and or outputs of the state machine diagram .

In one embodiment the graphical model simulation tool may be able to execute the graphical model . For example in the exemplary embodiment of Simulink as known by those ordinarily skilled in the art the graphical model simulation tool has an environment that provides for the simulation and debugging of the graphical model . Additionally in other embodiments the graphical model simulation tool may generate code of executable instructions representing the graphical model to compile and build for executing on a target hardware platform and or operating system.

Additionally the GUI tool state diagram modeling tool and graphical model simulation tool may provide for implementation of any portion or any functionality of the graphical user interface the state diagram model or the graphical model respectively via programming instructions in any type of programming language text based high level interpretative or otherwise. In the exemplary embodiment of a MATLAB and Simulink based environment any of the tools and may provide for or use executable instructions in the form of the textual programming language of MATLAB . One ordinarily skilled in the art will recognize and appreciate that any type and or form of executable instructions including interpretive programming languages markup languages such as the HyperText Markup Language scripting languages and any code such as libraries executables or scripts may be used in providing the graphical user interface the state diagram model and or the graphical model of the present invention.

The GUI tool state diagram modeling tool and graphical model simulation tool and any portion thereof can comprise an application module service computer program software component library or any other type and or form of executable instruction which is designed to and capable of executing the functionality of the present invention as described herein. Additionally the GUI tool state diagram modeling tool and graphical model simulation tool may be configured to and capable of running any of the modules libraries or software components of the MATLAB and or Simulink product family. As such the graphical development and execution environment may have all or a portion of the software components of MATLAB and or Simulink installed on the computing device or alternatively accessible from another computing device on a network.

In although the GUI tool state diagram modeling tool and graphical model simulation tool are illustrated as separate tools one ordinarily skilled in the art will recognize and appreciate that any combination or all of these tools and may be combined into a single application or otherwise tightly integrated to present a single application in performing the operations of the present invention as described.

The computing devices and can connect to the network through a variety of connections including standard telephone lines LAN or WAN links e.g. T T 56 kb X0.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET cluster interconnections Myrinet peripheral component interconnections PCI PCI X and wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. .TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

The network and network connections may include any transmission medium between any of the computing devices and such as electrical wiring or cabling fiber optics electromagnetic radiation or via any other form of transmission medium capable of supporting the operations of the present invention described herein. The methods and systems of the present invention may also be embodied in the form of computer data signals program code or any other type of transmission that is transmitted over the transmission medium or via any other form of transmission which may be received loaded into and executed or otherwise processed and used by a computing device and to practice the operations of the present invention as described herein.

Each of the computing devices and may be configured to and capable of running any portion of the graphical user interface development and execution environment . The graphical user interface development and execution environment and or any portion thereof such as the GUI tool state diagram modeling tool and graphical model simulation tool can be capable of and configured to operate on the operating system that may be running on any of the computing devices and . Each computing device and can be running the same or different operating systems. Additionally the GUI tool state diagram modeling tool and graphical model simulation tool can be capable of and configured to operate on and take advantage of different processors of any of the computing devices and . One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices.

Additionally the GUI tool state diagram modeling tool and graphical model simulation tool may be deployed such that portions of the graphical user interface and or state diagram model may execute on certain portions of the network and or on certain computing devices or . For example some functionality of the graphical user interface and or state diagram model may be time critical or sensitive and therefore may be targeted to execute on a computing device and and a segment or portion of the network with desired performance and or operating characteristics. Other functionality of the graphical user interface and or state diagram model may not be time sensitive and may be targeted to be deployed to any computing device and available on the network .

In summary the GUI tool state diagram modeling tool and graphical model simulation tool may be deployed across a wide range of different computing devices different operating systems and different processors. Furthermore the GUI tool state diagram modeling tool and graphical model simulation tool may be deployed in various distributed and or client server environments in various network topologies and configurations.

In one aspect the present invention is directed towards providing a state machine diagram model representation of a graphical user interface . A graphical user interface may be designed and created or otherwise provided in the GUI tool . Using the techniques of the present invention the GUI tool creates generates or otherwise provides a state diagram model representing an implementation of the graphical user interface . The state diagram model is generated in a manner such that the state machine of the state diagram model includes states corresponding to events associated with the graphical user interface and or any elements thereof. The behavior and algorithms governing the functionality of the graphical user interface is implemented specified or described in the states transitions conditions and other elements of the state diagram model . Additionally portions of functionality of the user interface such as any state control or event processing can be implemented in executable instructions such as in the high level textual programming language of MATLAB .

At step of illustrative method a state diagram model is generated from the graphical user interface provided at step . As step a skeleton or framework of a state diagram model for the graphical user interface such as the illustrative state diagram model of may be generated. Other elements and or content may be provided by the remaining steps of illustrative method . In one embodiment the state diagram model representation of the graphical user interface may be generated via the GUI tool . For example the GUI tool may have a command or other form of instruction accessible via any suitable user interface element to execute the generation of the state diagram model . In one embodiment the GUI tool generates the state diagram model when the user saves the graphical user interface . In another embodiment a command line interface or a command line user environment of the GUI tool may be used to generate the state diagram model . For example in the exemplary embodiment of a MATLAB and Simulink based environment a MATLAB language statement command function or API may be executed to generate the state diagram model . In another embodiment the GUI tool generates the state diagram model upon placement of the first user interface element such as element or is dragged and dropped or otherwise placed onto the design layout of the GUI tool .

The GUI tool may comprise any logic business rules libraries or any other type and or form of executable instructions to generate or otherwise provide the state diagram model representation of the graphical user interface . In one embodiment the GUI tool executes any application programming interface API instructions of the state diagram modeling tool to generate the state diagram model . The state diagram modeling environment may comprise various application programming interfaces APIs such as a command line object oriented or database interface providing instructions to create add delete or modify any of the elements of a state diagram model . In another embodiment the GUI tool may use any type and or form of an interface mechanism such as a message passing or web service interface to provide an interface between the GUI tool and the state diagram modeling environment .

In another embodiment of step of illustrative method the state diagram modeling tool may obtain the graphical user interface from any file representation of the graphical user interface accessible and readable by the state diagram modeling tool . For example the GUI tool may save the graphical user interface to one or more files. In the exemplary embodiment of GUIDE from The MathWorks Inc. as the GUI tool the GUI tool saves the graphical user interface into two files a FIG file with extension .fig and an M file with extension .m. The FIG file includes a description of the GUI layout and the elements and of the graphical user interface . The M file includes any code such as MATLAB instructions that controls the graphical user interface and may include any callbacks for the elements and .

In one embodiment the state diagram modeling tool may read the file such as a FIG file and M file for a graphical user interface to generate a state diagram model representation of the graphical user interface . In another embodiment the state diagram modeling tool may read a markup language version of the graphical user interface such as an Extensible Markup Language XML version of the graphical user interface. The representation of the graphical user interface may be transformed to a file data or text in any format and may be provided to or obtained by the state diagram modeling tool by a file a message API call or any other suitable means and or mechanisms. In some embodiments the state diagram modeling tool may comprise any logic business rules libraries or any other type and or form of executable instructions to generate or otherwise provide the state diagram model representation of the graphical user interface .

At step of the illustrative method a state is provided in the state diagram model for each of the elements of the graphical user interface such as elements and . As depicted in the illustrative state diagram model in the state labeled popupmenu is provided for the combo box element the state labeled axes is provided for the axes element and the state labeled pushbutton is provided for the command button element . For each element and of the graphical user interface the respective state and represents a mode that is either active or inactive when the state machine diagram is executed in executable form. In some embodiments only a portion of the elements and have a state generated in the state diagram model . For example in one embodiment a state may not be generated for an axes type user interface component that displays a static graphic or image. In some cases the GUI tool and or the state diagram modeling tool may be configured to generate states for specified types and or forms of user interface elements and .

At step of illustrative method a state for each event associated with the graphical user interface is provided in the state machine diagram model . As depicted in the illustrative state diagram model in states and are generated or otherwise provided to represent events and or functionality associated with the graphical user interface . In one embodiment the initialization state is generated to represent and provide functionality for the event of the initialization of the graphical user interface such as upon initiating execution of or invoking the graphical user interface . In another embodiment a timer state is generated to represent and provide functionality with regards to using a timer. The timer state may be used to handle any timer functionality desired by any other element or functionality of the graphical user interface . For example the timer state may be used for setting up and handling a transaction timeout such as a timeout of a session of using the graphical user interface .

The update state may be generated to represent and provide functionality for a general callback event to update any portion of the graphical user interface . The mouse state may be generated to represent and provide functionality for handling or otherwise processing any mouse related events of the graphical user interface . In one embodiment the mouse state handles any events generated by a pointing or input device that are not associated with a specific user interface element such as any of the elements and . The running state may be generated to represent and provide functionality with regards to the general running state of the graphical user interface . For example once the graphical user interface is initialized and not receiving any timer update or mouse related events to trigger states and active the graphical user interface may actively be in the running state .

Any of the states and for the user interface elements and may be specified in the state diagram model in such a manner as to allow each of the states and to be active at the same time or in parallel with each other i.e. parallel mode. In other embodiments the states and may be specified in the state diagram model such that only one of the states and may be active at a time i.e. exclusive mode. Likewise any of the states and may be specified to be active in a parallel mode or exclusive mode to each other. Additionally any of the states and may be specified to be active in a parallel mode or exclusive mode to any other states in the top level of the state diagram model such as states and .

In some embodiments of the state diagram model any of the states may be specified to have a parallel or exclusive decomposition with respect to any sub states associated with a state. A state with a parallel decomposition may comprise any sub states that are active at the same time when the state is active and or another sub state is active. A state with an exclusive decomposition may comprise only one sub state that is active when the state is active. One ordinarily skilled in the art will recognize and appreciate how states and sub states may be specified or configured to operate in a parallel or exclusive manner.

At step of illustrative method the present invention provides state diagram elements in the state diagram model for any event handling and callback processing related functionality related to elements of the graphical user interface . As depicted in for each of the user interface element states and additional sub states are provided corresponding to events and callbacks related to the user interface elements and . In brief overview and as illustrated in at step the sub states of create update and callback are generated for the popupmenu state and the sub states create update and mouseclick for the axes state . Additionally the sub states of create update and callback are generated for the pushbutton state . The states and may be specified in the state diagram model to have either a parallel or exclusive decomposition so that any sub states may be active in parallel or exclusive to other respective sub states. Also the states and sub states as illustrated in form a hierarchical state diagram machine model representation of the graphical user interface . Additionally each of the sub states may have further sub states to any number of hierarchical levels desired for representing and providing for the functionality of the graphical user interface .

Each user interface component or element and may generate or otherwise provide for one or more events related to the element and . As known by those ordinarily skilled in the art a user interface element and may have an event generated from any number of pointing device and keyboard related actions or by any input related activity. For example an event may be generated for a mouse click of any type on or near the user interface element and . In another example an event may be generated for any keyboard shortcuts typed in related to the user interface element and for tabbing to the user interface element or for entering any characters as input for the user interface element.

In other embodiments an event may be generated or otherwise provided by any external type of activity or event that the graphical user interface may be able to monitor or receive. For example an event may be provided by or generated from a file being changed such as content added to a file or a file newly added to a directory being monitored. In another example data may be captured or obtained by any type and or form of device such as a data acquisition device and any portion of the data capturing activity may generate or provide an event to the graphical user interface . In some embodiments any external related event may be generated by an element of and or associated with the graphical user interface such as a widget or control that is used to interface with a file system or a data acquisition device.

Additionally one ordinarily skilled in the art will recognize and appreciate that any user interface element may have any other type of events as desired or as implemented by the functionality of the embodiment of the user interface element. For example a user interface element may have events related to adding modifying or deleting items of the user interface element. Using the techniques of the present invention at step of illustrative method a state may be generated or otherwise provided for any or all of the events associated with the user interface element and or any other element of the graphical user interface or any event external to the graphical user interface that the graphical user interface may be able to obtain or receive.

At step of illustrative method the present invention provides additional elements in the state diagram model to represent and provide for the functionality of the graphical user interface . The elements provided at step may be provided automatically by either the GUI tool and or the state diagram modeling tool for example by any logic business rules or other type of executable instructions. In other embodiments the user may specify configure or otherwise provide additional elements in the state diagram model . In one embodiment the state diagram modeling tool provides a palette or a toolbox providing state diagram model elements to drag and drop or otherwise place and arrange in the state diagram model . A user may add modify or edit state diagram elements or otherwise alter the state diagram model using the functionality provided by the state diagram modeling tool to generate the desired state machine diagram representation of the graphical user interface .

As depicted in one or more additional state diagram elements may be provided by the present invention at illustrative step as depicted in the illustrative state machine diagram model . Although the state diagram elements will be described in an exemplary embodiment of Stateflow one ordinarily skilled in the art will recognize and appreciate other notation and forms of such elements that may be provided in other state diagram modeling tools . In one embodiment a default transition element DT may be provided for transitioning into the state machine. Default transitions are used to specify which one of several states should be entered when first entering the chart or a state that has sub states. Likewise any of the states may have a default transition such as default transition DT of the initialization state the default transition DT of the popupmenu state and the default transitions DT and DT of the axes state and the pushbutton state .

Additionally at step the present invention may provide for one or more transitions between states and other elements of the state diagram model . A transition is a graphical element that may link one state diagram element to another state diagram element such as the arrowed lines depicted in . One end of a transition is attached to a first element or source element and the other end of the transition is attached to a second element or destination element. A transition may have labels conditions and or actions associated with it to specify the circumstances under which the state machine may transition from one state to another state. The processing of an event handled by the state machine may cause one or more transitions to occur.

By way of example as illustrated in the initialization state may have a transition T to a connection action junction J. Transitions from states to junctions may also be referred to as transition segments. The transition T may have an associated condition C. In one embodiment the condition C is a Boolean expression that when true causes the transition to occur. The connective junction J represents a decision point in the state machine between alternate transition paths taken for a single transition. A connective junction such as junction J enables representation of different possible s for a single transition. For example junction J in represents a decision point for connecting transition segment TI from the initialization state to the transition segment T to the running state . Additionally the state machine diagram model may include a history junction H as depicted in . A history junction such a history junction H is used to represent historical decision points in the Stateflow state diagram model and can provide decision points that are based on historical data relative to state activity.

By way of further example of the types of state diagram elements used in the present invention to represent a graphical user interface a transition such as transition T may have a condition C a condition action CA and or a transition action TAI. An action in the exemplary embodiment of Stateflow is executed as part of the execution of the state diagram model . The action may be executed as part of a transition from one state to another state. As depicted in the illustrative state machine diagram model of a transition such as transition T terminating at a state e.g. state can have a condition action and or transition action. Additionally an action may be a state type of action based on the status of a state. For example in the exemplary embodiment of Stateflow the initialization state may have one or more state actions such as state action SA. A state action SA may include an action to perform on entry to the state i.e. an entry action an action to performing during the state i.e. a during action and or an action to perform on exiting the state i.e. an exit action. Additionally a state action SA may include an action to bind data to an event i.e. a bind action and or may include an action that is triggered by an event i.e. an on event action.

Any of the actions such as a state action SA condition action CA a transaction action TA may be specified with any type and or form of action language which defines the types of actions that can be specified and the action s associated notations. An action may include a function call a broadcast of an event and an assignment of a value to a variable or any other type and or form of logic functionality or executable instruction. In an exemplary embodiment the action language may be specified with a textual language such as the programming language of MATLAB .

Additionally the state diagram model may include any form and or type of executable instructions to implement any portion of the state machine representation of the graphical user interface . In an exemplary embodiment the executable instructions may include any statements commands function or instructions of the programming language of MATLAB . In other embodiments the executable instructions may include any other programming language such as C callable functions as one ordinarily skilled in the art will recognize and appreciate. The executable instructions may be used to represent and provide for state tracking and management underlying control structure and event and callback handling and processing of the graphical user interface . Additionally the executable instructions may be associated with integrated with or used by any of the state diagram elements of the state machine diagram model .

In an additional aspect any of the steps and of illustrative method may be performed dynamically as the graphical user interface is created edited updated or otherwise changed in the GUI tool . As the graphical user interface is changed the corresponding changes to the state diagram model occur. In some embodiments as each graphical user interface element is placed in the design layout area of the GUI tool the state diagram model may be generated or updated. For example when the graphical user interface element is placed in the design layout area the state diagram model may be updated to include the state representing the graphical user interface element such as described at illustrative step . In another example if the graphical user interface element is changed then the corresponding elements of the state diagram model are updated accordingly such as described at illustrative steps and . One ordinarily skilled in the art will recognize and appreciate how the steps of illustrative method may be performed dynamically and in conjunction with graphical user interface development.

Although may generally illustrate a partial implementation or representation of the functionality of the graphical user interface of the illustrative method of the present invention may also be used to provide a complete or full implementation of a graphical user interface or a complete or full implementation of a portion of the graphical user interface . In some embodiments the present invention may be used to provide a framework of a state machine diagram model with some portion of the content of the state machine diagram provided for a portion of the graphical user interface. Then the state machine diagram model may be further developed and implemented to provide the representation of the graphical user interface in the state diagram model in a desired manner. In other embodiments the present invention may be used to provide a working full and or complete implementation of the graphical user interface or for a portion of the graphical user interface such as a specific form model or user interface. One ordinarily skilled in the art will recognize and appreciate how the present invention may be used to provide an approach of a partial implementation or a framework representation of the graphical user interface and or also be used to provide a complete working implementation of the graphical user interface in the state diagram model.

Furthermore although may generally illustrate a state diagram model representation of the graphical user interface of having a relationship of a state corresponding to an element or widget of the graphical user interface the state machine diagram model representation of the graphical user interface may be driven by the data the events the states the objects or any other aspect and or functionality of the graphical user interface . For example an object oriented state diagram modeling approach may be used. In other examples states and or transition between states may be used to represent any state function data or object of the graphical user interface . One ordinarily skilled in the art will recognize and appreciate that various approaches methods and or techniques may be used for mapping the elements and the functionality of the graphical user interface to a representation in a state diagram model .

Additionally the state diagram model of illustrates an event based state diagram modeling approach that uses events associated with the radio buttons and of the graphical user interface to drive the state machine. In brief overview the state diagram model provides a state for each of the selected and unselected states of the radio buttons and . The RadioButtonOn state represents the selected states of Radio Button and RadioButtonOff state represents the unselected state of Radio Button . Likewise RadioButtonOn state and RadioButtonOff state represent the selected and unselected states of Radio Button and RadioButtonOn state and RadioButtonOff state represent the selected and unselected states of Radio Button .

The respective click events of the radio buttons and provide the transitions between the selected and unselected states of the radio buttons. For example transitions between the RadioButtonOn state and the RadioButtonOff state are represented by transition elements and of the state diagram model . The RadioButtonClick represents a click event received via an input device or programmatically on Radio Button . The click event of the Radio Button causes Radio Button to transition from the selected state of RadioButtonOn to the unselected state of RadioButtonOff via the RadioButtonClick transition element . Any click events from Radio Button or Radio Button will cause either Radio Button or Radio Button to be selected and Radio Button to be unselected. In these cases Radio Button will transition from the RadioButtonOff state to the RadioButtonOn state via the transition element that represents the button click events of Radio Button and or Radio Button . Likewise the transition elements and provide representation of the transitions between the selected and unselected states of Radio Button and Radio Button respectively according to the appropriate click events of the radio button elements of the graphical user interface .

Using an embodiment of the illustrative method a state diagram model may be provided as illustrated in to represent the graphical user interface of . In this illustrative example the click events of the custom hardware selection are used to transition between a logical on and off state for selecting custom hardware in which the choose list elements and are enabled or disabled. In brief overview a CustomSelectedON state may be used to represent the selected state of the custom hardware selection and a CustomSelectedOFF state may be used to represent the unselected state of the custom hardware selection . The CustomSelectedON state may comprise logic functionality or executable instructions to enable each of the choose list elements and so that they are selectable. Likewise the CustomSelectedOFF state may comprise logic functionality or executable instructions to disable each of the choose list elements and so that they are not selectable. The transition between the states may be triggered via transition elements and which represent click events provided by the user interface element of the custom hardware selection . Additionally the state diagram model may use any of the click events from the choose list elements and as part of the implementation of the graphical user interface . For example the Hardware ID choose list element may be context sensitive to the current selection of the DAT Adaptor choose element such that the selections provided by the Hardware ID choose list element may change based on the DAT Adaptor selection.

Although the illustrative state diagram models are generally discussed as being generated from an instance of a graphical user interface the illustrative method may be used in an interactive manner as the graphical user interface is designed and developed. A state diagram model may be generated for a graphical user interface and if the graphical user interface is updated or modified the state diagram model is accordingly updated or modified. In some embodiments the initial state diagram model may remain intact and additional elements added to the state diagram model to represent and handle the new or additional functionality of the graphical user interface . For example the graphical elements of the state diagram model may remain connected as initially provided and new graphical elements may be added connected or incorporated to the existing state diagram model . In other embodiments the state diagram model may be changed in order to provide for changes to corresponding elements that changed in the graphical user interface . In further embodiments the state diagram model may be re generated each time the graphical user interface is updated or modified. One ordinarily skilled in the art will recognize and appreciate the various ways the state diagram model may be generated updated or modified to handle changes in the graphical user interface during a design and development process.

Additionally in another aspect of the present invention a user may be able to filter select or otherwise choose which elements events data functionality and other portions of the graphical user interface that may be represented by or added to a state diagram model . The user may be able to configure the GUI tool and or state diagram modeling tool to provide desired preferences for which elements of the graphical user interface will be considered for implementation in a state diagram model . For example one or more widgets of the graphical user interface may have a long list of events to consider. The user may be able to filter the list and select only the most commonly used events or select a subset of desired events for implementation in a state diagram model . Any type and or form of a suitable configuration mechanism such as a graphical user interface or command line interface may be used to select or filter any portion of the graphical user interface to be represented by or added to a state diagram model .

Although the state diagram model is generally described and illustrated as provided by a state diagram modeling tool such as Stateflow and or Simulink the state diagram model may comprise other types of graphical models and visual formalisms provided by any other type and or form of visual or graphical modeling tool. As such the state diagram model may comprise constructs and elements graphical or otherwise relevant to the type and or form of state diagram model and or state diagram modeling tool .

In some embodiments the state diagram modeling tool may comprise any type and or form of event modeling and simulation tool such as any discrete continuous or hybrid event simulation system. For example the state diagram modeling tool may comprise any of the event modeling and simulation tools manufactured by Imagine That Inc. of San Jose Calif. or Simul Corporation of Boston Mass. Accordingly the state diagram model may comprise a visual formalism or graphical model representing a continuous discrete or event modeling system. As one ordinarily skilled in the art will recognize and appreciate an event modeling tool and diagram model may represent system behavior that can be expressed in terms of what a system does in correspondence to an event or a certain number of event types and may use model constructs or elements representing queues and or servers. For example in a state diagram model a queue element may represent a queue of events and a server element may represent an event server that processes events from the queue.

In some embodiments the state diagram modeling tool may comprise any type and or form of Petri net modeling and simulation tool. For example the state diagram modeling tool may comprise any of the Petri modeling and simulation libraries or tools manufactured by Dynasim AB of Lund Sweden. The state diagram model may comprise a visual formalism or graphical model representing a Petri net model or system. As one ordinarily skilled in the art will recognize and appreciate a Petri net is a graphical and mathematical modeling tool that provides a mathematical expression of discrete distributed systems and may be expressed in terms of places transitions and arcs that connect them. Petri nets may be used to describe and model systems that may be characterized as being concurrent asynchronous distributed parallel nondeterministic and or stochastic. Additionally tokens or tickets are used in Petri nets to simulate the dynamic and concurrent activities of systems. Accordingly the state diagram model may comprise any type and or form of constructs and elements representing a Petri net model such as a place a transition an arc a token or a ticket as one ordinarily skilled in the art will recognize and appreciate.

In one aspect the present invention is related to executing a state machine representation of a graphical user interface . A state machine diagram model for a graphical user interface may be generated using the design and development techniques of the present invention as described above. The state machine diagram model may be executed in an executable form either in an interpretative mode or in the accelerated mode. In interpretative mode either the state diagram modeling tool and or graphical model simulation tool can execute a state diagram model and or graphical model in their respective environments in a graphical fashion. In other embodiments code can be generated from the state diagram model and or graphical model to build an executable program for the accelerated mode.

At step of the illustrative method the model or may be invoked for execution by any suitable means and or mechanisms provided by the state diagram modeling tool and the graphical model simulation tool respectively. In one embodiment the state machine diagram model is invoked for execution in the state diagram modeling tool to display and execute the graphical user interface as illustrated in . In another embodiment the graphical model referencing the state machine diagram model is invoked for execution in the graphical model simulation tool to execute the graphical model and to display and execute the graphical user interface as illustrated in .

At step of the illustrative method the present invention initiates the state machine for the graphical user interface as specified by the state machine diagram model . Upon initiation of the state machine one or more default transitions may be executed for one or more initial states along with any configured state condition and transition actions and any other executable instructions forming the functionality desired upon invoking the graphical user interface . The state machine completes initialization and waits for activity related to the graphical user interface . In one embodiment the graphical user interface as illustrated in either or C is displayed upon or during initiation of the state machine and in another embodiment after the state machine has completed initialization.

As depicted in the state diagram modeling tool provides a graphical display of execution for visualizing the states and status of the state machine such as the active or inactive status of states and . In for illustrative purposes the running state is indicated as active to depict the running of the state machine. Likewise as depicted in the graphical model simulation tool in conjunction with the state diagram modeling tool displays graphically the state and activity of execution such as the active status of the running state .

At step of the illustrative method the state machine of the present invention executes in accordance with the activity generated by a user using the graphical user interface . As the user provides input to the graphical user interface the input is received and events generated which are processed by the state machine of the state diagram model . In other embodiments input to the graphical user interface may be provided programmatically from another program or any other type of executable instruction for example via an application programming interface API .

By way of example a user may select the selection of plot rand from the combo box element of the graphical user interface . This may cause the popupmenu state associated with the combo box element to become active and execute any actions and sub states associated with the state . The underlying state and control structure of the graphical user interface provided by the state machine diagram model may track the current selection plot rand by any suitable mechanism and or means such as by executable instructions . The user may also select the update command button element to update the graph provided by the axes element . The update command button will update the graph according to the selection of combo box element . The update command selection event may accordingly be handled and processed by the pushbutton state . As a result the axes state may also be executed and processed and the axes element updated with new data points.

Although generally described above with some illustrative user interface elements and associated with illustrative states and one ordinarily skilled in the art will recognize and appreciate that the specification and execution of the state machine diagram model will depend on and vary with the design development and execution of the graphical user interface and the inputs that may be applied to the graphical user interface in a particular instance of execution.

In another aspect the present invention is directed toward generating code from the state machine diagram model and or graphical model referencing the state machine diagram model to provide an executable form of the state machine implementation of the graphical user interface . An illustrative method of and system of of the present invention will be used to discuss the operations functions and structure of the code generation techniques of the present invention. Referring to in brief overview the code generating system comprises a code building tool having a code generator . In an exemplary embodiment of a graphical user interface development and execution environment of MATLAB and Simulink the code building tool comprises the Stateflow Coder integrated with Real Time Workshop both manufactured by The Mathworks Inc.

Referring to the illustrative method of the present invention obtains either a state machine diagram model at step or in another embodiment a graphical model referencing the state machine diagram model at step . In some embodiments the state machine diagram model and or the graphical model may be obtained via a file. The state machine diagram model and or the graphical model may comprise a file in a format that the code building tool or code generator can read and that follows a file specification for defining state machines and other elements of the state machine diagram model . In other embodiments the code building tool and or code generator may obtain either the state machine diagram model and or the graphical model from an application programming interface API call to another application or via an interface to another environment such as the state diagram modeling tool . In yet a further embodiment the graphical mode simulation tool and or the state diagram modeling tool or another computer program saves and converts the state machine diagram model and or graphical model into a format readable by the code building tool . For example a graphical model produced with Simulink and Stateflow may be converted into an intermediate model file representation such as an .rtw type file readable by the automatic code generator of Real Time Workshop .

At step of illustrative method the code building tool such as Stateflow Coder and or Real Time Workshop will generate code for the graphical model and or state machine diagram model . The code building tool and code generator use one or more input files in conjunction with reading and processing the graphical model and or state machine diagram model .

The one or more input files may comprise files including templates commands input parameters configuration data source code data and class definitions component configuration device driver or any other information that may be used by the code generator to generate code for the graphical model and or state machine diagram model . The input files may include files to provide input to and configure the code generator to generate source code files for a specific target hardware platform for example a specific processor. In an exemplary embodiment of Real Time Workshop as the code generator Real Time Workshop uses target language compiler script files with a .tlc file extension as input files to the code generation process. The .tlc files provide sections of programming instructions to be implemented for block and element references as they may be found in the graphical model and state machine diagram model during the code generation process. The .tlc files also can provide data and class definitions for data element references found in the graphical model and or state machine diagram model . Additionally the .tlc files also comprise compiler directives built in functions and other code generation commands to direct Real Time Workshop during the code generation process.

In operation the code generator reads in information regarding or a representation of the graphical model and or state machine diagram model and uses the input files to generate code by translating the graphical model and or the state machine diagram model into one or more source code files . By way of example the automatic code generation can be discussed in terms of generating code with Real Time Workshop from a block model diagram generated with Simulink . Simulink creates and stores block diagram models into model files with an .mdl file extension. As part of the code generation process Real Time Workshop reads in an mdl model file and analyzes the model to generate an intermediate model file with an .rtw extension. This intermediate .rtw model file comprises a hierarchical structure of records describing systems and their blocks and connections analyzed from a block diagram model of the mdl file.

A language compiler called the target language compiler of Real Time Workshop works with .tlc files and .rtw files to produce code. The target language compiler interprets a program that reads the intermediate model file description of an .rtw file. As the target language compiler encounter a record in the .rtw file it uses directives in the tlc files corresponding to the record to direct the code generation process for the specific record. As such the target language compiler works much like a text processor. For example the target language compiler uses block .tlc files which specify the particular code for a block to transform each block into code. When it reads a record in the .rtw file that references a block the target language compiler applies code from the corresponding block .tlc file to generate code for the block in source code files . Additionally model wide .tlc files are also used to provide input to the target language compiler for global customization of the code. Model wide .tlc files may direct the target language compiler to generate main routines to provide entry points into the program source code header files to setup data structures and utility functions to support code for particular blocks. The block and model wide .tlc files can be modified to generate customized code for blocks and to generate any desired global customizations to the code.

The source code files generated from the code generator such as Real Time Workshop may comprise program instructions of a programming language such as C which may further be in a format and style following the ANSI ISO C standard. Additionally the source code files may be generated to comprise fixed point or floating point source code. The programming instructions of the source code files may be generated to run on any real time operating system or for a specific processor. In a further embodiment the programming instructions of the source code files may be optimized for performance or versatility and or for a specific target hardware platform. In another embodiment the code generator can be configured via the input files to generate custom source code comprising a style and format as directed by the input files . The code generator can be also configured via the input files to provide customized source code to support such customizations as error handling optimization code and data reduction code reusability scoping of variables and other characteristics of the source code that may be modified during the source code generation process.

In some embodiments a portion of the source code or object code generated or provided by illustrative method may be targeted to run on a specific computational hardware device such as an embedded hardware platform or a specific processor of a computing device and another portion may be targeted to run on a personal computer such as a desktop or notebook. For example a portion of the graphical user interface and or state diagram model may process data or perform loops that are time critical. In comparison the display may not need to be updated in a time critical manner as the viewer s eyes may only perceive updates at a certain rate. The time critical data processing or loops may be embodied in source code and or object code targeted for a specific processor of a certain speed or capability and the non time critical code may be targeted for any general computing device. One ordinarily skilled in the art will recognize and appreciate the various ways to process and target various portions of code to meet the desired functionality and or execution of the user interface and or state diagram model .

At step of illustrative method one or more programs may be built from the automatically generated code to provide an executable form to execute the graphical user interface with a state machine. The code building tool also provides for the building of the source code files into object code to generate one or more programs to run on a target platform and or operating system. As depicted in the executable form may include a portion to execute and display the graphical user interface with a state machine designed and provided by the state machine diagram model .

The build process of illustrative step of the present invention may include compiling the code and linking libraries drivers and other programs via a make program or some other compiling utility. In one embodiment the code building tool invokes a compiler provided by software available with the operating system such as a make utility on a UNIX operating system. In another embodiment the compiler may be provided from a software development package such as Visual C C from Microsoft Corporation of Redmond Wash. One ordinarily skilled in the art will recognize the code building tool may invoke any type of compiler that is configured to and capable of translating the source code into object code to be executed by the target computing device .

Although the code generator is generally discussed in terms of generating source code the code generator may provide code in any other form such as object code pre existing source code or other programmable instructions suitable for representing the functionality of the graphical model and state machine diagram model . Additionally although the illustrative embodiment of the present invention is discussed in terms of source code files and object code from a programming language like C the code generator may generate any type of programming related output such as an interpreted programming language and or scripting language. For example the code generator may generate code for perl awk VBscript Javascript tcl or the technical computing programming language of MATLAB . In other cases the code generator may generate output in other types of languages such as the hardware description language of HDL. One ordinarily skilled in the art will recognize the various types of languages the code building tool may apply in generating code and how the code generator may build the code based on the type of language.

In view of the structure functions and operations of the systems and methods as described herein the present invention provides techniques for designing developing and executing a state machine representation of a graphical user interface that is well suited for handling the event driven and parallelism paradigms of user interfaces. Additionally the present invention integrates a higher level textual programming language into the state machine modeling to provide for the functionality of the graphical user interface. The approach of the present invention simplifies graphical user interface design and development.

Furthermore the present invention provides a visual formalism for design and developing a graphical user interface that also provides a model based design approach. The term model based design is used to refer to a graphical model acting as a design. A model based design may be used as a design specification for an implementation such as an implementation of a graphical state machine diagram representation of a graphical user interface. As a design specification a model based design can drive the building process of an implementation of the design. For instance the model based design can act as a specification for a graphical user interface from which to automatically generate code from a graphical model or state machine diagram model.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

