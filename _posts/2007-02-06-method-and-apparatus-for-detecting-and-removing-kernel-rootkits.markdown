---

title: Method and apparatus for detecting and removing kernel rootkits
abstract: In one embodiment, an anti-rootkit module compares operating system kernel binary files to their loaded kernel file image in memory to find a difference between them. The difference may be scanned for telltale signs of rootkit modification. To prevent rootkits from interfering with memory access of the kernel file image, a pre-scan may be performed to ensure that paging functions and the interrupt dispatch table are in known good condition. If the difference is due to a rootkit modification, the kernel file image may be restored to a known good condition to disable the rootkit. A subsequent virus scan may be performed to remove remaining traces of the rootkit and other malicious codes from the computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07802300&OS=07802300&RS=07802300
owner: Trend Micro Incorporated
number: 07802300
owner_city: Tokyo
owner_country: JP
publication_date: 20070206
---
The present invention relates generally to computer antivirus and more particularly but not exclusively to detection and removal of kernel rootkits.

Rootkits comprise computer readable program code designed to conceal running processes files or system data. Rootkits may be used to surreptitiously modify parts of the operating system or install themselves as drivers or kernel modules. Increasingly rootkits are being used by virus coders as malicious code or part of malicious code. Kernel rootkits also known as kernel mode rootkits are especially difficult to detect because they patch the operating system kernel to prevent common file and registry scans from detecting them. Even when kernel rootkits are detected by behavior monitoring they are still difficult to remove because they usually modify corresponding kernel application programming interface API to prevent any application program from removing them. What is needed is an effective technique that allows for detection and removal of kernel rootkits.

In one embodiment an anti rootkit module compares operating system kernel binary files to their loaded kernel file image in memory to find a difference between them. The difference may be scanned for telltale signs of rootkit modification. To prevent rootkits from interfering with memory access of the kernel file image a pre scan may be performed to ensure that paging functions and the interrupt dispatch table are in known good condition. If the difference is due to a rootkit modification the kernel file image may be restored to a known good condition to disable the rootkit. A subsequent virus scan may be performed to remove remaining traces of the rootkit and other malicious codes from the computer.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Being computer related it can be appreciated that some components disclosed herein may be implemented in hardware software or a combination of hardware and software e.g. firmware . Software components may be in the form of computer readable program code stored in a computer readable storage medium such as memory mass storage device or removable storage device. For example a computer readable storage medium may comprise computer readable program code for performing the function of a particular component. Likewise computer memory may be configured to include one or more components which may be executed by a processor. Software components may be implemented in logic circuits for example. Components may be implemented separately in multiple modules or together in a single module.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between each type of malicious code malicious codes are also collectively referred to herein as viruses. 

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer may be configured as a server computer a client computer or some other computing apparatus depending on the application. The computer may have less or more components to meet the needs of a particular application. As shown in the computer may include a processor such as those from the Intel Corporation or Advanced Micro Devices for example. The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. keyboard mouse one or more permanent data storage devices e.g. hard drive a display monitor e.g. LCD flat panel monitor a computer network interface e.g. network adapter modem and a main memory e.g. RAM .

In the example of the main memory includes an antivirus program . The antivirus program may be stored in the data storage device and loaded into the main memory for execution by the processor . The main memory also includes operating system kernel file image which comprises an in memory copy of operating system kernel binary files stored in the data storage device . In one embodiment the computer runs the Microsoft Windows operating system. However the invention is generally applicable to other operating systems.

The antivirus program may comprise an anti rootkit module a scan engine and virus patterns . The anti rootkit module may comprise computer readable program code for detecting rootkits. In one embodiment the anti rootkit module is configured to perform a pre scan to prevent a rootkit from interfering with the operation of the anti rootkit module to find portions of the kernel file image modified by a rootkit and to restore these portions to a known good condition. As will be more apparent below these actions disable the rootkit allowing the rootkit to be found by the scan engine for removal.

The scan engine may comprise computer readable program code for detecting computer viruses such as rootkits. In one embodiment the scan engine scans data for computer viruses by comparing their contents to virus signatures patterns regular expressions and other information for identifying computer viruses stored in the virus patterns . For example the scan engine may employ pattern matching algorithms to detect rootkits. The scan engine may also be configured to perform a cleanup action such as removal of detected rootkits and other malicious codes. The scan engine may employ conventional antivirus algorithms such as those in commercially available antivirus products from Trend Micro Inc.

The computer virus patterns may include computer virus signatures patterns regular expressions and other information for identifying computer viruses. In one embodiment the virus patterns also include patterns indicative of rootkit modification and infestation. The virus patterns may be periodically updated to include the latest information for identifying rootkits and modifications they make on in memory copies of operating system kernel files. For example the virus patterns may be periodically updated over the Internet by the vendor of the antivirus program using information obtained by their antivirus research center e.g. TrendLabs antivirus research center of Trend Micro Inc. .

Referring now to there is shown a flow diagram schematically illustrating the operation of the antivirus program in accordance with an embodiment of the present invention. A kernel rootkit may escape detection and removal by modifying the kernel file image which is the image of the kernel binary files loaded in the main memory . In the example of the rootkit modifies locations see arrow and locations see arrow of the memory containing the kernel file image . The modifications may infect the kernel to prevent application programs from accessing executable files of the rootkit stored in the data storage device accessing locations of the memory containing the modifications or making function calls to detect and remove the rootkit . These allow the rootkit to perform its malicious functions such as using the computer to send spam opening a back door to the computer monitor usage of the computer and so on.

Some legitimate i.e. non malicious programs may also modify the kernel file image . These modifications allow a legitimate program to perform its functions. As will be explained later with reference to the anti rootkit module may take legitimate patches into account so as not to interfere with the operation of corresponding legitimate programs. In the example of the legitimate program modifies locations see arrow and locations see arrow of the memory containing in memory copies of the kernel binary files .

In one embodiment the anti rootkit module verifies that the kernel binary files are virus free by comparing their checksum with a known good checksum. The good checksum may be obtained from a known good copy of the kernel binary files for example.

The anti rootkit module compares the contents of the kernel binary files to those of the kernel file image to detect differences between them. For each detected difference the anti rootkit module scans the difference to determine if the difference is due to a modification made by a rootkit. For example the anti rootkit module may consult the virus patterns to determine if the difference matches one or more patterns known to be due to a modification by a rootkit e.g. as observed in honey pot computers . The anti rootkit module may also check memory locations referenced in the difference to see if those memory locations contain data indicative of rootkit infestation. If the difference is attributable to a rootkit the anti rootkit module may restore the corresponding modified memory locations to their previous state. Otherwise if the difference is not indicative of a rootkit modification the anti rootkit module continues looking for modifications done by rootkits and restoring memory locations modified by rootkits. Performing the aforementioned procedure for the entirety of the kernel file image advantageously results in the rootkit being prevented from interfering with subsequent operations performed by the scan engine to find the rootkit and remove it from the computer . That is the scan engine may be employed to find and remove remaining traces of the rootkit once the kernel file image has been rid of modifications made by the rootkit .

The method begins with the anti rootkit module performing a pre scan to prevent any rootkit from interfering with subsequent rootkit detection and removal operations. The pre scan is configured to allow the anti rootkit module to access the kernel file image in the memory even when the computer is infested with rootkits. In the example of the the pre scan comprises steps .

An x86 processor directly executes instructions for accessing virtual memory locations that are in physical memory. That is virtual memory access may be performed without having to go through the operating system thereby bypassing kernel rootkits. At first glance this allows an application to readily access the kernel file image in the memory to find and remove a kernel rootkit. However a kernel rootkit may still prevent an application from finding and removing the kernel rootkit by marking the virtual memory addresses containing the kernel file image as paged out. Virtual memory locations typically cannot be accessed directly when paged out forcing any application wanting to access the virtual memory to go through the system s paging function. Generally speaking a paging function is an operating system exception handler that moves paged out memory locations to main memory and marks those locations as paged in to allow them to be read. A rootkit may modify the paging function to prevent access to the rootkit.

To ensure the integrity of a paging function the anti rootkit module determines during the pre scan whether or not the paging function has been modified step . If the paging function has been modified the anti rootkit module restores the paging function back to its original condition step . For example the anti rootkit module may put the paging function back to its pre modified patched or known good condition.

In line patching typically involves modification of the first few bytes of the target function. The anti rootkit module may thus be configured to store or have access to the first few bytes e.g. 7 to 10 bytes of important operating system APIs such as paging functions to be able to detect modifications to these functions and restore them back as needed. For example the anti rootkit module may compare the values of the first few bytes of a paging function loaded in memory with known good values to determine if the paging function has been patched. If so the anti rootkit module may overwrite the modifications by restoring the paging function using the known good values.

A rootkit may also intercept and interfere with virtual memory access by hooking the interrupt service routine ISR for the paging function by modifying the operating system s interrupt dispatch table IDT which contains interrupt service routine pointers. To prevent a paging function from being intercepted the anti rootkit module checks whether or not the interrupt dispatch table has been modified step . If the interrupt dispatch table has been modified the anti rootkit module restores the interrupt dispatch table to a known good condition step . For example the anti rootkit module may replace values in the interrupt dispatch table with known good ones. In one embodiment the anti rootkit module stores or has access to known good values for the interrupt dispatch table. This allows the anti rootkit module to compare the interrupt dispatch table s current values to known good values to determine if the interrupt dispatch table has been modified and to copy known good values back to the interrupt dispatch table to restore it as needed.

Completion of the pre scan allows the anti rootkit module to use a paging function to read virtual memory locations containing the kernel file image . This allows the kernel file image to be subsequently compared to the kernel binary files to find differences between them see step .

The anti rootkit module may read the kernel binary files step for subsequent comparison to the kernel file image see step . To prevent a rootkit from interfering with the reading of the kernel binary files the anti rootkit module may build up an I O input output request packet that may be passed directly to the operating system s file system to query the contents of the kernel binary files . This procedure is safer than using a provided API e.g. IoCreateFile in the Microsoft Windows operating system or other well known function or file I O service which are typical targets of rootkits. In the Microsoft Windows operating system the I O request packet may comprise an I O Request Packet IRP . To use an IRP to read the contents of a file one may a get the target device object e.g. C drive b build the IRP e.g. using the IoAllocatelrp c pass the IRP to the target device e.g. using IoCallDriver and d get the contents of the file from the returned buffer.

The anti rootkit module may verify that the kernel binary files have not been infected by a rootkit or other malicious code by taking its checksum for comparison to a known good checksum.

The anti rootkit module may compare the kernel binary files with its in memory copy i.e. the kernel file image to find differences between them step . If they are different step to step the anti rootkit module determines if the difference is due to a modification made by a rootkit. That is the anti rootkit module may check the difference for tell tale signs of rootkit modification. For example the anti rootkit module may scan the difference or memory locations referenced in the difference for contents indicative of rootkit modification. If the difference is attributable to a rootkit the anti rootkit module may restore the kernel file image back to a known good condition step to step .

The virus patterns may contain difference patterns known to have been due to rootkit infestation. The virus patterns may also include known good data for patching over differences found by the anti rootkit module to restore the kernel file image to a known good condition. In one embodiment the anti rootkit module employs a pattern matching algorithm to scan differences for contents indicative of rootkit infestation. If there is a difference attributable to a rootkit the portion of the kernel file image that is different from that of the kernel binary files may be patched to match the kernel binary files thereby restoring the kernel file image to a known good condition.

If the anti rootkit module does not find any difference between the kernel binary files and the kernel file image or if any found difference is not due to a rootkit the anti rootkit module may restore the paging function and the interrupt dispatch table to their original conditions in the event the anti rootkit module modified them during the pre scan step . This typically has to be performed when the paging function interrupt dispatch table or both have been modified by a legitimate program.

After the foregoing steps it may be assumed that the kernel file image is clear or have been cleared of kernel rootkits. At this point the scan engine may start scanning the data storage device the main memory and other storage locations of the computer for rootkits and other malicious codes step . The scan engine may remove detected rootkits and other malicious codes.

A particular example using an embodiment of the present invention is now described with reference to . show an example involving rootkit infestation of the kernel file image to modify the IoCreateFile routine which is a file creation function in the Microsoft Windows operating system. The example rootkit replaces the first few lines of the IoCreateFile routine with a jump instruction to a rootkit code. It is to be noted that this particular example is provided for illustration purposes only and is not meant to be construed as a limitation of the invention.

Referring now to there is shown a flow diagram of a method of detecting kernel rootkits in accordance with an embodiment of the present invention. In the method steps and perform a function similar to that of steps and of the method see while steps and perform a function similar to that of steps and of the method .

In the method the binary contents of the routine s file in permanent data storage file copy is compared to the binary contents of the routine s copy in main memory step . The block labeled shows the contents of the routine s file copy while the block labeled as shows the contents of the routine s in memory copy. In the example of the in memory copy of the routine IoCreateFile in this example has been modified by the rootkit to include a jump to a rootkit code as in . The modification in this example involves adding code in the first few lines of the routine followed by the original code not shown of the routine.

Continuing the example the modification made by the rootkit to the routine is found because of a difference between the routine s file and in memory copies step . The difference matches a difference pattern for modifications typically performed by the rootkit step . In this instance the difference matches a difference pattern for the jump instruction to a particular memory location. To determine whether or not the modification is attributable to a rootkit rather than a legitimate program the contents of the memory locations pointed to by the jump instruction may be scanned and compared to signatures of known rootkits step . In this example scanning memory locations beginning at the location pointed to by the jump instruction in the difference results in identification of the rootkit code see . The scanning of the rootkit code may be performed using a pattern matching algorithm. Other scanning algorithms may also be used without detracting from the merits of the present invention. The routine which is part of the kernel file image in memory is restored to a known good condition upon identification of the rootkit modification step to step . Otherwise in the event the difference is not indicative of rootkit modification any modification done to the routine as part of scanning the kernel file image for rootkits may be restored back step to step .

Improved methods and apparatus for detecting and removing kernel rootkits have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

