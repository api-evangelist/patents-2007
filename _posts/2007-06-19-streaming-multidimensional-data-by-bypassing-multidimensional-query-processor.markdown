---

title: Streaming multidimensional data by bypassing multidimensional query processor
abstract: A data warehouse comprises a multidimensional data storage area to store multidimensional data and a transactional data storage area to store underlying transactional data from which the multidimensional data is generated. The data warehouse also comprises a multidimensional query processor to provide one or more interfaces to issue a first set of queries conforming to one or more multidimensional query languages to retrieve the multidimensional data from the multidimensional data storage area. Furthermore, the data warehouse comprises a dynamic query engine to provide an additional interface to issue a second set of queries that bypass the interfaces provided by the multidimensional query processor to retrieve the transactional data from the transactional data storage area, wherein the second set of queries do not conform to any of the one or more multidimensional query languages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07792784&OS=07792784&RS=07792784
owner: International Business Machines Corporation
number: 07792784
owner_city: Armonk
owner_country: US
publication_date: 20070619
---
This application claims the benefit of U.S. Provisional Application Ser. No. 60 941 166 filed May 31 2007 the entire content of which is incorporated herein by reference.

The invention relates to enterprise software systems and more particularly to issuing queries within enterprise software systems storing multidimensional data.

Enterprise software systems are typically sophisticated large scale systems that support many e.g. hundreds or thousands of concurrent users. Examples of enterprise software systems include enterprise performance management systems financial planning systems budget planning systems order management systems inventory management systems sales force management systems business intelligence tools enterprise reporting tools project and resource management systems and other enterprise software systems.

Many enterprise performance management and business planning applications require a large base of users to enter data that the software then accumulates into higher level areas of responsibility in the organization. Moreover once data has been entered the data must be retrieved to be utilized. The system performs mathematical calculations on the data combining data submitted by one user with data submitted by another. Using the results of these calculations the system generates reports for review by higher management. Often these complex systems make use of multidimensional data sources that organize and manipulate the tremendous volume of data using data structures referred to as data cubes. Each data cube includes a plurality of hierarchical dimensions having levels and members for storing multidimensional data.

One example of a storage facility for multidimensional data is the SAP Business Information Warehouse SAP BW provided by SAP Inc. of Walldorf Germany. SAP BW provides database tools and databases to clients that allow the clients to store extract query and manipulate data. SAP BW stores multidimensional data in data structures known as InfoCubes. Open Analysis Interfaces are typically used to extract multidimensional data from the InfoCubes. SAP BW supports three Open Analysis Interfaces the Object Linking and Embedding Database OLE DB for Online Analytic Processing OLAP the OLAP Business Application Programming Interface BAPI and the Extensible Markup Language XML for Analysis XMLA . In addition SAP also provides the Business Explorer BEX interface for querying the OLAP processor of the SAP BW system.

Each of OLE DB OLAP BAPI and XMLA generate Multidimensional Expression MDX queries. In general MDX is a language for querying multidimensional data stored in multidimensional databases. Each query from a user through the Open Analysis Interfaces likewise is an MDX query each of which must be processed by an MDX processor. Similarly the BEX interface interacts with the OLAP processor to output the results of complex multidimensional queries. Therefore as the number of concurrent users increases frequent round trips of data and the limitations of the SAP BW for handling a high volume of MDX and BEX OLAP queries presents scalability and performance issues. Similarly Open Analysis Interfaces and BEX may be somewhat limited with respect to the ability to transfer large quantities of data.

In general the invention is directed to techniques that enable real time streaming of data from a multidimensional data warehouses. As described herein streaming of data from a complex enterprise multidimensional data warehouse may be accomplished without necessarily issuing multidimensional queries directly to the data warehouse. As one example real time streaming of data from an SAP BW may be accomplished without the use of Open Analysis Interfaces or the Business Explorer BEX that typically utilize complex queries in conformance with a multidimensional query language and extract voluminous amounts of multidimensional data.

As described herein a dashboard appliance receives a stream of events from the data warehouse and presents dashboards to enterprise users. The dashboards graphically illustrate current enterprise activity and provide an up to date view of the enterprise data. The stream of events received and processed by the dashboard appliance represents changes or updates to the multidimensional data maintained by one or more data warehouses.

A dynamic query engine operates within each data warehouse to provide a continual stream of enterprise events to the dashboard appliance. As described herein the dynamic query engine provides an execution framework for execution of low level queries that bypass any multidimensional interfaces provided by the data warehouse. The low level queries may be queries which do not conform to any multidimensional querying language. In one embodiment for example the dynamic query engine allows devices such as the dashboard device to define SQL based queries that are used to extract incremental differences made to the multidimensional data warehouse. Once established the dashboard device received an unlimited stream of raw data over the wire by way of a network communication or a file transfer.

In accordance with the techniques described herein the dashboard device may interact with the dynamic query engine to define queries that bypass any multidimensional interfaces presented by the data warehouse receive the raw data from the data warehouse in the form a stream of events and reassemble the raw data into one or more local multidimensional data cubes within the dashboard device. The dashboard device may then utilize the local data cubes to update dashboard views presented to the user rather than issuing complex multidimensional queries to the data warehouse directly. To maintain the streaming of raw data from the multidimensional data warehouse the device may refresh of the local data cube as the raw data stored in the data warehouse is updated gathering only incremental updates to the data by interaction with the dynamic query engine.

As described herein there may be two phases to raw data extraction from a data warehouse. First the dashboard device may perform metadata extraction. The dashboard device may extract metadata from the data warehouse regarding both the organization of the multidimensional data within the warehouse and the underlying transactional data on which the multidimensional data is based. The dashboard device may use the metadata to create a storage schema for locally storing the raw data such that the local schema may resemble all or portions of the storage schema used for the multidimensional data structures of the data warehouse. The dashboard device may also use the metadata to formulate SQL based database queries for extracting the raw data directly from a transactional data are of the data warehouse. Moreover the dashboard device may use the metadata as well as user requirements to narrow the amount of raw data to be extracted from the warehouse. After extracting and processing the metadata to generate data queries the dashboard device engages the dynamic query engine installed with in the data warehouse to specify the SQL based data queries.

Once the queries are defined and installed the dashboard device invokes the queries to receive a stream of events representing incremental updates to the raw data from the transactional area of the data warehouse. The dashboard devices stores this extracted data in the one or more local data cubes and utilizes the local data cube for presenting the dashboards to the users. For example after the first data extraction the data warehouse may send a network communication to the dashboard device in response to a transaction event. The communication triggers the dashboard device to perform extraction of the new updated data by invocation of the defined queries. After each data extraction the dashboard device may update the dashboards presented to the users.

In one embodiment the invention is directed to a data warehouse which comprises a multidimensional data storage area to store multidimensional data and a transactional data storage area to store underlying transactional data from which the multidimensional data is generated. The data warehouse also comprises a multidimensional query processor to provide one or more interfaces to issue a first set of queries conforming to one or more multidimensional query languages to retrieve the multidimensional data from the multidimensional data storage area. Furthermore the data warehouse comprises a dynamic query engine to provide an additional interface to issue a second set of queries that bypass the interfaces provided by the multidimensional query processor to retrieve the transactional data from the transactional data storage area wherein the second set of queries do not conform to any of the one or more multidimensional query languages.

In another embodiment the invention is directed to a method comprising installing a dynamic query engine on a data warehouse wherein the data warehouse includes transactional data in a transactional data storage area and multidimensional data generated from the transactional data in a multidimensional data storage area and further wherein the data warehouse includes one or more interfaces for issuing a first set of queries conforming to the one or more multidimensional query languages to query the multidimensional data. The method further comprises providing with the dynamic query engine an additional interface that issues a second set of queries that bypass the interfaces provided by the multidimensional query processor wherein the second set of queries do not conform to any of the one or more multidimensional query languages. Moreover the method comprises retrieving with the additional interface of the dynamic query engine the transactional data from the transactional data storage area according to the second set of queries. The method also comprises streaming the retrieved transactional data on a network

In another embodiment the invention is directed to a system comprising a data warehouse and a network device. The data warehouse comprises a multidimensional data storage area to store multidimensional data a transactional data storage area to store underlying transactional data from which the multidimensional data is generated and a multidimensional query processor to provide one or more interfaces to issue a first set of queries conforming to one or more multidimensional query languages to retrieve the multidimensional data from the multidimensional data storage area. The data warehouse further comprises a dynamic query engine to provide an additional interface to issue a second set of queries that bypass the interfaces provided by the multidimensional query processor to retrieve the transactional data from the transactional data storage area and metadata from the transactional data storage area and metadata from the multidimensional data storage area wherein the second set of queries do not conform to any of the one or more multidimensional query languages. The network device comprises a streaming database having a local multidimensional data storage area a metadata driver to receive metadata from the dynamic query engine of the data warehouse and a data driver to create a storage schema in the local multidimensional data storage area according to the metadata received from the dynamic query engine to generate the second set of queries for the dynamic query engine to receive transactional data from the dynamic query engine and to store the received transactional data in the local multidimensional storage area according to the storage schema.

In yet another embodiment the invention is directed to a computer readable medium containing instructions. The instructions cause a programmable processor to receive from a dashboard device a unique identifier and a set of queries wherein the queries do not conform to a multidimensional data query language. The instructions also cause the programmable processor to store the unique identifier and the set of queries in a data table retrieve metadata from a transactional data storage area of a data warehouse retrieve metadata from a multidimensional data storage area of a data warehouse. Moreover the instructions cause the programmable processor to transmit the metadata from the transactional data storage area and the metadata from the multidimensional data storage area to the dashboard device using a chunking protocol operating at an application layer layer seven of the Open Systems Interconnection OSI networking model and to retrieve transactional data from the transactional data storage area of the data warehouse and to transmit the retrieved transactional data to the dashboard device using the chunking protocol.

The techniques described herein may provide several advantages. Streaming data is generally presenting data and changes to the data to a user over time. The user may observe changes to the data in real time. Changes to the data may occur upon business events also referred to herein as transaction events such as for example issuing a purchase order replenishing supplies issuing a forecast or posting an expense item. Data warehouses are typically designed to present a user with the results of a query on demand rather than to stream data. The techniques described herein may enable streaming the data resulting from multidimensional queries and analysis.

As another example the techniques may reduce the burden carried by the data warehouse. As such a greater number of users may be able to query the same data. Accordingly users may have the ability to quickly receive the results of a query. Moreover the techniques described herein may permit streaming a potentially infinite quantity of data to the remote server.

Although described with respect to dashboard devices the techniques may be employed on other types of devices that maintain streaming databases and reassemble raw data in multidimensional form for presentment to users.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

Enterprise users may utilize a variety of computing devices or dashboard devices to interact with data warehouse via network . For example an enterprise user may interact with data warehouse using a laptop computer desktop computer or the like running a web browser such as Internet Explorer from Microsoft Corporation of Redmond Wash. Alternatively an enterprise user may use a personal digital assistant PDA such as a Palm organizer from Palm Inc. of Santa Clara Calif. a web enabled cellular phone or similar device. A computing device may include a dashboard device.

Network represents any communication network such as a packet based digital network like a private corporate network or a public network like the Internet. In this manner computing environment can readily scale to suit large enterprises. Enterprise users may directly access data warehouse via a local area network or may remotely access data warehouse via a virtual private network remote dial up or similar remote access communication mechanism.

A transaction event may update the data stored on data warehouses . A transaction event may be for example a sale of a product or the reception of a shipment of products. In response to a transaction event such as a sale a new transaction may be entered into data warehouses which may include for example elements such as the date product name product description point of sale price and net profit. The change in the data is manifested in the stream of data from data warehouses to dashboard devices . In turn dashboard devices update the views presented to users with respect to the changes to the data caused by transaction events.

For exemplary purposes the invention is described in reference to dashboard devices and data warehouses associated with large scale enterprise business intelligence systems enterprise financial or performance management systems. The techniques described herein may be readily applied to dashboard devices and data warehouses associated with other software systems including other large scale enterprise software systems. Examples of enterprise software systems include order management systems inventory management systems sales force management systems business intelligent tools enterprise reporting tools project and resource management systems and other enterprise software systems. The techniques described herein may also be applied to smaller scale business intelligence software and software systems.

Dashboard devices may provide users access to streaming data to view events in real time. For example dashboard devices may provide users with a real time stream of data such as sales by region or sales by product and country. Other examples of possible information may include early warning indicators of problems with specific products or services performance indicators and risk indicators. Moreover such data can be streamed to users in real time. That is after a transaction event occurs such as a sale the data may be updated and dashboard devices may retrieve the updated data to update in real time the views provided to users . The data is multidimensional in that each multidimensional data element is defined by a plurality of different object types where each object is associated with a different dimension. In addition users may manipulate the data retrieved by dashboard devices in order to retrieve additional details about the data.

As an example user A may use dashboard device A to make business decisions in the banking industry. User A may be a bank manager of a bank fixed income division who may need to make business decisions regarding a bond portfolio to maximize profits for the fixed income division. Such bank managers face the need typical of most business people for obtaining real time access to key transaction events. That is business people may need to be able to monitor certain business metrics in real time such as inventory levels demand forecast number of returns of a particular product defect rates of a particular product risk attributes and warning attributes. For example the bank managers may need to monitor for a bond portfolio the rating of each bond the yield of each bond priorities of the division and risk profiles of the portfolio. Each of these metrics may change rapidly. By utilizing the techniques described herein which incorporate streaming data the managers may monitor these metrics on the fly rather than repeatedly generating queries for retrieving all updates to the data.

Streaming data in real time from data warehouses to dashboard devices may provide certain advantages. For example a large number of users may be able to view dashboards on dashboard devices representing data stored on data warehouses . Users may have the ability to quickly receive the results of a query by querying data streamed to and stored on dashboard devices rather than querying data warehouses directly. Moreover the techniques described herein may enable data warehouses to stream a potentially infinite quantity of data to dashboard devices .

Although described with respect to dashboard devices the techniques may be employed on other types of devices that maintain streaming databases and reassemble raw data in multidimensional form for presentment to users.

Transactional data storage area of data warehouse stores transactional data while multidimensional data storage area of data warehouse stores multidimensional data. Data warehouses may generate multidimensional data stored in multidimensional data storage area as a function of the transactional data of transactional data storage area . Areas and may exist as any arrangement of data storage. For example areas and may exist concurrently with the other components of data warehouse as a single entity. As another example areas and may exist as distinct database servers. As yet another example each of areas and may exist on multiple database servers. In one embodiment data warehouse may be the SAP Business Information Warehouse SAP BW .

Transactional data may be raw data collected in a standard database. In general transactional data is data collected in response to a transaction event. For example a transaction event may be the sale of one product. The transactional data from such a sale may include furthering the example the date of the sale the name of the product the description of the product the point of origin the place of sale a description of the customer the name of the salesperson the price of the product and the net profit from the sale. Upon a new sale a new entry may be recorded in transactional data potentially including an entry for each dimension. For a large corporation organizing such data into a sensible representation may be time consuming. Moreover while a local manager may perceive the name of the salesperson as a high priority in order to award promotions or coordinate training the corporate CFO might prioritize net profit by region over all else. Rather than viewing raw transactional data therefore users may instead manipulate multidimensional data stored in multidimensional data sources .

Multidimensional data sources may represent transactional data in a more useful way. Multidimensional data sources may be multidimensional data cubes which may comprise more than three dimensions. In one embodiment multidimensional data sources may be arranged in a snowflake schema. In accordance with the above example a data cube may have a dimension for each of time product net profit price and place of sale thus requiring at least five dimensions. Data warehouse may convert transactional data into multidimensional data and store the multidimensional data in multidimensional data sources . Furthermore when transactional data is updated data warehouse may update multidimensional data sources accordingly. Transactional data may be updated for example in response to a request from one of users or in response to an outside triggering event from another source not shown such as a transaction event. For example a cash register may be communicatively coupled to data warehouse via network and send a communication upon the conclusion of a sale of a product. In response data warehouse may update transactional data and likewise multidimensional data sources accordingly.

Two primary methods for querying data stored in data warehouse are currently used in accordance with the known art. The first is a tool provided by SAP the Business Explorer BEX which depicts as business explorer module BEX module . BEX module works directly with OLAP processor of SAP BW to query multidimensional data sources . BEX is capable of handling a limited number of users and corresponding queries at a given time. The second method is to utilize Open Analysis Interfaces which may generate and issue Multidimensional Expression MDX queries to MDX processor which may translate MDX queries into OLAP queries for OLAP processor . Examples of Open Analysis Interfaces are the Object Linking and Embedding Database OLE DB for OLAP the OLAP Business Application Programming Interface BAPI and the Extensible Markup Language XML for Analysis XMLA . MDX is designed for on demand querying and is not designed to support streaming of multidimensional data. As each of the Open Analysis Interfaces utilize the same MDX processor there tends to be very little difference in performance between the Open Analysis Interfaces other than the complexity of the MDX queries generated.

A third method may be implemented in accordance with the techniques as described in greater detail below. In general this method permits bypassing the querying of multidimensional data sources that is bypassing either or both of MDX processor and OLAP processor by extracting some or all of transactional data and organizing the transactional data into a data cube on a local server for example one of dashboard devices . Dashboard devices may communicate with gateway server in order to access dynamic query engine .

Dashboard devices may generally retrieve the metadata and raw data stored on data warehouses in order to create a local multidimensional data cube. Dashboard devices interact with dynamic query engine to install queries to produce a continuous stream of data that represents the incremental changes made to transactional data source . Dynamic query engine produces the data stream on the wire that is over a high bandwidth network link to dashboard devices . Dashboard devices capture the retrieved multidimensional data and reassemble the data locally in multidimensional form such as in a data cube structure. Dashboard devices may then issue multidimensional queries to the local data cube to update the dashboard views provided to users .

This method may provide several advantages. For example the method may permit streaming of data as transactional data is updated by using a query to update the data cube on the remote server in response to the update of transactional data . Another advantage may be that avoiding the use of MDX queries may avoid delays that may occur when a high volume of users issue a high volume of MDX queries. Moreover the method may permit dynamic response to changes to transactional data or multidimensional data sources .

Another possible advantage may be the reduction of time to receive the result of a query as the dashboard device that stores the data for example dashboard device A may only retrieve a subset of the data stored in transactional data . Thus the data cube stored on dashboard device A may be smaller and a query from one of users need not necessarily traverse all of the data stored on multidimensional data sources to return a result. For example user A operating dashboard device A may only be interested in data for the current year. Accordingly in creating the data cube dashboard device A may only need to extract data from transactional data corresponding to the current year.

Query translator receives SQL queries from dashboard devices . Query translator may translate these SQL queries into OpenSQL queries. An OpenSQL query includes three clauses a SELECT clause a FROM clause and a WHERE clause. The SELECT clause defines the column list or the result set to return to the client. The SELECT clause can be parsed into a list of tuples each tuple including a table name a column name and an alias table name. During execution dynamic query engine may replace the alias table name with the actual table name. The FROM clause defines the relationship between various underlying tables of a multidimensional data source or a transactional data source object as well as how to join the various tables when applying a filter. The WHERE clause includes zero or more filters that may be applied just before returning the result set which may reduce the resulting dataset. Thus dashboard devices may avoid the use of complex multidimensional querying languages such as MDX designed to interact with multidimensional interfaces typically presented by data warehouses .

Execution framework may execute the translated queries from query translator . The translated queries from query translator may be persistent queries installed on execution framework that are designed to capture changes to transactional data source . In one embodiment execution framework may store the translated queries in data table that associates particular queries with the requesting dashboard device for example dashboard device A. Data table is discussed in greater detail with respect to . Execution framework may periodically reissue the installed queries and return the results to requesting dashboard devices accordingly. In one embodiment execution framework may transmit the results on the wire. That is execution framework may transmit the results of the queries over a network link to dashboard devices . In one embodiment execution framework transmits the results of the queries via the transmission control protocol internet protocol TCP IP . In another embodiment execution framework may transmit the results using a flat file. In yet another embodiment execution framework may transmit the results either by TCP IP or by flat file permitting dashboard devices to select the appropriate delivery method. This may permit execution framework to transmit an unlimited quantity of data in a streaming fashion. Execution framework may execute the translated queries in the background in order to avoid time delays associated with executing queries in the foreground. That is execution framework may execute the stored queries using a simple querying language such as SQL while avoiding the complex multidimensional query processing engines provided by data warehouses such as OLAP and MDX.

To execute the translated queries and extract data from data warehouses execution framework may utilize RFC handler . RFC handler calls RFCs i.e. functions implemented on data warehouses . In one embodiment data warehouses are SAP BWs and RFC handler may be designed in accordance with the SAP provided library of RFCs which enable for example querying of data and data extraction. RFC handler interprets the translated queries from execution framework and utilizes the proper RFCs to execute the queries. Execution framework may also utilize an Online Analytic Processing Business Application Programming Interface OLAP BAPI in order to extract metadata and data from multidimensional data sources .

Execution framework may also utilize metadata during query execution. Execution framework may store metadata in a column of data table or may receive the metadata from dashboard devices . Execution framework may use the metadata during execution of the queries to gather information about for example the tuples in a SELECT clause of an OpenSQL query. Execution framework also sends the results of queries to dashboard devices . Prior to query execution the dashboard device for example dashboard device A generates a unique identifier for itself which is sent to dynamic query engine . Execution framework may use the identifier to send the result to the proper dashboard device. Execution framework may transmit data using a chunking protocol. That is execution framework may break data into chunks and may send the chunks of data in series to for example dashboard device A from which dynamic query engine received a query. A chunking protocol may operate at the application layer or layer seven of the Open Systems Interconnection OSI networking model. Thus although to effect network transmission data may be segmented into packets during transmission at lower levels the chunking protocol may segment data into chunks before network transmission begins.

Execution framework may be able to execute any query of the supported query language. For example in one embodiment dynamic query engine is installed on an SAP BW server and execution framework is capable of executing any OpenSQL query. Therefore dynamic query engine is not limited to a strict set of hard coded or static queries but is capable of executing a wide range of complex queries.

Execution framework may also maintain a plurality of connections with dashboard devices . For example execution framework may maintain connections with each of dashboard devices A N. In one embodiment these connections may be TCP IP connections.

Dashboard devices may each create a unique identifier and send the unique identifier to dynamic query engine . Data table may use the identifiers to associate queries with each particular dashboard device. For example dashboard device A may create a unique identifier and send that unique identifier to dynamic query engine along with each of the queries dashboard device A sends to dynamic query engine . Dynamic query engine may create a new entry in data table for the queries received from each of dashboard devices . This may be necessary as each of dashboard devices may support a plurality of users each of whom may request views which require different data sets. Dynamic query engine may use the identifiers to transmit the results of the query to the proper destination for example dashboard device A.

In the example embodiment data table includes a key column a dashboard identifier column a field name column and two reference columns. The key column is used to uniquely identify each query entry. The dashboard identifier column stores the identifier associated with the requesting dashboard device for example dashboard device A. The field name column stores the table and field name of the table from which to extract data. The reference columns may be used to narrow the data set returned to the requesting dashboard device.

In one embodiment data table stores data corresponding to an SQL query. That is the field name column may store entries corresponding to the SELECT and FROM clauses of an SQL query while the reference fields may store entries corresponding to the WHERE clause of the SQL query.

In the exemplary embodiment dashboard includes views A N views . Views provide an interface between users and data warehouses . Users may request a plurality of views which display streaming real time data. Views provide users with mechanisms with which to request data displays and upon a submission of a data or view request views displays the requested data. Moreover dashboard provides users with the ability to drill down into the data in greater detail for example to query multidimensional data and local data cubes .

Dashboard engine controls various elements of dashboard device A. When dashboard needs to update the display dashboard engine instructs dashboard as to what needs to change and in what way. Dashboard engine also coordinates between metadata driver data driver and event handler .

Metadata driver retrieves metadata from data warehouses using metadata extraction queries. Metadata driver may customize these queries in accordance with requests from users issued through dashboard . Upon receiving metadata from data warehouses metadata driver may generate queries for retrieving data corresponding to the metadata. In one example metadata driver generates SQL queries. Metadata driver may customize the data queries to conform to requests from users as well. Metadata driver may pass the metadata and data queries to data driver .

Data driver may utilize metadata from data warehouses passed from metadata driver to create a multidimensional data structure in local data cube . In one embodiment data driver may structure local data cube in accordance with a snowflake schema. Other embodiments may utilize other multidimensional data structures and schemas such as a star schema. Data driver may also issue the queries generated by metadata driver to data warehouses .

Event handler receives notices of events from data warehouses . When an event such as a sale occurs transactional data of data warehouses is updated. Accordingly each local data cube of dashboard devices must also be updated to reflect the event. Event handler responds to an event notification from data warehouses . In one embodiment event handler may inform dashboard engine of any updates which must take place to local data cube and dashboard . For example upon a sale of a product event handler may inform dashboard engine of the sale and relevant data such as revenue product description and the location of sale. If dashboard is displaying sales reports dashboard engine may instruct dashboard to update in accordance with the new sale. Moreover dashboard engine may inform data driver to update local data cube in accordance with the event. In one embodiment data driver may generate a new query such as an SQL query to retrieve the relevant components of the event data. In another embodiment data warehouses and specifically dynamic query engine may transmit the data as part of the event notification and data driver may simply store the data in local data cube .

Warehouse interface acts as an intermediary between data warehouses and dashboard device A. Warehouse interface transmits and receives data between dashboard device A and data warehouses . For example in one embodiment warehouse interface may be implemented so as to transmit and receive data over TCP IP. In another example embodiment warehouse interface may transmit and receive flat files. Warehouse interface may also make a preliminary determination as to which component of dashboard device A data should be sent metadata driver data driver or event handler . For example when warehouse interface receives metadata from data warehouses warehouse interface forwards the data to metadata driver whereas when warehouse interface receives an event notification warehouse interface forwards the event notification to event handler .

In response to the request from user A dashboard engine of dashboard device A will determine what data to extract from data warehouses . For purposes of this example it is assumed that no data relevant to the request from user A is currently stored in local data cube . Therefore dashboard engine determines that all data relevant to the request from user A must be extracted. Using key performance indicators KPIs however dashboard engine may reduce the dataset to be extracted. For example dashboard engine may only extract data regarding actual sales of products and corresponding location for the current year when user A requests such data while not necessarily extracting data regarding product inventory or forecasted sales. After determining what data to extract dashboard engine consecutively enters two data extraction modes metadata extraction and data extraction.

Dashboard engine may generate a unique identifier to create a logical destination for identifying dashboard device A to data warehouses . Dashboard engine then signals metadata driver to generate metadata queries in metadata extraction mode and sends the unique identifier to metadata driver along with the signal. In response metadata driver generates queries to retrieve metadata . In one embodiment metadata driver generates SQL queries. Metadata driver generally queries metadata from two sources on data warehouses transactional data and multidimensional data sources . In one embodiment data warehouses are SAP BW systems wherein transactional data is stored in operational data store ODS tables. After generating the queries metadata driver sends the queries and identifier to warehouse interface from which the queries and identifier are sent to dynamic query engine .

Upon receiving the query and identifier from dashboard device A dynamic query engine may create a new data table entry which associates the identifier with the query . Execution framework of dynamic query engine then extracts metadata from transactional data using either or both of RFC handler and OLAP BAPI . Extracting metadata from transactional data is straightforward as transactional data stores data in standard transparent database tables. Next execution framework extracts metadata from multidimensional data sources again using either or both of RFC handler and OLAP BAPI . In one embodiment multidimensional data sources store data in a snowflake schema which includes one fact table multiple dimension tables and several master data tables. Execution framework may extract all relevant metadata from multidimensional data sources . Dynamic query engine may then return the metadata from both multidimensional data sources and transactional data to dashboard device A . In one embodiment execution framework transmits data to dashboard devices using TCP IP. In another embodiment execution framework transmits data using a flat file. Other embodiments may use other suitable methods for transmitting data.

Metadata driver of dashboard device A receives the returned metadata first in order to generate data queries from the metadata . In one embodiment metadata driver generates SQL queries from the metadata. However those skilled in the art will appreciate that the methods described herein may incorporate other querying languages without departing from the principles of the invention. In one embodiment the schema is a snowflake schema. Metadata driver passes the data queries and metadata to data driver .

Data driver prepares local data cube in accordance with the received metadata. That is data driver may create a data cube framework for local data cube from the metadata into which data can be entered upon receiving the raw data. The data cube framework may be a data storage schema corresponding to the storage schema of multidimensional data sources . In one embodiment for example data driver may recreate the snowflake schema of multidimensional data sources . Data driver may then submit the data queries to dynamic query engine of data warehouses in order to retrieve the raw data in the form of a data stream . Execution framework of dynamic query engine may associate the queries with the requesting dashboard device in a table and periodically execute the queries transmitting the results on the wire to the requesting dashboard device e.g. dashboard device A .

In one embodiment dynamic query engine utilizes Java Database Connectivity JDBC to extract data from transactional data and multidimensional data sources . In this embodiment JDBC simply executes the stored SQL queries in the form as they were received from data driver of dashboard device A and returns the result to dashboard device A .

In another embodiment dynamic query engine utilizes the SAP application layer access. represents this exemplary embodiment. In this exemplary embodiment query translator first receives the SQL queries from dashboard device A. Query translator parses and translates each query into an OpenSQL query. Once query translator has translated the SQL queries from dashboard device A into OpenSQL queries query translator passes the OpenSQL queries to execution framework . Execution framework stores the OpenSQL queries in data table . Execution framework periodically executes the stored queries to query transactional data and multidimensional data sources using RFC handler . SAP BW provides an RFC library by which other programs may interact with functions implemented in SAP BW. Dynamic query engine may utilize the RFC library to interact with data and functions stored in data warehouses .

Execution framework then returns the final resulting dataset to dashboard device A . Execution framework may send either sequential chunks of data or one flat file to dashboard device A. Execution framework may use either the chunking method or the flat file method for transmitting updates to the dataset to perform streaming. By sending data using a chunking protocol execution framework may transmit a potentially infinite stream of data to dashboard device A.

Upon receiving the result dataset data driver may store the result dataset in local data cube . Data driver may then perform multidimensional queries on the data stored in local data cube rather than performing multidimensional queries on multidimensional data sources stored in data warehouses . In one embodiment data driver uses MDX to query the data stored in local data cube . In another embodiment data driver uses OLAP BAPIs to query the data stored in local data cube . In yet another embodiment data driver uses a hybrid multidimensional querying language to query the data stored in local data cube . In other words dashboard device A may perform multidimensional queries on the data from data warehouses without using Open Analysis Interfaces of data warehouses by performing multidimensional querying on local data cube . Specifically dashboard device A may perform multidimensional queries on the data without utilizing the MDX processors of data warehouses .

Upon completion of the query of local data cube dashboard engine may update dashboard to display the result to the user . A method for initiating a view for a streaming database system is discussed in greater detail in co pending U.S. patent application Ser. No. 10 750 507 Weipeng P. Yan et al. A Method and System for Dynamically Initializing a View for a Streaming Data Base System filed Dec. 31 2003 assigned to the assignee of the present invention which is hereby incorporated by reference in its entirety.

Window is a detailed forecast vs. quota revenue chart of various regions in Europe. Again user A may observe changes to the data in real time. Likewise dashboard device A may issue a query retrieving forecast and quota figures by regions within Europe. Similarly window displays key sales conversion by quarter and region.

Window permits user A to select various regions within North America. If user A is interested in obtaining greater detail than merely North America user A may utilize interactive maps such as window to highlight specific regions. Dashboard device A retrieves the highlighted regions in order to form queries to issue to data warehouses .

Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims.

