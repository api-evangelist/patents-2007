---

title: Efficient network data transfer
abstract: An approach for providing efficient network data transfer service is provided. In one embodiment, a first database server receives, from a second database server, a first request to access a first storage subsystem. Here, the second database server cannot access first data in the first storage subsystem without another database server transmitting the first data to the second database server. In response, the first database server provides the second database server a first set of access primitives. Using the first set of access primitives, the second database server may access data stored in the first storage subsystem that may be otherwise not accessible. As a result, the first database server receives, from the second database server, a first data access request to access first data stored in the first storage subsystem.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08032548&OS=08032548&RS=08032548
owner: Oracle International Corporation
number: 08032548
owner_city: Redwood Shores
owner_country: US
publication_date: 20070731
---
The present invention relates to database systems and more specifically distributed database systems that support efficient data transfer across their component database systems.

Some organizations may install database servers in several locations that are geographically diverse from each other. For example a corporation may set up two database servers in two locations such as New York City and Los Angeles so that they operate in an autonomous and load balanced way in a normal situation but in case a disaster such as earthquakes hurricanes or terrorist attacks causes one server to fail the other server can quickly take over and keep critical functions and services some of which might have been previously supported by the failed server uninterrupted. Typically under such a multi location scheme a database server at a location has its own storage subsystem direct access to such a storage subsystem is not shared with database servers at other locations and only logical access to data stored in the storage subsystem is allowed to the database servers at the other locations. To provide logical access to data stored in the storage subsystem copies of files or tables may be provided by the database server that owns the storage subsystem to the database servers in the other locations using file transfer protocols.

In addition to being highly inefficient these techniques dictate uses of disparate methods to access local and remote data respectively. As a result a database server must use disparate calls APIs and logic flows in handling accesses to the local data and remote data thereby resulting in much programmatic complexity.

Under some other techniques a local data storage device may be explicitly exported by its hosting operating system to a remote node that hosts a remote database server. For example a hard disk that is directly attached to a hosting UNIX system may be explicitly exported by the hosting UNIX system. A remote node that has an appropriate communication link with the hosting UNIX system may mount the exported hard disk on the remote node using an NFS protocol thereby enabling remote access to the exported hard disk. However there may be no direct link between a system that hosts local data storage devices and a remote node. For example where a Network Attached Storage NAS system is used a local database server that controls direct access to the NAS system may not be the same system as the NAS system itself. The NAS system that hosts the data storage devices may not have any communication link with the remote database server that enables the NFS protocol. Or for any such reasons as site security the NAS system may not be configured for exporting through external protocols such as the NFS protocol to any other database servers except the one directly attached.

Therefore a better mechanism which would better support network data transfer in distributed database systems is needed.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments of the invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

Generally a server such as a database server is a combination of integrated software components and an allocation of computational resources such as memory a node and processes on the node for executing the integrated software components where the combination of the software and computational resources are dedicated to providing a particular type of function on behalf of clients of the server. A database server governs and facilitates access to a particular database processing requests by clients to access the database.

In accordance with some embodiments of the present description two or more database servers may be related but separate from one another. In particular the related database servers may be located in places geographically apart and communicatively linked through a network connection. Most of the database accesses required by database clients of any of the database servers can be satisfied locally by that database server. Occasionally however there may be a need for one of the related database servers to access another of the related database servers.

Since the related database servers are autonomous in most of their operations there may be storage subsystems that are local to a specific database server of the related database servers . In particular it is not always possible to have any direct communication link between such storage subsystems and other database servers. Under these circumstances it may not be feasible and or advisable to have the storage subsystems to be exported to the other database servers using general networking protocols such as Network File System NFS protocol.

In accordance with some embodiments of this description an efficient network data transfer service is provided between two database servers say a remote database server and a local database server. Through this efficient network data transfer service a full fledged database access with respect to otherwise non accessible locally attached including network attached storage subsystems may be provided to the database servers. For example through this service the remote database server may be offered to use a set of access primitives to access objects in the local database server. The objects to be directly accessed by the remote database server may include but are not limited to program objects and data objects. In particular data block level access may be offered to the remote database server relative to any otherwise non accessible storage subsystem that is attached to the local database server. A data block is an atomic unit of storage space allocated to store one or more database records e.g. rows . Typically a database system is configured to read and write database records from persistent storage and volatile memory in units no smaller than data blocks. When a record from a data block needs to be retrieved the entire data block is read into an in memory buffer the database system uses to temporarily store data blocks. Data blocks may also have headers and or other data structures that describe information about the data block and or records.

Using the set of access primitives the remote database server may offer an I O model to database clients associated with the remote database server. Under this I O model any such database client associated with the remote database server may use the same application programming interfaces to access data in the otherwise non accessible storage subsystem in the local database server as with those to access data in storage subsystems in the remote database server itself. In other words the database client does not need to know where the data is physically.

In some embodiments the efficient network data transfer service does not communicate with external kernel processes or other operating system processes. Instead the service makes use of a message pipe between the remote database server and the local database server that is established specifically for inter database server communication. Since the database servers are related for example maybe offered by the same vendor the message pipe is platform independent in some embodiments. Even though the remote database server may be deployed on a personal computer while the local database server may be deployed on a workstation that runs an entirely different operating system than that of the personal computer the database servers can still rely on the message pipe to provide the efficient network data transfer service.

In some embodiments any of the storage subsystems and may be a NAS system. Such a NAS system may be specifically configured to be accessible only by some or all of nodes a single database server.

In some embodiments any of the storage subsystems and may be a directly attached storage device to a database server. In these embodiments the directly attached storage device may be specifically configured to be accessible only by some or all of nodes in a single database server.

As used herein the terms remote and local may be used in a relative sense for illustration purposes only. For example the remote database server may be local to the remote clients and the remote storage subsystem but remote to the local clients and the local storage subsystem . Likewise the local database server may be local to the local clients and the local storage subsystem but remote to the remote clients and the remote storage subsystem .

In some embodiments a database server in system may be a single node database server or a multi instance database server that share access to storage subsystems among two or more database instances. Furthermore nodes in a database server may run any type of operating system including those types that are capable of exporting storage devices through operating system services or through network level protocols and those types that are not capable of the aforementioned exporting.

Computing devices that are used to implement database servers may vary from server to server and even within the same server cluster . For example a database server in system may run on a personal computer in an embodiment. A database server in system may run on a UNIX server in another embodiment. Multiple instances within the same server cluster may run the same operating system or alternatively different operating systems. The computing devices may run the same operating system different operating systems or different releases of the same operating system in various embodiments.

In some example embodiments the remote database server and the local database server as illustrated in may be autonomous to each other at least in normal operating circumstances. As used herein the term autonomous means that the database servers are attached with dedicated storage subsystems only directly accessible to the attached database servers that the servers may not be part of the same integrated system and that the database servers may support their own database clients and applications. The dedicated storage subsystems as noted before may be only directly accessible to their owner database servers.

In some embodiments the remote database server and the local database server are database systems developed by the same vendor such as database systems developed and provided commercially by Oracle Corporation Redwood Shore Calif. . In some embodiments a database server such as and may support at least one set of access primitives or at least one set of database opcodes . In some embodiments such a database server may support more than one set of access primitives concurrently. As a result in some embodiments the remote database server and the local database server may share one or more common sets of access primitives. Each set in the one or more sets of access primitives may correspond to a particular release of database systems and can be invoked by the database servers to implement full fledged database services to be provided to database clients. Concurrent support by a database server for multiple sets of access primitives translates to concurrent support by the database server for multiple releases of database systems.

In some embodiments access primitives or opcodes provide database system processes resident in a database server native access to program and data objects associated with the database server. As used herein the term native access means access enabled by the access primitives to these program and data objects can be made without further use of a translation entity. For example in situations where non native access is provided for example in the case of ODBC JDBC etc. users or user processes supply parameters and input data when invoking database access service from a database server. However such non native access requires a translation layer or function that translates the user supplied parameters data computer language statements etc. into internal format used by the database server. In addition such non native access only allows direct access to schema objects such as a SQL table a view etc. and does not provide direct access to non schema objects such as a data block that makes up a SQL table an index etc. . On the other hand when an access primitive is invoked to provide native access to program and data objects of a database server access to these objects can be made without any further translation as long as correct end point information is provided at the time of invocation. Furthermore any of the program and data objects natively and or directly accessed by an access primitive may be non schema objects.

Through access primitives a database server may natively access for example lock unlock read write modify etc. data at a data block level an extent level or a segment level in another database server or an otherwise non accessible storage subsystem attached to such another database server. For example an access primitive that reads a data block at a location data block loc using an access mode of read access mode may take the form of  native read data block loc read access mode . In a similar manner through access primitives a database server may natively access indexes keys populating indexes etc. In addition through access primitives a database server may natively access database schema constraints triggers stored procedures execution plans statistics etc. in another database server or an otherwise non accessible storage subsystem attached to such another database server. Such access may involve both data definition language types of operations such as creating a table index etc. and data manipulation language types of operations such as inserting deleting updating data etc. . Furthermore through access primitives a database server may natively access services by program objects such as transaction manager log writer optimization engine parallelization processes etc. in another database server.

As illustrated in the message pipe between the remote database server and the local server allows an entity in one of the two database servers to send messages to and receive messages from another entity in the other database server in accordance with some embodiments of the present description.

In some embodiments the message pipe is established on top of a TCP or UDP transport layer between a message dispatcher process in the remote database server and a corresponding message dispatcher process in the local database server . In some embodiments the message dispatcher processes and and the message pipe in between do not interact with any other services that are built on top of the TCP or UDP transport layer. For example the message dispatcher processes and and the message pipe between the two may neither interact nor rely on any such services NFS FTP etc. that are built on top of the TCP or UDP transport layer.

In these embodiments the message pipe is dedicated to carrying database specific communications between endpoints for example an endpoint in the remote database server and endpoints for example an endpoint in the local database server . The message dispatchers and may create a logical communication channel for the efficient network data transfer service in an embodiment. Thus in such an embodiment when remote database server and local database server are engaged in providing the efficient network data transfer service for database clients the messages between the database servers and may be transferred using the logical communication channel. In an alternative embodiment the message dispatcher and may transfer all database related messages not just those related to the efficient network data transfer service between the database servers in the same overall communication channel.

Messages carried by the message pipe and formats used by these messages may be specific to the database servers and implemented for example by the vendor that supplies database systems . The messages may carry message control information as well as service specific information.

The message pipe may be established by prior configuration and provision. As used herein the term by prior configuration and provision means that the message pipe is set up before for example an endpoint e.g. may make requests to communicate with another end point e.g. over the message pipe . In some embodiments the message pipe may also be established on demand. That is the message pipe may be established when a database server e.g. first receives a request to communicate with the other database server i.e. . For example a database client at the remote database server may make a request for data that needs to be satisfied by the local database server. If at the time of this request a message pipe has not yet been established the remote database server e.g. that handles the request may first cause the remote database server to establish the message pipe before sending the database client s request to the appropriate endpoint e.g. in the local database server .

In some embodiments sufficient network configuration information for example IP address port mode etc for establishing the message pipe may be stored in a persistent form on one or both of the database servers. Additionally and or optionally network configuration information may be obtained from disk memory a communication link user input user configuration command line arguments etc.

In some embodiments besides the efficient network data transfer service other services implemented by the database servers and may also use the message pipe for inter server communication purposes. Thus in a particular embodiment where the message pipe may be established on demand not only can a request associated with the efficient network data transfer service cause the message pipe to be established between the two database servers and but a communication request associated with a service other than the efficient network data transfer service also can cause the same message pipe to be so established.

In accordance with some embodiments of the present description the efficient network data transfer service permits a database server e.g. to invoke access primitives supported by a different database server e.g. relative to a storage subsystem e.g. that is otherwise inaccessible to the former database server i.e. .

In some embodiments the database servers and may negotiate with each other for the purpose of identifying and or selecting one or more commonly supported set of access primitives to be used in providing the efficient network data transfer service before such a service is made available to entities such as and or in the database servers and . In a particular embodiment where a set of access primitives is associated with a release of database systems a major version and or a minor version of the release may be used to uniquely identify or tag the set of access primitives. In this embodiment once one or more major versions and o minor versions of the releases commonly supported by the database servers and are established for example through negotiation the database servers may provide the efficient network data transfer services to entities etc. in their respective database servers by invoking each other s access primitives in the commonly supported sets.

In some embodiments in this negotiation the database servers and may also identify to each other what storage subsystems and or are attached to the database servers and that are not otherwise accessible to non attached database servers. In a particular embodiment identifying any storage subsystem of the database servers may be done using a globally unique identifier. As illustrated in an example of such a globally unique identifier is a global entity identifier that may comprise a network address of a database server e.g. to which a storage subsystem e.g. is attached to and an end point address or an entity identifier identifying the storage subsystem i.e. . Constructs e.g. data blocks extents segments within the storage subsystem may be further identified using appropriate suffix identifiers such as as illustrated in appended to the globally unique identifier of the storage subsystem resulting in a global sub entity identifier .

At a first time in step remote database server and local database server may engage in a negotiation as previously described to exchange information sufficient to establish the service to at least database clients of at least one of the two database servers. For example this negotiation allows the two database servers to agree upon one or more commonly supported sets of access primitives. In particular one of the one or more commonly supported sets of access primitives may for example allow remote database server or an entity therein to access objects in the local database server or storage subsystems attached to the local database server . Such storage subsystems may include one for example as illustrated in that may not be otherwise accessible to any other database servers other than the local database server .

After the efficient network data transfer service is established between the database servers and in one embodiment a database client may request database services from an associated database server that is one of the two database servers. As illustrated in a remote database client is associated with a remote database server . For example the remote database client may have established a database session the remote database server thereby becoming associated with the remote database server . Such a remote database client may request database services from the remote database server by way of communicating with the remote database server .

While most of the requests from the remote database client can be satisfied by accessing data in the remote database server some of the requests may involve accessing data or services in different database servers other than the remote database server . In particular there may be a request from the remote database client to access data in the otherwise non accessible storage subsystem attached to a different database server such as the local storage subsystem that is attached to the local database server as illustrated in step of .

Upon receiving such a request from the remote database client the remote database server translates user supplied command parameters and data in the request into data in native database format. Furthermore the remote database server may determine that the request must be satisfied by accessing data in the other database server i.e. local database server . In particular the remote database server may based on the information obtained during the negotiation for establishing the efficient network data transfer service as previously described determine that the data to be accessed is located on local storage subsystem .

Using the data in native database format in step of the remote database server may invoke an appropriate access primitive that is supported by the local database server to access the data stored on local storage subsystem . Invocation of such an access primitive may be in the form a request message sent from the remote database server to the local database server . The request from the remote database server may contain context information that carries data in native database format including but not limited to the previously mentioned data that was translated from the user supplied command the parameters and the data in the request from the remote database client .

After receiving the request from the remote database server the local database server invokes the access primitive to access objects within the local database server or storage subsystems that are attached to the local database server . In invoking the access primitive the local database server may supply the data that is already in native format that are specified in the request. Since both the access primitive and the data are natively supported at the local database server there is no additional translation required to translate the access primitive and the data received from the remote database server .

For example the access primitive in the request from the remote database server may be one of several access primitives that provide access to the local storage subsystem . Likewise the above mentioned data in the native format may specify a location of where an interesting data block is stored in the local storage subsystem . As illustrated in in step such an access primitive may be invoked by the local database server to access the interesting data block in the local storage subsystem .

The local storage subsystem may be a directly attached device or a network attached system NAS . As noted in some embodiments this local storage subsystem is inaccessible to other database servers which exclude the local database server . However since the access primitive is invoked by the local database system the access to data stored in the local storage subsystem will be granted. As a result the local storage subsystem may indicate a grant of such an access to the local database server in step .

Such an indication from the storage subsystem may be forwarded to the remote database server by the local database server . In an embodiment the indication is forwarded by the local database server without translation. Since this is an indication related to an access primitive supported by the remote database server the database server may interpret the indication. In some embodiments the remote database server creates a response. In addition the remote database server after interpreting the indication from the local storage subsystem translates any data returned with the indication into a format that may be understood by the remote database client that issued the original request that caused access to the local storage subsystem . The translated data in a client understandable format may be placed in the response by the remote database server . Thereafter the remote database server may send the response to the remote database client .

When a database system such as local database server encounters a logical or physical corrupt data block error it usually results in a down database and unavailability of affected data until such data is repaired. The repair procedure itself is very expensive and is usually done by restoring a backup of the affected data file and by doing a database recovery on such affected data. Sometimes even when logically speaking only corrupt blocks should be recovered other data may nevertheless become affected therefore unavailable resulting in a down database until the repair is complete.

In accordance with some embodiments of the present description the efficient network data transfer service may be provided in a replicated database environment where multiple copies of data are stored in multiple locations or database servers situated in these multiple locations . Using the efficient network data transfer service corrupt data blocks in any copy of the data stored in one location can be repaired near real time while all database services of that location are being continuously kept online. By establishing a connection through a message pipe previously described with an unaffected database server for example remote database server that holds the replicated data in an uncorrupt form an affected database server i.e. the one that contains the corrupt data blocks of the replicated data for example local database server can send a special request to obtain uncorrupt data blocks from the unaffected database server. These data blocks could be in buffer cache main memory or a storage subsystem for example remote storage subsystem which may be otherwise non accessible to the affected database server i.e. local database server without the efficient network data transfer service of the unaffected database server. By receiving a good version of the data blocks from the unaffected database server the affected database server the local database server will be able to proceed without any downtime and without sacrificing any data availability.

In some further embodiments data transferred by the efficient network data transfer service may be encrypted for example by the sender and decrypted for example by the receiver . Since data to be encrypted and decrypted is transported through a platform independent but database specific message pipe there is no need to invoke external encryption and decryption processes from operating systems for example . As used herein the term database specific means that the message pipe may be implemented in a way specific to database systems used to implement the database servers.

Likewise data transferred by the service may also be compressed for example by the sender or decompressed for example by the receiver . As for encryption and decryption compression and decompression may be performed without invoking any external compression and decompression processes from operating systems for example .

For the purpose of illustration an access primitive has been described as being invoked after a database client such as the remote database client has issued a request that causes database servers to access data in a storage subsystem such as the local storage subsystem . It should be noted that this is for illustration purposes only. For the purpose of this description an access primitive does not have to be only invoked after such a request from a database client. The remote database server may invoke one or more access primitives without being prompted by a request from a database client such as the remote database client . For example between step and the remote database server may invoke one or more access primitives to data stored in the local database server including data stored in storage subsystems attached therewith . The invocation of these access primitives may provide for example schema information system catalog information etc. about the data stored in the local database servers. Thus these and other variations of when an access primitive may be invoked are within the scope of the present description.

For the purpose of illustration only one access primitive has been described as being invoked following a request from a database client. It should be noted that this is for illustration purposes only. For the purpose of this description two or more access primitives may be invoked as a result of receiving a request from a database client. For example the request from the remote database client may need to be satisfied by an underlying join between two or more tables. This underlying join may be implemented by several access primitives. Thus instead of a single access primitive being invoked as illustrated in steps through multiple access primitives may be invoked. As a result steps through may be repeated for two or more times. Thus these and other variations in the number of access primitives invoked in response to a request from a database client are within the scope of the present description.

For the purpose of illustration using access primitives to access an otherwise non accessible storage subsystem has been described as using an access primitive to access data stored in the local storage subsystem . It should be noted that this is for illustration purposes only. Since the remote database server is also a database server in some embodiments the remote database server may be attached with one or more otherwise non accessible storage subsystem such as the remote storage subsystem of . Thus in the negotiation between the database servers and the local database server may determine that both database servers supports one or more sets of access primitives to access data stored in the remote storage subsystem . In some embodiments the one or more sets of access primitives to access data stored in the remote storage subsystem is the same as the one or more sets of access primitives to access data stored in the local storage subsystem .

In some embodiments both the remote database server and the local database server offer an identical set of database services to their respective clients in accessing otherwise non accessible storage subsystems. For example just like the remote database server that offers such services to remote database clients to access the data in the local storage subsystem the local database server may also offer such an identical set of services to local database clients to access the data in the remote storage subsystem . Therefore steps similar to those depicted in may be implemented to provide the network efficient data transfer service to the local database clients .

For the purpose of illustration it has been described that one database client may send a request that invokes the efficient network data transfer service. It should be noted that this is for illustration purposes only. For the purpose of this description there may also be two or more database clients that may substantially concurrently send requests that may invoke the efficient network database transfer service. For example any of the remote database server and the local database server may have a number of foreground and background processes that database clients and may establish sessions and send requests. Moreover these requests may be handled concurrently by the database servers.

For the purpose of illustration an access primitive has been described as enabling a database server to access data stored in an otherwise non accessible storage subsystem attached to another database server. It should be noted that this is for illustration purposes only. For the purpose of the present description accessing data may include not only accessing existing data in the storage subsystem but also creating data in the storage subsystem. Furthermore accessing data may include but is not limited to deleting or modifying existing data in the storage subsystem. Accessing data may include but is not limited to accessing data in the otherwise non accessible storage subsystem as well in other memory or storage space of a database server to which the non accessible storage subsystem is attached. Thus these and other variations in meanings of accessing data in an otherwise non accessible storage subsystem are within the scope of the present description.

Then in response to receiving the first request the first database server provides the second database server the first set of access primitives in block . Similar to the first database server the second database server may provide to a second database client that is associated with the second database server a second set of database services including accessing the first storage subsystem. The first set of access primitives allows the second database server to provide to the second database client that is associated with the second database server services in the second set of database services that require accessing the first storage subsystem. In some embodiments the second set of database services is identical to the first set of database services.

The second database server may receive a request from its database client to access first data in the first storage subsystem. Or the second database server may need to access the first data in the first storage subsystem on its own. In any case the second database server may invoke an access primitive in the first set of access primitives by sending a first data access request with the access primitive specified therein. As a result the first database server receives from the second database server the first data access request to access the first data stored in the first storage subsystem block .

In some embodiments using a second set of access primitives the second database server provides to a third database client that is associated with the second database server a third set of database services including accessing a second storage subsystem. The second database server receives from the first database server a second request to access the second storage subsystem such as the local storage subsystem of . Here the first database server cannot access second data in the second storage subsystem without another database server such as the second database server transmitting the second data to the first database server.

Then in response to receiving the second request the second database server provides the first database server the second set of access primitives. Similar to the second database server the first database server may provide to a fourth database client that is associated with the first database server a fourth set of database services including accessing the second storage subsystem. The second set of access primitives allows the first database server to provide to the fourth database client that is associated with the first database server services in the fourth set of database services that require accessing the second storage subsystem. In some embodiments the fourth set of database services is identical to the third set of database services.

The first database server may receive a request from its database client to access second data in the second storage subsystem. Or the first database server may need to access the second data in the second storage subsystem on its own. In any case the first database server may invoke an access primitive in the second set of access primitives by sending a second data access request with the access primitive specified therein. As a result the second database server receives from the first database server the second data access request to access the second data stored in the second storage subsystem. In some embodiments the fourth set of database services is identical to the third set of database services. In some embodiments the first set of access primitive is identical to the second set of access primitives. Furthermore even though the second set of database services and the third set of database services access different storage subsystems i.e. the first and second storage subsystem respectively the two sets of database services are identical in terms of application programming interfaces that are offered to database clients. As a result the database clients may access data in a locally attached storage subsystem in the same manner and semantics as they access data in a non locally attached storage subsystem.

Likewise in some embodiments the first set of database services and the fourth set of database services are identical in terms of application programming interfaces.

In some embodiments the first set of access primitives complies with a first specification that is different from a second specification with which the first set of database services complies. For example the first set of access primitives used by database servers may use a database implementation specific specification for example specific to Oracle Database Systems commercially available from Oracle Corporation Redwood Shore Calif. while the first set of database service used by database clients may comply with a different specification such as SQL embedded SQL dynamic SQL etc. .

In some embodiments the first client accesses the first set of database services using a first application programming interface that is identical to a second application programming interface used by the second client to access the second set of database services. In other words the first client or the second client needs not be aware of whether data to be accessed is located in a locally attached storage subsystem or not.

As noted without the efficient network data transfer service the storage subsystems and of for example may not be otherwise accessible to database servers that are not directly attached to the storage subsystems. In some embodiments this non accessibility is caused by the fact that such storage subsystems are network storage subsystems that do not have any network link with database servers to which the storage subsystems are not directly attached.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

