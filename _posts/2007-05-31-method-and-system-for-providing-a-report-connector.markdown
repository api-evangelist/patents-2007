---

title: Method and system for providing a report connector
abstract: A method includes transforming, by a report connector according to at least one input mapping rule of the report connector, first input data received by a first application to create second input data for a specific report of a plurality of existing reports of a second application. The method also includes providing, by the report connector, the second input data to a report application programming interface (API) capable of providing an interface to the report of the second application. The method also includes receiving, by the report connector, first output data from the report API, the first output data based on the output data from the specific report of the second application. The method also includes transforming, by the report connector according to at least one output mapping rule of the report connector, the first output data to create second output data for the first application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949864&OS=08949864&RS=08949864
owner: SAP SE
number: 08949864
owner_city: Walldorf
owner_country: DE
publication_date: 20070531
---
This application claims the benefit of and priority to U.S. Provisional Patent Application No. 60 855 686 to Matthias Geiger Miro Vins and Patrick Zimmer filed on Oct. 30 2006 entitled Generic Report UI Connector which is hereby incorporated by reference in its entirety.

Services provided by a computing system may include any type of functionality provided by the system and may be implemented at least in part by software applications of the system. A particular service may include a business functionality and be implemented by an application which includes business logic to perform the business functionality. One type of service is a report which provides data based on selection criteria. Typically a report is implemented by an application which receives the selection criteria from a user and which retrieves the data from a database.

One problem with reports implemented by applications is that the implementing application and thus the report that it implements may become outdated in some aspect over time. Generally speaking legacy applications exist which have become outdated in some aspect but which are still useful in some other aspect. For example a legacy application may implement an existing report which still retrieves data in a desirable manner but which has a user interface that has become outdated or undesirable. Furthermore it may be difficult to separate the still useful aspect of the existing report from the outdated aspect as the portion of the legacy application which implements the still useful aspect may be highly integrated with the portion which implements the outdated aspect. Often one cannot simply run the legacy application and only utilize the still useful aspect of the existing report without also being undesirably presented with the outdated aspect. Moreover it may be burdensome to completely redevelop the existing report in a new application because there are typically a prohibitively large number of existing reports which may need such redevelopment. Additionally to redevelop the still useful aspects of the existing report may be inefficient given the still useful nature of these aspects.

The report API provides to the report connector an API for the existing report of the second application . Generally speaking an API is an interface to a computing system functionality provided for a software component. The report API is capable of providing for at least some other software components an interface to access the existing report of the second application . In the embodiment depicted in the report API provides for the report connector an interface to access the existing report of the second application .

Other embodiments of the software architecture are also possible. depicts another exemplary embodiment of the software architecture B having software components which are at least partially different than the software components of the embodiment depicted in . The embodiment of the software architecture B depicted in has software components including the first application and the report connector in the same way as the embodiment depicted in . However instead of the report API second application and the database depicted in the embodiment of has a generic software component that includes a means to access the existing report . In one embodiment the existing report is a report of the generic component . In another embodiment the existing report is a report of yet another software component not shown different than the generic component that is accessed by the access means . The generic component provides an alternative functionality to the combination of the report API second application and database depicted in . However in both of the embodiments depicted in the report connector is provided some form of access to the existing report .

The embodiments of the software architecture A and B run in and are part of a computing environment an exemplary embodiment of which is depicted in . The depicted embodiment of the computing environment includes an input device processor memory communication line and display . The input device includes at least one of a keyboard a mouse a voice activated controller an optical controller an infrared controller or other suitable input device. The memory includes at least one of a random access memory a disk storage memory or other suitable memory. The display includes at least one of a monitor a television a video projector or other suitable display device. The memory further includes data and software components which are stored in the memory at least at some moment in time. The data optionally includes data which is accessible by or integral to the database . In one embodiment the software components include the software components of the embodiment of the software architecture A depicted in . In one embodiment the software components include the software components of the embodiment of the software architecture B depicted in . The software components include computer program instructions which may be accessed and executed by the processor . The software components are implemented in any suitable software language such as for example WebDynpro ABAP Java C and C .

The memory processor input device and display are connected together and communicate with each other by means of the communication line . In one embodiment the communication line includes a system bus and the computing environment has a single computer. In another embodiment the communication line includes a network element and the computing environment includes a distributed computing environment. In one embodiment in which the computing environment is distributed the memory processor input device and display are optionally distributed across different locations. In one embodiment in which the computing environment is distributed the computing environment optionally includes a plurality of some or all of the memory processor input device and display . In one embodiment in which the computing environment is distributed the software components are optionally distributed across a plurality of different memories and are capable of being accessed and executed by a plurality of different processors . Other embodiments of the computing environment are also possible.

In one embodiment the report connector depicted in includes a separately encapsulated set of computer program instructions. In one embodiment each of the software components depicted in includes a separately encapsulated set of computer program instructions. A software component including the separately encapsulated set of computer program instructions has its own set of computer program instructions and does not rely on the computer program instructions of the other components to perform the tasks assigned to that specific component. In one embodiment the separately encapsulated set of computer program instructions of a specific component includes computer program instructions to implement any communication interfaces that component may have. For example each component optionally performs both tasks that do not require communication with other components and tasks that do require communication with other components. Each software component that communicates with another software component includes an interface to perform the communication with that other software component. The communication between the interfaces of two software components optionally includes the passing of data between the interfaces.

In the embodiment depicted in at step the report connector transforms a first input data shown in to create a second input data shown in according to at least one input mapping rule shown in of the report connector . The first input data is received by the first application from the user and the report connector receives the first input data from the first application . In one embodiment the user is a human user of the computing environment and the first input data is provided to the first application by the user using the graphical user interface of the first application .

The report connector provides a connection for the first application to the still useful aspects of the existing report of the second application without necessitating the use of the outdated or undesirable aspects of the second application . For example in one embodiment the first application is a relatively newer application having a relatively newer user interface and the second application is a relatively older application i.e. a legacy application having a relatively older user interface shown in . In such an embodiment the user interface of the first application is optionally developed to provide a functionality that replaces or is a substitute for the functionality of the user interface of the second application and the report connector enables the simultaneous use of the user interface of the first application and the data retrieval functionality of the existing report of the second application .

Generally speaking a report includes both an interface portion and a data retrieval portion. The interface portion of the report receives the selection criteria from the user and displays the results of the report including the retrieved data and the data retrieval portion retrieves the data selected by the selection criteria. depict exemplary embodiments of a report interface of the first application . In one embodiment the first application provides an updated report interface for use in association with the existing reports of the second application . depicts an exemplary embodiment of a selection criteria portion of the report interface of the first application . depicts an exemplary embodiment of a results portion of the report interface of the first application .

Generally speaking a report requires values for specific selection criteria to be run by an application and in turn retrieves specific data based on the values provided for the specific selection criteria. In one embodiment the first input data provided to the first application by the user includes a first selection criteria and a first report identifier shown in . The first selection criteria provides input that will be used to communicate a second selection criteria to the second application and the first report identifier provides input that will be used to communicate a second report identifier shown in identifying the identity of the specific report to the second application . In the exemplary embodiment depicted in an exemplary embodiment of the first input data is shown including an exemplary embodiment of the first selection criteria . For example in the embodiment depicted in the first selection criteria are the values entered in the various first selection criteria data entry fields . Likewise in the exemplary embodiment depicted in an exemplary embodiment of the second input data is shown including an exemplary embodiment of the second selection criteria . For example in the embodiment depicted in the second selection criteria are the values entered in the various second selection criteria data entry fields . Note however as discussed below in one embodiment of the method the second selection criteria are not provided manually by the user to the report interface of the user interface of the second application but are instead provide by the report API . In one embodiment each of the plurality of existing reports requires a different specific selection criteria.

Which of the plurality of existing reports of the second application is identified generally speaking by a report identifier. The first report identifier is typically provided to the first application by the user selecting a particular report interface of the first application from among a plurality of available report interfaces of the first application .

The transforming of the user input of step is according to the at least one input mapping rule of the report connector . is a schematic diagram depicting one embodiment of the report connector . The at least one input mapping rule provides information used by the report connector to transform the first input data to create the second input data . The input mapping rule provides the report connector with the ability to map the first selection criteria and first report identifiers used by the first application to those that will are required by the existing report of the second application . One benefit that this provides is that it gives a developer flexibility in developing the first application . For example the first application is optionally developed to provide an updated report interface for each of the existing reports of the second application . Because the input mapping rule maps the first selection criteria and first report identifier used by the first application to the second selection criteria and second report identifier provided to the report API the developer is provided with flexibility in terms of choosing specific first selection criteria and first report identifiers to use internally in the first application . For example the developer may wish to use a reduced set of first selection criteria in comparison to the existing second selection criteria or to use an alternate naming convention for the first report identifiers in comparison to the existing second report identifiers . In an exemplary situation in which a developer uses a reduced set of first selection criteria the input mapping rule can be used to provide values to the specific second selection criteria not included in the first selection criteria .

In one embodiment the at least one input mapping rule includes at least one of a selection criteria mapping rule shown in or a report identifier mapping rule shown in . The transforming of step is optionally according to a plurality of input mapping rules of the report connector . is a schematic diagram depicting an exemplary embodiment of the at least one input mapping rule having both the selection criteria mapping rule and the report identifier mapping rule . The selection criteria mapping rule includes information used by the report connector to transform the first selection criteria to create the second selection criteria . For example in one embodiment the selection criteria mapping rule can provide information to provide default values for certain second selection criteria . This may be useful if the developer of the first application has decided to eliminate certain second selection criteria from the report interface of the first application corresponding to a specific existing report of the second application . Those eliminated selection criteria can be added to the first selection criteria entered by the user of the report interface of the first application by the input mapping rule to create a complete set of second selection criteria provided to the report API and in one embodiment ultimately provided to the second application .

The report identifier mapping rule includes information used by the report connector to transform the first report identifier to create a second report identifier . For example in one embodiment the first report identifier identifies one of a plurality of report interfaces available to the user at the first application and the second report identifier identifies a corresponding one of a plurality of existing reports of the second application available to the report connector at the report API . This may be useful to the developer of the first application in order to provide the developer with flexibility as to the specific form of first report identifiers used within the first application .

The at least one input mapping rule optionally identically passes the first input data to the second input data . For example in one embodiment the at least one input mapping rule transforms the first input data to create the second input data including at least one of the second selection criteria which is identical to the first selection criteria or the second report identifier which is identical to the first report identifier . In one embodiment the report API provides the second input data it receives from the report connector to the existing report of the second application .

Note that does not provide a temporal representation of the transforming of the first input data of step . That is the transforming of the first report identifier to create the second report identifier does not necessarily happen at the same time as the transforming of the first selection criteria to create the second selection criteria . is instead a schematic diagram that shows the functionality of the report connector collectively with respect to transforming of the first input data without indicating the temporal nature of the transforming of the first input data . The temporal nature of the transforming of the first input data is discussed in more detail further below.

In the embodiment depicted in the method proceeds to step after step . At step the second input data is provided to the report API by the report connector . The report connector has a communication interface capable of communicating with the report API . The report API has a communication interface capable of communicating with the report connector and a communication interface capable of communicating with the second application . The second application has a communication interface capable of communicating with the report API . The report API is capable of requesting any of the plurality of existing reports of the second application . In one embodiment the report API is capable of requesting at least one existing report of a plurality of different second applications . In one embodiment the report API is capable of requesting a plurality of different existing reports of each of a plurality of different second applications . In one embodiment the report API does not have an interface accessible to the user. For example in one embodiment the report API does not have a graphical user interface.

In the embodiment depicted in the method proceeds to step after step . At step the report connector receives a first output data from the report API . The first output data is based on the results of the execution of the requested existing report by the second application . The first output data includes first business data and first metadata . The providing of the second input data to the report API of step triggers the report API to request the report identified by the second report identifier from the second application . The requesting of the identified report by the report API in turn triggers the executing by the second application of the requested report to produce raw output data . The raw output data is determined by the report API which produces the first output data based on the raw output data .

Generally speaking the process of executing a report by an application produces output data which includes all the data needed to display the report interface including the selection criteria portion and the results portions of the report interface as well as the data retrieved by the data retrieval portion of the report. The metadata is the portion of the output data that describes how the report interface is displayed including the selection criteria portion and the results portions and the business data is the portion of the output data that is the specific data that the selection criteria has identified for retrieval from the database.

The business data does not need to pertain only to business situations. Instead the business data may be any type of data that any type of business organization or individual may choose to have. For example a company may maintain a database including data concerning the employees of the company. In a first exemplary situation selection criteria may select a certain set of the employees of the company for example based on their title such as selecting only engineers. In this first exemplary situation the resulting business data includes employee data of the selected set of employees i.e. of only engineers. For example in this first exemplary situation the resulting business data may include the employee start data their salary employee reviews birth date identification number home address or any other employee data the company maintains. In a second exemplary situation the selection criteria may further select not only a certain set of employees e.g. the engineers but may also further select the returned data to include only certain types of employee data for example name identification number and salary. In this second exemplary situation the business data would include the name identification number and salary of the engineers of the company but not other employee data maintained by the company. Other examples of business data are numerous and varied.

The first business data received by the report connector from the report API is based on the raw output data produced by the executing of the existing report by the second application . In one embodiment the raw output data includes raw business data and the first business data is based on the raw business data . In one embodiment the first business data is identical to the raw business data . In one embodiment the first business data includes at least one of alpha numerical textual data graphic data or video data.

The metadata is associated with the user interface portion of the report and describes how the report will be displayed. For example the metadata describes how the selection criteria portion and the results portion of the report interface are displayed. In one embodiment the metadata includes at least one of data describing display characteristics of the business data or data describing display characteristics of a user interface element. In one embodiment the metadata includes both of these exemplary types of metadata.

The metadata describing the display characteristics of the business data itself describe how to display specifically the business data. Specific pieces of the metadata can describe display characteristics of specific pieces of the business data or display characteristics of all or an indicated portion of the business data. The metadata describing the display characteristics of the business data optionally includes at least one of data describing the visual appearance of the business data in the report or data describing the positioning of the business data in the report. For example in one embodiment the business data includes alpha numeric textual data. In such an embodiment the metadata describing the visual appearance of the business data itself optionally includes at least one of the font of the business data the color of the business data or the size of the business data. The metadata describing the positioning of the business data as part of the display of the report optionally includes at least one of the absolute position of a specific piece of business data in the results portion of the report interface the relative position of the specific piece of business data relative to another specific piece of the business data in the results portion of the report interface or the relative position of the specific piece of business data relative to a user interface element of the results portion of the report interface.

The metadata can also describe display characteristics of user interface elements of the report interface. User interface elements of the report interface can accompany both the selection criteria portion and the results portion of the report interface. User interface elements of the report interface form part of the report interface and contribute to the functionality of the report interface. Typical user interface elements include tables buttons drop down boxes selectable items graphical elements background elements etc. User interface elements also typically have properties which control their display and functional characteristics. Typical properties of a button for example include the definition of states of the button for example an activated state in which the user has selected the button an inactive state in which the button is not selected and a rollover state in which the button has been rolled over for example with a mouse but not selected. The definition of such button states may include for example an indication of the appearance of the button during those states. Another aspect of the user interface element is also the position of the user interface element in the report interface.

The general characteristics of metadata discussed above are applicable to any of the metadata discussed herein including the first metadata the second metadata and raw metadata .

In one embodiment the metadata i.e. the first second or raw metadata describes at least one user interface element. In one embodiment the metadata describing the user interface element includes at least one of the type of user interface element a property of the user interface element or a display position of the user interface element in the report interface. The metadata describing the display position of the accompanying user interface element optionally includes at least one of an absolute position of the user interface element in a particular portion the report interface a relative position of the user interface element relative to another user interface element of the report interface or the relative position of the user interface element relative to a business data displayed in the report interface.

The exemplary embodiments depicted by and show exemplary embodiments of user interface elements. For example the exemplary embodiments of these figures include among other user interface elements buttons background color areas descriptive text drop down boxes tables column selectors titles and the data entry fields .

In the embodiment depicted in the method proceeds to step after step . At step the report connector transforms the first output data to create second output data according to at least one output mapping rule of the report connector . The second output data includes second metadata and second business data .

The transforming of the first output data of step is according to the at least one output mapping rule of the report connector . The at least one output mapping rule provides information used by the report connector to transform the first output data to create the second output data . The output mapping rule provides the report connector with the ability to map the specific form of the first output data produced by the report API to a form of the second output data that is usable by the first application . One benefit that the output mapping provides is that it enables selective updating of aspects of the first output data . For example in one embodiment the first output data produced by the report API includes elements based on both still useful elements of the existing report and outdated elements of the existing report . The output mapping rule is able to map the still useful aspects of the existing report into an unchanged form in the second output data and map the outdated or not useful or desirable aspects in a modified or new form in the second output data . For example in an exemplary situation in which the data retrieval portion of the existing report is still useful e.g. the first business data is still useful but at least a part of the user interface portion of the existing report has become outdated e.g. the first metadata is outdated the output mapping rule can map the first business data into the second output data in an unchanged form and map the first metadata into the second output data in a modified form. Furthermore the output mapping rule is not limited to passing the first business data unchanged and modifying the first metadata . In one embodiment the output mapping rule selectively maps the first business data into modified and unmodified portions in the second business data and selectively maps the first metadata into modified and unmodified portions in the second metadata .

In one embodiment the at least one output mapping rule includes at least one of a metadata mapping rule shown in or a business data mapping rule shown in . The metadata mapping rule includes information used by the report connector to transform the first metadata to create the second metadata . The business data mapping rule includes information used by the report connector to transform the first business data to create the second business data . The transforming of step is optionally according to a plurality of output mapping rules of the report connector . is a schematic diagram depicting an exemplary embodiment of the at least one output mapping rule having at least one metadata mapping rule and at least one business data mapping rule .

In one embodiment the at least one input mapping rule and the at least one output mapping rule are part of the computer program instructions of the report connector . In one embodiment the at least one input mapping rule and the at least one output mapping rule are stored in the memory and are accessible to the computer program instructions of the report connector .

Note that does not provide a temporal representation of the transforming of the first output data of step . That is the transforming of the first metadata to create the second metadata does not necessarily happen at the same time as the transforming of the first business data to create the second business data . is instead a schematic diagram that shows the functionality of the report connector collectively with respect to transforming of the first output data without indicating the temporal nature of the transforming of the first output data . The temporal nature of the transforming of the first output data as well as the temporal nature of the transforming of the first input data is discussed in more detail below.

The selection criteria portion and the results portion of the report interface of the first application typically are temporally different portions of the report interface . In other words the selection criteria portion is typically presented to the user first and then the results portion is typically presented to the user at some point after the initial presenting of the selection criteria portion . Furthermore in a process of executing a specific existing report which includes both the presenting of the selection criteria portion and the results portion of the report interface of the first application to the user steps and typically each occur a plurality of times. For example in one embodiment of the method the transforming of the first input data of step occurs at least twice including during the transforming of the first report identifier to create the second report identifier as a result of the picking of a particular report interface by the user and again at a different time during the transforming of the first selection criteria to create the second selection criteria as a result of the user entering the first selection criteria at the report interface . Thus in one embodiment the transforming of step transforms the first report identifier at a different time than the transforming of step transforms the first selection criteria . In one embodiment the transforming of step may occur more than twice during the process of executing the existing report .

Similarly in one embodiment the transforming of the first output data of step occurs at least twice including during the transforming of the first metadata to create the second metadata in order to display the section criteria portion and the results portion of the report interface and again at a different time during the transforming of the first business data to create the second business data to display the results portion of the report interface . Thus in one embodiment the transforming of step transforms the first metadata at a different time than it transforms the first business data . In one embodiment the transforming of step transforms all of the first metadata including any of the first metadata corresponding to the first business data before the existing report is executed in the second application as initiated by the report API . That is the report connector receives all of the first metadata from the report API in response to providing the second report identifier to the report API . In one embodiment the first metadata includes a first portion corresponding to the selection criteria portion of the report interface of the second application and a second portion corresponding to the results portion of the report interface of the second application and the transforming of step creates second metadata including a first portion corresponding to the selection criteria portion of the report interface of the first application and a second portion corresponding to the results portion of the report interface of the first application . In one embodiment the transforming of step may occur more than twice during the process of executing a report. For example the transforming of step optionally includes a series of transforms of individual pieces of the first output data .

The temporal spacing depicted in typically results in a temporal distribution of each of the transforming of steps and of the method . That is step typically is performed more than once in association with the executing of the existing report of the second application for example at a moment in time in between the first and second communications and at a moment in time in between the fifth and sixth communications depicted in . Similarly step is typically performed more than once in association with the executing of the existing report of the second application for example at a moment in time in between the third and fourth communications and at a moment in time in between the seventh and eighth communications depicted in .

The output mapping rule optionally provides the report connector with the ability to map outdated or undesirable user interface elements to more modern or more desirable user interface elements. For example in one embodiment the first metadata describes a first user interface element the second metadata describes a second user interface element the description of the second user interface element being at least partially different than the description of the first user interface element and the metadata mapping rule includes information used by the report connector to transform the description of the first user interface element to create the description of the second user interface element.

The output mapping rule also optionally provides the report connector with the ability to map a large amount of business data into a smaller amount of business data by removing some business data. For example in one embodiment the first business data includes a first set of a plurality of data elements retrieved from the database the second business data includes a second set of the plurality of data elements retrieved from the database the second set composed of data elements from the first set the second set having fewer data elements than the first set and the business data mapping rule includes information used by the report connector to transform the first set of data elements to create the second set of data elements. Alternatively or in addition to the output mapping rule mapping a large amount of business data into a smaller amount of business data in one embodiment the mapping of a large amount of business data into a smaller amount of business data by removing some business data is implemented in the report API or the first application .

In one embodiment the method includes at least one of steps occurring during runtime or steps occurring during design time. In one embodiment the method includes steps occurring during runtime and steps occurring during design time. Runtime includes a time during which the user is using the user interface of the first application to trigger the report connector to transform the first input data and the first output data . For example in one embodiment the steps and of the method occur during runtime. Design time includes a time during which the user is not using the user interface of the first application to trigger the report connector to transform the first input data and the first output data . In one embodiment the method includes determining by the report connector at design time at least a portion of at least one of the at least one input mapping rule or the at least one output mapping rule . depicts one embodiment of the report connector including both a runtime portion which is capable of performing runtime steps of the method and a design time portion which is capable of performing design time steps of the method .

In one embodiment the method includes predetermining at least a first portion of the at least one input mapping rule and at least a first portion of the at least one output mapping rule by a company originally developing the report connector for sale or license. In such an embodiment an entity which purchases or licenses the report connector from the originally developing company can use the predetermined at least the first portion of the at least one input mapping rule and at least the first portion of the at least one output mapping rule to perform the method .

In one embodiment an entity which purchases or licenses the report connector from the originally developing company further defines the input mapping rule and the output mapping rule . In such an embodiment the method includes selectively determining by the purchasing or licensing entity at design time at least one of at least a second portion of the at least one input mapping rule or at least a second portion of the at least one output mapping rule . The selectively determining optionally includes automatically generating by the design time portion of the report connector a first version of the at least one of the second portion of the at least one input mapping rule or the second portion of the at least one output mapping rule and editing the automatically generated first version to create a second version at least partially different than the automatically generated first version. In one embodiment the automatically generating is based on at least one template rule of the report connector the at least one template rule predetermined by the originally developing company. The editing is optionally done by a user using a user interface of a software component. In one embodiment the design time portion of the report connector includes a user interface not shown to accomplish the editing.

In one embodiment the method is applicable to being performed within the context of the embodiment of the software architecture shown in . In one such embodiment the method includes transforming by the report connector the first input data received by the first application to create the second input data for the specific report of the plurality of existing reports of the second application the transforming of the first input data being according to the at least one input mapping rule of the report connector providing by the report connector the second input data to a generic component having a means to access the report of the second application receiving by the report connector the first output data from the generic component the first output data based on the output data from the specific report of the second application and transforming by the report connector the first output data to create second output data for the first application the transforming of the first output data being according to the at least one output mapping rule of the report connector .

In one embodiment the computer program instructions which when executed by the processor enable the method to be performed are distributed from a first storage location to a second storage location. In one embodiment the distributing of the computer program instructions includes storing the computer program instructions at the first storage location transmitting the computer program instructions between the first and second storage locations and storing the computer program instructions at the second storage location. The first and second storage locations each optionally include a memory having the same properties as memory of the computing environment depicted in . The first and second storage locations are optionally distributed across a distributed computing environment having the same properties as the distributed embodiment of the computing environment depicted in .

In one embodiment transmitting the computer program instructions between the first and second storage locations includes transmitting the computer program instructions by a computer network having a client server architecture. In the client server architecture at least one computer performs the role of a server computer and stores the computer program instructions at the first storage location. The first storage location is optionally at least one of a component of the server computer or a storage location accessible to and controlled by the server computer. In the client server architecture at least one second computer performs the role of a client computer and receives the computer program instructions from the server computer and stores them at the second storage location. The second storage location is optionally a component of the client computer. Generally speaking in the client server architecture the server computer also controls at least some aspect of the distribution of the computer program instructions. For example in one embodiment the server computer determines whether or not to allow access by the client computer to the computer program instructions stored at the first storage location. In one embodiment the transmitting the computer program instructions by the computer network having the client server architecture includes using a data transmission protocol including at least one of a Hypertext Transfer Protocol HTTP or a File Transfer Protocol FTP .

In another embodiment transmitting the computer program instructions between the first and second storage locations includes transmitting the computer program instructions by a computer network having an at least partially decentralized architecture such as a peer to peer network. In the at least partially decentralized architecture each member computer has at least some networking functionality which is common to all the member computers. For example in one embodiment the at least partially decentralized network architecture is a pure peer to peer network in which all member computers have the same networking functionality. In another embodiment the at least partially decentralized network architecture is a hybrid peer to peer network in which some networking functions are performed in the same way by all member computers and some other networking functions are performed according to a client server architecture.

In the at least partially decentralized architecture instead of the server computer always providing the computer program instructions to the client computer a particular member computer may perform the functionality of both providing and receiving the computer program instructions. The particular computer i.e. a first computer may receive the computer program instructions in one instance from a second computer and then provide the computer program instructions in another instance to a third computer. In one embodiment involving the at least partially decentralized architecture the first and second storage locations are storage locations of computers which are only intermittently connected to the peer to peer network and the transmitting of the computer program instructions between the first and second storage locations occurs on an intermittent basis. The intermittent distribution of the computer program instructions optionally includes packaging the computer program instructions into a plurality of separate transmission packages at the first storage location transmitting each of the plurality of transmission packages in separate transmissions between the first and second storage locations and reassembling the plurality of transmission packages at the second storage location to form the computer program instructions.

Further embodiments are also possible which are the result of variously combining steps elements or embodiments described herein. For example further embodiments may include an altered order of the steps of the method described herein the result of which may be an embodiment particularly suited to a specific purpose or implementation. In another example embodiments of the method may include or exclude optional steps described herein. In yet another example different embodiments of the method may be combined to create further embodiments. Additional embodiments which would be discernable based on the description herein are also possible.

