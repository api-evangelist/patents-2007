---

title: Virtual machine device access
abstract: The present disclosure includes, among other things, systems, methods and program products for virtual machine device access. A first asynchronous request from a virtual machine executing on a device is identified, where the first asynchronous request is for accessing one or more of the device's information or services. The first asynchronous request is retrieved from the virtual machine. The first asynchronous request is scheduled to be provided as a second request to a service provider on the device, where the service provider is operable to handle the second request. The second request is provided to the service provider and a first response is received from the service provider to be provided to the virtual machine as a second response. First code is selected in the virtual machine from a plurality of code to receive the second response and providing the second response to the selected code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209685&OS=08209685&RS=08209685
owner: Adobe Systems Incorporated
number: 08209685
owner_city: San Jose
owner_country: US
publication_date: 20071126
---
Mobile phone operating systems provide access to phone services such as the ability to place and receive telephone calls send and receive text messages and browse web pages. In addition such operating systems typically manage personal information used by the services such as telephone numbers recently dialed telephone numbers email addresses and the like. Software programs can be written to access this information and the services through application programming interfaces provided by the operating systems however such programs are characteristically not directly portable from one operating system to another. Moreover such programming interfaces are commonly synchronous meaning that programs that utilize them are required to block until an operating system function call returns.

In general one or more aspects of the subject matter described in this specification can be embodied in one or more methods that include identifying a first asynchronous request from a virtual machine executing on a device where the first request is for accessing one or more of the device s information or services. The first request is retrieved from the virtual machine. The first request is scheduled to be provided as a second request to a service provider on the device where the service provider is operable to handle the second request. The second request is provided to the service provider and a first response is received from the service provider to be provided to the virtual machine as a second response. First code is selected in the virtual machine from a plurality of code to receive the second response and providing the second response to the selected code. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. Selecting first code can include identifying the first code based on information contained in the first request. Providing the second response to the first code can include invoking the first code. Scheduling can include maintaining a list of pending requests and adding the first request to the list. Providing the second request to the service provider can include determining if there are no pending requests that were retrieved before the second request. Providing the second request to the service provider can include determining whether the service provider is able to accept the second request. The second request can be asynchronous.

Particular implementations of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Programs written to access mobile device services and information are portable across mobile device operating systems. Access to mobile device information and services is asynchronous allowing programs to continue their execution during fulfillment of their requests or synchronous.

The details of one or more implementations of the invention are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The device can provide one or more services that include for example SMS Short Message Service services call log management services calling functions services device status services and contacts management services . The device includes a data store for personal information and other information needed by the services. The data store can be for example a SIM Subscriber Identity Module card flash memory or some other kind of storage. The data store can include for example contacts information recent call information and calendar information .

The SMS services can include for example services for sending and receiving messages and viewing previously received messages. The call log management services can include for example services for viewing and filtering call log entries. Call log entries which can be included in the recent calls information can include for example information for dialed calls accepted calls missed calls and rejected calls. The calling functions services can include for example services for placing calls receiving calls showing caller identity and rejecting calls. The device status services can include services for querying or setting system information. For example the device status services can include services for querying signal strength geographic location battery strength charging status SIM availability operator name cellular service provider name roaming status power mode and default ring tone. The device status services can also include for example services for setting a low battery threshold backlight mode power mode and default ring tone. The contacts management services can include for example services for interacting with the contact information such as viewing contacts adding and removing contacts and searching for contacts.

The display presents a GUI Graphical User Interface . The GUI can display for example information from the contacts information . For example a contact list displays contact names and associated pictures. The GUI can allow for a user to request services included in the services . For example a button allows a user to place a call to a contact named Bob . As another example a button allows a user to send a text message e.g. SMS message to the contact . The GUI can display other information such as the recent calls information or a calendar displaying calendar information .

The device includes a virtual machine . The virtual machine can be the Adobe Flash Player available from Adobe Systems Incorporated e.g. a virtual machine capable of executing ActionScript a Java Virtual Machine the Common Language Runtime available from Microsoft Corporation or some other virtual machine. The virtual machine runs on the device and allows for programs to run on the virtual machine which can create a rich user interface e.g. the GUI which allows access to device data e.g. contacts information recent calls information calendar information and device services e.g. SMS services call log management services calling functions services device status services contacts management services . The virtual machine provides an API Application Programming Interface which enables programs to access data and services on the device . The virtual machine coordinates the loading and running of programs that run on the device as well as coordinating access to device data and services.

A virtual machine a scheduler and one or more service providers run on the operating system . The virtual machine can be an ActionScript virtual machine a Java virtual machine or the Common Language Runtime to name a few examples. Other virtual machines are possible. The virtual machine includes a compilation infrastructure and a runtime infrastructure . The compilation infrastructure includes one or more compilers and a JIT Just In Time compiler . The virtual machine can compile programs in one or more source languages into the an intermediate language. For example the compiler can compile Java source code into an intermediate bytecode the compiler can compile ActionScript into the same intermediate bytecode and the compiler can compile C source code into the same intermediate bytecode. The JIT compiler can compile e.g. before runtime the bytecode generated by the compilers into machine executable code. By way of illustration compiler and JIT compiler can be used to compile user programs and .

The runtime infrastructure includes a memory manager a type system an object model an execution engine a garbage collector and a JIT compiler . The memory manager manages memory allocation and deallocation e.g. in heap memory and other data areas . The type system can for example keep track of object types in code that has been loaded in the virtual machine and is used by the compilation infrastructure and by the execution engine . The execution engine loads and executes programs e.g. in the virtual machine . The garbage collector identifies memory e.g. object instance data that is no longer being referenced so that memory can be freed and made available for use by programs.

By way of illustration a program or code can be for example executable code associated with a function a method or a script. The first code invokes a method or a function to request information or services e.g. to request recent call information . In response a request message is created and provided to a scheduler . The scheduler includes a scheduler subcomponent and an API . Each service provider includes an SPI Service Provider Interface a request handler and an adaptation layer . The first code continues executing and is not blocked awaiting the processing of the request message . The request message can be queued or it can be sent to the scheduler subcomponent through some other method of interprocess communication. In some implementations the scheduler and the virtual machine may run within the same process e.g. as separate threads within a process . If the scheduler and the virtual machine run in the same process the message can be communicated for example through the use of a common data area.

The scheduler subcomponent receives the request message . The scheduler subcomponent manages incoming requests such as keeping track of the order of requests and keeping track of which requests have been serviced and which are waiting for service. Messages awaiting servicing can be stored in a table list or some other data structure for example. The scheduling subcomponent can determine when a service provider is able to handle requests. To processes the request message a corresponding API call is invoked in the API . The API can communicate with the service provider through the service provider interface . The service provider interacts with the operating system to access device information and services. The service provider may run in a process separate from the scheduler or may run in the same process as the scheduler and in some implementations in the same process as the virtual machine . The service provider can for example be implemented in a dynamic link library DLL which linked to the scheduler .

The call from the API to the SPI can be asynchronous or synchronous. For example if the scheduler and the service provider run in the same process the call from the API to the SPI can be implemented for example as a function or method call. If for example the scheduler and the service provider run in different processes the call from the API to the SPI can be implemented using asynchronous message processing. In various implementations the SPI defines a set of programmatic interfaces which can be used to access device services or information. The API can map the request message to one or more invocations of the SPI e.g. in some implementations a single request message from the virtual machine can result in multiple calls to the SPI .

Calls to the SPI can be forwarded to the request handler . The request handler interfaces with the adaptation layer . The adaptation layer includes code which is aware of the specifics of the operating system . For example the adaptation layer is aware if the operating system is BREW or Symbian. To support a new operating system e.g. to support a transition from the BREW operating system to the Symbian operating system code changes within the system can be isolated to the adaptation layer .

The adaptation layer invokes one or more operating system calls to access the requested service e.g. place a call or information e.g. call log information . The adaptation layer can receive results e.g. requested data or indication of service success or failure from the operating system . Results can be sent to the scheduler subcomponent either synchronously or asynchronously. The scheduler subcomponent can prepare a response message to be sent to the virtual machine . Upon receipt of the response message the virtual machine can invoke the second code to process the response message . For example the second code can present requested information such as a recent call list on the display .

A request for device information or services is sent from the virtual machine to the scheduler . For example code running in the first code can issue a request e.g. by invoking an API to access device services or information such as to send a text message. The message can correspond to the message see . After submitting the request the first code continues processing as indicated by the vertical bar . When the service provider is able to process requests the scheduler forwards the request to the service provider as a request message . For example the API can invoke the SPI see .

The service provider issues a request to the operating system e.g. by the adaptation layer invoking an operating system call . The operating system sends a response to the service provider . The service provider forwards the response to the scheduler as a response .

The scheduler forwards the response to the virtual machine as the response . The response can for example correspond to the response message . In some implementations the scheduler can identify a callback function or method e.g. second code in the virtual machine to process the response . For example the request can include the identity of a callback function e.g. the identity of second code and the scheduler can include match the request to the response look up the callback function identity and include the callback function identity in the response informing the virtual machine as to which code to run to process the response .

In other implementations the virtual machine can identify a callback function or method to process the response . For example the virtual machine can invoke specific callback routines to handle certain types of response messages. The first code can include a response type identifier in the request and the scheduler can include the request type in the response . As indicated by vertical bar the second code processes the response such as processing received device information or verifying that a requested service completed successfully.

A statement creates an object which represents the call log of the device and a statement creates a view object which can be used to hold call log entries. The code section includes two statements and which are device requests. The statement is a request to be notified whenever the call log changes. The statement is a request to retrieve the first five entries in the call log.

The statements and are asynchronous requests. The code section is not blocked waiting for the statements and to complete. For example although the statement is executed after the statement the statement may be executed before the request associated with the statement is serviced.

The statements and each include the identity of a callback function which will be invoked when the associated request has been serviced. The code statement includes the identity of an updateEntries callback function. The updateEntries callback function includes the statements in the code section . The updateEntries function is called when the servicing of the request represented by the statement is completed. That is the updateEntries function is called when the five most recent entries have been retrieved from the device s call log.

The statement includes a getFirst method call invoked on a call log view object the call log view object is created when the statement is executed . The updateEntries function defined in the code section has an interface that is compatible with the getFirst method call . The getFirst method call expects as one of its parameters the identity of a callback function where the callback function interface is to expect an array parameter which will hold the requested call log entries. The definition of the updateEntries function e.g. the code section includes the specification of an array parameter which is compatible with the getFirst method call .

The statement includes the identity of a callLogChanged function. The callLogChanged function is defined in the code section . The callLogChanged function is invoked when the servicing of the request associated with the statement is completed. The listenForChanges call in the statement is an example of an event or notification request. The callLogChanged callback function defined in the code section will be called when and if the associated event occurs. That is the code in the code section will be invoked if the user of the device places or receives a call resulting in the device adding an entry to the call log . If the user never places or receives a call the code in the code section might not be invoked the code in the code section might be explicitly called from some other code however . An event request can be repeatedly serviced. That is the code in the code section can be repeatedly called each time the call log changes.

The callLogChanged function includes a statement which is identical to the statement . The effect of the statement is that when the call log changes e.g. when the callLogChanged function is called another asynchronous request is made requesting the most recent five entries in the call log. When the most recent five entries in the call log have been retrieved the callback function specified in the statement is invoked. That is the updateEntries function is invoked and the array parameter is populated with the five most recent call log entries. The updateEntries function can process the array such as displaying the most recent call log entries on the display .

An arrow represents the creation of a call log view object by the main routine in statement . An arrow represents the listenForChanges method call included in the statement . An arrow represents the getFirst method call included in the statement .

An arrow represents the call of the updateEntries method which occurs after the servicing of the getFirst request issued with the execution of the statement . An arrow represents the call of the callLogChanged function which occurs after and if the call log of the device changes. As noted earlier the callLogChanged function is invoked to handle the notification that the call log has changed. An arrow represents the call of the updateEntries function in statement by the callLogChanged function.

Next it is determined whether a condition is met step . For example the scheduler can determine whether the service provider is able to process requests. The first request is then scheduled and is provided as a second request to a service provider on the device where the service provider is operable to handle the second request step . For example the request represented by the request in can be forwarded to the service provider as the request . The second request is then provided to the service provider step . For example the service provider can receive the request .

A first response is then received from the service provider and is provided to the virtual machine as a second response step . For example the response can be provided to the virtual machine . As another example the response can be received by the scheduler from the service provider and forwarded to the virtual machine as the response .

Next first code is selected in the virtual machine from a plurality of code to receive the second response step . For example the code can be selected to receive the response . The second response is then provided to the selected code step . For example the response can be provided to the code . The code can be invoked and the response can be processed.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory can hold instructions for implementing the systems and techniques described above.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. The storage device can for example store the device information .

In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device memory on processor or a propagated signal.

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of duties is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can process instructions for execution within the computing device including instructions stored in the memory . The processor may also include separate analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD display or an OLED display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication e.g. via a docking procedure or for wireless communication e.g. via Bluetooth or other such technologies .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIM cards along with additional information such as placing identifying information on the SIM card in a non hackable manner.

The memory may include for example flash memory and or MRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory memory on processor or a propagated signal.

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS receiver module may provide additional wireless data to device which may be used as appropriate by applications running on device .

Device may also communication audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codex may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example various forms of the flows shown above may be used with steps re ordered added or removed. Also although several applications of the payment systems and methods have been described it should be recognized that numerous other applications are contemplated. Accordingly other implementations are within the scope of the following claims.

