---

title: Statement generation using statement patterns
abstract: Provided are techniques for generating a result set. A statement that includes at least one statement pattern is received, wherein each statement pattern is a template that indicates how a statement is to be modified for execution against a data store and wherein each statement pattern modifies program logic and control flow. Each statement pattern is expanded to generate one or more new statements, wherein each statement pattern is capable of being expanded to zero or more statement patterns. The one or more new statements are executed against a data store to obtain a result set. It is determined whether to modify the result set based on the at least one statement pattern. In response to determining that the result set is to be modified, modifying the result set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090735&OS=08090735&RS=08090735
owner: International Business Machines Corporation
number: 08090735
owner_city: Armonk
owner_country: US
publication_date: 20070622
---
Relational DataBase Management System RDBMS software uses a Structured Query Language SQL interface. The SQL interface has evolved into a standard language for RDBMS software and has been adopted as such by both the American National Standards Institute ANSI and the International Standards Organization ISO .

RDBMS uses relational techniques for storing and retrieving data in a relational database. Relational databases are computerized information storage and retrieval systems. Relational databases are organized into tables that consist of rows and columns of data. The rows may be called tuples or records or rows. A database typically has many tables and each table typically has multiple records and multiple columns.

SQL is an ANSI ISO standard language that users can utilize to create retrieve update and delete data that resides in relational databases. SQL is commonly used by applications in order to interact with relational databases. A majority of SQL queries are similar in their structure and format varying only in predicates or number of parameters. These variations occur due to a variety of factors including optimistic concurrency control paging e.g. retrieving a first page or some other page in a set of pages and conditional logic. Under an optimistic concurrency control scheme locks are obtained immediately before a read operation and released immediately afterwards and update locks are obtained immediately before an update operation and held until the end of the transaction. Conditional logic refers to a WHERE clause in SQL statement e.g. a user has two SQL statements with the same columns in the SELECT list but with a different number of host variables in the WHERE clause .

By itself SQL lacks portability i.e. the same SQL query might not work against different databases . One reason for the lack of portability in SQL is that some relational database vendors either do not follow the SQL standard or do not incorporate the entire standard. Another reason for lack of portability in SQL is that relational database vendors may choose to implement certain features of SQL differently because the SQL standard is not explicit in certain areas. These issues force an application programmer to write slightly different versions of an original SQL query in order to satisfy the syntactic requirements of each relational database the SQL query is supposed to run against.

Some cross platform applications utilize string concatenation to build different flavors of the same original SQL query at runtime. The main drawback of this technique is that it leaves no room for static execution. Static execution requires that a statement is available prior to the runtime so that the statement can be prepared and bound to the database. If String concatenation is used the actual String is only available at runtime thereby leaving no room for static execution. Building different flavors may be described as building multiple SQL queries out of an original SQL query where each of the SQL queries is compatible with a different RDBMS version i.e. each of the multiple SQL statements is a flavor . Preparing and binding the SQL statement may be described as processing the SQL statement to get an access plan and registering the statement and access plan with the database.

Thus application programs have the daunting task of writing one variation of the original SQL query for each relational database that the SQL query needs to run against. That is application programmers are forced to learn various flavors and quirks of several flavors of SQL. The task of learning several SQL flavors not only presents a steep learning curve for the application programmers but also makes it hard for the application programs to test these SQL queries.

Moreover application programmers must learn enough about the various options and flags for several flavors of SQL in order to write a correctly functioning and optimal SQL query for that particular relational database. This approach of manually modifying the original SQL query to fit the requirements imposed by each relational database is also not optimal due to the reason that each and every customized SQL query must change if the original SQL query changes.

Provided are a method computer program product and system for generating a result set. A statement that includes at least one statement pattern is received wherein each statement pattern is a template that indicates how a statement is to be modified for execution against a data store and wherein each statement pattern modifies program logic and control flow. Each statement pattern is expanded to generate one or more new statements wherein each statement pattern is capable of being expanded to zero or more statement patterns. The one or more new statements are executed against a data store to obtain a result set. It is determined whether to modify the result set based on the at least one statement pattern. In response to determining that the result set is to be modified modifying the result set.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the invention.

A statement pattern may be described as a template that can be used to generate new artifacts or to modify existing artifacts. An artifact may be described as a statement e.g. an SQL statement and a result set returned from the data store . . . when the statement is executed. The template may be described as indicating how a statement is to modified before execution against a data store . . . and or how result sets from executing the statement are to be modified before being returned. Embodiments enable application programmers to define generic statement patterns that allow application programs to customize modify and enhance a statement e.g. an SQL query according to syntactic and optimization requirements of an underlying relational database a type of data store . These pre defined statement patterns may be applied to the original statement during development or at runtime to enable the statement to be modified so that the statement can be executed against different relational databases. A statement pattern may modify both program logic i.e. how to execute those statements at runtime and control flow i.e. what statements to execute at runtime . Also the statement pattern may modify the program logic and one or more statements simultaneously.

The client also includes one or more statement patterns . The statement patterns may include pre defined statement patterns from a developer and newly added statement patterns from a user. The newly added statement patterns may be versions of the pre defined statement patterns that have been extended e.g. modified .

The Web server includes a service . A service may be described as providing some capability. A service may also be described as a piece of application code that can be remotely invoked over a network by a client application or by another service. For example the service may be a web service e.g. provide a stock quote or a list of red toys or a Representational State Transfer REST service. A REST service may be described as one in which information content is retrieved from a Web site by invoking a service that returns an XML file that describes and includes the information content. In certain embodiments the service is a stateless data access service i.e. the service provides data access to a data store . . . such that objects are read and stored in different transactions .

The service includes server application code a data access framework and a statement generator . The server application code executes to respond to a client request. A data access framework may be described as a set of pre built classes and their instances that collaborate with the application code to retrieve and store data from and to the data stores . . . . A data access framework may also be described as providing an abstraction that allows executing statements e.g. SQL statements against a data store . . . to retrieve result sets.

The statement generator is invoked by the data access framework to rewrite a received statement that includes at least one statement pattern. The statement generator returns one or more statements to the data access framework for execution.

The computer and Web server may each comprise any computing device known in the art such as a server mainframe workstation personal computer hand held computer laptop telephony device network appliance etc.

In certain embodiments the client and Web server are coupled via a network. The network may comprise any type of network such as for example a peer to peer network spoke and hub network Storage Area Network SAN a Local Area Network LAN Wide Area Network WAN the Internet an Intranet etc.

The Web server is coupled to data stores . . . where a and n and the ellipses are used to indicate that any number of data stores may be coupled to the Web server . In certain embodiments each data store . . . is a relational database. In certain embodiments each of the data stores . . . may be a different RDBMS and may be capable of executing a different flavor of an SQL statement. Each data store . . . may comprise an array of storage devices such as Direct Access Storage Devices DASDs Just a Bunch of Disks JBOD Redundant Array of Independent Disks RAID virtualization device etc.

Embodiments enable the definition of statement patterns that allow users to execute statements and perform result set augmentation. Result set augmentation may be described as modifying the result sets e.g. mapping a result set to a particular data structure or adding a column to the result set . Use of statement patterns is flexible extensible and provides users with the option to extend existing statement patterns or to add new statement patterns . Statement patterns allow users to map a result set returned from a data store . . . to any abstract data structure. In this manner users can provide metadata that is used for mapping via the use of statement patterns . Statement patterns not only modify the existing statement but also allow the result set of executing the statement to be modified in a way that the user wants. Embodiments allow users to specify statements and result set modification with one statement pattern .

Multiple scenarios can benefit from the use of these statement patterns . Example scenarios are discussed herein merely to enhance understanding of the invention.

During the application of statement patterns parameters may be added to or removed from the original statement. As an example parameters for page number and page size may be added due to the application of a paging pattern . A paging pattern allows users to fetch one page of data at a time from the data store . . . instead of fetching an entire result set.

Similarly the application of an optimistic concurrency pattern may add a combination of previous values timestamps row modification counts or row identifiers as parameters to the original statement.

Other statement patterns include name alias patterns that enable users to specify different names or column metadata. Metadata patterns avoid the use of statement e.g. query metadata during development or at runtime by providing the metadata that describes the statement. Metadata that describes the statement is especially useful when different database systems return incomplete or inconsistent metadata for the same statement. A decomposition pattern allows users to convert a query on a view or a complex query into a modification statement to the underlying tables.

Statement patterns themselves may be parameterized in order to enable grouping of various functions into a single statement. As an example a paging pattern may have two forms 1 a getFirstPageByValue form or 2 a getAnyPageByValue form. The getFirstPageByValue form is optimized for the first page whereas the getAnyPageByValue may deal with random access to pages. When a statement pattern is parameterized embodiments are able to identify which pattern should be executed based on parameter values.

Although examples herein may refer to SQL statements however embodiments may be used with various types of statements e.g. statements written in other languages including XQuery XPath and XUpdate .

As an example consider query 1 which may be written by an applications developer using statement patterns 

Query 1 has a core SQL statement SELECT A B C FROM T WHERE D hostvariable ORDER BY A with a pageByValue pattern . The query 1 also includes parameters hostvariable startingA and numRows. The pageByValue pattern includes a parameter startingA which indicates the page number to start at and a parameter numRows which indicates a number of rows to be returned in a result set when the SQL statement is executed. In this example the pageByValue pattern expands to the following logic 1 however the pageByValue pattern may include different logic in different embodiments .

In logic 1 if the parameter startingA has a value is equal to one then the first page is retrieved otherwise a particular page is retrieved. In particular logic 1 includes getFirstPageByValue and getAnypageByValue patterns .

The getFirstPageByValue pattern and getAnypageByValue pattern of logic 1 expand to the following logic 2 

In logic 2 if the parameter startingA has a equal to one then the query select a b c from t where d hostvariable order by a fetch first numRows only is executed otherwise the query select a b c from t where d hostvariable and a startingA order by a fetch first numRows only is executed .

As can be seen from logic 1 and logic 2 both program logic and control flow i.e. how to execute those statements and what statements to execute at runtime may be modified based on a statement pattern. Also the statement pattern may modify the program logic and statements simultaneously e.g. the if . . . else statement is program logic and the select statements are the statements in logic 2 .

Thus statement patterns may be applied recursively to SQL queries. Additionally statement patterns may be applied recursively to output result sets e.g. as will be described below with reference to Query 4 tableAlias pattern .

In the case of static SQL the expanded queries are registered together i.e. prepared and bound to the data store . . . thus locking an access path thus optimizing query execution. The appropriate SQL query is then executed based on the parameters.

Use of statement patterns allow actual statements e.g. SQL statements to be generated at compile time. Thus allowing statements to be prepared and statically bound to the data store . . .

The application of statement patterns is also useful when a number of parameters is not known but is based on a number of possible input parameter combinations. This scenario is explained further in the following example query 2 .

Query 2 uses the params pattern i.e. a parameters pattern to expand the original SQL query. The params pattern indicates that the number of parameters may range from 2 4 parameters. Query 2 is based on the number of parameters passed in. The params pattern expands to the following logic 3 

In certain embodiments the statement patterns may be specific to a database vendor or a database version. As an example DB2 Universal Database V9 DB2 is a trademark of International Business Machines Corporation in the United States other countries or both uses two columns for optimistic concurrency control. On the other hand other databases may use one column for optimistic concurrency control. With embodiments users can utilize the unique features of a relational database with statement patterns that are specific to that relational database.

The statement patterns carry the option to switch to data store specific statements either at runtime or at the time of generation. Generation may be described as creating an implementation for the interface at compile or post compile time. For example a statement pattern may be used to generate two queries at the time of compilation. The type of database connectivity at runtime may then be used to decide which query should be executed.

The ability of the statement patterns to allow the grouping of several statements helps eliminate many cases of dynamic SQL assembly using string concatenation. That is the SQL statement is available at runtime when strings are concatenated to form the SQL statement. This helps improve performance and system management.

Statement patterns may also be combined e.g. sequentially . As an example consider a user who has a base table and a history table. The difference between these two tables is their name. Without the use of statement patterns a user would need to write multiple queries in order to fetch data from both the tables. However with the use of table replacement and column replacement patterns a user can write a single core query but still be able to fetch data from both the base table and the history table.

For this example assume that the following is a Bean Definition of Employee where Bean refers to a Java class that conforms to a Java Bean Specification Java is a trademark of Sun Microsystems in the United States other countries or both 

When mapping the column values for logic 4 the columnPattern pattern maps the name column from MyEmployee table to the property h name in the Employee bean. But the column id column from the Employee table or MyEmployee table is mapped to the id property in the bean. In certain embodiments the name from Employee table is not mapped.

The tableAlias pattern is expanded to generate code to map all the columns returned from employee table to bean atest.EmployeeBean.

In Query 5 for every address returned from the data store . . . the data access framework adds a column cityname to the result set. For query 5 the data access framework queries the city names from the list of city names at the client using zipcode as a key.

In block the statement generator determines whether there is another statement pattern to be expanded. It is possible that the expanded logic includes additional statement patterns to be expanded. If there are additional statement patterns to be expanded processing loops back to block otherwise processing continues to block . In block the statement generator forwards the expanded logic to the data access framework .

The expressive power of the statement patterns are designed to replace a statement with one or more new statements and to allow a program set up previously to execute new statements without affecting the rest of the program.

Statement patterns may be specified inside or outside the core statement. Also any number of statement patterns may be applied together to any number of statements.

The use of statement patterns is not limited to queries. Statement patterns are highly versatile and may be applied to all types of statements such as insert update and delete statements. Statement patterns may also be applied to queries written in other languages including XQuery XPath and XUpdate.

Embodiments of statement patterns may include generation framework devices as input and mechanisms for the statement syntax trees and the source code. In certain embodiments the generation framework device takes as an input an interface with a method annotated with SQL and a pattern. The generation framework device processes the SQL and the pattern and generates code for execution.

Embodiments enable various versions of an original SQL query to be optimized as well as executed as static SQL. Static SQL performs better and is more secure than dynamic SQL which requires preparing and binding the SQL statement for execution at run time. Also embodiments use statement patterns that allow the application of SQL and result set augmentations and enhancements e.g. a pagyByValue pattern .

Embodiments eliminate the duplicate existence of several versions of the same original statement generated in order to satisfy syntactic and optimization requirements of various underlying relational databases. The use of statement patterns also enables the adoption of best practices. For example developers or other experts may write statement patterns so that users do not need to worry about the logic thus easing the burden of learning several underlying technologies on application programmers and users. With the use of the statement patterns the application programmers and users only need to learn how to select the appropriate and applicable statement patterns in order to tailor the original statement to the syntactic requirements of a specific relational database. The use of these statement patterns also helps ease the workloads of testing on application programmers since the statement patterns can be tested before production use during development by the pattern provider.

The described operations may be implemented as a method computer program product or apparatus using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof.

Each of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The described operations may be implemented as code maintained in a computer usable or computer readable medium where a processor may read and execute the code from the computer readable medium. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a rigid magnetic disk an optical disk magnetic storage medium e.g. hard disk drives floppy disks tape etc. volatile and non volatile memory devices e.g. a random access memory RAM DRAMs SRAMs a read only memory ROM PROMs EEPROMs Flash Memory firmware programmable logic etc. . Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The code implementing the described operations may further be implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. . Still further the code implementing the described operations may be implemented in transmission signals where transmission signals may propagate through space or through a transmission media such as an optical fiber copper wire etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signals in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices.

A computer program product may comprise computer useable or computer readable media hardware logic and or transmission signals in which code may be implemented. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the embodiments and that the computer program product may comprise any suitable information bearing medium known in the art.

The term logic may include by way of example software hardware firmware and or combinations of software and hardware.

Certain implementations may be directed to a method for deploying computing infrastructure by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described implementations.

The logic of A B and describes specific operations occurring in a particular order. In alternative embodiments certain of the logic operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel or operations described as performed by a single process may be performed by distributed processes.

The illustrated logic of A B and may be implemented in software hardware programmable and non programmable gate array logic or in some combination of hardware software or gate array logic.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The system architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The system architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The system architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the embodiments the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

