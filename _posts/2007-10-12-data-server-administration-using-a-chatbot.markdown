---

title: Data server administration using a chatbot
abstract: Provided are techniques for data server administration. Under control of a chatbot in real time, a command is received from a user for administering a data server in a natural language format. It is determined whether the data server is to be contacted to process the command. In response to determining that the data server is to be contacted, session information is retrieved to identify the data server to be contacted, the command in the natural language format is converted into one or more data server administration Application Programming Interface (API) calls, the one or more data server administration API calls to the data server are issued, and information about processing of the command is provided to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250192&OS=08250192&RS=08250192
owner: International Business Machines Corporation
number: 08250192
owner_city: Armonk
owner_country: US
publication_date: 20071012
---
Data server administration includes managing relational data server configuration settings e.g. storage memory and logs and retrieving diagnostic information. Remote data server administration describes the administration of data servers remotely via a network connection for example a remote login session or via a web browser. Data servers that provide an administration Application Programming Interface API may be administered remotely using dedicated standalone programs e.g. standalone data server administration applications or web applications. Standalone programs lack the flexibility of World Wide Web Web applications which may be executed from a standard browser running on a machine coupled to a network to which the data server is also coupled. However Web applications require the user to run a browser and lack the flexibility and accessibility of a purely text based interface. If a user has a command session on a machine that the data server is installed on the data server typically supplies a set of command line utilities to administer the data server. Remote standalone data server administration applications sometimes provide an SQL command interface that enables the user to enter SQL commands. However not all data servers support administration of the server itself via SQL commands. Even in cases in which a standalone data server administration application does connect to a data server that does support data server administration via SQL the standalone data server administration application lacks the flexibility of switching between data servers with simple commands.

Provided are a method computer program product and system for data server administration. Under control of a chatbot in real time a command is received from a user for administering a data server in a natural language format. It is determined whether the data server is to be contacted to process the command. In response to determining that the data server is to be contacted session information is retrieved to identify the data server to be contacted the command in the natural language format is converted into one or more data server administration Application Programming Interface API calls the one or more data server administration API calls to the data server are issued and information about processing of the command is provided to the user.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the invention.

Embodiments enable data server administration via a chatbot. A chatbot may be described as a computer program that communicates with users via voice and or text on an instant message network.

The instant messaging server includes one or more instant messaging applications that manage the instant message communications between clients e.g. between the server and the data servers . . . . The instant messaging server manages instant messaging communications. Instant messaging is sometimes referred to as IM or IMing . Instant messaging may be described as an exchange of voice and or text messages between two or more entities e.g. users a user and a software application etc. through a software application in real time over some communication path such as the Internet. For example the text may be typed into a chat window having two panes one in which to type and enter text and the other in which to view the exchanged text. Also the text may be converted from voice to text via voice recognition software and from text to voice via text to speech software enabling instant message communication to be implemented using speech. With embodiments real time includes actual real time and near real time transfer transmission or communication.

Each data server . . . includes one or more applications . . . and data . . . . Data servers . . . may also be called Relational Database Management Systems RDBMS and in some cases are simply referred to as databases. However embodiments use data server to refer to the software infrastructure that contains databases and facilitates access and management of the databases e.g. including creating and deleting databases and manipulating data in databases .

The server includes a chatbot that enables a database administrator or other user to administer the data servers . . . via instant messaging. The server is coupled to an administration data store e.g. a database . The chatbot maintains user data optionally maintains validation data and maintains session information . In certain embodiments the user data includes user identifiers for users who are authorized to submit commands to particular data servers . . . to perform data server administration tasks. In certain embodiments any user can connect to any existing data server . . . and if a user defines a new data server by providing the data server login data i.e. used to login to the newly defined data server then the data server login data for the newly defined data server is stored for the user and used when that user wants to administer the newly defined data server. In certain embodiments the validation data includes user identifiers for users i.e. the validation data includes the contents of the user data along with information about which data servers . . . each user can access e.g. UserA can access ServerZ . In certain embodiments the validation data also includes information about particular commands that each user may issue to specific data servers . . . e.g. UserA can issue a command to check extents on ServerZ . In certain embodiments the chatbot maintains the user data and the validation data in database tables. For example the user data may be a table of administration users and which data servers . . . they have administration rights to. As another example the validation data may be a table of administration users the data servers . . . that they may administer and commands that they may issue.

In certain embodiments the session information includes information about users who have initiated dialogs i.e. connections with the chatbot . In certain embodiments users defined as administrators in the administration data store can use the chatbot and information about these users is stored in the session information while other users not defined as administrators in the administration data store who attempt to communicate with the chatbot are denied access and information about them is not stored in the session information unless administrators of the chatbot choose to log access denied events. The session information may also include session specific information such as the current data server instance that is being administered. In certain embodiments the chatbot has access to the administration data store e.g. an administration database and maintains a row in a table for each user whose session information is to be stored.

The chatbot also has access to data server login data that is used to connect to one or more data servers . . . . The data server login data may be predefined may be defined by the user issuing commands via the chatbot in which case the login data is stored in the data server login data or both.

The servers . . . may each comprise any computing device known in the art such as a server mainframe workstation personal computer hand held computer laptop telephony device network appliance etc.

The communication path may comprise any type of network such as for example a peer to peer network spoke and hub network Storage Area Network SAN a Local Area Network LAN Wide Area Network WAN the Internet an Intranet etc.

In block the chatbot receives a command from a user in a natural language format to administer one or more data servers . . . . The command may configure one or more data servers . . . retrieve information about one or more data servers define new data servers . . . to administer remove data servers . . . from a list of data servers . . . maintained in the administration data store and otherwise administer one or more data servers. illustrate an example dialog in which configuration is performed in accordance with certain embodiments. In a user named Bowerman submits the command help to the chatbot and receives information including a list of commands that a user may submit. Then user Bowerman defines a new data server in the format of add server servername machine port user passwd with the command add server logos1110 logos 9089 informix mypassword . The chatbot indicates that the data server has been added Server logos1110 added and sets that as the current data server to which additional commands will be applied until the current data server is changed. Next user Bowerman requests that spaces be listed with the command list spaces and the chatbot obtains a list of database spaces from the current data server and lists the database spaces. Then user Bowerman requests that the data servers be listed with the command list servers and the chatbot provides a list of defined data servers e.g. using the user data which identifies users and data servers . . . . User Bowerman changes the current server with the command server marsh1110 and the chatbot indicates that the current server is marsh1110. User Bowerman checks extents with the command check extents and the chatbot validates the extents by contacting the current data server and provides an indication of success. That is a command such as validate extents is translated to a specific data server administration API call to be executed after a connection to the current data server is made. The data server returns text information to the chatbot which the chatbot provides to the user. If a command was issued that translated to an API call that only returned a numeric return code to the chatbot the chatbot may indicate a message such as Command xxxx completed with return code y . User Bowerman issues a checkpoint with the command checkpoint and the chatbot issues the checkpoint command to the current data server and returns an indication that the checkpoint completed.

In particular a user e.g. a database administrator initiates a dialog with the chatbot and submits a command in a natural language format for one or more data servers . . . . A natural language format may be described as a language written and or spoken by humans e.g. English or Japanese . That is the user issues text based commands to instruct the chatbot to perform specific data server administration tasks.

In block the chatbot determines whether the user is authorized to administer the one or more data servers . . . . If so processing continues to block otherwise processing continues to block . In certain embodiments the chatbot makes the determination based on whether the user s identifier used in initiating the dialog matches an identifier in the user data and if that user identifier is authorized to access the particular one or more data servers . . . . In certain embodiments the chatbot maintains a list of valid i.e. authorized users and the data servers . . . that each of the users may administer in a database table i.e. a form of user data and when a user on the instant message network initiates a conversation with the chatbot the chatbot validates the user s identifier against the list of valid users. In certain embodiments the chatbot makes the determination by checking the validation data to determine whether this user is allowed to issue this command to the one or more data servers . . . specified with the command and if so processing continues to block .

In block the chatbot provides a message indicating that the user is not authorized and processing continues to block .

In block the chatbot parses the command in the natural language format. In block the chatbot determines whether authentication information i.e. data server login data and or session information is to be stored. If so processing continues to block otherwise processing continues to block . In block the chatbot stores the authentication information and or session information and processing continues to block . For example if the command is to add server the authentication information would be data server login data for the server to be added and this data server login data is stored in the administration data store and associated with the user who issued the command e.g. Bowerman . Subsequently user Bowerman may issue a server command to make this server the current server without having to provide authentication for this server again. However in certain embodiments other users would not be able to make this added server their current server without first issuing a valid command of add server or were otherwise listed as valid administrators for that newly added server.

In block the chatbot determines whether there is a need to contact a data server . . . to process the command. If so processing continues to block otherwise processing continues to block . In block the chatbot processes the command as needed without contacting the data server . . . and processing loops back to block .

In block the chatbot retrieves session information to determine the current data server i.e. the data server to be contacted to process the command . In block the chatbot converts the parsed command into one or more data server administration API calls to remotely administrator one or more data servers . . . . In certain embodiments for commands that translate to a remote API call there is a direct conversion from a natural command to a connection to a data server . . . followed by the execution of a specific API function with specific arguments.

In block the chatbot connects to the current data server . . . to which the one or more data server administration API calls are to be issued. To initiate a connection to a data server . . . the chatbot has access to data server login data . In certain embodiments the data server login data is a table containing login credentials to each data server . . . . This information may be secured by appropriate encryption or other means. The chatbot may also maintain a log database or file recording each connecting user s actions.

In block the chatbot issues the one or more data server administration API calls to the one or more data servers . . . . In block the chatbot provides information about processing of the command to the user e.g. the command was executed successfully . From block processing loops back to block .

Merely to enhance understanding of embodiments examples will be provided with reference to . Consider the following Sequence 1 between user Bowerman and the chatbot 

For the command in Sequence 1 from user Bowerman add server logos1110 logos 9089 informix mypassword the chatbot processing flows through blocks and . In this example the chatbot stores authentication information and session information i.e. the session information indicates that the current data server for this user Bowerman is called logos1110 and no other processing is needed in block .

For the command in Sequence 2 from user Bowerman check extents the chatbot processing flows through blocks and .

Thus with embodiments the chatbot may include a parser that may be programmed to accept commands identical or similar to the command line administration commands provided by a data server . . . for use on the machine where the server was installed which means a user e.g. a DataBase Administrator DBA does not need to learn a new set of commands. Also instant message communication has accessibility advantages because many instant message clients support text to speech conversion and voice recognition. Moreover with embodiments user authentication is handled by the instant message network so once a valid user has been given access to the instant message network defined to the application no additional authentication is required. That is if a user is logged onto the instant message network the user has already provided a valid user identifier user id and password once to the instant message server so particularly for a corporate intranet running a secure instant message system the chatbot knows who the user is and that they are authenticated to access the instant message network. Thus the user does not need to provide a user id and password to the chatbot . In addition interaction with the user may be presented in a more human friendly dialog via the chatbot .

In certain embodiments the chatbot may be written using development tools provided for developing instant message clients. For example a chatbot communicating over an IBM Lotus Sametime network may be written in Java using the IBM Lotus Sametime Software Development Kit SDK . IBM Lotus and Sametime are trademarks of International Business Machines Corporation in the United States other countries or both. Java is a trademark of Sun Microsystems in the United States other Countries or both. The chatbot then communicates with data server instances using provided administration APIs. For example a Java based chatbot may administer an Informix data server using Java DataBase Connectivity JDBC calls to the Informix Structured Query Language SQL Admin API. JDBC is a trademark of Sun Microsystems in the United States other Countries or both. Informix is a trademark of International Business Machines Corporation in the United States other countries or both. 

The availability of data server administration APIs that may be accessed remotely means that the chatbot may run on any machine that can make a network connection to both the instant message network and the selected data server. Data servers that support running an application server within the data server may additionally support running a dedicated chatbot that administers a single instance. Moreover the chatbot has the flexibility of switching between data servers with simple commands.

The described operations may be implemented as a method computer program product or apparatus using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof.

Each of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The described operations may be implemented as code maintained in a computer usable or computer readable medium where a processor may read and execute the code from the computer readable medium. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a rigid magnetic disk an optical disk magnetic storage medium e.g. hard disk drives floppy disks tape etc. volatile and non volatile memory devices e.g. a random access memory RAM DRAMs SRAMs a read only memory ROM PROMs EEPROMs Flash Memory firmware programmable logic etc. . Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The code implementing the described operations may further be implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. . Still further the code implementing the described operations may comprise a receiver or transmitter device or other physical carrier capable of processing or implementing the code as transmission signals where transmission signals may propagate through space or through a transmission media such as an optical fiber copper wire etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signals in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices.

A computer program product may comprise computer useable or computer readable media hardware logic and or transmission signals in which code may be implemented. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the embodiments and that the computer program product may comprise any suitable information bearing medium known in the art.

The term logic may include by way of example software hardware firmware and or combinations of software and hardware.

Certain implementations may be directed to a method for deploying computing infrastructure by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described implementations.

The logic of describes specific operations occurring in a particular order. In alternative embodiments certain of the logic operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel or operations described as performed by a single process may be performed by distributed processes.

The illustrated logic of may be implemented in software hardware programmable and non programmable gate array logic or in some combination of hardware software or gate array logic.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The system architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The system architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The system architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the embodiments the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

