---

title: Apparatus and methods of a zero single point of failure load balancer
abstract: Apparatus and methods in a load balancer computing apparatus include, in aspects, determining if a master is functioning, and if the master is not functioning, then attempting to become the master by setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table. In other aspects, the apparatus and methods include assigning each of a group of commands to one of a plurality of slaves, storing the commands and a corresponding assignment in a database table, checking a command status in the database table for each of the group of commands, wherein the command status indicates whether or not the respective command has been executed; and executing a callback function when all the commands are executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732261&OS=08732261&RS=08732261
owner: QUALCOMM Incorporated
number: 08732261
owner_city: San Diego
owner_country: US
publication_date: 20071128
---
The present Application for Patent claims priority to Provisional Application No. 60 868 689 entitled METHOD AND APPARATUS FOR SUPPORTING ZERO SINGLE POINT OF FAILURE LOAD BALANCER filed Dec. 5 2006 and assigned to the assignee hereof and hereby expressly incorporated by reference herein.

The described aspects relate to distributed processing systems and more particularly to apparatus and methods of a zero single point of failure load balancer.

In computer processing a group of commands can often be divided into individual commands. The commands can be executed in parallel and then the results can be combined. Additionally since a single computing apparatus has finite processing capabilities multiple computing apparatuses may be used to execute the commands. However using more than a single computing device may create problems in distributing and combining the commands among the computing devices. When multiple computing devices are used the group of computing apparatuses may be called a processing farm.

Some methods of distributing commands to multiple apparatuses use a master to distribute the commands to a number of slaves and to combine the results of executing the commands. In these methods the master distributes commands to slaves the slaves execute the commands and the master then combines the results of the executed commands. Each of the slaves and the master may be a separate computing device. The method or apparatus for dividing the commands among the computing devices is often called a load balancer which may be executed and or which may reside on the master computing device.

One problem with this method of distributing processes is that if the master malfunctions then the work may be lost and it may be difficult to replace the master because the master may require specialized hardware and or software. As such often a computing apparatus that is more reliable and expensive is used as a master. It may also be difficult upgrading the master without losing the use of all the computing apparatuses.

Another problem is that it may be difficult to add slaves dynamically to the system so that the master can use the slaves without having to reset the system. For example it may be difficult to add slaves after the software commands have been divided.

Another problem is that it may be difficult to recover when a slave malfunctions and loses the results of executing a command.

And yet another problem with using a master and multiple slaves is that the process for selecting a new master may be complicated. For example if the master fails or is otherwise inoperative a procedure must be established to designate a new master that is able to pick up where the previous master left off. Such procedures are often cumbersome.

The following presents a simplified summary of one or more aspects in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated aspects and is intended to neither identify key or critical elements of all aspects nor delineate the scope of any or all aspects. Its sole purpose is to present some concepts of one or more aspects in a simplified form as a prelude to the more detailed description that is presented later.

In an aspect a computer implemented method for a slave computing apparatus of a load balancer comprises determining according to a common predetermined health maintenance algorithm independently operable by each of a plurality of slaves in the load balancer if a master of the load balancer is functioning. If the master is not functioning then the method includes attempting to become the master according to a common predetermined role transitioning algorithm independently operable by each of the plurality of slaves in the load balancer wherein the predetermined role transitioning algorithm includes setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table

In another aspect at least one processor configured to act as a slave of a load balancer comprises a first module for determining according to a common predetermined health maintenance algorithm independently operable by each of a plurality of slaves in the load balancer if a master of the load balancer is functioning. Further the at least one processor also includes a second module for attempting if the master is not functioning to become the master according to a common predetermined role transitioning algorithm independently operable by each of the plurality of slaves in the load balancer wherein the predetermined role transitioning algorithm includes setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table.

In yet another aspect a computer program product for a slave of a load balancer comprises a computer readable medium having codes for causing a computer to perform actions. The computer readable medium includes a first set of codes for causing a computer to determine according to a common predetermined health maintenance algorithm independently operable by each of a plurality of slaves in the load balancer if a master of the load balancer is functioning. Further the computer readable medium includes a second set of codes for causing the computer to attempt if the master is not functioning to become the master according to a common predetermined role transitioning algorithm independently operable by each of the plurality of slaves in the load balancer wherein the predetermined role transitioning algorithm includes setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table.

In a further aspect a slave apparatus of a load balancer comprises means for determining according to a common predetermined health maintenance algorithm independently operable by each of a plurality of slaves in the load balancer if a master of the load balancer is functioning and means for attempting if the master is not functioning to become the master according to a common predetermined role transitioning algorithm independently operable by each of the plurality of slaves in the load balancer wherein the predetermined role transitioning algorithm includes setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table.

In another aspect a slave apparatus of a load balancer comprises a health management service operable to determine according to a common predetermined health maintenance algorithm independently operable by each of a plurality of slaves in the load balancer if a master is functioning and further operable if the master is not functioning to attempt to become the master according to a common predetermined role transitioning algorithm independently operable by each of the plurality of slaves in the load balancer wherein the predetermined role transitioning algorithm includes setting a master network identification in a master database table to a self network identification before at least one other slave sets a corresponding other slave network identification as the master network identification in the master database table. Additionally the slave apparatus comprises a database service in communication with the health management service and operable to read and write to the master database table responsive to the health management service.

In still another aspect a computer implemented method for a master computing apparatus of a load balancer comprises executing a common predetermined role transitioning algorithm to become a master. The common predetermined role transitioning algorithm is independently operable by each of a plurality of slaves in the load balancer and includes setting a master network identification in a master database table to a self network identification before at least one other slaves sets a corresponding other slave network identification as the master network identification in the master database table. Further the method includes executing a common predetermined health maintenance algorithm to determine health of each of the plurality of slaves. The common predetermined health maintenance algorithm is independently operable by each of the plurality of slaves in the load balancer. Also the method includes assigning each of a group of commands to at least one of the plurality of slaves determined to be functioning based on the execution of the predetermined health maintenance algorithm. The method further includes storing the commands and a corresponding assignment in a database table wherein each assignment comprises a network identification for one of the plurality of slaves assigned to the respective command. Also the method includes checking a command status in the database table for each of the group of commands wherein the command status indicates whether or not the respective command has been executed. Additionally the method includes executing a callback function when all the commands are executed as determined based on the command status.

In a further aspect at least one processor configured to act as a master of a load balancer comprises a first module for executing a common predetermined role transitioning algorithm to become a master. The common predetermined role transitioning algorithm is independently operable by each of a plurality of slaves in the load balancer and includes setting a master network identification in a master database table to a self network identification before at least one other slaves sets a corresponding other slave network identification as the master network identification in the master database table. Further the at least one processor includes a second module for executing a common predetermined health maintenance algorithm to determine health of each of the plurality of slaves. The common predetermined health maintenance algorithm is independently operable by each of the plurality of slaves in the load balancer. Also the at least one processor includes a third module for assigning each of a group of commands to at least one of the plurality of slaves determined to be functioning based on the execution of the predetermined health maintenance algorithm. Further the at least one processor includes a fourth module for storing the commands and a corresponding assignment in a database table wherein each assignment comprises a network identification for one of the plurality of slaves assigned to the respective command. The at least one processor further includes a fifth module for checking a command status in the database table for each of the group of commands wherein the command status indicates whether or not the respective command has been executed and a sixth module for executing a callback function when all the commands are executed as determined based on the command status.

In another aspect a computer program product comprises a computer readable medium having codes for performing actions. The computer readable medium includes a first set of codes causing a computer to executing a common predetermined role transitioning algorithm to become a master. The common predetermined role transitioning algorithm is independently operable by each of a plurality of slaves in the load balancer and includes setting a master network identification in a master database table to a self network identification before at least one other slaves sets a corresponding other slave network identification as the master network identification in the master database table. Further the computer readable medium includes a second set of codes causing the computer to execute a common predetermined health maintenance algorithm to determine health of each of the plurality of slaves. The common predetermined health maintenance algorithm is independently operable by each of the plurality of slaves in the load balancer. Also the computer readable medium includes a third set of codes causing the computer to assign each of a group of commands to at least one of the plurality of slaves determined to be functioning based on the execution of the predetermined health maintenance algorithm. Further the computer readable medium includes a fourth set of codes causing the computer to store the commands and a corresponding assignment in a database table wherein each assignment comprises a network identification for one of the plurality of slaves assigned to the respective command. The computer readable medium also includes a fifth set of codes causing the computer to check a command status in the database table for each of the group of commands wherein the command status indicates whether or not the respective command has been executed. Additionally the computer readable medium includes a sixth set of codes causing the computer to execute a callback function when all the commands are executed as determined based on the command status.

In a further aspect a master apparatus of a load balancer comprises means for executing a common predetermined role transitioning algorithm to become a master. The common predetermined role transitioning algorithm is independently operable by each of a plurality of slaves in the load balancer and includes setting a master network identification in a master database table to a self network identification before at least one other slaves sets a corresponding other slave network identification as the master network identification in the master database table. Further the master apparatus includes means for executing a common predetermined health maintenance algorithm to determine health of each of the plurality of slaves. The common predetermined health maintenance algorithm is independently operable by each of the plurality of slaves in the load balancer. Also the master apparatus includes means for assigning each of a group of commands to at least one of the plurality of slaves determined to be functioning based on the execution of the predetermined health maintenance algorithm. Additionally the master apparatus includes means for storing the commands and a corresponding assignment in a database table wherein each assignment comprises a network identification for one of the plurality of slaves assigned to the respective command. Further the master apparatus comprises means for checking a command status in the database table for each of the group of commands wherein the command status indicates whether or not the respective command has been executed. Additionally the master apparatus comprises means for executing a callback function when all the commands are executed as determined based on the command status.

In yet another aspect a master apparatus of a load balancer comprises a health maintenance service operable to execute a common predetermined role transitioning algorithm to become a master. The common predetermined role transitioning algorithm is independently operable by each of a plurality of slaves in the load balancer and includes setting a master network identification in a master database table to a self network identification before at least one other slaves sets a corresponding other slave network identification as the master network identification in the master database table. Also the health maintenance service is further operable to execute a common predetermined health maintenance algorithm to determine health of each of the plurality of slaves wherein the common predetermined health maintenance algorithm is independently operable by each of the plurality of slaves in the load balancer. The master apparatus also includes a distribution service operable to each of a group of commands to at least one of the plurality of slaves determined to be functioning based on the execution of the predetermined health maintenance algorithm. Further the master apparatus comprises a database service in communication with the distribution service and operable to store the commands and a corresponding assignment in a database table wherein each assignment comprises a network identification for one of the plurality of slaves assigned to the respective command. Also the distribution service is further operable to check a command status in the database table for each of the group of commands wherein the command status indicates whether or not the respective command has been executed. Additionally the master apparatus comprises a user command executor operable to execute a callback function when all the commands are executed as determined based on the command status.

To the accomplishment of the foregoing and related ends the one or more aspects comprise the features hereinafter fully described and particularly pointed out in the claims. The following description and the annexed drawings set forth in detail certain illustrative features of the one or more aspects. These features are indicative however of but a few of the various ways in which the principles of various aspects may be employed and this description is intended to include all such aspects and their equivalents.

The apparatuses and methods described herein provide for dividing a group of commands into individual commands and distributing the commands to multiple computing devices and then combining the results of the executed commands. The system comprising the computing devices may be called a processing farm. In some aspects each of the computing devices uses the same method. The method may begin with each of the computing devices attempting to become the master. One of the computing devices succeeds and becomes a master and each of the remaining computing devices becomes a slave. Advantageously the method may be implemented independently by each computing device without requiring a separate controller to identify the master. Commands are submitted to the master for execution. The master divides the plurality of commands into individual commands. For example the plurality of commands may be received together e.g. in a script and a load balancer component on the master computing device splits the script up into one command for each line of the script and distributes the commands to the slaves. In some aspects the slaves take the distributed commands from the master and execute the respective commands returning the respective result to the master. The master keeps track of the distributed commands and will compile and return a result when the result of all related distributed commands are available.

Additionally the master may regularly check to insure each of the slaves is functioning. If a slave is not functioning then the distributed commands assigned to the non functioning slave are reassigned to another slave and or the master may execute the respective distributed commands.

Further at least one of the slaves may regularly check to insure that the master is still functioning. If a slave determines that the master is not functioning then the slave will attempt to become the master according to an independently executable method. In some aspects each of the slaves may attempt to become the master until one of the slaves succeeds and becomes the new master. The slaves that did not become the master will continue to work as slaves. The slaves may use a database to determine which slave becomes the master. In some aspects a master code such as a constant value may be used as a primary key in a master database table in the database so that only one slave can become the master.

Additionally in some aspects the master may use a database to maintain an assignment record and a status of each distributed command.

Thus a system for a zero point of failure balancer is realized by one or more of each of the slaves regularly checking the status of the master by at least one of the slaves attempting to become the master if the master is not functioning by the slaves using a database to determine which slave becomes the new master by the master regularly checking the status of each of the slaves or by the master using a database to maintain the tasks. Additionally by each of the computing devices using the same method only one method needs to be developed and maintained.

Referring to aspects of a zero point of failure load balancer system comprise computing devices and communication device . In one of the computing devices is the master and at least one of the other computing devices is a slave . Each of the computing devices may be running a method for providing a zero point of failure load balancer system . The method provides at least two roles for each computing device one role to work as a slave and the other role to work as a master .

In system the designated master of the computing devices receives one or more commands from a queue input module of computing device such as via communication network . For example each command may relate to processing of communication device related data collected from one or more communication devices and stored in database . For instance communication device related data may include information relating to one or more of the operation of one or more communication devices on a corresponding one or more wireless communication networks a status of one or more communication device components such as hardware and or software or some combination and or some correlation of both. As such command may relate to determining statistics and or other characteristics associated with one or more communication devices with the wireless networks on which communication device s operate s or some combination of both.

In any case in order to increase the efficiency of processing one or more commands master executes a load balancer module operable via a distribution service to distribute one or more of the commands to one or more of the computing devices including the slaves as well as the master for processing. For example each command may be broken down into more than one sub command and distributed. In particular each computing device includes a user command executor operable to process one or more of the commands and return the result back to master . Load balancer on the master is then operable to reassemble all of the results with an optional aspect of further processing the results and return a final end result corresponding to the respective command . For example final end result may be stored in database with a reference to the corresponding command enabling an authorized user such as the user of computing device to retrieve and view the final end result . As noted above final end result may be some sort of characteristic related to one or more communication devices or one or more wireless networks based at least in part on the data collected from one or more communication devices . Further in a zero point of failure aspect each computing device such as the slaves also includes a similar load balancer module to communicate with the load balancer module of the master or to perform the master load balancing functions if the respective computing device becomes the master.

Further master includes a database service operable to provide a communication interface with database in order to store information related to the assigned processing tasks and the final end result as well as information relating to the method for establishing the master and slaves . In a zero point of failure aspect database comprises a storage mechanism having high reliability and built in redundancy systems. For example database may include a command index table that stores references to each command received by master . Further database may include a sub command index table that stores references to the various commands distributed by master to the computing devices and the status of the distributed commands corresponding to the processing of a respective command . Additionally in a zero point of failure aspect database may include a master table that stores information relating to the master and used for establishing a new master. Further in a zero point of failure aspect each computing device such as the slaves also includes a similar database service to interface with database and or the database service of the master .

Additionally in a zero point of failure aspect master includes a health management service operable to regularly attempt to contact each of the slaves over the communications network . If a slave is not reachable then master assumes the respective slave is not functioning and acts to redistribute any commands assigned to the respective slave for processing. For example the distribution service module of the master may update the sub command index table and redistribute the commands from each unreachable slave to another slave that is reachable.

Correspondingly the health management service of each slave may regularly attempt to contact the master . If the health management service of a slave determines that the master is not functioning properly e.g. if no response from the master is received then the health management service of a slave will attempt to change the role of the respective slave to the role of master . The health management service of the slave may attempt to become the master by using the master table of the database to manage the communication among the slaves . In some aspects the master table uses a master code that may be a constant where the master code is the primary key of the master table so that only a single slave will successfully write to the master table . In some aspects communication among the slaves in determining which slave will become the master is managed by implementing or imitating a semaphore using a row in the master table of the database . In some aspects the slaves and the master communicate with one another and with the database using a communication message and use a network identifier ID to identify one another.

Thus system provides apparatus and methods for a zero point of failure load balancer by providing master with a database to manage the distribution of commands to the slaves and by the slaves regularly checking the status of the master and attempting to become the master if the master stops functioning properly. Further the master regularly checks the status of each of the slaves and if a slave does not respond then the master reassigns the commands assigned to the unreachable slave to reachable slaves and or the master . In some aspects the commands and their status are stored in the database . Thus system advantageously provides a zero point of failure system that distributes commands among the computing devices manages the command distribution via storing command related information in database maintains the health of the system via communication between health management services and manages determination of a master for load balancing via the database .

Referring to communication device may comprise any type of device operable to exchange messages with communications network . For example communication device may comprise a mobile communication device such as a wireless and or cellular telephone. It should be understood that communication device is not limited to the illustrated device but may further include a Personal Digital Assistant PDA a two way text pager a portable computer having a wired or wireless communication portal and any type of computer platform having a wired and or wireless communications portal. Further communication device can be a remote slave or other similar device such as remote sensors remote servers diagnostic tools data relays and the like which does not have an end user thereof but which simply communicates data across a wireless or wired network. Additionally it should be noted that any combination of any number of communication device may be utilized in system . Further it should be noted that although a distinction has been made between a communication device and a computing device and that some devices may serve as both a communication device and a computing device and .

In particular system operates to collect data from one or more communication devices and then to process and analyze the collected data using master computing device and slave computing devices . Specifically a user of computing device such as a remote computer enters one or more commands into a queue input module which forwards the commands to master computing device . The one or more commands generally relate to the identification of data to collect and or the identification of the analysis to perform on the collected data. Master computing device then executes load balancer module to process the one or more commands and return the result to computing device .

As such communication device includes a computer platform having a memory that stores at least a data collection module for collecting requested data relating to the communication device the communication network or some combination thereof. Data collection module may include any combination of hardware software and firmware and is operable to be dynamically configured to collect any desired data. Computer platform further includes a processor for executing the data collection module . Further computer platform may include an application programming interface API to enable communication between data collection module and processor .

API may be a runtime environment executing on the respective communication device. One such runtime environment is Binary Runtime Environment for Wireless BREW software developed by Qualcomm Inc. of San Diego Calif. Other runtime environments may be utilized that for example operate to control the execution of applications on wireless computing devices. In other aspects API may be an operating system such as Microsoft WINDOWS LINUS and MAC OS. The operating system may provide for multiple processes and or threads of execution that allow execution of multiple processes.

Additionally in some aspects processor may include various processing subsystems embodied in hardware firmware software and combinations thereof that enable the functionality of communication device and the operability of the communication device on communications network . For example processing subsystems allow for initiating and maintaining communications and exchanging data with other networked devices as well as within and or among components of communication device . In one aspect such as in a cellular telephone processor may include one or a combination of processing subsystems such as sound non volatile memory file system transmit receive searcher layer 1 layer 2 layer 3 main control remote procedure handset power management diagnostic digital signal processor vocoder messaging call manager Bluetooth system Bluetooth LPOS position determination position engine user interface sleep data services security authentication USIM SIM universal subscriber identity module subscriber identity module voice services graphics USB universal serial bus multimedia such as MPEG Moving Picture Experts Group protocol multimedia GPRS General Packet Radio Service short message service SMS short voice service SVS web browser etc. In some aspects data collection module collects data from one or more processing subsystems where the data may comprise log codes over the air events such as data packets corresponding to a communication protocol used by communication device data describing one or more hardware and or software components of communication such as a current state a usage amount etc. or any combination thereof.

Computing device operates database which executes portions of the load balancing and data processing aspects discussed herein and which may additionally store the data collected from one or more communication devices .

Database may be a structured collection of data. In one aspect the database may be enabled by a database management system DBMS such as ORACLE MYSQL or Microsoft ACCESS running on computing device . The database includes built in redundancy systems such as clusters and redundancy databases which provide a high reliability and reduce the likelihood of failure. The DBMS enables writing and reading rows sometime referred to as tuples of the database and the creation and deletion of database tables such as tables and . Although illustrates the database as being implemented by a single computing device the database may be implemented by many computing devices with multi redundancy. Further the database may be implemented in more than one storage mechanism.

The database may be composed of tables such as in . The tables comprise rows of data where the columns are the name of the data and the values of the data comprise the row of the table. A table of the database may have a primary key. When a database has a primary key then only a single row with a particular value may be a member of the table. In general the DBMS enables computing devices to write and read rows from tables in the database . In general the values of the rows may be any type of data that can be read and written to computer memory including the commands sent by master to slaves .

Referring to and in an aspect two tables and of the database may be used to maintain the status of one or more commands . Command index table may be utilized to track each command and its corresponding sub commands distributed for processing while sub command index table may be utilized to track the status of each sub command and its relationship to command .

In one aspect command index table includes the following fields command set identifier CMD SET ID may be the primary key for command index table and comprises a unique identifier for the respective command number of commands may be the total number of sub commands distributed to process the corresponding command and callback function may comprise a mechanism such as a script to be called when the group of commands is successfully executed. For example callback function may comprise an operation to assemble the results of the group of commands into a single result an operation or function to perform on at least one of the results of the group of commands to generate a new result for the group of commands etc. Further for example user command executor or some portion of load balancer such as distribution service may execute or initiate callback function .

Sub command index table may be used to store the actual sub commands and to maintain the status of the sub commands. Sub command index table may comprise the following fields sub command identifier SUB CMD ID may be the primary key for each row of sub command index table and includes a unique identifier that may be generated for every sub command distributed by the load balancer command CMD may be one single sub command corresponding to command for processing by the respective user command executor of the assigned computing device callback function comprises a mechanism such as a script to be called when the group of commands is successfully executed Callback Function Status is the state of the callback function for example in one non limiting case submitted 0 under execution 1 executed 2 Command CMD State comprises a value corresponding to the state of the sub command e.g. submitted 0 under execution 1 and executed 2 start time comprises a time at which the respective sub command is sent for execution to the respective user command executor command CMD set ID is the identifier associated with each group of sub commands that references back to a respective command where CMD Set ID corresponds to the value for the respective command as established in command index table and in some aspects CMD Set ID can be used as callback function id and address may be an identifier such as an Internet Protocol IP address or the network ID of the computing device to which the respective sub command is assigned for execution.

Thus command index table and sub command table allow for the management and tracking of the distributed processing of each command and further provide a mechanism that allows any device that transitions into the role of master to determine the current status of system .

Further referring to in an aspect master table may be utilized for maintaining the identity of the master and for managing which computing device becomes the master . The master table comprises the following fields master code which comprise a primary key for the master table and identifies that a master is established create time may be the time when the respective master code was inserted and master address may be an identifier such as an IP address or the network ID of the computing device that sets itself as the master. If master code comprises a predetermined value indicating the respective row identifies the master then master address will identify the computing device that is the current master . In general master table may be used to resolve a section of code between the master and the slaves in order to determine which computing device is the master. Since there are multiple computing devices each of which may attempt to become the master at approximately the same time then some means of communicating must be used to enable the computing devices to determine the master. As such master table is used to implement or simulate a software semaphore solution such as Dijkstra s algorithm. Thus when master code is utilized as a primary key of the master table then only one computing device can write its identity in the master table and thus become the master. Therefore by using a database for the slaves and the master to determine which of the computing devices becomes the master and by using the database to provide the network ID of the master aspects of a system for a zero point of failure load balancer is realized.

Referring back to as mentioned above computing device includes a queue input module that operates to allow a user to issue commands to system to collect data and or analyze collected data. In particular queue input module may comprise one or any combination of hardware software firmware data and executable instructions operable to provide computing device with the ability to input commands to the load balancer of the master . In some aspects queue input module may be text based and allow a user to input textual commands such as a command script that is then sent to the load balancer of the master . Thus queue input module enables commands to be input to the system by permitting commands to be received and sent to the load balancer of the master .

Additionally referring to computing device and may comprise any type of computing device. For example as illustrated in computing device and may comprise a fixed computing device such as a network device a server a computer workstation etc. It should be understood that computing devices and are not limited to the illustrated devices but may further include a portable computer having a wired or wireless communication portal and any type of computing device having a wired and or wireless communications portal. Additionally although computing devices are illustrated in a similar manner it should be noted that each of computing devices may be a different type of computing device. Further computing device and can be a remote slave or other similar computing device such as a remote server which does not have an end user thereof but which simply communicates data across a wireless or wired network . In alternate aspects each of computing devices and may be multi processor systems. Additionally it should be noted that any combination of any number of computing devices and may be utilized in system . Therefore the present apparatus and methods can accordingly be performed on any form of computing device connected to a wired or wireless communication network .

Additionally referring to which for simplicity references computing device computing devices may include a user interface in communication with a computer platform that includes a memory having instructions executable by a processor and further including a communications module enabling communication within and to or from the respective computing device.

User interface includes an input mechanism operable to generate or receive an input into the device and an output mechanism operable to generate and or present information for consumption by the user of the device . For example input mechanism may include at least one mechanism such as a keypad and or keyboard a mouse a touch screen display a microphone in association with a voice recognition module etc. In certain aspects input mechanism may provide for user input of at least a portion of commands . Further for example output mechanism may include a display an audio speaker a haptic feedback mechanism etc. Output mechanism may generate a graphical user interface a sound a feeling such as a vibration etc.

Further memory may comprise volatile and nonvolatile memory portions such as read only and or random access memory RAM and ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory and or any memory common to computer platforms. Additionally memory may include active memory and storage memory including an electronic file system and any secondary and or tertiary storage device such as magnetic media optical media tape soft and or hard disk and removable memory components.

Further computer platform includes at least one processor which may be an application specific integrated circuit ASIC or other chipset logic circuit or other data processing device. In some optional aspects as identified by dashed lines processor may execute an application programming interface API layer that interfaces with any resident software components such as any applications or modules in memory .

Additionally communications module enables communications among the various components of the respective communication device as well as being operable to exchange communications message between the device and communications network . Communications module may be embodied in hardware firmware software and or combinations thereof and may further include all protocols for use in intra device and inter device communications. Further communications module is operable to transmit and or receive information such as communications message in accordance with the apparatus and methods described herein.

Referring back to in some aspects communications message may represent a heartbeat request which is a request for the requested computing device to respond or an acknowledgement indicating a receipt of the heartbeat request or indicating the receipt of another type of communication message . In other aspects communication message may comprise commands sent to slaves or the result of execution of the commands sent to the master . In still other aspects communication message may be commands to read or write all or parts of database tables and . And in still other aspects communication message may be commands sent to a communications device to gather data corresponding to the operation of the communication device and communication message may be the data the communication device has gathered. In general communication message enables communication device and or computing device and or and or to communicate across communication network . It should be noted that communication message may be converted from one format to another by the communication network . For example communication message may originate as a TCP IP packet from a computing device and be converted into a wireless format in order for the communication packet to be transmitted to communications device .

Additionally referring to a memory of each respective computing device may be operable to store all or at least a portion network identifier ID . Network ID may be any type of identifier for the computing device and or communication device . In some aspects Network ID may be the IP address of the computing device or may be an ID to identify a wireless communication device such as a cellular telephone number. In some aspects network ID may not directly identify the network location of the computing device and or communication device but may provide information that can be used by the load balancer to locate the computing device and or communication device .

Additionally a memory of each respective computing device may be operable to store all or at least a portion of command . Command may be any type of command for the system to execute. Command may be a single command or command may be a group of commands or sub commands e.g. a command script. Command may include textual commands binary executables and in general command includes any form of representation that may be stored in memory and that directs the operation of the system . In some aspects command includes a series of commands for a user manager of a wireless device management system. Command may include commands instructing the master where to place the results of executing the command . Command may further include instructions that are intended for execution by another device. For example in one aspect command may include instructions for a wireless communication device instructing the wireless device to collect statistics regarding the operation of the wireless devices . The command may include instructions for where the wireless device should send the result of collecting the statistics regarding the operation of the wireless device e.g. database . Command may take many days to complete or may be a command that is immediately executable. Additionally command may include an instruction for the respective load balancer of the master to further process of the resulting data returned from slaves executing sub commands associated with the respective command . Further the master may add additional information not contained in the command in order to facilitate distributing executing and returning results of the commands . Additionally the execution of the command may generate data that may be stored on the respective computing device and returned to some predetermined place on the network such as to master or database or both.

Referring to load balancer may be stored in and executed by each respective computing device . Load balancer may comprise one or any combination of hardware software firmware data and executable instructions operable to provide the respective computing device with the ability to distribute commands to or receive commands from other computing devices and to manage the system . In particular load balancer of each computer may have three states. A first one of the states is a master state where the master receives and distributes the commands . A second one of the states is a slave state where the load balancer acts as a slave by receiving commands executing the commands and then returning the results of the execution to the master . And a third state is a role transition state where the load balancer is not acting as a master or a slave but may be initializing a role transition between a master and a slave . It should be noted that by using these three states for load balancer it is possible to use a single method for both the slaves and the master so that slaves can role transition to master and the master can role transition to a slave thereby avoiding the requirement of a separate controller to manage such transitions.

As noted above load balancer may be divided into three modules distribution service module health management service and database service module however the functionality provided by load balancer may be split among other modules or incorporated into a single module. As such in some aspects load balancer provides the computing device with at least the ability to communicate with a corresponding load balancer on other computing devices with the ability to distribute commands to other computing devices or receive commands from other computing devices with the ability to manage the health state of the system and with the ability to read and write to the database .

Health maintenance service may be stored in and executed from a memory of a respective computing device . Health maintenance service may comprise one or any combination of hardware software firmware data and executable instructions operable to provide the respective computing device with the ability to maintain the health of the system . In general health maintenance service provides the ability for computing devices acting as a slave to insure that a master is functioning properly. Further if the master is not functioning properly then health maintenance service provides the ability for computing devices acting as a slave to attempt to become the master . Further the health maintenance service provides the ability for the computing device acting as the master to insure that the slaves are functioning properly. If a slave is not functioning properly then health maintenance service provides the ability for computing device acting as master to redistribute any commands that may have been assigned to the malfunctioning slave .

In one aspect health maintenance service uses communications message to enable the slaves and the master to communicate to determine the health of system . The slaves regularly send a communications message to the master requesting the master return a communications message that acknowledges the request. which is discussed below illustrates some aspects of health maintenance service maintaining the health of the system via a health maintenance algorithm and transitioning the load balancer between slave and master states via a role transitioning algorithm. It should be noted that both the health maintenance algorithm and the role transitioning algorithm are common to all computing devices of the load balancer thereby allowing the computing devices to manage the load balancer without the assistance of external controllers. In some aspects health maintenance service or load balancer may comprise a pre determined time that may be used for making a determination of when a computing device is reachable and when a computing device should be determined unreachable. The predetermined time may be an executable procedure that varies the time to wait for a communication message otherwise referred to as a heartbeat based on one or more factors such as the load of the communication network . Additionally in some aspects the health maintenance service will check whether an actual performance measure for the slave meets one or more criteria defined in a master performance requirement before allowing a slave to role transition into a master . For example performance measure may be the actual amount of memory or the actual number of concurrent processes the respective computing device can execute at once while the master performance requirement may be the minimum amount of memory required to permit the device to become a master or it may be the minimum number of concurrent processes that can be executed on the slave before permitting the slave to become a master .

Referring to one non limiting example of a method for maintaining the health of the system includes actions taken by each computing device via health maintenance service of load balancer module to allow for i role transitioning between a master and a slave ii working as a master including and iii working as a slave including verify slave health and checking on the health of the master. Referring to Blocks and the role transitioning actions may be incorporated into a common role transitioning algorithm that allows each computing device to attempt to become the master or to try to become the master if a connection to the master cannot be established. Further referring to Blocks and the health related actions of working as a master include verify master health checking on the health of the slaves and redistributing any commands sent to slaves that are determined to be unhealthy or non responsive. Additionally referring to Blocks and the health related actions of working as a slave include verify slave health checking on the health of the master and if the health of the master cannot be verified attempting to recover from the potential failure of the master by entering a role transition state and trying to become the master. It should be noted that the health related actions of working as a master in Blocks and and the health related actions of working as a slave in Blocks and may be incorporated into a health maintenance algorithm common to and executable by the computing devices of the load balancer. Thus method allows system to react to computing devices malfunctioning or not responding allows for new computing devices to be added to the system and provides a method to start the system .

Block is a start block where the load balancer may begin in the state of initializing a role transition. It should be realized that each of the computing devices that are part of the system may execute load balancer so that many copies of load balancer may be executing simultaneously on different computing devices and but that each of the load balancers may be in independent and potentially different states.

At Block the load balancer will try to become the master . In one non limiting case the load balancer will attempt to become the master by attempting to insert a row with master code such as a constant value in master table and the network ID of the computing device executing the respective load balancer . In this case master code is a primary key of the database so that only one of the load balancers can succeed in writing to the master table . It should be noted that using the master table and master code having a constant value for a primary key of the master table is only one way that a database table can be used to manage the shared resource of the identity of the master . Other ways are discussed below.

At Block the load balancer reads the master table to read the network ID of the master . In one aspect this may be the IP address of the master .

At Block load balancer compares the network ID of the computing device executing load balancer with the network ID of the master . If the network IDs are the same then load balancer was successful at becoming the master so load balancer enters into the master state Block . If the network IDs are not the same then load balancer did not become the master and further actions can occur before transitioning to a slave state.

At Block load balancer tries to connect to the master using the network ID read from the master table .

At Block load balancer determines if the connection to the master was successful. In one aspect the load balancer determines if the connection to the master was successful based on a predetermined wait time.

If the connection to the master was not successful then at Block the load balancer will attempt to delete the master from the master table using master code and the network ID of the master just read from the master table . In one aspect load balancer attempts to delete the master because the load balancer assumes that if the master is not reachable then the master is not functioning properly.

At Block if the connection to the master is successful in Block then load balancer works as a slave . In general work as a slave comprises accepting and executing commands from the master and then returning the results to the master or a returning a reference to where the results are stored such as in a database. In some aspects accepting commands and returning results of executing the commands is done with communication messages over TCP IP.

At Block the load balancer working as a slave sends communication message comprising a heartbeat to the master using the network ID of the master read from the master table . In some aspects the load balancer of the master may build a slave ID table based on the received heartbeats from the slaves.

At Block the load balancer working as a slave determines if communication message comprising an acknowledgement was received from the master . If an acknowledgement is not received from the master then the load balancer acting as a slave assumes that the master is not functioning properly and goes to Block to try and delete the master . If an acknowledgement is received from the master then the load balancer acting as a slave goes back to Block . In one aspect the load balancer uses a predetermined time to wait for an acknowledgement until determining that the master is not reachable and assuming that the master is not functioning properly.

Returning to Block when the load balancer determines that it is the master the load balancer proceeds to work as the master in Block . In general working as the master includes the tasks related to maintaining the health of the system sending commands for the slaves to execute receiving the results of the slaves executing the commands checking if all the commands in a group of sub commands have been executed and determining if each of the slaves is functioning properly.

At Block the load balancer sends a communication message comprising an acknowledgement in response to each heartbeat received from a slave . Further the load balancer sends a heartbeat to each of the slaves . In some aspects the heartbeat and the acknowledgement may be sent using TCP IP. The master may maintain a list of the network IDs of the slaves such as a slave ID table and update the list based on the received heartbeats from the slaves .

At Block the load balancer determines whether or not each of the slaves has sent an acknowledgement to the heartbeat message. The load balancer may make this determination based on the waiting a predetermined amount of time for an acknowledgement from each slave .

At Block the load balancer redistributes the commands assigned to each of the slaves that was determined not to be functioning properly based on not being reachable. In some aspects the load balancer may determine whether the slave is functioning properly based on performance measures of the slave or some other predetermined metric. The load balancer then returns to Block .

Thus the load balancer is operable to maintain the health of the system by enabling each of the computing devices to become either a slave or a master and by regularly determining whether each of the slaves and the master are functioning properly.

Additionally referring to distribution service module may be stored in and executed from a memory of a computing device . Distribution service module may comprise one or any combination of hardware software firmware data and executable instructions operable to provide respective computing devices with the ability to distribute the commands which may be a list of sub commands to respective user command executor of slaves and or to user command executor of the master and then to combine the executed commands and in some aspects return a result responsive to queue input module . Further distribution service module enables the computing devices to redistribute commands that were distributed to slaves that stopped functioning properly. Further distribution service module enables queue input module to add commands for execution on the system . In some aspects distribution service module maintains horizontal as well as vertical load balancing for the system by determining which computing device to distribute the command to. Horizontal balancing refers to balancing the commands across the slaves and or the master . Vertical balancing refers to balancing how much of a load a single computing device has been assigned. In one non limiting case for example distribution service module communicates with the slaves and receives utilization from the slaves indicative of the load of the slaves . The distribution service module will then determine which of the slaves to distribute a command to based on the received utilization. In addition or alternatively the distribution service module may base distribution determinations based on other information received from the slaves e.g. the maximum number of processes each of the slaves can handle. In some aspects the distribution service may distribute a command to the master .

In some aspects distribution service module may maintain the status of the commands by using database . In one non limiting example referring to and two tables and of the database may be used. In some aspects distribution service module regularly updates sub command index table so that if the master malfunctions then a new master can use the sub command index table to continue the distribution of the commands without having lost the work completed. Additionally distribution service module may use command index table to keep track of the distribution of the processing of each command .

Thus by distribution service module using a database to maintain the commands and by regularly updating sub command index table and command index table then if the master stops functioning properly a new master may continue to distribute the commands without losing the work of the slaves and thereby contributing to a system for a zero point of failure load balancer.

Further in one non limiting case distribution service module may use communications message to distribute the commands to the slaves . Further the slaves may use communications message to return the results to the master .

Additionally referring to database service module may be stored in and executed from memory . Database service module may comprise one or any combination of hardware software firmware data and executable instructions operable to provide respective computing devices with the ability to read and write to the database . In some aspects database service module may use application program interface for a database management system such as ORACLE to provide a convenient means for the computing device to read and write to the database . Thus database service enables computing device to read and write rows or tuples to the tables of the database .

Additionally referring to user command executor may be stored in and executed from a memory of a respective computing device . User command executor may comprise one or any combination of hardware software firmware data and executable instructions operable to provide respective computing devices with the ability to execute commands . In some aspects user command executor may fork a thread to execute the command . In other aspects user command executor may be an application program that can execute the commands directly. In general user command executor enables the computing device to execute any command on the computing device and further may provide the functionality to communication with remote devices such as communication device . In general user command executor takes and executes a command and then sends the result to the master over the communication network . In the alternative or in addition the user command executor may store the result in some form of memory or storage in the database and or in on the slave and or the master . Thus user command executor enables computing device to execute commands.

Referring to additionally and or in the alternative load balancer may enable the functionality of the system using threads of an operating system. Note that for convenience the functionality of the threads are explained without linking the functionality to a sub module of load balancer . In one non limiting example the threads created on a computing device for the master may comprise a master thread whose tasks include creating a database handle thread running a TCP IP server on a user defined port number for communicating with the slaves and creating a separate slave handle thread for each slave that communicates with the master . The tasks of the database handle thread include reading and writing the database tables and . The tasks of the slave handle thread include sending a message to the slave to insure the slave is still functioning sending the commands to the slaves and receiving the result of the slaves executing commands . The threads created on a computing device for the slave may comprise a slave thread whose tasks include making TCP IP connection with the master sending information regarding performance to the master e.g. the maximum number of simultaneous processes that can be run on the slave sending heartbeats to the master receiving heartbeats from the master and sending and receiving acknowledgments to and from the master . The slave and master may comprise a fork next process thread whose tasks include executing commands received from the master . Thus the functionality of the master and the slave may be enabled using a threaded operating system.

Additionally referring back to communications network may comprise any data and or voice communications network. For example communications network may comprise all or some portion of any one or any combination of a wired or wireless telephone network a terrestrial telephone network a satellite telephone network an infrared network such as an Infrared Data Association IrDA based network a short range wireless network a Bluetooth technology network a ZigBee protocol network an ultra wide band UWB protocol network a home radio frequency HomeRF network a shared wireless access protocol SWAP network a wideband network such as a wireless Ethernet compatibility alliance WECA network a wireless fidelity alliance Wi Fi Alliance network and a 802.xx network a packet data network a data network an Internet Protocol IP Multimedia Subsystem IMS network a public switched telephone network a public heterogeneous communications network such as the Internet a private communications network a multicast network such as a Forward Link Only FLO network including the MediaFLO System available from Qualcomm Inc. of San Diego Calif. a digital video broadcasting DVB network such as DVB S for satellite DVB C for cable DVB T for terrestrial television DVB H for terrestrial television for handhelds and a land mobile radio network.

Further examples of telephone networks that may be included in some aspects of communications network include at least a portion of one or any combination of analog and digital networks technologies such as code division multiple access CDMA wideband code division multiple access WCDMA universal mobile telecommunications system UMTS advanced mobile phone service AMPS time division multiple access TDMA frequency division multiple access FDMA orthogonal frequency division multiple access OFDMA global system for mobile communications GSM single carrier 1X radio transmission technology RTT evolution data only EV DO technology general packet radio service GPRS enhanced data GSM environment EDGE high speed downlink data packet access HSPDA analog and digital satellite systems and any other technologies protocols that may be used in at least one of a wireless communications network and a data communications network.

Referring to in operation one non limiting case of a method for zero point of failure load balancer system at a slave device comprises determining if a master is functioning Block . For example in one non limiting case referring to slave may send a communication message to the master and wait for an acknowledgement from the master . The slave may base the determination of whether the master is functioning based on a predetermined time that has elapsed since the slave sent the communication message to the master or in other aspects the slave may base the determination on some performance measure of the master .

The method may further include attempting to become the master by using a database for managing communication with at least one other slave if the master is not functioning Block . For example in one non limiting case referring to and slave may write to a master table . The slave may implement some variant of Dijkstra s algorithm for implementing a semaphore or in the alternative the slave may use a single row or tuple in the master table with each slave attempting to set the row with the same constant value for a field that is also the primary key to the master table thus permitting only one of the slaves to write the row in the master table and thus becoming the new master .

Optionally the method may further include receiving at least one command to execute and sending the results of executing the command to the master. Referring to a slave may receive a command to execute and then execute the command and then send the results back to the master . In some aspects the slave may write the results of the execution to the database and send the master an indication that the execution is completed. The slave may communicate with the master using a communication message which in some aspects may be sent using TCP IP.

Optionally the method may further include receiving a message from the master and sending an acknowledgement to the master Block . In one non limiting case for example the slave may receive a communication message from the master requesting that the slave acknowledge the communication message from the master . The master and slave may communicate over TCP IP using a local area network LAN .

Referring to in operation one non limiting case of a method for zero point of failure load balancer system at a master device comprises assigning each of the commands not executed by the master to one of a plurality of slaves Block . For example in one non limiting case referring to the master may assign the commands to the slaves with a communication message and write to the sub command index table both the commands and the slave assigned to the commands .

The method may further include storing the commands and a corresponding assignment in a database wherein each assignment comprises an identification of the slave or master assigned to the command Block . For example in one non limiting case referring to and two tables and of the database may be used to maintain the status of the commands .

The method may further include determining if each of the plurality of slaves is functioning Block . For example in one non limiting case referring to the master may send a communication message to each of the slaves Block of and if the slave does not return a communication message in a predetermined amount of time then the master will assume that the slave is not functioning.

The method may further include assigning each of the commands assigned to the slaves to at least one of the plurality of slaves if the slave is not functioning Block . For example in one non limiting case referring to master may reassign the commands to other slaves Block of . The master may examine the sub command index table and for each command assigned to the slave that is not functioning and or unreachable the master may reassign the command to another slave .

The various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

Further the steps and or actions of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. Further in some aspects the processor and the storage medium may reside in an ASIC. Additionally the ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal. Further in some aspects at least one processor may comprise one or more modules operable to cause a computer to perform the steps and or actions of any method or algorithm described herein. Additionally in some aspects the steps and or actions of a method or algorithm may reside as one or any combination or set of codes or instructions on a machine readable medium and or computer readable medium which may be incorporated into a computer program product.

While the foregoing disclosure discusses illustrative aspects and or aspects it should be noted that various changes and modifications could be made herein without departing from the scope of the described aspects and or aspects as defined by the appended claims. Furthermore although elements of the described aspects and or aspects may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated. Additionally all or a portion of any aspect and or aspect may be utilized with all or a portion of any other aspect and or aspect unless stated otherwise.

