---

title: Method and apparatus to automate configuration of network entities
abstract: A method and apparatus for automating the configuration of network entities with a network management system. More particularly, a graphical user interface incorporates a template to allow administrators to configure attributes of network entities. The graphical user interface and template reduce the number of blocks required to configure network entities and also minimize user errors. The graphical user interface also allows an administrator to add and manage templates for future use. The method and apparatus are also for monitoring the progress of configuring network entities and generating an operation log.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595625&OS=08595625&RS=08595625
owner: Tellabs San Jose, Inc.
number: 08595625
owner_city: Naperville
owner_country: US
publication_date: 20071009
---
Example aspects of the present invention generally relate to a method and apparatus for configuring network entities. More particularly example aspects of the present invention relate to using a graphical user interface incorporating a template to automate the configuration of network entities with a network management system and a template handler that implements the business logic.

One or more network management systems may reside in between networks or on any given network. Network management systems are a combination of hardware and software components used to monitor control and configure network participants. Each network participant communicates with the network using a network entity called a network interface. Hereinafter network participants will be referred to as network elements.

Network elements can reside within a network or across several different networks and can include but are not limited to routers access servers switches bridges hubs computer hosts and printers. Network elements collect and store information available to network management systems using agents.

An agent is a network management software module that resides in a network element and has local knowledge of management information. The agent translates the local management information into a form that is compatible with a network management system so that the network management system may use the network element s local information. The agent can also receive management information such as configuration requests from the network management system.

Network entities can constitute the network elements themselves or components of network elements such as network cards ports channels or interfaces. It is often necessary in industries such as the telecommunications industry to configure various network entities for different protocols to accommodate changes in a network. For example it might be necessary to configure network entities for different multi service interfaces such as IP MPLS PPP POS HDLC ATM EoS X.86 GFP and TDM. However making such configuration changes is often time consuming and error prone due to the large number of network entities on a given network.

Network entities are traditionally configured individually by an administrator with a command line interface on the network elements or with a craft terminal provided by a network management system. This manual process can be error prone due to the large number of entries required at the command line interface for each network entity. The process of configuring each network entity individually is also time consuming especially when there are a large number of network entities. Many of these network entities often require similar configurations.

Network entities can also be configured by writing and executing scripts. Scripts are written by an administrator to make configuration changes and are interpreted by a computer program one command at a time. Administrators often repetitively copy paste and execute scripts for configuring similar network entities. Like the manual process of configuring network entities individually at a command line terminal scripting is also time consuming and error prone. The scripting approach requires time to write and execute each script and also requires administrators to check the configuration of the network entity after a script is executed.

An example embodiment of the present invention addresses the concerns above and presents a method and apparatus for automating the configuration of network entities. More particularly an example embodiment of the present invention uses a graphical user interface incorporating a graphical template to reduce the number of blocks required to configure network entities and to minimize administrator errors. The graphical template has administrator modifiable areas corresponding to template attributes. The template attributes are extracted by a template handler that sends messages to agents of network elements on the network which configure attributes of the network entities to match the extracted template attributes.

In a further example aspect of the present invention the graphical user interface includes a graphical template management menu facilitating the addition and management of graphical templates. The graphical template management menu allows an administrator to add a new graphical template by selecting a template type corresponding to network entities to be configured. The graphical user interface then allows an administrator to modify the new graphical template and apply the graphical template to selected network entities.

The graphical template management menu also allows an administrator to copy and modify an existing template to create a new template. New templates can then be saved and managed by the administrator to reduce time in making similar configurations in the future.

In another example aspect of the present invention extracted template attributes are checked so that only a valid configuration is applied to network entities. This feature aids in minimizing user errors.

In yet another example aspect of the present invention the graphical user interface displays a graphical progress dialog for monitoring the application of the extracted template attributes to the network entities based on messages sent by the template handler and confirmations received by the template handler. In addition the network management system generates an operation log based on the messages sent by the template handler and confirmations received by the template handler. The operation log can then help troubleshoot possible problems that develop in the network.

The template handler implements the business logic by processing and displaying templates and performing operations such as template creation deletion and modification of templates. Further when processing the templates the template handler monitors an apply operation for the application of existing templates or new templates created by the administrator. The template handler communicates the progress of the template application to the graphical user interface as described above.

Additional advantages and features of various example embodiments of the present invention will become apparent to those skilled in the art upon an examination of the following detailed description of example embodiments.

Traditionally various types of interconnecting mechanisms may be employed for interconnecting the above components such as for example optical fibers wires cables switches wireless interfaces routers modems and or other types of communication equipment as can be readily appreciated by one skilled in the art although for brevity all such mechanisms are not explicitly identified in .

As part of the core of the network services system the IP MPLS Backbone provides a path for the exchange of information between different networks such as core networks and metropolitan networks IP Metro and MPLS Metro . The IP MPLS Backbone can be used to carry many different kinds of traffic including for example IP packets native Asynchronous Transfer Mode ATM SONET and Ethernet frames. Both of the multi service routers and direct the path of the traffic between networks such as and and the IP MPLS Backbone . The multi service routers and support many kinds of traffic including for example business class IP Frame Relay ATM Ethernet and Time Division Multiplexing TDM Private Line Services.

According to the illustrated example embodiment network is the Public Switch Telephone Network PSTN that is a network of public circuit switched telephone networks the network operates in accordance with ATM technology and or Frame Relay technology and the network represents the Internet adhering to TCP IP protocols. Further the IP Metro and the MPLS Metro networks are constructed of multi service routers and and and respectively that can operate at the Provider s Edge or as an aggregation device that feeds into the edge of the IP MPLS Backbone . The multi service routers and can aggregate many different services such as for example ATM Ethernet Frame Relay and TDM services and perform interworking services among these same services either through the IP MPLS Backbone or in native form. It should be made clear however that an example embodiment of the present invention should not be construed as being limited for use only with one or more particular types of networks.

As illustrated in the example embodiment the Ethernet Access Ring consists of multiple Ethernet access nodes such as and that enable delivery of simultaneous telephony business and entertainment video broadband data and Internet services using Ethernet over fiber optics and copper wire to customer premises such as for example customer premises and . The Gigabit Ethernet provides similar services as the Ethernet Access Ring however the Gigabit Ethernet transmits Ethernet frames at a rate of one gigabit per second.

The network services system when managed by the network management system enables many services such as for example the customer premise representing Point to Point Ethernet the customer premise that functions as Multipoint Ethernet the customer premise allowing internet access and customer premise representing Off net TDM Access and TDM over Ethernet as provided by for example the Access Network . Other services enabled by the network services system are for example Transparent LAN Service TLS Virtual Private LAN Service VPLS Internet Protocol Virtual Private Networks IPVPNs Voice over Internet Protocol VoIP and Video.

Network management system is a computer or farm of computers connected to one or more network elements shown in that facilitate the transmission storage and reception of information between different points such as between networks and and metropolitan networks and . From a hardware standpoint a network management system typically includes one or more clients and servers shown in for performing the arithmetic and or logical operations required for program execution and disk storage media such as one or more disk drives for program and data storage and a random access memory for temporary data and program instruction storage. From a software standpoint network management system typically includes client and server software residents on disk storage media which when executed directs the network management system in performing transmission reception and storage functions. The disk storage media is a computer readable medium such as any of a flexible disk floppy disk a hard disk an optical disk a magneto optical disk a compact disc CD a digital versatile disc DVD a read only memory ROM random access memory RAM erasable programmable read only memory EPROM and the like.

The server software runs on an operating system stored on the disk storage media such as for example UNIX or Windows NT. As is well known in the art server computers can run different operating systems and can contain different types of server software each type devoted to a different function such as handling and managing data information from a particular source or transforming data information from one format into another format. It should thus be clear that the teaching of an example embodiment of this invention is not to be construed as being limited for use with any particular type of server computer and that any other suitable type of device for facilitating the exchange and storage of information may be employed instead.

The network elements A B and C may reside within the same network as the network management system or may reside in a different network than the network management system . The various network elements A B and C may also reside in different networks from each other such as networks IP Metro and MPLS Metro .

The network management system may reside outside of the networks and as in or may also reside within a network such as networks and . Each network may also accommodate multiple network management systems.

The example of network management system in includes a client a server and a database . A network management system however could also comprise multiple clients servers and databases.

The client includes a graphical user interface to communicate with an administrator and to allow the administrator to input network management information into the network management system . The client also includes several components such as a topology component a template handler component and a services component . The topology component processes and displays network topology such as network element creation or deletion. The template handler component processes and displays templates and performs operations such as template creation deletion and modification in accordance with an example embodiment of the present invention. The services component processes and displays network services such as circuit provisioning or label switched path LSP provisioning.

The server can include components such as a discovery component a managed objects model component a fault component and a configuration component . Each of these are described below.

The discovery component retrieves processes and stores inventory information about network entities . Network entities are components of network elements such as for example network cards ports channels or interfaces.

The managed objects model component synchs the attributes of the network entities in the cache with the attributes stored in the database . The attributes of the network entities are cached in the managed objects model component as managed objects.

The fault component receives and processes traps sent by SNMP agents that indicate changes at the network elements . The fault component translates the traps into alarms or events. The fault component also stores the event or alarm in the database if needed.

The configuration component services requests from the client to configure and provision network entities by constructing and submitting requests to the COMM layer .

The COMM layer submits the requests constructed by the configuration component as SNMP requests to the appropriate network element s SNMP agent . The COMM layer however could also communicate with network element agents using other protocols such as FTP or SFTP and the use of an example embodiment of the present invention is not limited to only using SNMP to communicate with network elements .

Each network element A B and C includes an SNMP agent . The SNMP agent is a network management software module that resides at a network element and has local knowledge of management information. The SNMP agent translates local management information into a form that is compatible for use by the network management system . The SNMP agent can also receive management information such as SNMP requests from the COMM layer .

The SNMP requests can include requests such as setting an attribute for a network entity or getting local management information from the network element . After performing the SNMP request the SNMP agent sends a response to the COMM layer . A typical response could include management information requested by the network management system or a confirmation that a network entity was successfully configured by an SNMP request .

A response indicating that a network entity was successfully configured is handled by the configuration module after the response is received by the COMM layer . The message broker then sends a confirmation to the component included in the client that sent the message . In this example the message broker would send a confirmation to the template handler that the network entity was successfully configured because the template handler sent the message .

The client communicates with the server through the request gateway RG layer message broker and indication broker . The communication protocol between the client and the server could be for example Java RMI.

The RG layer composes a list of application programming interfaces APIs for the client to retrieve data from the database . The client retrieves data using a get request to the RG layer and the RG layer returns a result to the client .

The message broker processes client messages for such functions as adding deleting or modifying network entities . The message broker also sends confirmations to whichever of the components the topology component template handler or services component that sends the message confirming that a particular client message has been successfully performed.

The indication broker forwards indications to the client that may include indications of changes at the network elements . Network changes are indicated from network elements with traps . When the fault component receives a trap it determines whether the trap corresponds to an event or an alarm and updates the database accordingly. Once the database has been updated an indication is sent to a subscribing client by the indication broker .

The client is connected to a display unit for displaying the graphical user interface . The client is also connected to a keyboard and a mouse to allow the administrator to input information to the client .

A flowchart illustrating an apply operation of an example embodiment of the present invention is shown in B and C. The apply operation can be initiated by an administrator in block S for example by the administrator selecting an apply button in the graphical user interface with the mouse .

After the administrator initiates the apply operation the template handler checks in block S whether an apply operation for the template being applied is already in progress. If the template is already in progress the administrator is notified that the template is in progress at block S and the apply operation ends at block S.

If the template is not already in progress the template handler updates the status of the template to In Progress in block S. This status can be shown in various template status fields as further discussed in the following example embodiments of a graphical user interface. The status fields could either show for example In Progress or Ready in accordance with block S.

After block S the template handler proceeds to block S to display a progress dialog for monitoring the apply operation. The progress dialog can display for example notification of stages throughout the apply operation and the success or failure of sent configuration requests.

After displaying the progress dialog the template handler then progresses in block S to a preparation stage for the apply operation. The template handler in block S first compiles a list of entities selected by the administrator in the graphical user interface .

If the list of entities to apply is empty the template handler proceeds to block S to start the apply operation stage. If the list of entities to apply is not empty the template handler proceeds to block S and retrieves the attributes of the first network entity on the list of entities to apply from the database via the RG layer . The template handler then compares the attributes of the first network entity with the template attributes configured in the graphical user interface . This comparison can check the configuration entered by the administrator to ensure that the first network entity can accept the template attributes.

If the template handler determines in block S that the template attributes are permissible based upon the comparison in block S the template handler proceeds to block S. If the template attributes are not permissible the template handler skips the first selected entity and proceeds to validate the next selected network entity in block S if the template handler determines in block S that there are more selected entities in the list of entities to apply.

Once a template is determined to be permissible for application to a network entity the template handler in block S constructs a request for transmission and sends it to the message broker as a message . The request in this example would include all of the template attributes for application to a selected network entity .

When the template handler has either constructed a request or has determined that the template is not permissible for each selected entity on the list of entities to apply the template handler proceeds to the start apply operation stage in block S.

In block S the template handler collects the requests constructed in block S into a request list and proceeds to block S. If the request list is determined to be empty in block S the template handler proceeds to block S.

If the request list is not empty the template handler in block S sends the first request as a message to the message broker and marks the request as sent. The template handler then proceeds to block S and updates an operation log and may also update the progress dialog displayed in block S.

After updating the status of the sent request the template handler in block S determines whether there are more requests to send from the request list. If there are more requests to send the template handler returns to block S. If there are no more requests left the template handler proceeds to block S to wait for a confirmation received from the message broker corresponding to a sent request.

When a confirmation corresponding to a sent request is received in block S the template handler proceeds to block S to mark the request confirmed. In block S the template handler then updates the operation log and may also update the progress dialog displayed in block S.

The template handler then proceeds to block S and determines whether there are confirmations corresponding to sent requests that are still left to be received. If so the template handler returns to block S to wait for the remaining confirmations .

If there are no more confirmations left to be received the template handler updates the template status to Ready in block S. The template handler then proceeds to block S ending the apply operation. After the apply operation ends the administrator may then copy or save the operation log.

The following process corresponds to creating a template in block S of . To create a new template from the template summary an administrator first brings up a template management menu by right clicking with the mouse in the template summary . The administrator then selects add from the template management menu to create a new template from a list of saved template types . Each template type corresponds to a type of network entity and may include default settings for a particular type of network entity . The list of template types in the present example embodiment is not exhaustive and can be expanded to accommodate additional types of network entities .

The template types also correspond to template objects stored in the database . The template objects stored in the database are templates created by the administrator.

When the administrator selects a template type to create a template the template handler sends an add create message to the message broker . The message broker then forwards the add create message to the configuration component on the server to create the template object and store the template object in the database . The configuration component then sends the template object back to the client through the message broker as part of the confirmation so that the template handler can form and display a new template of the selected template type .

The template management menu also allows an administrator to configure a saved template by selecting a template row and selecting modify or by double clicking with the mouse on a template row . When a template row is selected or modified the template handler sends a get request to the RG layer in order to retrieve a saved template object corresponding to the entity row selected by the administrator. The server then retrieves the associated saved template object from the database and sends the template object as a result to the client so that the template handler can form and display the saved template. This saved template is already populated with saved template attributes.

An administrator may also delete a given template row from the template summary by selecting the template row and then selecting delete on the template management menu . The template handler will then remove the template row from the template summary . The template handler may also construct a message that is sent to the message broker instructing the server to delete a saved template object from the database . After the saved template object has been deleted from the database the message broker then sends a confirmation to the client and the template handler removes the corresponding template row from the template summary .

To copy a template an administrator selects a template row and selects copy on the template management menu . The template handler will then retrieve the corresponding saved template object from the database via the RG layer and then form and display a template already populated with the saved template content of the selected template. The copied template however will have an empty name field description field and status field as shown in . The administrator may then supply a name and description for the copied template using the keyboard .

Table 1 lists example template object interfaces that can be implemented with JAVA software code in network management system . The template handler can use template object interfaces such as those listed in Table 1 to add delete retrieve or modify template objects in the messages or get requests described above.

The example of template in allows an administrator to configure template attributes . The following description corresponds to the template configuration blocks S S S and S in .

In an administrator enters a template name in the name field and a template description in the description field . The administrator also enters other general template content such as whether access to the template is restricted in the access mode field . Other general template content also includes an owner field and a status field . The owner field indicates the administrator who created the template and the status field indicates whether the template is in the process of being applied to network entities . The administrator also selects an apply mode that indicates whether a particular template should replace attributes or append to attributes already configured at network entities . The apply mode varies with different template types .

The template also includes a detail panel that allows the administrator to configure template attributes . After setting template attributes in the detail panel the administrator can save the configured template to the database by selecting the save button . This corresponds to saving a template in block S of .

After the administrator selects the save button the template handler constructs a template object from the template content. The template object is then sent as a message to the message broker . The server then saves the template object in the database and returns a confirmation via the message broker that the template object was saved. The template handler then adds a template row corresponding to the saved template.

Template items correspond to template content such as template attributes that are stored as part of a template object. When modifying only part of a previously saved template the template handler constructs template items corresponding to the modified template content rather than constructing an entire template object as described above. The template items are then sent as a message to the message broker so that the server can overwrite the modified template items in the database .

After a template is saved the detail panel can be refreshed with template items from the saved template object stored in the database by selecting the refresh button . The template handler refreshes template content by sending a get request to the RG layer and the server then retrieves the associated saved template items from the database . The RG layer then sends the template items to the client and the template handler then replaces displayed template content with template content from the retrieved template items. However not all template content may be refreshed. Some template content such as a list of selected entities as discussed in reference to the entity rows of may not be refreshed.

The template also includes a modification history field that indicates when the template was last modified and which administrator last modified the template. The modification history field is also shown in as field .

Table 2 lists example interfaces for template items that can be implemented with JAVA software code in network management system . The template handler can use template item interfaces such as those listed in Table 2 to add delete retrieve or modify template items in the messages or get requests described above.

The administrator selects the add button to pick a network entity for application. A select entity dialog as shown in is brought up by the template handler which retrieves a list of network entities from the database via the RG layer . The list of network entities is filtered based on the template type selected by the administrator. The administrator then selects network entities for application of the template attributes from an entity list in the select entity dialog . After the administrator selects network entities from the entity list the administrator selects the OK button and the select panel is populated with the entity rows corresponding to network entities selected from the entity list . The administrator can continue to add entity rows to the select panel in the same fashion or may delete an entity row by selecting the entity row and selecting the delete button .

The entity rows comprise the list of entities to apply referred to in block S of . The list of entities to apply in this example embodiment however would not include entity rows with an apply status of Successful. 

The apply status indicates the success of previous apply operations of the template to particular network entities . Once a template has been modified the apply status of the entity rows are changed to None since the new modifications have not been applied. Similarly when a new entity row is added to the select panel of an existing template its apply status is also None. After an apply operation as discussed in reference to only network entities corresponding to entity rows with apply status of None Partial or Failed will be affected by a subsequent application using the same unmodified template. During the apply operation the apply status can be updated with each confirmation as discussed in reference to block S of . The select panel also includes an entity status summary that indicates the overall apply status for all of the entity rows .

Once the select panel is populated with at least one entity row the administrator may begin the apply operation as shown in detail in by selecting the apply button . The following description corresponds to application blocks S and S and application monitoring blocks S S and S of .

After the administrator selects the apply button the progress dialog is brought up by the template handler . This example of a progress dialog includes an operation log and a progress bar .

The top half of the operation log displays general template information about the template being applied such as its name type owner apply mode and description. The top half of the operation log also displays configuration information indicating the template attributes being applied to network entities during the apply operation.

The bottom half of the operation log displays status information including request status and configuration status of the apply operation.

During the apply operation the administrator may select the cancel button in the progress dialog to stop the application of template attributes to the selected network entities . This block corresponds to aborting the apply operation in block S of .

If the administrator does not select the cancel button the apply operation continues until it reaches block S in . The graphical user interface then asks the administrator if they want to copy or save the operation log . After saving the operation log for example as a text file at the client the template handler returns the graphical user interface to the template summary .

Communication interface module controls client by processing interface commands. Interface commands may be for example commands to send data commands to communicatively couple with another device or any other suitable type of interface command.

Storage module stores and retrieves data e.g. attributes of network entities events or alarms and template objects in response to requests from processing module .

In the case of at least the template handler processing module performs the procedures as described above in connection with B and C for the template handler . Processing module checks whether an apply operation for the template being applied is already in progress. If a template in not already in progress processing module updates the template status to in progress. After updating the template status processing module displays a progress dialog for monitoring the apply operation. After displaying the progress dialog the processing module prepares for the apply operation. The processing module starts by compiling a list of entities received from the communication interface module . If the list of entities to apply is empty the processing module starts the apply operation as described above in .

If the list of entities to apply is not empty the processing module retrieves the first or next entity and validates the entity against template content. If the processing module finds that the entity is not valid the processing module proceeds to check the validity of the next entity. Once an entity is found to be valid the processing module constructs a request for transmission and sends it to communication interface module as described above in .

Once the processing module has either constructed a request or has determined that the each selected entity on the list of entities is not valid the processing module collects the requests constructed into a request list. If the request list is not empty the processing module retrieves and sends the first request and marks the request sent. The processing module then updates an operation log and the progress dialog. After updating the status of the sent request the processing module determines whether there are more requests to send. If there are no more requests left the processing module waits for a confirmation from the communication interface module corresponding to the sent request. When a confirmation is received the processing module marks the request confirmed and updates the operation log and progress dialog. If there are no more confirmations to be received processing module ends the operation as described above in .

In the case of at least the network management system processing module follows direction from an administrator and performs the procedures as described above in connection with for the network management system. At the direction of an administrator the processing module creates a template and either revises the template or does not revise the template. If the administrator chooses to revise the template the processing module modifies the template content and selects entities to apply. If the administrator then chooses to save the template the processing module starts the apply operation. The administrator may choose to cancel the apply operation and if so the processing module aborts the apply operation saves the operation log and exits. If the administrator does not cancel the operation the processing module views the operation output and determines whether the apply operation is successful. If the apply operation was successful the processing module saves the operation log and exits as described above in .

While various example embodiments of the present invention have been described above it should be understood that the embodiments have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and detail can be made therein without departing from the spirit and scope of the present invention. Thus the present invention should not be limited by the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

In addition it should be understood that the figures illustrated in the attachments which highlight the functionality and advantages of the present invention are presented for example purposes only. The architecture of the present invention is sufficiently flexible and configurable such that it may be utilized and navigated in ways other than that shown in the accompanying figures.

Furthermore the purpose of the foregoing Abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the present invention in any way. It is also to be understood that the steps and processes recited in the claims need not be performed in the order presented.

