---

title: Apparatus, systems and methods for transformation services
abstract: A web services hub receives a request from a data source system, transforms the request, and transmits the transformed request to an external system. A secure service router is coupled to the web services hub. The secure service router authenticates the data source system and locates a transformation service to transform the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949788&OS=07949788&RS=07949788
owner: The PNC Financial Services Group, Inc.
number: 07949788
owner_city: Pittsburgh
owner_country: US
publication_date: 20070518
---
Data communications between computer applications or networks and more particularly secure routing and data transformation over one or more communications networks.

Corporate reliance on technology has increasingly become more complex and pervasive. The latest advances in information technology have resulted in computer applications that are much faster and more efficient. However the proliferation of different computer systems and applications that use different communications protocols security mechanisms languages data structures and platforms has also made the information technology infrastructure of the typical business enterprise more complex. Different business processes within a typical corporate enterprise may use different computer applications or networks. In such a scenario each computer application or network is secured and optimized for a particular business process rather than for the enterprise as a whole. For example a bank may have one computer application for securely accepting new customer account information and another to verify the credit worthiness of customers using sensitive data such as their social security numbers. Accordingly the credit verification computer application may implement a more stringent data security standard than the computer application accepting new customer account information. In such a situation source computer applications have to employ a compatible encryption standard or authentication mechanism such as for example the OASIS Web Services Security WSS WS Security v1.1 standard to secure messages before sending them to the target credit verification computer application.

In other situations a source computer application or network within a corporate enterprise for example a bank may need to share confidential customer information with external networks of partners or other organizations. As a result in addition to the risk of data loss or corruption and exposure of confidential internal business transactions there is a risk of exposing sensitive customer data to third parties. Thus a need exists for an intermediary transformation service to assign appropriate security controls to messages from source computer applications or networks prior to their transmission over a communications network.

In one embodiment a web services hub receives a request from a data source system transforms the request and transmits the transformed request to an external system. A secure service router coupled to the web services hub authenticates the data source system and locates a transformation service to transform the request.

This description should be read in conjunction with the attached drawings. In this description like numbers refer to similar elements within various embodiments. The skilled artisan will readily appreciate that the embodiments described herein are merely exemplary and that variations can be made without departing from the scope of the described embodiments.

Embodiments of an apparatus methods and systems for transforming and securely routing messages over one or more communication networks are described. One embodiment relates to an intermediary web services hub that may be configured to enable secure communications between a plurality of data sources such as databases computer applications and or internal or external networks for example intranets local area networks LANs or wide area networks WANs . In such an embodiment the intermediary web services hub may be implemented as a general computer system comprising computer applications implementing business processes and services logging and process flow control modules service routers processing units memory units and I O components.

Another embodiment relates to a method of transforming securing and routing messages over one or more communication networks. In such an embodiment the method provides a module for processing messages from a plurality of data sources prior to their transmission over a communications network. Accordingly the module authenticates messages from data sources to ensure compliance with security standards and service level agreements SLAs . In various embodiments the transformed messages may be transmitted securely to an external target computer application or network. Accordingly additional security controls may be imposed on the messages without altering their form to prevent disclosure to third parties.

Various embodiments relate to the assignment of compliant security controls in the form of for example digital credentials to messages from one or more of a plurality of data sources attempting to connect with a secure network. Other embodiments of the intermediary web services hub may further authenticate data sources systems computer application or network sending messages or requests over an enterprise network.

In further detail business enterprise network generally may include a web services hub one or more data source systems one or more target internal or external web services networks a user registry server an application logging module and a service level monitor SLM . As shown web services hub links together several components of business enterprise network . In one embodiment web services hub may be provided to enable dynamic routing and transformation services for web based applications. In such an embodiment web services hub may support synchronous or asynchronous processing models. Alternatively web services hub may be implemented to provide mixed mode services by processing incoming requests or messages from data source systems to web services hub synchronously and responses from target internal or external web services asynchronously. Conversely web services hub may process incoming requests or messages from data source systems to web services hub asynchronously and responses from target internal or external web services synchronously. In another embodiment web services hub may also be extended to support technology types other than web based applications.

Data source systems may be based on various data types and or physical or logical locations. For example data source systems may include systems and applications from computer technologies providers such as Microsoft Oracle EMC Siebel PeopleSoft Apache or Netscape. Data source systems may also include systems using database products or standards such as DB2 MQ Series UDB XML or FTP files. Data source systems further may include files created or employed by applications such as Microsoft Outlook Word Excel or Access as well as files in standard formats such as ASCII CSV GIF TIF PNG or PDF. In various embodiments data source systems may be networks computer applications or systems at physical or logical locations that are external or internal to business enterprise network . In various embodiments data source systems may be centrally located within business enterprise network or at a remote physical address. Accordingly messages or requests supplied from data source systems may be in various formats that may or may not be compatible with one another.

In general target web services may be any of data sources described above. The difference in general nomenclature indicates whether a network computer application data system or web services network provides or receives data in the underlying data transformation process. In one embodiment target web service may be a secured intranet LAN or WAN such as for example U.S. Bank Elan.

User registry server may be implemented as an authorization module to review access and transmission rights of users or transactions interfacing with business enterprise network . In one embodiment user registry server may be implemented as an authentication and authorization module configured to verify the identity of users. In such an embodiment users may supply clear text usernames and passwords for authentication access and or transmission rights.

User registry server may be implemented as a lightweight directory access protocol LDAP server. In various embodiments user registry server may be implemented in another protocol such as for example FTP for updating and searching directories run over transmission control protocol internet protocol TCP IP . User registry server also may be implemented as a general computer system comprising processor cores servers and I O components. In various embodiments users may be generic computer systems data source systems or internal or external networks that may need to send messages or requests over business enterprise network . Accordingly user registry server may be configured to invoke various routines to authenticate data source systems and or verify access and transmission rights of various computer systems and internal or external networks. In various embodiments user register server also may support one or more authentication technologies such as encrypted passwords token based authentication and or identity assertion.

Application logging module may be included in business enterprise network to provide system administrators with detailed contextual information for application failures. This may be accomplished by capturing messages relayed from data source systems along with metadata and other system information and passing them to a logging framework encapsulated within application logging module . In one embodiment application logging module may be implemented in a logging utility such as JAVA based Apache Log4J. In another embodiment JAVA based logging utilities such as JAVA Logging application programming interface API or Jakarta Commons Logging may be employed independently or in conjunction with one another or with Apache Log4J in application logging module .

Other embodiments of application logging module may include .xml files to configure appenders and logger categories as defined by business enterprise network . All transactions and requests from data sources are recorded using unique identifiers for subsequent auditing. In one embodiment information regarding such transactions may include a globally unique identifier date and time of transaction or request and identifying information of an initiating user or computer system. In another embodiment the information recorded by application logging module also may include duration to millisecond precision of message or request related events. In such an embodiment duration times may include total time spent in business enterprise network and total time of relay from data source systems to destinations or target web services . In various embodiments support personal and system administrators also may enable logging of other diagnostic information such as message or request contents response contents and or developer level debugging and tracing information.

In other embodiments special identifiers such as for example correlation IDs are employed to track requests from data source systems . Subsequently correlation IDs are reported to a diagnostic feature of application logging module such as the nested diagnostics context NDC of the Log4J logging utility to allow the correlation ID associated with a current thread of execution to be included with every log message written by the thread.

Further in various embodiments application logging module may provide validation of system processes in addition to tracking system activity. This feature may enable system administrators of business enterprise network to perform troubleshooting customer support and or auditing services. Accordingly in such embodiments this information may be viewed only by internal support personnel.

Service level monitor may be included in business enterprise network to ensure compliance with service level agreement SLA objectives. In one embodiment service level monitor may be implemented using Apache Log4J. For example Netcool SLA Manager provided by IBM may be employed in business enterprise network to deliver realtime service modeling and reporting and allow system administrators and or service personnel to monitor the impact of IT performance on services and SLAs.

In various embodiments service level monitor may be further configured to apply additional service level rules based on a combination of preferences of system administrators and features of data source systems and target web services . For example service level monitor may fix a general response time and serve owner systems or computer applications of transactions taking longer than the general response time with a warning. In addition service level monitor may fix a maximum response time and serve owner systems or computer applications of transactions taking longer than the maximum response time with an error message. Alternatively service level monitor may review the number of repeated transactions in a time period and issue reminders warnings or errors to owner systems or computer applications.

In one embodiment process flow request response connection topology may be implemented by a web container and a transformation and or business logic module in data communication with an external system . As shown data source system A may send and receive messages to and from process flow request response connection topology through asynchronous communications channels or synchronous communications channels . Web container comprises asynchronous service routers in data communication with asynchronous communications channels synchronous service routers in data communication with synchronous communications channel and a secure service router . Transformation and or business logic module may include a request transformer a web transmitter and a response transformer .

Asynchronous communications channels and synchronous communications channels may be any data communications systems known to those skilled in the art such as high speed network connections buses packet driven digital interfaces and or other data communication mechanisms. In various embodiments process flow request response lifecycle may be configured to interface with data source system A either only asynchronously over asynchronous communications channels or synchronously over synchronous communications channels .

Generally web container may provide runtime environment through components that establish naming context and life cycle management. In various embodiments web container handles the lifecycle for JAVA servlets. As shown asynchronous service router and synchronous service router may be implemented in JAVA Servlet API. Asynchronous service router may be implemented in enterprise Javabean EJB message driven bean MDB API synchronous service router in stateful or stateless session EJB depending on the type of connection with client data source system A and secure service router in Plain Old JAVA Object POJO API. Those skilled in the art will readily recognize that asynchronous service routers synchronous service routers and secure service router may be implemented in a variety of other JAVA or non JAVA based technologies.

Asynchronous service routers may be employed in fire and forget or asynchronous mode to execute business services in process flow request response connection topology . In one embodiment asynchronous service router may be configured to locate and invoke business services capable of handling incoming requests or messages from data source system A . Asynchronous service router may identify a suitable business service handler by evaluating the source of the incoming message or request or the message or request type. In various embodiments a different asynchronous service router may be implemented as an asynchronous response handler to return a response to data source system A over asynchronous communications channel .

Synchronous service routers may be employed in call and wait or synchronous mode to execute business services in process flow request response connection topology . In one embodiment synchronous service routers may obtain a business service handler capable of handling an incoming request or message from data source system A by determining the source of the incoming message or request or the message or request type. As shown synchronous service routers may be further configured to return a response to data source system A over synchronous communication channel .

Secure service router may be implemented to interface with an authorization module such as a user registry to review access and transmission rights of data source system A . In one embodiment secure service router may be implemented as an authentication and authorization module configured to verify identity of data source system A . In such an embodiment data source system A may supply a clear text username and password for authentication access and transmission rights. Secure service router may be implemented in Java to communicate with a user registry using an LDAP protocol or a Java database connectivity JDBC protocol to provide authentication and authorization. In various embodiments secure service router may be implemented in another protocol such as for example FTP. In various embodiments user registry server may invoke routines to authenticate data source systems and or verify access and transmission rights of various computer systems and internal or external networks. In other embodiments user register server also may support one or more authentication technologies such as encrypted passwords token based authentication and or identity assertion.

In various embodiments transformation and or business logic module may provide business services implemented as transformation services. Accordingly transformation and or business logic module may be designed to process simple request and response transformation along with data transmission. In various embodiments transformation and or business logic module may be further configured to 1 package a request from data source system A in a format that external system may understand 2 execute or transmit the packaged request from data source system A to external system for processing and 3 when external system has completed processing and returned a response parse the response for data source system A . Accordingly transformation and or business logic module may be configured to provide developers with an established paradigm such as package execute parse PEP an easy to use solution that does not require business logic. As a result such a paradigm may be easily implemented to provide the desired transformation services. In other embodiments custom business service implementations may be defined to implement transformation and or business logic module .

In one embodiment transformation and or business logic module may be further configured to provide request or response transformation over extensible stylesheet language transformation XSLT . In various embodiments transformation and or business logic module may be configurable at various levels and even be overridden with custom code specifications. For example developers may provide custom processing logic to parse a request or response by providing their own request or response transformer in addition to request transformer and response transformer in transformation and or business logic module .

Request transformer may be provided in transformation and or business logic module to transform messages or requests from data source system A . As shown request transformer may be implemented by POJO programming. Those skilled in the art will readily recognize that request transformer also may be implemented in various other JAVA or non JAVA technologies.

Web transmitter may be provided in transformation and or business logic module to transmit transformed messages to external system . In one embodiment a default web services transmitter such as Apache Axis2 for core web services functionality and Apache Rampart plugin for WS security support may be employed to transmit secured messages to external system . In various embodiments custom implementations based on other technologies such as JDBC API data stores or data access objects DAO Objects stateless session beans enterprise EJB MDBs POJOs and or Spring services may be employed in transformation and or business logic module .

Response transformer may be provided in transformation and or business logic module to transform responses received from external system . As shown response transformer may be implemented by POJO programming. Those skilled in the art will readily recognize that response transformer also may be implemented in various other JAVA or non JAVA technologies.

In operation web container may receive a message or request from data source system A over asynchronous communications channel or synchronous communications channel . As described in further detail below in one embodiment the message or request may be transmitted over request models such as for example extensible markup language XML scripts over hypertext transfer protocol HTTP and secure hypertext transfer protocol HTTPS or simple object access protocol service oriented architecture protocol SOAP over HTTP and HTTPS. Web container may review the uniform resource locator URL of the message or request to establish the appropriate request router servlet. For example synchronous requests may employ a URL of the format http s eai sync . Asynchronous requests may employ a URL of the format http s eai async .

Based on the URL asynchronous service router or synchronous service router may forward the message or request to secure service router . Secure service router authenticates and authorizes data source system A based on metadata and other information contained in the message or request. In one embodiment asynchronous service router may return an HTTP status code to data source system A to acknowledge receipt of an asynchronously transmitted message or request by a handler such as for example a JAVA message service JMS provider. Secure service router may then forward the message or request to transformation and or business logic module .

In transformation and or business logic module an appropriate transformation service is invoked to process the message or request. In one embodiment request transformer may perform transformation of the message or request to adopt the security standard set by external system . In another embodiment request transformer may perform conversion from data source system A format to another format recognizable by external system . In various embodiments web transmitter may transmit the message or request unsigned to external system . In various embodiments the message or request may be signed and or encrypted employing a standard security protocol such as WS Security standard supported by Apache Rampart plugin for Axis2.

External system may send a response to transformation and or business logic module . In various embodiments the response may be forwarded to response transformer . In asynchronous routing systems the response is further submitted to a business service handler specified in the header or meta information parameter fields of the original message or request from data source system A . In synchronous routing systems the response is directly returned to data source system A .

Web services hub determines the message or request type based on the message or request header parameters e.g. by reviewing the message or request header parameters to establish an appropriate service router. Accordingly web services hub maps the message or request to the appropriate asynchronous service router or synchronous service router based on the message type. In one embodiment the message or request may be in the form of an XML script provided with a URL specifying the nature of the request. In such an embodiment an asynchronous request is mapped to asynchronous service router and a synchronous request is mapped to synchronous service router . The designated asynchronous service router or synchronous service router transmits the message or request to secure service router .

Secure service router verifies access and transmission rights of data source system A and external system . In various embodiments the request may be dispatched over asynchronous communication channel and or synchronous communication channel by employing a request model such as for example simple object access protocol service oriented architecture protocol SOAP over HTTP and HTTPS. In various embodiments IBM WebSphere MQ or IBM MQ series also may be employed to provide a request model for dispatching requests or messages to an appropriate business or transformation service in transformation and or business logic module .

In one embodiment implementing raw XML scripts over HTTP or HTTPS a request may be transmitted to an HTTP servlet employing the POST command. In such an embodiment the request may comprise an XML document in the body of the request and request meta information contained in HTTP headers.

TABLE 1 illustrates one embodiment of meta information that may be contained in HTTP headers of an exemplary data request from data source system A .

As shown in TABLE 1 the incoming message or request from data source system A may be in the form of an XML script comprising one or more HTTP header parameters such as USERNAME PASSWORD TOKEN TOKEN TYPE REPLY TO and or SOURCE. In various embodiments secure service router may employ an authorization authentication module to review access and transmission rights of data source system A . Accordingly data source system A may supply a username and password as required by the USERNAME and PASSWORD header parameters. In one embodiment secure service router may be further configured to verify authentication and authorization credentials on behalf of external system to ensure compliance with various network specific security protocols.

In other embodiments secure service router may support other authentication technologies such as encrypted passwords token based authentication using TOKEN and TOKEN TYPE header parameters and or identity assertion. As described above the username and password supplied by data source system A may be verified against an LDAP server.

In one embodiment secure service router may invoke additional authentication and authorization routines to verify access and transmission rights of data source system A using SOURCE header parameter. In such an embodiment secure service router may review SOURCE header parameter to determine the format of the incoming request from data source system A . Accordingly secure service router may then determine whether transformation is required before transmitting the request to external system .

Web services hub further verifies compliance of the message or request with one or more service level agreement SLA objectives. In one embodiment web services hub may be configured to apply service level rules based on a combination of preferences of system administrators features of data source system A and requirements of external system .

On receipt and or authentication of message or request secure service router or an appropriate asynchronous handler returns an acknowledgement or response status code such as HTTP to data source system A . In one embodiment if the message or request was transmitted asynchronously to web services hub a status or acknowledgement code is sent immediately to data source system A .

As shown transformation and or business logic module assigns an appropriate business services handler to the incoming message or request for transformation services. The transformation service is a business service implementation designed to provide simple message or request transformation. In one embodiment transformation and or business logic module also may perform transformation of the corresponding response to transmitted message or request from data source system A .

Transformation and or business logic module routes the transformed message or request to web transmitter . In various embodiments the transformed message may be encapsulated in a SOAP envelope and signed or encrypted using the WS Security standard. Accordingly Apache Rampart plug in for Axis2 may be employed to provide digital certification to the transmitted message or request.

Transformation and or business logic module receives a response from external system and routes the response to a response transformer . Response transformer may transform the response from external system to a format recognizable by data source system A . In various embodiments transformation and or business logic module may forward the response from external system without transformation. In one embodiment a response from external system to an asynchronous message or request from data source system A is handled by a service specified in the REPLY TO header parameter of the original XML document.

Web services hub further forwards the transformed response to data source system A by employing the appropriate asynchronous service router or synchronous service router . In one embodiment if no service is specified in the REPLY TO header parameter field of the original XML document the response from external system is discarded. In other embodiments if the original message or request was transmitted over synchronous communication channel synchronous service router simply returns the response from external system over synchronous communication channel .

In various embodiments data source system A may be customer relationship management CRM systems and computer applications provided by a computer technologies vendor such as Siebel. In other embodiments external system may be a secured network for example U.S. Bank Elan network. U.S. Bank Elan network interface requires application clients and computer systems such as for example data source system A to assign an X.509 client digital certificate using the OASIS Web Services Security WSS WS Security v1.1 standard to request transmitted to external system .

Web server may be a computer system that delivers web content. In one embodiment web server may provide a secure socket layer SSL termination point to data source system A . Accordingly web server may be implemented by an Internet Information Server from Microsoft an Apache HTTP Server from Apache Software Foundation an iPlanet Web Server from iPlanet E Commerce Solutions or other suitable Web server platform.

First keystore may be implemented as an SSL keystore file containing both public and private keys. In one embodiment public keys may be stored as signer certificates while private keys may be stored in personal certificates. Keys from first keystore may be used to verify authenticity and data integrity of request prior to transmission.

Queue processor may be provided in web services hub to listen to an input queue of incoming messages or requests contained in web container . In one embodiment queue processor may process messages in a JAVA message oriented middleware MOM API implementation such as for example a JAVA messaging service JMS queue. As shown queue processor may be implemented as a message driven bean EJB to process request received by the JMS queue in web container .

As shown data source system A may transmit request to web server in the form of an XML document employing for example an HTTP POST command. Data source system A may transmit request over a cryptographic protocol such as secure sockets layer SSL to web server . Web server may verify authorization and access rights of data source system A based on request . In addition first keystore may assign a public or private encryption key digital signature to request . Web server may then transmit request over a secure connection protocol such as for example XML over HTTPS to web container .

In one embodiment request may be published to a JMS queue in web container . In such an embodiment queue processor listening to the JMS queue may forward request to secure service router . On receipt of request secure service router may authenticate data source system A based on information specified in the HTTP header parameter fields of request . In another embodiment secure service router may authenticate the information specified in HTTP header parameter fields of request against LDAP user registry .

Secure service router may further locate a transformation service or business services handler capable of handling request . In one embodiment secure service router may forward transformed request to a web transmitter for transmission to external system . In another embodiment web transmitter may sign and encrypt request employing second keystore . In various embodiments transmission to external system is established over secure request response transmission channel by a secure communications protocol such as SOAP over HTTPS. External system may return a response in encrypted form over secure request response transmission channel . As shown second keystore and web transmitter may transform and forward response back to queue processor . Queue processor may then transmit response to data source system A over secure response transmission channel .

These are representative implementations of intermediary web services hub in accordance with the illustrative embodiments described herein. Those of ordinary skill in the art will readily appreciate that the various systems and methods disclosed herein are exemplary only and that the illustrative embodiments can operate within a number of different data communication environments. Furthermore various embodiments described herein may be implemented at any level ranging from hardware to application software and in any appropriate physical location or operating system.

Numerous specific details have been set forth herein to provide a thorough understanding of the embodiments. It will be understood by those skilled in the art however that the embodiments may be practiced without these specific details. In other instances well known operations components and circuits have not been described in detail so as not to obscure the embodiments. It can be appreciated that the specific structural and functional details disclosed herein may be representative and do not necessarily limit the scope of the embodiments.

It is also worthy to note that any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be implemented using an architecture that may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other performance constraints. For example an embodiment may be implemented using software executed by a general purpose or special purpose processor. In another example an embodiment may be implemented as dedicated hardware such as a circuit an application specific integrated circuit ASIC Programmable Logic Device PLD or digital signal processor DSP and so forth. In yet another example an embodiment may be implemented by any combination of programmed general purpose computer components and custom hardware components. The embodiments are not limited in this context.

Some embodiments may be implemented for example using a machine readable medium or article which may store an instruction or a set of instructions that if executed by a machine may cause the machine to perform a method and or operations in accordance with the embodiments. Such a machine may include for example any suitable processing platform computing platform computing device processing device computing system processing system computer processor or the like and may be implemented using any suitable combination of hardware and or software. The machine readable medium or article may include for example any suitable type of memory unit memory device memory article memory medium storage device storage article storage medium and or storage unit for example memory removable or non removable media erasable or non erasable media writeable or re writeable media digital or analog media hard disk floppy disk Compact Disk Read Only Memory CD ROM Compact Disk Recordable CD R Compact Disk Rewriteable CD RW optical disk magnetic media various types of Digital Versatile Disk DVD a tape a cassette or the like. The instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C JAVA BASIC Perl Matlab Pascal Visual BASIC assembly language machine code and so forth. The embodiments are not limited in this context.

In various implementations intermediary web services hub may be illustrated and described as comprising several separate functional elements such as modules and or blocks. Although certain modules and or blocks may be described by way of example it can be appreciated that a greater or lesser number of modules and or blocks may be used and still fall within the scope of the embodiments. Further although various embodiments may be described in terms of modules and or blocks to facilitate description such modules and or blocks may be implemented by one or more hardware components e.g. processors DSPs PLDs ASICs circuits registers software components e.g. programs subroutines logic and or combination thereof.

In various embodiments intermediary web services hub may comprise multiple modules connected by one or more communications media. Communications media generally may comprise any medium capable of carrying information signals. For example communications media may comprise wired communications media wireless communications media or a combination of both as desired for a given implementation. Examples of wired communications media may include a wire cable printed circuit board PCB backplane semiconductor material twisted pair wire co axial cable fiber optics and so forth. An example of a wireless communications media may include portions of a wireless spectrum such as the radio frequency RF spectrum. The embodiments are not limited in this context.

The modules may comprise or be implemented as one or more systems sub systems devices components circuits logic programs or any combination thereof as desired for a given set of design or performance constraints. For example the modules may comprise electronic elements fabricated on a substrate. In various implementations the electronic elements may be fabricated using silicon based IC processes such as complementary metal oxide semiconductor CMOS bipolar and bipolar CMOS BiCMOS processes for example. The embodiments are not limited in this context

Unless specifically stated otherwise it may be appreciated that terms such as processing determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices.

As used herein data source or data target are intended to have the broadest possible meaning consistent with these terms and shall include a database a plurality of databases a repository information manager a queue a message service a repository a data facility a data storage facility a data provider a website a server a computer a computer storage facility a CD a DVD a mobile storage facility a central storage facility a hard disk a multiple coordinating data storage facilities RAM ROM flash memory a memory card a temporary memory facility a permanent memory facility magnetic tape a locally connected computing facility a remotely connected computing facility a wireless facility a wired facility a mobile facility a central facility a web browser a client a laptop a personal digital assistant PDA a telephone a cellular phone a mobile phone an information platform an analysis facility a processing facility a business enterprise system or other facility where data is handled or other facility provided to store data or other information as well as any files or file types for maintaining structured or unstructured data used in any of the above systems or any streaming messaged event driven or otherwise sourced data and any combinations of the foregoing unless a specific meaning is otherwise indicated or the context of the phrase requires otherwise. A storage mechanism is any logical or physical device resource or facility capable of acting as a data source or data target.

 Business processes business services and business transactions as used herein shall include any methods service operations processes or transactions that can be performed by a business including without limitation sales marketing fulfillment inventory management pricing product design professional services financial services administration finance underwriting analysis contracting information technology services data storage data mining delivery of information routing of goods scheduling communications investments transactions offerings promotions advertisements offers engineering manufacturing supply chain management human resources management data processing data integration work flow administration software production hardware production development of new products research development strategy functions quality control and assurance packaging logistics customer relationship management handling rebates and returns customer support product maintenance telemarketing corporate communications investor relations and many others.

 Enterprise JAVA Bean EJB shall include the server side component architecture for the J2EE platform. EJBs support rapid and simplified development of distributed transactional secure and portable JAVA applications. EJBs support a container architecture that allows concurrent consumption of messages and provide support for distributed transactions so that database updates message processing and connections to enterprise systems using the J2EE architecture can participate in the same transaction context.

 JMS shall mean the JAVA Message Service which is an enterprise message service for the JAVA based J2EE enterprise architecture. JCA shall mean the J2EE Connector Architecture of the J2EE platform described more particularly below. It should be appreciated that while EJB JMS and JCA are commonly used software tools in contemporary distributed transaction environments any platform system or architecture providing similar functionality may be employed with the data integration systems described herein.

While certain features of the embodiments have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true scope of the embodiments.

