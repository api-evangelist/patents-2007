---

title: Client-side wireless communications link support for mobile handheld devices
abstract: A client-based method for implementing a communications link. The method includes receiving a request for a communications link from an application executing on a handheld device and accessing a device API component to configure device hardware to implement the communications link. A wireless communications link is established with a server. In optimized protocol is automatically implemented between a client communications component and the server based on the wireless communications link type and the handheld device type, wherein the communications link is established via the communications component functioning with a device API component to configure hardware of the handheld device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060594&OS=08060594&RS=08060594
owner: Phunware, Inc.
number: 08060594
owner_city: Austin
owner_country: US
publication_date: 20071023
---
The use of mobile handheld devices particularly devices with wireless communications capabilities is becoming increasingly popular with consumers. A wide variety of various types of mobile devices are being manufactured by a large number of consumer electronic device manufacturers. For example in a typical market like the United States many millions of mobile handheld devices such as for example mobile phones portable computers e.g. PDAs micro laptops etc. portable media players and the like are purchased by consumers each year. As the features offered by these devices continued to increase with respect to their richness and depth of functionality the overall mobile handheld device market continues to expand. This expanding market offers opportunities to those device manufacturers that are best able to satisfy consumer demand.

Much of the unique functionality provided by a wireless handheld device depends upon its ability to connect with other wireless devices and or a wireless base station and application servers. Examples include cell phones being able to talk to a cell phone base station e.g. cell tower etc. and access an e mail server. Another example is the ability of a wireless handheld device to talk to a WiFi hotspot or other such base station. Application functionality e.g. weather information stock quotes news etc. is often provided by a server that communicates with the wireless device via the base station.

The ability to establish a reliable wireless communication link between a wireless handheld device and a server e.g. a server connected to the Internet etc. is typically the most critical factor controlling quality of the user experience. A given application s usability and desirability can be dictated by the speed and reliability of the link between the wireless handheld device and the server.

Unfortunately there are a number problems with the continued expansion of the market for wireless handheld devices. There are a number of different wireless network carriers that employ a number of different wireless technologies e.g. CDMA GSM etc. . Each of these different network carriers utilize a large number of different types of wireless handheld devices from a large number of different manufacturers. The different network carriers also used different techniques in different technologies to accommodate the changing transmit received conditions as for example the mobile users move around e.g. walking down the street driving a car etc. changing device locations with respect to each other and with respect to any base station. Consequently an application developer is confronted with a large number of different technology architectures network topologies software interfaces etc. that must be interfaced with and accommodated in order to achieve a sufficiently fast and reliable link between a given wireless handheld device and a server.

Another problem is the fact that an application developer does not have access to a wide array of wireless mobile handheld devices through a reasonable number of conditions or a reasonable number of APIs. There are a large number of different types of handheld devices. Each of these devices varies widely in terms of their capability. Such capabilities include for example the power of the embedded CPU the amount of included RAM battery power the communications hardware included antenna effectiveness and the like. Depending upon the degree of capability of a given device the developer must either custom write communications routines or network layer code e.g. interrupt service routines Internet protocol stacks etc. for more primitive devices or merely hook into established APIs e.g. Brew J2ME etc. for more advanced devices or some combination of the two for devices that are in between. This causes a large amount of developer coding time simply getting an application through QA and debugging to run on a given model of device. Developers simply do not have the time or the resources to take even a single application through a customized QA and debugging process for all the different types of handheld devices that comprise the market.

Thus what is required is a standardized method for implementing wireless communications links for wireless mobile handheld devices. What is required is a method that can adapt to the various different technologies used to implement a communications link between a handset and a server to provide a standardized way to communicate regardless of the carrier and regardless of the handset type. What is required is a solution that is transparent to an application developer and presents a standardized device independent interface. The present invention provides a novel solution to these requirements.

Embodiments of the present invention provide a standardized method for implementing wireless communications links for wireless mobile handheld devices. This standardized method can dynamically adapt to conditions affecting a communications link to maintain the best available link quality. Embodiments of the present invention provide a solution that is transparent to an application developer and presents a standardized device independent interface that is stable across different device types device models and the like.

In one embodiment the present invention is implemented as a client based method for implementing a communications link. The method includes receiving a request for a communications link from an application executing on a handheld device and accessing a device API component to configure device hardware to implement the communications link. A wireless communications link is established with a server. In optimized protocol is automatically implemented between a client communications component and the server based on the wireless communications link type and the handheld device type wherein the communications link is established via the communications component functioning with a device API component to configure hardware of the handheld device.

In one embodiment the optimized protocol between the client communications component and the server is based on the wireless communications link type e.g. CDMA GSM TDMA etc. and the handheld device type e.g. CPU power RAM transceiver type antenna etc. wherein the communications link is established via the communications component functioning with a device API component to configure hardware of the handheld device. Additionally the optimized protocol is selected to be a socket full duplex connection protocol a socket half duplex connection protocol a HTTP tunneling or a HTTP Polling protocol based on the type of handheld device and a type of carrier network.

In one embodiment the communications component is configured to implement a standardized communications API for applications executing on the handheld device. The communications component can include a hardware abstraction component for translating between the communications component and device specific hardware functions of the handheld device. The hardware abstraction component enables the communications component to implement a stable communications API and maintain the same stable communications API even when installed on multiple different handheld device types having different device specific hardware functions.

Reference will now be made in detail to the preferred embodiments of the present invention examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments it will be understood that they are not intended to limit the invention to these embodiments. On the contrary the invention is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore in the following detailed description of embodiments of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be recognized by one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of procedures steps logic blocks processes and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure computer executed step logic block process etc. is here and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing terms such as storing or accessing or recognizing or retrieving or translating or the like refer to the action and processes of a computer system e.g. system of or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

With reference now to a computer system in accordance with one embodiment of the present invention is shown. In the embodiment the computer system is an embedded computer system that is incorporated within a wireless mobile handheld device and is configured to implement a substantial portion of the functionality of the wireless mobile handheld device . Computer system shows the general components of an exemplary embedded computer system that provides the execution platform for implementing certain hardware software based functionality of the present invention. As described above certain processes and steps of the present invention can be realized in one embodiment as a series of instructions e.g. software code that reside within one or more computer readable memory units of a computer system e.g. system . When executed the instructions cause the system to implement the wireless mobile handheld device functionality of the present invention as described below.

In general system comprises at least one CPU coupled to a computer readable memory via a bus . The system further includes a transceiver coupled to the bus for providing wireless RF transmission and reception of information for the device a display for providing visual status information or other useful data to a user and a user I O component for accepting user input e.g. key pad click wheel etc. and providing various types of user output e.g. audible speaker output vibration flashing LEDs etc. . Each of the components are coupled to the CPU and the computer readable memory via the bus as shown.

The exemplary wireless communications system embodiment shows the basic elements of a typical cell phone communications infrastructure. The handheld devices are typical cell phone type devices that communicate with the cell phone carrier base Station via one of a number of different RF cellular carrier techniques e.g. CDMA GSM TDMA etc. . Typical cell phone type devices can include for example traditional cell phones e.g. clamshell type flip phone type etc. cellular enabled PDAs Blackberry Palm etc. cellular equipped palm top computers and the like. The RF based communication between the handheld devices and the base station is extended into the communications network infrastructure via various components of hardware equipment e.g. bridge devices routers etc. located at the base station and typically operated by the owner of the base station e.g. the cell phone carrier .

In most implementations the network infrastructure comprises the Internet. The messages data going to and from the handheld devices are transformed at the base station from wireless RF based messages and data into wired electronic or optical signals e.g. addressing data packets frames etc. of the network infrastructure e.g. the Internet . The routing and switching protocols of the network complete the bidirectional communication with the one or more application servers which may be located at a remote location e.g. different city different state different country etc. that is connected to the network .

The embodiment shows an overview of the software based functions executing on the handheld devices . The functions run on each device s embedded computer system e.g. computer system . For example with the device the application can be one of the number of different types of handheld device applications e.g. WAP browser game application update utility etc. . The client side communication component is generally referred to as a JCI component. The JCI component functions with and controls the API component to implement an optimized communications link with the corresponding communication server which is generally referred to as a JCI server e.g. one of the application servers . With the device the API component is a J2ME component.

Similarly with the device shows the application with the corresponding JCI component and the API component . As with the device the JCI component functions with and controls the API component to implement an optimized communications link between the device and the JCI server . However with the device the API component is a BREW component.

The J2ME component comprises a collection of Java based APIs that were originally designed to facilitate the development of software applications for resource constrained mobile handheld devices. The J2ME specification e.g. Java 2 Platform Micro Edition comprises a formal specification having varying degrees of support within the mobile handheld device manufacturing industry. A significant number of mobile handheld device manufacturers have incorporated J2ME support within their devices.

The BREW component similarly comprises a set of APIs that are designed to facilitate the development of software applications for resource constrained mobile handheld devices. The BREW APIs e.g. Binary Runtime Environment for Wireless where originally created by Qualcomm solely for its proprietary CDMA based mobile phones. The more recent versions of the BREW APIs have been opened somewhat so that they are supposedly air interface independent to facilitate support for other wireless technologies such as GSM GPRS UMTS and CDMA. As with J2ME a significant number of mobile handheld device manufacturers have incorporated BREW support within their devices.

Embodiments of the present invention implement a client side JCI component e.g. JCI components and that can interact with and control the resident preinstalled components and to implement a communications link with the JCI server . As described above cell phone based mobile handheld devices tend to incorporate either one of the widely used APIs depending upon whichever allegiance the device manufacturer is part of in a given year.

The client side JCI components and are configured to interface with and control the API components to implement the best available a per call appropriate for the handheld device type and or the network type. The JCI components can exchange information with the JCI Server to select the particular communication protocol implemented between the devices and the JCI server . In general selection as to which particular communication protocol is to be implemented is made prior to runtime. For example in one embodiment selection is made at the time when the particular devices are shipped from the manufacturer to the retail outlets.

In this manner the JCI components and are configured to ensure that the highest link quality is maintained for the applications and . In other words the objective of the JCI components and and the JCI server is to ensure the communications links and have the highest available link bandwidth and lowest available link latency.

In one embodiment the protocol of the communication links can be dynamically changed. For example in those cases where there is a temporary degradation in link quality the particular protocol being used e.g. protocols can be downgraded to maintain connectivity. Once the degradation passes the protocol is upgraded e.g. upgraded to socket full duplex protocol to restore the highest available link quality.

Additionally in situations where a communications link is unavoidably lost e.g. the user enters an elevator of a building passes into a tunnel etc. the JCI components and and the JCI server are configured to automatically reestablish the communication link as soon as conditions permit. This capability can enable for example the suspension of an online game when connectivity is lost and the subsequent resuming of the game when connectivity is reestablished without causing a crash error or an abnormal termination of the game.

The diagram embodiment shows the possible protocols that are available to the JCI client and the JCI server to optimize the communications link between for example a particular JCI enabled handheld device and a particular JCI server. As described above the objective of the JCI client and the JCI server is to ensure their communications link has the highest available link bandwidth and lowest available link latency. The particular one of the protocols that is implemented depends upon factors such as for example the hardware capabilities of the particular handheld device the hardware and software functionality of the carrier network and the like.

In one embodiment the highest link quality is provided by the full socket duplex protocol . In general the full socket duplex protocol provides the highest link bandwidth and the lowest link latency in comparison to the other depicted protocols. Consequently the full socket duplex protocol is the preferred link implementation conditions permitting.

In general the term full socket duplex refers to the fact that an Internet socket e.g. a socket or network socket is instantiated at both the JCI client and JCI server for both transmitting and receiving data e.g. full duplex . Sockets are communication end points e.g. sender receiver that are unique to each machine communicating on an Internet Protocol based network such as the Internet e.g. network . An Internet socket typically comprises protocol information e.g. TCP UDP raw IP a local IP address a local port a remote IP address and a remote port. In the full socket duplex protocol the JCI client and JCI server connect the instantiated sockets with a running application e.g. application or one or more processes executing with or within the application. The application and or processes use the instantiated sockets to send and receive data over the network and the network s transport protocol e.g. TCP UDP etc. transports the actual data across the network.

In those cases where the socket full duplex protocol cannot be implemented the JCI client and the JCI server will preferably implement the socket half duplex protocol . As its name implies the socket half duplex protocol cannot support the simultaneous transmitting and receiving of data. For example when the JCI client transmits data to the JCI server the JCI client to cannot receive any data from the JCI server to until its transmission is complete. Once the JCI client completes transmitting data the link becomes available for the JCI server to transmit data to the JCI client . The half duplex operation yields a reduction in the available link bandwidth and a corresponding increase in link latency in comparison to the socket full duplex protocol .

In those circumstances where the socket full duplex protocol and the socket half duplex protocol cannot be implemented the JCI client and the JCI server will preferably implement the third option the HTTP tunneling protocol . HTTP tunneling functions by creating tunnel between a first computer system and a second computer system. HTTP tunneling typically uses one or more mediator servers on the network to encapsulate data and transmit the data between the JCI client and the JCI server . HTTP encapsulated application data travels from for example the handheld device to the JCI server via the one or more mediator servers e.g. from one mediator server to the next . In general the HTTP tunneling protocol has lower link bandwidth and higher link latency than either the socket full duplex protocol or the socket half duplex protocol .

In those circumstances where conditions are such that the socket full duplex protocol the socket half duplex protocol and the HTTP tunneling protocol cannot be implemented the JCI client and the JCI server will implement the fourth option the HTTP polling protocol . The HTTP polling protocol provides a robust connect mechanism that should work adequately even in very adverse network conditions. In the HTTP polling protocol the JCI client makes regular periodic HTTP queries to the JCI server and in effect continually pings the JCI sever as to whether any messages need to be transmitted from the server to the client . Generally the pings between the JCI client and the server allow the immediate transmission and reception of data during the time the HTTP connection between the server and the client remains active e.g. due to the ping . The HTTP polling protocol incurs a comparatively large amount of overhead with the JCI client continually polling the JCI server for data. For example if a large number of handheld devices are implementing HTTP polling the JCI server will come under a substantial load. Because of this overhead HTTP polling protocol provides the lowest link bandwidth and the highest link latency in comparison to the other protocols .

The objective of the JCI component is to provide a standardized API that can implement fast reliable communications links for the applications executing on the handheld device . As described above the J2ME libraries do not provide sufficient communications functionality and as such cannot be reliably depended upon by the applications . In contrast the JCI component provides a stable and standardized API that the applications can rely on to establish dependable high quality communications links in the manner described above.

The provision of the standardized API by the JCI component provides a number of advantages. The standardized API implemented by the JCI component provides a standardized method for implementing wireless communication links for handheld devices. This allows an application developer to write applications that interface with the JCI component and avoid any expensive and painful per device Q A and debug processing.

Another advantage is the fact that the developer can count on the highest available link quality being implemented by the JCI component e.g. in combination with a JCI server . This allows the developer to freely implement applications and games with a high degree of rich and compelling interactivity without fear of the applications being unnecessarily crippled by poorly implemented communication links.

Yet another advantage is the fact that the solution implemented by the JCI component is transparent to application developers. Any changes evolutions or updates to the J2ME component or to the hardware can be accounted for by appropriate revisions of the JCI component . The JCI component can be updated to properly interact with changes to the J2ME component hardware or other aspects of the handheld device e.g. firmware updates etc. while preserving the standardized device independent interface.

As described above the BREW component interfaces with and controls the BREW libraries to access and control certain hardware interfaces of the handheld device . This includes accessing certain hardware functions e.g. keyboard I O transceiver accesses etc. through one or more BREW function calls where the degree access implemented is determined by the device manufacturer. As with the handheld device described above some hardware access functions can be implemented directly by the JCI components while other hardware access functions must be obtained via interaction with e.g. hooking into calling etc. the installed BREW libraries . Thus some portions of the JCI components are optimized to interface and interact with the BREW libraries while other portions of the JCI components are optimized to interface directly with the hardware .

The embodiment shows exemplary software modules which implement certain functionality of the JCI components in accordance with one embodiment of the present invention. The message notifier module comprises those software functions and routines which notify applications e.g. applications of arriving messages passes messages from applications to the established link protocol and the like. The connection manager comprises those software functions and routines which initiate and closes connections e.g. protocols with a corresponding JCI server. The connection manager determines when to upgrade from one protocol to another and vice versa and when to reestablish a connection when a prior connection is lost.

The protocol handler comprises those software functions and routines which manage the creation and implementation of a communications link through a selected protocol e.g. protocols . The hardware abstraction layer translator comprises those software functions and routines which translate standardized API functions of the JCI components to the idiosyncratic device specific functions of the particular handheld device hardware. The various differences between the hardware interfaces and any firmware requirements are handled by the translation functions of the hardware abstraction layer .

The embodiment shows how the application establishes communication with one or more of a plurality of server side applications . The server side applications can communicate with an appropriate client side application e.g. application on the handheld device to deliver compelling and satisfying interactivity to the user e.g. online multiplayer gaming multiplayer applications etc. .

The JCI server automatically implements an optimized protocol between the client communications component e.g. the JCI components and the JCI server based on the wireless communications link type and the handheld device type. The optimized protocol is implemented while maintaining a standardized application programming interface for the server communications interface . The server communications interface is configured to provide a stable and standardized application programming interface for the various applications services and the like executing on the application servers .

The embodiment further shows a set of common services that can be provided to each of the application servers . In general the common services comprise those functions which can apply to a plurality of different applications serving a corresponding plurality of different needs. Certain functions such as messaging registration billing etc. tend to be common needs across different applications. For example billing functionality for one application is typically quite similar to billing functionality used by multiple applications. The functions that tend to be common across multiple different types of applications are implemented by common service modules within the set of common services .

The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

