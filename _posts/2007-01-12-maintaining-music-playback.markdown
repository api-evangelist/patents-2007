---

title: Maintaining music playback
abstract: Described is a technology for managing audio playback queues maintained in separate memory spaces, e.g., in a game console, such that that audio playback continues upon transitioning between states (including reboots) that change a memory space's contents. For example, before transitioning from a dashboard mode to a game playing mode, the playback queue in memory space used for the dashboard (and the game) is copied to a second queue in a second (e.g., operating system) memory space. The dashboard queue's contents (often large) are truncated as necessary to fit in the relatively smaller queue space. When transitioning from a game to the dashboard mode, copying the queue back takes place after the dashboard is operational. A third type of queue corresponding to a container of an audio source is also managed, including copying its contents when appropriate to the memory that has the queue currently being used for playback.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933670&OS=07933670&RS=07933670
owner: Mircosoft Corporation
number: 07933670
owner_city: Redmond
owner_country: US
publication_date: 20070112
---
One feature of digital media devices game consoles such as the Xbox 360 allows a user to play an in game sound track other than the musical audio track that accompanies the running game. In general this feature allows the game playing sound effects such as bleeps and blips to be heard but substitutes a user s chosen music for that of the game s original music track. For some users this is particularly desirable when playing old arcade style games or newer casual games in which the original music typically electronically generated is very repetitive and can quickly become monotonous.

However a problem with this feature is that the substituted music track stops playing when a user starts a new game and or ends the current game such as to return to the game console s dashboard. This is because internally the system may perform a reboot at such times for various reasons including security. Alternatively the system may call an application programming interface to launch a new image which also causes the music to stop playing. In any event users are frustrated with having their music playback suddenly halted for taking what the user considers to be simple actions that seem unrelated to music playback.

This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in any way that would limit the scope of the claimed subject matter.

Briefly various aspects of the subject matter described herein are directed towards managing queues of audio lists maintained in separate memory spaces such that audio playback continues upon transitioning between states that change the contents of one of the memory spaces. In one example before a transition from a dashboard mode to a game playing mode the queue is in a first memory space used for the dashboard mode. During the transition to game playing mode the contents of the queue are copied to a second queue in a second memory space. The dashboard queue s contents often large are truncated as necessary to fit in the second queue which is relatively smaller . Alternatively when transitioning from a game playing mode to a dashboard mode the second queue in the second memory space is used until after the transition upon which it is copied to dashboard queue. A third type of queue corresponding to a container of an audio source is managed including copying its contents when appropriate to the memory that has the queue currently being used for playback.

In one example implementation operating system logic copies the queue data in response to the transition including truncating the data when copying from a larger queue to a smaller queue. The transition may include a reboot operation. Logic also handles starting of audio while a game is running such as by enumerating the smaller queue with a list from a container corresponding to an audio source or if too large enumerating the second queue with one song at a time from an audio source such that the second queue builds a history of audio playback from the audio source. Additional logic that handles transitioning from the game playing mode to the dashboard mode such as by copying playback queue data to the dashboard space after the dashboard is operational such that audio playback is not halted upon this transition. The playback queue data may be from a container corresponding to an audio source and may be copied in a background operation.

Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.

Various aspects of the technology described herein are generally directed towards maintaining music playback such that starting or ending a game from a user s perspective including returning to the console s dashboard which is equivalent to running a different game does not cause the currently playing music to stop playing. In general and as described below no reboots or APIs calls e.g. to XLaunchNewImage in an Xbox environment cause the currently playing music to stop playing.

In one implementation described herein maintaining music playback is described in context of an example game console architecture based upon Xbox 360 technology. However as can be readily appreciated this is only one example and the technology is not limited to any particular game console or even to game consoles in general but instead applies to any media playback device including game consoles in which maintaining music playback is desirable but at times would otherwise be adversely affected by internal device operations.

As such the present invention is not limited to any particular embodiments aspects concepts structures functionalities or examples described herein. Rather any of the embodiments aspects concepts structures functionalities or examples described herein are non limiting and the present invention may be used various ways that provide benefits and advantages in music or other audio playback in general.

The operating system memory space includes the console operating system . For audio playback audio content may be read from various sources and decoded by a suitable operating system component into a playback buffer . An active playback queue described below contains pointers to the sources e.g. a file path for hard disk drive files. Non limiting example sources in include a hard disk drive in the console a personal computer an MTP media transport protocol device another audio playback device a USB compatible device such as a CD ROM or another hard drive and so forth. Any or all of such sources may be present and accessible at a given time.

As can be seen in one aspect of playback concerns the way that a user s playback queue of songs is stored in memory namely that the active queue may be different depending on whether the queue was created when the dashboard was running or not. This is because when the dashboard is running the entire title memory space is available for the dashboard whereby a potentially very large list of songs may be stored in a playback queue . In contrast when the dashboard is not running the currently loaded game has control of that memory space and a different music playback queue is instead stored in operating system memory space which is relatively far more limited in space whereby the music playback queue cannot hold as large of a list as the queue . For example in one implementation the dashboard s queue may hold a list songs on the order of tens of thousands whereas the operating system s queue may hold a list of songs on the order of a hundred or so. Further complications arise in that one of many possibly different devices may be providing the music at any given time.

To summarize there are thus different types of queues that may exist including the queue containing a potentially large list of songs that uses the title s memory space corresponding to dashboard music playback. There is also the queue in operating system memory such as containing a list of N songs e.g. 100 songs obtained from an external playback device such as one of the devices .

For some devices the information needed for the list corresponds to and for consistency may be limited to approximately one hundred songs. If the user tries to play back a larger collection of songs the list is truncated. For other devices the operating system space may store information about the container that the user wanted to play with the queue used to store a history of which songs have been played. To this end the operating system memory space alternatively or in addition to may include a container object which represents a related collection of songs e.g. an album or genre from a particular source CO and a history of the last N e.g. 100 songs played from that container e.g. corresponding to music on the HDD . The maintaining of the history allows playback modes such as shuffle randomized playback repeat and so forth to be implemented.

For completeness there is also a fourth kind of playback queue which is created by a game e.g. using APIs. This queue is stored in the game s title memory so the queue can be very large but it will be lost when exiting the game because the music source the game is also going away at that point in time.

Turning to an explanation of operation in one example implementation persisting music playback across reboots corresponds to defining transition behavior and an underlying conversion between the types of playback queues. In general the currently playing song will continue to play from operating system memory space . Note that if transitioning booting from a game to another and the queue is already in the operating system a non dashboard queue state then no changes in the playback queue are made and playback continues from the operating system.

Step represents playing back from the operating system queue until some state change step ends playback. For example state changes that can end the song playback include actions such as the user turning off the device the user disconnecting the source the user manually ending the song and so forth.

In one example within this dashboard to game transition scenario if the user is at a song that is beyond the start of the large dashboard queue e.g. at the fiftieth song the large queue s contents are copied such that the small queue includes some number of previously played songs the current song and some number of not yet played songs for example this copy may include up to the last twenty five played songs the current song and the next seventy four songs. This allows a user to go back in time to an extent with respect to playback. One hundred songs corresponds to playback on the order of approximately four to six hours.

As represented via step playback from other sources tries to fill up the small queue structure. Note that depending on the device step may request more than N e.g. 100 songs and discard any amount returned beyond N.

Playback is represented at step which typically continues until the song is finished as represented via step . When finished if single enumeration is taking place another song is enumerated step otherwise the next song in the queue is played back step . Note that the queue is maintained for history purposes e.g. so that the same song is not played back again unless such a mode is specifically requested by the user . Further note that other state changes can end the song playback such as the user turning off the device disconnecting the source manually ending the song and so forth however these are not shown in for purposes of simplicity.

Other alternatives are feasible including compressing the data in some way e.g. hashing to maintain a larger number of songs in the small queue. Another alternation is to persist the large queue to the console s or another hard drive or similar storage such as flash memory unit if present and access it as necessary. Note that writing to a hard drive may slow down starting the game and thus is not always desirable. Similarly sometimes writing to a memory unit depending on whether it is available may provide different user experiences and thus is not always desirable.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

