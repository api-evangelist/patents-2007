---

title: Methods and apparatuses for handling single-user applications in multi-user computing environments
abstract: Methods and apparatuses are provided for controlling application software while switching between session in a multi-session computing environment. An apparatus includes memory coupled to switching logic and application program managing logic. The switching logic is configured to selectively switch console control of a computing device between at least two user kernel sessions that are maintained in the memory. The application program managing logic is configured to selectively control at least one application program that is operatively configured within at least one of the user kernel sessions. For example, the application program managing logic can be configured to stop the operation, restart certain application programs, notify application programs about switching events, and/or adjust the playback of audio and/or video signals associated certain application programs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07770134&OS=07770134&RS=07770134
owner: Microsoft Corporation
number: 07770134
owner_city: Redmond
owner_country: US
publication_date: 20070424
---
This application is a divisional of and claims priority to U.S. patent application Ser. No. 09 999 894 entitled Methods and Apparatuses For Handling Single User Applications In Multi User Computing Environments filed Oct. 31 2001 to Evans et al. the disclosure of which is incorporated by reference herein.

U.S. patent application Ser. No. 09 999 894 is a continuation in part CIP of U.S. patent application Ser. No. 09 573 628 which was filed May 17 2000 now U.S. Pat. No. 6 807 666 and titled Methods And Arrangements For Providing Multiple Concurrent Desktops And Workspaces In A Shared Computing Environment . U.S. patent application Ser. No. 09 573 628 now U.S. Pat. No. 6 807 666 further claims priority from U.S. Provisional application Ser. No. 60 170 956 filed Dec. 15 1999 entitled Multiple Desktops To Provide Separate Concurrent Work Spaces For Multiple Users Using The Same Computer the disclosure of which is incorporated by reference herein.

This invention relates to computers and software and more particularly to methods and apparatuses for use in switching user kernel sessions and handling application level software in such a multi user computing environment.

There are many situations where several people would like to share a single computer. For example a home may have a single personal computer PC that is shared by the family members. If these users desire a unique configuration privacy and or security for their applications and data files such a shared computing environment may not adequately accommodate them.

For example with most operating systems the users share a single workspace. Unfortunately doing so does not allow personalization of their workspace or security of data between users. In certain operating systems users may separate their data into multiple profiles or accounts . One of the drawbacks to this scheme is that if one user is using the computer and a another user would like to access their own files the first user would have to close all open applications in order for the other user to log on to the system and access their data. Thus the first user s application state is lost. In addition to losing the application state the user is inconvenienced because of the time involved with closing down the prior user s state and re establishing the new user s state.

Certain solutions such as for example the Identity Manager available in Microsoft Outlook Express version 5.0 allow certain user data to be shared among separate users without losing all of the application s states during a user switch. However the Identity Manager manages only a small subset of the user s data. Text documents for example are not stored separately for each user. Furthermore there is little workspace personalization available and the user data is not secured for other user access.

Consequently there is a need for an improved methods and apparatuses for use in multiple user computing environments. Preferably the methods and arrangements will allow for a plurality of desktops workspaces and or user kernel sessions within a shared computing environment.

Furthermore there is a need to provide methods and apparatuses for handling application software and in particular single user application software when a plurality of desktops workspaces and or user kernel sessions are provided within a shared computing environment.

The present invention provides methods and apparatuses for handling application software and in particular single user application software when a plurality of desktops workspaces and or user kernel sessions are provided within a shared computing environment.

The above stated needs and other are met for example by an apparatus that includes memory coupled to switching logic and application program managing logic. The switching logic is configured to selectively switch console control of a computing device between at least two user kernel sessions that are maintained in the memory. The application program managing logic is configured to selectively control at least one application program that is operatively configured within at least one of the user kernel sessions. By way of example the application program managing logic can be configured to stop the operation of one or more application programs. In certain instances when the application program managing logic stops the operation of an application program it also records or otherwise stores information associated with the application program such that the stopped application may be re started at a later time. In still other implementations the application program managing logic is configured to notify one or more application programs when a session switching or like event occurs or is about to occur. Thus the application program may respond accordingly to the notification event. A session switching event for example may be associated with a logon process creating a new user kernel session disconnecting an existing user kernel session re connecting an existing user kernel session or the like.

In accordance with certain additional implementations the apparatus may also include an audio mixer capability that is operatively coupled to the application program managing logic and at least one application program. Here the application program managing logic can be configured to cause the audio mixer to selectively adjust an audio signal associated with the application program. In certain instances the audio signal may include information identifying a user kernel session corresponding to the application program.

In still other implementations the apparatus includes having the switching logic dynamically or otherwise maintain identifying data associated with each user kernel session. The application program managing logic is then configured to access the identifying data as needed to make controlling decisions. Similarly in certain implementations the application controlling logic also dynamically maintains identifying data associated with running and or re startable application programs. The application program managing logic may also be configured to access identifying data associated application programs that have been predetermined to be selectively controlled by the application program managing logic. In certain further implementations the application program managing logic may be configured to prompt the user for input e.g. approval etc. with regard to the handling of an application program.

As shown in computer includes one or more processors or processing units a system memory and a bus that couples various system components including the system memory to processors . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures.

The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is stored in ROM .

Computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are each connected to bus by applicable interfaces and respectively.

The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROM and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to the processing unit through an interface that is coupled to bus .

A monitor or other type of display device is also connected to bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

Computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computer . Remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. Modem which may be internal or external is connected to bus via interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Reference is now made to which depicts an exemplary graphical user interface GUI display suitable for use in identifying users to the operating system of computer . Here a logon screen is shown as having a first title area that identifies logon screen . Logon screen may take up be a full screen of display or a portion thereof As shown first title area can include any graphical feature e.g. bitmap photo video text etc .

Logon screen also includes a multiple user logon area wherein the user is presented with selectable user identifiers and related information and permitted to input certain data. In this example logon area is configured for five different users namely Billy Christopher Pat Suzie and William each being identified by a text identifier and or graphical identifier . Thus William may begin logging on to the operating system by selecting either text identifier and or graphical identifier . If William has an established password then a password input field is displayed and configured to receive his password. Once William s password has been authenticated then William is logged on. If William does not have an established password then he would be logged on after selecting text identifier or graphical identifier . Logon screen can also be configured to display other user related information to a user. In this example user related information identifies that Suzie has ten 10 new messages.

A second title area is shown in this example along the left hand border of logon screen . Here second title area identifies the computer as the Den Computer . A selectable shut down mechanism is also provided to allow a user to shut down the computer.

Logon screen is by way of example the starting point for this description of the various methods and arrangements that allow for a plurality of separate and concurrent desktops and workspaces within the shared computing environment of computer . As described in more detail below and depicted in the flowcharts of a desktop switching scheme is implemented for use with Microsoft Windows NT or Windows 2000. Those skilled in the art however will recognize that the desktop switching scheme is applicable to other operating systems computers etc. For example the scheme is extended herein to further include WinStation switching each of which may include desktop switching as well.

The exemplary implementations presented herein utilize the Desktop application programming interfaces APIs available in Windows NT to create separate workspaces for each user who interactively logs on through logon screen . Using Windows NT profiles the user s data is separated from other user s data and depending on the user s or the computer manager s preferences access to other user s data can be secured. By using a separate desktop for each user multiple users can be logged on to the computer simultaneously. Switching users is very fast since it is just a desktop switch. No application state is lost during the switch because the applications run within the context of a desktop and are completely separated from one another.

To protect the user s logon session from other users if the users should happen to walk away form the computer without securing their workstation the operating system will automatically switch back to the logon desktop after a user configurable timeout period. The logon desktop is secured from the user desktops and can only switch back to a user desktop if the user is identified by an authentication entity within the operating system.

With this in mind attention is drawn to the flowchart in . Here process begins with the computer displaying logon screen . In step the user provides the necessary inputs to logon as part of the user authentication scheme. For example the user selects text identifier or graphical identifier and subsequently enters a password in password input field . The authentication process occurs in the operating system as depicted by decision step . If the authentication was not a success then in accord with step NO process returns to logon screen . If the authentication was a success then in accord with step YES process continues to decision step .

In decision step it is determined if the authenticated user from step is already logged in. This is accomplished by checking open desktops list ODL . If the authenticated user has not already logged in per step NO then in accordance with step a new desktop thread is created for this user. In step the thread and desktop information are then added to the list of users currently logged on within ODL . The user s thread also sets up the user environment in step and starts the user shell on their newly created desktop in step . In step the logon program switches to the user s new desktop . At this point the logon process is complete.

Returning to decision step if a desktop is already open for the user as demonstrated by an associated entry in ODL then step YES advances process to step . In step a switch is made to the existing desktop thread followed by a switch to the applicable desktop in step . In there are N 1 desktops as represented by desktops 

Reference is now made to wherein a flowchart depicts a process for logging off of a desktop . In this example there are three ways for the user to become logged off . The first takes place in step wherein the user intentionally and fully logs off. When such a logoff event is generated in step then in step the desktop is cleaned up ODL is updated and the thread is terminated. After step process returns to logon screen .

The second way for a user to become logged off is provided in step wherein the user switches desktops manually. At any point prior to logging off the user can initiate an action e.g. by user input which will return them to logon screen without signaling the user s thread that a logoff has occurred. When this happens the user s desktop remains running and all applications that have been started on that desktop continue to run. However the user is unable to see any of these applications because their desktop is essentially hidden. At this point the desktop is said to be switched out but it is still active. The user will need to log on again in accord with process to have the active desktop switched in .

The third way that a user can become logged off is shown in step wherein after a user configurable period of inactivity e.g. no mouse activity or keyboard input the operating system will assume that the user has stopped working on the computer for the time being and it will automatically switch back to logon screen . This helps to improve security by securing the user s desktop when they no longer appear to be using the computer. It also makes it easier for other users to utilize the computer and not worry about ending another user s session.

It is also possible to provide a plurality of separate and concurrent environments within the shared computing environment by switching remote processes such as for example WinStations instead of desktops. Logically WinStations contain multiple desktops. Creating a WinStation for each user and switching the active WinStation when a user logs on or switches back to logon screen could implement the same mechanism as described above.

Attention is now drawn to which is a block diagram depicting an exemplary arrangement for use in a computer that is configurable to support a plurality of user kernel sessions e.g. WinStations wherein the sessions are switched back and forth at various times depending upon the user. Here for example individual sessions are either currently operatively associated with the console e.g. controls display etc. of the computer i.e. currently connected or not currently operatively associated with the console of the computer i.e. currently disconnected .

Arrangement includes bad application manager BAM logic that is configured to stop start notify and or otherwise control certain applications or features thereof at various session times events associated with switching between sessions or disconnecting a current session.

In exemplary arrangement by way of example certain applications will be defined as falling into one of four categories referred to as BAM BAM BAM and BAM. Logic associated with each of these categories of applications is represented by BAM logic BAM logic and BAM logic .

With this in mind the description will now focus on the start of a first session session and then the start of a second session session and then the switching of sessions.

To begin with the computer and its operating system etc. are booted up per block . Next in block session is created by starting a user kernel session. In this example and those that follow it is assumed that various users will be required to logon. This occurs in the session login which is configured to display an interactive GUI or the like that prompts the user to login for example as described in the above multiple desktop arrangements. Next there is an authentication to verify that the user inputs from session login . Following authentication a desktop is provided to the user. At this point the user is fully logged in and his her user kernel session is currently connected such that the applicable computer resources are available for use.

Let us now assume for example that this user decides to open start an application from the desktop. By way of example the user may start a FOO application that is a single user application. Since there are no other sessions there should not be any problems with running the FOO application at this time. At other times there may be a problem running the FOO application for example if the FOO application was already running in another session and for whatever reason it is not possible to have two instances of the FOO application running simultaneously. This can occur for example when the first instance of the FOO application locks up a resource such as e.g. a file on the root of the hard drive which is required by the second instance of the FOO application. Other examples of problems caused by such applications include locking files in a shared folder and or tying up hardware resources such as e.g. serial ports etc. When these and or other problems occur the second instance of the FOO application will most likely fail to load or operate properly. As referred to herein these and other types of applications are termed bad applications .

Consequently in accordance with certain aspects of the present invention bad application manager BAM functionality is added in the form of BAM logic that can be for example provided with the operating system. In certain exemplary implementations of the present invention applications are to be tested or otherwise evaluated within a multi session environment to determine their behavior or misbehavior. Those applications that do not exhibit any problems can be deemed to be good applications . The remaining applications which will therefore be deemed to be bad applications may then be categorized based for example on the problems that occur during evaluation and or an approach that seems to support the desired multi user session environment.

By way of example in certain exemplary implementations of the present invention the so called bad applications are placed into to at least one of four categories BAM BAM BAM and BAM applications. These BAM applications may be identified in a listing or other like data structure that is associated with the BAM logic. For example a list of BAM applications is depicted in .

BAM applications are those applications that are basically non intrusive but may not behave well when two or more copies are run in the same computing environment. Referring to in the example above when the user selects the FOO application through desktop the FOO application is allowed to run since there are no other instances of the FOO application running at this time in other sessions. Conversely if there were another instance of the FOO application running then BAM logic would determine if the FOO Application is a BAM application per list of BAM applications and how to handle the user request to launch the FOO application in the current session.

An example of a decision process that may be implemented in BAM logic is shown in . Here in step the current user has requested to start an application that is already running in at least one other session. To determine if and or keep track of the applications that are running across a plurality of sessions a list of running applications is maintained. Also as shown a list of sessions is also maintained to keep track of the sessions that open i.e. the current connected session and all disconnected sessions .

Next in step a decision is made as to whether the requested application is a BAM application for example per list of BAM applications . If the requested application is not a BAM application then process continues with step wherein the requested application is started in the current session. If the requested application is a BAM application then process continues with step wherein for example a prompt message is displayed in the GUI notifying the user that another user is already running the requested application.

In step the user is given a choice of stopping quitting the application that is running in the other session. Here the user may be warned that stopping the application may cause the other user to loose important data. If the user decides to leave the application in the other session running then process moves to step wherein the request to start the application is canceled. If the user decides in step to stop the application that is running in the other session then process moves to step wherein the BAM application running in the other session is stopped. Next in step the requested BAM application is then started in the current session.

Returning now to from desktop the user can later elect to end the current session via logoff session . This will stop all applications etc. associated with the user. As shown by the dashed line session which in this example so far is the only session open returns to session login following logoff session

Rather than logging off the user or perhaps another user may elect to switch to another session per switch session . This session switch may be user initiated or the result of a timeout period having expired. In either case switch session leads to BAM logic .

BAM logic is configured to handle BAM applications. BAM applications are those applications that do not properly handle the switching of desktops and or sessions. For example certain applications may interfere with the display of the logon GUI associated with session logon . One example is a DVD player application that generates a video stream that interferes with the GUI display. Since BAM applications are so incompatible with the multi session environment BAM logic essentially preempts any of the problems by automatically stopping the BAM application before the session logon process begins again.

An example of a decision process that may be implemented in BAM logic is shown in . Here in step a session switch is initiated for example as described above. Next in step it is determined if a BAM application is running in the current session. This determination can be made for example based on the list of BAM applications . If there are no BAM applications running in the current session then process moves to step wherein session logon takes over. If there is a BAM application running in the current session then in step the BAM application s is stopped. Then process moves to step .

With reference once again to at this point in the example session is still running only it is at this point session is disconnected. Session logon would therefore present a login GUI through which the user that started session could log back on to continue session i.e. make session connected once again .

Let us assume instead that another user decides to logon through session logon . After verifying the new user s logon information authentication leads to BAM and BAM BAM logic in this example prior to creating a new session for this new user. BAM logic is configured to handle applications that are running in other sessions that may in some way interfere with the new session about to be created or re connected and or interfere with the new user in some manner.

BAM applications are those applications that may not release shared resources. For example service like applications that run in the background yet tie up resources for a particular user session may be considered BAM applications. One example of a BAM application is an application that supports the connectivity of a personal digital assistant PDA through a serial communication port. Such PDA applications usually synchronize files etc. between the PDA and the computer. Unfortunately such applications may lockup the serial port and therefore inhibit other users sessions from using the communication port.

An example of a decision process that may be implemented in BAM logic to handle BAM applications is shown in . Here in step a session switch is initiated. Next in step a determination is made as to whether any BAM applications are running in other sessions for example in session . This determination can be made for example based on the list of BAM applications . If there is a BAM application running then in step the BAM application s is stopped and information is maintained for example in the list of applications as to the BAM application that was stopped and the session that it was running in. This recorded information can later be used to restart the BAM application upon re connecting the previous session. Process then moves to step . Also as shown if a determination is made in step that there is no BAM application running then process moves ahead to step .

In step a decision is made as to whether there was a BAM application associated with the session that is about to be re connected that was previously stopped per step . If there was a BAM application that was previously stopped then in step the BAM application is restarted in the session to be joined. After that in step the session switch would continue.

Obviously in the example described above wherein the user and session are new the decision in step will be NO. As such process would move ahead to step and the session switch would continue.

BAM applications are those applications that are resource intensive play a lot of audio or perhaps in some other way may hinder the user of the session being created or re connected. One example of a BAM application is a media player application that continues to play audio even when the user session that launched the player is not connected. Hence if this BAM application is not stopped then the new user in the example above would have to listen to the audio playing from a previous now disconnected session.

An example of a decision process that may be implemented in BAM logic to handle BAM applications is shown in . Here in step a session switch is initiated causing a decision to be made in step as to whether a BAM application is running in a session. This decision may be made for example based on the list of BAM applications . If no BAM applications are running then in step the session switch continues. If there is a BAM application running then in step the BAM application is stopped. After that the session switch continues per step .

Returning again to and the exemplary new user session scenario from above following BAM logic session is started in create session . Although session logon and authentication are depicted as following create session it should be understood that these functions may be skipped in whole or part if authentication shares information e.g. the new user s credentials with authentication . As such it is assumed that the new session in the above example causes a new desktop to be created.

At this point the new user is able to start up applications etc. As shown however BAM logic as described earlier is used to control the potential deleterious effects of any BAM applications that the user may request to start up. Should the user decide to disconnect the session per switch session then as with session BAM logic will handle BAM applications and BAM logic will handle any BAM or BAM applications when another session e.g. session is created or session is reconnected. If the user of session decides to end the session i.e. per logoff session then in this example as shown in the dashed line session login will take over after session has ended.

As represented by the dots following BAM logic after session additional sessions can be created disconnected re connected or ended in a similar manner.

As illustrated session audio from various sessions is provided to kernel audio mixer which can selectively adjust the volume of the various inputs and mute them as well. In illustrative arrangement an exemplary audio stream is graphically depicted as having a session identifier ID that allows kernel audio mixer to determine which session audio stream is associated with. In this manner the proper audio signals will be played and the other session s audio signals will be essentially muted.

In accordance with still other implementations of the present invention the BAM logic above or other like logic can be configured to notify or in some other way identify certain session events for example session switching related events to applications good or bad applications that are running and which may be affected by the session event. depicts a process that illustrates this notification capability. Here in step a session event occurs or is about to occur. By way of example a session event may indicate a return to session logon the creation or re connection of a session or the disconnection of a session local or remote . Whatever the session event in step the applicable logic notifies one or more applications that are running in connected or disconnected sessions as deemed appropriate for a given system. In step if needed the logic assists the applications in responding to the session event.

Thus in certain implementations the notification capability in process may strengthen or otherwise augment the session switching oversight responsibility of the BAM logic. Here for example the notified applications may save data that might otherwise be lost due to the operation of the BAM logic unlock certain resources voluntarily stop mute their audio streams voluntarily stop running in part or whole or re start functions that were previously stopped.

In accordance with certain other aspects of the present invention the task of switching between users sessions may further be enhanced by adding a capability for the user to quickly initiate a switch for example by simply inputting a hot key combination or the like. Thus for example a user that is logged on may cause a switch to another user session by holding down a hot key combination that automatically brings up a graphical user interface or the like that shows what other sessions users may be selected and then switched to. This type of capability can be provided for example in logic associate with switch session . . . depicted in . The necessary BAM logic can be applied accordingly during this hot key type of switching process.

Although referred to as a hot key those skilled in the art will now recognize that a dedicated switch user input key may also be provided on the keyboard or in other locations on the computer console etc. and configured to initiate a similar user session switching process.

With these examples in mind reference is now made to which is a flow diagram of a process associated with an exemplary hot key based user session switching capability in accordance with certain implementations of the present invention.

In step the user presses or otherwise activates one or more hot keys to initiate a user session switching process. For an actual hot key combination in a computer running a Microsoft Windows operating system for example the user would continue to hold the hot key combination down during step and later release the depressed hot key combination in step . One exemplary hot key combination includes two standard keys on a keyboard namely the Windows Graphical Icon key and the letter Q key. Other combinations and or single keys may also be assigned this functionality.

In response to the continued user hot key input started step in step a decision is made as to whether the system is configured to support any other users. Assuming that there are other users supported by the computer then in step user identifying information is retrieved from the operating system for example. In certain configurations the user identifying information includes the name assigned to the user. In step should there be any specific graphical representation information associated with the user then such information is also retrieved. In certain implementations for example image and or graphical information is retrieved in step . In step an applicable graphical representation is generated based on the information retrieved in steps and . By way of example the graphical representation that is generated may include the user s name and associated image.

Returning to decision step steps and are then repeated for each of the potential users. Next in step each of the graphical user representations is displayed for the user through a graphical user interface GUI . In accordance with certain exemplary implementations the GM is configured to automatically rotate the selection of graphical representations in such a manner that when the user sees that the desired user s graphical representation is displayed as being selectable then the user can indeed select that the switch be made to that user by releasing or otherwise deactivating the hot key combination in step . Thus for example the GUI in step may visually rotate through the graphical representations while pausing briefly on each one so as to allow the user adequate time to select the graphical representation and switch to the associated user session. An example of one such GUI is illustrated in the screen shot depicted in .

As shown in a GUI display includes a background image having a plurality of user graphical representations visible there in and there over. For example user graphical representation is associated with an Administrator user user graphical representation is associated with user identified as Louie and user graphical representation is associated with user identified as LU . In this example graphical representation is associated with Louie is graphically high lighted as being selected selectable at the time of the screen shot. Graphical representation in this example includes a guitar graphic that is associated with the user Louie .

Assuming that the user decides to select to switch to Louie per step in then a corresponding user session switching process would be initiated. If Louie does not require a password or other like information to log on then the switching process would continue without requiring an applicable logon display. If Louie does require such additional inputs prior to beginning a new session and or returning to an existing session then GUI display can be configured to provide the appropriate dialog boxes etc. This is illustrated by dashed box within graphical representation which may be used to input a password or the like. As mentioned above BAM logic can be provided to support the user session switching logic.

In certain exemplary implementations GUI display is configured to rotate graphical representations within background in an animated fashion. This rotation is illustrated by dashed arrow which shows that graphical representation will be rotated clockwise to the position currently occupied by graphical representation . Here graphical representation would then occupy the position currently held by graphical representation .

In accordance with still other implementations a hot key combination may be assigned to each user such that the user may quickly switch to a new or existing session without requiring the logon screen or even the full GUI of being shown. This personal hot key may be kept secret. Similarly different hot key combinations can be operatively associated with different sets or groups of users for example to reduce the number of graphical representations that are displayed or add an additional deterrent to unauthorized access etc.

Although some preferred embodiments of the various methods and apparatuses of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description it will be understood that the invention is not limited to the exemplary implementations disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims.

