---

title: System and method for performing distributed consistency verification of a clustered file system
abstract: A system and method for performing a distributed consistency check of a clustered file system. File system functions for loading an inode and/or buffer tree are modified so that in response to either of these functions being invoked, a consistency check is performed. The consistency check verifies both local consistency on a node of the clustered file and a distributed check across the nodes of the storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301673&OS=08301673&RS=08301673
owner: NetApp, Inc.
number: 08301673
owner_city: Sunnyvale
owner_country: US
publication_date: 20071228
---
The present invention claims priority to U.S. Provisional Patent Application Ser. No. 60 877 920 filed Dec. 29 2006 entitled SYSTEM AND METHOD FOR PERFORMING DISTRIBUTED CONSISTENCY VERIFICATION OF A CLUSTERED FILE SYSTEM by Hyer Jr. et al. the contents of which are hereby incorporated by reference.

The present invention relates to clustered computer environments and more particularly to performing a consistency check of a clustered file system.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes wherein each volume stores one or more data containers. Yet often a large number of data access requests issued by the clients may be directed to a small number of data containers serviced by a particular storage system of the environment. A solution to such a problem is to distribute the volumes serviced by the particular storage system among all of the storage systems of the environment. This in turn distributes the data access requests along with the processing resources needed to service such requests among all of the storage systems thereby reducing the individual processing load on each storage system. However a noted disadvantage arises when only a single data container such as a file is heavily accessed by clients of the storage system environment. As a result the storage system attempting to service the requests directed to that data container may exceed its processing resources and become overburdened with a concomitant degradation of speed and performance.

One technique for overcoming the disadvantages of having a single data container that is heavily utilized is to stripe the data container across a plurality of volumes configured as a striped volume set SVS where each volume is serviced by a different storage system thereby distributing the load for the single data container among a plurality of storage systems. A technique for data container striping is described in U.S. Pat. No. 7 698 289 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER by Richard Jernigan et al. issued on Apr. 13 2010 the contents of which are hereby incorporated by reference.

Known storage operating systems typically contain a function such as a program or command to check and or repair i.e. verify an associated file system. Examples of such file system verification functions include the conventional UNIX based fsck program and the checkdisk command on Microsoft Windows based systems. These known file system verification functions typically execute while the file system being verified is offline. By offline it is meant that the file system is not available for data access by users of the file system.

In known examples a file system verification function is executed when a user believes that there is a problem with the file system e.g. a crash or other file system failure has occurred. However a noted disadvantage of known file system verification functions is the substantial amount of time required to perform the verification. As the file system is offline and therefore unavailable for data access by users this verification time results in a prolonged period in which the data stored in a file system is unavailable to users.

In storage systems involving a multi node cluster configuration such as that described in the above referenced United States Patent Application entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER additional complexity arises in ensuring that the file system is consistent. Individual verifications of each volume may return a consistent state however the overall striped volume arrangement may remain inconsistent. Thus a need arises for ensuring the consistency of a SVS.

The present invention overcomes the disadvantages of the prior art by providing a system and method for performing distributed consistency verification of a clustered file system configured to service a striped volume set SVS . Illustratively the SVS is implemented as a plurality of volumes within a clustered storage system comprising a plurality of nodes. A storage operating system executes on the nodes to implement the clustered file system. In the illustrative embodiment storage operating system functions that load selected objects such as inodes Load Inode and or buffer trees Load Buffer are modified so that before an inode and or buffer tree is returned to a process calling the loading function a procedure is performed to verify the inode and any related buffer trees of a volume within the SVS as well as ensuring that the SVS is consistent with respect to the inode. The verification procedure may also repair predetermined problems with file system consistency to ensure that the file system remains stable and useable.

When the process executing within the storage operating system calls either Load Inode or Load Buffer the modified function suspends return of the selected object until the verification procedure is performed. First a determination is made whether a local volume consistency verification has been performed i.e. whether the local volume is consistent regardless of the overall consistency of the SVS. If the local volume consistency verification has not been performed then the verification procedure loads the selected inode or buffer tree and determines if it is associated with a regular file or directory. If for example the selected inode is a regular file inode the verification procedure checks the associated buffer tree of the inode. This procedure insures that the buffer tree has valid pointers and that any given block does not have multiple pointers to it as well as other file system coherency checks. The verification procedure may also correct noted errors in the file system. If the selected inode is a directory inode the verification procedure performs a directory check.

Once the local volume consistency verification has been performed a distributed consistency verification is performed to ensure that the selected inode is consistent among all of the constituent volumes of the SVS. The distributed consistency verification is illustratively implemented by a set of verification processes executing as part of the storage operating system.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of data containers such as blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term Data ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS within a storage system cluster. As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

A set of verification processes is also contained within the file system . The verification checking processes illustratively implement file system operations of a verification procedure according to the present invention. Additionally the file system includes a function that loads inodes Load Inode and a function that loads buffer trees Load Buffer . In accordance with an illustrative embodiment of the present invention the Load Inode and Load Buffer functions are modified to perform verification operations whenever an inode and or buffer tree is loaded by the file system . The modified Load Inode and Load Buffer functions cooperate with the verification processes to illustratively implement the present invention as discussed further herein.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. Illustratively indexing into the inode file is performed via the load inode function which causes retrieval of a selected inode from the inode file for use in examining metadata associated therewith. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an inode number field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with this data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which preferably includes a meta data section and a data section . The information stored in the meta data section of each inode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of file its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file. The meta data section also includes a generation number . The contents of the data section of each inode may be interpreted differently depending upon the type of file inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include file system data or pointers the latter referencing 4 KB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 128 bytes of the inode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the length of the contents of the data container exceeds 64 bytes but less than or equal to 64 KB then the data section of the inode e.g. a first level inode comprises up to 16 pointers each of which references a 4 KB block of data on the disk.

Moreover if the size of the data is greater than 64 KB but less than or equal to 64 megabytes MB then each pointer in the data section of the inode e.g. a second level inode references an indirect block e.g. a first level L1 block that contains 1024 pointers each of which references a 4 KB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the inode e.g. a third level L3 inode references a double indirect block e.g. a second level L2 block that contains 1024 pointers each referencing an indirect e.g. a first level L1 block. The indirect block in turn contains 1024 pointers each of which references a 4 KB data block on disk. When accessing a file each block of the file may be loaded from disk into the memory .

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . An example of such a file system layout is described in U.S. patent application Ser. No. 10 836 817 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to Network Appliance Inc. now issued as U.S. Pat. No. 7 409 494 on Aug. 5 2008. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. inode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an inode file and its corresponding inode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level 1 L1 indirect blocks inode file level 0 L0 blocks. is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention. A root top level inode such as an embedded inode references indirect e.g. level 1 blocks . Note that there may be additional levels of indirect blocks e.g. level 2 level 3 depending upon the size of the file. The indirect blocks and inode contain pvbn vvbn pointer pair structures that ultimately reference data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes WAFL fsid filesystem file storage label file

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a filesystem file and a storage label file. The storage label file is illustratively a 4 KB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

In addition to being embodied as a container file having level 1 blocks organized as a container map the filesystem file includes block pointers that reference various file systems embodied as flexible volumes . The aggregate maintains these flexible volumes at special reserved inode numbers. Each flexible volume also has special reserved inode numbers within its flexible volume space that are used for among other things the block allocation bitmap structures. As noted the block allocation bitmap structures e.g. active map summary map and space map are located in each flexible volume.

Specifically each flexible volume has the same inode file structure content as the aggregate with the exception that there is no owner map and no WAFL fsid filesystem file storage label file directory structure in a hidden meta data root directory . To that end each flexible volume has a volinfo block that points to one or more fsinfo blocks each of which may represent a snapshot along with the active file system of the flexible volume. Each fsinfo block in turn points to an inode file that as noted has the same inode structure content as the aggregate with the exceptions noted above. Each flexible volume has its own inode file and distinct inode space with corresponding inode numbers as well as its own root fsid directory and subdirectories of files that can be exported separately from other flexible volumes.

The storage label file contained within the hidden meta data root directory of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system such as the volume name that information is loaded into the storage label file . Illustratively the storage label file includes the name of the associated flexible volume the online offline status of the flexible volume and other identity and state information of the associated flexible volume whether it is in the process of being created or destroyed .

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses a configuration table that maps the SVS ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry and a VLDB aggregate entry .

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N module sends an RPC to the VLDB process. In response the VLDB returns to the N module the appropriate mapping information including an ID of the D module that owns the data container. The N module caches the information in its configuration table and uses the D module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N module and D module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

An SVS illustratively comprises one meta data volume MDV configured to store a canonical copy of certain meta data including access control lists and directories associated with all data containers stored on the SVS and one or more data volumes DV configured to store at least data content of those containers. In addition for each data container stored on the SVS one volume is designated a container attribute volume CAV and as such is configured to store a canonical copy of certain rapidly changing attribute meta data including time stamps and container length associated with that container. is a schematic block diagram of the inode files of an SVS in accordance with an embodiment of the present invention. The SVS illustratively comprises three volumes namely MDV and two DVs . It should be noted that in alternate embodiments additional and or differing numbers of volumes may be utilized in accordance with the present invention. Illustratively the MDV stores a plurality of inodes including a root directory RD inode a directory DIR inode file F inodes and an ACL inode . Each of these inodes illustratively includes meta data M associated with the inode. In the illustrative embodiment each inode on the MDV does not include data D however in alternate embodiments the MDV may include user data.

In contrast each DV stores only file F inodes and ACL inode . According to the illustrative architecture a DV does not store directories or other device inodes constructs such as symbolic links however each DV does store F inodes and may store cached copies of ACL inodes that are arranged in the same locations as their respective inodes in the MDV . A particular DV may not store a copy of an inode until an I O request for the data container associated with the inode is received by the D Module serving a particular DV. Moreover the contents of the files denoted by these F inodes are periodically sparse according to SVS striping rules as described further herein. In addition since one volume is designated the CAV for each file stored on the SVS DV is designated the CAV for the file represented by inode and DV is the CAV for the files identified by inodes . Accordingly these CAVs cache certain rapidly changing attribute meta data M associated with those files such as e.g. file size as well as access and or modification time stamps .

The SVS is associated with a set of striping rules that define a stripe algorithm a stripe width and an ordered list of volumes within the SVS. The striping rules for each SVS are illustratively stored as an entry of VLDB and accessed by SVS ID. is a schematic block diagram of an exemplary VLDB SVS entry in accordance with an embodiment of the present invention. The VLDB entry includes a SVS ID field and one or more sets of striping rules . In alternate embodiments additional fields may be included. The SVS ID field contains the ID of a SVS which in operation is specified in data container handle .

Each set of striping rules illustratively includes a stripe width field a stripe algorithm ID field an ordered list of volumes field and in alternate embodiments additional fields . The striping rules contain information for identifying the organization of a SVS. For example the stripe algorithm ID field identifies a striping algorithm used with the SVS. In the illustrative embodiment multiple striping algorithms could be used with a SVS accordingly stripe algorithm ID is needed to identify which particular algorithm is utilized. Each striping algorithm in turn specifies the manner in which file content is apportioned as stripes across the plurality of volumes of the SVS. The stripe width field specifies the size width of each stripe. The ordered list of volumes field contains the IDs of the volumes comprising the SVS. Moreover the ordered list of volumes may specify the function and implementation of the various volumes and striping rules of the SVS. For example the first volume in the ordered list may denote the MDV of the SVS whereas the ordering of volumes in the list may denote the manner of implementing a particular striping algorithm e.g. round robin.

As noted the Locate function is provided that enables the VSM and other modules such as those of N module to locate a D module and its associated volume of a SVS in order to service an access request to a file. The Locate function takes as arguments at least i a SVS ID ii an offset within the file iii the inode number for the file and iv a set of striping rules and returns the volume on which that offset begins within the SVS . For example assume a data access request directed to a file is issued by a client and received at the N module of a node where it is parsed through the multi protocol engine to the appropriate protocol server of N module .

To determine the location of a D module to which to transmit a CF message the N module may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N module then executes the Locate function to identify the appropriate volume to which to direct an operation. Thereafter the N module may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D module . The protocol server of N module then transmits the CF message to the D module .

In accordance with an illustrative round robin striping algorithm volume A contains a stripe of file content or data D followed in sequence by two stripes of sparseness S another stripe of data D and two stripes of sparseness S . Volume B on the other hand contains a stripe of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S another stripe of data D and a stripe of sparseness S . Volume C continues the round robin striping pattern and to that end contains two stripes of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S and another stripe of data D .

The present invention provides a system and method for performing distributed consistency verification of a clustered file system configured to service a striped volume set SVS . Illustratively the SVS is implemented as a plurality of volumes within a clustered storage system comprising a plurality of nodes. A storage operating system executes on the nodes to implement the clustered file system. In the illustrative embodiment storage operating system functions that load selected objects such as inodes Load Inode and or buffer trees Load Buffer are modified so that before an inode and or buffer tree is returned to a process calling the loading function a procedure is performed to verify the inode and any related buffer trees of a volume within the SVS as well as ensuring that the SVS is consistent with respect to the inode. The verification procedure may also repair predetermined problems with file system consistency to ensure that the file system remains stable and useable.

When the process executing within the storage operating system calls either Load Inode or Load Buffer the modified function suspends return of the selected object until the verification procedure is performed. First a determination is made whether a local volume consistency verification has been performed i.e. whether the local volume is consistent regardless of the overall consistency of the SVS. If the local volume consistency verification has not been performed then the verification procedure loads the selected inode or buffer tree and determines if it is associated with a regular file or directory. If for example the selected inode is a regular file inode the verification procedure checks the associated buffer tree of the inode. This procedure insures that the buffer tree has valid pointers and that any given block does not have multiple pointers to it as well as other file system coherence checks. The verification procedure may also correct noted errors in the file system. If the selected inode is a directory inode the verification procedure performs a directory check.

Once the local volume consistency verification has been performed a distributed consistency verification is performed to ensure that the selected inode is consistent among all of the constituent volumes of the SVS. The distributed consistency verification is illustratively implemented by a set of verification processes executing as part of the storage operating system.

In accordance with the illustrative embodiment the Load Inode and Load Buffer functions perform local volume checks of inodes and buffer trees respectively. An initialization procedure of the illustrative distributed file system verification process is shown in . The procedure begins in step and continues to step where a user enters a distributed file system verification check command to the storage system via e.g. the CLI GUI or any other input methodology such as the management framework . In alternate embodiments the storage operating system can be configured so that the distributed file system check will automatically initiate upon a defined event e.g. a crash or other error condition. Upon an entry of the check command the file system suspends client messages in step . As used herein suspension of client messages means that the file system will accept file system commands including e.g. data write and or read commands however while the client messages are suspended the file system will not act upon process the file system command. To the process or client initiating the file system command it appears that there is a delay in the execution of the command. In step the local volume to be checked is unmounted. In the illustrative embodiment of the Data ONTAP storage operating system the unmounting of a volume causes flushing of any in core caches to the volume thus transitioning the physical disks of the volume to a consistent state. In step checking routines of the verification process are initialized. In the illustrative embodiment the file system includes a command that retrieves an inode for further processing Load Inode . To perform the on line checking the verification process modifies this Load Inode command to include a check of the file system structure e.g. inode or directory being accessed. The checking routines first perform a check of the inode to be retrieved before returning the inode to the process that called Load Inode . Next the volume is remounted as described below in procedure . Once the volume is remounted the file system resumes processing client messages in step such as those messages which have either been suspended or which are later received by the file system layer are processed using the modified Load Inode function. Thus any request for an inode first checks that inode and associated buffer tree before returning the inode to the calling process. The procedure then completes in step

In step the space map is loaded. The space map is a map of the various blocks of the file system noting which are utilized by the active file system and which are free to be allocated. In step the block type map is loaded. The block type map identifies the use of a block. For example a block could be utilized as a data holding block or as a directory block. The PCPI inodes are loaded in step and thereafter the snap maps are loaded in step . In step the quota trees are loaded. A quota tree or qtree is a subset of a volume that is defined by a directory. A qtree is essentially a mini volume with the property that every object within the qtree has a qtree ID in its inode. In the context of quotas the maximum amount of storage resources available to a qtree can be specified. Thus if it is desired to limit storage for a project having many users it would be appropriate to specify a quota on a qtree instead of an actual security object. Multiple qtrees can be created on a single volume with each qtree having a different size as desired . However the qtree can also be created without a limit quota . This information is scanned and identified by the file system to facilitate identification of the applicable qtree for e.g. a file on a volume.

As the file system metadata files are loaded using the modified Load Inode function each file is checked in accordance with the teachings of this invention. Thus by the completion of the volume mount procedure all required file system metadata files have been checked. Note that some files such as the inode file which contain a large quantity of data may be only selectively checked so as to reduce processing time and overhead.

In step a determination is made whether the local volume check has been completed for this particular inode. This may occur by for example examining a progress indicator described further below or by examining a bit set within the inode. In accordance with the illustrative embodiment each of the local volumes of the SVS is checked prior to checking the overall consistency of the SVS. If the local volume check has completed i.e. the individual inode has been verified on the volume being serviced the procedure branches to step and performs a SVS check. The procedure then completes in step .

However if in step it is determined that a local volume check has not completed then the procedure branches to step where the file system verification routine determines what type of inode has been requested. If the inode requested is a file inode then the routine performs a file inode check as described in procedure . However if the inode requested is a directory inode then the verification routine will perform a directory check as described in procedure .

To check an inode the buffer tree associated with the inode is verified in accordance with procedure shown in . Procedure illustratively operates by traversing the various branches of the buffer tree and verifying certain key items. The procedure begins in step and continues in step where the inode check verifies that all pointers in the buffer tree are valid. If a pointer is directed to an invalid block the pointer is cleared.

Next in step the inode checking process verifies that no cross links exist within the buffer tree. If a block has multiple pointers to it the inode checking routine clears all but the first pointer step . Thus the first block to point to a given block is retained with any other blocks having their pointers removed. Finally the inode is marked as checked step by e.g. modifying a tracking file described further below or by modifying a bit within the inode s metadata. The procedure then completes in step .

After the directory tree has been traversed upwards as far as possible the process determines if the directory is linked to the root directory of the volume step . If the directory is not linked to the root directory the process determines if the directory is a special directory that should not be linked to the root directory in step . An example of such a special directory would be a meta directory storing file system metadata. Metadirectories are further described in United States patent application Ser. No. 10 191 705 entitled METADATA DIRECTORY FILE SYSTEM by Douglas Santry et al. now issued as U.S. Pat. No. 7 386 546 on Jun. 10 2008. If the directory is not a special case then the directory is linked to a lost and found directory step for later processing. The lost and found directory can be accessed by a user or administrator of the storage system to determine what further actions should be taken with respect to these directories.

If the directory does link to the root directory or if the directory is a special case that does not need to link to the root directory the verification process then loads the file system objects that are one level beneath the directory step . These file system objects include for example subdirectories of the selected directory or files stored in the selected directory.

Next the verification process performs the above described checks of the buffer trees associated with the directory. In step the process verifies that all pointers within each buffer tree are valid. If there are invalid pointers i.e. pointers that point to invalid inodes or file data blocks the pointers are cleared. In step the process checks that no cross links exist within the buffer trees. If multiple blocks point to a given block the directory check procedure clears all but the first pointer in step . Finally in step the directory is marked has having been checked. This marking can be accomplished by the use of a tracking file described further below. The procedure then completes in step .

To ensure that all inodes of the file system are checked in a timely manner a background process not shown is initiated by the file system verification process. By background process it is meant generally a process executing at a low priority within the storage operating system that performs a given function with no user input. The procedure performed by this background process is shown in . The procedure begins in step . A counter N is initially set to a value of one step . The background process then calls the Load Inode function requesting the Nth inode i.e. Load Inode N in step . As the Load Inode function has been modified to incorporate checking the requested inode is checked. Next the counter increments e.g. increased by one in step . The background process determines if all inodes in the file system have been checked in step . This check can be accomplished by utilizing the file system tracking files described below. If all inodes have been checked the procedure completes step and exits. Otherwise the procedure loops back to function step . Thus this background process serially requests inodes using the Load Inode function which causes the inodes and associated buffer trees to be checked.

In the illustrative embodiment the file system verification process creates a file within the file system being checked. This file stores information relating to which inodes buffer trees and directories have been checked by the file system process. By storing the status within a file on the active file system memory is saved. In known examples of file system checking programs the status information relating to the progress of the file system check is stored in the memory of the computer executing the file system check. When the file system is large and includes a substantial number of inodes and directories the memory requirement to store the progress information. Thus by storing the information on files in the file system computer memory resources can be preserved.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

