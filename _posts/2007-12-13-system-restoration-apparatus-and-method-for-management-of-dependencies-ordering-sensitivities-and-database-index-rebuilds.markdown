---

title: System restoration apparatus and method for management of dependencies, ordering sensitivities, and database index rebuilds
abstract: A method, apparatus, and program product restore database data having dependencies or ordering sensitivities, or that incorporates a database index. Unresolved dependencies are identified in response to an attempt to restore data in a computer. The data restoration is deferred and the data is cached when it has an unresolved dependency. After the dependency is resolved, the data restoration is completed. The unresolved dependency may be based-on data that must be restored or created prior to completing restoration. Deferred data is cached in memory and tracked in a deferred operation table. Data that is deferred may be accessed so long as operations that access the underlying based-on data are denied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996370&OS=07996370&RS=07996370
owner: International Business Machines Corporation
number: 07996370
owner_city: Armonk
owner_country: US
publication_date: 20071213
---
The present invention relates to computing systems and more particularly to restoration of data having a dependency.

Databases and information systems comprise a large part of modern infrastructure. A database is a structured collection of records or data that is stored in a computer to answer a query. The query may come from a user of the computer another computer or a program. The information in the database can be utilized to make a decision. The database can be configured to store any type of information.

In a personal or business environment data is a valuable and important commodity. As such it is important to protect data from being lost or corrupted. In particular it is important to quickly recover data from a database into a working state after the failure of a computer. In a typical environment information in a database is copied and stored on a persistent backup media. The database in turn can be recovered from the backup media after a failure.

While in some environments a database can be recovered while a computer is offline in many high performance and high availability applications database recovery is required to occur while a computer is online and in an operational state. Otherwise the database recovery process could render the computer unavailable an unacceptable amount of time. Recovering a database while a computer is operational however can introduce significant complexities and difficulties due to the need to coordinate the recovery of database information with ongoing attempts to access information in the database.

Recovering a database may involve restoring logical objects based on objects ordering sensitivities i.e. some databases objects files libraries and indices may be required to be restored before others and rebuild indices. Typically an object library or index cannot be accessed by the user before it has been restored. Recovering a database involves the need for an operator or administrator to help recover the database the need to re spin backup media such as a tape drive one or more times and the need to rebuild database indexes.

In a typical database several dependency and ordering sensitivities may exist. There may be multiple indexes multiple libraries and multiple objects with several dependencies in other databases objects libraries or indexes. Consequently when restoring multiple libraries the user may have difficulties managing logical files or Structured Query Language SQL views that reside in a different library than their own based on or physical file. If a library with a logical file is restored before a library with an underlying physical file or based on file the logical file will not restore. A database recovery process normally requires the user to monitor a joblog for restoration failures. Alternately a database recovery process will query another file called an outfile to detect such failures. A notification will go to the outfile each time there is a dependency that has not been resolved. To restore a single logical file successfully it may be necessary to re spin tape media i.e. rewind the tape and perform another restore using the same media several times to restore based on files first. This problem is compounded when there are many logical files with other based on logical files.

A SQL Materialized Query Table MQT also called a summary table has the same problem with restoration as the SQL views and logical files described above. MQTs are physical files but like SQL views they may have dependencies on one or more based on files. Therefore an MQT cannot be restored if a based on file is missing.

Database indexes have the same problems as other logical files. However restoring a database index can be a Catch 22. An index cannot be restored if an underlying based on file is missing. Conversely if a based on file is restored first the index must be rebuilt. Rebuilding database indexes can be extremely time consuming oftentimes adding hours to the time required to recover a database. To avoid rebuilding an index it is necessary that the index be restored along with the based on files. When restoring networks of files that span libraries the user has no control over this problem and may only avoid the problem entirely by creating indexes in the same library as the based on files. This is a very restrictive design consideration and may not be an acceptable circumvention to certain database users.

Consequently there is a need to improve restoration of a database that has data with one or more dependencies.

Embodiments of the invention provide for data restoration in a computer that monitors the data for unresolved dependencies during a data restoration then caches tracks and defers restoration of the data with the dependency until the dependency has been resolved.

In accordance with embodiments of the invention the data restoration identifies at least one unresolved dependency that must be resolved for an entity to be restored in response to an attempt to restore the entity in a computer. The restoration of the entity to be restored is deferred and data associated with the entity is cached in response to identifying the unresolved dependency. After the dependency is resolved the restoration of the entity is completed. The unresolved dependency can be a based on entity that must be restored or created prior to restoration of the entity to be restored.

In one embodiment of the invention the entity to be restored is restored after the unresolved dependency of the entity has been restored. In another embodiment of the invention a user explicitly requests that the entity be restored because the unresolved dependency has been restored or created.

In one embodiment of the invention the entity to be restored and information about the entity to be restored are cached in a deferred operation table. When the restoration of the entity to be restored is complete the information on the entity to be restored is deleted from the deferred operation table. When all entities to be restored have been restored the deferred operation table may be deleted.

In one embodiment of the invention the entity to be restored is restored with an indication that it is deferred. The restored entity can be accessed but access is limited to operations on the restored entity that do not require access to any of its dependencies. These and other advantages will be apparent in light of the following figures and detailed description.

The invention provides a method apparatus and program product for restoring database data in a computer. In particular the invention provides for tracking caching and deferring the restoration of data that cannot be restored due to an unresolved dependency. The data to be restored may be an object library table logical file physical file metadata index of the database or may be a database itself. The data to be restored may furthermore be a subset of the data listed above. For simplicity the term object will generically be used to refer to all of the aforementioned types of data that are capable of being restored with the understanding being that the term should not be interpreted to refer merely to an object within the context of object oriented programming.

The object to be restored may simply be copied from a backup media device onto a target computer. However when the object is dependent on another underlying object there is said to be a dependency and restoration is more complex. A dependency occurs when an object points to or incorporates another object. When the object is dependent on another underlying object that has not been restored there is said to be an unresolved dependency. An object with an unresolved dependency typically cannot be fully restored until the dependency is resolved and as such the object with the unresolved dependency may be said to be missing one or more based on object. The based on object may satisfy a dependency and therefore must be restored before the object with the unresolved dependency may be restored. Generically the based on object may also be an object for which another object is dependent. Likewise a based on object itself might be dependent upon another object. The invention provides for gathering information to track and deferring objects with unresolved dependencies during a restoration. When the object to be restored is a logical file with an unresolved dependency the object to be restored is cached in a memory or mass storage device for later restoration. When the object to be restored is a physical file with an unresolved dependency information associated with the object such as a portion of the object or information describing the object is restored while the rest is cached in a memory or mass storage device for later restoration. In this way when the object to be restored is a physical file with an unresolved dependency it may be accessed but access is limited to operations on the restored entity that do not require access to the any of the dependencies. Likewise a based on object itself might be dependent upon another object.

Turning to the drawings wherein like numbers denote like parts throughout the several views illustrates a hardware and software environment for an apparatus suitable for implementing a method for database restoration management of dependencies ordering sensitivities and database index rebuilds consistent with the invention. Apparatus for purposes of this invention may represent any type of computer computer system server disk array or programmable device such as multi user computers single user computers handheld devices networked devices mobile phones gaming systems etc. Apparatus may be implemented using one or more networked computers e.g. in a cluster or other distributed computing system. Apparatus will be referred to as computer for brevity sake although it should be appreciated that the term apparatus may also include other suitable programmable electronic devices consistent with the invention.

Computer typically includes a central processing unit CPU including one or more microprocessors coupled to a memory along with several different types of peripheral devices e.g. a mass storage device a user interface including for example user input devices and a display and a network interface . The network interface communicates with one or more computers one or more network storage devices including for example a tape drive or one or more other network devices including for example a server over a network . Computer network storage device and networked device will be referred to as networked devices for brevity sake.

Computer is under the control of an operating system and executes or otherwise relies upon various computer software applications components programs files objects modules data structures etc. including for example a restoration engine engine and a deferred object table QADBRSDFR for use with the restoration process described herein. Moreover various applications components programs objects modules etc. may also execute on one or more processors in another networked device coupled to computer via a network e.g. in a distributed or client server computing environment.

In general the routines executed to implement the embodiments of the invention whether implemented as part of an operating system or a specific application component algorithm program object module or sequence of instructions or even a subset thereof will be referred to herein as computer program code or simply program code. Program code typically comprises one or more instructions that are resident at various times in memory and storage devices in a computer and that when read and executed by at least one processor in a computer cause that computer to perform the steps necessary to execute steps or elements embodying the various aspects of the invention. Moreover while the invention has and hereinafter will be described in the context of fully functioning computers and computer systems those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of forms and that the invention applies regardless of the particular type of computer readable media used to actually carry out the invention. Examples of computer readable media include but are not limited to recordable type media such as volatile and non volatile memory devices floppy and other removable disks hard disk drives tape drives optical disks e.g. CD ROM s DVD s HD DVD s Blu Ray Discs among others and transmission type media such as digital and analog communications links.

In addition various program code described hereinafter may be identified based upon the application or software component within which it is implemented in specific embodiments of the invention. However it should be appreciated that any particular program nomenclature that follows is merely for convenience such as referring to restoration engine as engine and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature. Furthermore given the typically endless number of manners in which computer programs may be organized into routines procedures methods modules objects and the like as well as the various manners in which program functionality may be allocated among various software layers that are resident within a typical computer e.g. operating systems libraries Application Programming Interfaces APIs applications applets etc. it should be appreciated that the invention is not limited to the specific organization and allocation of program functionality described herein.

Those skilled in the art will recognize that the environment illustrated in is not intended to limit the present invention. Indeed those skilled in the art will recognize that other alternative hardware and or software environments may be used without departing from the scope of the invention.

In the environment illustrated in a restoration process consistent with an embodiment of the invention is initiated by a user an operator or an administrator of computer . In one embodiment the user types a command that is captured by user interface and instructs computer to restore data to a target device. The target device may be computer another computer in communication with computer or a networked device in communication with computer through network . The data may be stored in memory mass storage or a networked device. The data to be restored may be an application component algorithm program physical file logical file file object entity Structured Query Language SQL view SQL Materialized Query Table MQT database index SQL collection library table journal module or sequence of instructions among other types of data.

In an alternate embodiment mass storage includes a backup media device which may include a tape drive for example . In this alternate restoration process consistent with the invention the command from the user instructs computer to restore data from the backup media device to a target device. The target device may be computer another computer in communication with computer or a networked device.

In a further alternate embodiment a restoration process consistent with the invention may be initiated from one of the networked devices. For example a networked device may initiate a restoration process by instructing computer to restore data to a target device. The target device may be computer another computer in communication with computer or a networked device. In this way both the initiation of the restoration and the information restored may proceed across network .

Those skilled in the art will recognize that the restoration environments illustrated above and in are not intended to limit the present invention. Those skilled in the art will recognize that a process or program rather than a user an operator or an administrator may initiate a restoration process. Those skilled in the art will also recognize that data file entity and object may be used interchangeably without departing from the scope of the invention. Those skilled in the art will further recognize that target machine and backup media device may specify simply the location the data is to be restored and the location where the data is stored respectively. Indeed those skilled in the art will recognize that other alternative restoration environments may be used without departing from the scope of the invention.

Engine may be implemented using program code that provides a fast simple and virtual method for managing object dependencies when restoring objects whose dependency networks may span multiple libraries or SQL collections. Engine is configured to eliminate the need for the user to manage special ordering grouping or processing of objects that are being restored from backup media. Engine also often eliminates the need to re access the backup media device when restoring data to pick up an object that did not restore on a first pass because one or more based on objects did not exist. Engine also minimizes or eliminates the need to rebuild database indexes. Engine furthermore often eliminates the need for the user operator or administrator to monitor joblogs or query outfiles to detect an ordering induced failure or understand a dependency network hierarchy.

At step a request for restoration of data is received. The restoration request may include the name of one or more files objects libraries databases or the name of at least one set of data to be restored. The restoration request may also include the location of the data such as the location or address of the backup media device the location where the data is to be restored such as the location or address of the target machine and a defer identification DFRID to assign to files that cannot be restored. The DFRID is an optional parameter specified in a restoration request that provides an association between a collective set of deferred data. Engine pre processes the data to be restored at step by identifying the location of the data the objects to be restored the target machine to which the objects are to be restored and loading the object descriptor of the first object to be restored.

At step engine determines whether the object is a physical object. When the object is a physical object engine determines whether the physical object is an MQT at step . Engine determines whether the physical object is an MQT by referencing a File Definition Template FDT of the physical object. An FDT consistent with one embodiment of the invention contains information about the basic structure of objects and is used when creating extracting or performing operations against objects. The information in the FDT may include the object name the library of the object the classification of the object size of the object whether the object can be restored despite the non existence of one or more deferred or absent based on objects pointers to based on objects names and libraries of based on objects and whether the object is deferred. When the physical object is not an MQT it is restored at step . At step the physical object is loaded off the backup media device onto the target machine with the physical object s FDT data and indices. In this way restoration of the physical object is complete.

Returning to step if the physical object is an MQT engine determines at step whether all based on objects of the MQT are present. When all based on objects of the MQT are present the MQT is restored at step . At step the MQT is loaded off the backup media device and onto the target machine with the MQT FDT a query access plan for the MQT is created pointers to the based on files are stored in the MQT FDT and the MQT is added to all directories of its based on files. In this way restoration of the MQT is complete.

Returning to step in the event that at least one based on object of the MQT is absent engine determines whether a DFRID was specified in the restoration request at step . When an MQT is determined to have at least one based on object absent and a DFRID has been specified with the restoration request the specified DFRID is associated with the MQT with at least one absent based on object and engine writes a corresponding deferral record in QADBRSDFR at step . QADBRSDFR is populated with deferral records that contain information about deferred and cached objects. The information in a deferral record may include the DFRID of the deferred object the deferred object name the library of the deferred object the classification of the deferred object including whether the object is an MQT the library name of at least one absent or deferred based on object the name of at least one absent or deferred based on object the actual data comprising an object and or other object information. Engine is configured to obtain some of the information written to QADBRSDFR from the FDT of the object.

At step engine creates the MQT file structure. The file structure of the MQT may include a reservation of the space required and the data space format of the MQT such as number of columns and rows but not the actual data in the MQT . Also at step engine loads the MQT s FDT and the data in the MQT onto the target machine and sets a flag on the target machine MQT s FDT indicating that the target machine MQT is deferred. In this way a deferred MQT is a viewable and useable object but functions performed on the deferred MQT that require access to its based on files will fail. The deferred MQT may decrease the time required for the restoration process by restoring the data space for the deferred MQT from the backup media on the first pass.

Returning to step when a request for restoration does not specify a DFRID and the physical object is an MQT with one or more based on objects absent engine declares an error and does not restore the MQT at step . At step engine may also make an entry in a joblog or outfile to notify a user of the failure.

Referring back to step when the object is not a physical object and is thus a logical object engine proceeds to step . At step engine determines whether all based on objects of the logical object are present. When all based on objects of the logical object are present engine will proceed to step . At step the file structures of the logical object are created on the target machine. Also at step the logical object is loaded onto the target machine with the logical object FDT a query access plan for the logical object is created for SQL views and pointers to the based on files are stored in the logical object FDT. In this way restoration of the logical object is complete. Only when all based on objects of a logical object are present will the engine create the logical object file structures and restore the logical object and logical object FDT.

Returning to step engine proceeds to step when it determines that at least one based on object is absent from the logical object. At step engine determines whether a DFRID was specified in the restoration request. When the logical object is determined to have at least one based on object absent and a DFRID has been specified with the restoration request that DFRID is associated with the logical object with at least one absent based on object and engine writes a corresponding deferral record in QADBRSDFR at step . Also at step the logical object s FDT is cached in the deferral record.

Returning to step when a request for restoration does not specify a DFRID and the logical object has at least one based on object absent engine declares an error and does not restore the logical object at step . Also at step engine may make an entry in a joblog or outfile to notify a user of the failure.

After engine has completed step or it determines whether an implicit restoration is available for a deferred MQT or cached deferred logical object collectively cached object at step . At step engine will implicitly restore a cached object when an object was restored in steps or there was a DFRID specified for the restoration process and a cached object with the same DFRID is dependent on a newly restored object. In this way engine may determine whether one or more cached objects depended on the newly restored object. In general when an object is determined to be dependent upon a cached object the object and cached object are typically assigned the same DFRID and the restoration of both is deferred. In this way the DFRID provides an association between a collective set of cached objects. As such in one embodiment of the invention there may be a group of nested cached objects assigned the same DFRID. For example a cached object O may have an unresolved dependency in the form of a first cached based on object A . Likewise the first cached based on object A may in turn have an unresolved dependency in the form of a second cached based on object B . The cached object first cached based on object and second cached based on object will all have information cached in a deferral record in the QADBRSDFR and assigned the same DFRID during a restoration process. The matching DFRIDs indicate a possible group dependency. To further illustrate the first cached object may be restored only after its second cached based on object has been restored i.e. B must be restored before A and the cached object may be restored only after the first cached based on object has been restored i.e. in summation B must be restored before A and A must be restored before O . This process may occur in an implicit restoration.

Returning back to step when there is no implicit restoration at step or after completing steps or engine determines whether there are more object descriptors for the restoration at step . When there are more object descriptors which may indicate that the restoration process is not complete the engine advances the to the next object descriptor at step and proceeds to restore the next object at step .

Returning back to step when there are no more object descriptors which may indicate that the restoration process has completed the restoration process may terminate at step . After a restoration process terminates cached objects that have not been implicitly restored remain in memory or mass storage and QADBRSDFR remains in memory . Cached objects may be restored by a subsequent restoration command that specifies the particular DFRID of the cached deferred objects stored in QADBRSDFR . In this way one or more cached objects dependent on data that is not restored in a current restoration process may be restored at a subsequent time without having to re access the backup media device.

Referring back to step if there is an implicit restoration available engine initiates an implicit restoration at step . is an illustration of an implicit restoration process engine may undertake to implicitly restore cached objects consistent with an embodiment of the invention. Referring to at step engine accesses QADBRSDFR and finds the first deferral record that has a matching DFRID of the object restored at steps or of . At step engine determines if the deferral record is incomplete. When the record is not incomplete the engine will proceed to step to determine whether the deferral record specifies a deferred MQT. Referring back to step when the record is complete engine will delete the incomplete deferral record at step . An incomplete deferral record may specify a DFRID and the classification of the deferred object but then fail to specify the name or dependencies of the deferred object. An incomplete deferral record may also specify a DFRID and the classification of the deferred object but specify a deferred object that is invalid or does not exist. After the incomplete deferral record has been deleted engine reads the next deferral record with the specified DFRID at step .

Engine determines from the deferral record whether the deferred object is a MQT at step . When the deferred object is a MQT engine resolves to the deferred MQT and verifies it at step . Engine verifies the deferred MQT by referencing the deferred MQT s FDT to determine if the deferred MQT is a physical object has the classification of MQT and is in a deferred state.

When the deferred MQT is verified engine determines whether all based on objects of the deferred MQT have been restored to the target machine at step . If all based on objects of the deferred MQT are present engine will complete the deferred MQT s restoration at step by resetting the flag in the deferred MQT s FDT to indicate the deferred MQT is no longer deferred creating a query access plan for the MQT storing pointers to the based on objects of the MQT in the MQT s FDT and adding the MQT to all directories of its based on objects. At step engine deletes the record in QADBRSDFR corresponding to the restored MQT. Engine reads the next deferral record with the specified DFRID at step .

Referring back to step when the cached object is not a deferred MQT engine determines the cached object is a cached logical object. At step engine determines whether all based on objects of the cached logical object have been restored. When all based on objects of the cached logical object have been restored the file structures of the logical object are created on the target machine at step . Also at step the cached logical object is loaded onto the target machine into the corresponding file structures the cached logical object FDT is loaded onto the target machine a query access plan for the newly restored SQL view is created and pointers to the based on objects are stored in the newly restored logical object FDT. At step engine deletes the deferral record in QADBRSDFR corresponding to the recently deleted cached logical object. Engine reads the next deferral record with the specified DFRID at step .

When the cached object cannot be verified at step or at least one based on object of the cached object is found to be absent as determined at step or step engine determines if the deferral record requires an update at step . When the deferral record requires an update the engine updates the deferral record in QADBRSDFR at step . A deferral record update may be required if it is determined at step that the physical object was not an MQT or at step or that one or more based on objects of the deferred object are still absent.

After completing steps or or determining that no record requires an update in step engine reads the next deferral record with the specified DFRID to determine if more recursion is required in the implicit restoration at step . At step engine determines whether there are more deferral records in the QADBRSDFR . More deferral records may indicate that the implicit restoration process is not complete and engine determines if the deferral record is incomplete at step . A lack of deferral records may indicate that the implicit restoration process has completed and the restoration process will continue to step as shown in .

In one embodiment of the invention after a restoration process consistent with an embodiment of the invention and illustrated in engine may be configured to restore data that was not restored during the restoration or implicit restoration processes. is a flowchart illustrating an explicit cached data restoration process explicit restoration engine may undertake to restore cached objects consistent with an embodiment of the invention. At step a request for explicit restoration will be received by engine. The request for explicit restoration may be initiated by an operator administrator or user. The explicit restoration request will specify a DFRID corresponding to the DFRID of a cached object that had previously been cached tracked and deferred. At step QADBRSDFR is verified. To verify QADBRSDFR engine resolves to the table and determines whether it exists is bogus or is damaged. In particular the QADBRSDFR is verified for bogosity to prevent security exposure whereby a user may delete the QADBRSDFR and create one with the same name possibly enabling a Trojan horse security issue.

If QADBRSDFR is non existent bogus or damaged engine will specify an error at step and terminate the explicit restoration at step . Engine may also make an entry in a joblog or outfile to notify a user of the failure of the explicit restoration at step .

Returning to step if QADBRSDFR is verified engine resolves to the first deferral record with a matching DFRID to that of the DFRID specified in the explicit restoration request at step . At step engine determines whether the end of the QADBRSDFR was reached while searching for the first deferral record with the matching DFRID. If the end of the deferral records was reached engine terminates the explicit restoration at step .

When a deferral record with a matching DFRID to that of the DFRID specified in the explicit restoration request is found engine determines whether the deferral record is incomplete at step . When the record is complete engine will proceed to determine whether the cached object specified by the deferral record is a deferred MQT at step . When the record is incomplete engine will delete any incomplete records at step . An incomplete deferral record may include a DFRID and the classification of the cached object but then fail to specify the name or dependencies of the cached object. An incomplete deferral record may also include a DFRID and the classification of the cached object but specify a cached object that is invalid or does not exist.

Referring back to step engine determines from the deferral record whether the cached object is a deferred MQT at step . When the cached object is a deferred MQT engine resolves to the deferred MQT and verifies it at step . Engine verifies the deferred MQT by referencing the deferred MQT FDT to determine if the deferred MQT is a physical object has the classification of MQT and is in a deferred state. When the deferred MQT is verified engine determines whether all based on objects of the deferred MQT have been restored to the target machine at step . When all based on objects of the deferred MQT are present engine will complete the MQT restoration at step by resetting the flag in the deferred MQT s FDT to indicate that deferred MQT is no longer deferred creating a query access plan for the MQT storing pointers to the based on files in the MQT s FDT and adding the MQT to all directories of its based on files. At step engine deletes the record in QADBRSDFR corresponding to the restored MQT. Engine reads the next deferral record to find a matching DFRID to that of the DFRID specified for the explicit restoration at step .

Referring back to step if the cached object is not a deferred MQT it will be determined to be a cached logical object. When the cached object is a cached logical object engine resolves to the cached logical object and determines whether all based on objects of the cached logical object have been restored at step . At step the file structures of the cached logical object are created on the target machine. Also at step the cached logical object is loaded onto the target machine with the cached logical object FDT a query access plan for the newly restored SQL view is created and pointers to the based on objects are stored in the newly restored logical object FDT. At step engine deletes the deferral record in QADBRSDFR corresponding to the restored logical object. Engine reads the next deferral record to find a matching DFRID to that of the DFRID specified in the explicit restoration request at step .

If the cached object cannot be verified at step or one or more based on objects of the cached object are found to be absent in step or step engine determines if the deferral record requires an update at step . If so engine updates the deferral record in QADBRSDFR at step .

After completing steps or or determining no record requires an update in step engine reads the next deferral record with the specified DFRID to determine if more recursion is required in the explicit restoration at step . Engine then returns to step and determines if there are more deferral records in QADBRSDFR .

Embodiments of the invention create a deferred object on the target machine that can be viewed or accessed. However access to the deferred object may be limited to prevent access to a deferred object s based on objects. In this way if a deferred object has unresolved dependencies i.e. one or more based on objects of the deferred object is still absent there are restricted operations available for the deferred object. In particular a deferred MQT may be created on the target machine and viewed or accessed while a request to access based on objects of the deferred MQT will be denied. For example an attempt to write or change data on the deferred object will be allowed as will a query as to the size name or characteristics of the deferred object. However some examples of operations that access the based on objects of a deferred object that may be restricted include SQL ALTER TABLE and REFRESH TABLE statements.

At step the state of the deferred object is determined. The state is determined by referencing the deferred object s FDT for the state of the object. When the deferred object is still deferred the request is analyzed to determine whether it requires access to one or more based on objects of the deferred object at step . When the request is attempting to access one or more based on objects of the deferred object an error is declared at step indicating that the object is not valid for the operation. Returning to step when the request is not attempting to access one or more based on objects of the deferred object the request is allowed and the access to the deferred object is granted at step .

Referring back to step when the deferred object is no longer in a deferred state the request is allowed and the access to the deferred object is granted at step . The process for determining whether access is allowed for a deferred object may end at step .

While the present invention has been illustrated by a description of the various embodiments and while these embodiments have been described in considerable detail it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. Additional advantages and modifications will readily appear to those skilled in the art. Thus the invention in its broader aspects is therefore not limited to the specific details representative apparatus and method and illustrative example shown and described. Accordingly departures may be made from such details without departing from the spirit or scope of applicants general inventive concept.

