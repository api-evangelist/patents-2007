---

title: Trade strategy monitor platform
abstract: Described are methods and systems, including computer program products, for trade strategy monitoring. A back-end server can receive a first input from a first client device indicative of a first trade strategy and a first test parameter. The back-end server can obtain historical data associated with the first trade strategy, execute the first trade strategy on the historical data in accordance with the first test parameter, and transmit the results in a normalized format to the first client device. The back-end server can receive a second input from a second client device indicative of a second trade strategy and a second test parameter. The back-end server can obtain historical data associated with the second trade strategy, execute the second trade strategy on the historical data in accordance with the second test parameter, and transmits the results in a normalized format to the second client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08051000&OS=08051000&RS=08051000
owner: FMR LLC
number: 08051000
owner_city: Boston
owner_country: US
publication_date: 20071106
---
The present invention relates generally to a financial services system that enables users to develop test and execute trading strategies.

As the Internet has become more widespread the amount of information it can make readily available to the public has given rise to new products in the financial services industry. Whereas investors previously relied upon expert analysis and recommendations for specific stock or fund performances and trends in the market the ability to access and process virtually unlimited amounts of information has given traders a new level of control over their investing decisions. By analyzing information themselves traders can detect trends and patterns that indicate favorable trade opportunities.

Nevertheless traders need environments in which to develop and test their investment strategies before expending capital on actual purchases. Backtesting is the practice of simulating a trade strategy by running it upon historical data thus enabling traders to view how their strategy would have fared over a defined timeframe. Fidelity Wealth Lab Pro is at the forefront in providing backtesting capability. It enables users to test strategies on entire portfolios of stocks and it places almost exhaustive levels of market data at the users disposal. Users have access to at least ten years of historical end of day data two years of intra day price data six years of fundamental data and ten years of economic indicators. If desired users may access streaming real time data as part of their chosen backtesting strategy. Wealth Lab Pro is a thick client application that loads and executes on the traders computer.

Traders gain valuable insight from obtaining and analyzing the results of backtesting. Backtesting enables them to optimize their strategies by comparing the effectiveness of alternatives and evaluating refinements as well as the results compared to a buy and hold strategy. It also helps them test theories of which combinations of economic fundamental or technical indicators are best for selecting outperforming stocks. Results also help create risk management policies such as stop loss guidelines and value at risk limits or profit optimization predictions based on support resistance and breakout levels. It also permits traders to set margin and money management rules such as would be used in real time financial trading situations.

Wealth Lab Pro also provides numerous options and avenues for developing investment strategies. Users may access trade strategies developed by other users also as is or as building blocks. Alternatively traders may develop trade strategies from the ground up. Once a strategy is established the criteria used for that strategy can be changed by either reprogramming the strategy or reconfiguring the strategy with a rules wizard.

In one aspect there is a method of monitoring a plurality of trade strategies in a single window. The method can have the steps of installing a plurality of trade strategies in the single window of a strategy monitor and activating the trade strategies to execute automatically and independently of one another. The plurality of trade strategies can include a first trade strategy with a value of a parameter that is different from the value of a parameter of a second trade strategy.

In another aspect there is a computer program product embodied in an information carrier. The instructions of the computer program product can cause a data processing apparatus to install a plurality of trade strategies in the single window of a strategy monitor and activate the plurality of trade strategies to execute automatically and independently from one another. The plurality of trade strategies can include a first trade strategy with a value of a parameter that is different from the value of a parameter of a second trade strategy.

In another aspect there is a system for developing and testing financial strategies that has a strategy monitor. A plurality of trade strategies can be installed in the single window of a strategy monitor. The plurality of trade strategies can include a first trade strategy with a value of a parameter that is different from the value of a parameter of a second trade strategy. The strategy monitor can activate the plurality of trade strategies so they execute automatically and independently of one another.

In another aspect there is a system for developing and testing financial strategies with a means for installing a plurality of trade strategy in a single window and for activating the plurality of trade strategies to execute automatically and independently of one another. The plurality of trade strategies can include a first trade strategy with a value of a parameter that is different from the value of a parameter of a second trade strategy.

In other examples any of the aspects above can include one or more of the following features. The parameter can be an account identifier a set of one or more symbols a data scale a data rate a data source a time scale a length of back history a position sizing setting or any combination thereof. The single window of the strategy monitor can display alerts for any trade strategy. Alerts generated by a trade strategy can be automatically converted to orders. Requests for updated data associated with a symbol associated with a trade strategy can result in a determination that a symbol is invalid. The determination that a symbol is invalid can occur when the number of time outs associated with the symbol equals a predetermined number. The user can configure an action to be taken if a symbol is determined to be invalid. The action taken can be deletion from a symbol set change to a known valid symbol removal from quarantine or maintenance of the present state. The action can lead to updating historical data associated with the symbol.

In other examples any of the aspects above can include one or more of the following features. A plurality of icons representative of data which can be graphed with respect to time can be displayed. A user can select at least one icon and drag it to a graph. The data associated with the icon can be graphed on a time axis and the time axis can display other data associated with a trade strategy. The icons can present data such as earnings per share insider transactions CPI CPI housing employment level gasoline company balance sheet information cash flow liabilities total sales housing starts the rate of inflation market breadth advancing issues declining issues analyst ratings P E ratios opening and closing bids standard deviations simple moving averages share price volume or any combination thereof.

In other examples any of the aspects above can include one or more of the following features. A first subset of historical data corresponding to the first trade strategy can be locally cached. A second subset of historical data corresponding to the first trade strategy can be requested from a financial services provider. The second subset of historical data can be received and stored with the previously cached first subset. The first trade strategy can be executed using at least a portion of the historical data in the cache. The second subset of historical data can be daily based historical financial data intraday based historical financial data or data that was streaming the previous day. The request for the second subset of historical data can be adjusted so the returned subset overlaps the locally cached first subset. The overlapping data between the first and second subsets can be compared and the data in the cache corrected accordingly.

In another aspect there is a method for backtesting a trade strategy. During this method a back end server can receive a first input from a first client device indicative of a first trade strategy and a first test parameter. The back end server can obtain historical data associated with the first trade strategy execute the first trade strategy on the historical data in accordance with the first test parameter and transmit the results in a normalized format to the first client device. The back end server can receive a second input from a second client device indicative of a second trade strategy and a second test parameter. The back end server can obtain historical data associated with the second trade strategy execute the second trade strategy on the historical data in accordance with the second test parameter and transmits the results in a normalized format to the second client device.

In another aspect there is a computer program product tangibly embodied in an information carrier. The instructions of the computer program product can cause a data processing apparatus to receive a first input from a first client device indicative of a first trade strategy and a first test parameter obtain historical data associated with the first trade strategy execute the first trade strategy on the historical data in accordance with the first test parameter transmit the results in a normalized format to the first client device receive a second input from a second client device indicative of a second trade strategy and a second test parameter obtain historical data associated with the second trade strategy execute the second trade strategy on the historical data in accordance with the second test parameter and transmit the results in a normalized format to the second client device.

In another aspect there is a system for developing and testing financial services that has a back end server. The back end server can receive a first input from a first client device indicative of a first trade strategy and a first test parameter obtain historical data associated with the first trade strategy execute the first trade strategy on the historical data in accordance with the first test parameter and transmit the results in a normalized format to the first client device. The back end server can also receive a second input from a second client device indicative of a second trade strategy and a second test parameter obtain historical data associated with the second trade strategy execute the second trade strategy on the historical data in accordance with the second test parameter and transmit the results in a normalized format to the second client device.

In another aspect there is a system for developing and testing financial services with a means for receiving and processing inputs associated with a plurality of trade strategies. The means can receive a first input from a first client device indicative of a first trade strategy and a first test parameter obtain historical data associated with the first trade strategy execute the first trade strategy on the historical data in accordance with the first test parameter transmit the results in a normalized format to the first client device receive a second input from a second client device indicative of a second trade strategy and a second test parameter obtain historical data associated with the second trade strategy execute the second trade strategy on the historical data in accordance with the second test parameter and transmit the results in a normalized format to the second client device.

In other examples any of the aspects above can include one or more of the following features. The first input can be defined using a Web service. The normalized format can be extensible markup language. The results transmitted to the first client device can be displayed. The first test parameter can be associated with raw profit loss analysis based on a fixed currency amount raw profit loss analysis based on a fixed number of shares profit loss analysis based on a fixed currency amount wherein the starting capital is adjusted based on the profit loss of a previous execution of the trade strategy profit loss analysis based on a fixed share per trade wherein the starting capital is adjusted based on the profit loss of a previous execution of the trade strategy supplied starting capital simulation mode using a fixed percent of existing equity available for the test user definition of the number of shares or amount of currency used for each test or any combination thereof. The user can generate a module representing a first trade strategy that can be stored on a storage device. An API can be defined for generating a module. The module can have a viewable document including one or more rules of the trade strategy. The module can have executable code not readable by the user. The module can be generated using a programming tool from a third party vendor such as Eclipse from IBM Visual Studio from Microsoft or both.

Any of the aspects or features described herein may include one or more of the following advantages. A trader can view and activate multiple trade strategies in the same window and monitor alerts generated from those heterogeneous trade strategies using the same window. Bad symbols are detected and can be managed by user preference. Fundamental data can be added to a display without having to reprogram or use a rules wizard. Storing historical data locally and updating enables faster access to the data less network resource monopolization and greater access to corrected data. Backtesting can be performed using a thin client model conserving and or minimizing desktop resources needed by traders to perform analytics. Trade strategies can be easily developed through the use of extended objects enabling a trader to generate and share a trading strategy without revealing the underlying code or algorithms for that trading strategy.

Other aspects and advantages of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating the principles of the invention by way of example only.

Techniques for financial services systems and methods are herein described. As described in more detail below components of some of the embodiments of systems may include a financial services application that may be displayed on a desktop or client computer system one or more server systems local storage units and one or more central entities. Various features of the financial services systems enable or facilitate trade strategy development testing and execution.

Referring to the user may install one or more trade strategies on the strategy monitor Step . For example referring to an exemplary display in the user may install a trade strategy by clicking Add Strategy button . Alternatively in another exemplary display in the user may install a trade strategy by right clicking and selecting Add a Strategy option from a generated menu displayed on top of a strategy monitor window . Installation places the trade strategy in the single window of the strategy monitor e.g. window .

The user then configures the trade strategy Step . Configuration may be achieved by selecting parameters defining conditions under which the trade strategy will be executed. The exemplary display of illustrates a window that is generated to enable a user to input values for certain configurable parameters associated with a trade strategy. Parameters may include the amount of data that will be used during a backtest data range the amount of money or shares allocated to each trade position size the frequency of data updates scale or time scale or the one or more stock symbols the strategy will be tested on data set or symbol set . The user may also choose to have alerts generated by the trade strategy automatically converted to orders Automatically Stage Orders from Strategy Alerts . A user may also configure parameters that depend upon the trade strategy itself. Although not shown the user may designate the real or hypothetical account the trades generated from a trade strategy should be placed in.

After a trade strategy has been configured the user may choose to activate a trade strategy or leave it dormant Step . The user may activate a trade strategy by clicking a button that controls whether the trade strategy is activated e.g. Activate De activate Strategy element . Alternatively the user may activate a trade strategy by right clicking a pointing device such as a mouse to generate the menu element and selecting option from the menu that activates the strategy. The user may later de activate strategies in the same fashion.

Once a trade strategy is activated data associated with the trade strategy is obtained Step . The data may include historical price data or intraday data. Part or all of the obtained data may be stored in a local storage unit. The trade strategy is then executed against the data Step and the results of the executed trade strategy are displayed in the single strategy monitor window Step . The results may include trade opportunities identified by the trade strategy also known as alerts. As long as the strategy monitor remains open Step it checks whether the time between data updates has elapsed Step . If so updated data associated with the trade strategy is obtained Step . The trade strategy is re executed against the updated data and the results are again displayed.

In a feature of the strategy monitor a plurality of trade strategies are installed configured activated and executed independently from one another. The trade strategies may have different data ranges time scales symbol sets accounts or individualized parameters from one another. Separate instances with different configurations of the same trade strategy may be run within the strategy monitor. Multiple trade strategies may be executed and the alerts for each trade strategy displayed in the strategy monitor. Some trade strategies may be activated while others may be left inactive.

In another feature of the strategy monitor activated trade strategies are automatically executed whenever the financial application is opened or accessed by the user.

In another feature of the strategy monitor the strategy monitor displays a line item for each trade strategy being run by the system as shown in area of and . The line item may include Activate De activate icon to signify whether the strategy has been activated Alerts icon to signify whether alerts have been generated for the strategy Auto Stage icon to signify whether alerts generated by the trade strategy are being automatically converted to orders the number of trades generated by the strategy and the number of alerts generated in the last execution of the trade strategy. Advantageously a trader can view status and other summary information about all of the trading strategies in a single window without having to open multiple windows one for each strategy and then click among them to view the same type of information.

In another feature of the strategy monitor the alerts generated by one or more trade strategies are displayed. The alerts may be shown for example in a section of the strategy monitor designated for displaying alerts. The user may select the Show Alerts for All Strategies button to display all alerts generated by all the trade strategies. Advantageously a trader can view alert information about all of the trading strategies in a single window without having to open multiple windows one for each strategy and then click among them to view the same type of information. Although not shown the user may select the line item of a trade strategy to display its alerts only in the alerts window .

In another feature of the strategy monitor alerts may be monitored from Quotes Window . The user may transfer an alert to Quotes Window by selecting the alert and clicking Monitor in Quotes Window button .

In another feature of the strategy monitor alerts may be converted into orders. Converted alerts may be placed in a section of the application designated for displaying orders Orders Window . This section designated for displaying orders is displayed when for example the user clicks on the orders tab element . The user may convert an alert to an order by clicking on an alert and then clicking Stage Orders button .

The user may automatically convert all alerts generated by a trade strategy to orders by clicking the Auto Stage button . The user may also automatically convert all alerts generated by a trade strategy to orders by right clicking and selecting Auto Stage option from the menu . The user may make any order active by selecting the order and clicking on Place Orders button or selecting an order in Orders Window and clicking on Place Selected button . The application may notify the user when the order becomes active or if an error has occurred for example by placing a message in Order Messages Window . Both active and inactive orders may be displayed in Orders Window .

In another feature of the financial services application used in conjunction with the strategy monitor the user may have generated orders automatically placed by clicking on Enable Auto Trading button . The user may edit an order by selecting the order and clicking on Edit Selected button . The user may delete an order by selecting the order and clicking on Remove Selected button . Once an order has been executed the user may remove it from Orders Window by selecting the order and clicking on Remove Completed button . If the user has placed an order and wishes to cancel it he may select the order and click on Cancel Selected button . If the user wishes to cancel all pending orders he may click on Cancel All button .

In another feature of the financial services application status bar displays information relevant to current trading. Status bar may appear at the bottom of the financial services application as shown by status bar in and status bar in . Status bar displays information such as the number of orders generated in Orders field the number of orders placed in Active Orders field the connectivity to streaming data from a remote source in Streaming Data field and current index information in field .

In another feature of the financial services application accounts are managed in accounts window . Information from individual or all accounts may be displayed by selecting the desired option from menu . The user may view among other matters the total account balance in Balance field the amount available to make purchases in Buying Power field the value of the financial instruments held in Positions Value field and the profit from past activity with financial instruments in Positions Profit .

In another feature of the financial services application individual financial instruments may be tracked and potentially converted into orders in quotes window . The user may add a symbol to track by clicking on Add Quote s button . The user may set a threshold for identifying a buy or sell opportunity by clicking on Add Price Trigger button . The user may add a buffer to the threshold by adjusting the percentage in Trigger Threshold field . When the price for a quote hits the trigger or trigger threshold an alert is generated and placed in alerts window . Such alerts may be converted to orders in a similar manner in which alerts generated from trade strategies are converted to orders.

In another feature of the financial services application the user may set the application to obtain updated data through data manager . The user may select the data sources from which it will obtain updated data including but not limited to historical data providers and fundamental data providers . The user may select which symbols will be updated through Update Options . The user may set an automatic updating schedule through Automated Data Updates . The user may initiate the process of obtaining updated data by clicking the Updated all data for selected Providers now button .

A second manner of treating a marked symbol may be to change the symbol to a known valid symbol. The user selects the known valid symbol that will be substituted for the marked symbol. For example the user may input the symbol manually in a New Symbol field and select a Change Symbol button . Once a known valid symbol is selected the system replaces the marked symbol of the symbol set associated with the trade strategy with the known valid symbol. The historical data associated with the known valid symbol is transferred and at least part of the historical data is stored in the local storage unit that stores at least partial historical data associated with the trade strategy. If the local storage unit has historical data associated with the marked symbol it is overwritten or allowed to be overwritten.

A third manner of treating a marked symbol may be to remove the symbol from quarantine by selecting a Restore Symbol s button . The removal from quarantine restores the symbol such that the application will continue making requests for updated data associated with the symbol whenever the trade strategy is executed.

A fourth manner of treating a marked symbol may be to ignore the notification by clicking a Close button . If the user ignores the notification no further requests for updated data associated with the symbol may be made. However the symbol remains in quarantine and associated data presently in the local storage unit remains there.

By selecting dragging and dropping a piece of data into the graphical display the data is displayed for example as illustrated in displays and . When multiple pieces of data are selected the selected data are displayed in a manner that permits comparison between the data over the same timeframe. Each set of data may be graphed along separate aligned axes in the same window. Although not shown the displays of data may be superimposed upon one another on the same axis. The timeframe corresponding to the data may be adjusted to enable the user to compare more or less data. Advantageously the trade strategy tool enables a trader to generate the display simply by dragging the gasoline folder element from displayed table to a display graphing the share price e.g. the graphed data without requiring any programming experience by the trader.

The user may also delete one or more types of data and remove its depiction from the graphical display. The user may also select other types of data for comparison to find trends suggesting a pattern for trade opportunities.

The local storage unit which stores at least part of the historical financial data associated with the trade strategy is first checked to determine if it has updated financial data Step . If the updated data is not found in the local storage unit a request for the updated data is sent to a central entity with databases of historical financial data for symbols Step . The updated data is received Step . The received data may comprise at least the most recent historical data except recently streamed data whose corrections are not yet available. The response may comprise at least the most recent historical data except the data corresponding to a designated interval of time. The response may comprise at least a clean corrected copy of recently streamed data. The response may comprise at least new data made available within the last market business day. The response may comprise daily based historical financial data or intraday based historical financial data.

The updated data is checked for corrections Step . If there are no corrections the updated data is stored in the local storage unit Step . If the updated data has one or more corrections it is determined if one or more corrections is a corporate action Step . If there are one or more corporate actions they are stored in the local storage unit alongside the historical data Step . If the updated data has one or more corrections it is then determined if one or more corrections reflect corrected data Step . The determination of corrected data may be performed by comparing historical data for a recent designated length of time to at least part of the received data and determining if the recently received data is corrected data. If it is determined that one or more corrections reflect corrected data data in the local storage unit is corrected Step and the rest of the updated data is stored in the local storage unit Step .

In another embodiment of the feature received historical data may be discretely cached. In another embodiment of the feature when a request is made for updated data the period of time associated with the updated data is extended so that the received data will overlap at least part of the data stored in the local storage unit. At least part of the received data will be compared with at least part of the data in the local storage unit. If corrections need to be made the local storage unit will be corrected accordingly.

In yet another embodiment of the feature the local storage unit is automatically updated after designated intervals of time. The interval of time may be a year quarter month week or day. It may also be a period of 6 3 or 1 hours. It may also be a period of 30 15 10 5 3 or 1 minutes.

In the process the user inputs parameters related to equity analysis into the financial services application on a front end entity Step . The parameters are related to testing a trade strategy. Although not shown possible input parameters include raw profit loss analysis based on a fixed currency amount raw profit loss analysis based on a fixed number of shares profit loss analysis based on a fixed currency amount wherein the starting capital is adjusted based on the profit loss of a previous execution of the trade strategy profit loss analysis based on a fixed share per trade wherein the starting capital is adjusted based on the profit loss of a previous execution of the trade strategy supplied starting capital simulation mode using a fixed percent of existing equity available for the test user definition of the number of shares or amount of currency used for each test.

The front end entity transmits the parameters to the back end entity Step . Input parameters to the back end entity may be transmitted through known technologies such as hyper text transport protocol verbs of GET and POST inputs as described by the existing http 1.0 1.1 standards. Inputs can also be achieved through a known distributed transport via HTTP called simple object access protocol SOAP.

According to the user inputs the back end entity obtains from the central entity or local storage unit the data necessary to run the trade strategy simulation Step . The data may include historical data streaming data or both.

The back end entity executes the trade strategy upon the data according to the user inputs Step . The back end entity outputs the results of the executed trade strategy to the front end entity Step . Although not shown the output might comprise analytics such as long position simulated trades short position simulated trades or a combination of both. The output might comprise analytics comparing the trade strategy results to the hypothetical alternative of buying and holding the investments for the duration of the simulated back test. The output might comprise analytics for a trade strategy test such as hypothetical starting and ending capital net profit profit per granularity or bar increment total commission charted by simulated brokerage firm net profit percent or annualized gain percent. Outputs may also include recent alert descriptions generated according to the most recent historical data used in backtesting a trade strategy. Outputs to the front end entity may also comprise a simulated equity curve data. Outputs may also comprise raw historical pricing data or a graphical representation of any portion of the securities corresponding to the symbol set of the trade strategy. The front end entity receives the outputs from the back end entity and displays them Step .

In another embodiment of the system multiple trade strategies may run simultaneously on the back end entity and the results outputted to the front end entity as needed.

In another embodiment of the system the same code in the back end entity that backtests trade strategies may be used or reused on the front end entity .

In another aspect of the client server system inputs from the front end entity and outputs from the back end entity may be described using extensible markup language such as XML.

An extension writer uses a programming tool to write an extension Step . Some possible programming tools are Eclipse IBM and Visual Studio Microsoft but are not limited to these tools. The extension writer creates an extension adhering to a published specification such as Application Programming Interface API . By adhering to a published specification compatible with the financial services system s base software system the extension writer may write extensions without detailed knowledge of the base software system or access to the base software system s code. By making certain features of the extension private the extension writer may prevent third parties from accessing the extension s codeline.

The extension is imported into the financial services system Step . In one embodiment the extension may be imported by using reflection to read the extensions from disk files. In another embodiment the extension may be imported by being placed in one or more designated locations that the base software system checks for new extensions at runtime. In another embodiment the extension may be imported by being placed in the home directory of the financial services application wherein it is automatically integrated into the application.

The extension then enters an environment where it may be shared with other users Step . The exchange receipt and use of the extensions may be integrated into the program in a plug and play format. Users may share the extension via e mail downloads from a website or other means determined by one skilled in the art.

Once a user retrieves an extension he may execute the functions associated with the extension. The results of the extension are then displayed or executed through the same tools used to execute and display extensions the user wrote himself or features already built into the financial services application.

In another aspect of extensions to the financial services web application the extensions may also contain a viewable document with the rules of the strategy and accompanying documentation. In another aspect of extensions to the financial services web application the extension may be a hot fix created by the program s development team. In yet another aspect of extensions to the financial services web application the extension may be a patch created by the program s development team.

In another aspect of extensions to the financial services system extensions created to be used with the desktop application may also be used by the financial services web application to enhance the functionality of the application.

The above described systems and methods can be implemented in digital electronic circuitry in computer hardware firmware and or software. The implementation can be as a computer program product i.e. a computer program tangibly embodied in an information carrier . Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices. The information carriers can for example be EPROM EEPROM flash memory devices magnetic disks internal hard disks removable disks magneto optical disks CD and or DVD disks. The implementation can for example be in an information carrier for execution by or to control the operation of data processing apparatus. The implementation can for example be a programmable processor a computer and or multiple computers.

A computer program can be written in any form of programming language including compiled and or interpreted languages and the computer program can be deployed in any form including as a stand alone program or as a subroutine element and or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site.

Method steps can be performed by one or more programmable processors executing a computer program to perform functions of the invention by operating on input data and generating output. Method steps can also be performed by and an apparatus can be implemented as special purpose logic circuitry. The circuitry can for example be a FPGA field programmable gate array and or an ASIC application specific integrated circuit . Modules subroutines and software agents can refer to portions of the computer program the processor the special circuitry software and or hardware that implements that functionality.

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor receives instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer can include and or can be operatively coupled to receive data from and or transfer data to one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks .

Data transmission and instructions can also occur over a communications network. The processor and the memory can be supplemented by and or incorporated in special purpose logic circuitry.

To provide for interaction with a user the above described techniques can be implemented on a computer having a display device. The display device can for example be a cathode ray tube CRT and or a liquid crystal display LCD monitor. The interaction with a user can for example be a display of information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer e.g. interact with a user interface element . Other kinds of devices can be used to provide for interaction with a user. Other devices can for example be feedback provided to the user in any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback . Input from the user can for example be received in any form including acoustic speech and or tactile input.

The above described techniques can be implemented in a distributed computing system that includes a back end component. The back end component can for example be a data server a middleware component and or an application server. The above described techniques can be implemented in a distributing computing system that includes a front end component. The front end component can for example be a client computer having a graphical user interface a Web browser through which a user can interact with an example implementation and or other graphical user interfaces for a transmitting device. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN the Internet wired networks and or wireless networks.

The system can include clients and servers. A client and a server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A network can include for example a packet based network and or a circuit based network. Packet based networks can include for example the Internet a carrier internet protocol IP network e.g. local area network LAN wide area network WAN campus area network CAN metropolitan area network MAN home area network HAN a private IP network an IP private branch exchange IPBX a wireless network e.g. radio access network RAN 802.11 network 802.16 network general packet radio service GPRS network HiperLAN and or other packet based networks. Circuit based networks can include for example the public switched telephone network PSTN a private branch exchange PBX a wireless network e.g. RAN bluetooth code division multiple access CDMA network time division multiple access TDMA network global system for mobile communications GSM network and or other circuit based networks.

The computing device can include for example a television with a set top box a computer a computer with a browser device a telephone an EP phone a mobile device e.g. cellular phone personal digital assistant PDA device laptop computer electronic mail device and or other communication devices. The browser device includes for example a computer e.g. desktop computer laptop computer with a world wide web browser e.g. Microsoft Internet Explorer available from Microsoft Corporation Mozilla Firefox available from Mozilla Corporation . The mobile computing device includes for example a personal digital assistant PDA .

Comprise include and or plural forms of each are open ended and include the listed parts and can include additional parts that are not listed. And or is open ended and includes one or more of the listed parts and combinations of the listed parts.

One skilled in the art will realize the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting of the invention described herein. Scope of the invention is thus indicated by the appended claims rather than by the foregoing description and all changes that come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.

