---

title: System and method for restoring a single data stream file from a snapshot
abstract: A method for restoring a file which has been deleted from a data storage system is described. A set of twin pointers is created by copying from the latest pointers in the active file system at a time of restoration. A new set of pointers is created. A pointer from the twin pointers is compared with a pointer from a snapshot of the active file system made at a time earlier than the deletion of the file. In response to a pointer from the snapshot pointing to a different data block than the pointer from the twin pointers, writing the snapshot pointer into the new set of pointers. Writing the new set of pointers into the active file system at the time of restoration to restore the file to the active file system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010503&OS=08010503&RS=08010503
owner: NetApp, Inc.
number: 08010503
owner_city: Sunnyvale
owner_country: US
publication_date: 20070108
---
The present application is a continuation of U.S. patent application Ser. No. 10 393 781 which was filed on Mar. 21 2003 now U.S. Pat. No. 7 165 079 entitled SYSTEM AND METHOD FOR RESTORING A SINGLE DATA STREAM FILE FROM A SNAPSHOT by Raymond C. Chen et al. now issued as U.S. Pat. No. 7 165 079 on Jan. 16 2007 which is a continuation in part of U.S. patent application Ser. No. 09 891 159 entitled SYSTEM AND METHOD FOR REPRESENTING NAMED DATA STREAMS WITHIN AN ON DISK STRUCTURE OF A FILE SYSTEM by Kayuri Patel et al. filed Jun. 25 2001 now issued as U.S. Pat. No. 6 643 654 on Nov. 4 2003 the contents of which are hereby incorporated by reference.

The present invention relates to data backup and restoral and more particularly restoring a single data stream file from a backup.

A file server is a computer that provides file service relating to the organization of information on storage devices such as disks. The file server or filer includes a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks. Each on disk file may be implemented as a set of disk blocks configured to store information such as text whereas the directory may be implemented as a specially formatted file in which information about other files and directories are stored. A filer may be configured to operate according to a client server model of information delivery to thereby allow many clients to access files stored on a server e.g. the filer. In this model the client may comprise an application such as a file system protocol executing on a computer that connects to the filer over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the filer by issuing file system protocol messages in the form of packets to the filer over the network.

A common type of file system is a write in place file system an example of which is the conventional Berkeley fast file system. In a write in place file system the locations of the data structures such as inodes and data blocks on disk are typically fixed. An inode is a data structure used to store information such as meta data about a file whereas the data blocks are structures used to store the actual data for the file. The information contained in an inode may include e.g. ownership of the file access permission for the file size of the file file type and references to locations on disk of the data blocks for the file. The references to the locations of the file data are provided by pointers which may further reference indirect blocks that in turn reference the data blocks depending upon the quantity of data in the file. Changes to the inodes and data blocks are made in place in accordance with the write in place file system. If an update to a file extends the quantity of data for the file an additional data block is allocated and the appropriate inode is updated to reference that data block.

Another type of file system is a write anywhere file system that does not overwrite data on disks. If a data block on disk is retrieved read from disk into memory and dirtied with new data the data block is stored written to a new location on disk to thereby optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. A particular example of a write anywhere file system that is configured to operate on a filer is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. of Sunnyvale Calif. The WAFL file system is implemented within a microkernel as part of the overall protocol stack of the filer and associated disk storage. This microkernel is supplied as part of Network Appliance s Data ONTAP storage operating system residing on the filer that processes file service requests from network attached clients.

As used herein the term storage operating system generally refers to the computer executable code operable on a storage system that manages data access and may in case of a filer implement file system semantics such as the Data ONTAP storage operating system which is implemented as a microkernel. The Data ONTAP storage operating system is available from Network Appliance Inc. of Sunnyvale Calif. and implements a Write Anywhere File Layout WAFL file system. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

Disk storage is typically implemented as one or more storage volumes that comprise physical storage disks defining an overall logical arrangement of storage space. Currently available filer implementations can serve a large number of discrete volumes 150 or more for example . Each volume is associated with its own file system and for purposes hereof volume and file system shall generally be used synonymously. The disks within a volume are typically organized as one or more groups of Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. In the example of a WAFL file system a RAID 4 level implementation is advantageously employed. This implementation specifically entails the striping of data across a group of disks and separate parity storing within a selected disk of the RAID group. As described herein a volume typically comprises at least one data disk and one associated parity disk or possibly data parity partitions in a single disk arranged according to a RAID 4 or equivalent high reliability implementation.

The Microsoft Windows family of operating systems including Microsoft Windows NT and Microsoft Windows 2000 utilize the NT file system NTFS . Files stored within a NTFS file system may utilize multiple data streams. The representation of such NTFS streams on a file server is described in the above incorporated patent application entitled SYSTEM AND METHOD FOR REPRESENTING NAMED DATA STREAMS WITHIN AN ON DISK STRUCTURE OF A FILE SYSTEM.

An example of the use of multiple data streams may involve the creation of a document having summary main content and index sections by word processor software e.g. Microsoft Word executing on the conventional Microsoft Windows NT operating system. By employing the multiple data streams feature of the NT file system NTFS the summary section may be stored at a location on disk that is separate from the main content and index sections of the document. This enables a user e.g. a client to retrieve just the summary section independent of those other sections of the document. Note that apportionment of the various sections named data streams associated with the document is arbitrary and user selectable and that named data streams may be created for both files and directories folders .

In an exemplary file system each unit of information associated with a file including for example its name its owner time stamps etc is implemented as a file attribute. Both files and directories have attributes wherein each attribute may consist of a single data stream. Such an implementation facilitates the addition of new attributes to a file including data content attributes. Therefore files and directories may contain multiple data streams however each on disk file must contain at least a default data stream through which the file data is accessed.

In the exemplary WAFL file system individual files are described by inodes including for example directory inodes regular inodes and stream inodes. A stream inode represents a named data stream so that multiple data streams may be stored on disks associated with a storage appliance as representations embodying the stream inode type associated with a file. Each stream inode has its own size file share locks byte range locks and data blocks however other file attributes such as time stamps group and user ownership information and access control lists are common for all named data streams and are stored in an on disk base inode . The default data stream along with its size data blocks file share locks and byte range locks is also stored in the base inode. Additionally the names and file handles of the data streams are stored in a hidden directory within the file system that is referenced by the base inode. The hidden directory is represented as a stream dir inode type. The hidden directory is invisible in a directory hierarchy that is viewed by a user e.g. a client external to the file system and thus is inaccessible through an external file system protocol such as the Common Internet File System protocol.

In the example of the Write Anywhere File Layout WAFL file system by Network Appliance Inc. of Sunnyvale Calif. a file is represented as an inode data structure adapted for storage on disks. Broadly stated the on disk format representation of the exemplary WAFL file system is block based using e.g. 4 kilobyte KB blocks and using inodes to describe the files. An inode is a data structure used to store information such as meta data about the file. That is the information contained in an inode may include e.g. ownership of the file access permission for the file size of the file or other attributes described further below. The WAFL file system uses a file handle i.e. an identifier that includes an inode number to retrieve an inode from disk. The exemplary WAFL file system also uses files to store meta data describing the layout of its file system. These meta data files include among others an inode file. The on disk format structure of the WAFL file system including inodes and the inode file is disclosed and described in U.S. Pat. No. 5 819 292 entitled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998 and incorporated by reference as though fully set forth herein.

A file is represented in the exemplary WAFL file system as an inode data structure adapted for storage on disk. is a schematic block diagram illustrating the on disk inode which preferably includes a meta data section and a data section . The information stored in the meta data section of each inode describes the file and as such includes the type e.g. regular or directory of file the size of the file time stamps e.g. access and or modification for the file and ownership i.e. user identifier UID and group ID GID of the file. The meta data section further includes a xinode field containing a pointer that references another on disk inode structure containing e.g. access control list ACL information associated with the file or directory. The contents of the data section of each inode however may be interpreted differently depending upon the type of file inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains user defined data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include user data or pointers the latter referencing 4 KB data blocks on disk used to store the user data. Each pointer is preferably a logical volume block number to thereby facilitate efficiency among the file system when accessing the data on disks. Given the restricted size 128 bytes of the inode user data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the user data is greater than 64 bytes but less than or equal to 64 kilobytes KB then the data section of the inode comprises up to 16 pointers each of which references a 4 KB block of data on the disk. Moreover if the size of the data is greater than 64 kilobytes but less than or equal to 64 megabytes MB then each pointer in the data section of the inode references an indirect inode that contains 1024 pointers each of which references a 4 KB data block on disk. In addition the size field of the meta data section of the inode refers to the size of the file.

Some known storage operating systems contain the capability to generate a snap shot of the file system. In the example of a WAFL based file system snapshots are described in 3002 by David Hitz et al. published by Network Appliance Inc. and in U.S. Pat. No. 5 819 292 ENTITLED METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. which are hereby incorporated by reference.

 Snapshot is a trademark of Network Appliance Inc. It is used for purposes of this patent to designate a persistent consistency point CP image. A persistent consistency point image PCPI is a point in time representation of the filer and more particularly of the active file system stored on a storage device e.g. on disk or in other persistent memory and having a name or other identifier that distinguishes it from other PCPIs taken at other points in time. A PCPI can also include other information meta data about the active file system at the particular point in time for which the image is taken. The terms PCPI and snapshot shall be used interchangeably through out this patent without derogation of Network Appliance s trademark rights. Generally a snapshot may be viewed as an example of a read only reference store. In contrast the active file system may be viewed as an example of an active store that permits read and write operations.

A snapshot is a restorable version of a file system created at a predetermined point in time. Snapshots are generally created on some regular schedule. The snapshot is stored on disk along with the active file system and is called into the buffer cache of the filer memory as requested by the storage operating system. An exemplary file system inode structure is shown in . The inode for an inode file contains information describing the inode file associated with a given file system. In this exemplary file system inode structure the inode for the inode file contains a pointer to an inode file indirect block . The inode file indirect block contains a set of pointers to inodes which in turn contain pointers to indirect blocks . The indirect blocks include pointers to file data blocks A B and C. Each of the file data blocks A C is capable of storing in the illustrative embodiment 4 kilobytes KB of data.

When the storage operating system generates a snapshot of a given file system a snapshot inode is generated as shown in . The snapshot inode is in essence a duplicate copy of the inode for the inode file of the file system . Thus the exemplary file system structure includes the inode file indirect blocks inodes indirect blocks and file data blocks A C as in . When a user modifies a file data block the file system layer writes the new data block to disk and changes the active file system to point to the newly created block.

After a snapshot has been created and file data blocks modified the file storage operating system can reconstruct or restore the file system inode structure as it existed at the time of the snapshot by accessing the snapshot inode. By following the pointers contained in the snapshot inode through the inode file indirect block inode and indirect block to the unmodified file data blocks A C the storage operating system can reconstruct the file system as it existed at the time of creation of the snapshot.

In known restoration techniques from snapshots the snapshotted files are copied from the snapshot to the active file system. These copies are generated by duplicating inodes and data blocks stored in the snapshot and writing these duplicated blocks and inodes to the active file system. Thus the snapshot is effectively duplicated into the active file system. A noted disadvantage of such a restore technique is that each inode or data block of the snapshot needs to be copied. Such copying in the case of a large file system can require a substantial amount of time and processing power. For example files may be sized on the order of tens of gigabytes. Similarly using known file restore techniques from a snapshot the volume containing the snapshotted file must be large enough to accommodate two full copies of the file namely the snapshot and the file in the active file system. In the example of the large file a volume may not be of sufficient size to accommodate two full copies of the file.

One technique to avoid resource consuming duplication the entire file system is to use the storage operating system s capabilities to restore on demand. Restore on demand techniques are described generally in U.S. patent application Ser. No. 10 101 901 entitled SYSTEM AND METHOD FOR MANAGING A PLURALITY OF SNAPSHOTS by Hugo Patterson et al. now issued as U.S. Pat. No. 7 475 098 on Jan. 6 2009. A noted disadvantage of such restore on demand technique is an entire directory tree associated with the file must also be restored. For example if the desired file to be restored is two directories down for example in foo bar file then the directory foo and the subdirectory bar must also be restored. This reduces the efficiency of the file restoration process. Additionally such restore on demand techniques typically cannot support the restoration of files that include streams or other metadata that are not stored internal to the file but are stored in a separate data stream associated with the file. Such restore on demand techniques typically utilize the snapshot copying methodology described above to restore a particular file. Thus the noted disadvantages of the snapshot duplication method e.g. processing overhead and use of file system space are inherent in these restore on demand techniques.

However there are instances when the restoration of only a single file from a snapshot without restoring the associated directory tree is desired. For example the entire file system may not suffer an error condition but a single file may have become corrupted or otherwise needs to be restored. Conventional restore on demand techniques may not properly restore those files that include one or more data streams as the data streams are not contained within the data section of the file. These streams and associated metadata may be restored by for example restoring an entire volume from a snapshot however the restoration of an entire volume is a clearly inefficient approach when only a single file in a large file system needs to be restored. Thus it is desirous for a system and method to restore a single file from a snapshot that includes one or more data streams associated therewith.

The disadvantages of the prior art are overcome by providing a system and method for quickly restoring a single data stream file from a snapshot of a file system executing on a server such as a filer. Initially the determination is made if the data stream file is in the active file system. If a file has been deleted from the active file system then an inode is created and its associated buffer tree is generated which points to the data blocks and the file to be restored. This newly created inode and associated buffer tree is then written to the active file system. The associated data streams are then copied from the snapshot to the active file system thereby restoring the data stream file. By avoiding duplication of the data blocks substantial storage space processing overhead and time is saved.

If the file does exist in the active file system then the snapshot restoration process duplicates the file inode into a twin inode and moves the buffer tree of the file to the twin inode. A new inode for the restored file is then generated. A reconciliation process then compares block pointers from the duplicated twin inode and snapshot inodes. If the block pointers match then the block pointers are moved from twin inode into the inode of the restored file in the active file system. If the block pointers and the block not already in the active file system differ then the block pointer from the snapshot is copied to the active file system. Otherwise the actual data block is copied from the snapshot to the active file system. At the end of the reconciliation process the twin inode only contains block pointers to blocks that have changed with respect to the snapshot. After completion of the reconciliation process the associated streams of the file are copied from the snapshot to the active file system. The file is then restored from the active file system.

By not duplicating the numerous data blocks stored in the snapshot substantial processing time overhead and storage space is saved. In alternate embodiments the determination can be made based upon the size of the file to be restored. If the file is of a certain size or smaller the restoration process may utilize a conventional snapshot duplication technique otherwise the novel nonduplication method described herein may be practiced.

An exemplary file server or filer architecture is now described in further detail. is a more detailed schematic block diagram of the exemplary file server implemented as a network storage appliance such as the NetApp filer available from Network Appliance that can execute the above described Data ONTAP software and is advantageously used with the present invention. By way of background a network storage appliance is a special purpose computer that provides file service relating to the organization of information on storage devices such as disks. However it will be understood by those skilled in the art that the inventive concepts described herein may apply to any type of filer whether implemented as a special purpose or general purpose computer including a standalone computer. The filer comprises a processor a memory a network adapter and a storage adapter interconnected by a system bus . The filer also includes a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks.

In the illustrative embodiment the memory may have storage locations that are addressable by the processor and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the filer by inter alia invoking storage operations in support of a file service implemented by the filer. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the inventive technique described herein.

The network adapter comprises the mechanical electrical and signaling circuitry needed to connect the filer to a client over a computer network. A client can be a general purpose computer configured to execute applications including file system protocols such as the Common Internet File System CIFS protocol. Moreover the client can interact with the filer in accordance with a client server model of information delivery. That is the client may request the services of the filer and the filer may return the results of the services requested by the client by exchanging packets that conform to e.g. the CIFS protocol format over the network . The format of the CIFS protocol packet exchanged over the network is well known and described in Spec 0.9 Storage Networking Industry Association SNIA Draft SNIA CIFS Documentation Work Group Work in Progress Revision Date Mar. 26 2001 hereinafter CIFS specification which is hereby incorporated by reference as though fully set forth herein.

The storage adapter cooperates with the storage operating system executing on the filer to access information requested by the client. The storage adapter includes input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance Fibre Channel serial link topology. The information is retrieved by the storage adapter and if necessary processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapter where the information is formatted into a packet and returned to the client.

Notably the exemplary filer includes an NVRAM that provides fault tolerant backup of data enabling the integrity of filer transactions to survive a service interruption based upon a power failure or other fault. The NVRAM is typically made sufficiently large to log a certain time based chunk of transactions for example several seconds worth . The NVRAM entry may be constructed in parallel with execution of the corresponding request once it is determined that a request will be successfully performed but it must be completed as must any copying to mirror NVRAM of the partner in a cluster configuration before the result of the request is returned to the requesting client.

The storage operating system implements a file system that logically organizes information as a hierarchical structure of directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as text whereas the directory may be implemented as a specially formatted file in which other files and directories are stored. In the illustrative embodiment described herein the storage operating system associated with each volume is for example the NetApp Data ONTAP operating system available from Network Appliance Inc. of Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. The preferred storage operating system for the exemplary filer is now described briefly. However it is expressly contemplated that the principles of this invention can be implemented using a variety of alternate storage operating system architectures.

As shown in the storage operating system comprises a series of software layers including a media access layer of network drivers e.g. an Ethernet driver . The storage operating system further includes network protocol layers such as the IP layer and its TCP layer and UDP layer . A file system protocol layer provides multi protocol data access and to that end includes support for the CIFS protocol the Network File System NFS protocol and the HTTP protocol . In addition the storage operating system includes a disk storage layer that implements a disk storage protocol such as a RAID protocol and a disk driver layer that implements a disk access protocol such as e.g. a Small Computer Systems Interface SCSI protocol.

Bridging the disk software layers with the network and file system protocol layers is a file system layer of the storage operating system. Generally the layer implements a file system having an on disk format representation that is block based using e.g. 4 kilobyte KB data blocks and using inodes to describe the files. In response to transaction requests the file system generates operations to load retrieve the requested data from volumes if it is not resident in core i.e. in the filer s memory . If the information is not in memory the file system layer indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical volume block number. The layer then passes the logical volume block number to the disk storage RAID layer which maps that logical number to a disk block number and sends the latter to an appropriate driver for example an encapsulation of SCSI implemented on a fibre channel disk interconnection of the disk driver layer . The disk driver accesses the disk block number from volumes and loads the requested data in memory for processing by the filer . Upon completion of the request the filer and storage operating system returns a reply e.g. a conventional acknowledgement packet defined by the CIFS specification to the client .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the filer may alternatively be implemented in hardware or a combination of hardware and software. The term metadata refers to data that is generated stores and managed by the storage operating system and its associated file system layer to maintain the structure and organization of the file system. Metadata can include for example security attributes associated with files or data containers. As the storage operating system and its associated file system generate metadata it is referred to herein as internally generated data. Conversely all other data stored by the file system including for example data generated by network clients and or other processes in the storage operating system is referred to as externally generated data. 

Included within the file system is a set of snapshot processes which implement the inherent snapshot capabilities of the file system including e.g. the data stream file restoration process described below. The inherent snapshot capabilities of the WAFL file system are further described in the above incorporated 3002 and U.S. Pat. No. 5 819 292. The snapshot processes include a vdisk restore function that implements the novel vdisk restoration system and method.

The storage system provides an on disk representation of a data stream file stored on for example a filer. is a schematic block diagram illustrating the exemplary on disk representation disk of inode data structures including stream inodes. A directory DIR inode includes a data section of pointers that references data directory blocks one which is directory block . The directory block includes a plurality of entries each containing an external representation of an inode i.e. the name of the inode along with mapping information i.e. the inode number for that inode. One of those entries entry contains mapping information e.g. a pointer that references a base inode . The base inode is a regular inode identified by the type of field . The data section of base inode contains pointers to additional inodes pointing to data blocks as a conventional file does. However the base inode includes in the flags field a flag identifying it as a stream data file.

Specifically the WAFL  flag stream flag identifies the inode as having not only a default data stream section DATA but also one or more named data stream sections . In addition a free inode is allocated and converted to a stream dir inode upon insertion of the type stream dir into type field by the WAFL layer. Although the inode includes the default data stream DATA within data section the stream dir inode is created to enable storage of the named data streams within the on disk structure of the file system. In order to access the newly created stream directory the pointer of xinode field in base inode is modified to reference the stream dir inode allocated for the stream directory.

The stream directory includes a data section of pointers that references stream directory data blocks associated with named data streams one of which is stream directory block . As noted the xinode field of an inode typically references an inode dedicated to storing ACL information. Since the entire 128 byte capacity of each inode is utilized the xinode field of a base inode is overloaded to reference the stream directory. Thus the xinode field of the base inode is configured to reference the stream dir inode . The WAFL file system differentiates the functions of the xinode field i.e. referencing an ACL inode or a stream directory inode by among other things the assertion of the WAFL flag stream flag within a base inode. In particular assertion of the WAFL flag stream flag denotes use of the xinode pointer to reference a stream directory inode.

The stream directory block includes a plurality of entries one of which entry references points to stream inode . The stream inode represents a named data stream. The stream inode includes a type field containing the type e.g. stream of the inode and a data section that represents data blocks e.g. DATA associated with the named stream.

In the example of the WAFL file system all of the inodes associated with the named data streams e.g. the base inode the stream dir inode and the stream inode use the same ACL information contained within appropriate ACL inode of the file system. The meta data attributes e.g. time stamps and ownership information for the named data stream reside within the base inode for that named stream. As a result when a stream inode is modified its base inode must be loaded into memory so that its meta data section may be updated to reflect the modification. The function of the xinode field can be distinguished based upon the type of inode i.e. the stream inode type does not have an xinode field that references ACL information because its ACL lives is referenced by the base inode.

While there has been shown and described an illustrative embodiment for providing on disk representations of multiple named data streams for a file system of a network storage appliance it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example the present invention also contemplates an incore representation of the named data streams described herein. In general when an on disk inode is loaded from disk into memory its corresponding incore inode representation may include additional information such as a back pointer to its incore base inode and a pointer to an incore ACL inode. The dotted lines surrounding the inodes shown in indicate the incore representation of the on disk inode structures.

Specifically when an on disk inode is loaded incore to the memory the corresponding incore inode structure embeds the on disk inode structure. The incore inode is a block of memory that stores the on disk inode structure plus additional information needed to manage data in the memory but not on disk . This additional information may include a parent inode pointer pip that is an incore pointer used to reference the beginning of an incore base inode from e.g. an incore stream inode. In other words the pip represents a physical address of an incore inode within the memory whereas the pointer references a logical address e.g. inode number that maps to a logical volume block on disk.

The procedure performed by the file system of the storage operating system or its associated snapshot processes in restoring a file from a snapshot is shown in . Typically such a data stream file restore process would be initiated by the use of a command entered by the user or administrator of the file server. This command could be entered either through a command line interface CLI or via a menu or other selection in a graphical user interface GUI . As options to the command the user enters the name and path to the file to be restored and in alternate embodiments a name and path for the file to be restored to if it is different from the files original and or location. Thus for example a file that was snapshotted when it existed in dir sub file could be restored to foo bar otherfile.

The procedure begins in step and proceeds to step where the file restore process first locks the associated snapshot. Such snapshot locking can be accomplished using known file system file locking mechanisms. The locking of the snapshot ensures that the snapshot will not be modified or deleted while the file is being restored. Next in step the inode associated with the file to be restored is locked against access. Such locking can be accomplished by for example setting a flag within the inode that is manipulated by an appropriate operating system lock manager. The file system layer and its associated processes recognize the flag and thereby restrict access to the inode. In certain embodiments select file system processes or functions may have access to the inode. For example a process or function for determining attributes of the file associated with the inode may be permitted to access the inode to determine file system parameters. Similarly in certain embodiments a command or process to delete the file may be permitted to execute even though the inode is locked against access.

The file restore process then creates a tracking entry step . This tracking entry described further below is utilized to determine which inodes and block pointers have been compared during the remaining portion of the restore process. Next in step the restore process determines what type of file is being restored. By type of file it is meant in the illustrative embodiment whether the file exists in the active file system is absent from the active file system or is a small file.

If the file to be restored is a small file the process performs the conventional copying restore technique by duplicating the inodes block pointers and data blocks from the snapshot to the active file system. If the file is absent from the active file system i.e. the file has been deleted from the active file system the restore process performs the empty file routine routine . Otherwise the file exists in the active file system and is not a small file. In such a case the restore process proceeds to step and performs the standard file restore routine.

The process performed by the restore process for a file that needs to undergo the above referenced reconciliation process is shown in . The procedure begins in step and proceeds to step where the process performs a series of space checks. The space checks are to ensure that the newly created and restored file will fit within the active file system. While the process of the present invention typically requires little additional space in the active file system for files there are several cases where substantial additional space is required. For example if a file was 100 megabytes MB in size when the snapshot occurred but since then has been edited so that it is only 1 MB in size a restoration of the file results in some increased space within the active file system. This increase in space is still significantly smaller than used by conventional restore techniques. Next the process performs a series of copy checks step . In step the restore process performs a type match. This type match ensures that for example no attempt is made to restore the file in the snapshot to a directory or vice versa.

Next in step an inode and associated buffer trees are allocated for use during the restoration process. The inode that is allocated is a new inode for the restored file in the active file system. Additionally the buffer trees of the existing file are copied to a twin. This twin thus has a twin inode and associated buffer trees. The restore process then proceeds to do the reconciliation process in step . This reconciliation process walks through the buffer trees of the twin and the snapshot and generates the restored file. Then in step the streams associated with the file are copied from the snapshot to the active file system. In step the twin inode is turned into a zombie inode. Zombie inodes are later processed by the file system layer. Such zombie processing is described in U.S. patent application Ser. No. 09 642 066 filed on Aug. 18 2000 entitled MANIPULATION OF ZOMBIE FILES AND EVIL TWIN FILES by Raymond C. Chen et al. now issued as U.S. Pat. No. 6 751 635 on Jun. 15 2004 which is incorporated herein by reference. It should be noted that the use of zombie files is for illustrative purposes only. In alternate embodiments the twin inode could simply be deleted or otherwise unallocated from the active file system. The tracking entry is then deleted by for example freeing memory or data structures associated with the tracking entry step . The newly created inode of the file system is then unlocked step . At this point the newly restored file is accessible by the active file system. In step the snapshot is unlocked. The procedure is then complete step .

The reconciliation process utilized by the restore process is shown in . The procedure begins in step and then checks for file deletion step . This check is to ensure that if a user deletes the file being restored the file will be deleted and the restoration process will not proceed. The restore process then selects a block pointer from the twin step . The twin block pointer is then compared with the associated block pointer stored in the snapshot in step . A determination is made in step if the block pointers match. By match it is meant that the two block pointers point to the same data blocks. If the two block pointers do match the block pointer from the twin is moved to the active file system in step . If the block pointers do not match a determination is made if the block that is pointed to by the block pointer is already allocated in the active file system step . If the block is already allocated then the data from the block is copied to a new block in the active file system step . Otherwise the block pointer from the snapshot is copied to the active file system step . Thus if a particular block pointer has not been modified from the time of the snapshot to the time of file restoration the block pointer from the associated twin which is a copy of the block pointer stored in the active file system is moved to the active file system. If the associated block pointer has been modified a copy of the block pointer is generated from that stored in the snapshot and copied to the active file system if the block is not allocated in the active file system. Next in step the restore process determines if there are more block pointers that need to be reconciled. If there are no more block pointers to reconcile the reconciliation process is complete step and the restore process continues on in accordance with the procedure outlined in . If there are more block pointers to be reconciled the process loops back to step and performs an additional deletion check. Throughout the reconciliation process the tracking entry is used to determine which blocks have been compared and which blocks need to be compared. In accordance with an alternate embodiment multiple blocks can be compared at a time. For example sixteen blocks can be read from the twin and compared with their associated snapshot blocks at a time. The use of multi block comparison improves the performance of the reconciliation process.

To again summarize upon the execution of the file restored process which may be included in the file system layer or snapshot processes of a storage operating system the snapshot and inodes are locked against access and a tracking entry is created. The file restore process then determines what type of file is being restored. If the file meets a predetermined or user defined definition of a small file then a conventional snapshot duplication technique can be utilized to restore the file. If the file has been deleted from the active file then the restore process generates a buffer tree which points to the data block stored in the snapshot. Once this buffer tree is created it is written to the active file system and any data streams are copied from the snapshot to the active file system to restore the file.

If the file exists in the active file system then a reconciliation process occurs. After performing a series of verification operations the restore process allocates a new inode for the restored file and creates a twin inode which contains the inodes associated with the file currently in the active file system. A reconciliation process is then performed whereby a block from the twin is compared to a block in the snapshot. If the blocks are equal the block from the twin is moved to the active file system. If the blocks are not equal the block from the snapshot is copied to the active file system. This reconciliation procedure proceeds until all blocks in the twin and snapshot have been compared. At the end of the reconciliation procedure the twin only contains links and pointers to blocks which have been modified since the time of the snapshot. The streams are then copied from the snapshot to the active file system. The twin inode is then turned into a zombie for later processing and deletion. This process thus significantly reduces the number of data blocks that need to be copied from the snapshot to the active file system. By reducing the number of data copies file system space is saved and processing overhead is reduced.

More generally the teachings of the present invention may be utilized with reference to any logical data container LDC embodied in a storage system having an active store and one or more reference stores. The term LDC generally refers to a unit of storage for holding data such as a file or logical unit number LUN which is addressable by e.g. its own unique identification. Thus while the illustrative embodiment was written with reference to files contained within a file system the teachings of the present invention may be implemented using any logical data container that includes appropriate data streams associated therewith. As noted above an active file system is an illustrative embodiment of an active store while a snapshot is an example of a reference store that is typically read only.

The forgoing has been a detailed description of the illustrative embodiment of the invention. Various modifications and additions can be made without departing from the spirit and scope of the invention. For example it is understood that the various data structures and inodes can include additional fields and or be generated or managed by differing layers of a storage operating system while remaining within the scope of the present invention. Additionally while this description has been written and referenced to file servers and filers the principles are equally pertinent to all types of computers including stand alone computers. Further it is expressly contemplated that the teachings of this invention can be implemented as software including a computer readable medium having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention.

