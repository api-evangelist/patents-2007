---

title: Software framework to build an executable scheme in a GUI environment
abstract: A software framework comprises at least one software tool and at least one parameter associated with each tool. The framework is arranged to (i) allow the selection of at least one software tool from a plurality of tools, (ii) allow the selection of at least one parameter from a parameter set, (iii) associate the parameter with a selected tool, and (iv) associate the selected tools and parameters together in a scheme such that they can be executed as a batch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484615&OS=08484615&RS=08484615
owner: NCR Corporation
number: 08484615
owner_city: Duluth
owner_country: US
publication_date: 20071220
---
This invention relates to a computer implemented method for simplifying both the carrying out and the reporting of tasks.

Computers are used for tasks of ever increasing complexity. As computer systems and networks become more complicated performing tasks such as assessing a software application for errors or assessing the security of the system also become more complicated. Often in order to achieve a particular end multiple software tools which often utilize command line interfaces are required.

Some users find command line driven tools complicated to operate due to the fact that they usually require the user to know multiple command line options switches to perform a specific relatively simple task. Command line driven tools and other graphical tools are often written to perform a specific task and it can take the combination of multiple tools before the user obtains all of the information he or she requires. Output from command line tools can often be basic hard to read and can contain more data than is required by the user. In addition the output may not be in the format which is required or desired for further processing of the data. Automation of tools can often involve complex command line statements which pipe information between applications. Potential for human error is increased with every command that is executed and with every option which is added to a tool.

An example of where multiple and often complicated command line tools are required is in the software security field. There are many useful security tools which have been created as command line tools which have multiple command line options. An example is the software tool Nmap a cross platform network security scanner. Nmap s principle function is to evaluate the security of computers and to discover services or servers on a computer network.

It provides information about open ports on the network the operating system services running etc. However Nmap is quite complex to operate having over 50 command line options that can be used to identify potential security loopholes in systems and potentially producing tens or hundreds of lines of output even though only part of this information may be relevant to a user. For example the user may only require the few lines of output that mention which ports are open but will have to search the complete output to identify the information he or she requires.

If complex tasks are to be carried out by anyone other than a highly skilled operative there is a need to simplify the operation of tasks. Therefore there is a need to simplify the processes involved in running software tools in particular command lined based tools in conjunction with one another to achieve a task and in reporting the data returned by those tools.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

According to a first aspect of the present invention there is provided a software framework arranged to build an executable scheme which comprises at least one software tool and at least one parameter associated with the or each tool wherein the software framework is arranged to i allow the selection of at least one software tool from a plurality of tools ii allow the selection of at least one parameter from a parameter set iii associate the parameter with a selected tool and iv associate the selected tool s and parameter s together in a scheme such that they can be executed as a batch.

As will be appreciated by the skilled person a software framework is a reusable design platform for a software system or subsystem . A software framework may have access to support programs code libraries a scripting language or other software to help develop and glue together the different components of a software project. Various parts of the framework may be exposed through an application programming interface API .

The term tool as used herein is intended to refer to a software tool. As will be familiar to the person skilled in the art a software tool is a program or application i.e. any type of executable code. For example tools can be used to create debug manipulate modify analyze identify or maintain other programs and applications. The term refers to relatively simple programs that can be combined together to accomplish a task.

The term parameter as used herein is intended to mean a variable which specifies how a tool should operate. For example a parameter may determine the speed at which a scanning tool operates the programs identified by that tool the breadth of a scan or the like.

Associating tools in accordance with the present invention allows a batch of tools with associated parameters to be assembled with ease into a scheme. This scheme may then be executed by the user of the framework or by another user. This other user may not have the technical skills to populate the framework or to describe a scheme but could nevertheless cause the scheme to be executed thus achieving a complex task with little need for skill or effort. A user will be able to reuse an assembled scheme to execute a batch of tools to carry out a task without the risk of an error occurring each time the task is carried out by for example forgetting to execute a tool or by entering an incorrect parameter. In addition the user will not have to recall or to look up the parameters each time a scheme is assembled as these parameters will be held within the framework.

The framework may comprise a reporting means arranged to report the data returned following execution of the tools. This is advantageous as it allows the data to be read by the user.

In preferred embodiments the reporting means is arranged to provide a plurality of output options. The options may comprise data format data content presentation of the data order of the data and the like. The reporting means may be arranged to merge the output of the executed tools. Providing such a flexible reporting means is convenient as it allows a user to select an output which meets their individual requirements. In addition being able to limit the data output will make the output easier to understand to a less skilled user.

The reporting means may comprise parsing rules which identify which data should be included in a report and or where in the report data should be placed. This is advantageous as it allows the report to be formatted automatically.

The framework may comprise a scheme building means arranged to place the selected tools parameters into an order in which they are to be executed. As will be appreciated by the person skilled in the art some schemes will benefit from having the tools arranged in a certain order. This is usually done by a skilled person using their own judgment. However in one embodiment the framework has access to predetermined rules which will determine the order of certain tools in particular if this is critical or important for efficient execution of the scheme.

Preferably the framework is arranged to associate the tools and or parameters with information relating to that tool or parameter. The information may for example comprise an explanation of the tool and its function. Alternatively or additionally the information may comprise a warning for example where a known tool is likely to cause disruption to required network systems and or services if executed with a certain parameter. The information may comprise information about other tools or parameters which work synergistically with other tools or parameters. This is advantageous as it allows a person building the scheme to access information about a tool and or parameter which in turn will result in the scheme being fit for purpose.

The tools may be categorized. For example the categories may comprise network tools application tools miscellaneous no group or the like. Categorizing tools makes them easier to locate for example within a list.

The scheme may be arranged to carry out a security assessment of a computer system or network. Alternatively or additionally the tools may be arranged to carry out a status assessment of a network i.e. to determine what programs are running and the status of these programs . These are complex tasks that may otherwise require a number of tools to be executed separately.

In some embodiments the framework is further arranged to allow a tool and or parameter to be added to altered and or removed from the scheme of associated tools and parameters. This is advantageous as it allows a pre existing scheme to be corrected updated or the like.

Preferably the framework is arranged to allow tools and or parameters available for selection to be added thereto. This is advantageous as it means that the framework is extensible and can contain tools which are developed after its launch.

In some embodiments the framework is arranged to allow for the modification of existing tools for example to add functionality to a tool. For example a tool which carries out certain tasks but can be modified to carry out further or alternative tasks. This allows a user to base a new tool on previously existing tools which in turn reduces the skill and effort required to produce a new tool.

In one embodiment the framework may incorporate a knowledge base arranged to interpret results returned on executing the schemes. This knowledge base may provide information where the results indicate a known security risk or the like. According to a second aspect of the present invention there is provided a computer system comprising a framework interface means a plurality of software tools a parameter storage means arranged to store parameters and a scheme execution means wherein the computer system is arranged to allow a user to use the framework interface means to associate at least one parameter with a software tool and further to associate at least two of the software tools together in a scheme such that the associated software tools can be executed as a batch by the scheme execution means.

According to a third aspect of the invention there is provided an Automated Teller Machine arranged to run a scheme built using a framework according to the first aspect of the invention.

This is advantageous as there are strict security and assessment requirements for Automated Teller Machines ATMs 

In one embodiment the framework is provided as part of the software installed on an ATM machine. In other embodiments the scheme could be built and or deployed remotely. Alternatively the scheme could be built and or run on a mobile assessment facility such as a tablet PC.

In one particularly advantageous embodiment the scheme may comprise a system assessment scheme for example a system software inventory gathering scheme arranged to provide information on the software of a plurality of ATMs. As the skilled person will appreciate an ATM deployer or may provide hundreds or even thousands of ATMs in a network. It often occurs that through poor record keeping or the like the provider may not know what software is installed on which machines. Therefore a scheme which is able to accumulate this information and report it is advantageous.

According to a fourth aspect of the present invention there is provide a method of carrying out a task requiring a plurality of software tools the method comprising i selecting from a plurality of available tools the tools required to perform the task ii selecting from a plurality of available parameters the parameters which are required by the tools to perform the task iii arranging the tools and their associated parameters such that the tools can be executed in a batch as a scheme and iv executing the scheme.

In one embodiment the step of executing the scheme is carried out following a single user instruction. The single user instruction may be provided via a Graphical User Interface GUI or via a command line. This is advantageous as it allows a simple method for executing all the tools required to perform a complex task.

In one embodiment the task is a network security assessment. Alternatively or additionally the tools may be arranged to carry out a status assessment of a network i.e. to determine what services are running and the status of these services . These are typical complex tasks that would otherwise require the use of multiple tools and the knowledge of many parameters.

Any aspect of the invention described above may incorporate features of other aspects of the invention as appropriate and as will be appreciated by the person skilled in the art.

The computer system of comprises a screen arranged to display data and processing circuitry arranged to process data as described in greater detail below. The computer system further comprises input means in the form of a key board and a mouse .

The processing circuitry comprises a display driver a processing unit a network connectivity port a hard drive a memory an Input Output I O subsystem and a system bus . The display driver processing unit network connectivity port hard drive memory and I O subsystem communicate with each other via the system bus which in this embodiment is a PCI bus in a manner well known in the art. The network connectivity port may be an IP port arranged to allow the computer to connect to the Internet or may be a connection to another type of network such as an intranet. Such processing circuitry may be provided by a number of different computer systems that are currently available.

In this embodiment the program code includes framework interface means a plurality of tools a scheme execution means and a report presentation means . The functions of these blocks will be expanded upon hereinafter.

The data storage portion comprises a parameter storage means a pre built scheme storage means and a tool parameter attribute storage means . The function of these data stores will be expanded upon hereinafter.

The processing unit can communicate with devices external to the processing circuitry via network connection means provided by the I O subsystem and the Network connectivity port .

In this embodiment the system is arranged to allow a scheme to be built which will then be saved and made available to other users such that the scheme can be repeatedly executed by a third party. Therefore in this embodiment there are two classes of user specifically an administrator who builds the scheme and an end user who executes the scheme through a one click interface. However in other embodiments as is described in greater detail below there may not be a distinction between classes

The flowchart of shows steps undertaken by the administrator in using the framework to associate various tools with one another to create a scheme in order to perform a diagnostic task in accordance with one embodiment of the invention. In this embodiment the administrator accesses the framework interface means by inputting commands using the mouse in step .

The administrator then makes a selection between using a pre built scheme and building a new scheme in step . If a user selects the pre built scheme then this pre built scheme is retrieved from the scheme storage means and an edit execution option is displayed on the screen step . If the administrator instead chooses to build a new scheme a New Scheme GUI will be displayed step as is shown in .

The New Scheme GUI comprises four areas a tool parameter selection area a selected tool parameter area an output area and a reporting area . The user will select the desired tools some examples of tools are described in greater detail below from a tree structure hierarchy displayed in the tool parameter selection area . In this embodiment the lists comprise separate sections relating to a selection of network tools a selection of application tools and a selection of no group unclassified tools tools. The network tools are arranged to carry out scans of networks. Application tools are arranged to provide information on the software or other programs running on the networks.

As will be appreciated by the person skilled in the art each of the tools may have associated parameters i.e. variables which specify how a tool should operate. For example the third party network tool Netstat can be run according to parameter a which retrieves all active TCP connections and the TCP and UDP ports on which the computer is listening. Alternatively or additionally it can be run according to parameter b which returns the binary executable program s name involved in creating each connection or listening port. The administrator can select which parameter provides information of interest. Some tools may not require associated parameters to run for example if there is only one way in which the tool can be run. All the parameters that may be required are stored in the Parameter storage means along with an explanation of their function.

In this example and as can be seen from the screenshots the framework comprises network tools application tools and no group tools. The tools comprise known third party software tools. Specifically the network tools include Nmap Netstat IPconfig PsGetSid PsFile and Scanhost. The application tools include PsInfo tasklist PsList PsService Tokenmon and AutorunSC. The no group tools comprise PsLoggedOn Logonsessions runtoolkit PsPasswd and an SDDL parser tool called SDDL Parser herein. SDDL Parser is not a known third party software tool

As will be familiar to the person skilled in the art Netstat a contraction of the words network statistics is a command line tool that displays network connections both incoming and outgoing routing tables and a number of network interface statistics. IPconfig returns all the current TCP IP network configuration values and refreshes the Dynamic Host Configuration Protocol DHCP and Domain Name System DNS settings. If it is used without parameters IPconfig returns the IP address subnet mask and default gateway for all adapters. PsGetSid is a command line tool which retrieves Security IDs SIDs across a network. PsFile is a command line utility that shows a list of files on a system that are opened remotely and it also allows you to close opened files either by name or by a file identifier. Scanhost amongst other functions retrieves Internet Protocol addresses of computers on the network.

Turning to the application tools PsInfo is a command line tool that gathers information about the local or remote Windows NT 2000 system for example the type of installation kernel build registered organization and owner number of processors and their type amount of physical memory the install date of the system and if its a trial version the expiration date. PsList lists services running on a computer. PsService is a service viewer and controller for Windows which displays the status configuration and dependencies of a service and allows a user to start stop pause resume and restart them. PsService enables a user to logon to a remote system using a different account. Tokenmon is a application which monitors and displays a variety of security related activity taking place on a system. Autorunsc returns information about what programs are configured to run during system bootup or login and shows entries in the order that the Operating System processes them.

The no group tools include PsLogged on which is an applet that displays both the locally logged on users and users logged on via resources for either the local or a remote computer Logonsessions which lists the currently active logon sessions optionally the processes running in each session PSpasswd which is a tool that allows a user to change an account password on the local or remote systems. SDDL parser is security descriptor definition language SDDL parser which reads through a file containing the SDDL language interpreting the SDDL language and displaying this interpretation in an understandable format. runrootkit is associated with the application RootkitRevealer an advanced rootkit detection utility.

The tool parameter selection area provides a list of parameters for each tool as a submenu associated with each tool. The tools parameters are selected as follows in step .

Once a tool and if required a parameter has been identified these can be moved to the selected tool area. In this embodiment this is achieved by clicking on a parameter which becomes highlighted on the GUI. If more information is required by the Administrator this can be provided by hovering the pointer controlled by the mouse over the tool parameter name. This will cause stored information concerning the tool parameter to be displayed in a textbox this display of further information about a selectable item is known in the art as a tooltip as shown in . shows a tooltip associated with the tool PsInfo. shows a tool tip associated with the PsInfo h parameter. If this is the desired parameter the user double clicks on the parameter and the name of that tool with that parameter is displayed in the selected tool area . If all parameters for a particular tool are required then the tool name may instead be double clicked on by the user. This will result in all the possible tool parameter options for that tool being selected and name of that tool will be displayed multiple times i.e. once with each applicable parameter in the selected tool area . The selected tool area is shown populated with tools and parameters in

The selected tool area allows the tools to be placed in an order for execution within the framework. For example the administrator may know from his or her experience that it would be more efficient to run the tools in a given order. In some cases one tool may be able or required to utilize the output of another tool so a given order may be required. If this is the case then in some embodiments of the invention a warning would be displayed to the administrator along with an option to allow the system to auto arrange the tools on behalf of the administrator to include any dependency of one tool on another. The list shown in the selected tool area in represents the order in which the tools will be executed. Tools with their associated parameters can be moved up and down the list of tools in the selected tool area to change the order of execution step . To achieve this the administrator clicks on the name of a tool and using the mouse drags it to the desired location within the list.

The next step is to select a reporting format as is shown in . For example the report format could be selected from X HTML Word PDF or the like from a GUI with a drop down list. In addition the administrator has the option to choose the content and order of the data supplied in the report. As will be appreciated by the skilled person reporting the desired data in a specified manner will require the use of parsing tools. These tools will operate according to predefined rules. An example is a split rule in which a line of output can be split up based on particular character s in the line. For example this will result in the data being split when the output e.g. two columns of data separated by spaces. Another rule may be a keyline rule in which output is split up based on keywords in the output. A further example is a grid rule which specifies that output is split up based on column position e.g. take output starting from the 23rd character column in the output .

Once a user is satisfied with the selection and order of the tools and associated parameters and with the reporting format the administrator can choose to build the scheme step . As the skilled person will appreciate building the scheme comprises accessing the code arranged to execute each tool and associating the various portions of code and accessing code representing parsing means arranged to achieve the reporting format. In this embodiment the code behind each tool is copied to a subdirectory of the framework ready for the batch execution of the tools within the scheme. Further the file is linked to a button GUI such that clicking the button GUI causes the scheme to be executed.

The administrator may then continue to edit the scheme or as is shown in use a GUI to choose to save or execute the scheme step . If the administrator chooses to save the scheme step the scheme is saved in the pre built scheme storage means . If instead the administrator chooses to edit the scheme he or she will able to add or remove tools parameters step or to reorder the tools step if desired. The process of selecting tools has been described above. To remove a tool with its associated parameter from a scheme the administrator right clicks on the name of that tool with the mouse in the selected tool area which causes the tool to be deselected. The report format may be changed if required in step and the scheme can then be rebuilt in step .

The administrator may chose to execute a scheme in step . This will then proceed in the same manner as execution of the scheme by an end user as is now described.

The process of executing a scheme and producing a report is now described with reference to the flowchart of and the screenshots of .

When the one click GUI button is clicked by the end user the scheme execution means is called and the tools in that scheme are executed as stored in the pre built scheme storage means . As will be familiar to the person skilled in the art this may involve a double click input. The term one click is used in the art to refer to a single input which results in multiple processes being carried out. The processes carried out during execution of the tools assembled within the scheme are described below with reference to .

The end user is presented with a one button GUI as is shown in . On clicking on the scan button step the code stored in the pre built scheme storage means is called to local memory within the end user s computer system step . This may comprise accessing a local storage device such as a hard drive or the scheme may be provided on a removable medium such as a DVD or memory stick. Alternatively the scheme may be downloaded via a network. Clicking this button is the only input required by the end user to cause the scheme to be executed.

The tools which make up the scheme are then executed in the order defined when building the scheme and the returned output is stored and collated step . Whilst this is carried out a screen as shown in is displayed to the end user with a message asking the end user to wait. The end user is then asked to supply their company name via a GUI as shown in in order to personalize the report. The output is then parsed as defined in the rules behind the selected reporting format. The resulting report is displayed to the end user in step an example is shown in . The end user then opts to print or to save the report as required step .

In one particular embodiment described with reference to the schemes are provided over a network and the end user is an ATM provider. The administrator builds a scheme arranged to perform a network assessment using their computer system which is connected to the Internet via its network connectivity port which in this example is an IP port . The scheme is then stored on a web server which is also connected to the Internet . The end user is able to access the scheme using their own computer shown in the Figure as a laptop computer . The scheme execution GUI is displayed to the end user though a website and the end user can then execute the scheme as described above in relation to . In this embodiment the scheme is arranged to carry out a network assessment of ATMs which are connected to the internet and in particular to audit each ATM to determine what software it is running returning an inventory of the software on each machine as the report which is displayed to the end user on the screen of his computer as a webpage. An example of such a web page is shown in .

In addition to building a scheme an administrator is able to add new tools and parameters to the framework as it now described with reference to the screen shots of .

In the administrator has used his or her mouse to view a Tools menu . From this menu the administrator chooses to add a tool by clicking on that option. The administrator is then shown the Add a Tool GUI as is shown in .

The Add a Tool GUI allows a user to identify the location of a tool in order to up load it into the framework. In the example of the Figures a tool called SampleTool is being added. The administrator is able to specify the tool name a tool description and a tool type e.g. network application or no group . The tool itself will be stored within the Framework in a tool storage means while the tool name and description will be stored in the tool attribute storage means . The tool description will appear as a tooltip as described above.

The Add a Tool GUI also comprises a continue button which allows the administrator to add parameters which may be associated with the tool. If the administrator clicks on the continue button then the Add a Parameter set GUI as shown in will be displayed. Again the administrator is able to add a parameter and a description. The administrator may also add a Timeout limit which specifies how long the tool will be allowed to run without returning a result.

The administrator is also able to add a warning to other users if executing the tool with that parameter is likely to cause a network or service disturbance. The administrator may then elect to cancel or save the tool and any entered parameters or to add further parameters using buttons on the Add a Parameter set GUI .

As will be appreciated by the person skilled in the art other embodiments are possible. For example while the tools described herein are designed to perform network security scans the framework could alternatively or additionally be used for debugging program testing or other applications.

In some embodiments a scheme may be developed with a given end user in mind i.e. a bespoke scheme . In other embodiments the end user and administrator roles may be combined i.e. an end user administrator may build a scheme for his or her own use. Alternatively the end user may be able to edit existing schemes but not to build an entire new scheme.

In one embodiment there is an in built knowledge base. This could operate for example if a user performs open port scan on a system to find out what ports are open to attach warnings from a knowledge base to the output e.g. an open ports found list could have TCP port 3245 open warning this port is known to be used by a Trojan backdoor virus please check to see if these valid services x y or z are running and using the port if not then please investigate for potential virus infection .

The knowledge base functionality may also be useful for a helpdesk scenario where mis configurations found in a client s PC could be flagged up to the helpdesk representative and a note could be displayed telling him or her how to resolve the issue.

