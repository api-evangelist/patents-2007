---

title: Adaptive acceleration of mouse cursor
abstract: Disclosed herein are methods and systems for providing a user interface (UI) having a selector controllable by a physical input device. The response of the selector is adaptively adjusted to facilitate executing desired operations within the UI. A response factor defines how far the selector moves for a given movement of the physical input device. The response factor is increased so the selector can be moved a large distance, but is dynamically decreased to provide fine-tuned control of the selector for selecting densely grouped screen elements. Screen elements can be endowed with gravity, making them easy to select, or with anti-gravity, making them more difficult to select. The disclosure methods also provide tactile feedback such as vibration or braking of the physical input device to assist a user in executing desired operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08373655&OS=08373655&RS=08373655
owner: Apple Inc.
number: 08373655
owner_city: Cupertino
owner_country: US
publication_date: 20070105
---
The invention relates to manipulating a selector within a user interface UI via a physical input device. More specifically adaptive adjustment of how a selector responds to input by a physical input device is disclosed.

The use of a physical input device to manipulate a selector within a UI of a computing device is familiar. Examples include a UI having a cursor or pointer that can be manipulated using a mouse joystick track ball touch pad etc. Other examples are discussed in this disclosure. As the capability of computing devices increases UIs for such devices contain a greater density of information in the form of icons and other screen elements that can be selected by a user. As the density of screen elements increases a user must exert more care in using the physical input device to select desired elements and the chance of a user inadvertently selecting an undesired element increases. This problem is exacerbated with small displays such as those of portable devices and the like.

Large and or multiple displays are becoming more common with desktop computing devices. However large displays do not completely solve the difficulties associated with selecting a desired screen element from among densely arranged screen elements. For one users and designers generally find a way of filling all available space with screen elements so that even as the area of displays increase so do the number of screen elements such that the density of screen elements typically remains great. Additionally navigating a selector within a large and or multiple screens can be difficult because the selector must traverse large areas. Thus it might require more and or larger manipulations of the physical input device to move the selector from one side of a screen to the other. A response factor of the selector to movement of the physical input device can be adjusted such that the selector moves a greater distance per a given movement of the physical input device. However this makes it more difficult to execute fine control operations with the selector such as selecting a desired screen element from among densely grouped elements. Thus there is a need in the art for methods of navigating within a densely packed and or large area UI using a selector controlled by a physical input device.

The present disclosure provides methods of controlling a selector within a UI using a physical input device wherein the response of the selector to movement of the input device is adaptively adjusted depending on the environment of the selector. A response factor of the selector can be increased to facilitate moving the selector across a large distance with less movement of the input device. The factor can be adaptively decreased to facilitate fine control operations such as selecting a desired screen element. According to one embodiment a selector cursor is manipulated in a UI presentation area where the selector is used for navigating presented matter in the UI. A first relationship e.g. selector response factor or speed is defined between user manipulation of a physical input device control device and movement of the selector in the UI. This first relationship e.g. selector response factor or speed is altered based upon a second relationship between the selector and the UI. In general the second relationship between the selector and the UI alters the first relationship e.g. selector response or speed if one or more selectable user interface items of the UI having a defined special relationship with the selector. In one example one or more properties are associated with screen elements that cause the response factor of the selector to be adjusted when the selector is within proximity of the screen element. Thus the screen element can be a selectable user interface item and the defined special relationship of the screen element with the selector can be an attractive or repulsive property of the screen element relative to the proximity of the selector to the screen element. In this way the attractive or repulsive property of the screen element may adjust the selector response factor or speed such that it will be easier to select the screen element i.e. the screen element may be rendered attractive to the selector. Likewise a screen element can be rendered repulsive to the selector such that it will be difficult to place the selector on the screen element. As disclosed herein the first relationship between defined between user manipulation of a physical input device control device and movement of the selector cursor in a UI presented matter can include but is not limited to selector response factor or speed. As disclosed herein the second relationship or defined special relationship of the presented matter or screen element to the selector or cursor can include but is not limited to an attractive or repulsive property of the screen element relative to the proximity of the selector to the screen element and whether a selectable screen element is present or absent e.g. an absence of any selectable user interface items within proximity to the selector for example.

Another feature of the disclosure provides tactile feedback via the physical input device to facilitate a user in executing desired operations within the UI. For example a user might feel a tactile barrier to selecting particular screen elements that are designated low probability i.e. that are not likely to be selected. Likewise a user might sense a vibration or barrier when the selector is at the edge of a window. These and other aspects of the disclosure will be apparent in view of the Description and Drawings.

While the techniques described herein may be embodied in virtually any structural context we shall describe some example structural embodiments for illustrative purposes. Referring now to computer is an example of a device that a user may use in conjunction with many of the disclosed techniques. Computer is an ordinary computer like a personal computer but not intended to be limited as such. Computer has one or more microprocessors and accompanying chipset not shown at the heart of the system. The chipset may include items such as network unit audio unit and many I O functions such as those that might be embodied in I O unit . Of course any of these functions or sub functions may be implemented individually or collectively within a chipset or outside. Computer also has power supply for adapting and supplying power. Computer may have any variety of optical and magnetic drives and the appropriate controllers to use those drives such as IDE ATA or SCSI controllers. For user accessibility computer has monitor speakers keyboard and mouse and may have alternative or additional input devices such as a touch pad touch screen tablet and or a multi touch input device. Finally computer may connect with any manner of other items such as other devices carrying corresponding data items through various ports Network wireless USB parallel serial or modem .

Transitioning from sample hardware we shall now discuss general software. In particular referring to there is shown a software stack intended to be illustrative of the software architecture. Like our hardware examples this structure is not intended to be exclusive in any way but rather illustrative. This is especially true for layer type diagrams which software developers tend to express in somewhat differing ways. In this case we express layers starting with the O S kernel so we have omitted lower level software and firmware. Our notation is generally intended to imply that software elements shown in a layer use resources from the layers below and provide services to layers above. However in practice all components of a particular software element may not behave entirely in that manner.

With those caveats we see in two layers and dedicated to the operating system kernel and core services respectively. Generally above core services layer there is a driver layer and software layers and for providing higher level resources and services to applications in the application layer . Area shows generally where processes implementing the cursor control function may be implemented. The cursor control function might be implemented through driver functions core services and or software layers. Alternatively the function may have components in two or more layers.

As mentioned in the Summary the present disclosure provides methods and implementations that assist users to navigate within a UI using a physical input device. As the density of information contained within UI displays increase navigating within the UI becomes more difficult and users must assert more attention and care to select desired areas of a display and or to avoid undesired areas. Also as the size of UI displays increase e.g. because of larger or multiple monitors it is more difficult to navigate around the screen s . To move a mouse driven cursor from one side of a large display to another a user might have to repeatedly drag and pick up the mouse. Aspects of the present disclosure assist a user in selecting desired icons and in efficiently navigating around large UI displays.

One exemplary scenario is illustrated in wherein a mouse controls a cursor on a screen . Additional components of a computing device such as a CPU keyboard etc. are omitted from for the sake of clarity. Screen includes two icons and . Icon is designated as a high probability icon i.e. an icon that a user is likely to select. Such a designation may be based on a user defined setting user history or an evaluation of the particular operating context for example. Icon is designated as a low probability icon.

According to one embodiment high probability icon is surrounded by a gravity field . When cursor is placed within gravity field the algorithm assumes that the user desires to select icon and assists the user in doing so for example by either sucking the cursor directly to icon or by enhancing the cursor response in the direction of icon . Likewise low probability icon may be surrounded by an anti gravity field . Anti gravity field can repel cursor from icon by decreasing the sensitivity of the cursor response to mouse movements in the direction of icon so that a user would have to make larger and more directed mouse movements to select icon . Additionally or alternatively physical tactile feedback features as described below can be used to repel cursor from icon . Gravity and or anti gravity fields can be used with any feature of a UI screen such as icons as shown in scroll bars tool bars docks window borders and edges menu bars URLs hot corners form etc. Essentially anything within the UI that can be clicked on can be endowed with gravity or anti gravity. Furthermore the size of the gravity or anti gravity field can be smaller larger or the same as the UI object.

A developer can endow a UI element such as an icon with gravity or anti gravity via an API. A program can analyze the UI and adjust optimize such assignments based on a variety of factors such as usage user preferences etc.

The disclosed method can overcome the difficulty of moving a pointer over large distances by analyzing the movement of the physical input device i.e. mouse in this example and determining that the user desires to move the pointer to the other side of the screen. Having made such a determination the algorithm can adaptively adjust the UI response to facilitate moving the pointer a large distance. For example the algorithm can analyze the acceleration and or speed of the motion vector of mouse . A slow steady motion vector may indicate that the user only intends to move cursor a short distance. A quick and or jerky motion may indicate that the user intends to move cursor to the other side of the screen. The algorithm can adjust the response of cursor along vector to facilitate moving cursor a long distance. A user may be able to toss cursor from one side of the screen to the other using a quick motion with mouse .

Alternatively the algorithm can adjust the response of the cursor based on the UI in addition to or rather than based on motion of the physical input device. For example if the algorithm senses that a great deal of empty display space exists between the cursor position and an intended target i.e. there is an absence or sparseness of selectable items in the display space the algorithm can accelerate the response of the cursor to compensate for the empty space.

According to one embodiment pointer response is adjusted by adaptively adjusting an acceleration factor for the pointer response to the physical input device e.g. mouse . The speed at which a pointer moves within the UI may be related to movement of the physical input device by the equation Pointer Speed Mouse Speed Acceleration Factor

According to another embodiment pointer response is adjusted by adaptively adjusting an acceleration factor for the pointer response to a finger gesture with a touch or multi touch physical input device. The speed at which a pointer moves within the UI may be related to a finger gesture by the equation Pointer Speed Finger Speed Acceleration Factor

The acceleration factor can be adaptively adjusted depending on what and how many screen elements in the UI the pointer is close to. For example if the pointer is moving at a fast rate i.e. acceleration factor is large the acceleration factor could be dynamically decreased as it approaches an area of interest i.e. an area having a defined quantity or abundance of selectable screen elements or having high gravity items to facilitate positioning the pointer on icons scroll bars etc. To avoid inadvertently selecting low probability areas e.g. icons endowed with anti gravity the acceleration factor could be greatly increased to cause the pointer to jump over the low probability area. Alternatively the acceleration factor could be greatly decreased along the vector between the pointer and the low probability area to cause the pointer to veer around the low probability area unless the user exercises increased effort to select the low probability area. Also the acceleration factor can be increased to facilitate moving the pointer across a large distance i.e. a distance with an absence or sparseness of items to the other side of a display for instance. Broadly stated these aspects involve adaptively adjusting the acceleration factor of the pointer depending on the context of the pointer within the UI.

The discussion thus far has primarily concerned moving a cursor on a screen using a mouse as a physical input device. The disclosed methods are applicable to any UI wherein a user manipulates a physical input device to make a selection using a UI. illustrates a portable entertainment device having a screen and a click wheel as a physical input device. Note that as used herein reference to movement of a physical input device and similar language includes actuating a click wheel even though the click wheel does not physically spin per se. Likewise terms such as speed and or acceleration vector can apply to manipulating a click wheel. A user can manipulate click wheel to move selector bar to a desired menu option. The methods described above can be applied to the click wheel driven device of to assist a user in selecting desired menu options and avoid inadvertently selecting undesired options. For example a user may select the Settings menu option frequently for a short time after the user acquires the device but then rarely after that. However the same user might select Shuffle Songs frequently on an ongoing basis. Thus the Settings option would become a low probability selection and the Shuffle Songs option would become a high probability selection. In such a case a gravity field as described above can be applied to the Shuffle Songs menu option and an anti gravity field can be applied to the Settings menu option to aid a user in selecting the Shuffle Songs menu option and not inadvertently selecting the Settings menu option. This methodology could be applied to any menu of a device as depicted in . For example particular songs artists or genres of music in a music library may be defined as high probability so as to help select these from the library. In general this methodology can assist a user in navigating through any menu on device .

According to another embodiment an algorithm can determine how far though a menu a user intends to scroll by analyzing how click wheel is manipulated. This is particularly useful for navigating through an extensive stack of selections such as a music library. Music libraries can contain hundreds or thousands of files and scrolling through such files using click wheel can be time consuming and inconvenient. The algorithm can address this problem by analyzing the speed and or acceleration with which a user actuates click wheel . A slow steady turn may indicate that the user desires to scroll slowly or with a high degree of precision. A quick or sudden turn may indicate that the user desires to quickly scroll through items to a position far down the stack of files. The algorithm can assist the user to scroll quickly through a large stack of files by increasing the speed of scrolling. According to one embodiment if the algorithm determines that the user intends to scroll through a large number of files the algorithm can cause the scroll bar to continue scrolling even after the user has lifted his finger from click wheel . Thus with a quick sharp motion a user can give click wheel a spin causing selector bar to continue scrolling through files. The algorithm can cause selector bar to appear to have momentum that depends on how quickly and sharply click wheel is manipulated i.e. a quicker sharper manipulation will scroll the selector bar further down the stack. Click wheel can in effect be spun like a roulette wheel.

In addition to or rather than analyzing the motion of the physical input device to determine how to adjust the speed of scrolling the algorithm can analyze the properties of the display itself. For example the algorithm may accelerate the scrolling rate if the list of files on the display is longer i.e. the list has a defined quantity or abundance of files . In other words the scrolling rate of the cursor or selector first relationship can be altered if the cursor navigating a list of user interface items in the presented matter of a known length exceeds a threshold or is less than a threshold.

According to a further embodiment the response of a selector can be adaptively adjusted based on an input signal in addition to the physical input device. For example a user may press a button on a keyboard while simultaneously manipulating a mouse to adjust how a cursor responds to the mouse. This can provide a fine control and a course control of the cursor for example. In the context of a click wheel a user might simultaneously press a button on the device while actuating the click wheel to adjust the scrolling rate or the stickiness of the selector bar. Essentially any multi touch methodology or combination of touches can be used to cause adaptive adjustment of a selector response. Furthermore the additional input need not be via a user touching an input device per se but can be any input signal for example the spatial orientation of the device i.e. how the user holds the device voice sound lighting temperature and the like. Furthermore the algorithm may use these secondary inputs alone to adaptively adjust the selector response or the algorithm may use the secondary inputs in combination to the UI elements context history etc. as discussed elsewhere herein.

Where this disclosure refers to a physical input device the invention contemplates the use of any known manner of such physical input via a user interface. However one particularly interesting manner of input is a manner involving touch sensitive systems such as a touch pad or touch sensitive surface s used in combination with software to interpret gestures and touches to the sensing surface s . Thus any embodiment calling for user interaction contemplates the potential use of touch sensing of one or multiple finger signals or gestures. Further such gestures whether effected with one or multiple fingers may be augmented in meaning through the use of fusion concepts where sound light user proximity or other input mechanisms are interpreted together with such gestures. For purpose of further disclosure of gestures and touch sensing that may be used in connection with disclosed embodiments reference is made to U.S. patent application Ser. No. 11 232 299 filed Sep. 21 2005 and entitled System and Method For Processing Raw Data Of Track Pack Device and is incorporated herein by reference.

In addition to manipulating the response of a UI depending on the perceived intentions of a user the present disclosure also concerns methods of providing tactile feedback to a user via the physical input device to facilitate the user s ability to execute desired actions within the UI. For example tactile feedback such as vibration or increased resistance to movement of the input device can inform a user when the selector is at the edge of a window or in an area of the display that might be undesirable. illustrates one embodiment of this concept. Mouse operates in a conventional manner wherein movement along surface actuates tracking ball . Alternatively mouse may be an optical mouse. Mouse is adapted so that its ease of motion against surface can change to provide feedback in accordance with a user s desired actions within the UI. For example mouse can be physically easier to move in such a way so as to execute a desired action compared to an undesired action. Referring to in conjunction with mouse may become very easy to move in the direction of icon when the cursor is placed in proximity to gravity field . Conversely mouse may become difficult to move in the direction of icon when the cursor is in proximity to anti gravity field . Thus a user perceives a physical barrier through the mouse to placing the cursor on icon .

According to one embodiment mouse includes feet adapted to provide tactile feedback by changing the freedom of motion of mouse against surface depending on the user s desired action within the UI. Feet may be actuated to grip surface more firmly thereby increasing the friction of mouse against surface rendering mouse more difficult to move. This increase in friction can be triggered to provide resistance to moving mouse in a way so as to execute an undesired action within the UI. Feet can be actuated mechanically or pneumatically for example. Alternatively the ease of movement of mouse can be manipulated magnetically. Mouse can include an electromagnet the strength of which can be increased or decreased in response to the desired actions within the UI. Thus the ease of movement of mouse against surface which is metallic in this embodiment increases or decreases to provide tactile feedback to the user. Tactile feedback can be implemented with other physical input devices such as joy sticks roller balls and the like. Any technique known in the art for providing artificial feel to an input device can be used for example mechanical magnetic techniques and the like.

Physical tactile feedback can be instructive and or corrective. A particularly useful environment for the tactile feedback methods described herein is drawing and designing applications such as CAD and the like. For example tactile feed back can be used to give weight to certain objects making it more difficult to inadvertently move a heavy object while trying to move other lighter objects. In other words the physical input device resists movement when trying to move a heavy object and thus more concentrated and particular effort must be expended to move such an object. As another example many drawing applications include a snap to feature wherein lines and objects snap to other lines and objects or snap to gridlines. Using the disclosed tactile feedback features a user receives tactile feedback cues when the objects snap to other objects or gridlines. A user may override the snap to feature by physically resisting the motion of the physical input device.

It will be appreciated that the above described systems and methods can be varied in many ways including changing the order of steps and the exact implementation used. The described embodiments include different features not all of which are required in all embodiments of the present disclosure. Moreover some embodiments of the present disclosure use only some of the features or possible combinations of the features. Different combinations of features noted in the described embodiments will occur to a person skilled in the art. The scope of the invention is limited only by the following claims.

