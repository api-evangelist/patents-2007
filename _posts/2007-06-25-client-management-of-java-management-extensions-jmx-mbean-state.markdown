---

title: Client management of java management extensions (JMX) Mbean state
abstract: Provided is a method for maintaining state information on a JAVAÂ® Management Extension (JMX) Mbean programming object and simplifying the procedure for creating and employing the Mbean. Prior to invocation of a JMX Mbean, a JMX properties object is created. When the JMX Mbean is invoked, the properties object is passed to the JMX MbeanServer interface. The JMX MbeanServer interface returns an updated properties object, containing all the state information for the new Mbean object. Each time the user make a call to JMX host via the Mbean object, the properties object is passed and, if necessary, updated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082553&OS=08082553&RS=08082553
owner: International Business Machines Corporation
number: 08082553
owner_city: Armonk
owner_country: US
publication_date: 20070625
---
The present invention relates generally to techniques relating to computer programming objects and more specifically to a JMX Mbean programming object that is able to maintain state information for a client.

For the past several decades computers have become increasingly connected. Originally computers were stand alone devices each typically designed and programmed for a specific task. Soon however the advantages of combining computers into networks became apparent. Networks of computers were able to share resources such as printers and memory and eventually even able to share or distribute processing tasks. For example a search of a large database can often be broken into multiple mutually exclusive tasks by assigning different processors and or computers to search different segments of the database.

As computers have become increasingly interconnected techniques have been developed to enable multiple computers to work together. One such development is JAVA a high level programming language originally developed by Sun Microsystems Inc. of Mountain View Calif. JAVA enables programmers to develop code that is platform independent. Simply stated code written in the JAVA programming language is converted or interpreted into actual computer instructions corresponding to a particular computer by a JAVA Virtual Machine JVM that executes on the computer. In other words by installing a JVM that corresponds to particular computer hardware and the associated operating system a programmer can write code without regard to the particular hardware and operating system.

In addition to the increased connectivity of traditional computers many devices that incorporate computing components have also become both inter connected and JAVA enabled. Examples include Internet or web telephones cable boxes and televisions and application clients and servers. To facilitate the management of such JAVA enable resources JAVA Management Extensions JMX has been developed. JMX is a standard for managing and monitoring devices applications and services in a JAVA environment. JMX defines a management architecture design patterns application programming interfaces APIs and services for building web based distributes dynamic and modular solutions to manage JAVA resources and programming objects.

JMX provides for the creation and implementation of JAVA managed beans or Mbeans which are programming objects that represent objects to be managed. Each Mbean has a management interface that enables a user or program to monitor manage and be notified of changes to particular configuration parameters of a corresponding resource. For example an Mbean representing an application may include attributes and methods corresponding to the application s cache size. In this example reading a cacheSize attribute would return the application s cache size and writing a cacheSize attribute would update the size of the application s cache thus changing the application s configuration.

Although the JMX specification has been updated to include invocation in a multi user distributed environment a JMX Mbean is typically a singleton object. In other words a specific Mbean accessed by multiple clients is not able to store state information corresponding to any particular invocation related to a specific client. Further end users seeking to invoke a method of a JMX managed Mbean must do so via a JMX MbeanServer interface. This method of invocation requires several lines of JAVA code to construct an argument list and an associate argument datatype list. What is needed is a method for employing a JMX Mbean that simplifies the construction of both the argument and datatype lists and enables the user to maintain state information so that multiple clients can access the same Mbean object without conflict.

Provided is a method for maintaining state information on a JMX Mbean programming object and simplifying the procedure for creating and employing the Mbean. In one embodiment prior to invocation of a JMX Mbean a JMX properties object is created. When the JMX Mbean is invoked the properties object is passed to the JMX MbeanServer interface which is responsible for the creating and managing the new Mbean object. Rather then constructing an argument list with multiple arguments the properties object is the only argument employed in the Mbean invocation. Upon a successful invocation the JMX MbeanServer interface returns an updated properties object containing all the state information for the new Mbean object. The user then maintains the state information for the specific invocation. Each time the user make a call to JMX host via the Mbean object the properties object is passed and if necessary updated. In this manner the Mbean object created according to the disclosed technology is not necessarily a singleton object but rather each Mbean is a distinct copy relating to the user s specific application. Further the disclosed technology saves the JMX host the task of actively maintaining state information associated with a user session and enables typographical errors that may be in an argument array to be detected prior to runtime.

In one embodiment a structured query language SQL statement is passed to the JMX host as a string parameter in the properties object and the result of the corresponding query is passed back as a methods return value in an sqlRresults string parameter. Other coding strategies may be employed to handle non string state parameters such as creating a custom class. This approach requires deploying the custom class with both the JMX Mbean and the client application. A service data object SDO works with the disclosed technology as well. One benefit of employing a SDO is that SDOs are able to handle classes within classes for a more robust property set than that provided by a JMX properties object.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

Although described with particular reference to the JAVA Management Extensions JMX standard the claimed subject matter can be implemented in any information technology IT system in which access to programming objects by multiple users of applications is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. Further although described with respect to JAVA management beans MBeans and the JAVA environment the claimed subject matter also is applicable to modules applications or any other type of interdependent computer logic. In other words the disclosed technology is applicable to any situation in which there is interdependent computer code and a user or developer needs or wants to ensure that the computing environment is highly reliable.

In addition the methods of the disclosed invention can be implemented in software hardware or a combination of software and hardware. The hardware portion can be implemented using specialized logic the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor personal computer PC or mainframe.

In the context of this document a memory or recording medium can be any means that contains stores communicates propagates or transports the program and or data for use by or in conjunction with an instruction execution system apparatus or device. Memory and recording medium can be but are not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device. Memory and recording medium also includes but is not limited to for example the following a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory and a portable compact disk read only memory or another suitable medium upon which a program and or data may be stored.

One embodiment in accordance with the claimed subject is directed to a programmed method for simplifying and extending the usability of a JAVA MBean. The term programmed method as used herein is defined to mean one or more process steps that are presently performed or alternatively one or more process steps that are enabled to be performed at a future point in time. The term programmed method anticipates three alternative forms. First a programmed method comprises presently performed process steps. Second a programmed method comprises a computer readable medium embodying computer instructions which when executed by a computer performs one or more process steps. Finally a programmed method comprises a computer system that has been programmed by software hardware firmware or any combination thereof to perform one or more process steps. It is to be understood that the term programmed method is not to be construed as simultaneously having more than one alternative form but rather is to be construed in the truest sense of an alternative form wherein at any given point in time only one of the plurality of alternative forms is present.

Turning now to the figures is a block diagram of one example of a computing system architecture that incorporates the claimed subject matter. Computing system includes a client computer which includes a central processing unit CPU coupled to a monitor a keyboard and a mouse . Monitor keyboard and mouse facilitate human interaction with computing system and client computer . Attached to CPU is a data storage component which may either be incorporated into CPU i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown .

Data storage is illustrated storing several exemplary Java Management bundles or Mbeans including a first Mbean or Mbean  and a second Mbean or Mbean  . It should be noted that a typical application or system may include many Mbeans but for the sake of simplicity only two are shown. Also stored on data storage are an operating system OS and a JAVA execution engine JXE . Stored in conjunction with Mbean  and Mbean  are a properties  module and properties  module respectively. In the following description Mbean  properties  module Mbean  and properties  module are JAVA Mbeans and corresponding property objects created and managed in accordance with the claimed subject matter. Properties  module is employed in the creation and management of Mbean  and properties  module is employed in the creation and management of Mbean  . Properties  and properties  are the same type of object but are different instantiations thus enabling Mbean  and Mbean  to each store their own state information. Mbean  Mbean  properties  properties  OS and JXE are described in more detail below in conjunction with .

Client computer is connected to the Internet which is also connected to a server computer . Although in this example client computer and server are communicatively coupled via the Internet they could also be coupled through any number of communication mediums such as but not limited to a local area network LAN not shown and a direct wired connection.

As mentioned above in this example OS is supporting JXE and JXE implements the JAVA programming language which is a product of Sun Microsystems Inc. of Santa Clara Calif. JXE includes a Java runtime engine JRE not shown which executes Java programs Java programs are compiled into byte codes which are interpreted by the JRE of JXE rather then being compiled into native machine code. In this manner a particular Java program can be written to execute on any hardware platform and OS that includes a corresponding JXE like JXE .

JXE provides an execution environment for among other things Mbeans which in this example include Mbean  and Mbean  which are managed by a JAVA Management Extension JMX and corresponding properties objects properties  and . In the following description Mbeans and are used as examples of Mbeans that are managed by JMX according to the claimed subject matter. Although Mbeans and are illustrated as residing on hardware platform both of Mbeans and could be located on different platforms e.g. stored in memory not shown associated with server and executed on server .

One disadvantage of the calling structure exemplified by process is the complexity of setting up the calling arguments. In this example lines are all used for this task and typically must be executed each time the method is invoked. Another disadvantage associated with program listing is that there is no capability to store state information related to the calling process. The disclosed technology addresses these issues as explained in more detail below in conjunction with .

In this example rather than defining multiple arguments such as illustrated above in conjunction with listing lines method defines an args array of type Object with one 1 element in line and a sigs array of type String with one 1 element in line . Lines and then assign properties  to the arrays declared in lines and . Line sets the value of the sqlStmt field of properties  to the values of the variable sqlStmt and line sets the values of an mbeanMethod variable to runAdminQuery. In this manner lines of listing are eliminated from the listing and the call to mbsInvoke method represented by line not only is made much simpler but it returns properties  with a result of the requested query and any state information relating to Mbean  associated with properties  . Therefore in addition to simplifying a JMX call the claimed subject matter enables a user to maintain state information on a particular Mbean such as Mbean  and Mbean  .

Process starts in a Begin Setup Mbean block and proceeds immediately to a Define Object block . During block process defines a data object for storing information relating to a particular type of Mbean such as Mbean  and Mbean  . The particular configuration of the object depends upon the function and state information associated with the Mbeans corresponding to the objects. In this example the defined object is an object such as properties  and . During an Mbean to Process block process determines whether or not there are any Mbeans that need processing in accordance with the claimed subject matter. In this example Mbeans and are such Mbeans and during the first iteration of process both need to be processed.

During a Get Next Mbean block process selects the first unprocessed Mbean which during the first iteration in this example is Mbean  . During an Allocate Object block process allocates space in memory for an object of the type defined during block which in this example is proerties  . During an Associate Object With Mbean block process populates the object with information corresponding to the current Mbean. As explained above in conjunction with properties  and properties  are the same type of object but are different instantiations in which each instantiation holds information relating to the respective Mbean i.e. Mbean  and Mbean  .

Once a properties object has been associated with an Mbean during block process returns to Mbean to Process block and processing continues as described above. In this example the second time through the iterations of blocks and process selects Mbean  and allocates memory for properties  . If during block process determines that there are no more Mbeans to process control proceeds to an End Setup Mbean block in which process is complete.

Process starts in a Begin Invoke Mbean block and proceeds immediately to a Receive Request block . During block JXE a user or application requests the services of a particular Mbean e.g. Mbean  . During a Properties block process determines whether or not the particular Mbean is one in which the claimed subject matter is applicable i.e. the mbean is stored in association with a properties object. If so control proceeds to a Set Properties block during which the properties object associated with the target Mbean during block is populated with any information relevant to the specific invocation during the current processing.

During an Attach Properties block process attaches the properties object to the target Mbean i.e. properties  is attached to Mbean  . Once properties  is attached to Mbean or if during block process has determined that the target Mbean does not include a properties object control proceeds to an Invoke Mbean block . During block the Mbean is invoked with or without an attached properties object depending upon whether control has proceeded form block or respectively. During a Process Return Values block the result of the processing by JMX of Mbean  is returned to process and the appropriate actions are taken to process the information returned. Finally process proceeds to an End Invoke Mbean block in which process is complete.

While the invention has been shown and described with reference to particular embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention including but not limited to additional less or modified elements and or additional less or modified blocks performed in the same or a different order.

