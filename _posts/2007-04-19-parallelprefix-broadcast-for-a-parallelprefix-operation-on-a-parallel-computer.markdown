---

title: Parallel-prefix broadcast for a parallel-prefix operation on a parallel computer
abstract: A parallel-prefix broadcast for a parallel-prefix operation on a parallel computer includes: configuring, on each node, a parallel-prefix contribution buffer for storing the node's parallel-prefix contribution; configuring, on each node, a parallel-prefix results buffer for storing results of a operation, the results buffer having a position for each node that corresponds to node's rank; and repeatedly for each position in the results buffer: processing in parallel by each node, including: determining, by the node, whether the current position in the results buffer is to include the node's contribution, if the current position is not to include the contribution, contributing the identity element, and if the current position is to include the contribution, contributing the contribution, performing, by each node, the operation using the contributed identity elements and the contributed contributions, yielding a result from the operation, and storing, by each node, the result in the position in the results buffer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752421&OS=07752421&RS=07752421
owner: International Business Machines Corporation
number: 07752421
owner_city: Armonk
owner_country: US
publication_date: 20070419
---
The field of the invention is data processing or more specifically methods apparatus and products for parallel prefix broadcast for a parallel prefix operation on a parallel computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example a parallel prefix operation. A parallel prefix operation is an operation that applies a commutative binary operator such as a bitwise OR addition or multiplication to an n element global array v v v . . . v to produce an n element parallel prefix results array v v v v v v . . . v v v . . . v. The parallel prefix results array generated using the parallel prefix operation is important in many parallel algorithms such as for example a parallel quick sort. Because the elements of the global array used to generate the parallel prefix results array are typically contained on a number of compute nodes and because thousands of nodes may participate in a parallel prefix operation on a parallel computer broadcasting the results of a parallel prefix operation to each of the compute nodes in a parallel computer is always a challenge. If the group is large and such groups may contain thousands of compute nodes then the data communications cost of such an algorithm is substantial.

Methods apparatus and products are disclosed for a parallel prefix broadcast for a parallel prefix operation on a parallel computer the parallel computer comprising a plurality of compute nodes the compute nodes organized into at least one operational group of compute nodes for collective parallel operations of the parallel computer each compute node in the operational group assigned a unique rank and the operational group coupled for data communications through a global combining network. A parallel prefix broadcast for a parallel prefix operation on a parallel computer includes configuring on each ranked compute node a parallel prefix contribution buffer for storing the parallel prefix contribution of the ranked compute node configuring on each ranked compute node a parallel prefix results buffer for storing results of a parallel prefix operation the parallel prefix results buffer having a position for each compute node that corresponds to the rank of the compute node repeatedly for each position in the parallel prefix results buffer processing in parallel by each ranked compute node in the operational group including determining by the ranked compute node whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node if the current position in the parallel prefix results buffer is not to include the contribution of the ranked compute node contributing the identity element for the parallel prefix operation and if the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node contributing the parallel prefix contribution of the ranked compute node for the parallel prefix operation performing by each ranked compute node the parallel prefix operation using the contributed identity elements and the contributed parallel prefix contributions yielding a result from the operation and storing by each ranked compute node the result in the position in the parallel prefix results buffer.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations using a binary tree network topology and a point to point network which is optimized for point to point operations using a torus network topology. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a binary tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of the parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Each compute node in the operational group assigned a unique rank that identifies the particular compute node in the operational group. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

As described in more detail below in this specification the system of operates generally for a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention by configuring on each ranked compute node a parallel prefix contribution buffer for storing the parallel prefix contribution of the ranked compute node configuring on each ranked compute node a parallel prefix results buffer for storing results of a parallel prefix operation the parallel prefix results buffer having a position for each compute node that corresponds to the rank of the compute node repeatedly for each position in the parallel prefix results buffer processing in parallel by each ranked compute node in the operational group determining by the ranked compute node whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node if the current position in the parallel prefix results buffer is not to include the contribution of the ranked compute node contributing the identity element for the operation and if the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node contributing the parallel prefix contribution of the ranked compute node performing by each ranked compute node the operation using the contributed identity elements and the contributed parallel prefix contributions yielding a result from the operation and storing by each ranked compute node the result in the position in the parallel prefix results buffer.

A parallel prefix operation is an operation that applies a commutative binary operator such as a bitwise OR addition or multiplication to an n element global array v v v . . . v to produce an n element parallel prefix results array v v v v v v . . . v v v . . . v. Because each element of the global array is typically contributed by a different ranked compute of an operational group each position in the results array stores the result of applying the parallel prefix operation to the parallel prefix contribution of one more ranked node than the previous position in the results array. For example consider an operational group having three ranked nodes each node contributing a value of 1 and that the parallel prefix operation specifies using a bitwise OR operator. The global array containing all the contributions from the nodes therefore is 1 1 1. The parallel prefix results array is 1 2 3 because the first position merely contains value first position of the global array the second position contains the result of applying the bitwise OR to the contributions of ranked nodes one and two in the first and second positions of the global array and the third position contains the result of applying the bitwise OR to the contributions of ranked nodes one two and three in the first second and third positions of the global array.

A bitwise OR operation as the term is used in this specification is an inclusive bitwise OR operation rather than an exclusive bitwise OR operation. The symbol for the inclusive bitwise OR function in the C and C programming languages is . The inclusive bitwise OR function conducts a logical OR function separately on each bit of its operands. The effect is to turn bits on. For these operands for example 

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

A scatter operation like the broadcast operation is also a one to many collective operation. In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given datatype where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes computer includes input output I O nodes coupled to compute nodes through the data communications network . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . Computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. The parallel computer in the example of includes sixteen compute nodes parallel computers capable of executing a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention sometimes include thousands of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Executing a parallel prefix broadcast for an operation according to embodiments of the present invention is generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. The compute node of includes a plurality of computer processors as well as random access memory RAM . Processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node. Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored RAM is a parallel communications library a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in parallel communications library . A library of parallel communications routines may be developed from scratch for use in a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved according to embodiments of the present invention. Examples of prior art parallel communications libraries that may be improved for a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library. However it is developed the parallel communications routines of parallel communication library are improved to execute a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention by configuring on each ranked compute node a parallel prefix contribution buffer for storing the parallel prefix contribution of the ranked compute node configuring on each ranked compute node a parallel prefix results buffer for storing results of a parallel prefix operation the parallel prefix results buffer having a position for each compute node that corresponds to the rank of the compute node repeatedly for each position in the parallel prefix results buffer processing in parallel by each ranked compute node in the operational group determining by the ranked compute node whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node if the current position in the parallel prefix results buffer is not to include the contribution of the ranked compute node contributing the identity element for the operation and if the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node contributing the parallel prefix contribution of the ranked compute node performing by each ranked compute node the operation using the contributed identity elements and the contributed parallel prefix contributions yielding a result from the operation and storing by each ranked compute node the result in the position in the parallel prefix results buffer.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems that execute a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of include a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in executing a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention.

The data communications adapters in the example of include a Point To Point Network Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of include a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations such as for example a network configured as a binary tree. Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example collective operations adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU using data provided by the nodes on the global combining network and data provided by a processor on the compute node . In such a manner computer program instructions in the parallel communications library may configure the ALU of the adapter in dependence upon a commutative binary operator specified by parallel prefix operation. The compute node may then perform the parallel prefix operation with the ALU on a global combining network adapter for the global combing network using data provided by the children and the compute node itself. The ALU output may then be passed up to the parent .

Often when performing arithmetic operations including parallel prefix operations in the global combining network adapter however the global combining network adapter only serves to combine data received from the children nodes and pass the result up the network to the parent node . Similarly the global combining network adapter may only serve to transmit data received from the parent node and pass the data down the network to the children nodes . That is none of the processors on the compute node contribute data that alters the output of ALU that is passed up or down the global combining network . Because the ALU typically does not output any data onto the network until the ALU receives input from a processor a processor may inject the identity element into the dedicated ALU for the particular arithmetic operation being perform in the ALU in order to prevent alteration of the output of the ALU . Injecting the identity element into the ALU however often consumes numerous processing cycles. To further enhance performance in such cases the example compute node includes dedicated hardware for injecting identity elements into the ALU to reduce the amount of processor resources required to prevent alteration of the ALU output. The dedicated hardware injects an identity element that corresponds to the particular arithmetic operation performed by the ALU. For example when the global combining network adapter performs a bitwise OR on the data received from the children nodes dedicated hardware may inject zeros into the ALU to improve performance throughout the global combining network .

For further explanation illustrates a block diagram of an exemplary Point To Point Adapter useful in systems that execute a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates a block diagram of an exemplary Global Combining Network Adapter useful in systems that a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. The Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. The Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Collective Operations Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems that execute a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axis x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in a parallel prefix broadcast for a parallel prefix operation on a parallel computer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary global combining network useful in systems that execute a parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in the global combining network may be characterized as a physical root node branch nodes and leaf nodes . The physical root has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only compute nodes but readers will recognize that a global combining network optimized for collective operations for use in executing a parallel prefix broadcast for a parallel prefix operation on a parallel computer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

In the example of the global combining network provides data communications among all the nodes in the binary tree to effect parallel reduction operations useful for a parallel prefix broadcast for a parallel prefix operation according to embodiments of the present invention. Each ranked node is configured with a parallel prefix contribution buffer for storing the parallel prefix contribution of the ranked compute node and configured with a parallel prefix results buffer for storing results of a parallel prefix operation. Each parallel prefix results buffer has a position for each compute node that corresponds to the rank of the compute node. For each position in the results buffer all the ranked nodes contribute data to the global combining network either the node s contribution from the contribution buffer or the identity element depending on the current position of the results buffer being processed by the nodes of the network . Each node performs the parallel prefix operation using the node s contribution and the contributions from the child nodes below that node. That node then passes the result of the parallel prefix operation up to that node s parent node. In such a manner all the results cascade up to the physical root node into a final result for the entire operation across all the nodes of the tree. Upon the results reaching the physical root node the physical root sends the result of the entire operation back down the tree to each compute node for storage in the compute node s parallel prefix result buffer.

For further explanation sets forth a flow chart illustrating an exemplary method of parallel prefix broadcast for a parallel prefix operation on a parallel computer according to embodiments of the present invention. The parallel computer includes a plurality of compute nodes represented here by black dots in global combining network . The compute nodes of the operational group are coupled for data communications through a global combining network . The global combining network is a data communications network of parallel computer that includes data communications links connected to the compute nodes so as to organize the compute nodes as a binary tree. In this example the data communications links are represented by dotted lines connecting the dots that represent the compute nodes . In additional in this example each compute node has a separate ALU dedicated to parallel reduce operations. The separate dedicated ALUs are not shown in but they are of the kind illustrated and described above regarding reference on .

In addition to their organization as a binary tree the compute nodes of parallel computer are organized into an operational group of compute nodes for collective parallel operations on parallel computer and each compute node in the operational group is assigned a unique rank. The ranks are shown here as integers immediately adjacent to each computer node in operational group . The ranks in this example are assigned as a sequence of integers beginning with 0 assigned to the physical root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree and so on.

The method of starts when each compute node calls a parallel prefix operation to be performed on the parallel computer. Each compute node may call a parallel prefix operation using a function from a parallel communication library installed on each compute node such as for example a version of MPI SCAN improved according to embodiments of the present invention. The parallel prefix operation typically specifies a commutative binary operator to be applied to the contributions provided by each compute node of the operational group . Such a commutative binary operator may include for example a bitwise OR addition multiplication or any other commutative binary operator as will occur to those of skill in the art.

The method of includes configuring by each ranked compute node a global combining network adapter for the global combining network in dependence upon the parallel prefix operation. Each compute node may configure a global combining network adapter in dependence upon the parallel prefix operation according to the method of by writing configuration data to registers in the global combining network adapter through an application programming interface API of the global combining network adapter. Such configuration data may configure the ALU in each adapter to perform the parallel prefix operation using the specified commutative binary operator. Consider for example that the parallel prefix operation specifies performing the operation with a bitwise OR. Readers will recall that the symbol for the inclusive bitwise OR function in the C and C programming languages is . The bitwise OR operator conducts a logical OR function separately on each bit of its operands. The effect is to turn bits on. For these operands for example 

The method of includes configuring on each ranked compute node a parallel prefix results buffer for storing results of a parallel prefix operation. The parallel prefix results buffer of on each ranked compute node has a position for each compute node that corresponds to the rank of the compute node. For example in the exemplary results buffer of the leftmost position in the results buffer corresponds to the node having a rank of 0 the next position to the right in the buffer corresponds to the node having a rank of 1 the next position to the right in the buffer corresponds to the node having a rank of 2 the next position to the right in the buffer corresponds to the node having a rank of 3 and so on. When the results buffer is initially configured the buffer does not contain any data which is indicated by the dashes in the results buffer . Although only illustrates one parallel prefix results buffer readers will note that each ranked node is configured with such a parallel prefix results buffer.

The method of includes configuring on each ranked compute node a parallel prefix contribution buffer for storing the parallel prefix contribution of the ranked compute node. The parallel prefix contribution of each ranked node is the values from one or more elements of a global array whose elements are distributed across the nodes of the operational group . Such a global array may be used by a parallel algorithm in collective operations such as for example reduce allreduce gather allgather and so on. In the example of each ranked node is configured with a parallel prefix contribution buffer that stores a parallel prefix contribution 1. 

The method of continues repeatedly for each position in the parallel prefix results buffer as follows 

Turning now to each step carried out repeatedly for each position in the parallel prefix results buffer each ranked compute node of the operational group processes in parallel by determining by the ranked compute node whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node. The manner in which the ranked compute node determines whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node may vary depending on the numbering of the compute node ranks and the positions in the results buffer along with the relationship between each rank and each position in the buffer . Each compute node may maintain the current position of the results buffer using a position counter that is initialized when the compute node call the parallel prefix operation.

When the lowest rank in the operational group is zero and the position of the results buffer corresponding to rank zero is the first position the ranked node may determine whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node according to the method of by determining whether the current position of the parallel prefix results buffer is greater than the rank of the compute node. If the current position of the parallel prefix results buffer is greater than the rank of the compute node then the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node. If the current position of the parallel prefix results buffer is not greater than the rank of the compute node then the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node.

When the lowest rank in the operational group is one and the position of the results buffer corresponding to rank one is the first position the ranked node may determine whether the current position in the parallel prefix results buffer is to include a contribution of the ranked compute node according to the method of by determining whether the current position of the parallel prefix results buffer is greater than or equal to the rank of the compute node . If the current position of the parallel prefix results buffer is greater than or equal to the rank of the compute node then the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node . If the current position of the parallel prefix results buffer is greater than or equal to the rank of the compute node then the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node .

In the method of each ranked compute node of the operational group continues to process in parallel by contributing the identity element for the operation if the current position in the parallel prefix results buffer is not to include the contribution of the ranked compute node. The identity element is an element of a set that when combined with any other element of the set using a particular binary operation leaves the other elements of the set unchanged. Consider for example the binary operation of addition which has a corresponding identity element of 0. Combining any number in a set of real numbers with 0 using the addition operation does not change the number. Similarly consider for example the binary operation of multiplication which has a corresponding identity element of 1. Combining any number in a set of real numbers with 1 using the multiplication operation does not change the number. Similarly consider for example the binary operation of a bitwise OR which has a corresponding identity element of 0. Combining any binary number in a set of real binary numbers with 0 using the bitwise OR operation does not change the number. Each ranked compute node may contribute the identity element for the operation according to the method of by injecting the identity element from dedicated hardware of the compute node.

In the method of each ranked compute node of the operational group also continues to process in parallel by contributing the parallel prefix contribution of the ranked compute node for the parallel prefix operation if the current position in the parallel prefix results buffer is to include the contribution of the ranked compute node. In the example of each node that is to include the contribution for the parallel prefix operation contributes a value of 1 for the parallel prefix operation.

The method of also includes performing by each ranked compute node the parallel prefix operation using the contributed identity elements and the contributed parallel prefix contributions yielding a result from the operation repeatedly for each position in the parallel prefix results buffer . Each ranked compute node may perform the parallel prefix operation according to the method of by performing the parallel prefix operation with an arithmetic logic unit ALU of a global combining network adapter for the global combing network . The ALU of the global combining network adapter for each ranked node may perform the parallel prefix operation by applying the commutative binary operator to the data injected by the node whether that data is the node s parallel prefix contribution or the identity element and to the data received from any child nodes on the tree . The ALU of the global combining network adapter for each ranked node may then pass the result of the parallel prefix operation to that node s parent node on the tree . In such a manner the physical root node of the operational group receives the result for the current position of the results buffer and transmits the entire result down the tree to each ranked compute node .

The method of includes storing by each ranked compute node the result in the position in the parallel prefix results buffer repeatedly for each position in the parallel prefix results buffer . Each ranked compute node may store the result in the position in the parallel prefix results buffer according to the method of by retrieving the result from a FIFO reception stack for the global combining network adapter installed in the compute node.

After performing the steps described above repeatedly for each position in the send buffer the parallel prefix broadcast for a parallel prefix operation is complete. Each compute node now contains a parallel prefix results buffer the stores the results of the parallel prefix operation. For further explanation set forth block diagrams of the same organizational group of compute nodes illustrated at reference on . Read together illustrate a sequence of execution of the method of with changes in buffer status.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for parallel prefix broadcast for a parallel prefix operation on a parallel computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

