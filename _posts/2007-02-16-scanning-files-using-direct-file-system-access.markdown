---

title: Scanning files using direct file system access
abstract: Scanning engine (i.e. program(s) or application(s))  sends request  to direct file system access engine (i.e. program(s) or application(s)) . Direct file system access engine  receives request  and passes request  to file system(s)  as request . No filter program(s)  receive program control as request  bypasses any filter program(s) . The direct file system access engine  receives unaltered information from file system(s) . Utilising Direct File Access (DFA) allows bypass of user mode hooking-type malwares, kernel, and file system filter programs to obtain access to or communicate with the real underlying file system(s). This provides a ‘clean’ view of the file system(s) in situations where user/kernel components are compromised or rootkit file system filter programs are installed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07860850&OS=07860850&RS=07860850
owner: Symantec Corporation
number: 07860850
owner_city: Mountain View
owner_country: US
publication_date: 20070216
---
The present invention generally relates to accessing one or more file systems for example scanning files in a computer or computer system and more particularly to a method system and or computer program such as software for detecting malware that may be protected or guarded by one or more rootkits.

A rootkit is a set of software tools frequently used by an intruder after gaining access to a computer system. These software tools are intended to conceal running processes files or system data which helps an intruder maintain covert or furtive access to a computer system. A rootkit is not a virus or trojan. Viruses modify a computer system file to propagate itself. Trojans masquerade as software and provide access for a hacker. Both of these techniques are susceptible to detection see Wikipedia contributors 2006 . Rootkit. Wikipedia The Free Encyclopedia. Retrieved 06 57 Mar. 2 2006 from http en.wikipedia.org w index.php title Rootkit oldid 41813778 .

In contrast a rootkit is intended to allow an intruder access to a computer system without leaving any trace. The term kit is used because software components work collectively to achieve the desired covertness or furtiveness. A rootkit can include additional software components for other malicious behaviour such as key loggers and packet sniffers see Berg Al. The Root Of The Rootkit SearchSecurity.com July 2005 http searchsecurity.techtarget.com tip 1 289483 sid14 gci1103744 00.html .

In order to further enhance stealth capabilities of rootkits the authors of rootkits are employing more advanced stealth methods so that normal programs that utilise operating system Application Programming Interfaces APIs or third party libraries are unable to detect and remove rootkits.

Rootkits are generally classified into two categories 1 user mode or application level mode or 2 kernel mode. The former involves elementary binary file replacement while the latter embeds itself intricately into the operating system see Dillard Kurt. What Are User Mode vs. Kernel Mode Rootkits SearchWindowsSecurity.com May 2005 http searchwindowssecurity.techtarget.com originalContent 0 289142 sid45 gci1086469 00.html . Kernel level rootkits add additional code and or replace a portion of kernel code with modified code to help hide a backdoor on a computer system. This is often accomplished by adding new code to the kernel via a device driver or loadable module such as Loadable Kernel Modules in the Linux operating system or device drivers in the Windows operating system. Kernel rootkits commonly patch hook or replace system calls with versions that hide information about the attacker. Application level or user mode rootkits may replace regular application binaries with Trojan fakes or they may modify the behaviour of existing applications using hooks patches injected code or other means. Kernel rootkits can be especially dangerous because they can be difficult to detect.

There are inherent limitations to any program that attempts to detect rootkits. Rootkits are collections of programs which modify the tools or libraries upon which programs on the system depend. Some rootkits can modify the running kernel. A problem with rootkit detection is that the operating system cannot be trusted.

A filter program is a program that takes control of the execution of a program and that can monitor redirect alter the execution path or forge the result. A filter program can be located anywhere between one or more programs for example in an operating system and a file system s . A filter program may be part of a rootkit.

A file system is a system for organising directories and files generally in terms of how the file system is implemented in the operating system. File systems may but need not necessarily use a storage device such as a hard disk or they may be virtual and exist only as an access method for virtual data or for data over a network. More formally a file system is a set of abstract data types that are implemented for the storage hierarchical organisation manipulation navigation access and retrieval of data. File systems need not make use of a storage device at all a file system can be used to organise and represent access to any data whether it be stored or dynamically generated e.g. from a network connection .

A computer system may be a type of processing system terminal computer or computerised device personal computer PC mobile or cellular telephone mobile data terminal portable computer Personal Digital Assistant PDA pager or any other similar type of device. The capability of such a computer system to process request and or receive information or data can be provided by software hardware and or firmware. A computer system may include or be associated with other devices for example a local data storage device such as a hard disk drive or solid state drive. A computer with a rootkit is sometimes called a rooted computer.

Presently the stealth of a rootkit and the access to computer systems which can be exploited present a significant security threat to computer systems and networks.

Often rootkits are used in combination with otherwise normally detectable malware. As a result the number of malwares a portmanteau word of malicious software that normal malware scanning software does not detect is presently increasing.

There is a need for a method system and or computer program which addresses or at least ameliorates problems inherent in the prior art.

The reference to any prior art in this specification is not and should not be taken as an acknowledgment or any form of suggestion that such prior art forms part of the common general knowledge.

According to a first broad form the present invention provides a method of accessing one or more file systems the method including a scanning engine sending a request to a direct file system access engine the direct file system access engine receiving the request and in response thereto sending a further request to at least one file system the direct file system access engine receiving response information from the at least one file system and the direct file system access engine sending the response information to the scanning engine.

According to a second broad form the present invention provides a system for accessing one or more file systems the system including a storage device to house at least part of a file system at least one memory to store a scanning engine and a direct file system access engine at least one processor in communication with the at least one memory and the storage device the at least one processor adapted to a send a request from the scanning engine to the direct file system access engine b allow the direct file system access engine to receive the request and in response thereto to send a further request to the file system c allow the direct file system access engine to receive response information from the file system and d send the response information from the direct file system access engine to the scanning engine.

According to a third broad form the present invention provides a computer program for accessing one or more file systems the computer program adapted to send a request to a direct file system access engine the direct file system access engine receiving the request and in response thereto sending a further request to at least one file system the direct file system access engine receiving response information from the at least one file system and receive the response information from the direct file system access engine.

In accordance with a specific optional embodiment provided by way of example only the scanning engine and or the direct file system access engine is one or more of separately or in combination a program a driver or an application. Optionally but not necessarily the direct file system access engine is one or more Windows DFA kernel driver.

The following modes given by way of example only are described in order to provide a more precise understanding of the subject matter of a preferred embodiment or embodiments.

A particular embodiment of the present invention can be implemented on a computer system or more generally a processing system an example of which is shown in . In particular processing system generally includes at least one processor or processing unit or plurality of processors memory at least one input device and at least one output device coupled together via a bus or group of buses . In certain embodiments input device and output device could be the same device. An interface can also be provided for coupling processing system to one or more peripheral devices for example interface could be a PCI card or PC card. At least one storage device which houses at least one database can also be provided. Memory can be any form of memory device for example volatile or non volatile memory solid state storage devices magnetic devices etc. Processor could include more than one distinct processing device for example to handle different functions within processing system .

Memory typically stores an operating system to provide functionality to processing system . A file system and files are also typically stored on storage device and or perhaps memory .

Input device receives input data and can include for example a keyboard a pointer device such as a pen like device or a mouse audio receiving device for voice controlled activation such as a microphone data receiver or antenna such as a modem or wireless data adaptor data acquisition card etc. Input data could come from different sources for example keyboard instructions in conjunction with data received via a network. Output device produces or generates output data and can include for example a display device or monitor in which case output data is visual a printer in which case output data is printed a port for example a USB port a peripheral component adaptor a data transmitter or antenna such as a modem or wireless network adaptor etc. Output data could be distinct and derived from different output devices for example a visual display on a monitor in conjunction with data transmitted to a network. A user could view data output or an interpretation of the data output on for example a monitor or using a printer. Storage device can be any form of data or information storage means for example volatile or non volatile memory a hard disk drive solid state storage devices magnetic devices etc.

In use processing system is adapted to allow data or information to be stored in and or retrieved from via wired or wireless communication means the at least one database . Interface may allow wired and or wireless communication between the processing unit and peripheral components that may serve a specialised purpose. The processor may receive instructions as input data via input device and can display processed results or other output to a user by utilising output device . More than one input device and or output device can be provided. It should be appreciated that processing system may be any form of terminal server specialised hardware computer computer system or computerised device personal computer PC mobile or cellular telephone mobile data terminal portable computer Personal Digital Assistant PDA pager or any other similar type of device.

Referring to prior art there is illustrated a simplified summary of the steps required to scan a file system s using currently known security systems methods. These steps are as follows 

In currently known scanning engines the scanning engine simply utilises Windows API. For example known rootkit detection programs include Rootkit Revealer from Sysinternals RkDetector and IceSword .

These rootkit detection programs detect currently known rootkits by comparing results from the operating system OS to an actual listing read from the disk itself. However this approach also uses the operating system calls to view the direct in disk file system which could be forged by rootkits that lie between the rootkit detection program and the real hard disk.

As a further illustrative example known rootkit detection program RkDetector v2.0 also deletes files hidden by rootkits while the system is running. Once erased and after a system reboot rootkit files are not loaded because data contained therein is now corrupted.

A problem with this type of in disk file system access is that occasionally it is not possible to scan hidden files in certain file systems e.g. NTFS that support self encryption compression. In other words NTFS for example has the capability to compress and or encrypt files. If a file hidden by a rootkit is compressed and or encrypted a normal scanning engine i.e. program s or application s is unable to scan the content of the file to see whether the file is malicious or not.

A particular example embodiment of the present invention is now described with reference to . which displays a simplified summary of a method to scan a file system s . Method includes steps as follows 

Utilising Direct File Access DFA allows a direct file system access approach with minimal OS support. Using a DFA kernel program the present example embodiment can bypass user mode hooking type malwares operating system kernel and file system filter programs to obtain access to or communicate with the real underlying file system s . This provides a clean view of the file system s in situations where operating system user kernel components are compromised or rootkit file system filter programs are installed.

The present example embodiment can be used to defeat rootkits by making use of one or more of the following techniques provided by way of example only 

The present example embodiment is also capable of reading the EXCLUSIVELY locked files. Information retrieved by DFA does not conflict with information received by a normal operating system API route in the absence of rootkits. This allows transparent access to the underlying file system s without any compatibility issues with operating system APIs.

In a specific non limiting example applied to the Windows operating system OS functions used by the DFA kernel driver are not directly related to the nature of the file request. That is operating system functions used by the kernel driver are not directly related to normal or standard operating system functions typically used for the request. For example scanning engine i.e. program s or application s normally uses CreateFile Win32 API to open or create a file FindFirstFile FindNextFile Win32 API to obtain a list of files in a specified directory GetFileSize Win32 API to obtain the file size and so on. However using a DFA interface scanning engine i.e. program s or application s can use DeviceIoControl Win32 API to send a request to the DFA kernel driver running in kernel mode. Therefore any user mode filter program s are unable to detect this action. When DFA kernel driver receives DeviceIoControl DFA kernel driver creates a standard Windows kernel data structure called IRP I O Request Packet depending on the file request scanning engine has made. For instance IRP MJ CREATE is created and sent to the underlying file system s using IoCreateFileSpecifyDeviceObjectHint Windows Kernel API by DFA kernel driver to perform CreateFile requested by scanning engine using DeviceIoControl request . DFA kernel driver creates IRP MJ QUERY INFORMATION to query file information such as file size. IRP MJ DIRECTORY CONTROL with IRP MN QUERY DIRECTORY code is created for FindFirstFile FindNextFile requested by scanning engine using DeviceIoControl request . The created IRPs are sent to the underlying file system s using IoCallDriver Windows Kernel API request . The return information is stored in the IRP and DFA kernel driver passes information back to scanning engine through the buffer passed in DeviceIoControl . Kernel mode rootkits hook Windows Native API i.e. NtCreateFile which is the system call exposed to a user mode application program or run as file system filter drivers . Because DFA kernel driver neither calls Windows Native API nor goes through the kernel mode filter drivers DFA kernel driver can access the underlying file system s without detection by any kernel mode rootkits. Any file related Win32 API functions used by scanning engine can be performed in this way bypassing any filter program s regardless of whether they are running in user mode or kernel mode.

Therefore the OS kernel API being used by the DFA kernel driver is not directly connected to the nature of the file request being used. By avoiding the use of any standard Windows API or OS kernel API any malware that intercepts the program control in the file access path e.g. by hooking or in line code patching irrespective of its running mode user or kernel mode is unable to forge the information returned by the underlying real file system s .

Thus the present example embodiment s use of DFA is able to transparently perform operations on a file in a file system i.e. open read write query file information set file information delete file close or the like since the present example embodiment uses the file system to perform operations on the file instead of directly accessing the disk or other storage means and trying to simulate the file system driver s behaviour.

The present invention may be implemented separately as stand alone software or in combination with currently known systems methods as a software package. When the present invention is embodied as a software package this software package can be used to detect and remove malware guarded by a rootkit from a device such as a computer computer system PDA mobile or cellular telephone or a wide variety of other similar devices.

Whilst an example embodiment has been described with reference to the Microsoft Windows operating system the present invention can be readily applied to many other operating systems and should not be considered to be limited only to the Microsoft Windows operating system.

Optional embodiments of the present invention may also be said to broadly consist in the parts elements and features referred to or indicated herein individually or collectively in any or all combinations of two or more of the parts elements or features and wherein specific integers are mentioned herein which have known equivalents in the art to which the invention relates such known equivalents are deemed to be incorporated herein as if individually set forth.

Although a preferred embodiment has been described in detail it should be understood that various changes substitutions and alterations can be made by one of ordinary skill in the art without departing from the scope of the present invention.

The present invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects.

