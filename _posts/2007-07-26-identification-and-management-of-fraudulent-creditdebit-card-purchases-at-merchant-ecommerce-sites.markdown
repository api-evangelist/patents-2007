---

title: Identification and management of fraudulent credit/debit card purchases at merchant ecommerce sites
abstract: Transaction processing of online transactions at merchant sites determines the likelihood that such transactions are fraudulent, accounting for unreliable fields of a transaction order, which fields do not reliably identify a purchaser. A scoring server using statistical model uses multiple profiles associated with key fields, along with weights to indicate the degree to which the profiles identify the purchaser of the transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065233&OS=08065233&RS=08065233
owner: Fair Isaac Corporation
number: 08065233
owner_city: Minneapolis
owner_country: US
publication_date: 20070726
---
This application is a continuation of U.S. patent application Ser. No. 09 782 681 filed Feb. 12 2001 now U.S. Pat. No. 7 263 506 which claims benefit of U.S. provisional application Ser. No. 60 195 156 filed on Apr. 6 2000 each of which is incorporated in its entirety by this reference.

This invention relates generally to transaction processing to identify fraudulent transactions and more particularly transaction processing of online payment transactions occurring over public networks to identify fraudulent transactions.

Credit card purchases of goods and services over the Internet are now a common practice. In a typical transaction a consumer selects some number of items to purchase provides information identifying themselves such as name address and the like and provides payment information typically in the form of a credit card.

There is however great risk associated with merchants doing business on the Internet. The anonymity of online customers makes the incidence of fraud incomparably higher for online merchants than for brick and mortar in house shopping venues where the customer is present for all transactions. In March of 1999 Visa International Inc. reported in Computerworld that less than 2 of their credit card transactions occurred over the Internet but that online transactions accounted for up to 50 of their disputed charges. Recent reports state that one in five online buyers has reportedly been a victim of Net related fraud . . . according to a National Consumers League survey. The National Consumers League reported that between 1997 and 1998 there was a 600 percent increase in reports of Internet fraud.

Online fraud presents the risk of huge revenue losses to Internet merchants. When fraud occurs both the payment and the merchandise are gone. When consumers use credit cards in person and fraudulent transactions occur issuing banks reimburse cardholders. Thus if a cardholder s card is lost or stolen and then used by another fraudulently it is the issuer that must absorb fraudulent charges as federal law limits the cardholder s liability. This is because when a card is presented in person the merchant does not have liability for fraudulent charges.

With Internet commerce however the merchants not the banks must reimburse issuers for 100 of the fraudulent purchases. Regulations created by Visa MasterCard and other card issuer associations specify that in card not present CNP situations merchants assume the full risk of purchases made by credit card regardless of authorizations made by issuing banks. Because CNP transactions are the standard for e commerce and because these transactions will continue to grow in volume the current framework shifts the burden of these losses primarily to the merchants. Indeed for large companies which do all of their business over the Internet based on CNP transactions this loss exposure can be in the tens of millions of dollars.

Beyond using a stolen credit card or fabricated card number other types of fraud abound in the online purchasing arena. With Internet orders it s easier than ever for customers to dispute charges. For example a husband may make charges and deny them to his wife who in turn calls the card issuer and fervently disputes their bill. Though these purchases are valid the card company may decide in favor of their customer and the merchant is responsible for the chargebacks. In addition merchants are responsible for loss from disputed charges when customers claim non receipt of goods non arrival of goods due to incorrect shipping addresses or goods refused on delivery.

The charges for shipping physical goods are normally paid by consumers. When online fraud occurs however shipping charges become the responsibility of the online merchant yet another hit in the merchant s profitability.

Online merchants attempting to use parameter based rules and negative files to determine credit card fraud often watch their administrative costs skyrocket along with the increased staffing needed for time consuming fraud investigations.

Poorly managed fraud control systems can lead to decreased customer satisfaction resulting in lost revenues. Many online retailers burden their customers with lengthy and complex online order forms in an attempt to minimize fraud consequently resulting in unacceptably elevated order abandonment as legitimate customers become frustrated lose interest in pursuing their purchases and flee to other vendors. In the same vein worthy customers become insulted when inaccurate rules turn down their orders. Such customers often permanently migrate to other websites where they find better treatment. The misguided merchants then waste valuable marketing dollars attempting to replace the very customers they turned away.

A chargeback is a charge levied onto a merchant for the amount of a purchase that has previously been charged onto a payment card and has been successfully disputed by a customer. When a chargeback is processed the merchant must pay a fee of 15.00 to 25.00. If the merchant disputes the chargeback and wants to re present or re issue the charge an equivalent fee is billed to the merchant. If the card issuer again decides in favor of the customer and processes a second chargeback the merchant is charged yet another fee and this time the charge cannot be re presented. The merchant can however arbitrate the charge whereupon the issuing bank can charge an up front non refundable fee of up to 50.00.

In addition to paying a fee for each chargeback issuing banks can levy fines on merchants having too many chargebacks. Typically 1.5 3.0 of the merchant s chargeback volume such fines can range from a few hundred dollars per month to 10 000 or even 100 000 per month with fines escalating higher as chargebacks continue unabated.

The final blow after months of escalating fines if chargebacks exceed a small percentage of a merchant s overall credit card sales the merchant can lose the privilege of receiving payment through credit card issuers.

On line retailers have been quickly implementing a wide range of fraud fighting techniques to combat this perplexing and ubiquitous problem. The technological level of Internet fraud solutions today is similar to where credit card issuers were in 1992 when the incidence of bankcard fraud exploded and was expected to reach US 1 billion by 1995.

Typical solutions that have been deployed include the use or rule sets and basic checks such as address verification.

Rule sets use if then logic that attempts to identify aberrant behavior using limited data including negative file information. Rule sets are difficult to implement because there is no real predictive capability associated with them. Throughout the 1990 s banks issuing credit cards quickly determined that rule based fraud approaches by themselves were ineffective because they 

AVS was designed for mail and telephone orders MOTOs and many online merchants use AVS today because it is the only tool they have. AVS has no international fraud detection capability is inconsistent in its results and while providing some value it is not designed for online transactions and is by no means considered a complete solution for Internet fraud detection and revenue optimization.

Accordingly there remains the need to identify and prevent fraudulent credit card transactions occurring over public networks such as the Internet.

In order to identify fraudulent consumer credit card transactions in an online environment e.g. the Internet it is desirable to create a profile for each buyer that summarizes the transactional behavior the buyer preferably for as many of the buyer s Internet purchases as possible. Such a profile makes it possible to contrast a currently attempted transaction with the historical behavior pattern of the buyer to help ascertain the likelihood of fraud. Also such profiles make it possible to identify a pattern of transactions that are individually benign but in aggregate indicates a likelihood of fraud. Two examples make this point clearer.

A buyer who normally buys only office supplies and airline tickets and does so only during business hours will have a profile indicating this behavioral pattern. If that buyer or more specifically someone purporting to be that buyer by using their credit debit card number were to purchase adult entertainment images at a late night hour the likelihood of fraud given the contrast of the transaction request and the established profile pattern should be estimated as higher. In contrast a buyer who regularly patronizes such merchants would have that information in their profile and the same transaction would appear less suspicious.

A buyer who normally transacts once a month makes 10 transactions at different merchants in a 10 minutes span. None of the 10 transactions may be suspicious on their own but once their accumulation is recognized within the profile the suspicion level of the latter transactions will be accentuated. This example becomes more complicated if two different credit cards numbers are used.

In order to create a profile of a consumer it is necessary to identify transactions of that consumer in the data streams received from many different sources. In segregating transactions a key is used to identify and distinguish transactions of one buyer from transactions of another. A key is said to be reliable if it identifies a unique buyer with a very low likelihood of multiple buyers being associated with the same key or multiple keys associated with the same buyer. The Social Security Number for instance is considered a very reliable key. The government in issuing those numbers goes to great length to minimize the likelihood of an individual being assigned multiple numbers or the same number assigned to multiple individuals. A key is said to be unreliable if the likelihood of multiple individuals sharing the same key or multiple keys identifying the same individuals is not very low. For instance a person s name is an unreliable key. A person may spell their name in multiple ways including nicknames and multiple individuals may have the same name. Credit card numbers postal addresses email addresses IP numbers and phone numbers are additional examples of unreliable keys. U.S. Pat. No. 5 819 226 discloses the creation and use of profiles based on transactional behavior. However as disclosed this system assumes that each buyer uses the same credit card for each transaction and thus transactions by the same buyer can be identified on the basis of the credit card number alone.

It is a fact of the Internet marketplace that there is no single reliable key that all buyers have and that is required to complete all transactions. For example while SSN maybe highly reliable it is not used in credit card purchases. Instead at best a multitude of unreliable keys that are frequently required name address phone number etc. . The lack of a single reliable key is a fundamental problem with any effort to create a buyer s profile that tracks transactions at occur at multiple merchants and with different credit or debit cards. This is because each merchant independently decides which information about buyers to require and how that information is recorded encoded and organized. Even the same information required by different merchants e.g. name may end up being different in form for example one merchant may truncate names over a certain length while other merchants do not. This means that there is no simple way to identify the various transactions made by the same buyers as such merely by matching individual keys e.g. matching name and address fields .

Accordingly it is desirable to provide a reliable way of identifying and aggregating transactions of individuals in order to build profiles of consumers for application to predictive modeling.

The present invention aids merchants by detecting Internet credit card transactions that are likely to be fraudulent and optionally providing the merchants with mechanisms for managing a suspected transaction as it occurs. While the primary discussion herein focuses on credit card transactions the principles of the present invention are equally applicable to debit cards ACH transactions micropayments and other types of transactional mechanisms employing identification numbers as well and thus no limitation to credit cards is intended.

A fraudulent transaction is one where the buyer supplies a credit card number without being an authorized user cardholder for instance a stolen card number . The financial responsibility for such a fraudulent transaction rests with the merchant who accepted the credit card number in payment. Accordingly by identifying fraudulent transactions as they occur the present invention enables merchants to reduce their exposure to these types of losses.

In one embodiment a buyer transacting through the Internet requests the purchase of certain goods from a merchant operating on the Internet and submits a credit card number as a form of payment. The Internet merchant forwards to at least one centralized scoring server relevant information about the requested transaction including identifying information about the buyer e.g. name shipping address Email IP address credit card number etc. and about the transaction e.g. amount items ordered click stream through the web site prior to the purchase etc. . The scoring server performs a mathematical calculation designed to estimate the likelihood that the transaction is fraudulent. That calculation takes advantage of information intrinsic to the transaction information about other transactions that the same buyer has been making elsewhere e.g. at other e commerce sites and optionally at non e commerce sites and reported to the scoring server and the contrast between this transaction and a profile established with respect to these prior activities. The estimation in the form of a score and optionally reasons for the score special situation reports and rules exceptions is returned to the Internet merchant. The Internet merchant then decides whether to approve decline ask for more information out sort to a human analyst or take other actions with respect to the transaction using the fraud estimation.

The scoring server performs its fraud estimation using a statistical model of fraudulent transactions. Historical data is collected to enable the creation of the fraudulent transaction model. The historical data contains the same types of information that merchants in the operational system transmit to the scoring server for each transaction. In addition the historical data is tagged to identify which transactions subsequently proved to have been legitimate and Which subsequently proved to have been fraudulent i.e. a supervised learning model . The historical data excluding the fraud tags is used to create the buyer profiles. A profile is created for each buyer who transacted at a subscribing Internet merchant.

The identification of the association of the various transactions with their respective buyers is done using a multi keyed algorithm. The multi key solution stems from the observation that while no one universally required key e.g. last name or address is reliable many keys together provide a probabilistic identification. Between them multiple individually unreliable keys provide a higher degree of accuracy probabilistic identification than any one key alone. Since an overall online fraud detection system may be designed to produce a statistical result a probabilistic identification is sufficient so long as the available information is contained within it. The multi keyed algorithm accumulates and profiles transactional information with respect to different keys that can be used to identify a buyer. Each buyer s profile contains information summarizing the progression of transactions the buyer has executed over the Internet including information typifying those transactions typical amounts types of purchase type of merchants hours of day etc. . A self learning computerized system is then used to train a statistical model to estimate the likelihood of fraud in the historical data of a given transaction given the information contained in the transaction as well as the state of the profile of the buyer in that transaction at the time the transaction is executed.

Transactions received at any participating merchant are forwarded to the statistical model for evaluation. The various profiles corresponding to the different keys of the transaction along with the current transaction information is input into the model the model provides an estimate of the likelihood of fraud. The merchant can then process the transaction based on this estimate by either approving declining or out sorting the transaction or requesting additional information from the purchaser.

These features are not the only features of the invention. In view of the drawings specification and claims many additional features and advantages will be apparent. The specification describes the invention for readability and instructional purposes. It does not limit the invention. A review of the claims is necessary to determine the invention.

The figures depict a preferred embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the illustrated structures and methods may be employed without departing from the principles of the invention.

The present invention is described herein with respect to one preferred embodiment which is called eFalcon for purposes of reference and identification. It is understood that the present invention may be embodied in other forms and configurations other than the exact specifications and features of eFalcon as described in this specification.

Referring now to there is shown an illustration of an embodiment of one eFalcon system that operates in accordance with the present invention. Here eFalcon system includes a merchant web site and a scoring system these are communicatively coupled either by a point to point connection e.g. dedicated T1 line or any other Internet type connection. The merchant web site includes an order fulfillment system that receives incoming orders via the Internet from client computer only a single client computer is shown but in practice there are many individual client computers operating . The orders may contain standard types of product or service order information e.g. product code and other attributes of a product being ordered and along information identifying the purchaser e.g. name shipping address e mail address IP address and along with a payment identifier such as a credit card number. The orders may alternatively or additionally be received via mail or telephone and then interfaced appropriately to the fulfillment system . The order fulfillment system forwards orders to be processed to a rule engine . The rule engine forwards this information to the scoring system as a scoring request. The connection between the rule engine and the scoring system is preferably secured e.g. SSL given the highly confidential information contained in the transaction purchaser and payment information.

The scoring system analyzes the provided information in the scoring request and estimates the likelihood that the transaction is fraudulent. In generating this estimate the scoring system matches information about the purchaser derived from the scoring request with information about other transactions that are most likely made by the same purchaser elsewhere e.g. at other e commerce sites and optionally at non e commerce sites to obtain an overall profile of the purchaser s historical buying behavior. More specifically multiple profiles corresponding to different key values derived from the scoring request are obtained and used by the scoring system . The profiles provide summaries of historical transactions for the individual s associated with the profile. In embodiment every transaction received from a merchant is used to update the profiles associated with that transaction.

The scoring system includes one or more predictive models of fraudulent transactions. The profile s and the current transaction information are input into the predictive model s to produce the estimated likelihood of fraud. A predictive model is preferably a statistical model of fraudulent transactions. Multiple models may be used with a particular model being employed for scoring a transaction depending on various transaction attributes such as product type merchant category code or the like. The predictive model is derived from historical data containing the same types of information that merchants in the operational system transmit to the scoring system for each transaction. In addition the historical data is tagged to identify which transaction subsequently proved to have been legitimate and which subsequently proved to have been fraudulent i.e. a supervised learning model . The historical data excluding the fraud tags is used to create the various key profiles. A profile is created for each buyer who transacted at a subscribing merchant key profiles for different keys are also created. The estimation in the form of a fraud score reasons for the score special situation reports and rules exceptions is returned to the merchant s rule engine . In one embodiment the fraud score is a scaled scored between 1 and 999 though certainly other scales may be used.

The scoring system operates in a service bureau or application service provider model and may contain multiple servers operating in parallel to ensure high speed scoring of transactions from many different vendors. In one embodiment as shown in a proxy server operates between the rule engine and the scoring system . The proxy server is used preferably by an Internet merchant service or commerce infrastructure provider typically supporting multiple merchant sites . In this embodiment the proxy server acts as a conduit by receiving the scoring requests from the merchant sites delivering them to the scoring system and then receiving the scores from the scoring system and returning them to the requesting rule engines .

The rule engine implements various rules that establish its policies for dealing with fraudulent or potentially fraudulent transactions.

Given the fraud score for the transaction the merchant s rule engine perform various actions including 

The merchant defines rules that apply the foregoing actions as desired based on the fraud score. The rules are defined and updated using a policy management workstation PMW . The PMW allows the merchant to write policies formulated as computational rules that become active within the rule engine integrating a real time decision making process into the merchant s order fulfillment system . The PMW allows the merchant to define edit delete any rules it desires. The use of the rules enables the merchant s fraud risk prediction system to automatically determine actions based on the fraud scores order data and information from external sources and to incorporate information from the negative files that the merchant may have already accumulated. The use of rule bases rule sets releases the merchant from the limitations of using a binary Yes or No to determine the action to take on the fraud score.

One embodiment of the eFalcon system operates as described using the rule engine and the PMW . A more sophisticated embodiment includes the order management workstation OMW as illustrated in which is used to handle out sorted orders. The out sorted orders are those that are neither immediately approved nor declined e.g. in the gray . The out sorted orders are stored in a file system and may be sequenced for handling where an operator using the OMW can review each order and decide what further action to take in order to finally dispose of the order. The OMW displays order customer and merchant information for individual transactions. Having detailed order information helps representatives determine which orders are likely to be fraudulent. OMW users can view a variety of data such as customer name and address and details about order items. Users can also see any previous activity on the order and enter comments. Thus the OWM is used for control and manipulation of orders being processed so as to fulfill as many orders as possible while avoid the risk of fraudulent orders.

After reviewing the data the representative can determine whether the order is fraudulent and decide to hold accept or reject the order. The OMW also allows the merchant to specify the reason for the decision such as non sufficient funds NSF applicable to ACH or an anonymous email address. If a representative wants to accept an order immediately without reviewing the data for example if the order is placed by a known good customer an OMW Accept Order option processes the order with no further action required.

In addition to review functions the OMW enables supervisors or other authorized personnel to create queues add new users to the OMW and perform other administrative tasks. Queues are tools that group orders according to like characteristics for example orders over two thousand dollars and direct those orders to specific representatives for review. The system gives the merchant the ability to define and create queues according to user specified criteria. This queue definition feature gives the merchant the ability to control and direct workflow. Through the use of queues administrators select the type of orders that go to each representative making the most efficient use of available resources. If no queues are specifically defined default queues determine the sequence in which orders are presented. Once a queue is defined it may be assigned to one multiple or all representatives.

The present invention differs from conventional approaches to merchant situated fraud detection in various ways. In one regard it does not look at each transaction on its own but instead contrasts the totality of behavior of a buyer across all subscribing merchant sites. This allows for a more accurate profile of the overall purchasing behavior of the buyer since it considers transactions at multiple merchants. This is only possible with the use of consolidated transactional information from many merchants and only if the problem of identifying transactions of a buyer across a multitude of sites is resolved since it is necessary to accurately identify which transactions belong to which buyers at the multiple sites. Also this method uses information not typically supplied with credit card authorization data for instance information about specific orders such as product identifying information and not traditionally used in fraud control. Conventional authorization based fraud control typically used just the merchant information buyer information and the amount of the transaction but not details about the items being purchased. Item information is useful here to create a more complete picture of the types of products and services each buyer typically purchases over the Internet.

As noted above in order to accurately determine whether a given transaction of a purchaser is fraudulent it is desirable to compare that transaction with prior transactions of the purchaser. However accurately matching the purchaser identified in a given scoring request with data of known purchasers is difficult because of the vagaries irregularities and inconsistencies typically observed in purchaser information in online environments. In one embodiment the system described above overcomes the problem of purchaser identification using a multi key approach. illustrates a sample embodiment of the eFalcon system using this approach considering both the development and production environments.

Generally to provide a multiple key solution a number of unreliable or not perfectly reliable key fields are selected for both training and production use. In one embodiment these fields include 

Other keys that may arise in certain circumstances such as frequent flier number company name company address or telephone number fax number account number and like may also be used.

This information is collected from many different merchants from transactions conducted at these merchants e commerce sites. More particularly a large number of transactions are accumulated from the many merchant sites. Optionally non e commerce transactions may also be used.

A profile is built based on each key at least individually as if it was reliable. Thus all transactions sharing the same name are profiled together as are all transactions sharing the same address and so on for each of the selected individual keys. These profiles are stored in a profile database in association with their specific key.

As result of the profiling of each key field some profiles include information that pertains to multiple individuals and some profiles contain information that pertains only to some of the transactions of a specific individual. As an example of the former a profile based on shipping address will capture all transactions to that address at which there may be several individual cardholders. As an example of the latter a profile based on IP address will capture transactions from a specific computer but a cardholder may well use many different computers to make purchases e.g. a home computer and a work computer .

In an optional embodiment profiles based on combinations of keys may be generated . For example combination keys may be defined such as 

Consequently each transaction is used to update multiple profiles in the profile database . That is the transaction will influence the transaction pattern of each profile for which it matches at least one key. Thus a given transaction for which name address email address and IP address is known will be used to update at least four different profiles one for each of these keys.

Variables are generated from for each key or combination key profile. That is transactional summary variables such as averages rates total frequencies of transactions authorizations declines dollars SIC codes and so forth are generated from the transactions in each of the profiles. These profile variables are stored in their associated profiles. These variables usefully describe the historical purchasing behavior of the individual s contributing to the profile.

For certain pairs of these profiles and for certain variables in the profiles a contrast measure is computed . Preferably the contrast measure is the ratio of the profile variable value in the pair of profiles. The contrast measure provides a measure of how similar the profiles are to each other and thus how reliable they are in describing the buyer s transactions. The idea here is that if two profiles have very similar variable values then they are most likely derived from the same set of transactions and thus represent the same buyer.

Example Suppose there is a velocity variable any variable that measures the rate with which a buyer does something such as execute transactions make purchases obtains authorizations or the like There will then be a transaction velocity variable for each of the unreliable or not always available keys name profile transaction velocity email profile transaction velocity etc. Thus if there are six keys of interest then there are six transaction velocity variables. Likewise for any of the other variables in each profile for which a transaction velocity is desired. Other rate variables may be measured as well not merely transaction rate .

From here the system can calculate say the contrast measure between various pairs of the profile velocities. For example a contrast measure may be computed for 

For each pair when using a ratio the closer the contrast measure is to 1.0 the higher the confidence in the value provided by the two velocities contrasted for the specific transaction since it would be a remarkable coincidence for two velocities to be almost the same unless the transactions that went into each and hence each profile were nearly identical. Identical profiles likely means identical entities e.g. purchasers associated with these profiles and thus accurate identification of the purchaser. Obviously if using the difference as the contrast measure then closer the measure is to 0.0 the more likely the profiles are for the same purchaser.

Finally to train the scoring model each transaction its associated set of key profiles and the contrast measures are input in a supervised learning environment. The contrast measures allow the scoring model to weight the influence of the different key profiles in terms of their reliability for fraud prediction. In this way absolute accuracy in matching up profiles with a particular buyer during operation is unnecessary since the scoring model appropriately weights more accurate profiles to increase their influence in describing the buyer s transaction behavior. The scoring model may be developed with standard statistical computer learning packages such as SAS the HNC Data Mining Workstation S or the like. Once developed it is deployed within the scoring system .

In one embodiment the scoring model is one or more neural networks. Neural network scoring is effective for fraud and risk assessment because of its ability to observe patterns and detect the slightest behavior anomalies. Criminals normally make fraudulent transactions to purchase items easily converted into cash. The behavior displayed in using a bankcard for Internet fraud is fairly specific and varies from the typical way consumers make transactions. Consumer transactions normally have the following detectable patterns 

Through the use of the profiles during model training the scoring model learns what patterns of transactions are indicative of non fraudulent and fraudulent behavior taking into account what behavior is normal in an account as described by each consumer s profile. What looks normal for one account may be flagrant fraud for another account. For example if a consumer only uses his credit card in the evenings to buy computer equipment from an online electronics outfit then a charge on this same credit card for a case of Vodka from an online merchant at 10 a.m. looks suspicious. However this same charge appears more reasonable for many other accounts which have a history of early morning purchases at liquor merchants. Typically the score for a transaction is high for orders appearing abnormal and especially high for orders that both appear abnormal and similar to some pattern of fraudulent activity.

In general there are three categories of information that the scoring model models the general characteristics of fraudulent orders individual cardholder behavior and normal customer behavior at the merchant s site. Each of these contributes important variables to an evaluation of the likelihood of fraudulent activity. While methods of perpetration of fraud change frequently the basic criminal behavior and activity with fraudulent cards is slow to change. As a result the scoring system contains both dynamic and static components. The dynamic components include reasonable and customary account models updated in real time with each order. The static components include the fraud behavior models maintained and updated as fraud behavior changes or as increased prediction accuracy is achieved. The scoring model is developed by using historical transaction and account information from as many different card issuers and other transaction information sources as possible which is known as consortium data. 

In the operational environment then the flow is very similar to that described above. A scoring request for transaction for a transaction is received . The information corresponding to the profiled keys is extracted for example the buyer s name address and so forth if such information is available . The matching profile for each key is retrieved from the profile database .

Then the profiles corresponding to the value of each of these keys are retrieved. Thus the profile for the string John Public and for the address 123 Main Street Belmont Calif. and so on are each obtained .

Any profile variables that are dynamic are generated and the appropriate contrast measures between selected ones of the profiles are also computed .

The current transaction information is then input into the scoring model for scoring along with the various profiles associated with each of the individual key values or combinations and the contrast measures which act to weight the profiles . The scoring model uses this information to compute the fraud score. This output fraud score is returned to the merchant s rule engine .

In an alternative embodiment instead of all profiles being input in the scoring model certain profiles are selected for input prior to scoring based on their contrast measures such as selecting those profiles whose associated contrast measures are above a certain threshold.

A suitable scoring system for scoring transactions and for storing a model of fraudulent transactions is the Capstone Model Manager which may be purchased from HNC Software Inc. of San Diego Calif.

In one embodiment the scoring system includes a model manager a scoring model and a profile database . The model manager is used to develop the scoring model . Model development begins with data pre processing. This stage is handled by a model manager driver. During this stage raw data such as the historical transactions is converted by the driver into variables for the model development data set.

The desired variables are first defined using a modeling language such as the Capstone Model Manager Language to define and calculate all variables that may be used in the model. Defining the variables in separate files based on variable categories and then including them into the main model can further localize the variables. This modularizes the model development process and logically separates it from any expert rule bases that are also being employed. In this embodiment the defined variables will include the desired transaction summaries to be calculated for each profile e.g. the velocity measures discussed above along with the contrast measures for selected sets of profiles.

Once all the variables and their associated calculations have been defined along with other ancillary code the modeling data set is generated. This is done by feeding the raw data through a modeling driver which performs the defined calculations on the data and then uses an output functions to write out the values of the calculated variables to a designated file.

Once the modeling data sets have been generated the modeler can now perform statistical analysis using standard tools like SAS S Plus or HNC s Marksman. These tools can be used for variable selection and model building. The completed model preferably is a statistical model e.g. a neural network or regression model but may also include rules for further transaction processing. One example of a statistical model is described in U.S. Pat. No. 5 819 226 which is incorporated herein by reference. As mentioned above this approach uses one or more profiles of each consumer s historical spending behavior to determine whether a particular transaction presented by the consumer is aberrational.

The model manager includes a rule editor for editing model rules and a model driver that accepts the raw input data and calculates variables for model development. Rules may be used to execute variable calculations flow control and data manipulation. Rules are extremely useful in creating expert systems or to control model inputs and outputs. For example rules may be written to flag transactions with certain attributes e.g. very high transaction amount .

The model may also include functions and calculations. Functions are very similar to rules except that they take arguments and return values. Calculations may be performed within rules or functions or within variable calculation blocks. A variable calculation block includes a variable declaration followed by the method by which the variable is to be calculated. In addition variables calculations can be logically grouped together so that at execution time all variables within a group can be calculated via a single function call.

As noted above scoring system includes a profile database . As previously explained this database will store profiles related to different keys derived from the historical transactions which profiles are then used in model development e.g. as the source of the variables contrast measures and the like. It is important to note that the transactions used here in model development come at least in part from a variety of different merchants and are not limited to transactions from single merchant. This gives the model a robust set of transactional data that best approximates the purchasing behavior of individuals who shop at multiple merchants. The multiple keys allow for the reliable identification of an individual as that individual transacts at multiple merchants. Hence the multiple key profiles summarize an individual s transactional behavior across multiple merchants.

The merchant system includes the fulfillment system the rule engine the OMW the PMW and their associated data stores the outsorted orders and fraud policies . The fulfillment system may be any type of online ordering system that supports conventional product ordering process flow such as providing a catalog of available products order forms and scripts for receiving product information and purchaser information and any other business logic that the merchant desires. It is preferably that the fulfillment system capture sufficient information to basically identify the purchaser as indicated above otherwise there is no constraint imposed on the features of the fulfillment system by the present invention.

The rule engine operates on a conventional computer system such as a Sun Microsystems s UltraSparc or Intel Pentium class computer executing a conventional operating system such as Sun Microsystems s Sun Solaris or Microsoft Corp. s Windows NT. The rule engine is coupled to the scoring system by either a convention Internet connection or by a point to point connection such as an ISDN or T1 line or frame relay.

The rule engine interfaces between the fulfillment system and the scoring system . The rule engine includes modules that receive transactions from the fulfillment system provide the scoring requests to the scoring system and then apply rules to the scored transactions. The interface to the scoring system is provided by a client application programming interface API that provides various function calls to the rule engine .

The scoring system provides an interface API that enables the merchant to link the rule engine to the scoring system such as through the proxy server mentioned above. The calls are made to a shared object library on a Sun Solaris Linux or HP UX platform other platforms may be used as well. The library functions provide connection and scoring invocation services.

The API library supports both synchronous and asynchronous scoring by the scoring system . In asynchronous mode the API returns immediately to the calling application when a scoring request is made. In synchronous mode the API does not return until the scoring system has returned the score or a timeout has occurred.

The API library provides fully redundant connectivity between the rule engine and the scoring system . This is provided through multiple point to point connections such as direct network connectivity T1 lines or Internet access. Failover is handled automatically by the library. The redundancy is completely transparent to the applications programmer using the API.

Communication between rule engine and the scoring system is provided by the passage of messages across the communications interface. The API library provides a series of function calls permitting application programmers to build messages for the scoring system by concatenating a series of fields. When message building is complete the application programmer sends the message by invoking another API function.

As discussed above illustrates the general processing flow for the rule engine to pass a scoring request to the scoring system . This processing flow is discussed now is more detail with reference to various ones of the API functions used.

Generally in calling the scoring system the calling application which is typically the rule engine but ostensibly can be any application that has access to the data of a transaction and to the API requests allocation AllocHandle of a handle for a threaded connection to the scoring system and then requests connection via the handle to the scoring system Connect . Given the handle then the calling application forms a scoring request by setting a number of data fields using data from the transaction SetField SetDefaultField SetFields SetDefaultField ClearField ClearDefaultField ClearFields or ClearDefaultFields .

The fields are set as name value pairs. While these fields are illustrative not all are mandatory. Also while a scoring request is being constructed the calling application can query the request to obtain field data GetField GetDefaultField GetFields or GetDefaultFields . The calling application then sends the scoring request via the provided handle to the scoring system Send .

The calling application then separately requests the scoring result from the scoring system GetResponse . This call is responded to as the scoring system as it becomes available. The calling application then disconnects Disconnect from the handle to close the connection to the scoring system . A multi threaded implementation would create multiple threads at once with a handle for each thread and define a scoring request in each thread.

The following fields are used if PAYMETHOD is O card number provided online P card present or V card number provided by phone 

The following fields are used only when multiple products are ordered and shipped to recipients at multiple physical addresses 

The scoring response by the scoring system preferably contains a score generated by the statistical model along with zero or more reason codes that explain the basis for the score. The reason codes are particular to the variables used by the statistical model but typically will indicate one or fields of the data that represent unusual activity or data in the transaction unexpected changes in data mismatches or invalid data. For example unusual activity may include as an unusual merchant dollar amount shipping method zip code billing address email address telephone number and so forth. An unexpected change may be a change in the address telephone number IP address email address payment method. Mismatches include mismatches between billing address and telephone number email address and IP host email and billing address IP host and billing address and so forth. Invalid data includes invalid card number dates and so forth.

The reason codes are returned to the rule engine which has a corresponding lookup table for interpreting the codes. The foregoing set of reason codes is merely exemplary and other reasons and codes may be used.

In one embodiment where a proxy server is used the proxy server is the calling application mentioned above and interfaces with the scoring system itself. In this embodiment the proxy server exports an interface to the merchant system to allow the merchant system to forward scoring requests to it.

Where the proxy server is used it provides the above described API for scoring system along with additional function calls to specific to it. These include 

The Policy Management Workstation provides an easy and safe way to add predictive power to the rule engine . The PMW allows fraud managers to easily define and deploy rules to automate various fraud prevention procedures in response to information provided by the scoring system . It provides a simple means of writing and implementing rules that can be used to create or reopen fraud cases based on the order fields or the score. PMW lets the merchant apply different score thresholds to different sets of credit cards or to users whose IP addresses fall within certain ranges.

In order to better understand the operation of the PMW there is first described the operation of the rule engine in using rules to process scored transactions. Referring now to there is shown the basic processing flow provided by the rule engine for a typical order. The flow illustrates an incoming order after it has been assigned a score reason code and exception code from the scoring system and returned with this data the rule engine . As the order proceeds through the rule engine it is processed through rule bases containing rules that recommend the final outcome resulting in one of the sample actions shown on the right of the diagram.

NEGATIVE FILES This rule base is used by the rule engine to check incoming customer data against stored negative information such as phone numbers IP addresses card numbers and so on. A Negative file lists data that is identified to be linked with fraudulent or suspicious activity or sources of transactions. Negative results from these rules can immediately reject incoming orders. A sample rule might reject orders from customers with certain IP addresses. When an order is rejected the customer does not actually receive the information. A flag is set and the data is returned back to the merchant so they can take action. In one embodiment a generic set of negative rules is provided and merchants can use the PMW to modify such rules.

DEFAULT This rule base contains a sample rule that specifies when to apply the rules of the DFLT CHALLENGER DFLT TEST and DFLT CHAMPION rule bases. In one embodiment it provides a rule syntax that applies the rules of the DFLT CHALLENGER and DFLT TEST rule bases if the customer placing the order is generated a random number greater than or equal to 95 and to apply the rules of the DFLT CHAMPION rule base otherwise.

DFLT CHALLENGER This rule base is a test bed for rules that may eventually be introduced to the DFLT CHAMPION rule base . For example the default challenger may contain all rules of another rule base with one of the rules deleted or a new rule added or one modified rule. These rules must be created with different rule names however. A small percentage of orders will go through this rule base to determine if it is more effective than the rule base currently in use. If the default challenger is proven to be more effective than the champion it can be promoted to replace the champion.

DFLT TEST This rule based contains additional rules that may eventually be added to the DFLT CHALLENGER rule base. Contains rules to be tested before going into production. The rules are fired and logged but do not have any affect on the outcomes of orders.

The challenger champion and test rule bases may also contain sequential rules that define the sequence in which other rules in the rule base are to be executed.

Once processed by the rule engine the result is that the order is either rejected accepted outsorted or more information is requested from the consumer by displaying a web page form.

Rules do not affect the score provided by the scoring system . Rather they fine tune the prediction of the eventual outcome of the transaction so that users or the fulfillment system itself can take different actions depending on the circumstances. For example a rule might take an action based on a consumer s IP address or email address such as hotmail.com and outsort the order specifically for further review.

Rules typically are if then constructs that are based on human judgment and experience and can be used to add knowledge to models and specify actions to take based on various circumstances. Various factors are to be considered when designing the rules. The type of goods being purchased is one consideration for example digital versus physical. The category of merchandise is another consideration such as books versus gambling. The price of goods is another consideration especially when determining whether to outsort an order. For example if an order has a relatively high score but is also for a very high amount the merchant may want to try to rescue the order from rejection by further human investigation. The Policy Management Workstation also provides the capability of generating risk based form filling where there is provided a basic form that the consumer fills out and the scoring system evaluates and returns a score. Based on that score the rules can spawn new pages that request more information request that the consumer call the merchant or inform the consumer to expect a phone call from the merchant. However a concern here is that the more information the merchant asks of the consumer the less likely he or she is to buy.

Rules can also be used to add knowledge to the scoring models and enhance the decision making process. The scoring models are based on historical information. Sometimes a recent event however can change the statistical likelihood predicted by a model. For example a theft of credit cards from a post office could raise the likelihood of fraud in the zip codes covered by that post office at least for a time. However this event would not be reflected in an scoring model because the model was not built using data reflective of this type of occurrence. Consequently it would be useful to deploy a rule to open fraud cases on all transactions in the affected zip codes regardless of their fraud scores. In effect the rule would add knowledge of the theft to the existing model.

In addition to using rules to respond to short term fraud threats the merchant can use them to represent patterns not reflected in the scoring model. Rules can also be deployed to reflect fraud trends that have not yet become solid in the historical data used when building the scoring model and to take into account data sources not used by the model.

Rules are generally written by identifying fraud detection problems that the merchant wishes to solve and articulating narrative expressions of the rules for detecting such fraud. The narrative expressions are then converted to pseudo code if then statements and organized in a logical manner. From there the rules are encoded in the syntax of the rule base using the appropriate functions operators and constants. For example a rule may be 

This rule states that if a customer s email address is hotmail.com the order is rejected per reason code a suspicious email address.

This rule requests additional information or requesting that the customer contact the merchant and sends orders with scores greater than HighestScore to the Order Management Workstation via the OutsortOrder function. Here HighestScore is a global constant set up by the merchant. For example HighestScore might be equal to 950.

More generally rules consist of statements that define conditions and determine actions to be taken if the conditions prove to be true for instance If a customer s IP address falls within a certain group of numbers then reject the order. Rule statements are written in a simplified version of the Pascal programming language. The following syntactic constructs are supported 

In one embodiment the PMW provides an easy to use graphical user interface that includes various windows and menus for creating rules selecting operators variables constants functions and other rule elements and for sequencing the rules within a rule base.

The IF . . . THEN . . . ELSE construction of rules is generally conventional allowing for nesting of conditions and actions. Begin and end block are set off by the BEGIN and END keywords and delimit distinct elements of a rule to be treated as unit. Blocks group actions nested conditions or the creation of variables. BEGIN and END keywords must correspond.

The structured reference to data elements is provided by template fields. Template fields have two parts to their names separated by a period . . The segment to the left of the period indicates the data feed or template from which the field comes. The segment to the right of the period is the name of the field. A template is either an order or response template. The order template contains all fields containing data pertaining to online orders. The response template contains all fields containing responses from the scoring system . By specifying the appropriate template field a rule can respond to the value of any element of the order or the response. For example ORDER.billstate provides the billing state of the customer.

The operators include the standard AND NOT OR and IN. Functions include standard date time and string manipulation and conversion functions e.g. converting time or dates to seconds or day numbers days of week left right mid string truncation and numeric functions maximum minimum absolute value modula random value round .

In addition functions specifically for accepting rejecting and outsorting orders are provided along with a function for displaying a page. The syntax of these functions is as follows 

In this example the phones negative file is queried to see if the phone number on the order matches one of the numbers in the phones negative file. If so the order is flagged for rejection.

The response structure used by the rule engine uses the decision codes to indicate the status of each order following rule processing. These codes are used by the OMW to select the appropriate queues or by the fulfillment system to complete processing of the order.

Most conventional fraud detection systems rely heavily on negative files for their online payment card fraud risk decisions. While the scoring system allows the merchant to build and use negative files the system s scoring model already takes into consideration negative customer behavior on each payment card account in a way that is vastly superior to the simple use of negative files. Credit card based negative files on the other hand are human constructs that only describe the past negative behavior on those accounts. The use of this type of negative file alone in fraud decisions is by definition extremely limiting and ineffective. This is because by the time the information is placed into negative files by humans the cards have usually been cancelled and subsequent authorizations declined. If the merchant accepts a card which has been cancelled the merchant is assessed a chargeback.

Merchants get a good volume of chargebacks from cardholders who take advantage of the card not present CNP charge back rules and lie to disclaim participation in a purchase in which they participated. Card issuers often will not reissue cards on accounts with two or more CNP charge backs. Some issuers allow more. Issuers view the need to reissue cards as an added expense and inconvenience to their customers.

This means that online merchants can get transaction requests from cardholders who have successfully disputed legitimate transactions and thereby stolen from them. Charge requests can be authorized by the issuer because they did not block the card. Orders can then pass through the merchant s fraud detection system if the merchant has not put the card number in its negative files.

The merchant therefore should create a negative file for card numbers of customers who have stolen from them before. The limitation to this is that the customer can use another credit card the next time they make a fraudulent purchase. The multi key profiling capability described above provides a solution to identify such customers.

Another kind of negative file that may be used by a merchant is a file of addresses of customers who have made fraudulent purchases so that the merchant no longer sells and ships goods or services to those same addresses. The merchant can also create files to block orders from phone numbers where fraudulent purchases were made. The limitations however are that these are static negative files and people have a tendency to move especially people in the habit of defrauding others. Someone else may move to the same address who is a legitimate customer. The phone company also reuses phone numbers. Thus both the address and phone number negative files may block good customers from making purchases. It is desirable therefore to institute policies and procedures for updating these files on a regular basis.

A merchant can also create a negative file of all email addresses from which fraudulent orders have been made. The limitation here is that it is easy to use a bogus card to sign up for a new email address online with AOL Hotmail or Yahoo. Fraudsters can then give a new email address the next time they make a purchase. Again these files need to be frequently updated.

A substantial amount of charge back losses may be experienced on orders submitted from a specific IP address or range of IP addresses. These IP addresses can then put into a negative file. It is however easy to spoof an IP address and is common that fraudsters use different IP addresses the next time they attempt an order. Again frequent updating is desirable.

Significant chargebacks may be experienced from certain zip codes. Likewise some countries have high fraud percentages such as Russia Romania Brazil and Argentina. The merchant can set up negative files of zip codes and countries to which it does not wish to ship merchandise.

It is also desirable to establish negative files for customer names including the names of customers who made fraudulent purchases in addition to names such as John Doe Mickey Mouse or Donald Duck. Another more obtuse but interesting names negative file includes keyboard strings like ASDF QWER LKJ 1234 and so on that are quick to type. Some fraudsters use rude strings to rub in the fact that they are stealing from the merchant. These names should also be put into negative files. The limitation is that as fraudsters become more sophisticated they will not use keyboard strings and raunchy names.

Rules created via PMW may be used to overcome some of the limitations of negative files described earlier such as address and phone number changes. For example a rule may say if the fraud score is high and the phone number is in a negative file decline the order but if the score is low approve or outsort the order. Rules can also cover multiple negative file hits. For example if the rule looks at three negative files Rude Names Keyboard Strings and Email Addresses and all three are found then a higher risk is assigned than if only two are found.

A velocity rule is a rule created via PMW that lets the merchant track the number of times orders have been processed for certain key data and lets the rule engine automatically execute decisions based on those velocities. The rule engine lets the merchant easily track velocities on multiple ORDER template fields over multiple time frames. Key data can be specific instances of any field of the ORDER template such as credit card numbers CARDNO Social Security numbers CUSTSSN or customer IP addresses CUSTIP .

The following table shows all fields of the ORDER template whose velocities the merchant can track using rules.

Each of these fields may be associated with a unique code or tag which can then be used to identify the field instead of by its field name.

There are two types of velocity rules the merchant can create. The rule types work together to track velocities and make decisions based on tracked velocities 

Velocity rule bases are created like other rule bases and sequenced for execution as well. It is preferable that velocity rules are executed before negative files in order to track the data fields in orders rejected by the negative files.

To create both types of velocity rules the merchant uses a tag integer value that maps velocity fields to integers used internally by the rule engine . To make it easier to see which velocities are being tracked the merchant should set up each field to be tracked as a constant that represents its tag integer value. For example the CARDNO field may be represented by a constant tag 12 . To track velocities then the merchant adds a rule that creates and updates records for the key value of each field whose velocity the merchant wish to track. For example the merchant can create a rule that will create and update a record that tracks velocity for each credit card number Social Security number or IP address. This done using an UpdateVelocity rule function which updates the flat file that tracks the desired field.

For example the function appears as follows when the merchant wish to update the velocity on all credit card numbers 

The merchant repeats this process for each field whose velocity the merchant is tracking. Additional examples of velocity tracking.

Once the UpdateVelocity rule is define the merchant next defines a velocity decision rule using the tracked velocity field. For example 

This rule states that if three or more orders have been placed in the past six days for the current credit card number the order is flagged as a reject and assigned reason code representing a suspicious velocity.

The tag and key arguments are the same as those described above. The period argument represents the time over which the merchant wishes to calculate the velocity for the specified field represented by nS nM nH nD or nW where n is an integer and S M H D or W specify seconds minutes hours days or weeks.

Once one or more velocity rules are defined the rule engine is restarted in order to register the new rules.

The rule engine API includes functions to effect the use of velocity rules by the fulfillment system.

The following sample code opens a velocity flat file that tracks up to three orders made on each credit card number for up to 6 days 6 24 144 hours and holds up to 10 000 records

Once a set of rules is defined it is placed into the production environment through a testing protocol. New rules are created placed into a minimal production environment further tested and refined and then finally promoted to full production. It is most desirable that rules be tested appropriately in a non production environment before being moved into a champion challenger production environment. Untested rules can have unintended and potentially disastrous effects.

The Policy Management Workstation lets the merchant run preliminary tests on rules before moving them into production. This is typically done for several days with the rules in the DFLT TEST rule base . As noted above these rules operate on the order but have no impact on the order handling. The merchant can then evaluate these rules individually before deciding to move them into their corresponding challenger rule base which places them into production for a small percentage of the orders processed by the scoring system e.g. a 5 sample . This is done to make sure that the merchant does not introduce unexpected consequences into the production environment.

In order to judge the efficacy of the test rules it is desirable to measure the frequency and accuracy of the rule firings. Frequency is determined by the number of rule firings. Accuracy is determined by examining fraud detection and false positive rates for each rule. Once a desired level of frequency and accuracy are reached a rule may be moved to the challenger rule base for further testing.

Once moved into the challenger rule base a rule will accept reject outsort or request additional customer information via web page on a small percentage of orders it processes through the scoring system eliminating the need to test the entire data feed being handled. Again it is important to measure the effectiveness of the system after placing one or more rules into a challenger rule base

A valuable report for learning the efficacy of a challenger rule base is the frequency of firing of a rule when data is flowing through it. This report tells the merchant how often a rule is actively operating to manage an order.

If after moving a rule to a challenger rule base it is determined that the rule is not performing as desired it may be moved back to its test rule base for further modification.

To obtain adequate confidence in a challenger rule base it is desirable to operate such rules for a more extended period of time from several weeks to several months. Once satisfied the merchant can the promote challenger rules into the champion rule base

A primary output of the eFalcon system is the fraud score that measures the likelihood that each order is fraudulent. In one embodiment the merchant may create a rule that sets a threshold or cutoff score above which all orders are rejected. The merchant might then create a different rule with a lower threshold score outsort score for which all orders receiving scores above that threshold and less than the first are flagged for further investigation. For example these rules may be defined as follows 

In another embodiment such orders can be automatically sent to the Order Management Workstation to be tracked and handled via human intervention. These powerful tools put decision making ability into the merchant s hands. By defining rules the merchant can modify the basic system to meet the specific product customer and business requirements of the merchant s organization.

In using the eFalcon system the determination of the cutoff score above which orders are investigated results from a cost benefit analysis based on the fraud risk score and possibly other factors. The cost is the human resources required to investigate false positive orders and the benefit is the detection of genuine frauds and the prevention of fraud losses. An order should be investigated only when the expected benefit exceeds the expected cost. A further discussion of this cost benefit analysis is set forth below.

An optimal strategy to improving the cost benefit analysis is to investigate the riskiest accounts first. This strategy maximizes the number of frauds caught per customer contacted. Investigation should proceed down the list through successively less risky accounts and continue until the incremental cost of detecting the next fraud outweighs the expected fraud savings.

Working on orders assigned high scores is one way the merchant can use the system to manage fraud risk. Alternative strategies can be developed to optimize different business objectives or incorporate previously unavailable information. The rules the merchant creates via the PMW let the merchant incorporate expert opinion concerning high risk activity such as zip codes associated with known fraud rings when designing the merchant s fraud prevention policies. For example suppose the merchant s fraud expert determines that a fraud ring is operating somewhere in Chicago. The merchant can create rules that outsort all orders originating from zip codes in the areas that pose the highest risk.

With the system the merchant s fraud analysts can add their knowledge of these conditions to the system as rules that create the most effective responses to high risk situations. In this way the system provides an expert system capability combined with the system s statistical scoring models . The result is more flexible and powerful fraud detection that is adaptive to abnormalities.

Assessing Internet fraud risk is not a one dimensional exercise. There are several categories or classes of risk. There are two types of risk classes that are often used synonymously product risk and transaction risk that should be separated and distinguished from each other. Product risk is the risk associated with the type of goods or services that the Internet merchant sells. Some products and services by their very nature are inherently more risky than others. For example items that are easily convertible to cash popular and desirable to be stolen or are frequently disputed by cardholders have a high product risk. Assessing product risk is best accomplished by evaluating the Internet merchants market segment historical risk performance and business policies and practices.

Transaction risk is the risk inherent in each individual Internet transaction or order. Although a merchant may choose to do business in a high risk product segment the majority of their Internet orders are going to be legitimate. For example what is the risk of fulfilling an order for one CD burner as compared to the risk of fulfilling an order for eight DVD players Assessing transaction risk is best accomplished utilizing the data available in the order and the robust predictions of the scoring system . Assessing each risk category requires a different risk management strategy and has fundamentally different business decisions. Distinguishing between product and transaction risk is not always easy. However the more one is able to distinguish between the two risk classes the better one will be able to be at designing risk management policies that are appropriate to the individual situation.

Internet based commerce may be categorized into the following the high level segmentations in Table 8.

Although these high level segmentations are useful they are generalized and are only intended to provide a high level indication of the relative risk as each merchant s specific processes and procedures will significantly impact their actual fraud losses.

The scoring system takes into consideration unique product differences when it assigns the risk assessment or probability to a scoring request. Therefore the decision of what score thresholds to implement at the merchant site should be derived as a component of the merchant s cost structure. The selection of a score threshold is not a component of product risk or market segment rather it is a component of the merchant s costs such as cost of goods sold cost for intervention etc.

In selecting these thresholds the resulting performance of the system is measured with a number of metrics. The metrics used to evaluate the performance of each fraud policy include the following 

The transaction detection rate TDR represents the number of correctly identified fraudulent orders expressed as a percentage of all actual fraudulent orders. For instance if there are 100 fraudulent orders and a policy correctly identifies 72 of them the TDR is 72 percent. The transaction false positive rate TFPR represents the number of orders incorrectly identified as fraudulent for each order correctly detected to be fraudulent by the rule or scoring model. A TFPR of 10 1 for example means that for each fraudulent order detected 10 legitimate orders are flagged as fraudulent. The dollar detection rate DDR is a percentage defined as the ratio of the value of the fraudulent orders detected in dollars to the total dollar value of the potential fraud that would have been lost without the eFalcon system in operation. For instance if a person attempts to charge 2 000 to an account over several orders and the system identifies the account as fraudulent in time to prevent 1 000 of those charges then the DDR is 50 percent. The DDR shows not merely whether a statistical model and fraud policies catches fraud but how fast.

What follows are some examples and formula for determining an appropriate score threshold for a merchant to intervene on an Internet order.

Table 9 is used to determine how to select the appropriate score thresholds for a merchant given these table values.

Using the merchant s product net margin the merchant can calculate an estimate of the score threshold where the break even exists for automatic declines. Once break even is calculated then the merchant can determine an appropriate level of fraud prevention intervention and potential loss of sales.

When calculating the threshold the merchant must consider the artificial ceiling created by the association charge back monitoring percentages. These are best dealt with on a merchant by merchant basis. It is however important to note that the score threshold a merchant selects using their internal costing information may have to be lowered to keep them in compliance with association rules and regulations.

The calculations displayed first are designed to determine the automatic decline threshold. Using a score threshold of 790 in the table above yields the following calculations 

The 75 is saved because by declining the fraudulent order the merchant saved the 75 it would have lost when the consumer did not pay for the order.

Conclusion The break even score threshold for a merchant with a net margin of 25 is approximately 790.

Conclusion The break even score threshold for a merchant with a net margin of 14.25 is approximately 600.

Conclusion The break even score threshold for a merchant with a net margin of 6.6 is approximately 410.

More generally then given a merchant s net margin the desired TFPR that should be selected is easily determined Desired 1 net margin net margin.

In order to simply the net margin calculation Table 10 contains the TFPR and the net margin equivalent NME .

Given the desired TFPR the merchant then selects the score provided by the scoring system which has this desired TFPR value. This selected score is then set as the cutoff score.

Once the pure score determination is made the merchant may then evaluate the desirability and need to interdict the transactions beyond the binary Yes or No decision. The following three tables outline three different levels of interdiction for five different categories of merchants. Table 11 is for the decline score where the order is completely declined. Table 12 is for obtaining additional information such as by the display of a browser page to request additional information or by routing the customer to a voice over IP connection for further assistance from the merchant s customer service fraud prevention representatives. Table 13 is when the merchant s interdiction costs are low enough and potential profit are sufficient to warrant out sorting the order to a manual review queue.

Effective correctly integrated fraud detection policies are important to a successful Internet fraud prevention program. The scoring calculations performed by the scoring system rely on historical transaction data to achieve optimum performance. If limited data is available fraud policies can boost the accuracy of a merchant s fraud risk assessment. To obtain improved accuracy it is desirable for the merchant to evaluate the fraud policies that are expressed by the rules and ensure integration of these policies into the merchant s order system.

After creating rules encapsulating the merchant s policies via the PMW the merchant should continuously monitored the fraud detection performance of those policies. The merchant can then adjust them to increase fraud detection reduce redundancy or reduce the volume of outsorted orders to be evaluated by the merchant s fraud analysts via the OMW or otherwise. More specifically the merchant should measure and evaluate the performance of the merchant s fraud policies on a weekly basis and realign the priorities in the queue of all outsorted orders so that they are evaluated as quickly as possible beginning with those having the highest fraud risk scores.

Unfortunately when effective rules are poorly integrated into the merchant s system the result can be reduced operational inefficiency and increased fraud losses. Effective integration of eFalcon fraud policies is based on 

After the merchant measure the performance of an fraud policy or rule the merchant compares it to the scoring system scores to determine the proper integration point and prioritize outsorted orders generated by the merchant s fraud policies against those generated by the scoring system .

For example if a rule has a TFPR of 20 1 and a 5 DDR on the surface it appears the rule is highly successful. The next step however is critical to the integration. If the merchant discover that all or a substantial portion of the fraud cases detected by the rule are in high scoring bands the rule is not supplementing the scoring system it is duplicating it. This results in an increased volume of ineffective cases on the rules false positives and excessive outsorted orders and operational inefficiency.

If on the other hand the fraud cases identified by the rule are not scored highly by the scoring system the rule is supplemental. The key is to evaluate the scoring system scores on the rule identified orders in addition to the evaluating pure rule performance. This additional analysis results in integrated supplemental rules instead of volume increasing duplicate rules. For example assume the sample 20 1 and 5 rule described above identifies fraudulent orders of which the scoring system identifies 50 percent in the 900 score band and 30 percent in the 800 to 900 score band. The rule would be best used if at all to identify fraud cases for those orders scoring below the band. If however only 10 percent of the cases are identified by the scoring system in the 900 score band and 5 percent in the 800 to 900 score band the rule would be best used to identify fraud for those orders scoring above 800 since the scoring system is not readily identifying such orders as fraudulent.

Table 14 presents the integration issues. This place the priority of the example rule below the 900 queue priority and above the 800 to 899 queue priority.

The basic premise is to ensure that rules are not duplicative of what the scoring system is already identifying as fraudulent transactions. When rules are not duplicative it indicates how to prioritize them as outsorted orders. Once the relative position of the rule identified orders is determined the merchant must continually monitor the rule s performance.

The above analysis should be repeated at regular intervals to ensure optimal rule and score integration. If the rule s effectiveness begins to deteriorate the merchant should drop the ranking of the rule to a lower priority or remove it until it can be adjusted to increase its performance.

In one system configuration when the rule engine determines that an order should be outsorted the rule engine sends scores and order data to the OMW . The information appears in various OMW windows where it is available for review by customer service representatives.

The OMW displays order customer and merchant information. Having detailed order information helps representatives determine which orders are likely to be fraudulent. OMW users can view a variety of data such as customer name and address and details about order items. Users can also see any previous activity on the order and enter comments.

After reviewing the data the representative can determine whether the order is fraudulent and decide to hold accept or reject the order. The OMW also allows the merchant to specify the reason for the decision such as non sufficient funds NSF or an anonymous email address.

If a representative wants to accept an order immediately without reviewing the data for example if the order is placed by a known good customer an Accept Order option processes the order with no further action required.

In addition to review functions the OMW enables supervisors or other authorized personnel to create queues add new users to the OMW and perform other administrative tasks.

Queues are tools that group orders according to like characteristics for example orders over 2 000 and direct those orders to specific representatives for review. The OWM gives authorized users the ability to define and create queues according to user specified criteria. This queue definition feature gives the merchant the ability to control and direct workflow.

Through the use of queues administrators select the type of orders that go to each representative making the most efficient use of available resources. If no queues are specifically defined default queues determine the sequence in which orders are presented. Once a queue is defined it may be assigned to one multiple or all representatives.

Access to the OMW is controlled by user logon IDs and optionally by user passwords. Each user is linked with a group. The group determines which OMW orders are available to that user. Typically administrators have access to all OMW options but the options available to representatives are restricted. If a user does not have access to an option it does not appear on that user s menu list.

User IDs and passwords if used regulate access to the OMW. The OMW options that a user can use depend on the group access level assigned to the user s ID. There are four groups for the OMW.

Group Level 1 Review orders update customer data assign an order status accept orders select a queue search for customers and orders reply to letters change user s own password and use the tools options.

Group Level 2 Review orders update customer data assign an order status accept orders select a queue search for customers and orders. Maintain user information add and delete OMW users change user passwords define queues and assign queues to users view queue statistics reply to letters and use the tools options.

Security Group Maintain user information add and delete OMW users change user password maintain window display lists and use the tools options.

Customer service representatives who are users of the OMW follow certain procedures when reviewing orders and taking action based on the information. The procedures include the following 

When the rule engine analyzes order data if the activity meets predefined criteria as defined by its rule bases the rule engine routes the order to the OMW . Orders go into queues set up by a supervisor or other authorized user. The queues then present the orders to representatives for review.

The user can select certain orders to view and display windows that contain customer and merchant data email address contact name phone number and so on and detailed order information. The user may also enter comments about the status of the order conversations with the customer or the like. A letter log window displays a history of any letters sent or received pertaining to order. Chargeback and retrieval information is also available to the user along with any negative file related data.

The user can also send email to the customer since the email address is included in the order information a fax or a printed letter. These communications may be drafted from scratch or may be based on templated form letters.

After reviewing the information the user can assign an order status to the order to indicate the results of his investigation and record actions taken or recommended. The user may also accept the order with an Accept Order function. The user may also place negative information about the customer in one or more of the negative files. An order actions window allows users to view a history of activity on the order and to update the information pertaining to the customer or order at any time. The user may also search for customers or orders based on any indexed order field.

If the user has access to multiple queues then any of these queues can be selected for processing. As queues are processed by the user or others the user may request to rebuild the queue to see only orders not yet handled.

The OMW provides data sorting and filtering tools that the user can use in a variety of ways. These include ascending and descending sorts on any field name available for display. Filters can likewise be set on any field to further limit the data displayed in a user s queue. Multi field sorts and fields may also be defined using complex mathematical or Boolean operations. All field types can be evaluated with the pre defined comparisons greater than less than or less than or equal to 

More specifically after the user reviews the order information and make a decision the user can select actions and assign a status to an order. illustrates an Order Status window use to assign or change a status and to record information about the order. The Order Status window allows the merchant to record the results of its investigation specify the type of risk encountered and indicate actions requested or taken. Each site determines its own risk categories and actions. The merchant can also use the Order Status window to add information to negative files or to forward the order to another representative. In this window the user can select a status to apply to the order classify the type of risk add comments and check off which actions have been taken. The statuses available include 

Add to Negative File Add the customer s name or other information to the negative file list. When selected a window appears that allows the user to record the types of negative information discovered. The user may include a reason the negative information is being added along with an expiration date after which the customer s data is removed from the negative file.

Forward Put this order in another user s queue. The order does not return to the original representative. 

Hold Shipment Do not send the shipment until the date specified. A calender is provided to select the date. The held order is removed from its current queues. When the date is reached the order reappears in the working queues for handling.

A Queue Editor gives authorized users the tools to create customized work queues. Queues may be defined to group orders by score order status or a variety of other options. For example a queue called High Dollar Amount may collect orders with totals that exceed 500.00. Then as the rule engine and OMW analyze order data all orders that meet the requirement go to that queue.

Created Area The person who created the queue the date the queue was created the last person who modified the queue and the date the queue was last modified.

Delete Delete the selected queue. A queue can only be deleted if no representatives are assigned to the queue.

Criteria and Order By Fields Criteria allows selection of fields for the queue definition. Order By allows sorting orders within a queue by specific field values.

Insert Inserts the statement into the Current Queue Definition area. This button is active only when there are entries in the queue component fields.

Delete Delete the highlighted statement in the Current Queue Definition field. This button is active only when the statement is highlighted. Deletes only the highlighted text.

Edit Edit the statement in the Current Queue Definition area. This button is active only when a statement is highlighted.

Replace Replace the current queue definition with the definition in the component fields. This button is active only after selection of the Edit button.

Move Up When there are multiple statements in the Current Queue definition area move the highlighted statement up one line. This button is active only when a statement is highlighted.

Move Down When there are multiple statements in the Current Queue definition area move the highlighted statement down one line. This button is active only when a statement is highlighted.

Show SQL Show the Structured Query Language SQL statements used by the OMW to select orders for the queue. illustrates an example SQL statement.

An order must meet the conditions of the queue definition to be added to a queue. Queues are defined with logical statements having the basic format 

Field Name This list box contains customer and order data fields to use in a queue definition. Each field name has a prefix which is set off from the field by a period. The prefix represents the name of the table that stores the field in the database. For example the field CUS.BILLCOUNTRY is the customer s city as it appears in the billing address and it is stored in a Customer Data Table. illustrates an example of this list box for selecting a field.

Operator The operator is the mathematical operation the OMW uses to compare the field values of an order. The operators are 

Constant The constant is an alphabetic or numeric value. Unlike the other queue components the constant value is specified directly in the field for example a specific zip code or currency amount. The field name determines whether the constant field accepts alphabetic characters numeric characters or both.

Connector The optional connector links statements to form compound statements. The connectors are AND NOT AND NOT OR and OR NOT.

In this definition the field name is ORDMASTER.TOTAL total amount of the order the operator is greater than and the constant is 500 five hundred dollars . In this example the queue will contain only orders with totals over 500.00.

The Connector field link multiple queue statements together. For examplee a queue called High Scoring New Orders may have the queue definition

In this definition an order must meet both criteria the order must have a status of 0 a new order and receive a score greater than 900. For compound statements the position of statements in the definition determines the priority. In other words the OMW acts on the first statement in the definition then the second statement and so on.

After building a queue definition the Queue Editor checked the definition to be sure that it is formatted correctly and that the fields in the definition exist in the database. After the Queue Editor checks the definition it displays a message that indicates whether the queue definition is valid and Whether any orders meet the queue definition.

A user may create a new queue from scratch or if there is an existing one that closely matches the queue the user wants to create the user can copy the existing queue and make changes. The user may can also change and delete queues.

The user may use an Order By option to sort orders within a queue. When the Queue Editor window first appears the OMW defaults to Criteria mode for the current queue definition. In this mode the user defines the queue parameters as discussed above. When the mode is switched to Order By as illustrated in the Editor displays the fields used to prioritize orders within the queue. The Field Name displays the sort fields and the operator allows sorting orders in either ascending ASC or descending DESC succession. In this example the orders will be presented by oldest order first since the Field Name ORDMASTER.ORDERDT for order date is selected along with the operator DESC for descending. If the user does not select a sequence the default sequence is descending order by score.

Referring to the Assign Queues to Users window allows an authorized user to assign one or more order queues to each user. If desired the user can customize their own work flow by assigning queues that contain specific types of orders. For example one representative may be assigned to review all held orders another review all callbacks. Once the queues are assigned a representative receives orders only from those queues. The Assign Queues to Users window the queues currently assigned to a user and the queues available for assignment. The sections and buttons in the Assign Queues to Users window are 

Add Move the highlighted selection in the Available Queues list to the Assigned Queues. This button is active only when an available queue is highlighted.

Remove Move the highlighted selection in the Assigned Queues list to the Available Queues. This button is active only when an assigned queue is highlighted.

Move Up When there are multiple queues in the Assigned Queue list move the highlighted queue up one line. This button is active only when an assigned queue is highlighted.

Move Down When there are multiple queues in the Assigned Queue list move the highlighted queue down one line. This button is active only when an assigned queue is highlighted.

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. First as noted above the present invention is not limited to credit cards but may be used with debit card telephone calling cards gift certificate cards ACH transactions micropayments and the like. Second the particular division of functionality between the various system components described herein is merely exemplary and not mandatory functions performed by a single system component may instead be performed by multiple components and functions performed by multiple components may instead performed by a single component given the variety of software development environments and hardware platforms that may be used to practice the invention. Thus the particular functions of the rule engine policy management engine scoring server order management workstation and so forth may be provided in more fewer of different combinations of modules. Further the system may be implemented via a combination of hardware and software as described or entirely in hardware elements. Also the statistical model may be implemented in a variety of modes including a neural network a multivariate regression model or any other model that classifies inputs based on statistical analysis of historical exemplars. The particular capitalization or naming of the modules protocols features attributes data structures or any other aspect is not mandatory or significant and the mechanisms that implement the invention or its features may have different names or formats likewise the details of the specific data structures messages and APIs may be changed without departing from the features and operations of the invention. Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

