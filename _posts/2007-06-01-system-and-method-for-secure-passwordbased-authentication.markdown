---

title: System and method for secure password-based authentication
abstract: Various embodiments of a system and method for secure password-based authentication are described. The system and method for secure password-based authentication may include an authentication component configured to request and receive authentication from an authenticating system according to a secure password-based authentication protocol. The authentication component may be configured to participate in an attack-resistant password-based authentication protocol such that an attacker who has compromised the authorizing system and/or a communication channel between the authentication component and the authenticating system may not determine a user's password and/or impersonate the user. In one embodiment, the authentication component may be configured to provide its attack-resistant password-based authentication functionality to an application (e.g., through a stand-alone application, plugin, or application extension). For instance, the authentication component may enable a web browser to participate in the attack-resistant password-based authentication protocol in order to access an online bank account from a web server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689003&OS=08689003&RS=08689003
owner: Adobe Systems Incorporated
number: 08689003
owner_city: San Jose
owner_country: US
publication_date: 20070601
---
The present invention is directed to computer systems. More particularly it is directed to authentication within computing environments.

Password based authentication protocols are among the most prevalent authentication protocols in use today. Typically password based authentication includes the use of a username that identifies a user and a password that verifies the user s identity. Many applications in use today utilize password based authentication including online accounts such as online bank accounts online credit card accounts and various online consumer accounts. For instance before accessing an online bank account through the Internet a user may be required to provide the bank website with a username and password in order to verify the user s identity. If the user provides the correct username and password combination they may be given access to the online bank account in order to view account statements transfer funds to other bank accounts and other activities usually reserved for authorized individuals.

Since username and password combinations typically protect valuable items such as access to bank or credit accounts they have become frequent targets for social engineering attacks. One such attack is commonly referred to as phishing. Phishing is performed by phishers who attempt to fraudulently acquire sensitive information about a user including but not limited to username and password combinations credit card numbers addresses names personal identification numbers PINs and other information that may be used to defraud an individual. One common form of phishing is implemented through electronic mail messages emails that appear to be sent from a credible source. In many cases a fraudulent email informs a user of an artificial circumstance that requires the user to provide sensitive information such as a username and password. For example some emails sent by phishers may indicate that a user s online account has recently undergone upgrades and that the user must provide their username and password to regain access to the account. Such emails may include a hyperlink to a fraudulent webpage that appears to be a legitimate login page of an online account. If an unsuspecting user provides their username and password to the fraudulent webpage the username and password may be compromised and the phisher may use the username and password to impersonate the user.

Various techniques have been utilized to prevent damage from phishing and other social engineering attacks. One such method includes requiring the user to carry a token. A token is typically something that the user has that verifies the user s identity. In other words the user may verify his identity by proving he has possession of the token. The token may indicate a security code such as through an electronic display. In many cases the security code is time dependent e.g. the security code may change every minute . In most cases the security code changes based on a time dependent algorithm which is also known to the verifying entity e.g. a bank and thus the verifying entity may use the algorithm to determine if a given security code is legitimate. Authentication protocols including tokens may require the user to provide a username a password and the security code of the token. Accordingly if a phisher obtains the username and password of a user the phisher may not easily impersonate the user since the security code is also needed to gain access to the user s account. In spite of the use of a token there are some circumstances when a phisher may access the user s account. For example if a phisher obtains a username password and token security code the phisher may impersonate the user at any time before the token security code expires. Additionally the use of a token does not alone prevent man in the middle attacks such as situations where an attacker has complete or nearly complete access to the communication channel between a user and a verifier e.g. an online bank .

Other techniques include requiring the user to make a security decision such as verifying that a picture previously uploaded by the user is visible on a website to which the user seeks access. In other cases web browsers and other applications may include security indicators such as security icons e.g. a lock icon or other indicators e.g. the display of https instead of http in the web address field that indicate the presence of a secure connection. Typically when displaying an illegitimate webpage web browsers do not display such indicators and thus the user by checking for such indicators may determine whether a webpage is legitimate or illegitimate. In many cases security techniques that require the user to make a security decision are unsuccessful due to human error. For example the user may forget or may not be trained to check for previously uploaded pictures or security indicators.

Some password based authentication protocols are also susceptible to brute force attacks. Brute force attacks include exhaustively checking possible passwords for a given username. For example if an attacker knows the parameters of a given password such as password length and possible characters the attacker may exhaustively check all possible passwords for the given username. Even with modern computing power some brute force attacks e.g. for particularly long or well structured passwords may be computationally infeasible. To reduce computational cost an attacker may implement a similar attack known as a dictionary attack. Instead of exhaustively checking all possible passwords a dictionary attack may include checking passwords from a list such as a list of words from a dictionary as well as variations of such words. In some cases dictionary attacks may be successful due to many users tendency to choose passwords that are easy to remember such as words of their native language.

Various embodiments of a system and method for secure password based authentication are described. The system and method for secure password based authentication may include an authentication component configured to request and receive authentication from an authenticating system according to a secure password based authentication protocol. The authentication component may be configured to participate in an attack resistant password based authentication protocol such that an attacker who has compromised the authorizing system and or a communication channel between the authentication component and the authenticating system may not determine a user s password and or impersonate the user.

In various embodiments the authentication component may prompt a user for a master password. For example upon first use of the authentication component by a particular user the authentication component may request a master password from the user. In many cases it may only be necessary for the user to provide the master password once for a particular computer system. In various embodiments configuring an authentication component residing on another computer system for a particular user may include providing the authentication component with the particular user s master password.

In various embodiments the authentication component may utilize generated passwords that mask user passwords. For example during authentication registration e.g. the initial selection of a username and password the authentication component may receive a password from the user generate a new password based on the user s password e.g. by combining the user password with the master password and or utilizing a hash function and use the generated password for authentication instead of the user s password. In subsequent authentication requests e.g. using the username and password to gain access to an account or other item the authentication component may receive the password from the user replace the password by generating a new password as described above and proceed with authentication. In other words the password that is utilized for authentication is different than the password provided by the user. In this manner the authentication component may prevent or reduce social engineering attacks such as phishing attacks. For example if a user reveals their password to a phisher an account or other item protected by the password may not be at risk since the phisher may not determine the associated generated password.

In various embodiments the authentication component may generate one or more generated passwords based on a constrained hash function. In other words the hash function may be limited to results that adhere to a particular constraint. Enforcing constraints on hash function may increase the amount of computation and or time necessary to create a generated password. Accordingly the authentication component may utilize constraints to prevent and or reduce dictionary attacks.

In various embodiments the authentication component may utilize generated passwords within a zero knowledge proof protocol for authentication such that social engineering attacks authenticating system attacks e.g. server side attacks and attacks on the communication channel between the authentication component and an authentication system are rendered ineffective and or computationally infeasible.

In various embodiments the authentication component may be configured to interact with an application such as a web browser configured to access content or data e.g. an online account files or other item from the authenticating system. In one embodiment the authentication component may be configured to provide its attack resistant password based authentication functionality to the application e.g. through a stand alone application plugin or application extension . For instance the authentication component may enable a web browser to participate in the attack resistant password based authentication protocol in order to access an online bank account from a web server.

While the system and method for secure password based authentication is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the system and method for secure password based authentication is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the system and method for secure password based authentication as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of a system and method for secure password based authentication are described. The system and method for secure password based authentication may include an authentication component configured to request and receive authentication from an authenticating system according to a secure password based authentication protocol. The authentication component may be configured to participate in an attack resistant password based authentication protocol such that an attacker who has compromised the authenticating system and or a communication channel between the authentication component and the authenticating system may not determine a user s password and or impersonate the user. In various embodiments the authentication component may be configured to interact with an application such as a web browser configured to access content or data e.g. an online account files or other item from the authenticating system. In one embodiment the authentication component may be configured to provide its attack resistant password based authentication functionality to the application e.g. through a stand alone application plugin or application extension . For instance the authentication component may enable a web browser to participate in the attack resistant password based authentication protocol in order to access an online bank account from a web server.

An exemplary system in which an authentication component may be implemented is illustrated by the block diagram of . In various embodiments a system requesting authentication such as client may request authentication from an authentication provider such as server . As used herein the terms client and server pertain to the authentication relationship between client and server no other relationship is necessarily implied by the terms client and server. For example in various embodiments client and server may be computer systems other than systems adhering to a traditional client server relationship. In one embodiment client and server may be peer nodes in a peer to peer networking environment. In other embodiments client may be a computer system configured to enable a user to browse the World Wide Web and server may be a web server. Additionally client and server may communicate over a network such as network . In various embodiments network may be a Local Area Network LAN Wide Area Network WAN e.g. the Internet or a combination thereof.

Authentication component may be configured to provide client with secure password based authentication without the need for the user to provide security tokens or other items other than a username and password. Authentication component may utilize various techniques including but not limited to password modification hash constraints and zero knowledge proof protocols as describe below in regard to . In some embodiments authentication component may be configured to prevent a security attack from an attacker even if the attacker has compromised server and or the communication channel between client and server . In many embodiments passwords provided by a user to the authentication component and or plain text equivalents of passwords are not transmitted to server nor stored within server .

In various embodiments authentication component may be configured to receive a master password referred to herein as MasterPWD . For example the authentication component may receive a password chosen by a user such as the maiden name of the user s mother the name of the user s elementary school or any other password specified by the user. The use of a MasterPWD may provide portability to authentication component . In other words if the user travels to another client equipped with authentication component the user may provide the same MasterPWD in order to configure the device for authentication. In many cases authentication component may only need to receive the MasterPWD once for the particular system e.g. client .

In many cases to utilize a password based authentication protocol it may be necessary to provide a username and associated password as part of the registration process. The data flow diagram of illustrates an exemplary registration process implemented by authentication component . Authentication component may be configured to receive a username and password referred to herein as PWD from a user and register the username and an associated verifier with an authenticating system such as server . In many cases the username and PWD may be associated with a particular account e.g. online bank account email account and other accounts requiring authentication . Accordingly username and verifier registration may occur for multiple accounts each having different username and password combinations. The authenticating system such as server may be configured to authenticate client and or user in response to receiving the appropriate items e.g. username and verifier as described below. For instance by authenticating client server may enable client and or user to access one or more items such as accounts web pages web resources files computer systems and other items.

In various embodiments authentication component may receive a desired username and PWD from user such as username and PWD A. As part of the registration process authentication component may provide server with the desired username such as username . Additionally server may respond to the username registration by providing the authentication component with a salt such as salt . Salt may be a random string number or combination thereof. In other embodiments the transfer of the salt may occur before the transfer of the username to server . For example authentication component may request and or receive salt from server and subsequently provide username to server . The salt may be used for computations of the authentication component as described in more detail below.

Authentication component may create a generated password from MasterPWD and PWD such as PWD. In various embodiments PWDmay be generated as follows PWD HASH MasterPWD PWD 

In other words PWDmay be the result of a hash function performed on the MasterPWD and the PWD. In one embodiment the MasterPWD and the PWD may be combined before hashing. For instance a summation e.g. MasterPWD PWD or other arithmetic operation may be performed on the MasterPWD and PWD and the result of the operation may be hashed to create PWD. For example in one embodiment PWDmay be generated according to the following equation. PWD HASH MasterPWD PWD 

The hash functions described herein may be any of various hash functions including but not limited to the Secure Hash Algorithm SHA e.g. SHA 1 SHA 0 SHA 224 SHA 256 SHA 384 SHA 512 and other SHA variations the RACE Integrity Primitives Evaluation Message Digest RIPEMD e.g. RIPEMD 128 RIPMED 160 RIPEMD 256 RIPEMD 320 and other RIPEMD variations the Message Digest algorithm MD e.g. MD 3 MD 4 MD 5 and other MD variations the Tiger and Tiger2 hash functions e.g. Tiger 128 Tiger 160 Tiger 192 Tiger2 128 Tiger2 160 Tiger2 192 and other Tiger variations the Very Efficient Substitution Transposition VEST e.g. VEST 4 VEST 8 VEST 16 VEST 32 and other VEST variations and or the WHIRLPOOL hash function.

In various embodiments authentication component may adhere to one or more constraints when computing PWD. In some cases authentication component may adhere to one or more hash constraints which require that a particular pattern such as a particular bit pattern must be present within PWD. The constraints that authentication component may use to calculate hash results and thus PWD may be specified by authentication component user or server . In one embodiment a constraint may require that a specific number of leading bits of the hash result i.e. PWD be zeros. For instance an exemplary constraint may indicate that the first 16 high order bits of the resultant hash must be zero. If authentication component determines that a hash result does not adhere to a particular constraint the authentication component may modify e.g. increment and or decrement by 1 or more one or more inputs e.g. MasterPWD PWD and or a combination thereof of the hash function re compute the hash result and determine whether the new hash result meets the particular constraint. The authentication component may repeat this process until a hash result that meets the particular constraint is computed. In other words the authentication component may regenerate the hash result until the hash or a portion of the hash matches the constraint e.g. a bit pattern . The authentication component adhering to one or more constraints when calculating the hash result i.e. PWD may prevent and or reduce the effectiveness of dictionary attacks on PWDby increasing the computational requirements and or time required to complete an attack. For instance consider the following exemplary hash resultants against the exemplary constraint described above e.g. 16 high order bits must be equal to zero . Hash 4ad5bca68ea8ca15e8860c30e024f4f2e51dbe1f Hash 0000b505b4b87cb4584535ed7c0b16a2bb2634f3 In this example Hashand Hashare exemplary hexadecimal representations of SHA 1 results. Hashdoes not meet the exemplary constraint one or more of the first 16 high order bits of Hashare not equal to zero. By contrast Hashdoes meet the exemplary constraint the first 16 high order bits of Hashare equal to zero. Since generating a hash result that meets a particular constraint may require multiple iterations of the hash function the computation requirements and or time to create such a hash result may be larger than the computation requirements and or time necessary to create an unconstrained hash result.

Moreover one skilled in the art will recognize that hash functions such as the hash functions described herein typically exhibit trapdoor properties. In other words it may not be possible to easily determine the input of the hash function given a particular output. In many embodiments the hash functions used to generate the various passwords and verifiers described herein may be cryptographically strong. In other words breaking e.g. a brute force attack a cryptographically strong hash function may be computationally infeasible. For instance in some cases to determine the input of a hash function the attacker must use a brute force attack to try all possible inputs of the hash function and record the corresponding outputs or hashes for the hash function. However for cryptographically strong hash functions e.g. SHA 1 the number of possible inputs may be so large that a brute force attack may not be computationally feasible e.g. the max input size for SHA 1 is approximately 2bits .

Accordingly in many cases an attacker may alternatively choose to utilize a more computationally feasible attack such as a dictionary attack in order to determine the input of a particular hash function. However authentication component may employ a variety of techniques to prevent such an attack. As described above when calculating PWD authentication component may use a combination of MasterPWD and PWD as the input to the hash function. In many cases the result of such a combination e.g. a bitwise addition of MasterPWD and PWD would be less susceptible to a dictionary attack since dictionary attacks typically target inputs that are elements of a user s native language or slight variations thereof . Additionally constraints such as enforcing particular patterns within hash results increase hash computation time. By using constraints to increase computation time for hash resultant generation authentication component may render dictionary attacks computationally infeasible.

After calculating PWD authentication component may generate a verifier V such as verifier according to a zero knowledge proof protocol. One example of a zero knowledge proof protocol includes the Secure Remote Password SRP protocol. In various embodiments the verifier may be created from PWDand a salt such as salt described above. Additionally in most cases determining the password used to create a verifier e.g. PWD may be computationally infeasible given the verifier alone. This property may be achieved by utilizing a hash function or other function exhibiting trap door properties to create the verifier. For instance in one embodiment the verifier may be generated according to the following equations. HASH salt PWD V g x In the above example g may be a primitive root modulo n where n is a large prime number. After generating verifier according to a zero knowledge proof protocol authentication component may provide and or register the verifier with server . Server may store the verifier in a database or other storage mechanism such as authentication database . In various embodiments server may create and or maintain authentication records within authentication database that include the username associated with a user the salt associated with the username as well as the associated verifier provided by client .

In various embodiments client may not transmit PWD and or a plain text equivalent of the password to server . Accordingly server may not store PWD and or a plain text equivalent of PWD . For subsequent authentications of client server may utilize verifier to determine that the user knows the correct password e.g. the correct PWD used to create the correct PWD as described in more detail below. In other words client and or user may prove that it has knowledge of the correct PWD without actually transferring the PWD to the server. In various embodiments this may prevent an attacker from gaining knowledge of the correct PWD as well as the MasterPWD and or PWD . More specifically since the correct PWD as well as the MasterPWD and or PWD may not be transferred to the server an attacker who has comprised the server and or the communication channel between the server in the client may not be able to determine the correct PWD as well as the MasterPWD and or PWD .

After a username and verifier have been registered with the server such as described above in regard to the client and or user may be authenticated during subsequent accesses to server . includes a data flow diagram illustrating an example of the operation of authentication component during post registration accesses of server according to one embodiment. To begin authentication user may provide username and PWD B to authentication component in order to access server . For example server may be a web server and the user may be attempting to view a secured webpage with client . After receiving PWD B from the user authentication component may generate a combined password which may be referred to herein as PWD. PWDmay be generated in the same manner that PWDis generated during registration. Accordingly if the PWD provided by the user during registration such as PWD A is the same as the PWD used during subsequent accesses of server such as PWD B then PWDmay be the same as PWD. If PWD B is not the same as PWD A then PWDmay not be the same as PWDand authentication may fail. Once authentication component has determined PWD the authentication component may use PWDto request authentication from server . As illustrated the authentication protocol used to authenticate client and or user may include a zero knowledge proof protocol.

An exemplary method for registering a username and verifier with an authenticating system e.g. server is illustrated in . In various embodiments the method described herein may be implemented by authentication component . The method may begin by receiving a username from a user as illustrated by block . In general the username may be any username specified by the user that adheres to the username requirements of the server. For example while the user may choose a particular username in some cases the server may require that the username be no longer than a certain number of characters. In addition to a username the method may include receiving a PWD from the user and accessing a MasterPWD e.g. the MasterPWD stored by authentication component as illustrated by block . In many cases the PWD may be specific to a particular server or to a particular account e.g. a bank account email account or password protected account provided by a server.

As illustrated by block the method may further include generating a password such as PWD from the PWD provided by the user and a MasterPWD specified by the user such as the MasterPWD described above. In various embodiments PWDmay be generated as follows PWD HASH MasterPWD PWD In other words PWDmay be the result of a hash function performed on the MasterPWD and the PWD. In one embodiment the MasterPWD and the PWD may be combined before hashing. For instance a summation e.g. MasterPWD PWD or other arithmetic operation may be performed on the MasterPWD and PWD and the result of the operation may be hashed to create PWD such as PWD HASH MasterPWD PWD 

Additionally generating PWDmay include generating PWDaccording to one or more hash constraints. In some cases the hash constraints may require a particular pattern be present within PWD. For example in one embodiment a constraint may require that a specific number of leading bits of the hash result i.e. PWD be zeros. For instance an exemplary constraint may indicate that the first 16 high order bits of the resultant hash must be zero. The method may include utilizing other constraints such as the constraints described above in regard to .

The method may further include generating a verifier V from PWDand a salt as illustrated by block . Accordingly the method may also include receiving the salt from the authenticating server. The salt may be a random string number or combination thereof. In various embodiments generating the verifier may include generating a verifier according to a zero knowledge proof protocol such as SRP. In one embodiment the verifier may be generated as follows HASH salt PWD V g x In the above equation for the verifier g may be a primitive root modulo n where n is a large prime number. Additionally the method may include transmitting the username to the server as illustrated by block and transmitting the verifier to the server as illustrated by block . In various embodiments transmitting the username and or the verifier may include transmitting the username and or verifier over a LAN WAN or combination thereof e.g. network .

An exemplary method for authenticating a client and or user is illustrated by the flowchart of . In various embodiments the method described may be implemented by authentication component . As illustrated by block the method may include receiving a username from a user. For example if the user is attempting to access an online bank account the username may be the username that was creating during registration of the online bank account. In addition to the username the method may include receiving a PWD e.g. PWD B described above from the user as illustrated by block . As illustrated by block the method may include receiving the salt from the server. In various embodiments the salt may uniquely identify the particular server and or account protected by authentication. For example when engaging in authentication with an online bank account the method may include receiving a salt that uniquely identifies the online bank account. As illustrated by block the method may further include generating PWDand a verifier. In general the method may include the techniques for generating PWDand the verifier as described above in regard to . For example in one embodiment PWDmay be generated using a combination of the PWD received from the user as well as a MasterPWD.

After generating the PWDand the verifier authentication may be requested from a server by using the PWDgen with a zero knowledge proof protocol as illustrated by block . While the method may include implementing any of various zero knowledge proof protocols the description below pertains to one example of implementing authentication with PWDand the SRP zero knowledge proof protocol. Requesting authentication using PWDand a zero knowledge proof protocol may include transmitting the user s username to the server e.g. server . The server may lookup the username within a database e.g. authentication database and determine the verifier and salt associated with the username. In most cases the verifier and salt may have been provided during the registration process. Accordingly the method may include receiving the salt from the server. In many cases a salt may be unique to a particular server or account . For example the salt may be associated with a particular webpage or online bank account.

After receiving a salt from the server the method may further include calculating a long term private key for use during authentication. In one embodiment the long term private key Kmay be generated according to the following equation HASH salt PWD The argument PWDmay be determined as described above. For example PWDmay be a combination of a user s PWD and a MasterPWD. Additionally the hash function used to determine the long term private key may be SHA 1 or any other hash function described above.

The method may further include generating a random number a which is greater than 1 and less than n where n is a large prime number. The method may further include generating an ephemeral e.g. short term public key Kfrom g which is a primitive root modulo n. In one embodiment the ephemeral public key may be generated according to the following equation K g a

After generating the ephemeral public key the method may include transferring the ephemeral public key to the server. The method may also include receiving an ephemeral key Kfrom the server which is different than the ephemeral key provided to the server and generating a random number b greater than 1 and less than n. In one embodiment the server may generate the ephemeral key Kaccording to the following equation In the above equation for the server s ephemeral key V represents the verifier created during registration as described above. The method may further include receiving the ephemeral public key Kgenerated by the server and receiving a randomly generated parameter u from the server.

After each ephemeral public key has been generated the method may include generating a common exponential value S. In one embodiment the common exponential value S may be generated according to the following equation Additionally the server may generate a common exponential value S. In one embodiment the server may generate the common exponential value Saccording to the following equation b

In various embodiments if the PWDused to create S is the same as the PWDused to create the verifier V then the common exponential value S will be equivalent to the common exponential value Screated by the server. Moreover the method may further include generating a cryptographically strong session key K. In various embodiments the cryptographically strong session key may be generated according to the following equation HASH The hash function used to create the cryptographically strong session key may be any of the various hash functions described above. Similarly the server may generate a cryptographically strong session key Kaccording to the following equation HASH In many embodiments the particular hash functions used to create K and Kmay be the same. Additionally if the common exponential values S and Sare equivalent the resulting cryptographically strong session keys K and Kmay be equivalent.

The method may further include utilizing messages to determine if the cryptographically strong session keys are equivalent. In one embodiment the method may include generating a message Mand transferring the message to the server as evidence of possessing the correct session key. In various embodiments the message Mmay be generated according to the following equation HASH In various embodiments the server may verify the message Mafter receipt. To verify M the server may generate a copy of Maccording to the equation above and check to see if its copy matches the received M. Additionally the server may generate a message M. In various embodiments the server s message Mmay be generate according to the following equation HASH The method may further include receiving the server s message Mfrom the server. The method may also include generating a copy of Maccording to the equation above and determining if the copy of Mmatches the copy received from the server. If both Mand Mare verified to be correct authentication may be complete. If either message is determined to be incorrect authentication may fail and communications with the server may cease.

In various embodiments authentication component may be configured to interact with various applications. The block diagram of illustrates an exemplary implementation of authentication component . In various embodiments authentication component may provide its authentication functionality to one or more applications such as application . In one embodiment authentication component may be a stand alone application configured to communicate with application through one or more interfaces such as an application programming interface API . In other cases authentication component may be an embedded feature of application . In some cases authentication component may be a plug in or application extension configured to provide functionality to application . In general authentication component may be implemented in any manner that enables application to utilize its authentication functionality.

Application may be any application configured to access data or content from another computer system such as content . In one embodiment application may represent any of various web browsing applications such as Microsoft Internet Explorer Netscape Navigator Mozilla Firefox or any application that is capable of accessing and displaying documents or web pages such as according to the Hypertext Transport Protocol HTTP . For example user may use application to log in to an online bank account to view a bank statement or transfer funds from one account to another. In general application may be any application that may need access to content or data requiring authentication. For example server may require that application be authenticated before accessing content . Content may be any content data and or resource that may be protected by authentication. For instance in various embodiments content may be content associated with online bank accounts online credit accounts and other financial accounts. In other embodiments content may be content associated with an email account chat account or other communication account. In some embodiments content may be content associated with consumer accounts such as accounts held with one or more merchants. While content is illustrated within server in other embodiments content may be located on another computer system or within multiple computer systems e.g. in a distributed computing environment .

User may use application to access content on another computer system such as content . For example application may be a web browser and content may be online bank account data. In this case the user may use the web browser to log on to an online bank account and access the bank account data. In various embodiments authentication component may detect when application is attempting to utilize password based authentication. For example when a user registers for an online account via the Internet a registration display may prompt the user for a desired username and password. In this case authentication component may detect the presence of such a registration display and implement the username and verifier registration technique as described above in regard to and . In other words authentication component may automatically detect a display of application that is associated with the registration of a username and password e.g. for an online account and prompt the user for a username and PWD in order to register a verifier with server such as according to the method described above in regard to . Similarly authentication component may detect subsequent password based authentication displays such as the login screen of an online bank account or email account. In response to detecting a password based authentication display authentication component may prompt the user for a username and PWD in order to request authentication from server such as according to the method described in .

Various embodiments of a system and method for secure password based authentication as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by . Computer system may be capable of implementing an authentication component such as authentication component and one or more applications such application . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In some embodiments it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing an authentication component and an application such as authentication component and application described above are shown stored within system memory as authentication component and application respectively. In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system . Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD DVD ROM coupled to computer system via I O interface . Program instructions and data stored via a computer accessible medium may be transmitted by transmission media or signals such as electrical electromagnetic or digital signals which may be conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems e.g. server or between nodes of computer system . In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

As shown in memory may include program instructions configured to implement an authorization component such as authorization component and application similar to application . In one embodiment authorization component may implement the methods described above such as the methods illustrated by . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of the present invention. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including computers network devices Internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Accordingly the present invention may be practiced with other computer system configurations.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted modified etc. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure.

Realizations in accordance with the present invention have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the exemplary configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of the invention as defined in the claims that follow.

