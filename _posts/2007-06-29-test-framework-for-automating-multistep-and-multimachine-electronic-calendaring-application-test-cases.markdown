---

title: Test framework for automating multi-step and multi-machine electronic calendaring application test cases
abstract: A test framework for automating multi-user, multi-step and/or multi-machine test cases for electronic calendaring application objects is provided. Test cases may be automated where coordination between a number of machines is required to test electronic calendaring application user scenarios. In addition, automation of multifold interaction between two electronic calendaring application users is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08196105&OS=08196105&RS=08196105
owner: Microsoft Corporation
number: 08196105
owner_city: Redmond
owner_country: US
publication_date: 20070629
---
In an electronic calendaring application two users can be configured on the same machine and under the same user login. For example user A can configure the profile of user A and user B. This enables the testing of a multi user scenario of an electronic calendaring application with the logon and logoff to different user profiles. But in some cases it is not possible to configure calendaring application profiles for multiple users in a single user login. To test the multiple user scenarios in such cases users must be configured under different machine computer logins. Both calendaring application profiles must be configured in the same machine under their respective user logins. For example if it is desired to use a profile of user A then a first login is performed as user A into the machine and a second login is performed for user B. Under this approach a logoff and login to the machine and to the calendaring application must be performed for each step of a test case which is a heavy processing and time consuming task. In addition a separate controller may be needed to control the machine logoff and logon.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention solve the above and other problems by providing automation of electronic calendaring application test cases where coordination between a number of machines is required to test user scenarios. According to one embodiment automation of multifold interaction between two electronic calendaring application users is provided.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

As briefly described above embodiments of the present invention are directed to automated testing of multiple user multiple step electronic calendaring application testing across a plurality of computing devices. The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar elements. While embodiments of the invention may be described modifications adaptations and other implementations are possible. For example substitutions additions or modifications may be made to the elements illustrated in the drawings and the methods described herein may be modified by substituting reordering or adding stages to the disclosed methods. Accordingly the following detailed description does not limit the invention but instead the proper scope of the invention is defined by the appended claims.

According to an embodiment a test framework for automating multi user multi step test cases across a plurality of machines computing devices for electronic calendaring application objects is provided. Test cases may be automated where coordination between a number of machines is required to test electronic calendaring application user scenarios. In addition automation of multifold interaction between two electronic calendaring application users is provided. As will be described below user profiles for an electronic calendaring application are configured on different machines computing devices and a generic interface is provided for transferring data status for test case steps between the different machines. Thus an interaction between two or more users in multiple test case steps is automated.

Consider the following example test case that may be processed according to an embodiment of the invention. User A and User B are employees of a given company and are working on an assigned project. User A wants to organize a meeting with User B to discuss the project. The following example calendaring steps may be performed between the two users and according to embodiments testing of the proper processing of each step may be desired.

As can be seen from the example test case illustrated above a number of test challenges are presented including the following 1 users are on different machines 2 the example test case involves multiple steps and 3 verification is needed in several steps. For example verification may be desired that the meeting request from User A is received at User B and that any time zone differences between a physical location of User A and User B are accounted for at User B s calendaring application. In addition as set out above both User A and User B may associate the meeting request to a line of business application and associated data. For example the meeting request may be automatically associated with a time production monitoring application used by the employer of Users A and B to track employee utilization in terms of productivity and time spent on different projects for one or more customers of the employer. At each of these example steps verification may be needed to determine whether the data is properly transferred between machines and that updates to the data are properly processed for the associated electronic calendaring application and for any LOB applications and associated data associated with the calendaring operation by one or more of the users.

According to an embodiment .NET Reflection from MICROSOFT CORPORATION also may be employed to enable the test framework illustrated in . According to .NET Reflection the test framework operation of the test framework is managed to include the loading of test case application modules also referred to as assemblies into an appropriate application domain and controlling memory layout of the type hierarchy defined within each assembly. Assemblies may contain application modules modules may in turn contain types and types may in turn contain members. Reflection may provide objects such as calendaring application test cases that encapsulate assemblies modules and types. Reflection may be used to dynamically create an instance of a type as described below bind the type to an existing calendaring application object or get the type from an existing object. Reflection may be used to invoke the type s methods or access its fields and properties across disparate applications and machines as illustrated in . According to one embodiment Reflection is a mechanism of discovering object class information at runtime. As should be appreciated the test framework illustrated in and described above in terms of a .NET Remoting and Reflection embodiment is for purposes of example only and may be enabled by other suitable inter process communications systems including Distributed Component Object Model DCOM based inter process communications systems and a variety of web services based inter process communications systems.

Referring still to the example test framework illustrates a sender system and two receiver systems and . As will be appreciated a single receiver system may be included or many receiver systems may be included. Each of the sender and receiver systems and include an application respectively which may comprise software applications requiring testing as described herein. For example according to one embodiment the applications may include electronic calendaring applications such as OUTLOOK from MICROSOFT CORPORATION for which multi user multi step and or multi machine testing is desired as described for the example meeting request illustration set out above. Each of the sender and receiver systems includes a computer as described below with reference to . According to embodiments each of the sender and receiver systems may operate on the same computer or each of the sender and receiver systems may operate on different computers that communicate with each other via a distributed computing network.

A remote client is illustrated in the sender system . According to an embodiment the remote client is a software module for example a component of the application operative to send a test case object to the receiver systems for processing a test case as described herein. The remote client is operative to receive test data back from the receiver systems . Referring to the receiver systems remote servers are illustrated and are software modules operative to receive and process remote test case objects sent from the sender system remote client . The remote servers are operative to act as remote clients for the respective receiver systems for sending test case data back to the remote client of the sender system . The remote objects are software modules on the remote servers operative to process test cases at the receiver systems as described below with reference to .

According to embodiments one or more assemblies software modules or data files in support of a given test case may be loaded on a remote machine . For example configuration config files are illustrated in the receiver systems respectively and may be loaded on the remote machines . According to embodiments the configuration files may include information instructive to the remote test objects received from the sender remote client as to how to process a given test case request. For example after receipt of a test case object as described below the remote test objects may parse the configuration files to determine appropriate processing methods of the receiver applications that should be called in response to the received test case objects. The configuration files may be read by the framework and appropriate methods may be called using the aforementioned .NET Reflection. In a configuration file a tester may specify a test assembly to load class to instantiate and a method to call on a machine when the Remoting Interface is being instantiated. For example one or more dynamic link libraries DLL may be specified and loaded on a remote machine for processing a given test case.

Referring still to each of the sender and receiver systems comprising the test framework communicate with each other via a common interface enabled by the framework . As described above additional sender receiver systems and associated applications and computing devices may join the test framework and communicate with each other via the interface . According to embodiments the interface comprises an application programming interface API referred to herein as a Remoting Interface in the form of object RunTest object arguments . The Remoting Interface enables a sender machine that initiates a test case by sending test case specific parameters to receiver machine s in receiver systems . The initiating sender machine of the sender system may wait for the receiver machines to execute portions of the test case and poll the results back to the sender machine. Passing data of type object makes this Remoting Interface generic to use across various test cases and across various users and systems in which different machines coordinate to execute a multi step test case and the data that may be exchanged between the test machines may vary from machine to machine.

A number of test scenarios may be automated via the generic interface described above. The calling and called applications may be application domains of any type for example WINDOWS based forms applications Console applications WINDOWS based services applications web services applications and the like . Calling sender and called receiver applications may send arguments in the RunTest object arguments API and may receive as return type any type. By having multiple listener applications running on multiple machines a single test case may span across multiple machines. The calling sender application may act as a controller and may make synchronous calls to the called receiver applications in a predefined order where each call returns a success or failure.

For purposes of description of consider an example test case using DUET a collaborative application of MICROSOFT and SAP to allow information workers to interact with enterprise type applications. According to the following example test case consider a requirement to test a DUET specific feature that involves a user called Organizer hereafter to use an electronic calendaring application automation feature for example a MICROSOFT OUTLOOK automation feature to create a meeting request and to send the meeting request to another user called Receiver hereafter who will accept the meeting request. A set of high level test case steps are illustrated below.

As can be seen from the foregoing test case steps and as illustrated in the organizer and receiver are two different users who have their calendaring application profiles configured on two different computing devices machines . Without the benefit of embodiments of the invention for execution of the above example test case two different applications need to run on these computing devices that execute their respective portions of the test case. The two applications must execute one after the other in the order of the test case steps listed above and must collectively decide the result of the test case.

Referring to according to embodiments the test routine begins at start operation and proceeds to operation where the organizer sending system initiates the test case by sending the object RunTest object arguments API via the Remoting Interface to the receiver system . According to one embodiment the remote method passed to the receiver system takes as an argument System. Object and returns System. Object. Thus the organizer and receiver applications may agree on the type that they can send and receive.

At operation the Remoting Interface API is received by the receiver system and the remote server begins running at the receiver application for processing the received test object. At operation the organizer creates an object RemoteClient of remote client . At operation the organizer calls a test case method RunTest and supplies test specific parameters in the form of a NameValueCollection as an argument which contains complete details of the test case including the need to run at the receiver application the steps that need to be run and all additional test information in name value pairs that may be of use to the receiver application to run properly. That is the arguments of the API include the test specific parameters specified by the organizer sender that need to be processed at the receiver system .

At operation the RemoteClient object calls the test method on RemoteObject of the remote server synchronously . At operation the RemoteObject on the remote server reads a configuration config file creates a test case instance for example via .NET Reflection described above calls the appropriate test method as defined in the configuration file and passes to the test method the argument that is received from the client application via the Remoting Interface API. This method call contains implementation of the test case portion that needs to run on the receiver system .

At operation the test method returns an object of type TestResult which may contain a Boolean value to indicate pass failure of the step that was run plus any console output as a displayable string that may need to be passed back to the organizer. According to embodiments the recurring common data class library is illustrated if for test result data exchanged between the organizer calling system and the receiver called system . At operation control is returned back to the organizer system and the user organizer of the organizer system may examine the test results. If desired the user organizer may process log test output as desired.

As an example of the above if the user organizer desires to test whether a time zone difference is accounted for at the receiving system when a meeting request is accepted by the receiver a test method may be passed to the receiving system as described above to verify that if the receiving system operates in a time zone one hour later than the sending system a meeting request accepted at the receiving system will account for the time zone difference. According to embodiments this test parameter will be passed to the receiving system and if the time zone difference is accounted for when the meeting request is accepted then a Boolean test result of pass may be returned to the user organizer. A similar test may be run to determine whether data in an associated LOB system for example an employee productivity monitoring system is notified and updated based on an accepted meeting request at the receiving system .

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld mobile or other type of computer computing device capable of executing one or more application programs. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments of the invention the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse etc. not shown . Similarly an input output controller may provide output to a display screen a printer or other type of output device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store application programs such as a software application for example a word processing application a spreadsheet application a slide presentation application a database application etc.

According to embodiments of the present invention a test framework for automating multi step and multi machine test cases for electronic calendaring application objects as described above. Other applications include a variety of software applications that may be utilized according to embodiments of the invention for example an electronic calendaring application such as MICROSOFT OUTLOOK described above and a collaborative application such as DUET from MICROSOFT and SAP described above.

It should be appreciated that various embodiments of the present invention may be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various embodiments those of ordinary skill in the art will understand that many modifications may be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

