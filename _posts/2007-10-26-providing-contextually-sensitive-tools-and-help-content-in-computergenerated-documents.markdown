---

title: Providing contextually sensitive tools and help content in computer-generated documents
abstract: A method and system are provided for creation, implementation, and use of computer-generated “smart” documents to which functionality is attached for providing contextually sensitive tools, controls and help content to users of those documents. Portions of documents are annotated with Extensible Markup Language (XML) tags and structure so that when a user enters those portions, such as by placing a computer cursor in those portions, the user is provided contextually sensitive tools, controls and/or help content. A document tools pane may open on the user's computer screen adjacent to the document being edited for providing the document tools, controls or help content related to the context of the text or data in which the cursor is located. If the user moves the cursor to another portion of the document, the user may obtain information associated with the context of the new portion of the document in which the cursor is located.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08706708&OS=08706708&RS=08706708
owner: Microsoft Corporation
number: 08706708
owner_city: Redmond
owner_country: US
publication_date: 20071026
---
This application is a continuation of application Ser. No. 10 164 960 filed Jun. 6 2002 now U.S. Pat. No. 7 356 537 which is incorporated herein by reference.

This invention relates to the provision of contextually sensitive tools and help content in computer generated documents.

Computer software applications allow users to create a variety of documents to assist them in work education and leisure. For example popular word processing applications allow users to create letters articles books memoranda and the like. Spreadsheet programs allow users to store manipulate print and display a variety of alpha numeric data. Such applications have a number of well known strengths including rich editing formatting and calculation.

However documents created by such software applications do not provide users with contextually sensitive tools help content or support. That is as the user is entering text or data into such software applications these applications do not provide the user with helpful tools or assistance based on the context of the text or data being entered by the user. Internet web based applications attempt to solve some business problems through the creation and deployment of web based templates with which users may enter information that may be transmitted to a back end web server for the purpose of registering the user for some type of service. Such web based applications often may include links with which the user may navigate to a separate web site for helpful information or assistance with the current web based application or document in use by the user. However such web based applications suffer compared to the aforementioned software application documents in that modern web based applications seldom offer rich editing formatting printing and calculation.

By way of example in a typical setting a user may decide to prepare a resume using a word processing application loaded on her home computer. As the user prepares the resume she likely will fill in such sections such as personal information education experience and extra curricular activities. As the user is completing each of those sections she may require assistance including information on the preferred ordering of the sections information on the preferred number of past jobs to place in the experience section and the like. In order to receive such assistance the user likely must read a book on resumes or go online to an internet based resume help site for the information.

In contrast the user may enter an internet based resume site to complete a resume using a web based resume template. The user may be allowed to enter specific information in given data fields and the user may be provided with internet web site links for navigating to sites where she may obtain assistance with various sections of the document. When the user has completed preparation of the web based resume the user may be allowed to submit the resume to some web based job service or the user may be able to print the template. However the functionality of the user s word processing application such as rich editing and formatting of the resume is likely not available to the user given the limitations of the web based application in contrast to the user s computer based word processor.

The present invention provides a method and system for creating implementing and using computer generated documents that provide contextually sensitive tools controls and help content to the user s of those documents. Generally described a schema is attached to a document defining permissible data content data type and data structure for the document. The document is structured to associate the document with the schema and a solution is associated with the document structure. A plurality of software components is assembled for providing the solution to the document and the document is enabled to call the plurality of software components for providing the solution to the document based on an editing position in the document.

After the document is created a software application for opening the document may be booted to initiate opening the document. A determination is made as to whether the document refers to the solution. A determination is made as to whether the plurality of software components for providing the solution is present in a library of software components. If so the plurality of software components is called for providing the solution to the document.

Once the document is opened for use focusing document editing in a particular portion of the document such as by placing the cursor in a particular portion of the document causes the generation of a list of Extensible Markup Language XML elements enclosing a position of the editing focus. A determination is made as to whether any available solutions are associated with the list of XML elements. If any available solutions are associated with the list of XML elements each associated solution is called and is obtained for use by the document. Preferably the solutions comprise help content and document tools associated with the context of the editing position in the document. A graphical user interface is launched for displaying each solution obtained for use by the document.

These and other features advantages and aspects of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments and by references to the appended drawings and claims.

The present invention is directed toward creation implementation and use of computer generated smart documents to which functionality is attached for providing contextually sensitive tools help content and controls to users of those documents. According to an embodiment of the invention portions of documents are structured so that when a user enters those portions such as by placing a computer cursor in those portions the document points to a solution that may provide the user contextually sensitive tools and or help content. For example if a user is preparing a resume to assist her in obtaining a job the user may place her computer cursor in the education section the resume. According to the present invention the placement of computer cursor in the education section may provide the user with contextually sensitive information. The document may point to an overall solution e.g. a resume document solution or individual portions of the document may point to contextual subsets of the solution e.g. and experience section solution of a resume document solution. A document tools pane may open on the user s computer screen adjacent to the document being edited and may provide a narrative on suggested approaches for the completion of the education section. If the user moves the cursor to another portion of the document for example to the objectives section of the resume the user may obtain information associated with that context such as examples of proper employment objectives statements.

It should be understood that the contextually sensitive tools and help content provided to a user in accordance with an embodiment of the present invention may be provided for a variety of software application programs including word processors spreadsheets web browsers text editors and the like. Moreover the types and content of helpful information and tools provided to a user according to an embodiment of the present invention may include a variety of tools and actions and help information as desired by the creator of the software applications in use by the user.

Referring to a computer screen display is illustrated showing an exemplary software application with which a document and associated document tools pane providing document tools and help content is illustrated. The document depicted in shows an employee annual performance review template with which an employ may complete her annual performance review or with which she may complete a performance review of one of her employees. The application depicted in is a word processing application used for displaying and editing the document but as should be understood by those skilled in the art the application could include other software applications including spreadsheet applications text editing applications and the like. Moreover the document illustrated in depicts an annual performance review document but the document could include a variety of other documents and templates edited by the user including resume templates will templates desktop publishing documents letters financial spreadsheets and the like.

Referring to the exemplary document shown in the word processing application provides typical functionality associated with a word processor accessible via drop down menus such as File Edit View Insert Format etc. The document is displayed in the work area of the application and a document tools pane is illustrated to the right of the document . As should be understood the display illustrated in is by way of example only and the components illustrated in may be organized in a variety of different ways pleasing to the user. That is the document tools pane may be located on the bottom of the screen display to the left of the document or according to other orientations allowed by the application .

A detailed discussion of the creation and implementation of the smart document illustrated in follows below but generally described according to an embodiment of the present invention once the user places her computer cursor within a particular section of the document for example the objectives section illustrated in the user is provided with tools and help content in the document tools pane . For example if the user places her computer cursor in the objectives section the user may be provided with Objective Writing Tips shown in the document tools pane . Selection of the Objective Writing Tips as illustrated in causes a display of Objective Writing Tips text that provide the user with helpful information as to how to complete the objectives section the performance review document illustrated in . If the user moves the cursor to a different section of the document for example the personal information section information provided in the document tools pane will be provided to give the user assistance with the completion of the personal information section .

In addition to helpful information to assist the user a variety of document tools and actions are provided. For example the Submit Review action may allow the user to submit the completed document to her supervisor or to her employee after completion of the document. The Open Last Review action may allow the user to open the last performance review so that she may determine whether she completed her objectives as set forth in the last review. If the document in use by the user is some other type of document for example a resume document helpful information in the document tools pane might include information on preparing the education section the experience section and or the personal information section. A will document might be associated with helpful information regarding legal rules for preparation of wills rules regarding estate beneficiaries and the like.

In addition to the document actions and help content illustrated in the pane a variety of document controls may be provided including radio buttons text boxes check boxes ActiveX controls XML tree controls and the like. For example a text box may be provided to allow a user to select from a list of pre written text items. Or the user may be allowed to enter text in a list box provided in the pane that will then be inserted into the document or used by the application with respect to some other functionality of the application. A radio button or check box may be provided to allow the user to select from different choices of document actions or help content. For example if the document is a will check boxes may be provided with which the user may select married single etc. to obtain help information based on the user s personal will and estate profile.

Referring to a general system architecture for creating and utilizing a smart document in accordance with the present invention is illustrated. A software application as described above is opened on the user s computer to create or edit a document according to the present invention. A schema library is provided for containing all of the executable files required for providing the contextually sensitive functionality to the document . For example the schema library may include a variety of components including individual modular software routines that have been compiled and dynamically linked and that are ready to use by the application for providing contextually sensitive functionality to the document .

Such components may include a number of dynamically linked libraries dll which include executable files or routines stored separately from the software application . The dlls are loaded by the software application only when they are needed to provide functionality to the document . Additionally as described in detail below the schema library may include a number of Extensible Markup Language XML files for providing contextually sensitive functionality in association with XML structure that has been applied to the document .

A solution property is included in the document for pointing the document to a particular solution contained in the schema library . The solution location property provides the document and the application with information as to the location of the solution property in the schema library or to a remote location provided via a distributed computing environment such as is provided from a web based server via the Internet.

According to the present invention and as described in detail below when a user focuses on a particular portion of the document such as the objectives section of the performance review illustrated in a solution property points the document to the objectives section help solution illustrated in the document tools pane . The solution location provides the document and the application with the location of the components dlls or XML files necessary for implementing that solution. As should be understood exemplary components may include components for drawing the document tools pane components for displaying the information associated with the particular context in this case the objectives section and components for executing document actions such as Submit Review action .

With reference to an exemplary system for implementing the invention includes a conventional personal computer including a processing unit a system memory and a system bus that couples the system memory to the processing unit . The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive a magnetic disk drive e.g. to read from or write to a removable disk and an optical disk drive e.g. for reading a CD ROM disk or to read from or write to other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage for the personal computer . Although the description of computer readable media above refers to a hard disk a removable magnetic disk and a CD ROM disk it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges and the like may also be used in the exemplary operating environment.

A number of program modules may be stored in the drives and RAM including an operating system one or more application programs a word processor program module or other type of program module program data such as the manifest and other program modules not shown .

A user may enter commands and information into the personal computer through a keyboard and pointing device such as a mouse . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers or printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a server a router a peer device or other common network node and typically includes many or all of the elements described relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As understood by those skilled in the art of Extensible Markup Language usage once that portion of the document is annotated with XML structure corresponding to the name element for example manipulation of data entered into that section of the document may be performed by software components without regard to the actual content of the data so long as the content was entered according to the schema prescribed for that portion of the document.

At step the document is annotated with XML structure that will be associated with tools and help functionality for providing contextually sensitive functionality to the document as described above. A simplified XML structure annotation for the employee review document illustrated in is as follows.

The schema attached to the document prescribes the data type and data structure rules entered within the XML document structure. As should be understood the XML structure illustrated above is simplified in nature and is provided for purposes of illustration only. A sample XML schema associated with the example XML structure above is as follows.

At step software programming code is written that is necessary to display and handle tools controls and actions in the document tools pane according to the position of the user s cursor within the document . The code written at step includes all required XML files including Extensible Style Sheet Language XSL files including XSL transformations and XSL formatting objects. As understood by those skilled in the art XSL transformations include files containing specific rules by which one XML document is transformed into another XML document. As should be understood by those skilled in the art all XML files including XML documents and XML transformation documents are written for processing the document as an XML structured document.

According to one embodiment an XML schema may be written to define a list of document actions controls and help content that are associated with a solution or contextual subset of a solution that are correspondingly associated with XML structure elements in the document. The XML schema may be written using any editing tool or XML schema editing tool to create an instance of the schema. The XML schema may be written to include directly in the XML schema all of the properties of the schema and a list of the document actions controls and help content to be displayed. An exemplary XML schema is set out above.

Other code written for the document at step includes all of the components such as dynamic link libraries dll needed by the application and the document for providing the contextually sensitive functionality to the document as described with reference to . For example a dll in the form of an application programming interface API may be written to call on a particular solution contained in the schema library when the computer cursor is located by the user within a particular context of the document . That is when the computer cursor is placed within a particular section or portion of the document such as the name portion an application program interface is included for finding the solution property associated with the name portion of the document and for calling that solution to provide document tools actions and help content associated with the name portion of the document.

Other exemplary components that are written at step include components for drawing the document tools pane and for displaying textual information associated with the XML elements in the document within which the computer cursor is presently located. Other components may include modular software routines for displaying an action such as a submit review button for allowing the user to submit the review to a third party such as the user s employee or the user s supervisor. Still other components may be included for drawing and for providing functionality to controls such as radio buttons text boxes and check boxes as described above with reference to . Any component object model add ins that may be needed to provide functionality according to the present invention are also written at step . In addition to software components necessary providing the document tools and help functionality described herein the actual text of help content that is drawn into the pane is assembled for deployment when a corresponding help topic is called.

Controls such as radio buttons text boxes and check boxes may be provided in the pane without an associated schema being attached to the document. By declaring that a control is associated with a particular XML element that control may be provided at the top of the pane above other actions controls and help topics prescribed by the schema. Similarly a control may be provided immediately above all other items including those described above in the pane by declaring that the control is associated with the entire schema for the document rather than to individual XML elements prescribed by the schema.

All of the aforementioned files components component add ins dlls schema files and XML files are assembled and stored for use by the application in providing the contextually sensitive functionality of the document . The schema library may be in the form of a database containing pointers to the aforementioned stored components that may be stored in the memory of the computer in various locations including the computer s registry.

According to embodiment of the present invention an application programming interface API is provided for implementing the functionality of the present invention to provide a smart document solution to the document . The API includes properties and methods or instructions that are called upon when a particular action is initiated for example opening the document that in turn points to a solution as described above. Listed below is sample computer programming code for implementing the smart document API. The sample code listed below is not limiting of variations that may be made in computer programming code that may be written for implementing the API according to the present invention.

Private Sub ISmartDocument SmartDocInitialize ByVal document As Object ByVal bstrSolutionPath As String 

Private Property Get ISmartDocument SmartDocXMLTypeCaption ByVal smartDocID As Long ByVal LocaleID As Long As String

Private Property Get ISmartDocument ControlID ByVal SmartDocXMLTypeName As String ByVal ControlIndex As Long As Long

Private Property Get ISmartDocument ControlTypeFromID ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long As C TYPE

Private Property Get ISmartDocument IsControlDynamic ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long As Boolean

Private Property Get ISmartDocument ControlCaptionFromID ByVal ControlIDAs Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object As String

Private Sub ISmartDocument PopulateRadioGroup ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object List As String count As Long InitialSelected As Long 

Private Sub ISmartDocument OnRadioGroupSelectChange ByVal ControlID As Long ByVal Target As Object ByVal Selected As Long ByVal Value As String 

Private Sub ISmartDocument PopulateImage ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object ImageSrc As String 

ApplicationName As String ByVal Target As Object ByVal Text As String ByVal Xml As String ByVal LocaleID As Long ByVal XCoordinate As Long ByVal YCoordinate As Long 

Private Sub ISmartDocument PopulateDocumentFragment ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object DocumentFragment As String 

Private Sub ISmartDocument PopulateActiveXProps ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object PropBag As SmartTagLib.IActiveXProperties 

Private Sub ISmartDocument PopulateCheckbox ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object Checked As Boolean 

Private Sub ISmartDocument OnCheckboxChange ByVal ControlID As Long ByVal Target As Object ByVal Checked As Boolean 

Private Sub ISmartDocument PopulateListOrComboContent ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object List As String count As Long InitialSelected As Long IsEditable As Boolean ControlOnSameLine As Boolean 

Private Sub ISmartDocument OnListOrComboSelectChange ByVal ControlID As Long ByVal Target As Object ByVal Selected As Long ByVal Value As String 

Private Sub ISmartDocument PopulateTextboxContent ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object Value As String ControlOnSameLine As Boolean 

Private Sub ISmartDocument OnTextboxContentChange ByVal ControlID As Long ByVal Target As Object ByVal Value As String 

Private Sub ISmartDocument PopulateHelpContent ByVal ControlID As Long ByVal ApplicationName As String ByVal LocaleID As Long ByVal bstrText As String ByVal bstrXML As String ByVal Target As Object Content As String 

Private Sub ISmartDocument InvokeControl ByVal ControlID As Long ByVal ApplicationName As String ByVal Target As Object ByVal Text As String ByVal Xml As String ByVal LocaleID As Long 

A number of properties and methods are included in the API listed above. The SmartDoclnitialize method includes routines and instructions executed when the API is called upon to provide smart document functionality to the docket . The SmartDocXMLTypeCount property includes the number of XML element types associated with the solution. The SmartDocXMLTypeName property includes unique identifiers for the XML element types associated with the smart document solution. The SmartDocXMLTypeCaption property includes captions associated with XML elements that may be included in a menu or pane such as the help pane .

The ControlCount property includes the number of controls associated with the smart document solution for a particular XML element type. The ControlID property includes unique identifiers for the controls. The ControlTypeFromID property includes the types of controls available for use with an associated solution for example radio buttons textboxes and check boxes. The ControlNameFromID property returns a name associated with each control for use internally by a given application program .

The PopulateRadioGroup method includes routines and instructions that are executed for populating radio control buttons within a menu or pane such as the help pane . The OnRadioGroupSelectChange method includes routines and instructions that are executed when a radio group radio button is selected or deselected.

The PopulateImage method includes routines and instructions that are executed for populating an image associated with a solution such as an image populated within the help pane . The ImageClick method includes routines and instructions that are executed when an image is selected by a user.

The PopulateDocumentFragment method includes routines and instructions that are executed for populating the user interface with text or data. The PopulateActiveXProps method includes routines and instructions that are executed for obtaining ActiveX functionality associated with a document solution.

The PopulateCheckbox method includes routines and instructions for providing a checkbox control in a user interface such as the help pane . The OnCheckboxChange method includes routines and instructions that are executed when a checkbox control is selected or deselected by a user.

The PopulateListOrComboContent method includes routines and instructions that are executed to populate a list box control in a user interface such as the pane . The OnListOrComboSelectChange method includes routines and instructions that are executed upon the selection of an item in a list box control.

The PopulateTextboxContent method includes routines and instructions for populating a textbox in a user interface such as the pane . The OnTextboxContentChange method includes routines and instructions that are executed for handling an event associated with the change of content in a textbox control within a user interface such as the pane .

The PopulateHelpContent method includes routines and instructions for populating a help content field within the pane with required text or data. The InvokeControl method includes routines and instructions that are executed when a control such as a radio button textbox or checkbox is selected or deselected.

Referring still to at step a determination is made as to whether the document may work in a client server operation. That is components providing contextually sensitive functionality to the application or updates or changes to those components may be stored at a remote server location separate from the computer . If the document is to be enabled to obtain necessary components for operation of the application and document from a remote server location the method proceeds to step and server code is written to a server location for responding to client side actions performed by the user at the computer . That is application programming interfaces for corresponding between the computer and a remote server are written for obtaining server based data and application components necessary for providing the contextually sensitive functionality of the present invention. If it is desired that the application point to a remote server for data and application components a solution location identifier such as a solution URL is added to point the application to a location on the remote server to obtain the necessary data and application components.

At step a manifest of all of the programming components described above is created for identifying the list of components dlls schema files and XML files that will be used to provide various solutions and functionality to the document . A pointer is added to the document for pointing the document to the manifest of components for obtaining functionality provided by individual and various components. For a detailed description of the manifest see U.S. Patent Application entitled Mechanism for Downloading Software Components From A Remote Source For Use By A Local Software Application Ser. No. 10 164 260 filed Jun. 5 2002 which is incorporated herein by this reference as if fully set out herein. At step all files code and changes to the document are saved and the document creation method ends at step . Accordingly the document is now in a condition to be opened and utilized by a user.

At step the user selects the document for opening in a manner consistent with the application . At step a determination is made as to whether the document refers to a solution. That is at step a determination is made as to whether the document is annotated with pointers to a solution or to multiple solutions for providing contextually sensitive tools and help information to the document as described above. As a part of the check to determine whether the document points to a solution or to multiple solutions a determination is also made as to whether a schema has been attached to the document as described above. If the document does refer to a solution for example a solution for providing the user with assistance in preparation of the user s employee review document the method proceeds to step and the application calls the schema library to determine whether the solution referred to by the document is stored in the schema library . At the schema library the determination includes a determination as to what components in the schema library are necessary that is what components are associated with the solution I.D. For example the document may have a schema attached to define the rules governing the XML structure of the document but that was created without reference to a particular solution.

At step a determination is made as to whether the solution is stored in the schema library. As should be understood multiple solutions may be attached to the document . For example a first solution might include helpful information and actions to provide contextually sensitive information regarding completion of the document by a particular user. A second solution may be attached to the document for providing information to a supervisor of the user so that the contextually sensitive information provided to the supervisor will give the supervisor information as to how to evaluate each section of the employee s review document.

If multiple solutions are referred to by the document a prompt may be provided to the user such as the dialog box illustrated in to notify the user that multiple solutions are available for this document. The user may then select one solution from the list of solutions for providing the desired functionality to the user after the document opens.

At step a determination is made as to whether the user actually wants the solution to be provided to the user after the document is opened. As should be understood a dialog box similar to the dialog box may be presented to the user to query the user as to whether she desires the help content and tools functionality. The user may have completed the document on numerous occasions and may not now desire additional help functionality or action functionality. If desired the user may elect to always receive the solution upon opening the document . Similarly the user may elect to have the document via the application check for updates to the solution each time the document is opened.

If the user declines the solution the method proceeds to step and the document is opened without smart document solutions according to the normal procedures required and implemented by the application . If the user does desire the functionality of the solution referred to by the document the method proceeds to step and the solution is loaded for use by the application and document . As should be understood by those skilled in the art loading the solution includes calls from the document via the application to all necessary files dlls component add ins and XML files associated with the solution and stored in the schema library .

Upon being called by the document each called file is registered with the application via the computer s operating system and a path is established between each called file and the application and document for provision of the functionality associated with each file. For example if a particular dll that is used for drawing the document tools pane must be assigned a registry key for proper communication with the application and document this registration process is performed during the load solution step . At step the smart document is opened and is displayed on the user s computer screen as illustrated in .

Referring back to step if the document does not refer to a solution the method proceeds to step and a determination is made as to whether a schema has been attached to the document. If the document has an attached schema but no reference to a particular solution the method proceeds to step and a check is made of the schema library as to whether a solution does exist that may be associated with the schema that is attached to the document . That is even where no solution is referred to in the document the schema library may have solutions that have been obtained by the user of the computer subsequent to the creation of the document that may be utilized by the document even though the document was not originally created to refer to the solution.

If a solution does exist in the schema library for the document the method proceeds to step and the steps thereafter as described above. If a schema is not attached to the document the method proceeds to step and the document is opened without smart document solutions.

Referring back to step if no solution s are found in the schema library associated with the solution referred to by the document or associated with the attached schema the method proceeds to step and a determination is made as to whether the user would like to download a solution. At step the user may be prompted by the application and informed that the document will work more efficiently or will be more useful if the user downloads certain help and action functionality to the user s document . The user may be provided with a prompt in the form of a dialog box such as the dialog box illustrated in . A number of queries may be made to the user to ask the user whether the user would like components comprising the desired solution to be downloaded according to a number of methods. If the user declines to download solution functionality and components the method proceeds back to step and the document is opened without smart document solutions as described above.

If the user desires to download the solution s offered to the user the method proceeds to step . At step components necessary for providing the desired solution s to the document are downloaded to the user s computer from some remote source such as a remote web based server. In order to locate the remote source the application uses the solution location pointer from the document to locate and obtain the necessary solution components. For a detailed description of a mechanism for downloading data and application components and other software modules from a remote location to the application see U.S. Patent Application entitled Mechanism for Downloading Software Components From A Remote Source For Use By A Local Software Application Ser. No. 10 164 260 filed Jun. 5 2002 which is incorporated herein by this reference as if fully set out herein. At step the downloaded solutions are loaded into the client side schema library and the solution is loaded as described above so that the document will include the functionality of the solution.

The method begins at start step and proceeds to step where a list of XML elements that surround the cursor is generated. The position of the cursor within the XML hierarchy is located and the X path expression to get to the position where the cursor is located is determined. For example referring to the simplified XML code set forth above the cursor may be located within the e mail tag and inside the larger XML tree within the employee review tag.

At step a determination is made as to which tools and help content should appear in the document tools pane . To make this determination the application enters a look up table stored on the client computer that contains information about which XML elements have which particular tools help content controls etc. associated with those XML elements. For example if the cursor is located in the e mail name element within the personal information section the application will enter the look up table to determine which particular tools or help content are associated with the e mail name element.

Each document action help item and control associated with each element is populated with a unique identification ID associated with each XML element to which it is applied so that the application may readily locate the actions help items or tools associated with the XML element. At step a determination is made as to whether any of the actions help items or controls are dynamic. A control may appear differently based on the context or background information for the context. The objectives section of the review document may be associated with a Submit Review button when the section is completed. On the other hand if the section is not completed the Submit Review button may not appear in the pane because the document should not be submitted without the completed objections section. Accordingly the Submit Review button in this case may be identified as dynamic at step and the method then proceeds to step . At step the document via the application calls the component representing the Submit Review button and provides that component with the context of the cursor position for example whether the objectives element has been completed or not.

At step after a determination has been made that the actions help content or controls are static or dynamic the contents of the document tools pane are drawn on the user s computer screen adjacent to the document as illustrated in . At step a determination is made as to whether the cursor is moved to a new context. For example after the user completes an entry in the objectives section the user may move the cursor to the personal information section to complete that section. If the cursor does not move the method proceeds to step and ends. That is as long as the cursor stays in the current context no additional changes are made to the content of the document tools pane . If the cursor is moved to a new context within the document the method proceeds back to step where a new list of XML elements containing the cursor is generated and the method proceeds on as described above to provide new content in the document tools pane associated with the new position and context of the cursor.

Referring back to the following is a description of the tools and help content drawn in the document tools pane . The particular text and controls illustrated in are by way of example only and vary with the context of the cursor position as described above. The name is a name for the document XML element associated with the actions and tools shown in the document tools pane . The name may refer to the schema that is attached to the document for example employee performance review form or the name may refer to the XML element in which the cursor is currently located. For example if the cursor is located in the objectives section the name may be re drawn as objectives section. The document actions are displayed based on the cursor context and based on whether the actions are static or dynamic. As set forth above the Submit Review action for example may be a dynamic action that is not displayed in the document actions pane if all required sections of the document have not been completed. The Last Years Objectives help topic is shown in a collapsed display. Selecting the expands the help topic to display additional sub topics contained therein. The Objective Writing Tips help topic is shown in an expanded view showing the full content available under that help topic. If an XML element within the document has no smart document actions or tools associated with it that XML element is not shown or identified in the document tools pane .

Help topics and tools may be nested meaning that sub help topics and sub actions may be included in help topics and document tools. If the cursor is in multiple elements because of nesting then the number of sections in the document tools pane can be greater than two. In this case the nested elements are shown in order of nesting where the outermost element is at the top of the document tools pane and innermost element is at the bottom of the document tools pane . If the elements actions tools and help content do not fit on one page a scroll bar may be provided as illustrated in that will extend over the entire document tools pane . Action and help content are listed in the order in which the dlls or components that provide them to the document return their names in response to a call from the application . According to one embodiment XML elements that are not associated with actions controls or help topics are not shown to the user. If desired however all XML elements may be shown in the pane to make the user aware of the complete XML structure of the document .

Accordingly after the document is opened and the smart document solution is loaded and implemented as described above the user of the document may now enter the document and complete the document with the help of the smart document functionality provided in the document tools pane . As the user moves the computer cursor through various sections of the document that are tagged with XML structure the user may be provided with helpful information and tools associated with that portion of the document.

It will be apparent to those skilled in the art that various modifications or variations may be made in the present invention without departing from the scope or spirit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein.

