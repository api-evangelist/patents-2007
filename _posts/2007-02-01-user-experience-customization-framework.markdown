---

title: User experience customization framework
abstract: A user experience (“UX”) customization framework is provided that enables the customization of the UX provided by an operating system (“OS”) and application programs executing on the OS. The UX customization framework includes a UX platform engine that processes UX markup language files to create a customized UX. UX markup language files include data that is formatted according to a UX markup language. The UX markup language is a superset of the hypertext markup language that defines additional markup language tags for use in creating a customized UX, such as tags through which the functionality provided by an OS component or an application program that is exposed through an application programming interface may be utilized within the UX.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732661&OS=08732661&RS=08732661
owner: Microsoft Corporation
number: 08732661
owner_city: Redmond
owner_country: US
publication_date: 20070201
---
Computer user interfaces have evolved over time from complex command line interfaces to the user friendly graphical user interfaces GUIs that are common on desktop computers today. While computer user interfaces have generally become more easy to use over time certain classes of computer users still have difficulty with even the friendliest of GUIs. For instance people generally uncomfortable with technology or that are new to computers may find some modern GUIs difficult to use. Likewise young children older people or persons with cognitive disabilities may find the user experience UX provided by modern GUIs difficult to understand and to interact with. UX refers to the visual and audio aspects of a user interface along with the manner in which a user interacts with the user interface.

Most modern GUIs provide features that allow a user to customize aspects of the UX. For instance a GUI may provide themes that can be applied to change the visual appearance of the GUI. These types of customizations however are generally limited to customizing the stylistic aspects of user interface UI windows and other UI objects. Some operating systems also provide accessibility features that allow the UX to be customized for users with physical disabilities such as users with poor eyesight or poor hand eye coordination. As an example a user may be permitted to select a high contrast color scheme or to magnify portions of the GUI for improved readability. A user may be similarly permitted to modify the manner in which a user interface device operates in order to improve usability in view of a particular physical disability.

In this manner the customization and accessibility features provided by some operating systems allow the UX to be customized to a degree for a particular user. In the event that additional customization of the UX is needed for a particular user however it is almost always necessary to create custom program code. For instance even with the use of accessibility features people with certain types of cognitive disabilities may be confused by the UX provided by current GUIs. Through the use of a simplified UI customized to the needs of the particular user however these types of people can often effectively utilize a computer. Provision of a simplified GUI that is customized for the needs of a particular user however generally requires the creation of a custom program for providing the GUI. Unfortunately the programming of a simplified GUI that is customized to the needs of a particular user can be difficult time consuming and expensive. Furthermore after such program code has been developed it needs to be supported through its life cycle with bug fixes. This custom application will then have to be redone once a new version of the underlying operating system or application ships. The effort required to create the new GUIs is multiplied by the fact that different target audiences require different customized GUIs.

Technologies are described herein for creating a customized UX. Through aspects presented herein a custom GUI can be created that provides a UX that is tailored to the needs of a particular computer user without performing any programming. Instead the UX is defined through the creation and use of one or more declarative UX markup language files. The UX defined by the declarative UX markup language files is rendered by a UX customization framework to provide the customized UX.

According to one aspect presented herein a UX customization framework is provided that enables the customization of the UX provided by an operating system OS and application programs executing on the OS. Through the use of the UX customization framework the UI provided by a computing system is separated from the functionality provided by the underlying OS and the application programs executing on the computing system. By separating the UI from the functionality provided by the OS and the application programs a UX may be created that is customized to the particular needs of any user. For instance a highly simplified UI may be easily created for sending electronic mail e mail messages that utilizes the existing functionality exposed by an e mail client application for constructing and sending e mail messages. As will be described in greater detail below such a UX may be defined without performing any programming whatsoever.

According to another aspect presented herein a UX customization framework is disclosed that includes a UX platform engine. The UX platform engine processes UX markup language files to create a customized UX. The UX markup language files include data that is formatted according to a UX markup language described herein. The UX markup language is a superset of the hypertext markup language HTML . As such the UX markup language may be utilized to define pages that include text graphics audio forms buttons and other UI objects typically found in HTML pages. These UI objects form the basis for the visual and audible aspects of a customized UX.

The UX markup language also defines additional markup language tags and attributes for use in creating a customized UX. For instance in one implementation the UX markup language defines a tag through which the functionality provided by an OS component or an application program that is exposed through an application programming interface API may be utilized within the UX. As an example such tags may be utilized to access functionality provided by OS components or application programs through accessibility APIs automation APIs or application specific APIs such as the messaging application programming interface MAPI APIs. Functionality provided through other types of APIs may also be utilized through the use of such markup language tags.

In order to generate a customized UX utilizing the framework described herein a user may use a visual designer application program or other type of editor to create the UX markup language files that describe the customized UX. The UX markup language files are then processed by the UX platform engine to render the customized UX. When markup language tags are encountered that reference functionality provided through an API exposed by an OS component or an application program the UX platform engine calls the appropriate API on the referenced OS component or application. In this manner a highly customized UI can be provided by creating UX markup language pages that utilize the functionality provided by existing OS components and application programs.

The above described subject matter may also be implemented as a method computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for enabling the creation of a UX that is customized for the needs of an individual user through the use of a UX customization framework. As will be discussed in greater detail below in order to create a customized UX only UX markup language files that describe the customized UX need to be created. The UX markup language files are rendered by a UX platform engine to provide the customized UX.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for providing a customized UX through the use of a UX customization framework will be described. In particular is a software architecture diagram showing an illustrative software architecture in which a UX customization framework is embodied in one implementation described herein.

As shown in one embodiment of the UX customization framework described herein includes a UX platform engine . As will be described in greater detail below the UX platform engine utilizes the contents of one or more UX markup language files to generate a UX that is customized to the needs of a particular user. In this regard the UX platform engine may utilize a rendering engine to actually render the contents of the UX markup language files . The rendering engine may comprise any type of rendering engine capable of rendering an HTML file. Other types of rendering engines may also be utilized.

The UX markup language files comprise one or more data files that include UX markup language. UX markup language is a superset of HTML that defines additional markup language tags for accessing the functionality provided by OS components and application programs through their public APIs. For instance according to one implementation the UX markup language defines a markup language tag through which functionality exposed by an OS component or an application program through an external API can be utilized. For instance the OS may include any number of components A B that expose functionality for use by the OS or an application program through the APIs and or respectively.

According to various embodiments virtually any type of API may be utilized by the UX platform engine . For instance in one implementation automation APIs such as the APIs A C may be referenced by the UX markup language file and utilized to access functionality provided by an OS component or an application program . The automation APIs A C allow aspects of the operation of a program to be controlled by other programs. According to other implementations accessibility APIs may be utilized such as the APIs A B. The accessibility APIs A B provide a mechanism for exchanging information between applications and assistive technologies. As an example the MICROSOFT ASSISTANCE API MSAA from MICROSOFT CORPORATION of Redmond Wash. allows applications to expose screen readers to the type name location and current state of all objects and notifies screen readers of events that lead to a UI change.

According to other implementations the APIs utilized by the UX platform engine may include application specific APIs that are specifically exposed by application programs to directly expose their functionality application specific APIs . For instance some e mail application programs expose a MAPI API through which functionality for creating and sending e mail messages is exposed. Other types of application specific APIs include APIs exposed by World Wide Web Web browsers for retrieving and rendering Web pages. It should be appreciated that the implementations described herein may be utilized with any application specific API exposed by an OS component or an application program that provides access to functionality provided by the OS component or application program.

According to embodiments a UX plug in may be utilized to provide an interface to functionality provided by programs that do not provide an API that is compatible with or recognizable by the UX platform engine . In such a scenario the UX plug in may expose an API C compatible with the UX platform engine . The UX plug in in turn calls the API C exposed by the application program B to access the desired functionality. Through the use of a UX plug in in this manner functionality exposed by an application program through virtually any type of API may be utilized within a customized UX.

In order to create the UX markup language files a user may utilize any type of text editing program or HTML editor. Alternatively in embodiments the UX customization framework described herein may include a visual application designer program to assist with the creation of the UX markup language files . UX markup language templates may also be provided for use with the visual application designer program . The UX markup language templates provide a starting point for creating a new UX markup language file including UX markup language for implementing common tasks. The visual application designer program may also include a wizard for assisting a user with the creation of a new UX markup language file including the generation of UX markup language for a desired group of common tasks e.g. sending e mail Web browsing etc. .

Referring now to FIGS. and A E an illustrative UI generated by the UX customization framework shown in will be described. In particular show one example of a customized UX that could be easily generated and instantiated by the UX customization framework described herein. The UI shown in consists of five screens A E shown in respectively. The screens A E are generated by the UX platform engine and the rendering engine based upon the contents of one or more UX markup language files and supporting files containing the graphical images shown in . It should be appreciated that the UI shown in is merely illustrative and that virtually any type of UI for providing any type of UX may be created in the manner described herein. The possibility of creating virtually any type of UI is of utmost importance in this case as different target audiences have different needs. While some users might be helped by using the step by step approach as shown here in others might need to have all needed input on one screen as they do not have a good concept of previous and next .

The UI shown in is a simplified UI for sending an e mail message with an attached picture. Such a UI may be helpful for instance to a user with a cognitive disability for which the use of a traditional e mail client may be difficult or even impossible. The UI shown in begins with the screen A shown in . The screen A includes text that describes its functionality and several graphical images that may be selected by the user to initiate further action. For instance the button A may be selected by a user to end the process of sending an e mail message. The images A B may be selected by the user to thereby choose the individual to whom the e mail message should be sent.

It should be appreciated that standard HTML may be utilized to create the visual aspects of the screen A. However in order to enable the functionality for sending an e mail message extended markup tags provided by the UX markup language provided herein must be utilized. For instance a tag may be utilized in response to the selection of one of the images A B to instruct an e mail application program to create a new e mail message to the identified recipient e.g. . When the UX platform engine encounters a tag that references the functionality provided by an OS component or application program through an API the platform engine calls the referenced API to perform the desired functionality. In this example the UX platform engine would call an API exposed by the e mail client application for creating a new e mail message. In the example UI shown in a user has selected the image A to begin the creation of a new e mail message to the contact named Joe. In response to the selection the screen B shown in is rendered and displayed.

The screen B shown in includes additional UI elements for creating the contents of the new e mail message. As with the screen A these elements may be generated using standard HTML. For instance a form is presented in which the user may type the contents of the new e mail. In response to the selection of the button C the e mail application may be instructed to insert the text typed into the form into the body of the new e mail message. This activity may be tied to the action attribute of the form . Once this occurs the screen C shown in is displayed. The user may return to the screen A shown in by selecting the button B.

The screen C shown in allows the user to attach an image to the e mail being created. In this regard the available images such as the images C D may be displayed to the user. In response to the selection of one of the images the UX platform engine may utilize the API exposed by the e mail client application to instruct the application to attach the selected image to the new e mail message. In the example shown in the user has selected the image C. In response to such a selection the screen D shown in is displayed. The buttons B and C may also be utilized to return to the screen B or to advance to the screen D respectively.

The screen D shown in provides a confirmation to the user of the content and attachments to the new e mail message. In this manner the screen D provides a visual indication of what the new e mail message will look like. As with the previously described screens the visual aspects of the screen D may be created using standard HTML. If the user chooses the button C to send the new e mail message the UX platform engine will call the appropriate API on the e mail client application for sending the e mail message. The screen E described below will then be displayed. The user may also select the button B to return to the screen C described above with respect to .

The screen E shown in provides buttons A C corresponding to additional actions that may be taken by a user after their e mail message has been sent. In particular selection of the button A will cause the process described above for sending an e mail message to be repeated. Selection of the button B will initiate a process for performing another task on the computer. For example a similarly simplified UI could be created that allows a user to browse a limited list of Web sites. APIs exposed by a Web browser application program for retrieving and rendering Web pages may be called by the UX platform engine to provide such a UX. Selection of the button C will cause the computer to be turned off. In this regard the button C may be tied to an API exposed by an OS component for shutting down the computer system. Other types of functionality may be similarly encapsulated into a customized UX.

Referring now to additional details will be provided regarding the embodiments presented herein for enabling the creation of a customized UX. In particular is a flow diagram showing a routine that illustrates the operation of a computer described below for enabling the creation of a customized UX through the use of a UX customization framework.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination. It should also be appreciated that more or fewer operations may be performed than shown in and described herein. These operations may also be performed in a different order than those described herein with respect to .

The routine begins at operation where one or more UX markup language files are created. As discussed above the visual application designer program or another type of editor may be utilized to create the UX markup language files . Once the UX markup language files have been created the routine proceeds to operation . At operation the UX platform engine is executed to process the UX markup language files . As discussed above the UX platform engine may utilize a rendering engine to render the contents of the UX markup language files to provide a visual UI to a user. This occurs at operation .

From operation the routine continues to operation where the UX platform engine determines whether the UX markup language files include tags that reference functionality exposed by an OS component or an application program through an API. If not the routine returns to operation described above. If so the routine proceeds from operation to operation where the UX platform engine calls the appropriate API on the referenced OS component or application program. As discussed above this may occur in response to the selection of a UI object or may occur in line with the rendering of the UX markup language file . From operation the routine returns to operation described above.

Referring now to an illustrative computer architecture for a computing system capable of executing the software components described above with respect to will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer. The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the a UX platform engine an application program a UX markup language file and the other program modules shown in and described above with reference to . Other program modules may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that technologies for enabling the creation of a customized UX are provided herein. As described herein a UX customization framework may be utilized to disassociate the UI of OS components and application programs from the functionality they provide. It should be appreciated however that aspects of the UI generated by an OS component or an application program may be display to a user as a part of a customized UX. It should also be appreciated that the components described herein as comprising the UX customization platform are merely illustrative and that more or fewer components may be utilized. It should further be appreciated that through the use of the technologies described herein a user may specify their desired input and output modes. For instance through the embodiments described herein input and output functionality provided by operating system components or application programs may be utilized. As an example multiple input modes such as speech alternative input devices mouse keyboard and pointed devices may be specified and utilized. Similarly multiple output modes may also be specified such as speech text images sign language Braille or the like.

Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

