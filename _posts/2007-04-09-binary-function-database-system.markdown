---

title: Binary function database system
abstract: A binary function database system is provided in which binary functions are extracted from compiled and linked program files and stored in a database as robust abstractions which can be matched with others using one or more function matching heuristics. Such abstraction allows for minor variations in function implementation while still enabling matching with an identical stored function in the database, or with a stored function with a given level of confidence. Metadata associated with each function is also typically generated and stored in the database. In an illustrative example, a structured query language database is utilized that runs on a central database server, and that tracks function names, the program file from which the function is extracted, comments and other associated information as metadata during an analyst's live analysis session to enable known function information that is stored in the database to be applied to binary functions of interest that are disassembled from the program file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07802299&OS=07802299&RS=07802299
owner: Microsoft Corporation
number: 07802299
owner_city: Redmond
owner_country: US
publication_date: 20070409
---
Malicious software or malware is a term which generally describes software that is purposefully designed to cause disruption and problems on the computers and systems on which it runs. Malware includes for example viruses worms trojan horses rootkits adware spyware bots and other destructive software forms. Malware can cause significant damage in the form of disabled or corrupted firmware software applications or systems lost or damaged data data theft and loss of security e.g. increased vulnerability for systems or data among other problems. Such damage is not necessarily limited to individual computer systems given today s high level of interconnectivity among computers through various networks including the Internet. As a result significant resources are expended to identify and analyze malware to be able to develop solutions and address areas of vulnerabilities. Analysts are also interested in understanding how various malware variants may be clustered into families based on their functionalities.

Malware analysts often spend significant amounts of time analyzing disassembled functions from files which may contain malware. While current tools let analysts save their chosen function names and comments in a disassembly database such tools only allow for a one to one relationship between the disassembly database and the malware files. Thus a function of interest can be compared against another function and the current tools will determine if the two functions are the same or not. However analyses performed by malware analysts do not persist across disassemblies of many different files that contain similar functions. In addition current tools for clustering binary functionality to identify families of malware use static analyses that do not scale well or can return unreliable results because many different families have near identical characteristics when subjected to dynamic analyses.

This Background is provided to introduce a brief context for the Summary and Detailed Description that follow. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.

A binary function database system is provided in which binary functions are extracted from compiled and linked program files and stored in a database as robust abstractions which can be matched with others using one or more function matching heuristics. Such abstraction allows for minor variations in function implementation while still enabling matching with an identical stored function in the database or with a stored function with a given level of confidence. Metadata associated with each function is also typically generated and stored in the database.

In an illustrative example a structured query language SQL database is utilized that runs on a central database server and that tracks function names the program file from which the function is extracted comments and other associated information as metadata during an analyst s live analysis session to enable known function information that is stored in the database to be applied to binary functions of interest that are disassembled from the program file. In another illustrative example each extracted binary function is subjected to a smart hash technique in which all references to memory addresses are masked out and the resulting instruction stream is hashed and used as a look up or an update into the database. The functions and associated metadata are stored in the database in a file agnostic manner so that multiple remote analysts may save and retrieve function information to and from the database server for matching functions across multiple different files and in real time.

The database of functions and associated metadata advantageously enables functions to be cross referenced so that comparison of functions can be scaled across multiple files i.e. on a one to many or a many to many basis . Persisted analyses of functions is thereby enabled as well as clustering to determine a probable functionality of an unknown file based on known functionality of other files that are contained in the database. In addition the database is usable to assist in automated malware signature generation and malware signature false positive detection since analysts are provided with the ability to mark functions as either suitable or not suitable as a signature hash object i.e. whether the signed code is suitable for the signature s hash range .

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The binary function database supported by the database server is arranged to be accessed as a resource that is accessible by a number of users such as malware analysts and typically many users that may work for the same or different organizations. Several such users are provided with access as shown in using client computers . . . that are each configured with an SQL Server client application . . . that connects over a network to the database server and SQL server .

The SQL Server client application is arranged in this illustrative example with both database logic and code to display output to the user. SQL Server client application is thus said to be a thick client. Each client computer is also arranged with a binary function abstraction module . . . that generates binary function abstractions from binary files containing malware for update or lookup into the database as described in more detail in the text accompanying below. In some implementations of the present binary function databases system the SQL server client and binary function abstraction module are implemented using standalone software applications. In other implementations the SQL Server client may be embedded into the binary function abstraction module. SQL Server applications also can optionally be run on the same computer as SQL Server as shown in where an SQL server client and binary function abstraction module communicate with SQL Server typically using a Microsoft Windows Interprocess Communications Component IPC such as shared memory instead of a network connection.

The client server environment is also arranged to support a multi tiered client server architecture that is particularly appropriate to Internet supported applications of the present binary function database system. In this multi tiered architecture the client application logic is separated into two locations i.e. tiers a a thin client that is run on a malware analyst s local computer i.e. one of the Internet clients in which focuses on displaying results and b the database logic that runs in a server application such as a server application or Internet information server on an Internet server . The thin client requests functions from the server application which is itself a multithreaded application capable of working with many concurrent users. The server application opens connections to the database server over a network. Each of the Internet clients is also typically arranged with a binary function abstraction module not shown .

While a client server environment using a central database server and a multiplicity of distributed clients is preferable in many applications of the present binary function database system some applications may be more appropriately supported by an arrangement in which a stand alone database is stored locally on a desktop computer as shown in . Here a single instance of SQL Server is utilized even in cases as with this illustrative example when more than one database is supported by the desktop computer in addition to a binary function database . Client applications connect to the SQL Server in much the same way as they do in the client server environment shown in and described in the accompanying text. A binary function abstraction component is also supported by the desktop computer .

Functional modules include a disassembly engine a binary function parsing module and a binary function abstraction module that arranged in this illustrative example as objects in a binary function abstraction component . SQL Server modules i.e. SQL Server and SQL Server client application operate to insert robust abstractions of functions contained in the binary file into the binary function database or use such abstractions as lookups in the database to find a matching function. This update or lookup is performed using a database module in . Note that the arrangement of functional modules may vary from that shown depending on the requirements of a specific application of the binary function database system. For example as noted above various functionalities provided by the SQL server modules may be embedded with those provided by the binary function abstraction component .

At block the selected binary file is disassembled by the disassembly engine into an assembly language instruction stream. The assembly language is parsed as shown at block by the binary function parsing module to locate each of the functions contained in the assembly language instructions.

At block one of several alternative techniques or a combination of techniques is applied by the binary function abstraction module to a function parsed from the assembly language instructions to create a binary function abstraction. Utilization of the abstraction enables heuristic based function matching against data associated with other such functions in the binary function database .

In one illustrative example a smart hash technique is utilized which may perform well in many applications. With this technique all references to memory addresses used by the function are identified and then masked out i.e. removed . These memory references may include absolute memory references in the instructions and or relative inter function memory references. The masking is intended to address the likelihood that memory addressing will differ with different compilations of the program containing the function of interest. That is a compiler and linker on one computer will arrange memory differently when compiling the source code for the program than the compiler and linker on another computer. The masked out instructions are converted to binary and then hashed using a conventional hash algorithm such as CRC32 MD5 SHA 1 etc. to thereby generate the abstracted binary function. Application of the hash algorithm reduces the size of the function s instruction stream and generally makes the binary function database system more performant.

In alternative implementations other techniques or combinations of techniques may be used to generate the binary function abstraction and also be utilized as function matching heuristics applied to lookups in the binary function database. These techniques include for example using a string references b API application programming interface references c constant references d caller and callee function IDs e small prime products of opcode operational code f a shortest path to function exit g stack frame size g percentage of callers and h emulation results.

At block metadata is collected by the binary function abstraction module that is associated with the binary function abstraction. shows an illustrative set of fields for defining metadata that is associated with a given binary function abstraction. The metadata may typically be used as a data source for a variety of manual and automated malware analyses but is not required to be used in all applications of the present binary function database system.

The metadata in this illustrative example includes metadata that is generated by a user such as a malware analyst and also metadata that is automatically generated such as the user s name in field and identification of the program file from which the function came in field such file identification field may also be manually populated in an alternative implementation . It is emphasized that the particular metadata fields used and the combination of user generated and automatically generated metadata can vary from those shown in and may be adapted in general to meet the particular needs of a specific application.

Metadata field provides for a function name defined by the malware analyst that describes what the function does. Detailed comments associated with the function are populated in metadata field . Stack variable names are defined by the analyst using metadata field . The analyst may also identify whether a given function came from a clean file or from a malware file in metadata field .

Metadata field provides for the analyst to mark a function s library code as suitable or not for signature hash range. As noted above such metadata may be used to support both manual and automated analyses. Here metadata field may be used to assist automated malware signature generation and or automated detection of instances of false positive identification of malware in clean code.

Returning back to at block the malware analyst performs a database lookup for a stored function that matches the function of interest. The lookup is performed utilizing the database module that generally applies function matching heuristics to allow for minor variations in an actual function implementation while still enabling matching to the same stored function in the database or to a stored function with a given level of confidence. As noted above in this particular illustrative example a smart hash is utilized to generate the binary function abstraction. Accordingly the lookup will entail searching the binary function database for a matching hash value.

At block if a matching function is located all metadata associated with the matching function is returned to the analyst by the SQL Server components to thus identify all of the various program files that contain the function of interest. The binary function database is then updated as indicated at block with the new binary function abstraction of the function of interest and the associated metadata. The illustrative method ends at block .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

