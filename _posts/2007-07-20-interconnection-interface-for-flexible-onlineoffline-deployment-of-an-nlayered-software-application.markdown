---

title: Interconnection interface for flexible online/offline deployment of an n-layered software application
abstract: A method is disclosed for producing a software application with at least two layers, including a processing layer and a process layer, wherein each layer is encapsulated and hence platform-independent in its execution, the encapsulated layers communicating via an application programming interface. A system is also disclosed for producing an application including a flexible interconnection interface between encapsulated layers. By virtue of the implementation of an additional configurable interconnection interface in the application programming interface between two encapsulated application layers, the architecture layering can be retained regardless of the respective deployment, and only the communication profiles of the interconnection interfaces need be adapted to the deployment. This has the advantage, in at least one embodiment, that it is not necessary to produce and update different source code masters for the different deployments, and instead only one single architecture layering of the application need be created and maintained.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719778&OS=08719778&RS=08719778
owner: Siemens Aktiengesellschaft
number: 08719778
owner_city: Munich
owner_country: DE
publication_date: 20070720
---
The present application hereby claims priority under 35 U.S.C. 119 on German patent application number DE 10 2006 033 863.4 filed Jul. 21 2006 the entire contents of which is hereby incorporated herein by reference.

Embodiments of the invention generally relate to a method for producing an n layered i.e. at least two layered software application including a processing layer and a process layer. For example they may relate to one wherein each layer is encapsulated and hence platform independent in terms of execution and the encapsulated layers communicate with each other via an application programming interface. Embodiments of the invention also generally relate to a system for producing an application including a flexible interconnection interface within an application programming interface between encapsulated layers.

The creation of software applications requires a high degree of programming knowledge and experience on the part of the developer during the design of the software architecture. An application is usually created almost exclusively monolithically and hence as an application block which must always be changed as a whole when changes are required e.g. in the context of software updates. This entails a significant cost when the application is created and when it is maintained. Furthermore these monolithic systems are relatively susceptible to error.

In addition to applications for desktop use in which the application layers can be executed exclusively on a shared computer web applications also exist in which the application layers are designed for running on a client server structure i.e. on a plurality of computers. Web applications then require the client server structure however and cannot therefore be used without a server.

In conventional application systems provision is made for an application to access individual libraries in the form of a dynamic or static link and to be executed within an execution file in the form of an executable. Within this concept the applications rely on a multiplicity of different services components and data which are made available to the relevant calling application in different hierarchical layer levels of the underlying software architecture. These services are usually implemented directly in the source code of an application wherein the services and components sometimes run on different platforms such as e.g. Windows based or Linux based operating systems and on different runtime locations within a computer network such as e.g. desktop computers or web based server client configurations. Subsequent adaptation or modification of the application to suit changed platform environments and or other runtime locations also known collectively as deployment is not possible due to the respectively different software architecture for the various deployments.

When creating a software architecture for an application it is therefore problematic that in the event of a change or adaptation to other working environments or to other deployments it has been necessary until now to adapt the underlying software architecture which usually requires extensive changes. As part of this the developer must above all specify the arrangement of the architecture layers of the application on the relevant computer structure of the different deployments anew in each case. In particular a new software architecture for the application must be defined and a new source code must be created and complied in an execution file in the form of an executable. These measures entail a significant cost in terms of time and resources for the creation of the respective applications and currently require the parallel development of different applications having varying computer application software architectures for different deployments.

For this reason so called frameworks are provided as support environments for developers the frameworks frequently encapsulating the individual layers of a software application within a generic runtime environment. An application layer which embedded in a generic runtime environment can be run individually and independently of platform and or runtime location is designated as encapsulated.

The .NET framework of the Microsoft Corporation is an important framework. This framework offers the possibility of utilizing all variety of programming languages such as C Visual Basic.NET C CLI or JScript.NET as a basis for programming an n layered application. Irrespective of the type of programming language that is utilized the application and or relevant architecture layer of the application is converted into an intermediate language Microsoft Intermediate Language MSIL . The application which is thus programmed in the intermediate language is then compiled and converted into an execution file.

The application programming interfaces API which are required between the individual layers of the application are very important in this case. A distinction is made between function oriented interface oriented and protocol oriented application programming interfaces. Unlike function oriented and interface oriented application programming interfaces protocol oriented application programming interfaces are independent of the operating system of the platform and independent of the type of application layers which must be connected. An application programming interface which has been defined once between two encapsulated layers cannot currently be changed however and therefore a separate quasi monolithic software application is required in each case with reference to the respective deployments.

DE 698 19 188 T2 therefore describes a program interface converter for computers using a plurality of environments. According to the invention claimed therein a utility program automatically produces and updates code modules for translating application programming interfaces which have been written for one platform in order that they can be executed correctly on another platform. The utility program which is executed for each new development step of an operating system or other software environment works with a range of templates for producing the source code for the translation modules on the basis of the functions which are executed by the application programming interfaces.

DE 699 08 121 T2 likewise describes an application programming interface in an operating system. The invention therein specifies a system containing a set of application programming interfaces for a number of software modules and software components for environments having limited resources. An example of an environment having limited resources is an integral system comprising a multiplicity of consumer devices and specialized industrial controllers including hand held or palm size PCs.

All of the methods disclosed in the prior art for producing an n layered application by way of a framework have the disadvantage that although the application programming interfaces can be converted with reference to the required platforms and runtime locations it has not been possible until now to utilize the interaction of the layers via the respective intermediate application programming interfaces the interaction having been determined for one deployment for another deployment. Consequently parallel developments of source code masters are required for the different deployments.

In at least one embodiment the present invention therefore addresses the problem of allowing n layered applications to be developed centrally independently of the underlying software architecture with reference to the platforms and runtime locations which are utilized in a computer network.

According to at least one embodiment of the invention the application programming interface includes a flexible interconnection interface and the flexible interconnection interface depending on the underlying platforms of the individual encapsulated layers provides the communication profiles which are required for the communication via the application programming interface between the encapsulated layers. As a result the underlying software architecture of the application can be utilized independently of the respective deployment. Only the interconnection interfaces which are integrated in the application programming interfaces are adapted to the respective deployment.

Within the meaning of embodiments of the invention encapsulated layers of an application are hierarchically different levels of a software architecture the levels being platform independent and independent of the runtime location within a computer network. The respective encapsulated layers run in particular within a generic runtime environment and interact with each other via the interfaces of the respective generic runtime environment. In the context of different distributions deployments of the individual encapsulated layers on various runtime locations within a connectable computer network the complete application i.e. containing all application layers can be distributed either on a single computer in desktop use or offline use as a so called fat client or over various computers within a connectable computer network online use as a smart client rich thin client thin HTML client or as a web service. In a further deployment variant known as rich client the application can be operated either in offline use or in online use.

By virtue of the method according to at least one embodiment of the invention each application which is based on the framework can be operated in the above described deployments automatically without the application developer having to develop and maintain various source code masters for the respective software architectures. As a result an application developer only needs to prepare the fundamental layered architecture of an application once thereby significantly reducing the development times for the application. At the same time this allows centralized software development and therefore different software architectures with alternative source code masters do not have to be held and updated for the different deployments.

The utilization of the framework in conjunction with the implementation of a respectively flexible communication layer within the application programming interface ensures that the application including encapsulated layers can run both in the desktop mode of a fat client or also in the web mode of a thin HTML client for example. By way of the respective application programming interfaces with a flexible communication layer the flexible interconnection interface allows data processing and access by the application to the respective services and or components within the layers such that the application remains unaware of its current working environment.

In an advantageous embodiment of the method it is possible for the encapsulated layers to run on different interconnectable runtime locations within a computer network wherein the application programming interfaces provide the necessary communication profiles between the encapsulated layers and monitor the data communication between the data interfaces of the connectable computer network.

The services and or components and or data which are implemented in the encapsulated layers are preferably designed in relation to a standardized application programming interface and or a standardized data interface. As a result of utilizing consistent standards for creating the relevant services and components within the encapsulated layers the developer does not have to invest any additional effort in the data processing data transfer or the management of the services beyond the layer boundaries. Thus the different encapsulated layers can be programmed in various programming languages yet the respective services within the encapsulated layers can nonetheless be invoked without additional intermediate processes.

It is also considered advantageous that standardized services are implemented in the encapsulated layers and can be invoked independently in each case.

In an advantageous embodiment of the method when specifying the deployment in terms of the platforms and the relevant runtime locations within the computer network the communication profiles which are required in each case for the communication between the individual encapsulated layers are selected automatically. This assists the application developer doing the work and at the same time ensures that the respectively required communication profile of the flexible interconnection interface is selected as part of the application programming interface between two encapsulated layers in each case.

The communication profiles of the application programming interface and or the communication profiles of the data interfaces are implemented dynamically depending on the platforms and runtime locations within the computer network of the encapsulated layers. In particular using XML or DLL configuration files for the configuration of the flexible interconnection interface it is possible to compile the application in a manner which is platform independent and independent of the deployment. Only when the application is used on the respective deployment are the respectively required communication profiles implemented by way of the XML or DLL configuration file for the flexible interconnection interfaces in the application programming interfaces between the encapsulated layers. This ensures that the application can be run on each deployment without further compilation or conversion.

According to at least one embodiment of the invention as its lowest layer the architecture of the application includes a service layer for providing local and or external services and or data for a framework a data access layer for the access to data and for providing local and or external data services and communication services a processing layer for providing processing services and processing components a process layer for providing a business logic and a service bus and as its highest hierarchical layer a presentation layer for presenting the data and presentation components.

In an advantageous embodiment of the method the application controls the access to the individual encapsulated layers themselves and can be run in a platform independent manner as an encapsulated application independently of the respective deployment underlying the software architecture. The encapsulated application can run and is therefore independent of the respective deployment for the encapsulated layers in a generic runtime environment.

Either the encapsulated application can be run in a generic runtime environment or the encapsulated application is caused to execute in a generic runtime environment which runs in a web server. The interaction of the application with the generic runtime environment remains the same in each deployment however. As a result of this the application does not have to be changed in the context of various deployments and can be run unchanged both in the desktop deployment and in the web deployment. The design of the encapsulated layers e.g. the presentation layer does not change when the application is switched to another deployment assuming the software architecture of the application remains the same. Therefore the application architecture and the programming language which is utilized likewise remain unchanged. Specifically the encapsulated layers communicate in each case via an integrated flexible interconnection interface of the respective intermediate application programming interface. If the application is in desktop use a specific implementation of the communication profiles which is suitable for the desktop use is applied for the flexible interconnection interface. Because the communication between the encapsulated layers always takes place via respective intermediate interconnection interfaces it is possible to substitute the implementation of the flexible interconnection interfaces on the framework side without having to change or recompile the application for this purpose.

The cost of the development and maintenance of the application is thereby reduced. By virtue of this associated functionality the term zero admin deployment in this context signifies that all administrative costs for the respective deployments of the application are avoided. The parallel creation and maintenance of source code masters for different deployments are therefore completely separate from the respective application.

It is also advantageous that the creation of the software architecture of the respectively encapsulated layers takes place automatically on the basis of the predetermined platforms and or runtime locations within a connectable computer network. The method supports the developer not only in the selection of the respectively required interconnection interfaces within the application programming interfaces between the encapsulated layers but also in the arrangement and implementation of the encapsulated layers with regard to the anticipated deployment of the computer application

According to at least one embodiment of the invention a system is provided for producing an n layered software application wherein a flexible interconnection interface above the framework is configured within an application programming interface in some cases and depending on the underlying platform of the individual encapsulated layers the flexible interconnection interface provides the necessary communication profiles for the communication via the application programming interface between the encapsulated layers.

In an advantageous embodiment of the system the application is encapsulated and can therefore be run on a generic runtime environment. Irrespective of the system configuration of the platforms for the respective encapsulated layers the application which runs is likewise independent and does not need to be changed in the case of different deployments.

At least one embodiment of the present invention can be realized in the form of hardware software or a combination of hardware and software. Any type of system or any other device which is set up for executing the method according to at least one embodiment of the invention is suitable for this. A typical combination of hardware and software might be a universal computer system with a computer program that is loaded into and executed in the universal computer system and controls the computer system such that an application which has been created in accordance with the described method is executed. In a further combination of hardware and software e.g. a processing layer for image processing can be arranged in a special image processing hardware while the remaining layers are executed on conventional PC hardware. At least one embodiment of the present invention can also be integrated in a computer program product which comprises all features enabling the realization of the computer based method described here and which is capable of executing this method after it has been loaded into a computer system.

In the present context the terms computer program segment computer program and computer application are understood to mean any expression in any computer language code or notation of a set of instructions which enable a computer system to perform data processing and thus to execute a specific function. The computer program segment computer program or computer application can be run either directly or following conversion into another language code or notation or by way of representation in another material form on the computer system.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the present invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms includes and or including when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Spatially relative terms such as beneath below lower above upper and the like may be used herein for ease of description to describe one element or feature s relationship to another element s or feature s as illustrated in the figures. It will be understood that the spatially relative terms are intended to encompass different orientations of the device in use or operation in addition to the orientation depicted in the figures. For example if the device in the figures is turned over elements described as below or beneath other elements or features would then be oriented above the other elements or features. Thus term such as below can encompass both an orientation of above and below. The device may be otherwise oriented rotated 90 degrees or at other orientations and the spatially relative descriptors used herein are interpreted accordingly.

Although the terms first second etc. may be used herein to describe various elements components regions layers and or sections it should be understood that these elements components regions layers and or sections should not be limited by these terms. These terms are used only to distinguish one element component region layer or section from another region layer or section. Thus a first element component region layer or section discussed below could be termed a second element component region layer or section without departing from the teachings of the present invention.

In describing example embodiments illustrated in the drawings specific terminology is employed for the sake of clarity. However the disclosure of this patent specification is not intended to be limited to the specific terminology so selected and it is to be understood that each specific element includes all technical equivalents that operate in a similar manner.

Referencing the drawings wherein like reference numerals designate identical or corresponding parts throughout the several views example embodiments of the present patent application are hereafter described. Like numbers refer to like elements throughout. As used herein the terms and or and at least one of include any and all combinations of one or more of the associated listed items.

The figure shows a five layered software application wherein the software architecture has a lowermost service layer this being followed by a data access layer then by a processing layer then by a process layer and finally a presentation layer . Application programming interfaces each including an integrated interconnection interface are respectively located between these layers which are encapsulated at least partially by way of a framework. These interconnection interfaces of the application programming interfaces are flexible thereby allowing a software architecture which by way of configuration can be used for all variety of deployments i.e. for all variety of distributions of the layers on platforms and runtime locations within a connectable computer network without any source code adaptation of the interconnection interfaces being required for this purpose. Only the communication profiles of the interconnection interfaces which are integrated in the application programming interfaces need be adapted to the deployment concerned. The adaptation of the interconnection interfaces can take place either in the context of a compilation or by way of dynamic linking to files of a database e.g. as XML or DLL configuration files.

The relevant services data or components of the encapsulated layer concerned can be called either by the layers or by the application itself. The interaction via application programming interfaces each including an integrated interconnection interface is symbolized by arrows in the drawing.

In this case the communication profiles must be designed such that the services and components within an application can communicate with each other across the encapsulated layers . In this respect the communication profiles must take into consideration and depending on the deployment specify and monitor client server request response protocols event based data processing general job management and problems relating to data communication such as synchronous data exchange formats of data protocols and monitoring of the data communication and message formats.

The figure shows the software architecture of the application in the case of a fat client deployment. The software architecture does not need to be adapted for this implementation on a single computer. The communication profiles of the integrated interconnection interfaces of the application programming interfaces allow desktop use of the application . In this case the encapsulated layers run within their own runtime environment in each case such that different programming languages of the encapsulated layers concerned can also be used in this type of configuration.

By contrast the figure shows a rich thin deployment. The service layer the following data access layer and the processing layer of the application run on a first computer as a server . The process layer and the presentation layer run on a client wherein data transfer and access to the relevant services data and components of these layers take place via a data interface between the processing layer and the process layer possibly protected by way of a firewall.

Once again the underlying software architecture does not need to be changed for either the rich thin client deployment or for the fat client deployment since only the communication profiles of the interconnection interfaces of the application programming interfaces need to be adapted to the deployment concerned.

The above described deployment variants fat client and thin rich client are compared with further deployment variants in specifically rich client smart client and thin client . It is also evident from that these further deployment variants are derived from the previously described examples by transferring one or more layers to or individual parts of these layers to between server and client

In the case of the thin client only a front end of the presentation layer is arranged on the client in the manner of a web interface. The remaining parts of the presentation layer and the remaining layers to are arranged on one or more servers . In this case the presentation layer implemented in particular in HTML technology. In particular in this case the server is in turn divided into a web server which provides a user interface and exports to the client an application server which contains the layers to and a data server which contains the service layer .

In the case of the rich client however the layers to are arranged on the client side. Only the service layer is arranged on one or more servers in particular a data cluster. In the rich client deployment the application can be used at least to a large extent in offline use. In order to utilize specific services e.g. for loading image data the client can be connected to the server

In the case of the smart client components of the processing layer and the data access layer are distributed on the client and other components of these layers and are distributed on one or more servers . In the smart client deployment and unlike the rich client the application cannot be operated without a permanent network connection with the server . However the division of the layers and between client and server allows the performance of the application to be optimized particularly efficiently by adapting to the computing and storage capacity of client and server and to the available data transmission capacity of the network.

According to at least one embodiment of the invention the application can be operated on the basis of a single source code master in all illustrated deployment variants. The individual layers to of the application can also have different versions in this case. The application merely has to be configured accordingly in order to adapt to a specific deployment in this case. Furthermore in a deployment which is likewise illustrated in the service layer and the process layer can also be operated in isolation as a pure web service .

Further elements and or features of different example embodiments may be combined with each other and or substituted for each other within the scope of this disclosure and appended claims.

Still further any one of the above described and other example features of the present invention may be embodied in the form of an apparatus method system computer program and computer program product. For example of the aforementioned methods may be embodied in the form of a system or device including but not limited to any of the structure for performing the methodology illustrated in the drawings.

Even further any of the aforementioned methods may be embodied in the form of a program. The program may be stored on a computer readable media and is adapted to perform any one of the aforementioned methods when run on a computer device a device including a processor . Thus the storage medium or computer readable medium is adapted to store information and is adapted to interact with a data processing facility or computer device to perform the method of any of the above mentioned embodiments.

The storage medium may be a built in medium installed inside a computer device main body or a removable medium arranged so that it can be separated from the computer device main body. Examples of the built in medium include but are not limited to rewriteable non volatile memories such as ROMs and flash memories and hard disks. Examples of the removable medium include but are not limited to optical storage media such as CD ROMs and DVDs magneto optical storage media such as MOs magnetism storage media including but not limited to floppy disks trademark cassette tapes and removable hard disks media with a built in rewriteable non volatile memory including but not limited to memory cards and media with a built in ROM including but not limited to ROM cassettes etc. Furthermore various information regarding stored images for example property information may be stored in any other form or it may be provided in other ways.

Example embodiments being thus described it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as a departure from the spirit and scope of the present invention and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims.

