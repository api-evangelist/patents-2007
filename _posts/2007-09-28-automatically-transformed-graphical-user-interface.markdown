---

title: Automatically transformed graphical user interface
abstract: Automatically transformed graphical user interface techniques and implementations are described, including displaying a graphical user interface in a first position, the graphical user interface having a composition having an interface element, detecting an input to change the composition, and transforming the graphical user interface in response to the input comprising adjusting at least one edge of the graphical user interface and orienting the graphical user interface to a second position relative to a point in a display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08726190&OS=08726190&RS=08726190
owner: Adobe Systems Incorporated
number: 08726190
owner_city: San Jose
owner_country: US
publication_date: 20070928
---
Embodiments relate generally to software and user interfaces. More specifically automatically transformed graphical user interface techniques are described.

Conventional graphical user interfaces have a number of limitations for applications that require graphical user interfaces of variable sizes and compositions during runtime. For example some applications initially require a graphical user interface GUI of certain size and composition then at some points during runtime require a GUI of different size composition or both. For instance a typical database application starts up requiring a few interface elements for a user to provide query input. Conventional techniques typically deploy a GUI with additional elements to present query results even though the additional elements are not used to provide query input. At some points during runtime some applications require a smaller GUI or fewer GUI elements than those required initially. For example a video media player does not require a media window after playing a video. Conventional techniques typically do not adjust a GUI based on usage.

Conventional user interface techniques typically execute with a static GUI which is fixed in size position and orientation at startup. At some point during runtime the static GUI becomes too small or too large for a runtime condition which typically requires more or fewer interface elements. Conventionally users manually resize reposition or reorient the GUI to cater to runtime conditions. The need to manually manipulate a GUI discourages users from using or keeping an application running.

Another conventional technique is to provide additional windows e.g. popup windows when additional interface elements are needed. However there are problems associated with popup windows. One problem is that a display screen becomes visually cluttered with popup windows. Also problematic is a new popup window typically disrupts the user experience by visually interrupting a user s attention and requiring user interaction or intervention e.g. clicking on one or more buttons in the popup window to close it before allowing a user to interact with an application s initial or main window or previously popped up windows. For example if an application s main window provides five popup windows in succession a user must interact with all five popup windows before being able to interact with the application s main window.

Thus an automatically transformed graphical user interface without the limitations of conventional techniques is needed.

Various embodiments or examples may be implemented in numerous ways including as a system a process an apparatus a user interface or a series of program instructions on a computer readable medium such as a computer readable storage medium or a computer network where the program instructions are sent over optical electronic or wireless communication links. In general operations of disclosed processes may be performed in an arbitrary order unless otherwise provided in the claims.

A detailed description of one or more examples is provided below along with accompanying figures. The detailed description is provided in connection with such examples but is not limited to any particular example. The scope is limited only by the claims and numerous alternatives modifications and equivalents are encompassed. Numerous specific details are set forth in the following description in order to provide a thorough understanding. These details are provided as examples and the described techniques may be practiced according to the claims without some or all of the accompanying details. For clarity technical material that is known in the technical fields related to the examples has not been described in detail to avoid unnecessarily obscuring the description.

In some examples the described techniques may be implemented as a computer program or application application or as a plug in module or sub component of another application. The described techniques may be implemented as software hardware firmware circuitry or a combination thereof. If implemented as software the described techniques may be implemented using various types of programming development scripting or formatting languages frameworks syntax applications protocols objects or techniques including C Objective C C C Adobe Integrated Runtime Adobe AIR ActionScript Flex Lingo Java Javascript Ajax Perl COBOL Fortran ADA XML MXML HTML DHTML XHTML HTTP XMPP and others. Design publishing and other types of applications such as Dreamweaver Shockwave Flash and Fireworks may also be used to implement the described techniques. The described techniques may be varied and are not limited to the examples or descriptions provided.

Various examples of automatically transformed i.e. resized and repositioned graphical user interfaces are described including transforming a graphical user interface in response to a runtime activity event or an input to change the composition i.e. interface elements that are implemented as part of a graphical user interface of a graphical user interface. A graphical user interface may be transformed from a two dimensional arrangement configuration or structure arrangement to a three dimensional arrangement or from a three dimensional arrangement to a two dimensional arrangement. Devices computing systems methods and programming instructions that implement various techniques for automatically transformed graphical user interface are also described. The techniques may be applied in any device or system that uses a screen or display to render and display a graphical user interface. Various techniques for automatically transformed graphical user interface may be selectively applied. In other examples various techniques procedures processes or methods may be implemented differently and are not limited to the examples provided and described.

Here graphical user interface is presented in display and positioned a horizontal distance from the right border of display and a vertical distance from the bottom border of display . In some examples graphical user interface may be transformed into another user interface of any composition form size position orientation rotation or depth. As used herein the term composition with respect to user interface may refer to a set of one or more elements and their placements i.e. layout that collectively form and implement a user interface or graphical user interface. The set of elements may include interface elements and non interface element or static element. An interface element may be any element configured to receive input output or a combination thereof e.g. any control field bar widget button window text box selection list menu or others . A non interface element may be static or ornamental in nature e.g. separators lines shapes or decorative images .

Arrow shows one possible expansion direction for transforming graphical user interface into graphical user interface of or graphical user interface of . In other examples graphical user interface may also be transformed from other layouts or user interface shapes e.g. an icon . Graphical user interface and the above described features may be implemented differently and are not limited to the examples provided.

In some examples icon may be positioned anywhere in a display transformed from any position or transformed to any position such as near any corner near any border or somewhere near the center of a display e.g. display or . The distance from a border e.g. horizontal distance or vertical distance may be a distance for example set by an operating system or application. In some examples the distance from a border may be resulted from a user s action. For instance an operating system an application or user may place i.e. move using an input device e.g. mouse keyboard touchpad or the like a user interface e.g. graphical user interface of an application in a position of a display resulting in horizontal distance and vertical distance .

In some examples icon may be transformed into graphical user interface by expanding i.e. resizing a left edge and top edge of icon as indicated by arrows and respectively while keeping its bottom and right edges stationary. Thus horizontal distance and vertical distance are maintained. In other examples icon may be transformed by moving upward and to the left to a new position and then expanding the right and bottom edges of icon to maintain horizontal distance and vertical distance respectively.

As shown collectively in for example graphical user interface may maintain one or more aspects of icon . For example graphical user interface may maintain the same or substantially the same horizontal distance vertical distance or both. In some examples graphical user interface may be realigned or reoriented to dimensions of the originally presented i.e. displayed graphical user interface prior to transformation.

In response to a runtime activity event or an input to change a composition of an application s user interface e.g. graphical user interface or icon an application may automatically semi automatically or manually transform graphical user interface into another form or layout. A runtime activity event may be any event associated with the execution of an application such as interacting with a user an operating system or another application. In some examples a runtime activity event may occur when an application detects an input e.g. from a user activating an interface element enters a state requesting input e.g. from a user s or presents output or data to a user.

In some examples an input to change a user interface composition may occur when an application enters a state requesting input e.g. requesting parameters from a user to query a directory . For example an application may invoke graphical user interface and render a composition of various user interface elements e.g. text box selection box radio buttons drop down lists and others . An input to change a user interface composition may also be used to remove e.g. removing a video panel after showing a video or modify e.g. resize an interface element an interface element.

In some examples a period of inactivity may trigger a change in the composition of an application s user interface. For example changing the composition of graphical user interface to icon may be performed if inactivity is observed for a pre determined time interval. In other examples transformations of graphical user interface may be invoked differently.

In some examples an application may automatically transform graphical user interface relative to one or more parameters e.g. composition size position orientation rotation or depth e.g. three dimensional . For example the composition of graphical user interface may be changed e.g. adding removing or changing interface elements . In some examples graphical user interface may be resized e.g. expanded or collapsed relative to one or more or its edges. Further graphical user interface may be resized to the size of an icon or smaller. Alternatively the size of graphical user interface may be increased to the size of display or larger i.e. using one or more parts of graphical user interface not shown beyond display . In other examples graphical user interface may be positioned or repositioned anywhere in display . In still other examples graphical user interface may be oriented i.e. positioned relative to one or more edges or points in a display. For example orienting graphical user interface may be performed to maintain vertical distance horizontal distance or both. As another example graphical user interface may be rotated e.g. from a horizontal shape to vertical shape or to various degrees e.g. 45 90 180 270 and others . An application may also transform i.e. change graphical user interface from a two dimensional arrangement to a three dimensional arrangement or from a two dimensional arrangement to a three dimensional arrangement.

As shown in graphical user interface is shown with a composition of interface elements and . A runtime activity event may occur for example when a user activates one of interface elements or . For example graphical user interface may be a user interface for a directory application. Here interface element may be an input interface element. A user may provide an input data entry of R D using interface element to query a directory application not shown . To provide a better understanding of various techniques for automatically transformed user interface various examples are described with an exemplary application e.g. a directory application . The described techniques may be varied and are not limited to the type configuration or implementation of an application or the examples and descriptions provided. Further the techniques described herein may be implemented with other applications e.g. media multi media image management and file management applications .

In some examples a query with input data entry of R D produces for example output results that may be displayed. Query results may be presented in for example one or more interface elements e.g. text panel drop down list . Here the application encounters an input e.g. request to change the composition i.e. interface elements of graphical user interface to include one or more interface elements configured to present query results or output.

To add remove or change an interface element an application e.g. a directory application may transform a graphical user interface e.g. graphical user interface to include for example a dropdown or drawer interface element for displaying query results. In some examples graphical user interface may be transformed i.e. expanded and resized upward as indicated by arrow to open up enough space for a dropdown interface element. In some examples graphical user interface may be transformed by first repositioning or shifting away from the bottom border of display to provide enough space for a dropdown interface element. Then graphical user interface may be oriented downward to show a dropdown list with the query results and to maintain vertical distance . The transformed graphical user interface is shown for example in . In other examples display and the above described elements may be implemented differently and are not limited to the descriptions provided.

In some examples the transformation of a graphical user interface e.g. graphical user interface may be shown by animation i.e. showing movements and intermediate state changes from a pre transformed graphical user interface to a transformed graphical user interface . For example transforming graphical user interface to graphical user interface may be animated by showing graphical user interface moving upward to stop at the position shown in display . A drawer or dropdown interface element is shown extending downwards stopping to maintain vertical distance . Animating the transformation may provide a crucial user interface function by allowing users to follow the movements and changes of a graphical user interface and keeping users from being confused persistence of vision .

Here graphical user interface is shown with transparent window chrome exposing interface element without a window frame. Interface element expands outwards from graphical user interface . However the bottom border of interface element expands to vertical distance which is the same distance that graphical user interface was positioned away from the bottom border of display . Thus graphical user interface automatically repositions upwards in the direction of arrow to allow interface element to expand toward the bottom border of display but stopping to maintain vertical distance . In some examples a graphical user interface may include a window frame or chrome as shown in . With a window frame vertical distance may be maintained between the bottom border of display and interface element . In some examples gap between the bottom of interface element and the bottom border of display may be wider than vertical distance . By not using unnecessary screen space in a display more screen space is freed up for other applications. Further automatically transformed graphical user interface techniques may reduce or eliminate manual resizing or repositioning. Further an automatically transformed graphical user interface may be collapsed. For example graphical user interface or may be collapsed into one of its pre transformed forms e.g. graphical user interface or icon after for example a period of inactivity is detected.

In some examples graphical user interface or may be transformed into a larger graphical user interface. For example a user may select an entry e.g. R D Rm 200 John Doe from data shown in interface element . User selection of data may be a runtime activity event. Graphical user interface or may expand for example in the direction of arrow into another form or layout such as that shown in or B. In other examples display and the above described elements may be implemented differently and are not limited to the examples shown and described.

Not all enumerated features and properties pertaining to user interfaces graphical user interfaces automatically formatted graphical user interfaces interface elements user interface compositions or runtime activity events are included in the examples provided. In other examples there may be additional features and properties. For example there may be selection boxes toggle buttons other input or output interfaces or management user interfaces such as locking viewing printing editing and other operations. The above described structures features operations techniques procedures and other aspects may be varied in design implementation and function and are not limited to the descriptions provided.

In some examples the application which may be any application that utilizes a graphical user interface detects an input to change a graphical user interface composition . For example adding another interface element removing an existing interface element or changing an existing interface element may be performed. In other examples an input e.g. request to change a graphical user interface s composition may be performed when a period of inactivity is detected.

As an example when an input requesting a change to a graphical user interface composition is received an application may transform its graphical user interface to accommodate the new composition . The transformation may be performed by moving resizing expanding collapsing repositioning orienting or otherwise modifying the form or layout of an existing graphical user interface. In some examples a transformation from a two dimensional arrangement to a three dimensional arrangement or from a two dimensional arrangement to a three dimensional arrangement. During transformation a graphical user interface may be reoriented with at least one edge along the same edge of a pre transformed graphical user interface e.g. to maintain horizontal distance vertical distance or both . In some examples the above described process may be varied in design order implementation or other aspects and is not limited to the examples shown and described.

In response to a runtime activity event an application may transform a graphical user interface to implement a new composition . The transformation may be performed by resizing expanding collapsing repositioning or reorienting an existing graphical user interface. In some examples a transformation may be from a two dimensional arrangement to a three dimensional arrangement or from a three dimensional arrangement to a two dimensional arrangement. In the process of transformation a graphical user interface may be resized reposition or reoriented with at least one edge corresponding to a fixed point in a display. The fixed point may be a point along a line that coincides with one edge of a pre transformed graphical user interface e.g. to maintain horizontal distance vertical distance or both . In some examples the above described process may be varied in design order implementation or other aspects and is not limited to the examples shown and described. Further process may be suitable for implementing as programming instructions or in an application such as the exemplary application described in .

In some examples when data is received by API module it may be transferred to one or more other modules e.g. logic module input module interface element manager GUI composition layout module rendering engine display output module repository and others using bus . For example after display output module has displayed one or more interface elements API module may receive from an input driver not shown input data for example to an interface element move a GUI or otherwise interact with a GUI. The input data may be transferred to input module for interpretation e.g. determining which interface element is being interfaced and transferred to display output module to display the interface element for example in an automatically transformed graphical user interface.

In some examples logic module may be configured to control the data flow through bus and direct the services provided by API module input module interface element manager GUI composition layout module rendering engine display output module and repository in order to implement various techniques for automatically transformed graphical user interface according to various embodiments. For example an employee directory may be stored in repository . In response to an input from an interface element logic module may direct interface element manager to add another interface element to present an employee record from repository direct rendering engine to render a transformed graphical user interface and direct display output module to display the employee record in an automatically transformed graphical user interface.

Application and the above described modules and elements may be varied in design function configuration or implementation and are not limited to the descriptions provided above.

According to some examples computer system performs specific operations by processor executing one or more sequences of one or more instructions stored in system memory . Such instructions may be read into system memory from another computer readable medium such as static storage device or disk drive . In some examples circuitry may be used in place of or in combination with software instructions for implementation.

The term computer readable medium refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory . Transmission media includes coaxial cables copper wire and fiber optics including wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge carrier wave or any other medium from which a computer can read.

In some examples execution of the sequences of instructions may be performed by a single computer system . According to some examples two or more computer systems coupled by communication link e.g. LAN PSTN or wireless network may perform the sequence of instructions in coordination with one another. Computer system may transmit and receive messages data and instructions including program i.e. application code through communication link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution.

The foregoing examples have been described in some detail for purposes of clarity of understanding but are not limited to the details provided. There are many alternative ways and techniques for implementation. The disclosed examples are illustrative and not restrictive.

