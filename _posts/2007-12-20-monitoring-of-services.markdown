---

title: Monitoring of services
abstract: Various systems, methods, and programs embodied on a computer readable medium that facilitate monitoring of services and servers. In one embodiment, an amount of data is stored in at least one storage device, the data being generated by a plurality of services executed on a plurality of servers, and by the servers upon which the services are executed. A plurality of monitoring applications are executed in a monitoring server, the monitoring applications being configured to perform a plurality of monitoring functions with respect to at least a portion of the data to facilitate an assessment of an operating condition of the services and the servers. An interface layer surrounds the monitoring applications in the monitoring server. The interface layer defines a messaging format that is used by devices external to the interface layer to interact with the monitoring applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09054942&OS=09054942&RS=09054942
owner: Amazon Technologies, Inc.
number: 09054942
owner_city: Seattle
owner_country: US
publication_date: 20071220
---
In the last 20 years many commercial entities have emerged that have a presence on the Internet. For example many merchants now sell their wares online. In some situations some merchants have become very large selling massive quantities of goods over the Internet as online purchasing becomes more popular. The systems employed by such merchants include vast server banks that run many applications. Such servers and systems may generate vast amounts of data that indicates the health of such systems. For example applications executed on different hosts may generate logs that document how the applications respond to each request they receive. Also logs are typically created by the servers themselves that document the operational health of the hardware running the various applications of the online merchants.

Current servers and applications operated by online entities generate log data and other monitoring data that is stored for future reference. In some cases the amount of log and monitoring data produced daily can be huge. For example for some online merchants it is not unheard of for the volume of log and monitoring data generated each day to be measured in the terabytes. Also such data is typically generated and stored separately for each host in a bank such as a server bank. As a consequence it can be very difficult to access such data in order to diagnose the health of servers and applications running on them in real time.

With reference to shown is an example of a monitoring network according to various embodiments of the present disclosure. The monitoring network includes a plurality of servers and one or more monitoring servers . In addition the monitoring network includes a plurality of clients . The monitoring network may include other devices not shown in . The servers monitoring servers and clients are in data communication with each other through a network . The network may comprise for example the Internet intranets wide area networks WANs local area networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

Each of the servers comprises for example a processor based system that is employed to execute one or more services . Also each of the servers may be employed to execute one or more monitoring agents . The services executed on the servers cause the generation of data . Similarly the operation of the servers may result in the creation of data when the services are executed thereon. Such data may be for example log data that records the occurrence of various events as can be appreciated. Alternatively the data may comprise metrics associated with various aspects of the operation of the services and the servers as will be described. For example such metrics may comprise measurements events information about components such as servers or other device or information about relationships between services and other relationships. In various embodiments the metrics may be obtained from the log data obtained from the services and server .

The services executed on the servers may be employed for various purposes such as to facilitate for example the operation of an online merchant search engine or other applications. To this end the servers may exist in vast server banks designed to handle a significant load of traffic on the network . In some large scale server banks the servers and services executed thereon may generate huge amounts of data . For example it is not unheard of that server banks that facilitate large scale online search engines can typically generate amounts of access logs each day measuring in the terabytes.

Unfortunately the logs and other data generated by such the servers and services in such large scale server banks are generated by individual hosts. As a consequence such log data typically cannot be easily accessed in real time to ascertain the overall health of the services and the servers . This can make it difficult to find the cause of various problems in a timely manner. Specifically personnel are often required to sift through logs from individual hosts to determine the cause of a particular problem. Also the distributed nature of log data and other data can make it difficult to be proactive to predict problems before they occur.

The one or more monitoring servers comprise for example processor based systems that are employed to execute monitoring service s . The monitoring service s store data to and access data from various monitoring data stores . The monitoring data stores may be accessed by the monitoring services through an appropriate network or the monitoring data stores may be directly coupled to the monitoring server such as through a data bus or other local interface.

Each of the clients may comprise for example a processor based system such as for example a computer system personal digital assistant or other system as can be appreciated. Various applications may be executed in the clients in order to interact with the services and the monitoring services including for example browsers automated monitoring applications or other applications.

During the operation of the services on the servers the data is generated as described above. In particular the services may generate the data during a normal course of operation. Specifically the services may generate logs such as access logs or various metrics that memorialize various events that occurred during the operation of the services . Also the servers may generate the data while executing the services . Such data may include logs or metrics indicating memory usage and other factors as can be appreciated. In some cases metrics may be included in the logs generated or may be calculated based upon the information in the logs. Metrics may also be calculated based upon a number of logs created over a predefined period of time. Also the metrics may comprise various measurements events and other data as described above. In this respect the metrics may also comprise alarms or alarm conditions service components and data indicative of relationships between services etc. In addition the data may comprise other data not described herein in detail.

Generally logs comprise unstructured data whereas metrics comprise structured data. In this respect the logs are unstructured in that they are stored in an unstructured format at an atomic level. Such data contrasts with metrics that are structured in that they have an enforced composition at the atomic level. For example metrics may comprise a value that represents an aggregation of information obtained from one or more logs over a period of time. Also a metric may comprise for example a count of how many of a type of log has been generated over a period of time.

The monitoring agents that are executed on the servers act to send the data through the network to the monitoring service s . The monitoring service s process the data and cause the data to be stored in one of the monitoring data stores . Also the monitoring service s perform various monitoring functions relative to the data stored in the monitoring data stores . To this end the monitoring service s perform various monitoring and diagnostic functions to ensure availability of the services executed on the servers as well as to ensure low latency and reliability with respect to the operation of the services .

The monitoring service s operate in isolation of the operation of the services and the servers . In this respect the monitoring functions that are performed by the monitoring service s are performed relative to the data stored in the monitoring data stores and do not depend upon interrupts or other messages from the services or the servers .

The monitoring service s also provide a monitoring output to the clients services or other devices or system components. For example the clients may interact with the monitoring service s to receive various outputs that give an assessment of the operating condition of the services and the servers . To this end the monitoring service s access the data stored in their respective monitoring data stores to generate outputs that provide an assessment of an operating condition of the services and the servers that generated the data in the first place. Also services may access the data as needed to perform various functions. The access to the data may be based upon user manipulation of an application such as a browser or other application. Alternatively the access to the data may be an automatic function that is preprogrammed as can be appreciated.

The output that provides the assessment of the operating condition of the services in the servers may include various graphs charts or other user interface components to depict various metrics logs or other information obtained from the data . Given that the monitoring service s operate on the data that is stored in the respective monitoring data stores the operation of the monitoring service s is independent of the operation of the services and the servers upon which the services are executed.

The monitoring service s act only on data that was received from the monitoring agents in the servers . Thus there is inherently a delay between the time when the data is generated and when the data is received by the monitoring service s . Thus there is a delay between when data is generated and when monitoring applications can perform monitoring functions with respect to the data. Where data is transmitted from the servers to the monitoring servers periodically within short intervals the delay may be minimized. As such the data may be accessed in near real time as can be appreciated.

Similarly a user of a given client a service or other system may receive an output that provides an assessment of the operating condition of the services and the servers by interacting with the respective monitoring service s . In this respect the clients or other systems do not interact directly with either the services or the servers . Also the services obtain needed information from the monitoring service rather than from the data that they generate and store locally during operation.

According to various embodiments the monitoring agents are configured to send data generated by the services and servers at predefined time intervals. These time intervals are specified so that the monitoring service s guarantee access to the data to provide for diagnostic capabilities within a predefined time of an occurrence of a given event or problem. Thus the frequency at which data is transmitted from a monitoring agent to the monitoring service s can depend for example upon a guaranteed access time to the data for various diagnostic capabilities as will be described.

The monitoring network provides at least one advantage in that the data is offloaded from the servers to the monitoring data stores . This relieves the servers of having to store the data . When various server banks of servers generate amounts of data measured in the terabytes each day this can be significant. In addition given that the monitoring service s are executed on the monitoring servers the servers are relieved of the burden of operating the monitoring service s locally which would reduce the capacity of the servers to execute the services .

Also if the data is stored locally on the servers then if the servers experience a failure the data may become inaccessible. This can result in a server that fails with little or no ability to access the logs or other data that provide information as to what is wrong with the server to resolve the failure. By offloading the data from the servers to the monitoring data stores such data is always available to troubleshoot the operation of the servers .

Referring next to shown is a portion of the monitoring network that illustrates the operation of the monitoring network according to various embodiments of the present disclosure. As shown the services and the servers generate the data as described above. In this respect the data may comprise for example access logs metrics or any other type of data associated with the operation of the services and the servers that comprises information by which one may assess the operating condition of the services as executed on the servers .

The monitoring agent is configured to transmit the data to the monitoring service s of the monitoring servers . One of the applications implemented by the monitoring service s processes the data into data that is stored in a respective one of the monitoring data stores . The processing performed on the data is to condition and or transform the data so that it can be stored and accessed in an efficient manner. Some of the data may actually be the same as the data received from a server . The conditioning and or transformation of the data into the data may involve for example the aggregation of data received from a plurality of hosts such as the servers . Also logs included in the data may be changed by attaching keys or other information thereto to aid in searching for and finding specific portions of the data in the future.

The monitoring data stores may be located in physical positions that are distant from each other. Also the monitoring data stores may be redundant with respect to each other thereby providing a more reliable storage of the data . It may further be the case that monitoring data stores are located in close physical proximity to the servers where a given entity may operate the servers the monitoring servers and the monitoring data stores .

The client may include a client application that facilitates interaction with the monitoring service s . In one embodiment the client application is executed to obtain an assessment of the operating condition of the services and the servers as well as to obtain other information inherent in the data . Alternatively the client application may be an automated system that performs various automated functions based upon the information inherent in the data .

In order to provide for proper operation various components of the monitoring network are configured for operation. In particular a client may be manipulated to interface with configuration components of the monitoring services to configure various outputs of devices etc. For instance the monitoring agent or the monitoring service s may be configured so as to be able to detect an alarm condition. As such these components may be configured with various alarm thresholds and the like to detect alarm conditions. The content and form of reports requested by specific clients that are to be generated based upon the data may be configured. Various data access configurations may be created that dictate what data is accessed in response to respective requests from specific clients .

For example the monitoring service s communicate configuration data to the monitoring agent that informs the operation of the monitoring agent . Such configuration data may control how often the monitoring agent transmits the data to the monitoring services . The configuration data may further provide thresholds that define when various alarms or events that may occur during the normal operation of the monitoring agent . In addition the configuration data may be employed for other purposes.

In addition the monitoring service s interact with a client in order to configure thresholds or conditions for alarms and the like and the action to be taken when the thresholds or conditions are reached. The monitoring service s may interact with clients to configure reports that are generated based upon the data that are sent to users either automatically or upon request. Based on the interaction between a given client and the monitoring service s the monitoring service s generate configuration data that is stored in the monitoring data store for future reference in responding to various requests from respective clients .

The client application is executed to interact with the monitoring service s . In one embodiment the client application may comprise for example a browser or other application where the client application may include a web server or similar application. An individual may manipulate the client application in order to send a request to the monitoring service s for a desired output generated from at least a portion of the data . In response to the request the monitoring service s may generate an output that is generated based upon the relevant data identified in the request .

In order to determine how to generate the output the monitoring service s consult the respective configuration data that applies to the request. For example the configuration data may relate to a specific username and password used to log in with the client . The output is generated based upon the respective configuration data .

The output may comprise data in various forms including log data metrics charts graphs alarms or other data from which an assessment of the operating condition of the services and the servers can be discerned. For example the output may comprise a graph that shows internal state services service response latency service response availability over time a measure of service reliability server memory usage or other data. Also the output may comprise messages warning of alarm conditions or events. Further the output may be configured to set forth data in a predefined form that is recognizable to an automated function implemented on a client or other device.

Where the client application comprises a browser or like system then the client application may be employed to access data in the form of graphs or charts that are made for human consumption so that a user can ascertain the health of the respective services and servers . Alternatively the client application may comprise an automated system that performs various automated functions. One such example may comprise the function of controlling whether servers in a server bank were powered up or down depending upon whether demand for the respective services was high or low. The automated function may request data expressed in a predefined format based on respective configuration data through the monitoring service s from which to determine exactly when to turn servers on and off.

In addition various monitoring service s may repeatedly process data to detect predefined conditions and generate alarms when such conditions are detected. Further the monitoring service s facilitate the setting of alarm thresholds and conditions that are used to identify alarm conditions. The alarms may be expressed in the form of a message or other output to which appropriate personnel may react.

Turning then to shown is a block diagram that provides one example illustration of the monitoring service s as they are implemented on the one or more monitoring servers according to various embodiments.

As shown the monitoring services include various monitoring applications . The monitoring applications comprise a log application a metric aggregation store application a component and relationship store application a search and navigation application graphing applications configuration applications and event applications . It is understood that the monitoring applications described herein are examples and are not an all inclusive list where other applications may be employed in addition to those described herein. Each of the monitoring applications is configured to perform various monitoring functions with respect to the data stored in the monitoring data stores to facilitate an assessment of an operating condition of the services as they are executed on the servers and the operating condition of the servers themselves.

The monitoring applications are surrounded by an interface layer that may comprise for example an application programming interface or other appropriate interface mechanism. The interface layer defines a messaging format that is used by devices that are external to the interface layer and the monitoring applications to interact with the monitoring applications to obtain access to the data . Also the messaging format defined by the interface layer provides for forwarding data to the monitoring applications for future storage in the monitoring data store s . Access to the data stored is provided to facilitate an assessment of the operating condition of the services and the servers .

The interface layer surrounds the monitoring applications in that all communication by devices external to the interface layer to and from the monitoring applications flows through the interface layer . Given that the interface layer defines a messaging format that is to be used by external devices to interact with the monitoring applications and given that all communication to and from the monitoring applications flows through the interface layer the interface layer advantageously hides any complexity of the monitoring applications as seen by applications external to the interface layer . The messaging formats defined by the interface layer may be specified for example using an Extensible Markup Language XML schema or other appropriate mechanism.

The various monitoring applications provide various functions relative to the data so as to facilitate the assessment of the operating condition of the services or the servers as mentioned above. While a detailed discussion of the various monitoring applications is omitted herein the following provides a brief description of the basic functions of the monitoring applications .

The log applications are implemented to effect the archiving of unstructured data such as access logs and the like. Such logs may comprise for example human readable data that is generated by the services or the servers to describe various events or circumstances that may have occurred with respect to the operation of the services or the servers . In addition the log applications facilitate access to data that is stored in the monitoring data stores . The log applications also facilitate access to the data stored on the monitoring data stores based upon a query submitted by a client . In this respect the log applications allow a user to narrow the scope of the query along various parameters such as the time that the data was generated the host that generated the data or based upon the text contained within respective logs. In this respect where vast amounts of log data is stored in the monitoring data stores a user can narrow down a given query to a specific window of such data that is small enough so as to enable the display of the actual log data generated. This may be done for example to troubleshoot specific problems that may have been experienced by the services or the servers .

The metric aggregation and store applications are employed to process raw data such as unstructured data to obtain useful information such as metrics therefrom. The metric aggregation and store applications may perform mining operations to mine logs and other portions of the data for desired information that bears on the availability latency or reliability of the operation of respective services on servers . For example the metric aggregation and store applications may be executed to determine how many access logs exist over a given period of time for a given service to identify the usage of the service by third parties. Alternatively the access logs may be examined to determine how many failures occurred in serving up content to clients over a given period of time thereby relating to the availability of the service . Once the metrics are identified and stored such information may then be presented to a user using appropriate graphs as will be described.

The component and relationship store applications facilitate the dynamic discovery of services and relationships between them. In this respect the locations at which services are executed on respective servers may be tracked. The relationships discovered may comprise for example interprocess relationships involving service to service or business to business communications dependencies between services physical relationships and other types relationships. For example a relationship may exist between a service and a database that holds information needed by the service to operate. In addition other functions may be performed.

The search and navigation applications are executed to find various objects and associations between data objects stored as part of the data . The search and navigation application may thus find service names host classes host names and other information needed for the general monitoring functions. The objects and associations discovered are exposed for use by other monitoring applications .

The graphing applications are executed to create graphs based upon metrics that may be obtained from the metric aggregation and store application or other source. The graphs that are generated may depict various metrics as they occur over time as will be described. These graphs may be used by a monitoring portal in order to construct a monitoring dashboard that is sent to and displayed by a client so that an individual can access the health of the services and servers . Alternatively the graphing applications may generate graphs and the like that are distributed to multiple recipients where the recipients are noted in the configuration data .

The configuration applications allow for users to specify various information that is to be collected and presented in the form of graphs or some other format on a given client . In this respect the configuration applications allow users to specify reports that they wish to be generated that reflect the availability latency reliability and other characteristics of their services as executed on respective servers . After desired reports are configured by virtue of interaction with the configuration applications users can periodically receive the configured reports to get updates as to the health of their services and servers . Also the configuration applications provide for the configuration of outputs that are generated in response to requests from automated applications.

In addition the configuration applications allow users to define anomalies error conditions alarm thresholds and other conditions by which the respective monitoring applications such as the event applications to be discussed can react and generate appropriate outputs. For example various error conditions may be defined by which appropriate alarms are generated and sent to respective users. Also users may define the precise actions to be taken in view of an occurrence of various conditions. For example one action may be to send an e mail that indicates the anomaly that has occurred or some other action may be specified. The configuration applications generate configuration data that is provided to the monitoring agent s and is stored in the monitoring data stores as described above.

The event applications are configured to detect or react to various events that may exist by virtue of the data that is received and stored in the monitoring data store and to trigger various outputs in response to such events. Also the event applications may respond to alarms that may be received as a portion of the data and generate appropriate outputs. In response to various predefined events the event applications may be configured to create tracking tickets reboot a server implement the physical allocation of hardware specify user action to be taken or other actions.

While the above discussion sets forth an overview of the operational aspects of the various monitoring applications it is understood that such discussion is not comprehensive and that the respective monitoring applications may include further functionality beyond that described. In addition other monitoring applications may be included that are not specifically described herein.

In addition the monitoring services include the monitoring portal a rules engine and an orchestration engine . The rules engine is configured to receive information from the various monitoring applications through the interface layer and determines whether various actions are to be taken based on the state of the data obtained. Such data may include for example access logs metrics events components or relationships that are obtained from the data stored in the monitoring data store .

The rules engine determines whether various actions are to be taken such as generating alarms rebooting servers or other actions depending upon the configuration specified by a user as provided for example by the configuration application . Once the rules engine determines that actions are to be taken the rules engine communicates with the orchestration engine that is configured to orchestrate the execution of such action as is necessary thereby generating output . In this respect the output may be a tracking ticket an e mail or other message to a user that informs them of the respective condition that exists within the services or servers . Also other actions may involve rebooting servers or other user actions as specified.

Monitoring portal constructs various dashboards or other display outputs based upon the graphs generated by the graphing applications or data displayed in some other form. According to one embodiment the monitoring portal may generate a display as an XML file that is transmitted to a client and rendered by a client application although other formats beyond XML and other applications in a client beyond a client application may be employed.

Turning to shown is one example of a user interface that may be generated by the monitoring portal using graphs generated by the graphing applications . The user interface is served up to the client to be rendered for a user as a display printout or other rendering.

As shown the user interface includes graphs that depict various metrics obtained from the data stored in the monitoring data stores . The data has comprises metrics associated with predefined timeframes by virtue of the operation of the various monitoring applications as described above. The timeframe may be specified for example as a period of time relative to a predefined point in time. That is to say that upon specifying a given point in time the timeframe may be specified as a predefined period of time occurring before the point of time specified. For example if a user identifies a point in time in a current day from which to view the operating condition of the services on the servers then it may be the case that a graph is automatically created based upon a specified configuration for a trailing window of time i.e. 5 weeks from the point of time specified.

The user interface of the respective metrics may comprise several graphs that depict several metrics. Alternatively the user interface may depict various logs metrics or other information in other formats.

Referring next to shown is a flow chart that provides one example of a function of the interface layer according to various embodiments. Alternatively the flow chart of may be viewed as depicting steps of a method implemented in the monitoring server . The flowchart of depicts a function implemented in the interface layer in order to obtain data that is stored in multiple ones of the monitoring data stores . The data obtained from monitoring data stores that are stored in many geographically diverse locations. This reflects the fact that it may be the case that a request for data by a client requires access to data that is stored in multiple ones of the monitoring data stores that are located in geographically diverse locations with respect to each other. As a consequence the interface layer ensures that all of the data requested is accessed from wherever it is stored and presented to a requesting client as if it originated at a single point.

Beginning with box the interface layer attempts to look up the storage location s of requested data . In box if the interface layer cannot identify all the locations of the requested data then the interface layer proceeds to box in which it performs a search for data in all of the respective monitoring data stores and accesses the desired data wherever it is found. It should be noted that the interface layer may cause this function to occur by interfacing with an appropriate one of the monitoring applications as described above. Thereafter the portion of the interface layer ends as shown.

If in box the interface layer is able to identify locations of the desired data then the interface layer proceeds to box in which the desired data is obtained from the specific monitoring data stores at the various locations. Thereafter the interface layer ends as shown.

With reference next to shown is flow chart that provides an example of another portion of the interface layer that is executed in order to obtain asynchronous access to bulk or very large amounts of the data stored in the respective monitoring data stores . Alternatively the flow chart of may be viewed as depicting steps of a method implemented in the monitoring server .

A bulk amount of data as contemplated herein is of such a size that such data cannot be accessed from the respective monitoring data stores and returned to a client within a response timeout limit imposed by a network protocol of a network through which a client communicates with the interface layer to request the bulk data.

In this respect the interface layer provides for a synchronous response capability that is configured to generate a response to a request or call from a client that involves an action relating to a portion of the data within the response limits imposed by a network protocol of a network over which the client communicates with the interface layer . In this respect the client may request a report for example relating to the status of the operation of a service that is generated in real time in the form of several graphs that are transmitted back to the client within the response limits imposed by the network protocol.

Alternatively the interface layer also includes an asynchronous response capability that is configured to generate a deferred response to a request or call from a client that involves a given action relating to a portion of the data . The asynchronous response capability is directed to those responses that take a longer time to generate than the response limits imposed by the network protocol will allow.

For example in some cases a client may request a bulk amount of data that will take the monitoring applications significant time to access from the monitoring data stores based upon the sheer amount of data that needs to be accessed and loaded into the monitoring server from the respective monitoring data stores . The asynchronous response capability of the interface layer allows clients to communicate over various networks according to respective network protocols and still provide outputs that may take longer to generate than the response limits imposed by the respective network protocols.

The flow chart of depicts one example of an operation of the interface layer in providing an asynchronous response to a request or call involving an action relating to the data . In the example of as requested by a client the respective action to be taken is to obtain a bulk amount of data stored in the monitoring data stores .

Beginning with box when the request from a client is received the interface layer generates a unique string of characters that serves as a ticket that is sent to the client to access the ultimate results of the request. At the same time the interface layer implements accessing the requested bulk data. Thereafter in box the ticket is associated with the action thread for example by storing the ticket value in a table in association with the request where the action taken in response to the request involves accessing the bulk amount of data from the monitoring data stores .

Then in box the interface layer determines whether a further request was received from the client for the data that was to be accessed based on the original request. Such an additional request would include the ticket sent to the client in box so that the interface layer may look up the status of the bulk data access action. Assuming that a request was received in box then in box the interface layer looks up the status of the bulk retrieval action based upon the ticket in the request. In box the interface layer determines whether the retrieval of the bulk amount of data has completed. If not then the interface layer proceeds to box in which the status of the current bulk retrieval action is sent back to the client in response to the request received as determined in box . Thereafter the interface layer reverts back to box to await further requests from the client . On the other hand if the action is complete in box then in box the result of the specific action requested is transmitted to the client . Thereafter this portion of the interface layer ends as shown.

As stated above the interface layer defines various actions that are processed by the interface layer in order to simplify the interface with the respective monitoring applications as perceived by the client . The messaging format defined by the interface layer includes various actions as will be described in greater detail below. The clients communicate with the interface layer using the actions defined by the interface layer . This simplifies the interaction between the clients and the monitoring applications as the clients are provided with a uniform set of actions that may be used rather than using static relationships between clients and monitoring applications that must be maintained and updated as needed. Also the interface with the monitoring applications presented by the interface layer can be exposed to the public thereby allowing the monitoring services to be made available to third parties. It should be noted that while various actions are described below it is understood that additional actions may be employed beyond those specifically described herein.

Advantageously the actions defined by the messaging format are programming language agnostic in that any programming language may be used by the client to interact with the interface layer . That is to say that the interface layer removes the necessity of communicating with the respective monitoring applications in their native language.

The messaging format defined by the interface layer defines a Get action that is processed by the interface layer to obtain a portion of the data from the monitoring data stores . In this respect various metrics logs components relationships events graphs and any other information included in the data may be obtained using this action. When specifying this action a given client may also provide attributes that allow the interface layer to communicate with the monitoring applications so as to specifically identify and obtain the desired data. For example time attributes may be employed with the Get action to obtain a portion of the data that was generated within a predetermined timeframe by virtue of the operation of one or more of the services as executed by one or more of the servers . In addition other parameters may be used as attributes of the Get action as is appropriate.

The messaging format associated with the interface layer further defines Put actions that may be employed by the monitoring agents executed on the servers to provide data to the interface layer so that the interface layer can direct respective ones of the monitoring applications to store the data in respective monitoring data stores . The data that is stored is that which is generated by the services and the servers upon which the services are executed as described above.

One type of Get action defined by the messaging format is a GetGraph action that is processed by the interface layer to cause the generation of a graphical depiction of one or more metrics as described above with respect to . For example the GetGraph action may be employed to generate the graphical depiction of the portion of data that is generated within a predefined timeframe by virtue of the operation of at least one of the services in at least one of the servers . In this respect the GetGraph action may be implemented to generate a graph from metrics obtained using the Get action described above. In one specific example a graphic depiction of a metric associated with the data may include a depiction of the metric occurring over a first time frame and a depiction of the same metric occurring over a second time frame based upon data obtained using the Get action. This would allow side by side comparison of the metric as it was generated over the first and second time frames.

In addition the interface layer is further configured to authenticate a request or call received from a client . In this respect the interface layer may employ typical authentication procedures such as requiring a username and password or other information unique to a given user to effect authentication. To this end authentication information such as usernames passwords and or other information may be stored in association with the monitoring servers to facilitate authentication.

The messaging format also includes a ListMetrics action that is processed by the interface layer to implement a search for metrics using any combination of parameters that is supported by the interface layer . The combinations of parameters may be specified for the interface layer using for example a metrics schema or other like device.

The messaging format further defines a ListEvents action that may be employed to search for various alarms events anomalies or other information occurring in the data based upon a number of parameters as specified as attributes to the action. Such parameters may be specified by an event schema or in some other manner.

The messaging format also specifies a GetEventDetail action that is processed by the interface layer to obtain fine grained detail for any given event based upon that event s specific event identifier.

In addition other actions provide for adding editing and searching for various configurations of outputs that clients wish to receive based on their requests. Also various actions are provided that the interface layer processes to provide components and relationships between various services etc. to clients . Actions are further provided to add or delete components and relationships to or from various client configurations.

The interface layer as described above provides various advantages in that several versions of the interface layer may be maintained concurrently allowing the easy introduction of updated interfaces while keeping older interfaces operational. Also the interface layer hides the complexity of the various monitoring applications from the client thus simplifying the task of the client in obtaining data and providing data to the various monitoring applications . Further the interface layer provides for authentication and both synchronous and asynchronous responses to clients where network parameters might independently dictate response times.

In addition the interface layer is dynamically scalable relative to variation in the load of processing requests received from external devices such as for example the servers services and clients . To do this the number of hosts employed to implement the interface layer and the monitoring applications may vary dynamically based upon the variation in the load of processing requests. Thus the interface layer is horizontally scalable to the size of the load of processing requests without substantive change. The hosts may be added or taken away depending upon the size of the load at any given time. As a consequence the monitoring functionality of the monitoring applications is available to clients and other devices without disruption or delay due to variation in the load of processing requests.

In addition the interface layer allows monitoring services to be provided to third parties who do not wish to perform such monitoring services on their own. Thus the interface layer allows third parties to interface with the monitoring applications without divulging specific information as to the operation of the monitoring applications .

With reference to shown is one example of a monitoring server according to an embodiment of the present invention. The monitoring server may include one or more processor circuits having a processor and a memory both of which are coupled to a local interface . In this respect the local interface may comprise for example a data bus with an accompanying control address bus as can be appreciated. The monitoring server is one example of a server computer that may be employed as can be appreciated.

Stored on the memory and executable by the processor are various components such as a server operating system and the monitoring services . In addition it is understood that many other components may be stored in the memory and executable by the processor .

As set forth above with reference to a number of components are stored in the memory are executable by the processor . In this respect the term executable refers to a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor . Executable programs may also be source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor . An executable program may be stored in any portion or component of the memory including for example random access memory read only memory a hard drive compact disk CD floppy disk or other memory components.

The memory is defined herein as both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives floppy disks accessed via an associated floppy disk drive compact discs accessed via a compact disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The processor may be of electrical or optical construction or of some other construction as can be appreciated by those with ordinary skill in the art.

The operating system is executed to control the allocation and usage of hardware resources such as the memory processing time and peripheral devices in the monitor server . In this manner the operating system serves as the foundation on which applications depend as is generally known by those with ordinary skill in the art.

Although the functionality of the monitoring service s is are described as being embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware the functionality of the monitoring service s can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates programmable gate arrays PGA field programmable gate arrays FPGA or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The block diagrams user interfaces and or the flow charts of show the architecture functionality and operation of an implementation of the monitoring service s . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flow chart of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present invention.

Also where the monitoring service s is are expressed in the form of software or code it they can be embodied in any computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present invention a computer readable medium can be any medium that can contain store or maintain the monitoring service s for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives or compact discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present invention are merely possible examples of implementations merely set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s of the invention without departing substantially from the spirit and principles of the invention. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

