---

title: Visual interface to represent scripted behaviors
abstract: Systems and methods for visually representing scripted behaviors are provided. A system is disclosed that includes an authoring program executable on a computing device and configured to display a visual scripting interface. The visual scripting interface may be configured to display a plurality of user-selectable graphical building blocks. Each graphical building block may represent a respective component of a script, and may be spatially arrangable within the visual scripting interface to visually represent a script for a target scripted object. Input selectors may be provided on the graphical building blocks to enable users to input script information, and status indicators and messages may also be displayed on the graphical building blocks to inform users whether script information has been properly inputted. Propagation tools may be provided to enable users to successively add new graphical building blocks to build a tree that represents a script sentence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589874&OS=08589874&RS=08589874
owner: Microsoft Corporation
number: 08589874
owner_city: Redmond
owner_country: US
publication_date: 20070611
---
Many computer programs offer users the ability to write scripts using a scripting programming language to perform complicated or repetitive tasks. In some applications scripts are written and interpreted within the environment of the computer program itself and in other applications scripts are written within an authoring program for execution by another interpreting program such as a browser. While scripting may extend the capabilities of many computer programs in powerful ways the process of programming scripts is complicated and exacting and often beyond the competency of the average user who is not a professional software developer. In the field of educational software for example learners often possess a passion for self expression and representation of ideas that outpaces their familiarity with the exacting requirements of scripting programming languages leaving them unsatisfied with their ability to represent their ideas using scripting tools of conventional software products.

The present disclosure relates to systems and methods by which scripting behaviors may be visually represented and manipulated through graphical building blocks so that they are more easily understood by users. A system is disclosed that includes an authoring program executable on a computing device and configured to display a visual scripting interface. The visual scripting interface may be configured to display a plurality of user selectable graphical building blocks. Each graphical building block may represent a respective component of a script and may be spatially arrangable within the visual scripting interface to visually represent a script for a target scripted object. Input selectors may be provided on the graphical building blocks to enable users to input script information and status indicators and messages may also be displayed on the graphical building blocks to inform users whether script information has been properly inputted. Propagation tools may be provided to enable users to successively add new graphical building blocks to build a tree that represents a script sentence.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

As shown in authoring program typically is configured to display an authoring program graphical user interface GUI and includes an associated event and action module in communication with authoring program GUI . The authoring program may for example be configured to enable a user to create a target environment that includes a target scripted object . The target environment may be for example a presentation or website displayable via a browser or other interpreter software.

To enable the user to create a script for the target scripted object the authoring program GUI is configured to present a visual scripting interface including a sentence selection pane by which the user may select an input method for inputting a sentence that the script will follow for example by sentence template or custom input. Once the input method is selected the visual scripting interface is configured to present a visual input pane configured to enable a user to graphically enter user input which may include an arrangement and content of graphical building blocks representing action events and conditions to produce a script.

The user input is sent from the visual scripting interface to the event and action module which in turn processes the user input to produce script code for a completed script. The script code for the completed script is sent from the event and action module to the target scripted object . During processing of the user input the event and action module may also be configured to produce pseudocode based on the user input. The pseudocode may include a natural language description of a scripting step included in the user input. The pseudocode may be sent to the visual scripting interface from the event and action module for display to the user.

In some embodiments the processing of the user input to produce pseudocode or script code may be performed all or in part by API . It will be appreciated that the portions of API may be public thereby enabling third party software developers to create target scripted objects with associated scripting options that are passed into the event and action module via the API . The scripting options may be stored with associated scripted objects in a library in non volatile memory of the computing device or at other location accessible via computer network . The scripting options may be passed to the visual scripting interface and presented to the user for selection during the script building process as described below. Alternatively the library may be accessed directly by the components of authoring program rather then through API . Using the pre developed scripted objects stored in library users may select a desired scripted object from the library for inclusion in as a target scripted object in a project and may select from among the associated scripting options to control scripting behavior of the target scripted object in a desired manner saving time and complication over creating a target scripted object from scratch. Scripting options may include for example templates of pre arranged building blocks that may or may not be associated with a target scripted object. Thus a user may either select a desired scripted object or a template to begin script building. It will be appreciated that the scripted objects scripting options and templates are designed according to a schema known to the API developer and authoring program . This schema enables standardized communication between the developer API and authoring program regarding these data types.

To enable the user to easily locate a desired scripting option the various scripting options including templates and building blocks may be embedded with metadata indicating for example their content type function usage etc. A search tool may be provided to enable the user to search the scripting options including the templates and building blocks based on the metadata.

Upon selection of a sentence template or custom action selector by a user the visual input pane of visual scripting interface is displayed to enable the user to graphically assemble the script. Alternatively once the user has selected an input method from sentence templates and custom action selector the user may traverse a link to navigate to the visual input pane of visual scripting interface .

The graphical building blocks for example may include event blocks action blocks event funneling blocks and condition blocks . Event blocks identify the event that the current script will be triggered by. A user may choose a desired event for each event block and the events to choose from may be drawn from scripting options for the target scripted object. Action block represents a component of a script sentence visually grouping a target an action and properties for the action into one graphical building block. Event funneling block indicates that multiple events will result in the actions that follow it. For example an event funneling block may be used underneath an Event block Event block and Event block to specify that the occurrence of any of these three events will result in an Action block that follows the event funneling block . Condition block is a block that contains a condition for deciding which of a plurality of paths to action blocks to follow. Thus a condition block will typically include two or more action blocks following it. Upon selection of the create custom action option on sentence selection pane the visual input pane may be configured to display a single event block or an event block and action block pair for example to get the user started.

As illustrated in some of the graphical building blocks such as the event block and the action block may include an input selector configured to enable a user to enter user input script information. The input selector may also be configured to display a message regarding a status of a step of the building block. Alternatively the graphical building block may be configured to display the message in an area other than on the input selector .

In addition some of the graphical building blocks such as the event block action block and condition block may also include a status indicator configured to indicate whether required or optional script information has been inputted by the user. A status indicator key may be provided within visual input pane to enable a user to easily understand the meaning of the status indicators . In the illustrated embodiment the status indicators include an incomplete required step status indicator an incomplete optional step status indicator and a completed step indicator . A user may scan these status indicators to quickly determine whether a script for an action has been completed or whether further script information should be inputted by the user. Further as illustrated in messages may include a step incomplete message and a step complete message . The step incomplete message may include a textual description of script information to be entered by a user while the step complete message may include a summary of the script information previously entered by the user or preloaded automatically based on script options for the target scripted object .

Returning to some of the graphical building blocks such as the event block and action block may also include associated propagation tools configured to further propagate building blocks in a visual representation of a script sequence within the visual input pane. The propagation tools for example may be configured to appear adjacent the graphical building block on mouseover of the building blocking itself. Alternatively the propagation tools may appear within the graphical building block or in some other suitable location. In the illustrated example propagation tools include an AND propagation tool and an OR propagation tool. Selection of the AND creates a new block of the same type connected to the current block beneath it and thus logically after it. Selection of the OR propagation tool creates a new block of the same type adjacent for example to the right of the current block and generates a condition block above the current and new blocks. If the current block already has a condition block connecting it to another that condition block expands by one more slot to accommodate a third block as part of the branch.

Selection of the input selector may cause an input tool to be displayed. The input tool may be a pop up window for example or other suitable type of input mechanism such as a pull down menu etc. Alternatively the input tool may be displayed within the graphical building block itself.

The input tool may include a list of user selectable input options or alternatively may be configured for direct user input. It will be appreciated that the list of user selectable input options may be at least partially populated based on data associated with the target scripted object such as the script options saved in library . The input tool is configured to display a first natural language representation of one or more steps of the script occurring before the list of user selectable input options for the current step of the current block and or a second natural language representation of one or more steps of the script occurring after the list of user selectable input options.

As illustrated in the graphical building blocks may have interlocking regions such as protrusion and concavity which are configured to provide visual position cues and facilitate relative positioning of the graphical building blocks within the visual scripting interface by a user. It will be appreciated that the shape of the protrusion and concavity may be modified to any suitable shape. Further the shape of each of the graphical building blocks may be modified to other suitable shapes. Thus it should be understood that the term blocks as used herein refers to interrelated scripting units rather than to the rectangular shape of the blocks as other shapes are possible.

The visual scripting interface is configured to display input tool with narrative descriptions and as well as a list of input options from which the user may select a desired option. In the depicted embodiment the list of input options includes a plurality of frames to which the script may link as well as a selector for selecting a transition between frames preloaded to the option transition . Upon selection of the input option Newton Frame and following a click of the OK button on input tool the visual scripting interface transitions to the view in .

As shown in the status indicator and messages for the target step of action block have been changed due to the user input discussed above and now completed step status indicators and step complete messages appear on all items within event block and action block . At this point the user has the option of clicking a done selector to add the script to the target scripted object for which it was created and the user is returned to the view of the sentence selection pane shown in . Or the user may select AND or OR propagation tools to further modify the script by generating additional blocks in a tree like arrangement representing the desired script logic. Individual graphical building blocks may be selected and dragged by a user or for more complicated scripts entire sections of a tree may be moved by selecting and dragging with everything beneath the selected block coming along with the drag operation. The work area of the visual input pane can be scrolled if the script exceeds the borders of the view. Further the script can also be zoomed in and out so the user can see the big picture or focus in on one area.

Upon selection of OR propagation tool in the visual scripting interface is configured to present a view as shown in including a branching condition block . In the depicted embodiment the condition block has been filled in by the user and is configured to branch if the detected language of the user is English to Newton Frame and if the detected language of the user is Italian to an as yet unspecified frame. An input tool may be displayed with first and second narrative descriptions of steps before and after the current step and a list of input options from which the user may choose a target frame and a desired transition type. By selecting the Newton Italian option the user may create a script that branches to an Italian version of the Network frame upon detecting the condition that the language of the user is Italian. It should also be appreciated that advance planning of the logic flow is not required since the OR propagation tool may be used to create a branch in operational logic within an existing arrangement of building blocks.

It will be appreciated that the resulting arrangement of graphical building blocks may be referred to as a tree and that this tree expresses a logical process flow through events actions and conditions which may be represented by a script sentence . While the term tree implies the possibility of branching it will be appreciated that herein the term tree may be used to describe an arrangement of scripted graphical building blocks even if the arrangement is not branching such as is the case in the arrangement depicted in .

At the method includes upon selection of the input selector by a user displaying a user input tool having one or more script information input options for selection by the user. The script information input options may be preloaded from a data store associated with the target scripted object. At the method includes on the at least one of the graphical building blocks displaying a status indicator to indicate whether the script information has been entered. To enable the user to continue adding building blocks the method may also include displaying a propagation tool to the user the propagation tool enabling a user to select a manner in which to expand the arrangement of building blocks representing the script as described above. At the method includes upon determining that all status indicators indicate that the script information has been properly entered processing the user input to produce script code for a completed script. And at the method includes sending the script code for the completed script to the target scripted object. It will be appreciated that the script may reside either on a client or server as appropriate to the implementation environment.

The systems and methods described herein may be utilized within an authoring program or other computer program to enable users to efficiently create scripts to perform desired actions through an interface that utilizes visual representation of scripted behaviors. Further it should be appreciated that the systems and methods described herein may be used to provide support not only for users to create scripts in so called beginning scripting languages but also to extend the functionality of those scripts using more advanced and complicated scripting languages. For example third party software developers may provide advanced scripting templates which can provided powerful functionality to the user using complex scripting languages yet be represented and manipulated by the user using the building blocks described above.

It will be appreciated that the computing device described herein may be any suitable computing device configured to execute the programs and display the graphical user interfaces described herein. For example the computing device may be a personal computer laptop computer portable data assistant PDA computer enabled wireless telephone networked computing device or other suitable computing device and may be connected to one or more computer networks such as the Internet. As used herein the term program refers to software or firmware components that may be executed by or utilized by a computing device and is meant to encompass individual or groups of executable files data files libraries drivers scripts database records etc. Further it will be appreciated that the systems and method described above may be implemented in a client server environment and thus all or portions of the authoring program may be executed at a client computing device or at a server computing device as appropriate. Thus the creation and arrangement of building blocks may be driven by code executable at the client and or server and the scripts produced by the authoring program may be stored and executed either at the client and or at the server.

While the embodiments above describe the script being output as script code it should be appreciated that the script may be written by the application program in a scripting language that resembles a natural language. With a natural language type script language the user need not understand complicated code to be able to read the script. Further the various messages displayed via the building blocks may closely resemble the natural language code. Input tools such as a language dictionary may be provided to assist the user in inputting parameters via the building blocks.

It should be understood that the embodiments herein are illustrative and not restrictive since the scope of the invention is defined by the appended claims rather than by the description preceding them and all changes that fall within the metes and bounds of the claims or equivalence of such metes and bounds thereof are therefore intended to be embraced by the claims.

