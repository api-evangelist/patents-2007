---

title: Method for creation, management, and presentation of user-scoped navigation topologies for web applications
abstract: The present invention is directed to a method and system for designing a web portal or enterprise portal comprising a hierarchical structure of portal pages and portlets for accessing web content or enterprise content accessible via the portal. A method for modifying a given hierarchical navigation topology including nodes and edges connected between the nodes in a web application environment, in which topology a web page corresponds to a predetermined topology level and displays one or more applets, includes: providing a user interface for defining a user-specific topology, the defining including promoting a node within the topology to a higher level; demoting a node within the topology to a lower level; and moving a node within a page level; storing information for recovering a user-modified topology in a database; and displaying the user-modified topology to the user in response to the user specifying a predetermined node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769439&OS=08769439&RS=08769439
owner: International Business Machines Corporation
number: 08769439
owner_city: Armonk
owner_country: US
publication_date: 20070508
---
The present invention relates to the field of network computing and in particular to a method and system for designing a web portal or enterprise portal comprising a hierarchical structure of portal pages and portlets for accessing web content or enterprise content accessible via the portal.

A prior art portal as e.g. represented by an IBM WebSphere Portal is provided by complex functionality implemented on a network server such as the web server illustrated in . The web server includes logic components for user authentication state handling and aggregation of fragments as well as a plurality of portlets provided in respective pages with a respective plurality of application programming interfaces APIs portlet container software and portal storage resources . The logic components are operatively connected such that data can be exchanged between single components as required.

A portal engine of the web server in implements an aggregation of portlets based on the underlying portal model and portal information such as security settings user roles customization settings and device capabilities. Within the rendered page the portal automatically generates the appropriate set of navigation elements based on the portal model . The portal engine invokes portlets during the aggregation as required and when required and uses caching to reduce the number of requests made to portlets. The prior art IBM WebSphere Portal employs open standards such as the Java Portlet API Java is a registered trademark of Sun Microsystems Inc. in the United States and other countries . It also supports the use of a remote portlet via the Web Services for Remote Portlets WSRP standard.

The portlet container is a single control component for all portlets which may control the execution of code residing in each of these portlets . It provides the runtime environment for the portlets and facilities for event handling inter portlet messaging and access to portlet instance and configuration data among others. The portal resources are in particular the portlets themselves and the pages on which they are aggregated in the form of an aggregation of fragments. A portal database stores the portlet description which includes for example attributes such as portlet name portlet description portlet title portlet short title and keywords and the portlet interaction interface description which is often stored in form of WSDL documents. The portal database also stores the portal content structure i.e. the hierarchical structure of portal pages which may contain nested pages and portlets. This data is stored in the portal database in an adequate representation based on prior art techniques such as relational tables.

The aggregation logic provides all processes that are required to assemble a page . Typically these processes include loading a content structure from storage traversing the content structure and calling the instances referenced in the content structure in order to obtain their output which is assembled to a single page .

When web applications are visited by a web user a user is usually displayed a navigation menu that provides some means to access underlying content. A navigation menu is usually structured in a tree like topology and users are forced to traverse the tree in order to reach a node matching the content the user is interested in. Specifically web portals are equipped with navigation menus which must be used to navigate through all of the contents the web portal provides.

Not every user is interested in the same content and hence the structure which is provided for a given portal may satisfy the needs of a certain user group but for many individual users the given topology does not satisfy their needs. Prior art techniques allow certain nodes of the topology to be blended out i.e. blend out a page or parts of a page e.g. portlets . This however is a very inflexible way to transverse the navigation tree.

A mechanism is provided for moving nodes within the topology. More specifically nodes are allowed to be moved up i.e. promoted and down i.e. demoted and left right on the same level of a given topology. A user interface is provided which allows a user to highlight certain nodes and to append the above mentioned move functions to a highlighted node. A function specific user interface is also provided which allows a user to define the target level which represents the target of the moving procedure. In this way a user is able to build his her own web application.

In accordance with an embodiment of the present invention a sub node which directly depends on a moved node is also moved together with the highlighted node for example when a sub node has a significant semantic relation to the highlighted node. According to the invention a storage module stores the difference between a new topology and a pre existing original one when the user has completed one or more topology modifications. A transformation component provided according to the present invention displays the user modified topology within the web application whenever the same user who modified the topology reenters or logs in again into the web application. The transformation can be implemented by a so called dynamic node which is understood to be a node which when clicked by or otherwise actuated the user invokes an underlying function which retrieves the user modified topology. The root node can be the dynamic node. One use of the present invention is for web portals.

An implementation of the present invention provides a dynamic assembly of a user specific topology by implementing tree models transformations and dynamic nodes.

Tree models are calculations of a user modeled user specific navigation topology. The term tree is used more generally than in the narrow mathematical sense because in the present invention it may also include a basically tree like topology structure which also has some meshes. When a user defines his her own topology structure a root node can either be the root node of the original tree model or may be the root node of a sub tree which would than be identical to a lower level node of the original topology.

Transformations are best implemented as application logic programmed in any suited programming language e.g. as Java programs that contain logic for generating a tree model. The content of a generated model can be based on existing models but will include some user specific modifications for example added deleted or moved nodes.

The before mentioned transformations are associated with a given node which is part of the original navigation topology. A dynamic node is a node to which the transformation is assigned. A dynamic node always represents the root node of the tree model passed to the associated transformation.

The specific transformation can be implemented in a way that its model is comprised of virtual navigational nodes only. In contrast to real nodes which also hold the information regarding the layout of the underlying content e.g. which portlet is to display where etc. virtual nodes only reference the real nodes of the real topology and do not contain this information but use it from the real nodes they reference. This advantageously reduces the amount of data that needs to be saved and can hence be seen as a major performance improvement. Allowing virtual nodes that have their own layout and do not reference any real nodes can be used for example where higher flexibility is required and users want to assemble pages not existing in the real topology.

The phrase user scoped navigation topologies in accordance with the present invention addresses topologies which are adapted to a specific user.

An aspect of the present invention is directed to a method for modifying a given hierarchical navigation topology comprising nodes and edges connected between the nodes in a web application environment in which topology a web page corresponds to a predetermined topology level and displays one or more applets the method comprising providing a user interface for defining a user specific topology the defining comprising promoting a node within the topology to a higher level demoting a node within the topology to a lower level and moving a node within a page level storing information for recovering a user modified topology in a database and displaying the user modified topology to the user in response to the user specifying a predetermined node.

Another aspect of the present invention is directed to program product stored on a computer readable medium which when executed modifies a given hierarchical navigation topology comprising nodes and edges connected between the nodes in a web application environment in which topology a web page corresponds to a predetermined topology level and displays one or more applets the computer readable medium comprising program code for providing a user interface for defining a user specific topology the defining comprising promoting a node within the topology to a higher level demoting a node within the topology to a lower level and moving a node within a page level storing information for recovering a user modified topology in a database and displaying the user modified topology to the user in response to the user specifying a predetermined node.

Another aspect of the present invention is directed to a system for modifying a given hierarchical navigation topology comprising nodes and edges connected between the nodes in a web application environment in which topology a web page corresponds to a predetermined topology level and displays one or more applets comprising a user interface for defining a user specific topology the defining comprising promoting a node within the topology to a higher level demoting a node within the topology to a lower level and moving a node within a page level a system for storing information for recovering a user modified topology in a database and a system for displaying the user modified topology to the user in response to the user specifying a predetermined node.

With general reference to the figures and with special reference now to an embodiment of the present invention will be described in more detail below.

With reference to which provides an enlarged view of the component a topology management component is provided which allows a user to construct his her own navigation topology. In an implementation of the present invention the topology management component is a portlet which renders the entire navigation topology or at least those parts to which a specific user has access to after having been logged in successfully. In more detail component is a user interface offering basic functions for selecting and deselecting nodes. In accordance with an embodiment of the present invention deselecting a node means not do display it for example to hide it as a part of a user specific navigation topology.

Further component offers basic tree operations in order to operate on nodes within a tree such that nodes can be moved a level up or a level down in the given navigation topology or can be moved to the left or to the right within the same level. An implementation of this user interface generates an arrangement of icons which are ordered in a hierarchical way for example similar to the arrangement a user is usually confronted with when viewing a file system structure. Each icon can than be highlighted and moved by clicking on a control associated and placed e.g. immediately behind the name of the node item . When a node item is highlighted and one of the associated move controls is clicked on then the function behind this control will be executed.

A database storage component is provided according to this implementation for each user. The database storage component stores the difference between a user specific topology and the original topology which is also basically stored on the web server physically. For this task an additional database table of a prior art portal database is provided. This table is denoted as where the database is denoted as in . Each time a user has successfully logged in the user specific data stored in this specific database table is read and evaluated by a dynamic assembly transformation component in order to reconstruct the user specific navigation topology.

The dynamic assembly transformation component performs this reconstruction and replaces the original navigation topology by the user specific topology.

A transformation is implemented as a function associated with the root node of the original navigation topology which root node thereby becomes a dynamic node in the above sense. Every time the aggregation component traverses the original navigation topology it immediately stops at the root node and asks the transformation for the sub model reflecting the user specific topology to be built in under the dynamic node. This build in process is implemented just by linking an original node to the user specific node of the user specific topology. The transformation component then reads the user specific navigation topology for the currently logged in user from the respective database entry of this user and constructs the user specific sub model of the navigation tree navigation topology which is then phased in under the root node representing the entire custom navigation topology for this user. In an implementation of the present invention each node of the user specific navigation topology is actually a reference to a real node in the original navigation topology such that changes regarding the content of a node in the real navigation topology are automatically reflected in this virtual user specific structure without the requirement to amend a user specific topology on each content modification within the original topology. To this extent this virtual structure looks exactly like the original navigation structure except that the user specific structure is arranged differently. The look and feel behavior present in the user specific portal however is always maintained.

With reference to the interaction between components and will be described in more detail in the case when a user first designs his own topology and then after a second log in.

The user starts by manipulating the original navigation topology in using the topology management component as described above. When the method is used a second time the original topology can also be a topology which has already been modified by the user. Component then triggers the storage of the changes to the original navigation topology by invoking the database storage component . The actual storage procedure is performed by the storage component in .

Next time when the same user logs in again the aggregation component starts to render the navigation topology as done in the prior art in . At the root node of the custom topology tree a dynamic transformation is detected by aggregation component which stops the usual rendering process. Instead of the usual rendering process the aggregation component invokes the dynamic assembly transformation component and requests in the user specific tree model sub model to be phased in under this dynamic node the user had navigated on. If the root node triggers this transformation the complete original topology will be replaced by the user specific topology. Component reads the topology difference stored for this specific user from the database in and constructs the user model by means of this information and the original information. The calculated topology is then again returned to the component in . Component then returns the calculated sub model to the aggregation component in . Aggregation component finally renders the user specific navigation topology and displays it to the user in .

After the invocation of the dynamic assembly transformation in the log in of a currently logged in user is detected in . Thereafter the database storage layer is accessed in to obtain any stored navigation topology differences for the currently logged in user. If a stored navigation topology differences is found in for the currently logged in user Yes a tree sub model based on the stored navigation topology differences is constructed in and returned to the aggregation component in . Flow then passes back to . If a stored navigation topology differences is not found in for the currently logged in user No then a tree sub model based on the original navigation topology is constructed in and returned to the aggregation component in . Flow then passes back to .

In another embodiment of the present invention a user may also generate a further topology which represents the user s own specific context or use case. Such context or use case can for example be the fact that a user uses a PDA device instead of a notebook or desktop computer. In this case the screen will be much smaller and the topology can be modified in order to display basically all those portlets on a high level in the topology which are commonly used when the person is traveling which can be expected when the PDA is used. As such a portlet for route calculation or a portlet for currency exchange rates can for example be displayed at the top of the page. Other examples of such rules include time related rules for example if it is Monday and before am then the calendar portlet is moved to a predetermined navigation position.

The skilled reader will appreciate that the above described embodiments showing certain procedures and proposed sequences are primarily given for demonstrating the general concepts of the present invention by way of example. Thus it will be understood that those examples may be varied in various aspects such as for example the ordering of steps the degree of parallelization between steps the implementation details of the single steps the form in which data is stored the way how the grouping of portlets is achieved etc. and respective further embodiments can be obtained.

The present invention can be realized in hardware software or a combination of hardware and software. A portlet arrangement tool according to the present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention can also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system and executed is able to carry out these methods.

Computer program means or computer program in the present context mean any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and b reproduction in a different material form.

