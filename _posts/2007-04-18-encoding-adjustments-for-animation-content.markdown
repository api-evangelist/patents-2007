---

title: Encoding adjustments for animation content
abstract: Techniques and tools are described for encoding animation video. In some embodiments, a video encoder designates animation video for encoding as animation content, which typically involves changing one or more encoder settings or rules to improve encoding performance for the animation content. When the encoder encodes the animation video, the encoder detects edges in the animation video using texture and changes settings for areas that include detected edges so as to improve encoding quality for the areas. In some embodiments, a video encoder adjusts differential quantization rules and quantizes animation video according to the adjusted differential quantization rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08442337&OS=08442337&RS=08442337
owner: Microsoft Corporation
number: 08442337
owner_city: Redmond
owner_country: US
publication_date: 20070418
---
Digital video consumes large amounts of storage and transmission capacity. Many computers and computer networks lack the resources to process raw digital video. For this reason engineers use compression also called coding or encoding to reduce the bit rate of digital video. Compression decreases the cost of storing and transmitting video by converting the video into a lower bit rate form. Decompression also called decoding reconstructs a version of the original video from the compressed form. A codec is an encoder decoder system.

In general video compression techniques include intra picture compression and inter picture compression. Intra picture compression techniques compress an individual picture and inter picture compression techniques compress a picture with reference to a preceding and or following picture often called a reference or anchor picture or pictures.

The encoder quantizes the transform coefficients resulting in an 8 8 block of quantized transform coefficients . Quantization can affect the fidelity with which the transform coefficients are encoded which in turn can affect bit rate. Coarser quantization tends to decrease fidelity to the original transform coefficients as the coefficients are more coarsely approximated. Bit rate also decreases however when decreased complexity can be exploited with lossless compression. Conversely finer quantization tends to preserve fidelity and quality but result in higher bit rates.

Returning to further encoding varies depending on whether a coefficient is a DC coefficient the lowest frequency coefficient shown as the top left coefficient in the block an AC coefficient in the top row or left column in the block or another AC coefficient. The encoder typically encodes the DC coefficient as a differential from the reconstructed DC coefficient of a neighboring 8 8 block. The encoder entropy encodes the differential. The entropy encoder can encode the left column or top row of AC coefficients as differentials from AC coefficients of a corresponding left column or top row of a neighboring 8 8 block. The encoder scans the 8 8 block of predicted quantized AC coefficients into a one dimensional array . The encoder then entropy encodes the scanned coefficients using a variation of run level coding .

In corresponding decoding a decoder produces a reconstructed version of the original 8 8 block. The decoder entropy decodes the quantized transform coefficients scanning the quantized coefficients into a two dimensional block and performing AC prediction and or DC prediction as needed. The decoder inverse quantizes the quantized transform coefficients of the block and applies an inverse frequency transform such as an inverse DCT IDCT to the de quantized transform coefficients producing the reconstructed version of the original 8 8 block. When a picture is used as a reference picture in subsequent motion compensation see below an encoder also reconstructs the picture.

Inter picture compression techniques often use motion estimation and motion compensation to reduce bit rate by exploiting temporal redundancy in a video sequence. Motion estimation is a process for estimating motion between pictures. In general motion compensation is a process of reconstructing pictures from reference picture s using motion data producing motion compensated predictions.

Whereas the example encoder divides an intra coded picture into non overlapping 8 8 blocks the encoder more generally divides an inter coded picture into rectangular non overlapping blocks of N M samples where N and M can be 4 or 8 so block size is 4 4 4 8 8 4 or 8 8. For a current unit e.g. 8 8 block being encoded the encoder computes the sample by sample difference between the current unit and its motion compensated prediction to determine a residual also called error signal . The residual is frequency transformed quantized and entropy encoded.

If a predicted picture is used as a reference picture for subsequent motion compensation the encoder reconstructs the predicted picture. When reconstructing residuals the encoder reconstructs transform coefficients that were quantized and performs an inverse frequency transform. The encoder performs motion compensation to compute the motion compensated predictors and combines the predictors with the residuals. During decoding a decoder typically entropy decodes information and performs analogous operations to reconstruct residuals perform motion compensation and combine the predictors with the reconstructed residuals.

Lossless compression reduces the bit rate of information by removing redundancy from the information without any reduction in fidelity. Lossless compression techniques reduce bit rate at no cost to quality but can only reduce bit rate up to a certain point. Decreases in bit rate are limited by the inherent amount of variability in the statistical characterization of the input data which is referred to as the source entropy.

In contrast with lossy compression quality suffers somewhat but the achievable decrease in bit rate is more dramatic. Lossy compression techniques can be used to reduce bit rate more than lossless compression techniques but some of the reduction in bit rate is achieved by reducing quality and the lost quality cannot be completely recovered. Lossy compression is often used in conjunction with lossless compression in a system design in which the lossy compression establishes an approximation of the information and lossless compression techniques are applied to represent the approximation.

In general an encoder varies quantization to trade off quality and bit rate. A basic goal of lossy compression is to provide good rate distortion performance. So for a particular bit rate an encoder attempts to provide the highest quality of video. Or for a particular level of quality fidelity to the original video an encoder attempts to provide the lowest bit rate encoded video. In practice considerations such as encoding time encoding complexity encoding resources decoding time decoding complexity decoding resources overall delay and or smoothness in quality bit rate changes also affect decisions made in codec design as well as decisions made during actual encoding.

According to one possible definition quantization is a term used for an approximating non reversible mapping function commonly used for lossy compression in which there is a specified set of possible output values and each member of the set of possible output values has an associated set of input values that result in the selection of that particular output value. A variety of quantization techniques have been developed including scalar or vector uniform or non uniform and adaptive or non adaptive quantization.

According to one possible definition a scalar quantizer is an approximating functional mapping of an input value x to a quantized value Q x sometimes called a reconstructed value. Each value of x within a given range between a pair of adjacent thresholds is assigned the same quantized value Q x . At a threshold one of the two possible quantized values is assigned to an input x depending on the system. The placement of the thresholds on the number line may be uniformly spaced or non uniformly spaced.

A scalar quantizer can be decomposed into two distinct stages. The first stage is the classifier stage in which a classifier functional mapping maps an input x to a quantization index A x which is often integer valued. In essence the classifier segments an input number line or data set. Each value of x within a given range is assigned the same quantization index. In the second stage a reconstructor functional mapping maps each quantization index k to a reconstruction value k . In essence the reconstructor selects a value for reconstruction of each region determined by the classifier. Overall the classifier relates to the reconstructor as follows Q x A x .

In common usage the term quantization is often used to describe the classifier stage which is performed during encoding. The term inverse quantization is similarly used to describe the reconstructor stage whether performed during encoding or decoding.

A non uniform quantizer has threshold values that are not uniformly spaced for all classifier regions. According to one possible definition a dead zone plus uniform threshold quantizer is a quantizer with uniformly spaced threshold values for all classifier regions except the one containing the zero input value which is called the dead zone DZ . In a general sense a dead zone plus uniform threshold quantizer is a non uniform quantizer since the DZ size is different than the size for other classifier regions.

In many systems the extent of quantization is parameterized in terms of quantization step size which is adapted to regulate quality and or bit rate. Coarser quantization uses larger quantization step sizes. Finer quantization uses smaller quantization step sizes. Often for purposes of signaling and reconstruction quantization step sizes are parameterized as multiples of a smallest quantization step size for a picture macroblock or other unit of video.

Some standards and products also allow specification of a quantization matrix or scaling matrix that indicates different weights for different frequency coefficients of a block so as to apply relatively coarser quantization to perceptually less important coefficients. Frequency coefficients are then quantized and inverse quantized using weighted quantization step sizes. For example a scaling matrix for an intra coded block uses higher weights for high frequency coefficients and lower weights for low frequency coefficients which tends to shift distortion that is introduced to high frequency coefficients where it is less apt to cause perceptible quantization artifacts.

Some standards and products support selection between different reconstruction rules. For example in some systems a decoder can switch between a uniform quantizer reconstruction rule and a non uniform quantizer reconstruction rule. Typically for a given reconstruction rule standards and products specify reconstruction values that correspond to midpoint reconstruction for the sake of simplicity. Such reconstruction points are halfway between notional thresholds for quantization bins. 

Standards and product specifications that focus only on achieving interoperability will often specify reconstruction values without specifying a classification rule. In other words some specifications may define the reconstructor functional mapping without defining the classifier functional mapping. This allows a decoder built to comply with the standard product to reconstruct information correctly. In contrast encoders are often given the freedom to change the classifier. For classification the thresholds can be defined so that certain input values will be mapped to more common and hence lower bit rate indices which makes the reconstruction values closer to optimal for some content. When an encoder defines quantization bin boundaries this allows the encoder to adjust to distributions in values. For example for a given quantization parameter QP an encoder may define the DZ threshold to be 1.2 QP for a quantizer rather than 1 QP as might be expected given midpoint reconstruction .

Animation content appears as TV shows and short cartoons commercials and full length feature movies. In many respects typical animation content differs from typical natural video content. Backgrounds are usually simpler and more static for animation content and motion is usually less complex. In addition lines between objects are typically sharp in animation content.

As a result of these and other differences encoding animation content with a general purpose video encoder can provide unsatisfactory rate distortion performance. For a given bit rate perceptual quality can be relatively poor when distortion that would be imperceptible in natural video is visible in the animation video.

One approach to ensuring quality for animation content is to losslessly encode the content. While this improves quality of course the bit rate for the encoded content may be prohibitively high.

Another approach to improving encoding performance for animation content is to develop and use an animation only encoder. Such an encoder might for example consider information about the animation models used to create the animation content to effectively encode the content. While this improves performance it requires access to the animation models and can require an equally specialized decoder for decoding. Many decoding devices however lack the resources to support an extra animation only decoder or different decoders for different types of animation content. Moreover in some cases the animation models used to create the animation content are not available at the time of encoding.

While previous approaches to encoding animation content provide acceptable performance in some scenarios they do not have the advantages of the techniques and tools described below for encoding animation content.

In summary the detailed description presents techniques and tools for encoding animation video. For example the techniques and tools improve the performance of a general purpose video encoder when it encodes animation content improving quality and or reducing bit rate for the encoded animation video.

In some embodiments a tool such as a video encoder designates animation video for encoding as animation content which typically involves changing one or more encoder settings or rules to improve encoding performance for the animation content. When the encoder encodes the animation video the encoder detects edges in the animation video using texture. For example the encoder creates a map of edges in a picture dilates the edges to close possible gaps erodes the dilated edges and identifies macroblocks in the picture that have sharp edges. When the encoder quantizes the animation video the encoder changes settings such as quantization step size DZ size or median filtering for areas e.g. macroblocks that include detected edges so as to improve encoding quality for the areas with the detected edges.

In other embodiments a tool such as a video encoder designates animation video for encoding as animation content adjusting differential quantization rules to use. When encoding the animation video the encoder quantizes the animation video according to the adjusted differential quantization rules. For example the encoder identifies blocks of gradient areas in intra coded content and adjusts quantization to preserve non zero AC coefficients for those blocks. Or the encoder identifies blocks of smooth areas and other e.g. textured areas of inter coded content and performs aggressive differential quantization for the identified blocks of smooth areas relative to the other areas.

In still other embodiments a system includes a general purpose video encoder and an interface for exposing encoder settings for selection. The encoder settings include an animation mode setting. The encoder includes a quantization module that incorporates rules adapted for animation content for use when the animation mode is selected.

The foregoing and other objects features and advantages will become more apparent from the following detailed description which proceeds with reference to the accompanying figures. This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The present application relates to techniques and tools for improving performance when encoding animation content. For example settings of a general purpose video encoder are adjusted to improve performance for encoding animation content with encoding parameters such as quantization step size DZ size for quantization and or median filtering being tuned for encoding animation content.

One way to improve encoding performance for animation content is to improve the quality at which animation edges are encoded relative to other content. Animation content often includes sharp edges separating smooth areas and distortion introduced along edges can be especially noticeable. So the general purpose encoder detects edges in the animation content using texture in sample values and adjusts quantization step size and or DZ size for macroblocks that include the detected edges.

Another way to improve encoding performance for animation content is to change the quantization rules for intra coded animation content. Encoding intra coded content with extra fidelity improves quality for the intra coded pictures but also improves the accuracy of motion compensated predictions for inter coded pictures that use the intra coded pictures as reference pictures. For example the encoder preserves significant non zero AC coefficients in areas e.g. gradient areas of intra coded content to improve quality.

Still another way to improve encoding performance for animation content is to make differential quantization more aggressive. Whereas smooth areas are often quantized with greater fidelity than textured areas in natural video sequences recognizing the effect that texture has in masking distortion in animation content smooth areas are even more important to perceptual quality since artifacts such as blocking artifacts are especially noticeable. As such the encoder uses differential quantization that places relatively greater emphasis on quality for smooth areas.

Various alternatives to the implementations described herein are possible. Certain techniques described with reference to flowchart diagrams can be altered by changing the ordering of stages shown in the flowcharts by splitting repeating or omitting certain stages etc. The various techniques and tools described herein can be used in combination or independently. Different embodiments implement one or more of the described techniques and tools.

Some of the techniques and tools described herein address one or more of the problems noted in the background. Typically a given technique tool does not solve all such problems. Rather in view of constraints and tradeoffs in encoding time resources and or quality the given technique tool improves encoding performance for a particular implementation or scenario.

With reference to the computing environment includes at least one processing unit and memory . In this most basic configuration is included within a dashed line. The processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two. The memory stores software implementing an encoder with one or more of the described techniques and tools for encoding animation content.

A computing environment may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs DVDs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software implementing the video encoder.

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . For audio or video encoding the input device s may be a sound card video card TV tuner card or similar device that accepts audio or video input in analog or digital form or a CD ROM or CD RW that reads audio or video samples into the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer executable instructions audio or video input or output or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF infrared acoustic or other carrier.

The techniques and tools can be described in the general context of computer readable media. Computer readable media are any available media that can be accessed within a computing environment. By way of example and not limitation with the computing environment computer readable media include memory storage communication media and combinations of any of the above.

The techniques and tools can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment.

For the sake of presentation the detailed description uses terms like identify and adjust to describe computer operations in a computing environment. These terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being. The actual computer operations corresponding to these terms vary depending on implementation.

The encoder processes video pictures. The term picture generally refers to source coded or reconstructed image data. For progressive video a picture is a progressive video frame. For interlaced video a picture may refer to an interlaced video frame the top field of the frame or the bottom field of the frame depending on the context. The encoder is block based and uses a 4 2 0 macroblock format for frames with each macroblock including four 8 8 luminance blocks at times treated as one 16 16 macroblock and two 8 8 chrominance blocks. For fields the same or a different macroblock organization and format may be used. The 8 8 blocks may be further sub divided at different stages e.g. at the frequency transform and entropy encoding stages. The encoder can perform operations on sets of samples of different size or configuration than 8 8 blocks and 16 16 macroblocks. Alternatively the encoder is object based or uses a different macroblock or block format.

Returning to the encoder system compresses predicted pictures and intra coded key pictures. For the sake of presentation shows a path for key pictures through the encoder system and a path for predicted pictures. Many of the components of the encoder system are used for compressing both key pictures and predicted pictures. The exact operations performed by those components can vary depending on the type of information being compressed.

A predicted picture e.g. progressive P frame or B frame interlaced P field or B field or interlaced P frame or B frame is represented in terms of prediction from one or more other pictures which are typically referred to as reference pictures or anchors . A prediction residual is the difference between predicted information and corresponding original information. In contrast a key picture e.g. progressive I frame interlaced I field or interlaced I frame is compressed without reference to other pictures.

If the current picture is a predicted picture a motion estimator estimates motion of macroblocks or other sets of samples of the current picture with respect to one or more reference pictures. The picture store buffers a reconstructed previous picture for use as a reference picture. When multiple reference pictures are used the multiple reference pictures can be from different temporal directions or the same temporal direction. The motion estimator outputs as side information motion information such as differential motion vector information.

The motion compensator applies reconstructed motion vectors to the reconstructed reference picture s when forming a motion compensated current picture . The difference if any between a block of the motion compensated current picture and corresponding block of the original current picture is the prediction residual for the block. During later reconstruction of the current picture reconstructed prediction residuals are added to the motion compensated current picture to obtain a reconstructed picture that is closer to the original current picture . In lossy compression however some information is still lost from the original current picture . Alternatively a motion estimator and motion compensator apply another type of motion estimation compensation.

A frequency transformer converts spatial domain video information into frequency domain i.e. spectral transform data. For block based video pictures the frequency transformer applies a DCT variant of DCT or other forward block transform to blocks of the samples or prediction residual data producing blocks of frequency transform coefficients. Alternatively the frequency transformer applies another conventional frequency transform such as a Fourier transform or uses wavelet or sub band analysis. The frequency transformer may apply an 8 8 8 4 4 8 4 4 or other size frequency transform.

A quantizer then quantizes the blocks of transform coefficients. The quantizer applies non uniform scalar quantization to the spectral data with a step size that varies on a picture by picture basis macroblock by macroblock basis or other basis. The quantizer can also apply another type of quantization for example a uniform or adaptive quantization for at least some spectral data coefficients or directly quantizes spatial domain data in an encoder system that does not use frequency transformations. In described embodiments the quantizer adapts quantization for blocks of animation content by changing rules for setting DZ size and or quantization step size.

When a reconstructed current picture is needed for subsequent motion estimation compensation an inverse quantizer performs inverse quantization on the quantized spectral data coefficients. An inverse frequency transformer performs an inverse frequency transform producing blocks of reconstructed prediction residuals for a predicted picture or samples for a key picture . If the current picture was a key picture the reconstructed key picture is taken as the reconstructed current picture not shown . If the current picture was a predicted picture the reconstructed prediction residuals are added to the motion compensated predictors to form the reconstructed current picture. One or both of the picture stores buffers the reconstructed current picture for use in subsequent motion compensated prediction.

The entropy coder compresses the output of the quantizer as well as certain side information e.g. quantization step size . Typical entropy coding techniques include arithmetic coding differential coding Huffman coding run length coding LZ coding dictionary coding and combinations of the above. The entropy coder typically uses different coding techniques for different kinds of information and can choose from among multiple code tables within a particular coding technique.

The entropy coder provides compressed video information to the multiplexer MUX . The MUX may include a buffer and a buffer level indicator may be fed back to a controller. Before or after the MUX the compressed video information can be channel coded for transmission over the network.

A controller not shown receives inputs from various modules such as the motion estimator frequency transformer quantizer inverse quantizer entropy coder and buffer . The controller evaluates intermediate results during encoding for example setting quantization step sizes and performing rate distortion analysis. The controller works with modules such as the motion estimator frequency transformer quantizer and entropy coder to set and change coding parameters during encoding. When an encoder evaluates different coding parameter choices during encoding the encoder may iteratively perform certain stages e.g. quantization and inverse quantization to evaluate different parameter settings. The encoder may set parameters at one stage before proceeding to the next stage. Or the encoder may jointly evaluate different coding parameters. The tree of coding parameter decisions to be evaluated and the timing of corresponding encoding depends on implementation.

In some embodiments the controller also receives input from an encoding session wizard interface from another encoder application interface or from another source to designate video for encoding as animation content. For an animation mode the encoder modifies or switches encoding rules such as differential quantization rules so that the rules used during encoding are adapted for animation content. For example in some embodiments with the animation encoding rules the encoder a detects edges and adjusts quantization step size and or DZ size to preserve detected edges b uses bit allocation adapted for animation content to change how bits are allocated between different types of pictures c changes quantization for I pictures to preserve gradients e.g. by preserving non zero AC coefficients and or d changes differential quantization behavior for P pictures and B pictures.

The relationships shown between modules within the encoder indicate general flows of information in the encoder other relationships are not shown for the sake of simplicity. In particular usually does not show side information indicating modes tables etc. used for a video sequence picture macroblock block etc. Such side information once finalized is sent in the output bitstream typically after entropy encoding of the side information.

Particular embodiments of video encoders typically use a variation or supplemented version of the generalized encoder . Depending on implementation and the type of compression desired modules of the encoder can be added omitted split into multiple modules combined with other modules and or replaced with like modules. For example the controller can be split into multiple controller modules associated with different modules of the encoder. In alternative embodiments encoders with different modules and or other configurations of modules perform one or more of the described techniques.

This section describes techniques and tools for encoding animation content. In particular various adjustments to a general purpose video encoder are described that improve rate distortion performance of the video encoder for animation content. For example encoding settings for an implementation of an MPEG 2 VC 1 or H.264 encoder are adjusted before encoding or during encoding to more effectively encode animation content.

Animation video typically differs from natural video in several respects. First smooth areas of animation content are typically very smooth with little if any noise whereas smooth areas of natural video content often have more irregularities. Second in animation content characters and objects are often drawn or rendered with distinctive solid lines. When shown over a smooth background the solid lines are even more perceptible. Third motion especially background motion in animation video tends to be simpler and more predictable than motion in natural video.

In view of these and other characteristics of animation video encoder settings of a general purpose video encoder can be adjusted to improve performance with encoding parameters such as quantization step size DZ size and or median filtering being tuned for encoding animation content. Example adjustments to encoding include 

In a typical animation sequence background motion is relatively predictable and simple. This tends to make motion compensation more efficient with motion compensation residuals having no energy or low energy. Using normal bit allocation settings an encoder may allocate more bits than are needed to encode P pictures and B pictures of animation content at a given quality level since the residuals should use so few bits. As a result overall quality can suffer.

In some embodiments an encoder changes how bits are allocated between intra coded content and inter coded content. For example the encoder allocates more bits to intra coded content in I pictures and correspondingly allocates fewer bits to inter coded content in P and B pictures. To meet the bit allocation targets the encoder subsequently varies quantization step size DZ size median filtering or another encoder setting. As the quality of anchor reference pictures improves with I picture quality the quality of motion compensation also improves and motion compensation residuals have less energy. In particular this pattern holds when background motion is predictable and motion compensation accurately characterizes the motion.

Thus the encoder can improve encoding performance for animation content by adjusting picture by picture bit allocations. Or the encoder can adopt a more targeted approach to improving quality for example selectively increasing or decreasing quantization step size e.g. within pictures using differential quantization.

The encoder designates video content for encoding as animation content. For example the encoder changes one or more encoder settings in reaction to user selection of an animation encoding option that is exposed through an encoding wizard or other software interface. For example in a media encoder tool a user fills a checkbox indicating the video content encoded in a session is animation content. Or the encoder changes the encoder setting s in reaction to instructions from software that programmatically controls the encoder. Typically the encoder designates the video content for encoding as animation content during an encoding session and the encoder designates an entire sequence or clip for encoding as animation content. Alternatively the encoder designates a different portion of video content e.g. scene group of pictures picture slice layer for encoding as animation content.

The encoder adjusts differential quantization rules for encoding the animation content. For example the encoder changes how intra coded content is quantized to improve the quality of the intra coded content. Or the encoder changes quantization behavior for only some kinds of intra coded content e.g. blocks with gradients indicating edges or slopes . The encoder can also change how inter coded content is quantized so that differential quantization is more aggressive or so that inter coded content is quantized with less overall fidelity. To adjust differential quantization rules the encoder can switch between different sets of rules and or tune default rules.

The encoder quantizes the animation content according to the adjusted differential quantization rules. For example the encoder performs scalar quantization for frequency coefficient values of blocks of a macroblock using a quantization step size set for the macroblock using the adjusted differential quantization rules. The next section describes how an encoder applies adjusted differential quantization rules in some embodiments. Alternatively the encoder follows another approach to adjusting and applying differential quantization rules.

In some embodiments an encoder uses differential quantization to selectively decrease quantization step size for intra coded content in I pictures and thereby improve quality. For P and B pictures the encoder uses aggressive differential quantization rules that adjust quantization for inter coded content depending on texture.

The encoder applies a different quantization approach depending on whether the content being encoded is inter coded content e.g. in a P picture or B picture or intra coded content e.g. in an I picture or as an intra coded block in a P picture or B picture . With reference to the encoder checks whether the content to be encoded is intra coded content.

If the content is not intra coded the encoder identifies smooth areas and or textured areas in the content and performs aggressive differential quantization. More generally the encoder determines the level of texture in the inter coded content and sets a quantization step size using differential quantization rules tuned for animation content. The tuned differential quantization rules employ more aggressive differential quantization between smooth content and non smooth content. In particular compared to texture adaptive quantization for natural video the threshold for what is considered smooth content is set to be relatively low so that blocks qualify as smooth blocks less easily and are less likely to qualify for finer grained quantization. At the same time however non smooth content is quantized much more aggressively relative to the smooth content.

For example in some implementations the encoder computes a texture level for a block as the median pixel value gradient value for the block. The encoder s range of thresholds for smooth is 14 to 30 and the encoder sets the threshold at 16 for inter coded blocks of animation content 16 is a static value determined by training through encoding of animation content . In addition to this relatively low threshold setting the encoder uses QP mapping again determined by training through encoding of animation content that more aggressively sets alternative QP for smooth areas as shown in the following table.

Table 1 shows an array of 32 alternative QP values for smooth areas where the array is indexed by the primary QP value having range 0 . . . 31 for the picture. The picture level QP is used in quantization for non smooth areas the alternative QP looked up in the table is used in quantization for smooth areas. Compared to default differential quantization the difference between the picture level QP and alternative QP increases more aggressively for higher values of picture level QP. Alternatively aggressive differential quantization for smooth areas is implemented with a different table or different quantization scheme e.g. one that allows two or more alternative QP values in a picture or allows per macroblock specification of QP values in a picture .

For additional information about texture adaptive differential quantization in general for these implementations see U.S. patent application Ser. No. 11 400 788 entitled QUANTIZATION ADJUSTMENT BASED ON TEXTURE LEVEL filed Apr. 7 2006 the disclosure of which is hereby incorporated by reference.

If the content is intra coded the encoder identifies areas with non zero AC coefficients and adjusts quantization to preserve significant non zero AC coefficients in some or all of the identified areas. This improves overall quality for the intra coded content. Since background motion is fairly predictable for animation content spending more bits to encode intra coded content used for reference pictures also improves the quality of motion compensated predictions for inter coded content. The encoder can preserve non zero AC coefficient values for different types of intra coded areas e.g. smooth texture or edge to improve I picture quality or the encoder can focus on improving quality for certain types of areas.

For example the encoder can focus on improving quality for gradient areas in intra coded content identifying gradient areas with non zero low frequency AC coefficients and adjusting quantization to preserve significant AC coefficient values for those gradient areas. Animation content often includes flat areas with uniform or fairly uniform sample values and gradient areas with edges or quick slopes between them. The flat areas can be effectively represented at relatively high quality using DC coefficients only. If the gradient areas are encoded as DC only blocks however step wise block artifacts may appear. So the encoder allocates more bits to intra coded content in particular devoting additional bits to encode gradient areas by reducing quantization step size to preserve significant non zero AC coefficients.

For additional information about detection of preservation of non zero AC coefficients in some implementations see U.S. patent application Ser. No. 11 400 741 entitled ADJUSTING QUANTIZATION TO PRESERVE NON ZERO AC COEFFICIENTS filed Apr. 7 2006 the disclosure of which is hereby incorporated by reference.

The encoder repeats the technique on a block by block basis macroblock by macroblock basis or some other basis.

In typical animation content characters and objects are drawn or rendered with distinctive solid lines. Using regular encoder settings for quantization during encoding can cause the strong lines and shapes to be distorted.

In some embodiments to improve the quality used when encoding animation content an encoder detects edges in the animation content and allocates more bits to the encoding of areas that include the detected edges. For example the encoder computes texture levels for blocks identifies macroblocks that include edges of animation content and adjusts quantization step size and or DZ size to preserve quality for the macroblocks that include detected edges.

To start the encoder detects edges in the animation content. For example the encoder uses an approach described with reference to generating a texture map of texture levels for blocks identifying edges in the texture map and identifying macroblocks as edge macroblocks. Alternatively the encoder uses another approach to detecting edges in the animation content.

The encoder then differentially quantizes the animation content. For example the encoder applies differential quantization rules adapted for edges in animation content and also adjusts DZ size to relatively improve encoding quality of edge macroblocks. Alternatively the encoder uses another approach to adjusting quantization settings and or performing quantization using the settings.

To start the encoder computes texture levels for blocks in a picture using sample values for the blocks. For example in some implementations the encoder computes a texture level for a block as the median pixel value gradient value for the block. For additional information about computation of texture levels in these implementations see U.S. patent application Ser. No. 11 400 788 entitled QUANTIZATION ADJUSTMENT BASED ON TEXTURE LEVEL. The block texture levels provide a texture map.

Using the block texture levels the encoder generates an edge map. For example given the range of block texture levels the encoder uses texture level thresholds to classify each of the blocks as an edge block texture block or smooth block. The resulting tri value edge map includes a classification value for each of the blocks. shows pseudocode illustrating the generation of an edge map from block texture levels in one implementation. The block texture levels are non negative integers and the blocks are classified as shown in the following table.

The texture threshold and edge threshold shown in and Table 2 depend on implementation. In the example the texture levels are computed for 8 8 blocks using a metric described in U.S. patent application Ser. No. 11 400 788. The static thresholds for and Table 2 are set by training on typical animation content. For different sizes of blocks and or a different metric the thresholds can vary. In step and other steps the encoder can consider samples for co located chroma blocks or separately process chroma blocks or ignore chroma blocks depending on implementation. Alternatively instead of using static thresholds the encoder dynamically computes thresholds to account for the relative importance of different edges at different times or in different parts of the picture.

Next the encoder optionally adjusts the edges in the edge map. In general the encoder does this to make edges more continuous along the lines of shapes in the animation content closing small gaps in the edges. For example the encoder performs dilation operations to expand the edges then performs erosion operations to make the edges recede. show pseudocode for example dilation and erosion operations respectively.

Referring again to the encoder next determines edge macroblocks in the picture from the edge map. In general the encoder uses block level edge information to classify macroblocks. The encoder can then perform additional screening to add or remove macroblocks as edge macroblocks.

For example the encoder flags a macroblock as an edge macroblock if two or more of its blocks are classified as edge blocks in the edge map. Alternatively the encoder flags a macroblock as an edge macroblock only if three or more of its blocks are classified as edge blocks. In this decision if the block edge values do not consider samples for co located chroma blocks the encoder can also consider edges for chroma blocks or ignore chroma blocks depending on implementation.

To perform additional screening for example the encoder applies a fan filter to identify edge macroblocks. In one implementation the fan filter has eight directions radiating at 45 degree angle increments from a current edge macroblock being analyzed. As shows two neighboring macroblocks are counted in each of the directions. For each of the directions the encoder determines if both macroblocks in the direction have been tentatively flagged as edge macroblocks. If so the direction has an edge angle. For the current macroblock shown as C in tentatively flagged as an edge macroblock the encoder determines if three or fewer of the directions have edge angles. If so the current macroblock stays an edge macroblock. Otherwise the current macroblock is no longer flagged as an edge macroblock. Thus if no directions have edge angles the current macroblock includes an isolated edge but stays classified as an edge macroblock. If one two or three directions have edge angles the current macroblock likely includes part of a longer edge and stays classified as an edge macroblock. If four or more directions have edge angles however the current macroblock is considered to be part of a larger texture pattern for which quality improvement is relatively less important.

In the second case a horizontal edge passes through the current macroblock which is tentatively marked as an edge macroblock. Since two directions from the current macroblock have edge angles the current macroblock is designated as an edge macroblock.

In the third case the current macroblock includes edges for corners of two shapes which may be part of a larger pattern. Although the current macroblock is initially an edge macroblock four directions from the current macroblock have edge angles so the current macroblock is no longer flagged as an edge macroblock. Although the third case might represent an intersection of smooth sharp lines in the animation content using a higher edge angle count threshold can result in an increased number of complex macroblocks being incorrectly flagged as edge macroblocks.

Alternatively the encoder skips the additional screening or uses screening with a different filter or threshold count for number of edges angles e.g. two .

After the encoder identifies edge areas in the animation content the encoder differentially quantizes the edge areas. In some embodiments the encoder makes different adjustments for edge areas in I pictures than it does for edge areas in P pictures and B pictures. The encoder can also change how it makes adjustments depending on the spatial and or temporal context of the edge areas.

For example for edge areas in I pictures the encoder sets a quantization step size to preserve significant non zero AC coefficients. Lowering quantization step size for edge macroblocks allows for better edge quality by preserving the low frequency AC coefficient that contribute to sharp gradients. In some implementations the allowable values for QP are from 1 to 32. Edge macroblocks are quantized using the smallest allowable QP by default 1 when the picture QP is less than or equal to 3 and other macroblocks are quantized using the picture QP. When the picture QP is more than 3 edge macroblocks are quantized using the smallest allowable QP 2. If the range of allowable QP changes the alternative edge macroblock QP changes accordingly.

As another example suppose the encoder uses a texture dependent differential quantization scheme for P pictures and B pictures. For quantization of edge areas the encoder uses the highest allowable quantization step size less than the quantization step size for the picture which improves edge quality. In some implementations the encoder uses the maximum alternative QP for edge macroblocks where the maximum alternative QP is lower than the picture QP.

Aside from adjusting quantization step size the encoder can adjust DZ size depending on whether an area is an edge area at least for quantization of AC coefficients. For example for edge macroblocks the encoder uses a narrower DZ than it does for non edge macroblocks which improves quality for the edge macroblocks. Using a narrower DZ tends to result in fewer values being quantized to zero and it tends to cause fewer values to be quantized to the next lower quantization levels. Using a wider DZ pushes quantization bin threshold boundaries outward from zero which tends to reduce quality and bit rate because more values are quantized to zero and more values are quantized to the next lower quantization levels. Changes to DZ size affect quantization but not reconstruction and the DZ size changes are not signaled in the encoded video bit stream.

In addition in some embodiments the encoder adjusts differential quantization for edge areas depending on the spatial and or temporal context of the edge areas. For example if an edge macroblock has smooth macroblocks on its left and right the edge macroblock more likely represents a sharp edge and the QP for the macroblock is decreased. On the other hand if the edge macroblock has textured macroblocks on its left and right the QP for the macroblock is slightly increased since the texture tends to mask distortion. As another example if an edge macroblock has no counterpart in the preceding picture or following picture the edge is relatively transient and the QP for the macroblock can be slightly decreased.

Having described and illustrated the principles of our invention with reference to various embodiments it will be recognized that the various embodiments can be modified in arrangement and detail without departing from such principles. It should be understood that the programs processes or methods described herein are not related or limited to any particular type of computing environment unless indicated otherwise. Various types of general purpose or specialized computing environments may be used with or perform operations in accordance with the teachings described herein. Elements of embodiments shown in software may be implemented in hardware and vice versa.

In view of the many possible embodiments to which the principles of our invention may be applied we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto.

