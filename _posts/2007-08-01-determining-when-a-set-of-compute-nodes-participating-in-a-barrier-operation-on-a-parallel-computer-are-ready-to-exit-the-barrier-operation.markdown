---

title: Determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation
abstract: Methods, apparatus, and products are disclosed for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation that includes, for each compute node in the set: initializing a barrier counter with no counter underflow interrupt; configuring, upon entering the barrier operation, the barrier counter with a value in dependence upon a number of compute nodes in the set; broadcasting, by a DMA engine on the compute node to each of the other compute nodes upon entering the barrier operation, a barrier control packet; receiving, by the DMA engine from each of the other compute nodes, a barrier control packet; modifying, by the DMA engine, the value for the barrier counter in dependence upon each of the received barrier control packets; exiting the barrier operation if the value for the barrier counter matches the exit value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082424&OS=08082424&RS=08082424
owner: International Business Machines Corporation
number: 08082424
owner_city: Armonk
owner_country: US
publication_date: 20070801
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather operation.

As mentioned above compute nodes connected through such data communications operate to processes parallel applications. Each compute node typically processes its own set of data according to a parallel algorithm specified by the parallel application. Because each compute node processes data independently some compute nodes may process instructions faster or slower than other compute nodes. The compute nodes that process instructions faster than other compute nodes tend to be processing data according to the parallel algorithm at a point further along than the other compute nodes. The compute nodes that process instructions slower than other compute nodes tend to be processing data according to the parallel algorithm at a point behind the other compute nodes. Because a particular portion of a parallel algorithm often requires that all of the compute nodes begin processing the particular portion at the same time such a parallel algorithm may specify that all of the compute nodes be synchronized before processing that particular portion of the algorithm. To synchronize a set of compute nodes software designers often use a barrier operation. A barrier operation for a set of compute nodes prevents each compute node from processing beyond a particular point in a parallel algorithm until all of the other compute nodes reach the same point in the algorithm. A barrier operation may be implemented using for example the MPI BARRIER function described in the Message Passing Interface MPI specification that is promulgated by the MPI Forum. Because a barrier operation forces most of the compute nodes in a particular set to wait for the slowest compute nodes before processing of the parallel algorithm may continue computer architects often attempt to design systems such that a set of compute nodes may exit a barrier operation as fast as possible. As such readers will appreciate any improvements in determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation.

Methods apparatus and products are disclosed for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation that include for each compute node in the set of compute nodes initializing by the compute node a barrier counter with no counter underflow interrupt configuring by the compute node upon entering the barrier operation the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes broadcasting by a Direct Memory Access DMA engine on the compute node to each of the other compute nodes in the set upon entering the barrier operation a barrier control packet receiving by the DMA engine on the compute node from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation modifying by the DMA engine for the compute node the value for the barrier counter in dependence upon each of the received barrier control packets determining by the DMA engine for the compute node whether the value for the barrier counter matches an exit value and exiting by the compute node the barrier operation if the value for the barrier counter matches the exit value.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . The parallel computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The system of operates generally for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention as follows Each compute node in a set of compute nodes initializes a barrier counter with no counter underflow interrupt. Each compute node in the set of compute nodes configures upon entering the barrier operation the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes broadcasts by a DMA engine on the compute node to each of the other compute nodes in the set upon entering the barrier operation a barrier control packet receives by the DMA engine on the compute node from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation modifies by the DMA engine for the compute node the value for the barrier counter in dependence upon each of the received barrier control packets determines by the compute node whether the value for the barrier counter matches an exit value and exiting the barrier operation if the value for the barrier counter matches the exit value.

A barrier operation is a synchronization operation for a set of compute nodes that prevents each compute node from processing beyond a particular point in a parallel algorithm until all of the other compute nodes reach the same point in the algorithm. A barrier operation that may be improved according to embodiments of the present invention may include for example the MPI BARRIER function described in the MPI specification the pvm barrier function described in the PVM specification or any other implementation as will occur to those of skill in the art.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of determining when a set of compute nodes participating in a barrier operation are ready to exit the barrier operation according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors or processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of determining when a set of compute nodes participating in a barrier operation on the parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The compute node of includes one or more processing cores as well as random access memory RAM . The processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as Universal Serial Bus USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of each processing core and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. In the example of the DMA engine is configured in computer memory of the DMA controller . Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it.

As mentioned above the compute node of is configured for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The compute node of operates generally for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention as follows the compute node which belongs to a set of compute nodes initializes a barrier counter with no counter underflow interrupt. Upon entering the barrier operation the compute node configures the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes and broadcasts by the DMA engine to each of the other compute nodes in the set a barrier control packet. The DMA engine of the compute node receives from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation and modifies the value for the barrier counter in dependence upon each of the received barrier control packets. The compute node determines whether the value for the barrier counter matches an exit value and exits the barrier operation if the value for the barrier counter matches the exit value.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with assigned to the root node assigned to the first node in the second layer of the tree assigned to the second node in the second layer of the tree assigned to the first node in the third layer of the tree assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the compute node and an application installed on the compute node . In the example of the application on the compute node has an application message for transmission to the application on the compute node . Data communications between applications are effected using messaging modules installed on each of the compute nodes . Applications may communicate by invoking function of an application programming interfaces API exposed by the application messaging modules . To transmit the message to the application for example the application of may invoke a function of an API for messaging module that passes a buffer identifier of an application buffer containing the application message to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the compute node and messaging module installed on the compute node .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the compute node communications hardware of the compute node and the data communications network connecting the compute node to the compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes a transmission stack for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stack for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes an injection first in first out FIFO buffer for storing data descriptors that specify DMA transfer operations for transferring data. The exemplary DMA engine of also includes a reception FIFO buffer used to receive message packets from other DMA engines on other compute nodes. Although only illustrates a single injection FIFO buffer and a single reception FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers.

In the example of the compute node is configured to determine when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. The compute node of operates generally for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention as follows The compute node which belongs to a set of compute nodes initializes a barrier counter with no counter underflow interrupt. Upon entering the barrier operation the compute node configures the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes and broadcasts by the DMA engine to each of the other compute nodes in the set a barrier control packet . The DMA engine of the compute node receives from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation and modifies the value for the barrier counter in dependence upon each of the received barrier control packets . The DMA engine of the compute node then determines whether the value for the barrier counter matches an exit value and exits the barrier operation if the value for the barrier counter matches the exit value.

As mentioned above the barrier counter of does not have a counter underflow interrupt. A counter underflow interrupt is an interrupt that is triggered when the value of the counter is set to a negative number. The barrier counter of does not have a counter underflow interrupt in an effort to allow the barrier counter to store negative numbers without interrupting the processing core. As discussed in further detail below in some embodiments of the present invention storing negative numbers in the barrier counter without interrupting the compute node s processing core allows the compute node to determine when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation.

For further explanation sets forth a flow chart illustrating an exemplary method for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to the present invention. In the example of the compute nodes in the set are configured along a same axis of a network topology for the parallel computer. For example consider that the compute nodes of a parallel computer are connected for data communications through a network organized as a three dimensional rectangular mesh having an X axis a Y axis and a Z axis. In such an example the compute nodes in the set may be configured along an X axis such that the values of the X coordinate for each of the compute nodes are the same.

The method of includes initializing for the compute node in the set of compute nodes a barrier counter with no counter underflow interrupt. The barrier counter of is a DMA counter that tracks the number of barrier control packets received from the other compute nodes in the set of compute nodes. A counter underflow interrupt is an interrupt that is triggered when the value of the counter is set to a negative number. The barrier counter of does not have a counter underflow interrupt in an effort to allow the barrier counter to store negative numbers without interrupting the processing core thereby reducing processing overhead when determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to some embodiments of the present invention. The compute node may initialize the barrier counter with no counter underflow interrupt according to the method of by storing zero as the value of the barrier counter .

The method of also includes entering by the compute node the barrier operation. The compute node may enter the barrier operation by calling a barrier operation function of a parallel communications library or messaging module as specified by a parallel algorithm. For example consider the following exemplary segment of a parallel algorithm 

In the exemplary parallel algorithm segment above a compute node enters the barrier operation upon calling the MPI Barrier function specified in line 3. In the exemplary parallel algorithm segment above the MPI Barrier function is a function of an MPI library that is improved for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. Readers will note that the exemplary parallel algorithm segment depicted above is for explanation only and not for limitation.

The method of also includes configuring by the compute node upon entering the barrier operation the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes. The compute node may configure the barrier counter with a value according to the method of by incrementing the value of the barrier counter by the number of compute nodes in the set minus one. For example consider that the set of compute nodes includes four compute nodes. In such an example the compute node may configure the barrier counter with a value of three which is the number of compute nodes in the set minus one.

The method of includes broadcasting by a DMA engine on the compute node to each of the other compute nodes in the set upon entering the barrier operation a barrier control packet . A barrier control packet of that is broadcast to the other compute nodes is a network packet that notifies the DMA engines in the other compute nodes that the compute node has entered the barrier operation. The manner in which the compute node broadcasts the barrier control packet may depend on the network topology for the data communications network connecting the compute nodes of a parallel compute node. For example if the network topology is a torus network and the all the compute nodes are configured along a same axis of the torus topology for the parallel computer then the compute node may broadcast the barrier control packet according to the method of by transmitting a barrier control packet along one direction of the axis with a deposit bit set. Transmitting the barrier control packet with a deposit bit set instructs the routing hardware for each compute node receiving the packet to place a copy of the packet in the compute node s reception FIFO buffers and forward the packet along to the next compute node along the axis. Because the network topology is a torus topology having wrap around links transmitting a barrier control packet along one direction of the axis will reach each compute node on the axis. In other embodiments if the network topology is a rectangular mesh network and the all the compute nodes are configured along a same axis of the rectangular mesh topology for the parallel computer then the compute node may broadcast the barrier control packet according to the method of by transmitting two barrier control packets along the axis each barrier control packet transmitted along one direction of the axis with a deposit bit set.

Regardless of when the compute node enters the barrier operation the method of also includes receiving by the DMA engine on the compute node from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation. The DMA engine on the compute node may receive a barrier control packet from each of the other compute nodes in the set according to the method of by receiving a barrier control packet that specifies a remote get data transfer operation for retrieving a predetermined amount of data from the compute node and specifies using the barrier counter on the compute node for tracking the data transfer. A remote get operation is a DMA control operation that allows a compute node to retrieve data from another compute node without involving the processor on the compute node providing the data by injecting a data descriptor into the other computer node s DMA FIFO buffers. To track when the data transfer is complete both compute nodes decrement their respective DMA counters by the number of bytes transferred. In the example of each of the received barrier control packets specifies transferring one byte of data from the compute node so that the barrier counter is decremented by a value of one for each received barrier control packet .

The method of includes modifying by the DMA engine for the compute node the value for the barrier counter in dependence upon each of the received barrier control packets . The DMA engine for the compute node may modify the value for the barrier counter in dependence upon each of the received barrier control packets according to the method of by decrementing the value of the barrier counter by one. As mentioned above the DMA engine of the compute node decrements the value of the barrier counter by a value of one because the barrier control packets received from each of the other compute nodes specify transferring one byte of data from the compute node .

The method of also includes determining by the DMA engine for the compute node whether the value for the barrier counter matches an exit value . Although any value as will occur to those of skill in the art may be used as the exit value the exit value in the example of is zero. Readers will note that regardless of the exit value used the values by which the barrier counter is incremented or decremented upon entry into the barrier operation and upon the receipt of barrier control packets should be chosen such that after the compute node has entered the barrier operation and the barrier control packets have been received from all other compute nodes in the set that the value of the barrier counter matches the exit value . In the method of the DMA engine for the compute node may determine whether the value for the barrier counter matches an exit value by identifying whether the value of the barrier counter is equal to the exit value . If the value of the barrier counter is equal to the exit value then the value for the barrier counter matches the exit value . The value for the barrier counter does not match the exit value however if the value of the barrier counter is not equal to the exit value .

In the method of the compute node continues to receive a barrier control packet from each of the other compute node if the value for the barrier counter does not match the exit value . Having a value for the barrier counter that does not match the exit value indicates that the compute node has not received barrier control packets from all of the other compute nodes thereby further indicating that not all of the other compute nodes have entered the barrier operation.

The method of also includes exiting by the compute node the barrier operation if the value for the barrier counter matches the exit value . Having a value for the barrier counter that matches the exit value indicates that the compute node and all of the other compute nodes have entered the barrier operation. The compute node may exit the barrier operation according to the method of by configuring the DMA engine of the compute node to trigger an interrupt when the barrier counter reaches the exit value in order to notify a processing core on the compute node that all the compute node in the set of compute nodes have entered the barrier operation and configuring the processing core to resume processing of the parallel algorithm at a barrier exit point specified by the algorithm. As mentioned above in the example of the exit value is zero. As such the compute node may configure the DMA engine on the compute node to trigger an interrupt upon reaching a value of zero. For further explanation of configuring the processing core to resume processing of the parallel algorithm at a barrier exit point specified by the algorithm consider again the following segment of an exemplary parallel algorithm 

As mentioned above a compute node enters the barrier operation upon calling the MPI Barrier function specified in line 3 in the exemplary parallel algorithm segment above. In the exemplary parallel algorithm segment above the barrier exit point is at line 4 the point specified by the exemplary parallel algorithm for the processing core to resume processing upon completion of the barrier operation. Readers will note that the exemplary parallel algorithm segment depicted above is for explanation only and not for limitation.

Although is discussed with reference to the compute node in the set of compute nodes readers will note that all of the compute nodes in the set operate for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention. That is each compute node initializes a barrier counter with no counter underflow interrupt. Moreover for each compute node in the set of compute nodes each compute node configures by the compute node upon entering the barrier operation the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes broadcasts by a DMA engine on the compute node to each of the other compute nodes in the set upon entering the barrier operation a barrier control packet receives by the DMA engine on the compute node from each of the other compute nodes in the set a barrier control packet sent in response to each of the other compute nodes entering the barrier operation modifies by the DMA engine for the compute node the value for the barrier counter in dependence upon each of the received barrier control packets determines by the DMA engine for the compute node whether the value for the barrier counter matches an exit value and exits by the compute node the barrier operation if the value for the barrier counter matches the exit value.

In the example of each of the compute nodes begins executing a parallel algorithm at to and ends executing the parallel algorithm at t. At t the compute nodes initialize their respective barrier counters to a value of zero. At t the third compute node enters the barrier operation. Upon entering the barrier operation the third compute node increments its barrier counter with a value of three and broadcasts a barrier control packet to each of the other compute nodes in the set. The third compute node increments the barrier counter with a value of three because three is the value of the total number of compute nodes in the set minus one. The barrier control packet that the third compute node broadcasts to each of the other compute nodes specifies a remote get data transfer of one byte of data. As such upon receiving the barrier control packet from the third compute node each of the other compute nodes decrements the value of their barrier counters by one. Immediately after t therefore the value for the first node s barrier counter is 1 the value for the second node s barrier counter is 1 the value for the third node s barrier counter is 3 and the value for the fourth node s barrier counter is 1. Each node then determines whether their respective barrier counter value matches an exit value of zero. Because none of the barrier counter values match an exit value of zero none of the compute nodes exit the barrier operation.

At t the first compute node enters the barrier operation. Upon entering the barrier operation the first compute node increments its barrier counter with a value of three and broadcasts a barrier control packet to each of the other compute nodes in the set. Again the first compute node increments the barrier counter with a value of three because three is the value of the total number of compute nodes in the set minus one. Also the barrier control packet that the first compute node broadcasts to each of the other compute nodes specifies a remote get data transfer of one byte of data. As such upon receiving the barrier control packet from the first compute node each of the other compute nodes decrements the value of their barrier counters by one. Immediately after t therefore the value for the first node s barrier counter is 2 the value for the second node s barrier counter is 2 the value for the third node s barrier counter is 2 and the value for the fourth node s barrier counter is 2. Each node then determines whether their respective barrier counter value matches the exit value of zero. Because none of the barrier counter values match an exit value of zero none of the compute nodes exit the barrier operation.

At t the second compute node enters the barrier operation. Upon entering the barrier operation the second compute node increments its barrier counter with a value of three and broadcasts a barrier control packet to each of the other compute nodes in the set. Again the second compute node increments the barrier counter with a value of three because three is the value of the total number of compute nodes in the set minus one. Also the barrier control packet that the second compute node broadcasts to each of the other compute nodes specifies a remote get data transfer of one byte of data. As such upon receiving the barrier control packet from the second compute node each of the other compute nodes decrements the value of their barrier counters by one. Immediately after t therefore the value for the first node s barrier counter is 1 the value for the second node s barrier counter is 1 the value for the third node s barrier counter is 1 and the value for the fourth node s barrier counter is 3. Each node then determines whether their respective barrier counter value matches the exit value of zero. Because none of the barrier counter values match an exit value of zero none of the compute nodes exit the barrier operation.

At t the fourth compute node enters the barrier operation. Upon entering the barrier operation the fourth compute node increments its barrier counter with a value of three and broadcasts a barrier control packet to each of the other compute nodes in the set. As mentioned above the fourth compute node increments the barrier counter with a value of three because three is the value of the total number of compute nodes in the set minus one. Also the barrier control packet that the fourth compute node broadcasts to each of the other compute nodes specifies a remote get data transfer of one byte of data. As such upon receiving the barrier control packet from the fourth compute node each of the other compute nodes decrements the value of their barrier counters by one. Immediately after t therefore the value for the first node s barrier counter is 0 the value for the second node s barrier counter is 0 the value for the third node s barrier counter is 0 and the value for the fourth node s barrier counter is 0. Each node then determines whether their respective barrier counter value matches the exit value of zero. Because each of the barrier counter values match an exit value of zero each of the compute nodes exits the barrier operation and resumes processing the parallel algorithm at the point specified by the algorithm.

Readers will note from the description above that determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation according to embodiments of the present invention is carried out with minimal involvement by the processing core on each compute node. That is after the processing core of each compute node processes instructions for entering the compute node into the barrier operation configuring the barrier counter with a value in dependence upon a number of compute nodes in the set of compute nodes and instructing the DMA engine to broadcast a barrier control packet to each of the other compute nodes in the set the processing core may perform other processing tasks while waiting for the DMA engine to notify the processing core that all the compute node in the set have entered the barrier operation. Upon receiving such notification the processing core may then exit the barrier operation and resume processing the parallel algorithm.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for determining when a set of compute nodes participating in a barrier operation on a parallel computer are ready to exit the barrier operation. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

