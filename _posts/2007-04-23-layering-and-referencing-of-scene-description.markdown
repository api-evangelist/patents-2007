---

title: Layering and referencing of scene description
abstract: A unified mechanism of scene description includes layering and cross-referencing relationships. The scene description specifies components using one or more layers. A layer includes an opinion of value for one or more attributes of one or more components. A layer can be sparsely populated with opinions of attribute values for only portions of components' attributes. Layers express opinions of value for an attribute using the semantic structure associated with the attribute. The scene description organizes layers in a layer hierarchy, which determines a layer stacking order. The layer stacking order specifies the compositing of opinions of attribute values to determine the complete authored state of the component. The layer stacking order enables attributes of components to be selectively overridden without disturbing other attribute values. Cross-referencing relationships enable encapsulation and reuse of components. Cross-referencing relationships can encapsulate components defined by one or more layers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836086&OS=07836086&RS=07836086
owner: Pixar
number: 07836086
owner_city: Emeryville
owner_country: US
publication_date: 20070423
---
This application claims priority to U.S. Provisional Patent Applications Nos. 60 812 196 filed Jun. 9 2006 and 60 867 681 filed Nov. 29 2006 which are incorporated by reference herein for all purposes.

The present invention relates to the field of computer graphics and in particular to methods and apparatus for creating modifying and using components to create computer graphics productions. Many computer graphic images are created by mathematically modeling the interaction of light with a three dimensional scene from a given viewpoint. This process called rendering generates a two dimensional image of the scene from the given viewpoint and is analogous to taking a photograph of a real world scene. Animated sequences can be created by rendering a sequence of images of a scene as the scene is gradually changed over time. A great deal of effort has been devoted to making realistic looking and artistically compelling rendered images and animations.

Computer graphics images animations and other productions involving computer graphics such as interactive entertainment software are created from a number of different components. Generally components include any data and instructions used to create products and applications that include computer graphics. Components can include three dimensional models of geometry texture maps other arrays of data lighting and shading programs used to determine the visual appearance of models and animation data and deformer functions used to specify changes and motion over time. One or more components are typically stored as a digital asset. A digital asset can be a file database table executable program or script or any other type of persistent data store.

Components typically include one or more attributes containing data associated with the component. Attributes can specify any static or varying property or behavior of a component. For example a component may be a model of a sphere. Attributes of this example component could describe properties such as the radius of the sphere and the location of the center of the sphere. Changing the value of this example component s radius attribute will change the radius of the sphere. Different types of components may include different numbers and types of attributes. The structure arrangement and behaviors associated with the set of attributes of a component is referred to as the semantic structure of the component. Different components may have different semantic structures based on the type of component and its intended use.

Components can include one or more relationships that associate the component to one or more other components. Components may be related together in a hierarchy for ease of use or to specify functionality. For example a model of a character and a model of the character s hat may be associated together for ease of use. In another example a set of coordinate transformations may be associated together in a specific order to define a sequence for applying transformations to models. The associations communications and or dependencies between two or more components may be specified by the relationships of these components.

Components are typically combined during rendering to produce an animated sequence. For example geometric models shading programs and data lighting animation data and deformers all need to be combined correctly to produce a rendered image or scene. The associations or relationships between components can specify how the components should be combined to create a rendered image or scene.

Additionally due to dependencies and other relationships between components some workflow activities that create and or modify components may need to be performed in a specific order. The activities that create and modify digital assets and their components are sometimes collectively referred to as a digital production pipeline.

Digital production pipelines include modeling shading articulation animation simulation layout lighting and rendering. Modeling is the creation of the three dimensional geometry of characters sets props and other objects. Shading is the specification of optical attributes of the surface and interior of objects. Articulation is the specification of joints and other moveable elements of objects. Animation specifies the motion of objects over time in one or more scenes often with reference to the objects articulations. Simulation specifies the motion appearance and or behavior of objects. Layout specifies the arrangement of objects and cameras in one or more scenes. Lighting defines the location and other attributes of light in one or more scenes. Rendering produces images or animation from the components.

For large digital productions such as in an animation or interactive digital production studio it is often necessary for multiple people to be working on different activities of the digital production pipeline at the same time. Often different people will be working on the same or related components at the same time. Additionally some components may be created out of order. As a result mistakes are common and often lead to conflicts within components and between related components.

Furthermore components are often reused for a number of different purposes. First an existing component can be modified for a particular context. For example variations of a character model can be created with different clothing. Second new components can be created based on previous components. The new components can then be modified as needed. For example a new character model can be based on a previously created base model. The new character model can be modified from the base model to implement attributes unique to the new character model.

The reuse of components is not limited to models as described in the above examples. The reuse of components and variations thereof can be applied to all types of components and to any activities of the digital production pipeline. For example variations of layout camera lighting shading articulation animation and or simulation components can be used to create and evaluate different creative interpretations of a scene.

Prior digital production pipelines limit component reuse and user collaboration. Version control is one prior technique for collaboration in a digital production pipeline. Version control maintains a strictly linear pipeline workflow. As digital assets and their components progress through activities in the digital production pipeline changes to components replace or overwrite the previous state of the components. Because of this it is possible to make potentially destructive modifications to any data that was authored at previous stages in the pipeline.

The disadvantage of version control techniques is that the workflow is strictly linear. Modifications of attributes of components are typically destructive to prior work done. It is difficult or impossible to go back to a previous stage of the digital production pipeline and create variations without discarding all of the data created following that previous stage. It is also typically difficult or impossible to return to an earlier point in the workflow to make changes and still have unaffected downstream changes apply. Additionally because write access to digital assets is restricted to a single user at a time bottlenecks occur when other users must wait until the current user of a digital asset relinquishes ownership.

Change isolation by scope is another prior technique for collaboration in a digital production pipeline. New components can cross reference and encapsulate previously created components. The new component has a distinct identity from the referenced component. Typically prior techniques allow only limited modifications to the new component without impacting the original referenced component. The major drawback to this technique is that there is no way to describe a progressive refinement or incremental modification to an existing component. It only allows for the creation of a new and unique component that is a variation of an existing one.

It is therefore desirable for a system and method to enable collaboration in digital production pipelines. It is further desirable for the system and method to enable scene modification at any point of the production pipeline and in any order without disrupting work upstream or downstream in the pipeline. It is also desirable for the system and method to enable unrestricted and progressive modifications refinements and variations of components at any point of the digital production pipeline. It is additionally desirable for the system and method to include a unified system of scene specification and modification that enables any aspects of the scene to be added removed or modified at any point of the digital production pipeline.

An embodiment of the invention includes a unified mechanism of scene description that includes layering and cross referencing relationships. Components are specified using one or more layers. A layer includes an opinion of value for one or more attributes of one or more components. A layer can be sparsely populated with opinions of attribute values specifying all or a portion of the properties and or relationship targets of one or more components. Opinions of value for an attribute are expressed using the semantic structure associated with the attribute. The scene description organizes layers in a layer hierarchy. The layer hierarchy determines a layer stacking order. The layer stacking order specifies how the opinions of attribute values from two or more layers specifying the properties and or relationships of a component should be composited to specify the complete state of the component. The layer stacking order enables attribute values of components to be selectively overridden without disturbing other attribute values. Cross referencing relationships enable encapsulation and reuse of components. Cross referencing relationships can encapsulate components defined by one or more layers.

In an embodiment a data structure for representing at least one component includes a first layer specifying a first opinion of value of a first attribute of a component. The first attribute has a first attribute type specifying a first semantic structure. The first opinion of value of the first attribute is expressed in terms of the first semantic structure. A second layer specifies a second opinion of value of the first attribute of the component. The second layer has a relationship with the first layer. The second opinion of value of the first attribute is expressed in terms of the first semantic structure. The relationship between the first layer and the second layer specifies that the second opinion of value of the first attribute of the component overrides the first opinion of value of the first attribute of the component.

In a further embodiment the first layer further includes a first opinion of value of a second attribute of the component. The second layer does not include an opinion of value of the second attribute of the component. The relationship between the first layer and the second layer specifies that the second attribute of the component should be set to the opinion of value of the second attribute of the component included in the first layer. In an additional embodiment the second attribute of the component has a second attribute type specifying a second semantic structure different from the first semantic structure.

In another embodiment the second layer further includes a first opinion of value of a third attribute of the component. The first layer does not include an opinion of value of the third attribute of the component. The relationship between the first layer and the second layer specifies that the third attribute of the component should be set to the opinion of value of the third attribute of the component included in the second layer.

In an embodiment the first opinion of value of the first attribute of the component is a cross reference to a component specified by at least one additional layer. In an embodiment the first attribute of the component specifies whether the component is active.

In an embodiment the relationship between the first layer and the second layer is part of a hierarchy of layers. In a further embodiment the hierarchy of layers defines a layer stacking order between the first layer and the second layer.

In an embodiment the relationship between the first layer and the second layer is a compositing relationship. In a compositing relationship an opinion of value of any attribute of the second layer overrides an opinion of value of a corresponding attribute of the first layer. Further an opinion of value of any attribute of the first layer is unaffected by the second layer if the second layer does not include an opinion of value of the corresponding attribute.

In an embodiment a set of layers including at least the first and second layers are adapted to be composited according to the relationship between at least the first and second layers to form a composite description specifying the complete state of the component. In an embodiment components can include attributes pertaining to modeling shading articulation animation layout lighting rendering editing special effects and general purpose spreadsheets and database tables.

Often the digital production pipeline begins with modeling activities. Modeling activities create model components representing the three dimensional geometry of characters sets props and other objects. Three dimensional geometry can be defined using three dimensional modeling software two or three dimensional scans of physical objects procedural modeling languages and or other techniques. The three dimensional geometry of model components can be represented using any type of mathematical representation including particles polygons higher order surface functions solid geometry volumetric data and subdivision surfaces.

Articulation activities follow the creation of a model component. For model components that will be animated articulation activities specify how an associated object can be animated. The articulation components associated with a model component can specify the position and operation of joints. Articulation components can also be used to abstract complex motions to relatively simple control parameters referred to as animation variables. Articulation components may include deformer functions adapted to manipulate a model component based on animation variable values. Deformer functions can perform complex manipulations of a model component in response to animation variables. For example a single animation variable can define the degree of opening of a character model s mouth. In this example the value of the animation variable is an input to one or more deformer functions that manipulate several different parts of a character model armature or skeleton and or modify portions of the surface of the character model to create a modified character model having a mouth opened to the desired degree.

Shading activities define optical attributes of model components. Shading activities may include the specification of the color transparency reflectivity and other optical attributes of the surface and or interior of associated model components. Shading components can include texture map data of any number of dimensions defined explicitly and or procedurally three dimensional or projected painting attributes noise data shadow maps normal or bump maps and or shader programs or procedures.

Animation activities specify the motion or animation of model components. Animation components may specify animation as changes in animation variable values and other attributes of model components over time. The articulation components are used to translate changes in animation variable and other attribute values into changes in the position orientation appearance and other characteristics of the associated model components. Animation activities can specify animation variable values directly or indirectly using algorithms such as forward or inverse kinematics keyframes and in betweening and motion capture.

Similarly simulation activities can be used to determine the appearance animation and or behavior of components. Simulation techniques can be used to mimic complex real world phenomena such as the appearance and motion of fluids hair fur and cloth. Simulation techniques can also be used for pseudo realistic or fanciful phenomena. The components output by simulation activities are often similar to components created using animation and shading activities and therefore can be incorporated and applied in the digital production pipeline in a similar manner.

Layout activities arrange components such as models articulation shading and animation together in one or more scenes or shots. Layout activities can also include the specification of one or more cameras each representing a desired rendering viewpoint for each scene. The layout of each scene may be specified by a component incorporating or referencing other components or by a portion of the attribute values of the components of the scene.

Lighting activities specify the location and attributes of one or more light sources in a scene. Light sources are components that specify the amount direction and type of light falling on one or more model components in a scene. The location and attributes of light source components can change over time through an association with an animation component.

Rendering activities convert layout components and associated model articulation shading animation simulation lighting and other components into one or more images representing a scene from a desired rendering viewpoint. Rendering activities can use any rendering techniques or combination of techniques known in the art including rasterization scanline rendering techniques image based rendering techniques global illumination radiosity and ray tracing. Rendering can be done at interactive frame rates or offline.

For non interactive products the output of the renderer can be composited edited mixed with audio and otherwise processed to create the finished movie. Animated sequences from two or more cameras positioned within a scene or from multiple scenes together can be combined to form a finished sequence. Editing information can be represented in the form of components such as edit decision lists that indicate the location length and sequence of animation sequences to be combined. For interactive productions the finished product can include digital assets containing all the required components a renderer and control logic responsive to user input. User input is processed by the control logic to manipulate the state of components. The renderer then processes the components to provide an interactive presentation to the user.

System includes a number of applications for creating viewing modifying and processing digital assets and their components. Examples of these applications include renderer applications inspector applications and editor applications . Renderer applications are adapted to process components to create one or more images. Renderer applications can utilize any rendering techniques or combinations of techniques known in the art including ray casting and ray tracing scanline rendering rasterization and image based rendering. Renderer applications can produce images at interactive frame rates or at substantially slower rates depending upon the rendering technique the available computing resources and the desired degree of visual detail. Renderer applications can also edit and combine sequences of animation.

Inspector applications are adapted to present users with the state of one or more components. The state of components can include the values of one or more attributes. Attributes can define all aspects of a component including whether the component itself is active or is present in a scene. Additionally the state of components can change over time within an animated sequence and at different points in the digital production pipeline. Inspector applications can present state information of components in a number of different formats including in the form of text tables timelines charts graphs images and renderings from one or more viewpoints.

Editor applications are adapted to create and modify the state of one or more components. Editor applications can utilize interfaces adapted to manipulate data in the form of text tables timelines charts graphs images and renderings from one or more viewpoints to create components and modify their attributes. Additionally a user can input attribute values directly using any type or combination of input devices well known in the art including keyboards mice and digitizer tablets. Additionally editor applications can analyze user input to indirectly set or modify one or more attribute values. For example a user input could be processed by a filtering algorithm in an editor application to modify several attributes simultaneously in varying amounts.

Example applications and can be combined into hybrid applications that perform inspector editor and or renderer functions together. In an embodiment system includes an application programming interface enabling any additional applications to access and modify components.

Digital production pipeline applications such as example applications and can store and retrieve components in digital assets such a files database tables and scripts and programs . The digital production pipeline applications can create new digital assets to hold one or more components modify existing digital assets to add remove or modify components remove unneeded digital assets and encapsulate one or more digital assets in another digital asset. Digital assets and are stored by persistent data store which can be comprised of data storage devices of any type.

In an embodiment system includes a stage . The stage includes an instantiation of the complete state of one or more components for at least one scene. This can include a component such as a model a light or a camera articulation and animation data a supporting component such as a texture map or a shader or any combination of components. As discussed below the stage instantiates the complete state of one or more components for one or more scenes at any point in the digital production pipeline. Components may take on different states or augment their initial state with additional attributes at different points of the digital production pipeline. Applications and can create access and modify the state of components for one or more scenes via stage .

To maintain state information for components for one or more scenes at any arbitrary point of the digital production pipeline an embodiment of the system represents components as a unified scene description . For each component the unified scene description includes at least one opinion of the value of each of its attributes for one or more scenes with the exception of any application supplied or default values. To determine the state of a component for one or more scenes at a given point of the digital production pipeline the system processes the unified scene description to identify the most appropriate opinions of attribute values for the given point. The system reconstructs or instantiates the component in the stage using the complete set of opinions of attribute values associated with the given point as well as any application supplied or default values if necessary .

Each layer may be sparsely populated that is a layer does not have to include opinions for the value of every attribute of a component. Each layer can specify an opinion of value for a new attribute without having that attribute explicitly declared by a prior layer. A layer can include opinions of value for attributes of multiple components. Additionally empty layers can be created in early stages of the digital production pipeline as placeholders for opinions of attribute values to be provided at later stages of the digital production pipeline.

In example layer data structure layer includes an opinion that the position attribute of component should be set to a value of 0.5 and an opinion that the direction attribute of component should be set to a value of 17. As can be seen in this example the opinions of value of other attributes such as the density attribute of component is undefined in layer .

In the above example attribute values are numerical parameters. However embodiments of layer data structure allow the specification of any data type for an attribute value including integers floating point numbers characters strings Boolean values geometry data compound data types such as vectors with two or more dimensions matrices structures arrays dictionaries hash tables elements of edit decision lists references to one or more components references to one or more layers references to elements tables or other structures of a database and references to internal or external functions scripts or executable programs.

Layers provide opinions of value for attributes of components in terms of the semantic structure associated with the components. Any arbitrary abstract attribute of a component can be expressed in a layer. Furthermore one or more layers can provide opinions of value for the attribute of a component in the unique terms or semantic structure defined for that attribute. There is no need to reduce opinions of value of abstract attributes to a common or low level form such as pixels or points to composite the values.

For example a first layer can specify a model of a character wearing a hat. One attribute of the hat could be its type such as sombrero. Another attribute of the hat could be its color such as red. A third attribute of a hat could be its material such as straw. Thus from the view of the first layer the character model should have a red straw sombrero. A second layer that is higher or stronger than the first layer could change the type attribute of the hat from sombrero to top hat. Thus from the view of the second layer the character model should have red straw top hat. A third layer that is higher or stronger than the second layer could specify that the color attribute of the hat should be purple and the material attribute should be felt. Thus from the view of the third layer the character should have a purple felt top hat. In this example each layer expresses an opinion of one or more attribute values in terms of the semantics associated with each attribute.

Furthermore a component may include a cross reference to another component defined by one or more layers. For example a Hat component of a character model can be a cross reference to a specific model of a hat. Thus when cross reference is set to a sombrero component the character model includes a model of a sombrero. When the cross reference is overridden by a layer to a top hat component the character model is changed to include a model of a top hat. Each of these models can be defined by one or more layers the attributes of which can be wholly or partially or overridden by other layers as described above.

In an embodiment every activity in the digital production pipeline is associated with one or more layers. Users can create and manipulate layers manually to provide additional control and ease of use for a component. For example the attributes of different models can be specified in separate layers. In another example related attribute values for different models in a scene can be specified in the same layer to facilitate easy manipulation. In an embodiment applications associated with activities can automatically create access and modify layers based on context such as the activity the type of component and the action being performed by the user.

The complete authored state of one or more components in one or more scenes at a given point of the digital production pipeline is determined by compositing all of the layers associated with a given point to produce a composite layer . The composite layer includes opinions of attribute values for the attributes specified by one or more of the associated layers. The composite layer can also be referred to as a composite scene description.

In an embodiment a layer stacking order determines the order in which layers are composited. This in turn specifies how attribute values in one layer override corresponding attribute values in other layers. In an embodiment layers are assigned a strength in absolute or relative terms. For example a first layer can include a relative strength value indicating that it is stronger than or weaker than one or more other layers. In this embodiment opinions of attribute values in stronger layers will be at the top of the stacking order and will override opinions of attribute values in weaker layers i.e. layers that are lower in the stacking order. The example layer stacking order is a linear order however more complicated layer stacking orders with multiple branches can be utilized. In an embodiment layer stacking orders can be set or modified by digital production pipeline applications either manually by a user or automatically by applications. In a further embodiment the strength of layers is defined at least in part with respect to a root layer such as root layer which is by default the strongest or highest level layer.

In example layer data structure layer includes opinions and of the value of attributes and . However stacking order places layer as stronger than or ahead of layer . Thus in the composite layer the opinions of value and of layer for attributes and will override corresponding opinions and in layer . However as layer does not define an opinion of value for attribute of component the opinion in layer will define the value of attribute in the composite layer .

In an embodiment the scene description data structure combines two different aspects a layer data structure as described above and cross references to components. The layer data structure enables the progressive refinement and incremental modification of components as needed. The cross references to components enables the encapsulation and reuse of components. Together this combination enables scene modification at any point of the digital production pipeline in any order without any loss of data in upstream or downstream activities of the digital production pipeline unrestricted and progressive modification and refinement of components and a unified system of scene specification and modification that enables any aspects of the scene to be added removed reused or modified at any point of the digital production pipeline.

In an embodiment scene description data structure specifies the relationships between components and layer data structures which express opinions of component attribute values in a hierarchical graph structure. Nodes of scene description data structure may correspond with components such as data representing geometry texturing shading articulation animation simulation layout lighting or rendering or with layer data structures.

In an embodiment the hierarchical graph structure includes three different types of relationships between components and layers namespace relationships layer relationships and cross reference relationships. Namespace relationships establish the namespace or other nomenclature used to identify and organize components. Namespace relationships are used to assign components identities to match up components from different layers that should override each other and to provide the scope of inclusion for references. Alternative embodiments can utilize other attributes such as globally unique identifiers GUIDs to arrange components and layer data structures within the scene description data structure.

Layer relationships specify the relationship between a layer data structure and one or more sublayers. Layer relationships specify the layer stacking order used to composite or combine layers to determine attribute values of components.

Cross reference relationships provide links to components specified elsewhere. A cross reference relationship from a first component in a first layer data structure can reference a second component defined in the same layer data structure a second component in another layer data structure associated with the first layer data structure or a second component in another layer data structure that is not associated with the first layer data structure. Implementations of cross reference relationships can be restricted to directly referencing only the root component in another layer data structure with any child components referenced implicitly using namespace relationships associated with the root component or alternatively can be unrestricted to allow direct referencing of any arbitrary component in another layer data structure.

In an embodiment the scene description data structure includes a root layer for the scene. In an embodiment the relationships of the hierarchical graph between components and layer data structures are specified at least in part by root layer . Child nodes such as root component and sublayers hierarchy can be directly associated with the root layer .

In an embodiment of the hierarchical graph each non empty layer data structure including the root layer includes at least one root component such as root component . Additional components within the layer data structure are associated as child nodes or grandchild or other descendant nodes of the root component. As an example of this embodiment one or more additional components are associated via namespace relationships as descendant nodes of root component .

In an embodiment the namespace relationships between component nodes in a layer are specified in the form of relationship attributes of components. For example component can include a parent attribute which would be set to reference component . In another embodiment a component can include a child relationship attribute specifying one or more child components of the component. For example root component can include a child relationship attribute which would be set to reference components .

In an embodiment of the hierarchical graph each additional layer data structure of the scene description data structure is a descendant or sublayer of the root layer. As an example of this embodiment the root layer is associated with one or more additional layer data structures via layer relationships . In an embodiment the arrangement of layer data structures relative to the root layer and each other specifies the layer stacking order used to combine and override opinions of component attribute values to form the composite layer. Although omitted for clarity in an embodiment of the scene description data structure each additional layer data structure that is not empty includes its own root component similar to root component . Furthermore sublayers can include additional components associated with their respective root components via namespace relationships.

In a further embodiment cross reference relationships such as cross reference relationship provides a link to one or more components specified elsewhere. A cross reference relationship from a first component in a first layer data structure can reference a second target component defined in the same layer data structure in another layer data structure associated with the first layer data structure or in another layer data structure that is not associated with the first layer data structure. Implementations of cross reference relationships can be restricted to target only the root component in another layer data structure with any child components referenced implicitly or alternatively can be unrestricted to directly referencing any arbitrary target component in another layer data structure.

The scene description data structure can combine both layering and cross reference relationships to specify relationships and attributes in a scene. For example a scene description data structure can use a cross reference relationship to link to a pirate character model to be used in a scene. The pirate character model in turn is defined by a separate scene description data structure for the model that includes its own independent root layer and optional child layers. For example a base or weak child layer of the model s scene description data structure may define the attributes of a general biped character model. One or more stronger layers modify the general biped character model by augmenting or overriding the attribute values defined in a weaker layer for example by associating a pirate hat model with the character model or modifying the character model to replace its hand with a hook.

In an embodiment the graph or set of relationships between components and layers defined by the scene description data structure can be orthogonal or completely independent of any other optional graphs associated with the same components. Graphs can be used to define different sets of relationships for the same components in different scenes. For example a second scene description data structure can be created to specify different relationships between components for additional scenes. Additional layers included in the second scene description data structure can further specify different attribute values for the components.

Additional independent graphs can also be specified to facilitate specific tasks within the digital production pipeline. For example artists can create character models with an initial set of hierarchical relationships between different body parts such as defining an arm model to be a child of a torso model. However the scene description data structure and associated layer data structures can define one or more alternative hierarchical relationships independent of the initial set of relationships specified by the artist. For example the arm model could be defined as the parent of the torso model to facilitate convenient animation in one or more scenes.

In an embodiment relationship attributes of components can also specify functional relationship between components. For example relationships between coordinate transformation components include attributes specifying a specific sequence for applying transformations to models weights specifying the influence of a reference frame on control points joint spring forces and or joint rotation limits. In a further embodiment relationship attributes can include additional data defining some parameter of a relationship. For example a light source component can be related to a first model component which indicates that the light source component provides light to the model component. The lighting relationship between these two components can further include a light intensity value to indicate the intensity of light from the light source on the first model. If a second lighting relationship is created between the light source component and a second model component the second lighting relationship can include a different light intensity value.

As described above different layers can be specified in different portions of the digital production pipeline enabling components to be revised or refined without the need for explicit change isolation or versioning and without destroying the data previously specified for the component in weaker layers. This allows an independent variation of a component to be created and used without affecting the usage elsewhere of either the original component or any other variation of the same component. Moreover because layers can express opinions of value for any attribute of a component there are no restrictions on the type or extent of modifications permitted on cross referenced components. Furthermore scene description data structures can include cross reference relationships to all or a portion of a component s layer data structure enabling other scenes to encapsulate reuse and optionally modify the example character model component as defined by its layers at any point of the digital production pipeline.

Example also includes layer data structure . Layer data structure includes a second opinion of value specifying that attribute Y has a value Value . In an embodiment there is no need for component A to have a previously declared attribute Y the second opinion of value acts as a declaration of attribute Y within component A and sets the value of this attribute to Value . 

A layering operation composites layer data structure over layer data structure . The result is a composite scene description including a composite version of component A including attribute X and attribute Y .

Example shows how layering can change the semantic structure of a component by adding attributes and corresponding behaviors. If a component is composited and instantiated from the first layer data structure alone it will include attribute X but not attribute Y. Conversely if a component is composited and instantiated from the second layer data structure alone the instantiated component will include attribute Y but not attribute X. As a result new attributes and behaviors can be added to a component without breaking or requiring the recompilation of previously completed work with prior versions of the component.

Example shows how layering can change the semantic structure of components by adding a relationship between components. In an embodiment neither component A nor component B as defined by layer data structure need to declare an ability to form relationships with other components. In this embodiment the opinion of value in layer data structure both declares a relationship attribute for component A and or component B and sets the value of the relationship attribute to form relationship . As a result any type of component can be related to other components even if the component was not originally defined with a relationship attribute.

Similarly illustrates a third example of changing the semantic structure of components using layer data structures according to an embodiment of the invention. Example includes a first layer data structure . Layer data structure defines component A . A second layer data structure defines a second component B and relationship between component A and component B . In an embodiment relationship is defined by an opinion of value that declares a relationship attribute in component B and assigns a value to the relationship attribute to form the relationship . In this example relationship defines component B as a namespace child of component .

A layering operation composites layer data structure over layer data structure . The result is a composite scene description that includes composite versions of component A and component B associated by relationship . In composite scene description component B is the namespace child of component A .

Example shows how layering can change the semantic structure of components by adding a new component to the namespace associated with a previously defined component. Component as defined in layer data structure does not need to declare any relationship with other components or even the ability for component to act as a parent or child of any other components. In an embodiment an opinion of value in layer data structure both declares the existence of an attribute defining a namespace relationship and sets its value form relationship .

Step selects the root layer of the scene description data structure and constructs a corresponding composite scene description. As discussed in detail below a composite scene description is constructed by starting at the root layer and traversing the component and layer hierarchies defined in the scene description data structure. The namespace hierarchy between components defines relationships between components and a layer stacking order defines the order for combining layers into a single composite layer. The layers and components associated with the scene description data structure are composited according to this layer stacking order to determine a composite scene description or composite layer specifying at least a portion of the component attribute values for a scene.

Step resolves cross references in the composite scene description. As discussed above the scene description data structure can include cross reference relationships between components. In an embodiment step resolves these cross reference relationships if any in the composite scene description to fill in any gaps in the scene. The details of step are discussed below.

Following step the composite scene description fully specifies all of the components associated with a scene the relationships between all of the components in the scene and all of the authored component attribute values associated with the scene. Step then instantiates the components of the scene for example within a stage data structure using the composite scene description. Further embodiments of the invention may cache all or portions of the composite scene description to expedite the processing instantiation and assembly of components in the scene data structure for editing rendering or inspecting components and digital assets at any part of the digital production pipeline. For example the composite scene description can be stored as a new digital asset for later use.

Phase is initialized with a reference to a selected layer of scene description data structure. An embodiment of phase creates a new composite scene description with components component attributes and component relationships provided by the selected layer and its descendent layers. In one application step selects the root layer of the scene description data structure and invokes phase to produce a composite scene description. In other applications discussed below a different layer may be selected to produce an additional composite scene description.

Step of phase selects a root layer data structure. In an embodiment the root layer data structure corresponds with the selected layer of the scene description data structure provided to phase .

Step determines a layer hierarchy from the scene description data structure. In an embodiment step recursively processes the scene description data structure to build a hierarchy of layers descended from the selected root layer. The layer hierarchy defines the layer stacking order used to composite layers. In an embodiment step recursively traverses the layer hierarchy defined by the scene description data structure to determine the layer stacking order for layer data structures. In an embodiment step traverses all of the descendent layers of the selected root layer until all of the leaf or bottom layers are reached.

Furthermore example layer stacking order includes layers and corresponding with layers and that are composited under layer . Layer includes a component . Component has a cross reference relationship with component . Example layer stacking order includes cross reference information corresponding with the cross reference relationship . In this example component is the root component in an additional hierarchical graph of components . Furthermore this additional hierarchy of components is defined by another set of layer data structures composited according to its own layer stacking order.

As discussed elsewhere an embodiment of the invention will later resolve the cross reference relationship to fill in any gaps in the composite scene description. Once cross referenced component and any of its child components have been incorporated into the hierarchy any of the attribute values of component can be overridden by layers in hierarchy . Furthermore the hierarchy of components defined by the set of layer data structures can be independently cross referenced with and optionally modified by numerous other hierarchies of components such as hierarchy . Modifications to a component in one hierarchy such as a layer in hierarchy modifying component will not affect the same component referenced in another hierarchy for example hierarchy .

Step composites the data of the layer hierarchy according to the layer stacking order determined in step to create a composite scene description. In embodiments of step the layer stacking order is traversed from top to bottom or from bottom to top. Data from each layer is added to a composite scene description if composite scene description does not already include corresponding data from a layer higher in the layer stacking order. Conversely data in a higher layer will overwrite corresponding data from a lower layer in the composite scene description. illustrates an example composite scene description corresponding with the set of layers in .

In an embodiment step further integrates cross reference information from the layer stacking order into the composite scene description. The cross reference information will be resolved later to augment the composite scene description with additional data.

Step of phase analyzes the composite scene description and generates a list of all the unresolved cross reference relationships. Step selects an unresolved cross reference relationship for processing. Step analyzes the selected cross reference relationship to determine if the parent and child components of the cross reference relationship are in the same layer. If so then step copies the data associated with the child component into the parent component s location in the composite scene description. Following step phase proceeds to step .

As discussed above because component and cross reference both originate from the same layer phase can use step to copy the information of component in place of cross reference thereby removing cross reference from the composite scene description . Following step a revised composite scene description includes the component and a copy of component in place of the cross reference . In an embodiment once the cross reference is resolved the copy becomes a separate component that is independent of component .

Returning to phase if step determines that the parent and child components of the selected reference are not in the same layer then phase proceeds to step . Step creates an additional composite scene description. In an embodiment step selects the child component of the cross reference relationship. The child component can be included in the same scene description data structure or a different scene description data structure as the parent component of the cross reference relationship. Step provides this selected component as the top level node to phase to produce an additional composite scene description. The additional composite scene description specifies the component component relationships and component attribute values for the selected component and any descendent component. As discussed above the additional composite scene description can include data resulting from the compositing of two or more layers according to a layer stacking order defined by a layer hierarchy associated with the selected child component.

Step searches the additional composite scene description for any new cross reference relationships. The additional composite scene description can include new cross reference relationships if the selected component or any descendents of the selected component have cross reference relationships. Step adds the new cross reference relationships in the additional composite scene description if any exist to the list of unresolved cross reference relationships.

Step copies the data of the additional composite scene description into the root or main composite scene description previously generated in step . In an embodiment the data of the additional composite scene description replaces the selected cross reference in the composite scene description. After the data from the additional composite scene description is copied into the composite scene description an embodiment of step discards the additional composite scene description.

Following step or step step determines if there are any unresolved cross references in the composite scene description. As discussed above unresolved cross references can arise from cross references added to the composite scene description in step or from cross references copied into the composite scene description in step . In an embodiment step determines if there are any unresolved cross references remaining in the list of unresolved cross references associated with the composite scene description. If so then phase proceeds from step back to step to select and process a remaining unresolved cross reference. In an embodiment phase is repeated until there are no unresolved cross references remaining in the composite scene description.

Step of phase traverses a hierarchy of components in the composite scene description. In an embodiment a component includes attributes associating itself with one or more independent hierarchies. An example type of hierarchy of components that can be included in the composite scene description is a namespace hierarchy. A namespace hierarchy specifies the relationship between components according to their names. In some applications the namespace hierarchy may also correspond with the data paths used to store components.

Step traverses a hierarchy of components such as a namespace hierarchy or any other type of hierarchy defined for the components to identify at least one of the components in the composite scene description.

Step selects one of the components of the composite scene description for evaluation. Step determines if the selected component is active. In an embodiment a component includes an active attribute that indicates whether the component should be instantiated on the stage. The active attribute can be set within one or more layers and changed over time enabling components to be selectively instantiated or hidden in the stage as needed.

If step determines that the selected component is not active phase returns to step to search for any additional components. Conversely if step determines that the selected component is active phase proceeds to step .

Step instantiates and initializes the selected component on the stage. In an embodiment step evaluates a name attribute and a type attribute of the selected component in the composite scene description. Using this evaluation step instantiates a new data object corresponding with the selected component on the stage. Step initializes the new data object by evaluating the attributes and values of the selected component in the composite scene description and setting corresponding properties of the new data object to the same values. Additionally an embodiment of step replicates one or more hierarchical relationships associated with the component for the corresponding data object in the stage. Following step phase returns to step to search for any additional components in the composite scene description.

The example layers are combined into a composite scene description . The composite scene description only includes attribute values defined by the strongest layer associated with each component attribute. Attribute values in weaker layers that are overridden by stronger layers are omitted from the composite scene description . In this example some of the attribute values of the base model layer are overridden by the attribute values of the model variant layer . The only attribute values of the base model layer that are included in composite scene description are those not overridden by layers and .

The composite scene description is used to instantiate objects on the stage . In this example the composite scene description specifies the components and attributes to create shade light and animate object in stage .

Although the above described systems and methods have been described with reference to components digital assets and digital production pipelines the scene description data structure and its layering and cross referencing relationships can be generalized for use with applications and data of any type including electronic documents such as text and word processing data spreadsheet data database tables and objects engineering blueprints schematics and specifications and object orientated data structures. The generalized forms of these data structures and the above described methods of manipulating these data structures are particularly useful in non linear workflows. Nonlinear workflows can include collaborative working environments in which multiple users work on the same data. Nonlinear workflows can also enable one or more users to generate multiple variations of the data at any arbitrary point of the workflow without destroying data associated with previous or subsequent portions of the workflow. For example a user could use the above described systems and methods to create multiple financial scenarios within a spreadsheet application based on a common set of initial conditions.

Computer typically includes components such as one or more processors and memory storage devices such as a random access memory RAM disk drives and system bus interconnecting the above components. Processors can include one or more general purpose processors and optional special purpose processors for processing video data audio data or other types of data. RAM and disk drive are examples of tangible media for storage of data audio video files computer programs applet interpreters or compilers virtual machines and embodiments of the herein described invention. Other types of tangible media include floppy disks removable hard disks optical storage media such as DVD ROM CD ROM and bar codes non volatile memory devices such as flash memories read only memories ROMS battery backed volatile memories and networked storage devices.

Further embodiments can be envisioned to one of ordinary skill in the art after reading the attached documents. In other embodiments combinations or sub combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks additions of new blocks re arrangement of blocks and the like are contemplated in alternative embodiments of the present invention.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

