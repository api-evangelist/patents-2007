---

title: Synchronization framework for occasionally connected applications
abstract: A synchronization framework is provided for synchronizing data groups between a server and clients that may go off-line. The framework includes a client sync provider component that interfaces to client storage in a storage format independent way, a sync agent component that collects synchronization metadata maintained by the clients and uploads and/or downloads changes to the data groups to and/or from server storage and a server sync provider component that interfaces via sync adapters to server storage independently of storage format. The framework provides default building blocks for building off-line synchronizing applications that behave according to default application synchronization scenarios, and also enables custom building blocks for custom off-line application synchronization scenarios.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07899917&OS=07899917&RS=07899917
owner: Microsoft Corporation
number: 07899917
owner_city: Redmond
owner_country: US
publication_date: 20070201
---
The subject disclosure relates to a synchronization framework for synchronizing data among clients and server data stores where the clients may come out of contact with the servers for indefinite periods e.g. for offline applications.

Conventionally from a synchronization standpoint a fixed relationship has been implemented between client and server and so synchronization of data has been hardwired and dedicated between the client and server with limitations on flexibility and scalability as a result. Additionally where a client may become disconnected from the server due to network unavailability power loss or some other reason there should also be a way to proceed despite the disconnection i.e. when a client application is off line from a main server. Today as between the single client and server this off line behavior is either unavailable or fixed i.e. performed according to static behavior that also has limitations on flexibility and scalability.

Moreover conventionally these dedicated synchronization relationships whether offline or online suffer from the complexity of the synchronization data types maintained and utilized when communicating synchronized data according to fixed and rigid synchronization frameworks which are often dependent on particular database formats being present in storage giving rise to synchronization incompatibility issues. Complicating matters assurance of proper synchronization and replication becomes especially complex when multiple clients are allowed to come in and out of contact with the server often at too great a cost to the server maintaining synchronization relationships with all of the clients.

Generally speaking occasionally connected applications are defined as applications that connect to a remote data source such as a database web service etc. to read write data that is desired for the functioning of the application. Additionally these applications have a requirement to continue to work seamlessly even when they are offline i.e. not connected to the remote data source. The reason to work offline can be unavailability of network or for better data access performance.

Existing systems for building applications for synchronizing relational data include remote data access RDA Merge Replication and ADO.NET DataSets. However RDA and Merge Replication provide end to end solutions as opposed to building blocks and are tied to the data store formats on both server and client sides. For another example of a limitation on existing systems RDA can only be used when the client is Microsoft s SQL Server Compact Edition and the server is Microsoft SQL Server. Additionally while ADO.NET disconnected DataSets are not bound to the store they have other limitations like their requirement of being loaded entirely in memory without any ability to download incremental changes from the server.

Thus existing solutions are at opposite ends of the spectrum. At one end solutions like RDA and ADO.NET are simple but they have very limited features e.g. these do not support downloading incremental data. In this regard sending all the data from server to client for every synchronization can be expensive especially over slow links. RDA also requires the client database to be a SQL client and DataSets are not backed by a client database so they lack efficient query capabilities of the cache. And on the other end of the spectrum solutions like Merge replication while providing rich features like dynamic filtering and logical records are overly complex and rigid providing the developer very little flexibility to customize the solution to fit their own needs. With solutions like Merge the developer gets all or nothing. Accordingly what is desirable is a generalizable synchronization framework including building blocks for building customized synchronization applications that suit the functionality and context of the application being deployed.

Today to the extent that any systems have attempted to address synchronization to multiple clients the solutions have been limited to replication of a whole set of database information to all of the clients and there has been no way to selectively synchronize one or more subsets of the database information e.g. in the event that a client may wish to just synchronize with a small portion of the relevant data. For instance a client may wish to retrieve only the last month of email as opposed to the whole email database file but today there is no way to arbitrarily or dynamically limit or filter the data that is synchronized between client and server without reconfiguring synchronization to synchronize another set of data in a new static fashion.

Thus to synchronize data of a data store from a server to several clients and vice versa synchronization and replication of updates or changes must take place among the various devices. Accordingly what is desired is a synchronization framework that addresses each of the above identified problems in the state of the art of synchronization and replication of data between a server and loosely coupled clients. For instance a framework is desirable that makes it simple for application developers by implementing components that are able to work with and process concepts and data types with which developers are already familiar. In addition a synchronization framework is desired that enables a highly scalable server for a variety of loosely coupled devices as they come into and out of contact with the server and that operates independent of database format.

Accordingly in consideration of the lack of sophistication of the current state of the art of synchronization of data between a server and loosely coupled clients it would be desirable to provide an improved synchronization framework for servers and clients. These and other deficiencies in the state of the art of synchronization in the context of loosely coupled devices will become apparent upon description of the various exemplary non limiting embodiments of the invention set forth in more detail below.

The present invention provides a synchronization framework for synchronizing data groups between a server and clients that may go off line. The framework includes a client sync provider component that interfaces to client storage in a storage format independent way a sync agent component that collects synchronization metadata maintained by the clients and uploads and or downloads changes to the data groups to and or from server storage and a server sync provider component that interfaces via sync adapters to server storage independently of storage format. The framework provides default building blocks for building off line synchronizing applications that behave according to default application synchronization scenarios and also enables custom building blocks for custom off line application synchronization scenarios.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. Instead the sole purpose of this summary is to present some concepts related to some exemplary non limiting embodiments of the invention in a simplified form as a prelude to the more detailed description of the various embodiments of the invention that follows.

As discussed in the background existing synchronization solutions implement an overly complex object model are too tightly coupled to be useful for offline applications and their scalability is limited due to server overhead. Accordingly in consideration of these deficiencies in the state of the art the present invention provides a synchronization framework and corresponding methods for use in the context of a server and loosely coupled clients.

As mentioned occasionally connected applications are defined as applications that connect to a remote data source such as a database web service etc. to read write data that is desired for the functioning of the application. Additionally these applications have a requirement to continue to work seamlessly even when they are offline i.e. not connected to the remote data source. The reason to work offline can be unavailability of network or for better data access performance.

In accordance with various non limiting embodiments of the invention occasionally connected applications are provisioned with a data cache to hold the data when they are offline and a mechanism to synchronize this cache with the remote store when the network is available. As discussed in the background any solutions that exist today are inadequate to build custom synchronization applications. Thus the present invention provides a synchronization framework including building blocks for building customized synchronization applications for a variety of client server synchronization scenarios.

In various non limiting embodiments described in more detail below the invention provides a set of building blocks for developers to build occasionally connected applications. The framework includes the components to build simple synchronization solutions very quickly while also having full flexibility to build complex solutions using the building blocks.

As will be described in greater detail below the following is an exemplary non limiting list of scenarios made possible by this framework A read only cache of data on client i.e. snapshot sync B read only cache of data on client with incremental sync to keep cache up to date i.e. incremental download sync C store and forward capabilities from client to server i.e. upload only sync D read write cache of data on client i.e. bidirectional sync with framework to support conflict detection and resolution with multiple clients change the same data E synchronizing with pre existing server without need for any provisioning on the server side F synchronizing with heterogeneous servers e.g. SQL Oracle etc. G synchronizing with a custom Internet enabled services H the ability to plug in different client stores e.g. SQL Server Compact Edition SQL Express etc. I the ability to plug in a custom transport between client and server and J the ability to plug in custom change tracking on the store.

A synchronization framework is provided in accordance with the invention that can be used to develop and support offline applications. An overview of the application framework for synchronizing data for offline applications is illustrated in the exemplary non limiting block diagrams of and .

As generally shown in the block diagram of a synchronization framework SyncFW is provided for synchronizing data of server database with data of client database for scenarios where a client application may become disconnected. On the client side a component is provided in the framework that specifies how to send receive client side sync data and that makes communications independent of the format of client database . For instance component can plug into different client stores e.g. SQL Server Compact Edition SQL Express etc. .

On the server side a component is provided that specifies how to send receive server side sync data and that also communicates independently of the format of server database enabling the ability to synchronize with heterogeneous servers e.g. SQL Oracle etc.

Advantageously orchestration of sync data between the client and the server is handled in transport independent manner i.e. whether Web Services RSS etc. the data can be processed regardless of how the data is packaged between components and components . In one non limiting embodiment data is synchronized between a client application and a custom designed web service. Advantageously the invention thus includes the ability to plug in a custom transport between client and server and thus the communications between client and server for the framework of the invention are not limited to any particular transport means.

Sync agents located on the client side are the core sync engine and implement the logic used to A collect metadata from the client and server databases B upload and download changes to and from the server database to the client provider or C propagate error progress and conflict events to the client application. Further sync agent s use sync adapters to interact with the server database through server sync provider interface s . In addition each sync adapter defines the table and column mapping for each table being synchronized between client and server along with logical grouping of two or more tables.

The sync agent also accepts a client sync provider and server sync provider which hide the client database and server database specifics respectively from the agent . The sync agent accepts a collection of sync groups and runs a protocol provided with the framework of the invention in order to bring these groups in sync. Sync adapter instructs the sync agent how to interact with the server database . In this regard sync agent does not interact directly with sync adapters but rather sync agent interacts with the server provider which in turn uses the sync adapters to connect to the database . This interaction is defined through one or more of the following database command objects that may be carried out in accordance with non limiting embodiments of the invention Insert Update Delete Select Incremental Inserts Select Incremental Updates Select Incremental Deletes Select Update Conflict and or Select Delete Conflict commands.

The insert command in accordance with the invention is used by the server sync provider to propagate inserts on the client database to the server database .

The update command in accordance with the invention is used by the server sync provider to propagate updates on the client database to the server database .

The delete command in accordance with the invention is used by the server sync provider to propagate deletes on the client database to the server database .

The select incremental inserts command in accordance with the invention is used by the server sync provider to enumerate inserts that took place on the server database since the last time the client database synced.

The select incremental updates command in accordance with the invention is used by the server sync provider to enumerate updates that took place on the server database since the last time the client database synced.

The select incremental deletes command in accordance with the invention is used by the server sync provider to enumerate deletes that took place on the server database since the last time the client database synced.

The select update conflict command in accordance with the invention is used by the server sync provider to obtain the existing row that led to the failure of insert update or delete commands. This command performs a lookup of the conflicting row in the applicable data table.

The select delete conflict command in accordance with the invention is used by the server sync provider to get hold of the existing row that led to the failure of insert update or delete commands. In one embodiment this command performs a lookup of the conflicting row in a tombstone table to find the row in the tombstone table that leads to the failure of the update command but is not used when insert or delete commands fail.

As part of the synchronization framework of the invention an off line application may elect any one or more of the foregoing synchronization behaviors. Some of the embodiments and examples used herein pertain to database storage of data such as relational storage though for the avoidance of doubt the client or server data store can be any kind of data store.

With respect to server sync providers in accordance with the framework of the invention in one non limiting embodiment both default and custom providers are enabled. Default providers are provided to address common application scenarios e.g. thin client scenario rich client scenario SQL Server Compact Edition SQL Server Express etc. Application developers and third parties may also implement custom providers for less common scenarios e.g. Access FoxPro Sybase via a simple framework and helper classes for such custom providers .

In various non limiting embodiments of the invention functionality of server sync provider includes but is not limited to the ability to store sync information for groups the ability to enumerate incremental changes that took place on the database since the last sync the ability to apply incremental changes to the database the ability to detect conflicting updates and optionally resolve them programmatically or interactively and the ability to fire progress and data change events.

With respect to sync proxy today solutions that require direct connection to the server database are seen less and less these days as service oriented architecture SOA based solutions are growing in popularity. With a SOA model server exposes its functionality as a web service that connects to the server on demand. Via sync agent the client interacts with the web service through the internet or through a local intranet in an enterprise. The sync proxy component is thus a simple interface that enables building of disconnected SOA solutions though as emphasized earlier any transport mechanism for the synchronization framework may be used in accordance with the invention.

Thus describes an exemplary non limiting synchronization framework for applications running on laptops and workstations for each to synchronize with one or more sync groups defined for data in server database as maintained by servers .

Advantageously as mentioned above offline applications in accordance with the invention can implement custom client sync providers which are customized for a particular off line application such as off line application OLAn or default client sync providers which cover a variety of common synchronization scenarios that may be desirable for an off line application such as off line application OLA. As with via interfaces of the server sync providers or sync agent s use sync adapters to interact with the server database synchronizing according to defined sync groups . As shown server sync providers may also be provided as a default server sync provider to handle common known sync scenarios from off line applications OLA . . . OLAn or may be customized as a custom server sync provider to implement additional synchronization requirements. Sync providers are thus building blocks of the framework of the invention that help build synchronizing applications quickly and efficiently particularly for a set of widely anticipated kinds of off line behavior described in more detail herein.

As shown in in one non limiting embodiment the sync adapter of the invention is implemented similar to Data Adapter in Microsoft ADO.NET by using or extending Data Adapter constructs though for the avoidance of doubt the invention is not limited to implementations similar to Data Adapter. As illustrated server sync providers interface to ADO.NET Data Adapters which communicate with server storage vis vis defined sync groups of server . The approach to integrate sync into the ADO.NET programming model enables developers familiar with ADO.NET to build a sync application with minimum learning because the design of the SyncAdapter class is based on the ADO.NET DataAdapter class.

As shown in in another non limiting embodiment a default client sync provider is enabled for SQL Server Compact Edition clients for interfacing with storage i.e. a SQL Server Compact Edition database on behalf of offline application on client . As shown in in another non limiting embodiment a default client sync provider is enabled for clients for interfacing with file system storage on behalf of offline application on client

The provider architecture of the framework of the invention thus enables developers to use client and server providers provided in the framework or plug in a custom provider for more advanced scenarios. The framework of the invention provides building blocks for developers to build occasionally connected applications e.g. for a pay as you go experience. In this regard the framework has the components to build the simple solutions very quickly and it has the full flexibility to build complex solutions using the building blocks.

A variety of default scenarios are enabled by the synchronization framework for off line applications in accordance with the invention. illustrates a first scenarios enabled by the framework of the invention that advantageously allows a subset of data to be specified and retrieved by a client database for use by an application which may go offline and also to synchronize only the subset of data against the server database when on line. For instance this would allow an e mail application only interested in recent email to retrieve and receive synchronization updates only for recent email as defined by the application. As part of a request which may be a query for a subset of data from server database from an application of the client the server database in turn returns the subset of data according to the above described framework architecture.

In accordance with the invention the application may also then go off line and operate with respect to only the subset of data returned and then upon becoming connected again the client can request synchronization updates with respect to the subset of data on the client or request synchronization of a new subset of data. In either case the server returns the requested updates or new subset data according to the synchronization framework.

As shown by the invention also enables a read write client cache of data on client providing bidirectional sync capabilities. Optionally the bidirectional sync capabilities include a framework to support conflict detection and resolution when multiple clients change the same data. For instance conflict resolution can be performed at the server when two different client databases sync with the server database with different or conflicting data. This ensures that consistent data is pushed down to the clients . Alternatively each of the clients can be provisioned with conflict resolution mechanisms to reflect local application policy for resolving conflicts.

In addition as shown in for a bi directional synchronization where a conflict is discovered in the data due to independent evolution of data on different devices wherever conflict resolution is handled according to conflict resolution policy either at the client database and or server database the invention enables the ability to make local changes to the data before sync updates are applied e.g. to override a conflict resolution applied by conflict detection resolution component .

In various non limiting embodiments the framework of the invention thus provides the ability to plug in custom change tracking on a data store. For instance a user may only want to track changes to an email inbox but not to archived folders. Or for certain data such as medical records versioning will be very important while for other files such as an image archive versioning will not be important and thus change tracking might be disabled for the latter groups and only the subset of data for which versioning is desirable at the client database will have change tracking enabled.

Advantageously since client metadata is stored on a client as shown in the synchronization framework of the invention can be used to synchronize data according to a hub and spoke model where clients etc. can come into contact with a server and each synchronize with the data of sync group . Based on temporal properties such as timestamps of the data being synchronized and according to conflict resolution policy a consistent set of data of sync group can be maintained at server and at clients whenever the clients come into contact with the server.

At optionally a set of synchronization conflicts where data has independently been changed in separate locations as determined by the server are received by the client. The client optionally handles the set of synchronization conflicts according to various selected conflict resolution policy ies . At assuming receipt of the acknowledgment from the server the synchronization anchor is persisted on the client. Also an analysis of local changes to the data group s ensues and any changes to the client data group s that should be sent to the server are then transmitted to the server. At in a corresponding manner the client then receives from the server the desired updates to the client side version of the data group s . The client then receives a new synchronization anchor generated by the server but then maintained by the client for future synchronization requests.

Apply updates to the client side version of the data group s handling any conflicts and persist the new synchronization anchor from the server.

In further non limiting embodiments the invention enables an extensible sync anchor model by providing a protocol that carries an anchor type between client and server but does not assume any pre defined structure on the client and thus flexibly allows a wide spectrum of anchor data types with varying level of features. illustrates that a variety of anchor types A T A T . . . A TN can be passed back and forth between a server and a client in accordance with the protocol of the invention. In addition the structure of the anchor is defined by the server and advantageously the client does not need to understand the format in order to sync with the server. Anchors thus provide local hooks for synchronization of specified data among devices and generally includes a temporal watermark of some sort such as a Timestamp Identity Date Time etc. so that the hooks have a time dimension that can be analyzed during synchronization analysis and conflict resolution.

One of ordinary skill in the art can appreciate that the invention can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment connected to any kind of data store. In this regard the present invention pertains to any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes which may be used in connection with the synchronization framework of the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage. The present invention may also be applied to standalone computing devices having programming language functionality interpretation and execution capabilities for generating receiving and transmitting information in connection with remote or local services and processes.

Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for objects such as files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may function as components of the synchronization framework of the invention.

It can also be appreciated that an object such as may be hosted on another computing device etc. or etc. Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. any of which may employ a variety of wired and wireless services software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks. Any of the infrastructures may be used for exemplary communications made incident to the synchronization framework of the present invention.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power lines for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11B or wired e.g. Home PNA Cat 5 Ethernet even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media or other graphical data may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also digital interconnects for clusters of media devices. All of these network environments and others that may emerge or already have emerged as protocol standards may be interconnected to form a network such as an intranet that may be connected to the outside world by way of a wide area network such as the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently any of the computing devices of the present invention may share and communicate data in any existing manner and no one way described in the embodiments herein is intended to be limiting.

The Internet commonly refers to the collection of networks and gateways that utilize the Transmission Control Protocol Internet Protocol TCP IP suite of protocols which are well known in the art of computer networking. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over network s . Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system with which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as an example computers etc. can be thought of as clients and computers etc. can be thought of as servers where servers etc. maintain the data that is then synchronized or replicated to client computers etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting services or tasks that may implicate the synchronization framework in accordance with the invention.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects utilized pursuant to the techniques for synchronizing data groups of the invention may be distributed across multiple computing devices or objects.

Client s and server s communicate with one another utilizing the functionality provided by protocol layer s . For example HyperText Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW or the Web. Typically a computer network address such as an Internet Protocol IP address or other reference such as a Universal Resource Locator URL can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium e.g. client s and server s may be coupled to one another via TCP IP connection s for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with server s in communication with client computer s via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet GSM network the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to synchronize data.

In a network environment in which the communications network bus is the Internet for example the servers etc. can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc. as may be characteristic of a distributed computing environment.

As mentioned communications may be wired or wireless or a combination where appropriate. Client devices etc. may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects etc. and with connections or access to various types of storage elements or objects across which files or data streams may be stored or to which portion s of files or data streams may be downloaded transmitted or migrated. Any one or more of computers etc. may be responsible for the maintenance and updating of a database or other storage element such as a database or memory for storing data processed or saved according to the invention. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other like devices and databases .

As mentioned the invention applies to any device wherein it may be desirable to synchronize data. It should be understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the present invention i.e. anywhere that a device may synchronize data or otherwise receive process or store data. Accordingly the below general purpose remote computer described below in is but one example and the present invention may be implemented with any client having network bus interoperability and interaction. Thus the present invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as an interface to the network bus such as an object placed in an appliance.

Although not required the invention can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates in connection with the component s of the invention. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that the invention may be practiced with other computer system configurations and protocols.

With reference to an exemplary remote device for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up may be stored in memory . Memory typically also contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example computer could include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and or an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. A hard disk drive is typically connected to the system bus through a non removable memory interface such as an interface and a magnetic disk drive or optical disk drive is typically connected to the system bus by a removable memory interface such as an interface.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through user input and associated interface s that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics subsystem may also be connected to the system bus . A monitor or other type of display device is also connected to the system bus via an interface such as output interface which may in turn communicate with video memory. In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer which may in turn have media capabilities different from device . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter. When used in a WAN networking environment the computer typically includes a communications component such as a modem or other means for establishing communications over the WAN such as the Internet. A communications component such as a modem which may be internal or external may be connected to the system bus via the user input interface of input or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s managed code platform i.e. .NET includes servers building block services such as Web based data storage and downloadable device software. Generally speaking the .NET platform provides 1 the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them 2 increased interactive capability for Web pages enabled by greater use of XML rather than HTML 3 online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications such as e mail for example or software such as Office.NET 4 centralized data storage which increases efficiency and ease of access to information as well as synchronization of information among users and devices 5 the ability to integrate various communications media such as e mail faxes and telephones 6 for developers the ability to create reusable modules thereby increasing productivity and reducing the number of programming errors and 7 many other cross platform and language integration features as well.

While some exemplary embodiments herein are described in connection with software such as an application programming interface API residing on a computing device one or more portions of the invention may also be implemented via an operating system or a middle man object a control object hardware firmware intermediate language instructions or objects etc. such that the methods for communicating in accordance with the protocol of the invention may be included in supported in or accessed via all of the languages and services enabled by managed code such as .NET code and in other distributed computing frameworks as well.

There are multiple ways of implementing the present invention e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the systems and methods for synchronizing data of the invention. The invention contemplates the use of the invention from the standpoint of an API or other software object as well as from a software or hardware object that implements the protocol of the invention. Thus various implementations of the invention described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the subject matter disclosed herein is not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

As mentioned above while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to synchronize data. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code and nomenclature that achieves the same similar or equivalent functionality achieved by the various embodiments of the invention.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the protocol of the present invention e.g. through the use of a data processing API reusable controls or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer etc. the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.

Furthermore the disclosed subject matter may be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer or processor based device to implement aspects detailed herein. The term article of manufacture or alternatively computer program product where used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick . Additionally it is known that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN .

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flowcharts of B C D A and B. While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example while exemplary network environments of the invention are described in the context of a networked environment such as a peer to peer networked environment one skilled in the art will recognize that the present invention is not limited thereto and that the methods as described in the present application may apply to any computing device or environment such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate.

While exemplary embodiments refer to utilizing the present invention in the context of particular programming language constructs the invention is not so limited but rather may be implemented in any language to provide the synchronization communications protocol and methods of the invention. Still further the present invention may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

