---

title: Television having a java engine and a removable device port
abstract: Method and apparatus for use with televisions having an internal Java engine are included among the embodiments. In exemplary systems, a PCMCIA port allows the Java engine to load and execute Java applets selected by the viewer. Provision is made for system-aware applets to run concurrently with platform-independent applets on different Java display planes that are merged for display. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07719617&OS=07719617&RS=07719617
owner: Sharp Laboratories of America, Inc.
number: 07719617
owner_city: Camas
owner_country: US
publication_date: 20070416
---
This application is a continuation of U.S. non provisional patent application Ser. No. 10 868 591 filed Jun. 14 2004 titled TELEVISION HAVING A JAVA ENGINE AND A REMOVABLE DEVICE PORT which claims priority from U.S. provisional application Ser. No. 60 535 149 filed Jan. 6 2004 titled TELEVISION HAVING A JAVA ENGINE AND A REMOVABLE DEVICE PORT all of which are incorporated by reference in its entirety.

This invention pertains generally to televisions and more particularly to televisions with the capability to run Java applications and applets or similar routines.

Television receivers have long had the capability to create simple On Screen Display OSD graphics that overlay a received video program. Such graphics can display video and audio settings for interactive television adjustments closed captioning current channel input selections etc. A simple graphics generator or television processor provides the graphics in such systems.

Recently television receivers such as the Sharp Aquos have been introduced with more sophisticated graphics capability that allows a richer menu experience. These graphics are programmed as a fixed routine that is run by a television processor when the user selects a menu function with a remote. The fixed routine is stored in a ROM at the time of manufacture and called as needed based on viewer input e.g. with a remote control.

Some computers have the capability to run Java applets in one application window and display digital video e.g. from a DVD ROM inserted in an attached drive or Internet streamed video in another application window. Such a computer is not a television but a multi tasking computer platform that can run video display software as merely another graphical application controlled by the operating system. Current televisions do not have a capability for a viewer to select and run different Java applets and more specifically have no provision that would allow a viewer to load and run applets on the television that were not part of the television at the time of manufacture.

This description pertains to televisions with the capability to run Java or similar applets and display output from the Java applets to the television display. Standard Java does not support multi plane graphics which can be highly desirable in a television where multiple concurrently executing applets may be necessary and or the system itself may need to create Java output.

As used herein a television primarily functions to display video from one or more external video sources. The television embodiments described herein still retain this primary function but have added capabilities to run applets that can create graphical output that overlays or supercedes a video source. As televisions generally do not possess the voluminous processing and storage resources of a computer are expected to fit in a clean form factor similar in size to the display itself and preferably are operable by persons with less technical expertise than computer users using simpler interface devices running applets on a television presents particular challenges that are addressed herein. In particular newer LCD and plasma televisions tout their thinness and lightness as selling points and thus have little room for the bulky heat generating components of a fast computer.

Conventional televisions offer a fixed set of pre loaded graphical applications typically limited to configuration menus for the television. The embodiments below can include a richer set of pre loaded applets applications for instance voice messaging timers media players recorders time shifters and media locator selectors etc. The embodiments also offer a viewer the capability to select other applets not preloaded on the television and run the applets on the television. In addition to new or upgraded applets developed specifically for the television platform platform aware applets the embodiments preferably also allow a viewer to run applets that are platform independent such as games or other applets that are typically available to computer users. Because platform independent applets are currently developed without use by a television viewer as a primary consideration the television embodiments herein preferably allow such applets to run as expected while still allowing the television to function as expected.

To allow a viewer to provide new applets to the television the television contains a removable device port which supports media as well as other removable devices In some embodiments the removable device port comprises one or two PCMCIA Personal Computer Memory Card International Association PC card ports. The PC card and its ports are described in a series of standards dating back to the 1980s see for instance 8.0 2001. The PC card interface was developed for laptop computers and other computers that do not provide the large internal card bays e.g. for Peripheral Component Interconnect cards of desktop and tower servers. PC cards manufactured today provide Ethernet network interfaces modems wireless network interfaces e.g. IEEE 802.11x mass storage with micro disk drives or flash memory CompactFlash and CompactFlash adapters for other flash formats such as Memory Stick MultiMedia Card Secure Digital SmartMedia and XD. In some embodiments applets can be provided to the television by loading the applets to a mass storage device e.g. from a computer or purchasing a mass storage device with the applets preloaded and then connecting the mass storage device to the PC card port. Alternately with a wireless network interface card inserted in the PCMCIA port applets stored on a personal computer on the same wireless network can be accessed at the television. Additionally the television may accept and support other PCMCIA compatible devices.

A television processor provides basic control functions and viewer input interfaces for television . Television processor receives viewer commands both from buttons located on the television itself TV controls and from a handheld remote control unit not shown through the IR Port. Based on the viewer commands television processor controls an analog tuner input select section and also supplies user inputs to the digital video graphics processor over a Universal Asynchronous Receiver Transmitter UART command channel. Television processor is also capable of generating basic On Screen Display OSD graphics e.g. indicating which input is selected the current audio volume setting etc. Television processor supplies these OSD graphics when activated as a TV OSD signal to LCD panel driver for overlay on the display signal.

Analog tuner input select section allows television to switch between various analog or possibly digital inputs for both video and audio. Video inputs can include a radio frequency RF signal carrying standard broadcast television digital television and or high definition television signals NTSC video S Video and or RGB component video inputs although various embodiments may not accept each of these signal types or may accept signals in other formats such as PAL . The selected video input is converted to a digital data stream DV In in CCIR656 format and supplied to a media processor .

Analog tuner input select section also selects an audio source digitizes that source if necessary and supplies that digitized source as Digital Audio In to an audio processor and a multiplexer . The audio source can be selected independent of the current video source as the audio channel s of a currently tuned RF television signal stereophonic or monophonic audio connected to television by audio jacks corresponding to a video input or an internal microphone.

Media processor and digital video graphics processor provide various digital feature capabilities for television as will be explained further in the specific embodiments below. In some embodiments processors and can be TMS320DM270 signal processors available from Texas Instruments Inc. Dallas Tex. Digital video graphics processor functions as a master processor and media processor functions as a slave processor. Media processor supplies digital video either corresponding to DV In or to a decoded media stream from another source to digital video graphics processor over a DV transfer bus.

Media processor performs MPEG Motion Picture Expert Group coding and decoding of digital media streams for television as instructed by digital video graphics processor . A 32 bit wide data bus connects memory e.g. two 16 bit wide 1 M synchronous DRAM devices connected in parallel to processor . An audio processor also connects to this data bus to provide audio coding and decoding for media streams handled by media processor .

Dotted line divides the media processor subsystem from the host processor subsystem. Media processor cannot directly access the devices on the right host side of dotted line . Digital video graphics processor can access media processor and memory directly however and thus indirectly provides connectivity between media processor and flash memory or PCMCIA cards .

Digital video graphics processor coordinates and or implements many of the digital features of television . A 32 bit wide data bus connects memory e.g. two 16 bit wide 1M synchronous DRAM devices connected in parallel to processor . A 16 bit wide system bus connects processor to media processor an audio processor flash memory and ports for removable PCMCIA cards . Flash memory stores boot code configuration data system executable code and Java code class files for graphics applications and applets etc. PCMCIA cards can provide extended media and or application capability such as the Java applets explained herein.

Digital video graphics processor can pass data from the DV Transfer bus to LCD panel driver as is but processor can also supersede modify or superimpose the DV Transfer signal with other content. For instance processor can generate Java application applet graphics that overlay or supercede the DV Transfer signal system graphics that display messages over all underlying content or decode media from PCMCIA cards e.g. in a time shifting mode where media processor is coding a program to the PCMCIA card and processor decodes and displays a time shifted version of the same program allowing the viewer to pause rewind or skip through the program.

Multiplexer provides audio output to the television amplifier and line outputs not shown from one of three sources. The first source is the current Digital Audio In stream from analog tuner input select section . The second and third sources are the Digital Audio Outputs of audio processors and . These two outputs are tied to the same input of multiplexer since each audio processor is capable of tri stating its output when it is not selected. In some embodiments processors and can be TMS320VC5416 signal processors available from Texas Instruments Inc. Dallas Tex.

At system powerup digital video graphics processor creates an executable image for itself in memory and for media processor in memory . Flash memory stores the elements of this image as default system code for processors and . This code includes a system manager a Java engine which may contain any combination of a just in time Java compiler a Java interpreter or precompiled Java code and a Java manager that manages Java applets for processor audio codecs for processors and and video codecs for processors and . The system manager provides low level functions for communication with the other devices attached to processor and communicates system events to the Java manager and other processes. The Java engine interprets and executes Java code for the Java manager and Java applets when applets are loaded.

Referring to processor works at various times with up to three display planes a system display plane an applet display plane and a video and still image plane . The rearmost plane can contain digital video received at the DV Transfer port from processor or decoded MPEG video or JPEG images as well as images originally stored in other formats. The middle plane is active when a Java applet has focus or when the Java Manager displays graphics on the middle plane. The front plane is used typically infrequently to display alert and status messages from the Java manager. These messages can include message requests from a platform aware Java applet that does not have focus.

To create the digital video stream for the display software mixer and hardware mixer combine information from display planes and . Software mixer combines information from display planes and as will be explained in further detail below. A look up table LUT is used in block to convert the output of software mixer to the YCCcolor space of video plane . The output of LUT color conversion block is combined with video plane in hardware mixer .

The output of software mixer is taken at a multiplexer . Multiplexer can take input from one of three buffers applet display buffer system display buffer or an anti flicker display buffer . The multiplexer select signal is generated by region manager and the select criteria will be explained below. To summarize however if only one of the applet and system display planes is active mixing is bypassed to save resources and two switches and remain open. Only when both display planes are active are switches and closed to cause mixing to occur.

Further even when both display planes and are active mixing is only performed as needed. Region manager tracks which regions of buffers and are being updated and controls a MUX control block a multiplexer and the addressing of a composite display buffer and the anti flicker display buffer to mix only the updated regions.

In order to intelligently control mixing region manager receives two types of notifications system graphics section registration and unregistration notifications from the Java manager and paint region notifications for both display buffers from the Java engine. The region manager can be implemented wholly or partly within the Java engine. Referring to when the Java manager desires to paint system graphics to a region of the display it calls a Java engine API Application Programming Interface to register a rectangular section of the display bounding the desired region the system graphics need not be rectangular but the registered section is preferably rectangular for simplicity . For instance shows two registered section of the system display plane. Section is described by the parameters x y w h which respectively specify the section s left boundary with respect to the left edge of the display the section s upper boundary with respect to the top edge of the display the section s width and the section s height. Section is described by similar parameters x y w h . A second API allows the Java manager to unregister a previously registered section.

In some embodiments region manager maintains a linked list of registered system graphics areas with the head of the list maintained by a pointer SystemGraphics Section Head that is initially a NULL pointer. When the Java manager requests registration of section a node is added to the linked list containing the parameters x y w h and a Next pointer that is initially NULL. When the Java manager subsequently requests registration of section a second node is added to the linked list containing the parameters x y w h and a Next pointer that is initially NULL. The Next pointer of the first node is modified to point to the second node to create the linked list shown in .

When the Java manager unregisters a region the corresponding node is removed from the linked list. Whenever SystemGraphics Section Head is not NULL region manager assumes that system graphics are active. Note that region manager can in some embodiments choose to merge two linked list nodes to a single bounding rectangle node particularly if the regions overlap.

The second type of notification received by region manager is a paint region notification. Whenever an applet with focus or a component of the Java manager calls a routine to draw to applet display buffer the draw or paint routine notifies region manager that a rectangular bounding region for the routine has been modified. Whenever the Java manager draws to system display buffer the draw or paint routine sends a similar notification to region manager . Region manager uses paint region notifications to create a second linked list similar to the system graphics section linked list. As shown in the flowcharts of region manager uses the paint region linked list to control mixing when both buffers and are active.

Returning briefly to MUX control controls the mixing operation of multiplexer . MUX control causes multiplexer to operate on the portions of buffers and that are newly added to the paint region linked list. If a newly painted section does not overlap a current system graphics section switch is kept open and the paint region is copied to the composite display buffer. When a system graphics section is overlapped mixing is required. In that case MUX control looks for a hard key in the pixel data coming out of system display buffer when the hard key is not set for a particular pixel the current pixel in buffer is copied to composite display buffer when the hard key is set for a particular pixel the current pixel in buffer is copied to composite display buffer . In some implementations the hard key is a pixel value of zero which indicates a transparent pixel.

When software mixing is required region manager determines whether the status of the system display or applet display has changed since the last time region manager performed this analysis. In particular if mixing was not performed on the immediately preceding frames the anti flicker display buffer likely is not current and should be initialized before multiplexer switches to accept output from buffer . In this instance region manager sets the whole display area as an update region before initiating mixing.

During software mixing the output of buffers and is mixed to composite display buffer as shown in and the anti flicker display buffer is updated as shown in from the composite display buffer on a frame interrupt to prevent frame tearing. Once the anti flicker display buffer is stable region manager selects the anti flicker display buffer for hardware mixing.

Once the composite display buffer has been updated for a paint region the corresponding node in the paint region linked list is modified to indicate a status of mixed. Region manager then traverses to the next node in the paint region linked list. When the next region is NULL the end of the list has been reached and the software mixing routine exits. When the next paint region is not NULL and has not been mixed already the software mixer loops back up and processes the new region as described for the first region.

Region manager then traverses to the next node in the paint region linked list. When the next region is NULL the end of the list has been reached and the anti flicker display buffer routine exits. When the next paint region is not NULL the routine loops back up and processes the new region as described for the first region.

The Java engine allows multiple Java applets to run concurrently with each other and with the Java manager. As just described however only one applet at a time can have the focus of the viewer s remote control or other input device and perform updates to the applet display buffer. Platform aware applets can be written to understand what it means to receive and lose focus but no such assumption can be made when the viewer is allowed to load platform independent Java applets from the PCMCIA port. Thus the television embodiments are designed to cope with two types of Java applets platform aware applets which are coded specifically to interoperate with the Java manager and platform specific APIs and platform independent applets which are not. Generally the applets that are factory loaded into flash memory are platform aware applets while applets accessible through PCMCIA cards can be either platform aware applets or platform independent applets. Platform aware applets have access to platform specific APIs to perform such functions as channel and volume changes picture in picture functions JPEG and MPEG4 display etc.

The Java manager includes a class the application manager that functions as a Java applet browser launcher. The application manager can be assigned to a specific key on the viewer s remote control and or can be activated from a menu. The application manager maintains a list of currently available Java applets that are available to the viewer. This list will typically include some of the Java applets stored in flash memory some may only be available to other Java applets and not to the viewer and any applets found using PCMCIA cards . Preferably the application manager locates descriptor files and icons for each available applet and can then present the applets to a viewer in an easily comprehended graphical format. Note that if a PCMCIA card provides wireless connectivity to multiple shares where a share is a shared resource located on a computer or other wireless device applets available on each share can be arranged in the graphical format by share.

Assume for the following example that the application manager is the described application manager and a platform aware applet B is an MP3 player. In addition assume that the application manager has located two platform independent applets an applet C and an applet D which could be for instance a solitaire game and a checkers game respectively. illustrate applet manager function as a viewer navigates between the application manager these various applets and the video function of the television. An applet that is currently not loaded to memory is depicted with a dashed border an applet that is loaded to memory is depicted with a solid border and an applet that has focus is depicted with a bold solid border.

In the viewer selects application manager from a remote control. The Java manager is notified of the viewer selection and directs focus to the application manager class. The Java engine is notified that the application manager class will now receive focus and receives a request to begin executing the class files for the application manager if they were not executing already. The application manager locates the applets available to the viewer in flash memory and through a PCMCIA card and creates a browse launch display in applet display buffer . The viewer may then use remote control buttons to navigate and select one of the displayed applets with the application manager modifying its display according to the navigation commands in order to interact with the viewer.

When a user selects one of the displayed applets the application manager notifies Java manager that the viewer has requested the launch of an applet. For instance in the viewer selects applet B the MP3 player. The Java manager calls the Java engine to launch applet B. Application manager loses focus and can no longer paint to the applet display buffer. The Java engine is notified that applet B will now receive focus and receives a request to begin executing the class files for the MP3 player. Applet B may provide to the viewer for instance playlists or individual MP3 file lists for MP3 files accessible through the PCMCIA cards . The viewer may then use remote control buttons to navigate and select an MP3 file files or playlist and hit play to begin playing the selected MP3 media through audio processor .

Although the application manager has now lost focus it still runs in a background mode. When a new PCMCIA card is inserted or removed from the television or new shares appear or disappear from the wireless LAN the application manager can be programmed to notify the viewer that the list of available applets has changed. For instance on PCMCTA card removal all running processes receive a broadcast message that the card has been removed. Upon receiving this message since the application manager does not have focus it can signal another section of the Java manager to request a transient system message e.g. Some Applets No Longer Available Press Applets Key to View Current List . Java manager requests a system graphics section for the message and displays it to system display buffer .

Referring now to the viewer now selects a Video mode causing applet B to lose focus. Java manager asks applet B whether it can be killed. In this example applet B responds no at which time applet B is notified that it has lost focus and can no longer paint to the applet display buffer. The Java engine is notified that applet B has lost focus but applet B can continue to play MP3 files in a background mode. Like the application manager applet B can use the Java manager to display status messages such as a song name when a new song starts on the system display buffer.

In the viewer presses a button to return focus to the application manager. The Java engine is notified that the application manager now has focus the application manager is notified that it has focus and the application manager once again draws its applet browser display to applet display buffer .

In the viewer selects a platform independent applet C the solitaire game and launches it causing a series of events similar to those described for . The solitaire game class files are loaded from the PCMCIA card to memory and applet C is launched. Whereas applet B registered as a platform aware applet when launched applet C has no such registration function and thus the Java manager and Java engine know that applet C has no internal provision for receiving and losing focus. Applet C output is directed to the applet display buffer and the viewer can operate the applet using remote control buttons. Since the applet display buffer requires no special API controls platform independent applets can write to it without problem. The Java engine and software mixer allow the platform independent applets to function in a manner that is compatible with the television platform.

In the viewer once again selects the application manager to regain focus. Applet C cannot continue to run because it does not have the ability to direct its output anywhere but the applet display buffer and thus would interfere with the output of the application manager. Applet C can either be killed or paused i.e. remain in memory but not receive any calls as a design choice. If paused applet C can potentially be resumed by reselecting it from the application manager. The kill or pause decision can also be based on other criteria such as memory usage. Thus if memory usage is high the oldest paused applets can be deleted from memory.

Finally in the viewer once again selects a Video mode causing the Java manager to pause or optionally kill applet D.

Although optional the application manager could allow other applet related activities. For instance applets could be copied from a network share to PCMCIA mass memory. Or a favorite applet could be designated and saved to flash memory .

One of ordinary skill in the art will recognize that the concepts taught herein can be tailored to a particular application in many other advantageous ways. In particular those skilled in the art will recognize that the illustrated embodiments are selected from many alternative implementations that will become apparent upon reading this disclosure. The particular functional block groupings used herein present one possible functional grouping but functions can be subdivided and or combined in many other combinations that fall within the scope of the appended claims. Although Java applets have been described the described embodiments can be used with other object oriented coding schemes.

The removable device port can be a port other than a PCMCIA port. For instance a Firewire IEEE 1394 or USB Universal Serial Bus 2.0 port can be used to connect a removable device. Ports that directly accept Memory Stick MultiMedia Card Secure Digital SmartMedia and or XD flash devices can also be used.

Two Java buffers have been described but more can exist and be integrated into the described mixing schemes. Mixing with a single hard key has been described but more complicated mixing schemes are possible. Such minor modifications are encompassed within the embodiments of the invention and are intended to fall within the scope of the claims.

The preceding embodiments are exemplary. Although the specification may refer to an one another or some embodiment s in several locations this does not necessarily mean that each such reference is to the same embodiment s or that the feature only applies to a single embodiment.

