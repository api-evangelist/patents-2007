---

title: Asynchrony debugging using web services interface
abstract: A system and method for debugging a running process of an application or component is disclosed. A debugging client has a user interface for receiving user commands to configure and control a debugging program. A debugging agent is resident in a local network area with the running process and has a direct connection with the running process. The debugging agent is configured to execute the debugging program to obtain debugging information on the running process, and to send the debugging information to the debugging client. A Web services communication link is established between the debugging client and the debugging agent for communicating signals to the debugging agent from the debugging client representing the user commands to configure and control the debugging program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08239839&OS=08239839&RS=08239839
owner: SAP AG
number: 08239839
owner_city: Walldorf
owner_country: DE
publication_date: 20071221
---
This disclosure relates generally to enterprise software systems and more particularly to asynchronous debugging of enterprise software using a Web services interface.

For software developers and sellers there is often a need to analyze problems in a customer s system. Problems can be analyzed by debugging an application on the customer s site without transferring or installing a program integrated development environment IDE and source code. However a debugging agent that performs problem analysis includes source code and is typically located on the same machine or in the same network area as the process being debugged.

Typically customers only allow very restricted access to their systems and often treat any access as a security issue. Any access to a customer s system needs to fulfill high cryptographic standards. Many conventional schemes for maintaining a customer s system remotely do not adequately support access via a wide area network WAN particularly for a maintenance operation involving only a single step.

In general this document discusses an asynchronous debugging system and method that simplifies problem detection and analysis of applications or components by using a Web services interface. An asynchronous debugger using a Web services interface is disclosed that allows debugging or tracing of both local and remote systems running on different operating systems OSs and different technology Java ABAP C etc. .

The debugging system provides debugging data without stopping execution of a running process being debugged such as execution of a Java process or ABAP process. Thus the debugging system enables intelligent extended tracing with debugging information granularity. The debugging information can be obtained from data obtained from the process even if the process or its host system is not running. Accordingly offline debugging in the form of step execution or simulation of already finished processes are possible.

In one aspect a system for debugging a running process of an application or component is disclosed. the system includes a debugging client having a user interface for receiving user commands to configure and control a debugging program and a debugging agent resident in a local network area with the running process and having a direct connection with the running process. The debugging agent is configured to execute the debugging program to obtain debugging information on the running process and to send the debugging information to the debugging client. The system further includes a Web services communication link established between debugging client and the debugging agent for communicating signals to the debugging agent from the debugging client representing the user commands to configure and control the debugging program.

In another aspect a method for debugging a running process of an application or component is disclosed. The method includes establishing a connection with the running process from a debugging client via a debugging agent. The connection includes a communication link between the debugging client and the debugging agent that employs Web services. The method further includes debugging the running process with a debugging process executed by the debugging agent the debugging process being configured by the debugging client.

In yet another aspect a system for debugging a running process of an application or component is presented. The system includes a debugging process that is configured and controlled by a debugging client and executed by a debugging agent in communication with the debugging client via Web services connection the debugging process being configured to debug the running process according to one or more breakpoints established by the debugging client and executed by the debugging agent.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

This document describes a template based asynchronous debugging system and method. illustrates a general architecture of an asynchronous debugging system . The debugging system includes a debugging client running in an IDE debugger that communicates asynchronously with a debugging agent using a Web services connection . The communication is platform independent and therefore can be connected to any debugging agent running in any operating system OS as well as be connected to any different system e.g. Java ABAP C etc. .

The Web services connection provides communication via one or more Web services. Each Web service is a piece of platform system independent self contained self describing application functionality that is designed and operates according to open Internet standards. According to a designated design and communication model one application makes a Web service available for use referred to as the service provider and another application accesses and runs the provided service referred to as the service consumer . Therefore Web services can be used for communicating between different applications and software components that are written in different programming languages and running on different software or system platforms.

To overcome application and platform barriers Web services are based on the following widely supported industry standards 

Standard communication protocols Hypertext Transfer Protocol HTTP or Simple Mail Transfer Protocol SMTP .

Standard data representation format eXtensible Markup Language XML and XML using Simple Object Access Protocol SOAP . SOAP is a protocol for exchanging XML based documents via a network using a standard transport protocol typically HTTP.

Standard service description language Web Services Description Language WSDL . WSDL is the language that is used to describe the public interface of a Web service. WSDL is used to define the service contract specification which contains the interface description that is defined by the XML based document. SOAP describes how to invoke a Web service that is described by the WSDL document.

Standard discovery language Universal Description Discovery and Integration UDDI . UDDI is a platform independent protocol that enables applications and software components to look up or discover in Web services terminology available services in an XML based service registry. UDDI is an industry initiative to standardize the discovery of Web services. UDDI defines a SOAP based application programming interface API for querying centralized Web service repositories.

The debugging agent is configured to communicate with the application or component running process to be debugged via a direct communication channel such as a socket connection. Accordingly the debugging client does not connect directly to the running process .

The debugging agent is a program that connects to the running process e.g. Java process running on a Java Virtual Machine JVM ABAP process running on an APAP application server C process running on a Microsoft Common Runtime etc. . In an exemplary implementation the debugging agent is a platform specific OS and runtime and or process agent or program that enables the connection to and control of the running process .

The connection between debugging client and debugging agent is a secure connection which uses a SSL Secure Socket Layer communication. This connection requires user authentication. The authenticated user is identified by the debugging agent by client ID. Only an authenticated user can control and or configure the debugging agent such as transferring and activating a template based debugging breakpoint configuration or in other words a breakpoint set in the running process.

A template based debugging configuration is defined for the asynchronous debugging system and method that can be transferred to the customer and activated in the customer s system. The configuration transfer and activation is done without stopping the process execution e.g. execution of Java process or ABAP process and provides the configuration of both hard and soft breakpoints. A hard breakpoint stops the process execution which is the normal behavior of a standard debugger. A soft breakpoint only temporarily stops the process execution and can be used as an intelligent trace that enables a developer to execute a designated process or its simulation later. The hard and soft breakpoints are defined for the asynchronous debugger in debugging client and a Web services interface is used to transfer the breakpoints to a debugging agent. That allows debugging or tracing of both local and remote systems running on different operating systems OSs and different technology Java ABAP C etc. .

The debugging system works asynchronously the debugging client uses the Web services to connect to the debugging agent through a firewall . The debugging client includes a debugging agent user interface for maintaining breakpoints in the debugger source code evaluating the process data online or offline and controlling the process execution.

At the debugging client uses Web services to maintain breakpoints in the process. The breakpoints can be set deleted or have conditions defined to them i.e. times when the breakpoints will stop the process. At if the process is stopped the debugging client uses Web services to obtain via the debugging agent debugging information for analysis by the debugging client via the user interface and analytics executed by the debugging client. Debugging can be either online or offline. Thus the debugging client can evaluate results from the debugging information later. At the debugging client controls the next execution steps of the process through the debugging agent i.e. if the process should step in step out or run again.

Some or all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of them. Embodiments of the invention can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium e.g. a machine readable storage device a machine readable storage medium a memory device or a machine readable propagated signal for execution by or to control the operation of data processing apparatus.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also referred to as a program software an application a software application a script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to a communication interface to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks.

Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the invention can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the invention can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Certain features which for clarity are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features which for brevity are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the steps recited in the claims can be performed in a different order and still achieve desirable results. In addition embodiments of the invention are not limited to database architectures that are relational for example the invention can be implemented to provide indexing and archiving methods and systems for databases built on models other than the relational model e.g. navigational databases or object oriented databases and for databases having records with complex attribute structures e.g. object oriented programming objects or markup language documents. The processes described may be implemented by applications specifically performing archiving and retrieval functions or embedded within other applications.

