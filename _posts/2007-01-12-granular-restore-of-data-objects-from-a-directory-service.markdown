---

title: Granular restore of data objects from a directory service
abstract: A system and method for performing a granular restore of data objects from a directory service is disclosed. In one embodiment, at the time a backup of the directory services database is performed, a metadata file with index values for some data objects is created. The metadata file may include an index of the name and an object identifier for each included data object. During granular restore of one or more data objects selected for restoration, the corresponding object identifier is retrieved from the metadata file using the name of the data object. The object identifier is then used to restore the data object in the directory service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797281&OS=07797281&RS=07797281
owner: Symantec Operating Corporation
number: 07797281
owner_city: Mountain View
owner_country: US
publication_date: 20070112
---
This invention relates to the field of information processing systems and more particularly to backup and restore of data objects from an object database.

Modern computer networks include so called directory services which are software applications or sets of applications for storing and organizing information about users services and resources. A directory service also allows network administrators to manage users access to resources. Common directory services include NIS Sun Microsystems Inc. eDirectory Novell Inc. Fedora Directory Server Red Hat Inc. Active Directory and NTDS Microsoft Corp. Open Directory Apple Computer Inc. ApacheDS Apache Software Foundation OID Oracle Corp. and also the open source software OpenLDAP. The X.500 series developed by ITU T is a series of computer networking standards covering electronic directory services.

A given directory service is associated with a directory repository which is the database that stores the information that is managed by the directory service. For example a directory repository may include one or more namespaces that include a hierarchy of data e.g. data objects . The directory service thus acts as an interface that can authenticate access to the system resources that manage data in the directory repository. For example a directory service allows the directory repository to be searched on the many different attributes or object identifiers that can be associated with objects within the repository.

A backup of a directory repository associated with a directory service is generally monolithic that is the entire repository is replicated. The corresponding restore operation for a directory repository is often monolithic as well. Monolithic restore operations are often complex inefficient and time consuming.

Various embodiments of a method and system for backing up and restoring data objects of a database associated with a directory service are disclosed. In one embodiment a method for backing up the object database by a computer system comprises copying a plurality of data objects from a database to a backup medium wherein said database is associated with a directory service.

For at least a first of said plurality of copied data objects the database is queried to determine a first private object identifier POI associated with the first data object wherein the POI is usable to restore the first data object via a first interface of the directory service and wherein said computer system is not configured to generate from the backup medium the first POI. Additionally the first POI is stored as metadata associated with the first data object.

In some embodiments the first POI may be generated using a proprietary protocol associated with the directory service. The metadata may be stored in a metadata file where the metadata file includes an index value and an associated POI for each of one or more of the plurality of copied data objects. The metadata file may also be stored on the backup medium.

In still further embodiments a request to restore the first data object to the directory service is initiated. The first data object is received from the backup medium. The previously stored metadata associated with the first data object including the first POI are received. Then the first POI and the received first data object are used to restore the first data object via the first interface of the directory service. At least a portion of the POI may be encrypted. The first interface may be a cached API and the first POI may be required to access the directory service via the first interface.

In some embodiments the computer system is configured to perform the backup via a second interface to the directory service. The first and second interfaces may be different interfaces of the directory service using different authentication protocols.

In yet another embodiment a request to restore a first data object from a backup medium to a database associated with a directory service is initiated. The first data object is received from the backup medium. A first object identifier is received from a location external to the database wherein the computer system is not configured to generate the first object identifier from the backup medium. The received first data object and the received first object identifier are used to restore the first data object to the database. The first interface may use an authentication protocol that includes for the first data object the first data object and the first object identifier.

The generation of said first object identifier may use a proprietary protocol associated with the directory service wherein at least a portion of said first object identifier is encrypted. The directory service may be accessible using a lightweight directory access protocol LDAP . The first interface of the directory service may be accessible via a cached API.

Another embodiment is represented by a computer readable medium including program instructions executable to backup and restore data objects according to the methods described herein. A computer system embodiment includes a processor and a memory storing program instructions executable by the processor to backup and restore data objects according to the methods described herein.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

Referring to a block diagram is shown of one embodiment of an archival system for a database or directory repository associated with a directory service. As illustrated database is associated with a directory service which is configured to manage and maintain a plurality of data objects for a plurality of system users or client systems. Some standards for directory services include X.500 and the lightweight directory access protocol LDAP . An application program which in this embodiment includes a backup module and a restore module interfaces to database via interfaces and . Backup module interfaces to metadata file and backup medium via interfaces and respectively. Similarly restore module interfaces to metadata file and backup medium via interfaces and respectively.

In database is associated with directory service . Directory service acts an interface to programs or services wishing to access database . For example the backup and restore modules and respectively of application program access database via interfaces and . In other embodiments application program and other programs may interface directly with database . Directory service and database may include user interfaces program code and data interfaces for operating directory service . Database may further include tables indexes relationships queries stored procedures file systems security layers networking interfaces etc. as needed to access the constituent plurality of data objects also referred to as records or entries . One embodiment of a database is a relational database in which the records are arranged in tables according to a row and column arrangement. In another embodiment database is an object database in which the data objects are organized according to one or more hierarchical namespaces. In various embodiments database includes a core data store that uses the Indexed Sequential Access Method ISAM . Directory service is an interface for creating and modifying database for storing and accessing information according to the particular implementation of database e.g. relational database object database . In some embodiments database executes on a dedicated computing system that is configured for access by other server and client computers via a communications network.

As mentioned previously database and directory service may be configured differently in various embodiments. For example database may be wholly embedded within directory service . In another example database may be accessed independently of directory service . In various embodiments at least some of the accesses to database are independent of directory service while other accesses to database are via directory service .

Directory service may provide an interface to data objects contained in one or more namespaces or directory trees. A directory service may thus include a definition of a namespace for a computer network. A namespace is the set of rules that define how network resources are named and identified. Each entry stored in the database of the directory service i.e. each data object can be specified using attributes that establish a unique and unambiguous name. The data objects may be organized in a hierarchical namespace with parent and child classes of objects. The information defining a particular hierarchical namespace is also referred to as a directory information tree. 

The objects in database e.g. objects in a directory information tree may be accessed using an object identifier which may include a root and successive nodes within the namespace. In this notation a series of numbers representing nodes identify each node in a directory information tree. One example of an object identifier is the Abstract Syntax Notation One ASN.1 standard defined by ITU T Geneva Switzerland . In directory services that use LDAP each class of data objects and each type of attribute is also assigned a unique object identifier. Other attributes in an object name can include security and access parameters.

The object identifier associated with a data object may occur in a wide variety of formats. As mentioned above ASN.1 is a standard notation for object identifiers used with LDAP and other types of directory services. Even within the ASN.1 standard there are several kinds of encoding rules for compressing or encrypting object identifiers. However some implementations of directory services rely upon object identifiers that cannot easily be generated outside of the corresponding directory service database. Such object identifiers are private relative to a given computer system if the computer system is not configured to generate the object identifier outside of the context of the directory service and corresponding database. For example an object identifier that is generated by a proprietary algorithm within a database e.g. the ASN based notation identifier with Microsoft s Active Directory is private relative to a computer system that is not configured to run the proprietary algorithm. A private object identifier may be referred to as a POI. 

A POI similar to a standard object identifier may be in the form of binary data such as a number or a string and may be limited to a specific size or data type i.e. 32 bit integer . The POI may be just an index value that refers to an entry in a list of additional object identifying data. The POI may also include additional information including information relating to one or more of the following hardware platform network domain user identification access control list system interface encryption certificate etc. A POI for a data object may include an encrypted or compressed representation of at least a portion of a non private object identifier for the data object.

In one embodiment an object identifier can be queried from an implementation of a directory service but cannot generally be obtained from a copy of the data object. For example an object identifier may be the result of a proprietary algorithm that operates on an ASN.1 compliant object identifier. The directory service implementing the proprietary algorithm to generate the object identifier may require the identifier for certain types of access to the database. In one embodiment a directory service may require that an object identifier generated using proprietary means be provided as part of an authentication protocol for replacing or creating data objects in the database. In some embodiments the POI may be used with an interface layer associated with one or more types of directory services. For example Microsoft s Active Directory Services Interface ADSI requires an object identifier in a proprietary format for accessing data objects in Active Directory.

As stated above application program may access database via interfaces and respectively. In particular backup module may access database via interface while restore module may access database via interface . Interfaces may include a local or remote network interface and may also include network and or software driver layers for communicating with database . In one embodiment interfaces provide an SQL Structured Query Language interface to database . In another embodiment interfaces access database using a lightweight directory access protocol LDAP via directory service . In one particular embodiment directory service is a Microsoft Active Directory and interfaces are Joint Engine Technology JET Blue or Extensible Storage Engine ESE interfaces also from Microsoft Corporation for accessing database . Interfaces may also provide for access via standardized application programming interfaces known as APIs.

An API for accessing interfaces may include a library of software functions which can be called by external programs for accessing database via directory service . In one embodiment the API for interfaces that encapsulates additional protocol layers also includes a caching mechanism for processing multiple transactions. Some APIs for interfaces may provide access to a variety of specific implementations of directory services and its associated database such that program code developed using the API functions can be used with different kinds of directory services . One example of a cached API for accessing directory services is the Active Directory Services Interface ADSI by Microsoft Corp. In some embodiments ADSI is a standardized API associated with interface that can accept a POI as a parameter for a function that accesses a data object. It is noted that an API may encapsulate addition interface layers. For example ADSI encapsulates interface layers LDAP and JET ESE.

In some configurations where an API is used via interfaces the API may generate an object identifier for accessing data objects. The means for generating this object identifier may not be available outside of the API resulting in an object identifier that is private. Furthermore in some embodiments the API may require the object identifier for write access to data object via interface i.e. write overwrite delete create restore etc. . In some configurations the object identifier may represent an element of the security model that protects the data in directory service . In some embodiments an ASN.1 encoded object identifier is required by an API at interface .

Application program is configured to backup and restore the contents of database . Although application program is shown as including both backup module and restore module in another embodiments the backup and restore function are in separate programs. Backup application and restore application singly or in combination may also be configured to provide other known archiving functionality as desired such as various features provided by the Enterprise Vault or Backup Exec products from Veritas Corporation.

Application program is operable via backup module to archive copies of data objects from directory service to backup medium . Backup medium may be any suitable type of memory medium including a tape drive a disk drive a storage array an entire storage sub system etc. Backup medium may also be located at a remote site in which case interfaces and include a network interface. For example backup medium may be a storage area network SAN in some embodiments or a logical volume created on a SAN. Application program via restore module is also operable to restore data objects from backup medium to database .

Backup medium may be accessed by restore module of application program via interfaces and . In some embodiments interfaces and may not be configured with the same functionality complexity or security that interfaces provide in some embodiments as the data stored on backup medium may not be an operational directory service but an archived copy of the information in database . In other embodiments interfaces and are similar to the interfaces and described above. For example where directory service is Active Directory interfaces and or can be JET ESE interfaces. Interfaces and can also include a local or wide area network in the case of a backup medium that is remote from directory service and database .

During the backup process backup module of application program is also configured to determine metadata that is data associated with data objects that have been copied to backup medium . In one embodiment the metadata for a particular data object is read from database at approximately the same time the data object is copied to backup medium . In one embodiment the metadata is then copied to metadata file which may be the same located on backup medium or any other suitable storage medium. Metadata file and backup medium need not be located on the same storage medium or in the same storage network. Although metadata file is shown as a single file it may be stored as a plurality of files as data objects within a database or any other suitable means.

The metadata for a particular data object includes but is not limited to an object identifier e.g. a POI that is usable to access database via interface . In some embodiments the object identifier POI for a particular data object may be usable to allow application program to restore individual data objects and not simply the entire database as part of a monolithic restore operation . In this manner a granular restore feature is achieved. The metadata stored in metadata file may also include additional information for example an index of POIs along with the corresponding name for each of the data objects stored on the backup medium.

For example using the ADSI interface to access an Active Directory an object identifier is returned upon querying data objects for backup. This same object identifier is required for restoring the data objects via ADSI. If the object identifier of a data object to be restored is not available then the data object cannot be restored in a granular manner using ADSI. Since the POI is associated with communication between directory service and database it is not stored in database . Therefore there is no provision for storing POIs on the backup medium during backup of database .

When a POI is needed to access an interface of database the metadata stored in metadata file can be used by restore module of application program to restore one or more data objects from the backup medium to database . Restore module upon being requested via a graphical user interface or otherwise to restore one or more data objects accesses metadata file to determine the POIs for the data objects desired to be restored. Restore module then uses these POIs to access database via interface in order to restore data from backup medium .

The restoration of a selected data object may be preceded by reading certain index values from backup medium and using these index values to index information in metadata file . For example restore application may read the name or other metadata of a selected data object from backup medium and use the name to retrieve a POI for that data object from metadata file . In this manner POIs for one or more data objects may be supplied by restore application to interface along with other information for reconstructing the respective data objects in directory service . In various embodiments other kinds of metadata may be stored as index values in metadata file . Also illustrated in is backup application which can be configured to perform a backup of the contents of the database associated with directory service . As will be discussed in detail below backup application can be configured to generate and store metadata associated with data objects along with the backup of database stored on backup medium . It is noted that backup medium may represent an identical instance of the database at the time the backup was performed. The metadata may then be used to access or restore the contents of backup medium and to restore individual data objects in directory service .

Backup application is operable to archive to a backup medium such as removable storage or any other type of archive storage . Alternatively selected data objects may be transferred from directory service to a remote archive storage through a network interface. Restore application is operable to restore data objects or other data acquired from previous archive operations to directory service .

It is noted that in the embodiment illustrated in backup application may communicate with directory service via interface for selecting and retrieving content for archiving. In various embodiments interface between backup application and directory service may include a network connection along with the necessary network and software drivers as previously mentioned. The backup application generates a backup copy of the database on backup medium which may be stored on a storage medium separate from directory services or in other appropriate locations.

Turning now to one embodiment of a method for restoring data objects is illustrated. The method may be executed in one embodiment by restore application . In step the backup repository is opened for reading. In one embodiment of step an open command is sent via interface with parameters specifying the backup repository . In another embodiment a database engine for example JET ESE Microsoft Corp. is used to open a connection to repository in step . It is noted that steps shown in method may be optional or arranged in a different manner in various embodiments.

In step the metadata file is opened for reading. In one embodiment of step a file open command is sent to the file system with parameters specifying the metadata file . In another embodiment of step wherein the metadata file has been embedded within backup repository the metadata file is located and extracted. In step the contents of the metadata file may be read parsed and made available to restore application . In one embodiment restore application reads data from metadata file including the name and POI for each data object being restored as desired.

In step an attribute of the data object to restore is selected. The attribute is used to identify the data object for example a name or object identifier for the data object. The selection may be performed within restore application . Data objects for restoration may be selected from a list of available data objects for example with a user interface. In some embodiments the available data objects are queried based on an attribute value and a selection is made from the query results. In some embodiments the selection of data objects in step may be performed by accessing the metadata file and reading the names of data objects available for restoration. It is noted that in method steps are described for a single data object. One skilled in the art would appreciate that these method steps could be repeated in other embodiments for any number of data objects. In some embodiments steps could be individually performed for a plurality of data objects as desired. In one embodiment of step the name of the data object is used to identify which data objects have been selected for restoration.

In step the name of the one or more data objects selected in step are used to look up the POI for each data object in the metadata file . As described in detail below with respect to the respective POIs for the selected data objects have been previously stored during backup in metadata file . 

In step the one or more data objects selected in step are retrieved from the backup copy of the directory repository . The retrieval of data objects from backup repository can be performed by restore application via interface . As will to be appreciated by a skilled artisan step may alternatively be performed prior to step in some embodiments. If for some reason some data objects cannot be retrieved from backup repository the method may skip further processing for those data objects and may optionally return an error message with indication of the issue at hand while restoration of other data objects continues. In some embodiments the entire restoration is halted if any one of the selected data objects cannot be retrieved in step .

After the selected one or more data objects have been retrieved in step the individual data objects are restored in step . A respective POI may be used to identify and restore data objects via interface . For example if interface represents an ADSI interface a POI in the ASM.1 format can be provided for each data object being restored. Other formats and interfaces may be implemented in various embodiments. In some embodiments depending on the size or number of the one or more selected data objects step may be performed sequentially or collectively with respect to the data objects. As noted previously interface may include a caching function for enabling restore application to rapidly execute for a plurality of data objects. Thus the method step represents a granular restore for selected data objects that does not require the restoration of the entire directory service and can be performed while directory service remains installed and operational.

Referring now to the contents of an illustrative set of metadata stored in metadata file are shown. In the embodiment shown in the metadata file is a lookup table wherein the names and POIs of a number of data objects have been indexed to each other e.g. by backup module during a previous backup of database . The actual format of the metadata file may of course vary. Such a metadata file may be used to facilitate the restoration of data objects to database by providing in response to an attribute such as the name of a data object a POI that may be needed to restore a data object via interface to database .

Referring now to one embodiment of a method for querying a directory service to generate a metadata file is illustrated. It is noted that for a given directory service and metadata file the method illustrated in is executed by backup application prior to the restore method illustrated in . It is further noted that certain steps shown in method may be optional or arranged in a different manner in various embodiments. As mentioned previously the method provides the advantage of being quick and simple to execute by using directory service to generate the metadata file at the time the backup is performed. At the moment the backup is performed the query features of directory service are available to backup application via interface and the repository in directory service is also consistent with the backed up copy of the repository .

In step one or more objects are selected whose metadata is to be included in metadata file . It is noted that the selection performed in step need not be the same as performed in step . In various embodiments method may be performed individually or collectively with respect to a plurality of data objects. The selection in step along with the other steps in method may be performed on the fly that is during a backup operation prior to the backup operation or subsequent to the backup operation. In step the database is queried for metadata for one or more selected data objects including a POI for each data object. In certain embodiments of interface a POI may be returned by a query for a data object. The same POI can be used via interface to granularly restore that data object in directory service .

In step the metadata are stored in the metadata file . In some embodiments the metadata file may be stored on a storage medium by a file system. In other embodiments the metadata file is included with the backup copy of the repository .

In step the repository of directory service is backed up to the backup repository . As a skilled artisan would recognize step may alternatively be performed different arrangements with respect to order and parallel execution in various embodiments of method . While performing the steps of method care should be taken to prevent any transactions or usage of directory service that would comprise the consistency of backup repository with the metadata file .

Thus methods and represent backup and restore methods wherein among other things data objects may be granularly i.e. individually restored to a database via a directory service. The generation and usage of a POI according to the methods described herein may alternatively be performed in various other embodiments and contexts for a variety of operational purposes. It is further noted that although data objects have been described herein in various embodiments the methods described herein are equally applicable to various kinds of data identified by the records of a database including binary objects of various size and data stored in the fields of the record itself.

For example an object database may generate a POI for a variety of uses and purposes depending on the designed architecture of the database. In one embodiment a POI is used for securing access to data objects and includes encryption by an authenticated certificate. In another instance POIs are used in conjunction with an access control list to restrict access to data objects. In some embodiments POIs are used to ensure data integrity of the data object for example by including a checksum of the data object. In yet other embodiments a POI represents a memory address for accessing data objects cached in faster memory in an object database. In still other embodiments POIs are generated in an undisclosed manner for classified access to data objects wherein the POI is required for a specific interface to the object database.

Turning now to a block diagram of one embodiment of a computer system is illustrated. Computer system includes a processor subsystem coupled to a memory subsystem . Processor subsystem and memory subsystem are in turn connected to an I O subsystem which comprises an I O interface a hard disk drive a network interface and a removable storage . Computer system may be representative of a laptop desktop server workstation terminal personal digital assistant PDA or any other type of computer system.

Processor subsystem is representative of any of various types of processors such as an x86 processor a PowerPC processor or a SPARC processor. In some embodiments processor subsystem includes one or more individual processor units which may be found within a single physical computer system or distributed across multiple computer systems. Similarly memory subsystem may include any of various types of memory including DRAM SRAM EDO RAM Rambus RAM etc. The memory within subsystem may be located within a single physical device or may be distributed across multiple devices e.g. a storage array .

I O interface is operational to transfer data between processor subsystem and or memory subsystem and one or more internal or external components such as hard disk drive network interface and removable storage as desired. For example I O interface may embody a PCI bridge operable to transfer data from processor subsystem and or memory subsystem to one or more PCI devices. I O interface may additionally or alternatively provide an interface to devices of other types such as SCSI devices and or Fibre channel devices.

Hard disk drive may be a non volatile memory such as a magnetic media. Network interface may be any type of network adapter such as Ethernet fiber optic or coaxial adapters. Removable storage is representative of a disk drive optical media drive tape drive or other type of storage media as desired.

In addition to the depicted hardware components computer system may additionally include various software components. For example illustrates an operating system stored in memory subsystem . Operating system is representative of any of a variety of specific operating systems such as for example Microsoft Windows Linux or Sun Solaris. As such operating system may be operable to provide various services to the end user and provide a software framework operable to support the execution of various programs such as directory service and application program . As depicted in one embodiment in directory service and application program reside on computer system and are executed by operating system . It is noted that the depicted software components of may be paged in and out of memory subsystem in a conventional manner from a storage medium such as hard drive .

In various embodiments not shown in portions of application program reside on a separate computer system from directory service . For example backup application may be executed as a service on computer system while restore application may be executed on a different computer system that accesses backup medium and metadata file .

Referring to one embodiment of a system is depicted. It is noted that system may collectively include one or more individual computer systems. Accordingly a processor subsystem associated with system may include one or more processors. In this embodiment domain controller is a server computer that is configured to execute a directory service on a network domain. Backup controller is a computer system that is configured to execute an backup archive application that accesses a backup medium . In the embodiment shown application program operates in conjunction with an additional software component represented by backup agent shown in this embodiment as backup agents A and B that handles the communication between directory service and application program .

In this embodiment one or more software components e.g. backup agents are configured to execute on behalf of application program to perform the backup function. In these components are shown as A and B which may be either identical instances of the same software component or different components. Backup agents are configured to access directory service on behalf of application program and return requested information to application program . Backup agents may additionally include functionality for encapsulating a network connection to another backup agent or application program. Thus backup agents may be installed locally or remotely and can be configured to relay information over a network connection. As shown in a communication link provides bidirectional communication between backup agents A and B which are configured to communicate with each other by relaying requests and information. In other embodiments application program may reside on a single computer system e.g. domain controller or computer system along with a backup agent e.g. agent .

Note that in some embodiments a backup application e.g. and or associated software components e.g. may reside on the same computer system with the directory service database e.g. domain controller .

It is noted that in some embodiments domain controller may be owned and operated by a different entity than backup controller . In various embodiments backup medium or access thereto may be provided by a still different entity. In various embodiments systems are domain controllers and are configured to execute a directory service for a network domain that includes a plurality of client computers. The client computers not shown in or may be configured to centrally access the directory service executing on systems .

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

