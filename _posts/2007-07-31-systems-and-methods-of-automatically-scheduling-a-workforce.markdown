---

title: Systems and methods of automatically scheduling a workforce
abstract: Systems and methods of workforce scheduling are disclosed. One example embodiment, among others, comprises a computer-implemented method of scheduling workers. Each worker is associated with one of a set of flexibility classifications, which include non-flex-time and at least one flex-time. The method includes generating a set of shift instances to cover forecasted demand over a planning period, and assigning the shift instances to the set of workers by iterating through the each of the workers to assign at least a portion of the shift instances to a selected one of the workers. The assigning is such that total hours assigned to the selected worker depends on a number associated with the classification of the selected worker.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08315901&OS=08315901&RS=08315901
owner: Verint Systems Inc.
number: 08315901
owner_city: Santa Clara
owner_country: US
publication_date: 20070731
---
The present disclosure relates to scheduling and more specifically to automatically scheduling a workforce.

In many enterprises a typical workforce includes workers with a fixed number of hours and workers with a flexible number of hours. Existing software can help a user plan how many of each type of worker will be needed to handle a predicted amount of demand over a planning period such as a quarter. However conventional planning software uses a trial and error approach in determining how many flexible workers are needed.

In this trial and error approach a user runs a first scenario specifying a particular number of full time workers and a particular number of part time workers. The planning software generates a staffing plan for this scenario with a computed number of flexible workers. The user then runs another scenario specifying a different number of full time and part time workers. This process of running multiple scenarios and then comparing them to determine a staffing plan that s appropriate for the enterprise is cumbersome and time consuming. Thus a need arises for these and other problems to be addressed.

Systems and methods of automatically scheduling a workforce are disclosed. One exemplary method of scheduling a set of workers includes receiving a set of shift constraints creating a set of shift templates representing all variations allowed by the shift constraints determining a number of instances of each shift template to cover forecasted demand over a planning period including a set of scheduling intervals and creating the determined number of shifts instances. Each worker has one of a set of flexibility classifications including a flex time classification and a non flex time classification. The method further includes producing a set of staff mix enumerations to cover the shift instances. The set of enumerations varies from a first enumeration to a last enumeration. The first enumeration includes zero workers of a non flex time classification and a first computed number of workers of a flex time classification. The last enumeration includes a maximum number of workers of a non flex time classification and a last computed number of workers of a flex time classification. The producing step further includes assigning shift instances to the set of workers by an iteration through workers. The iteration comprises applying dynamic programming to assign shift instances within the scheduling interval to a selected one of the workers such that total hours assigned to the selected worker approach but do not exceed a per interval maximum associated with the classification of the selected worker. The workers having a classification other than flex time are selected before workers having a flex time classification.

Another exemplary method of scheduling a set of workers includes generating shift instances to cover forecasted demand over a planning period. The method further includes producing a set of staff mix enumerations to cover the shift instances. The method further includes assigning the shift instances to the set of workers by an iteration. The iteration includes assigning the shift instances to a selected one of the workers. The total hours assigned to the selected worker depends on a number corresponding to the classification of the selected worker. Workers having a classification other than flex time are selected before workers having a flex time classification.

An exemplary system of scheduling a set of workers comprises logic configured to generate a set of shift instances to cover forecasted demand over a planning period and logic configured to assign shift instances to the set of workers. Each worker has one of a set of flexibility classifications including a flex time classification. The logic configured to assign iterates through the each of the workers to assign at least a portion of the shift instances to a selected one of the workers. The total hours assigned to the selected worker depends on a number that is associated with the classification of the selected worker.

One of the classifications flexible X allows the employer to schedule a flexible amount of hours for the worker . Flexible workers are scheduled with the lowest priority and act as gap fillers who take on the shifts that were unable to be assigned to non flexible employees. Using inventive techniques disclosed herein logic for automatically scheduling a workforce determines for each division of the planning period the number of flexible employees needed to cover demand given a specific number of non flexible employees This process is iterated for various numbers of non flexible employees and determines for each the number of flexible employees needed to cover demand. A particular number of non flexible workers and the associated computed number of flexible workers will be referred to herein as an enumeration . Logic produces ranges for the number of flexible employees for each enumeration. Some embodiments also produce per enumeration statistics for the count of flexible workers e.g. average minimum maximum .

The description of workers includes the number of workers in each classification and definitions of the classifications. Note that the description of workers is not required to identify specific individual workers because logic for automatically scheduling a workforce treats workers of the same classification as equivalents. Thus workers can be viewed as virtual workers or generic instances of a worker classification.

Another input to logic for automatically scheduling a workforce is one or more shift constraints . A person of ordinary skill in the art should be familiar with the concept of a shift for instance a portion of a defined period e.g. 24 hour period that a worker is scheduled or assigned to work. Examples of shifts are 8 AM to 5 PM 9 AM to 5 PM and 12 AM to 6 AM. A shift constraint describes how a shift is limited for example in duration an 8 hour shift a 6 hour shift in start time 9 AM or earlier or in stop time before 11 PM . Other examples of shift constraints include break times and durations e.g. an 8 hour shift includes a thirty minute lunch break and a fifteen minute morning break .

Another input to logic is a forecasted or predicted demand for workers during a particular planning period. The granularity of demand i.e. the demand interval is generally less than a day and more typically demand is predicted on an hourly basis.

After receiving inputs logic for automatically scheduling a workforce generates shift assignments to cover predicted demand for each scheduling interval in the planning period. Logic schedules workers to handle predicted demand while attempting to minimize under staffing of each worker on an individual basis. Each classification is defined by at least one number of hours per interval e.g. day week month . In some embodiments the definition includes a maximum number of hours per interval and a minimum number of hours per interval. The total number of hours assigned to a worker by logic depends on one or more of these number of hours per interval as defined by the worker s classification. In one embodiment logic for automatically scheduling a workforce attempts to assign workers to shifts such that the number of hours assigned to individual workers comes close to but does not exceed the maximum hours per week for their classification. In another embodiment logic for automatically scheduling a workforce attempts to assign workers to shifts such that the number of hours assigned to individual workers exceeds the minimum hours per week for their classification and approaches but does not exceed the maximum hours per week for their classification.

Logic for automatically scheduling a workforce uses inventive techniques described in more detail later to determine the number of workers of a flexible classification that are needed to handle predicted demand in a scheduling period given a fixed number of workers in a non flexible classification or classifications . Furthermore logic for automatically scheduling a workforce generates multiple potential schedules multiple shift assignments for the same scheduling interval varying in the number of workers drawn from each classification. Each schedule thus contains a specific count of workers in each classification and this count of workers in each classification combines to form a staff mix enumeration . By generating a set of multiple staff mix enumerations for the planning period logic for automatically scheduling a workforce gives planner personnel and or software more flexibility in deciding which particular staff mix enumeration is appropriate.

Notably the staff mix enumerations generated by logic for automatically scheduling a workforce follow a pattern. In the example scenario of the first enumeration for week X includes zero workers in the full time classification zero workers in the part time classification and a computed range of workers in the flexible classification here the computed range is 3 6 . Thus the enumeration takes the form 0 0 X . The next enumeration has the form 0 1 X zero workers in the full time classification one worker in the part time classification and a computed range of workers in the flexible classification. The next enumeration has the form 1 1 X zero workers in the full time classification one worker in the part time classification and a computed range of workers in the flexible classification. The last enumeration has the form M M X where Mis the total number of workers in the full time classification and Mis the total number of workers in the part time classification. It will be appreciated that the set of enumerations for three classifications can thus be generalized as

Although the example scenario of has one flexible classification and two non flexible classifications full time and part time other embodiments of logic for automatically scheduling a workforce are contemplated which handle more than one non flexible classification.

Each staff mix enumeration is associated with a shift assignment for each division in the planning period. Thus staff mix enumeration A is associated with shift assignment A week 1 and shift assignment A week 2 . Staff mix enumeration N is associated with shift assignment N week 1 and shift assignment N week 2 . In this example embodiment division is a week but other embodiments may use a different interval for example a biweek. Furthermore although is simplified to show assignments for only two weeks Day 1 through Day 5 logic generates additional shift assignments not shown to cover all divisions in the planning period.

Logic for automatically scheduling a workforce generates multiple shift assignments for each scheduling interval in a planning period where each shift assignment corresponds to the same planning period division but includes different numbers of workers of each classification. The number of workers in each classification is a staff mix enumeration . Therefore logic for automatically scheduling a workforce can also be viewed as generating multiple staff mix enumerations for the same planning period where each enumeration includes a shift assignment for the planning period.

The inventive processes used by logic for automatically scheduling a workforce to generate staff mix enumerations will be described in further detail below. Before describing those processes however various software objects or data structures used by some embodiments of logic for automatically scheduling a workforce will now be described in connection with the object diagram of .

In one embodiment demand is predicted daily. A shift assignment is associated with or occurs during a calendar week . Shift assignment is a collection of shift instances where each shift instance is described by a time range e.g. 9 AM to 5 PM and a date. Each shift instance may be assigned to one worker or may be unassigned. A worker can have more than one shift instance in shift assignment assigned to him e.g. he works Monday 8 4 and Friday 8 4 . However a shift instance cannot be assigned to more than one worker three workers scheduled for a Monday Apr. 3 2007 8 5 are represented by three separate shift instances each associated with an individual worker rather than by a single Monday Apr. 3 2007 8 5 shift .

Shift constraints describe how a shift instance is limited e.g. duration start time stop time break times break durations . Multiple shift instances can be created based on shift constraints by varying attributes such as duration start time etc. As explained in further detail below logic for automatically scheduling a workforce determines how many of each possible variation of a shift as allowed by shift constraints are needed to cover demand and creates an appropriate number of shift instances based on shift constraints . For example demand for day X may be highest around lunchtime so that logic creates two 9 AM to 5 PM shifts and two 11 AM to 3 PM shifts to handle the increased demand during lunch.

In some embodiments the relationship between shift instance and shift constraints is indirect through a shift template . In shift template is shown with dotted lines to indicate that it is optional. In such embodiments a complete set of shift templates is created representing all possible variations allowed by shift constraints . Logic for automatically scheduling a workforce then determines how many of each variation of a shift template are needed to cover demand and creates that number of shift instances . Using the same example Day X from above shift templates might include two eight hour shift templates one being 8 AM to 4 PM and the other being 9 AM to 5 PM a six hour template from 9 AM to 3 PM and two four hour templates one being 10 AM to 2 PM and the other 11 AM to 3 PM. Then logic might create two shifts from the 9 AM to 5 PM template and two shifts from the 11 AM to 3 PM template.

A worker has a classification that is based on a minimum and a maximum number of hours that the worker is expected to work in each scheduling period. As described above multiple classifications exist. For at least one non flexible classification logic attempts to assign shifts so that the number of hours assigned to non flexible workers is between the minimum and a maximum defined by the classification. In full time classification FT F and part time classification PT P are both non flexible. For at least one other classification logic allows a flexible amount of hours to be assigned to the worker . In classification X is flexible. As described above a per classification count of the number of workers in the shift assignment is tracked as a staff mix enumeration associated with the shift assignment .

A person of ordinary skill in the art should recognize the objects illustrated in as abstractions chosen to illustrate how one embodiment of logic for automatically scheduling a workforce partitions functionality among components. Such a person should also recognize that other divisions of functionality are also possible and these other possibilities are intended to be within the scope of this disclosure. Furthermore although the objects in are described in terms of specific data structures such as lists flags pointers and collections a person of ordinary skill in the art should appreciate that other data structures providing similar functionality can be used instead. As just one example a particular implementation might use an array instead of a linked list. In general the objects used by the systems and methods of automatically scheduling a workforce are described herein in terms of code and data rather than with reference to a particular hardware device executing that code. Furthermore although the system and methods are described in object oriented terms there is no requirement that the systems and methods be implemented in an object oriented language. Rather one of ordinary skill in the art will understand that the systems and methods can be implemented in any programming language and executed on any hardware platform.

Processing continues at block where shift templates are generated from shift constraints . As described above in connection with the collection of shift templates represents all possible variations allowed by shift constraints . Next at block demand for the planning period is examined and a set of shift instances are generated to match demand . In other words block covers the days that make up the planning period with the appropriate shift instances as needed to meet demand. Processing continues at block where workers are assigned to shift instances in a manner which attempts to optimize individual worker utilization. Processing is complete after block .

The inventive techniques used in block will be described in more detail below in connection with and . Notably workers or instances of worker classifications are assigned to shift instances at block rather than block .

Inside the outermost iteration of scheduling divisions unassigned shifts are assigned to non flexible workers at block . At block a test is performed to determine if all shift instances generated by shift instance generation logic have been assigned. If all shift instances have not been assigned then operation continues with block discussed below . If all shift instances have been assigned operation moves to block which iterates to the next division in the planning period starting with block . If no more divisions are available all have been processed operation continues at block which iterates to the next enumeration starting at block . If all enumerations have been processed process is complete.

Block is executed if unassigned shifts remain in the current division of the planning period after assigning non flexible workers. The sequence beginning with block counts the number of flexible workers needed to fill unassigned shifts. Block sets a local flexible workers counter to 0. Then unassigned shift instances are assigned to flex workers at block and the local flex counter is incremented by 1 at block . Block which is optional calculates various statistics related to the current staff mix enumeration Enum. Examples of these statistics are listed in Table 1 .

Finally at block a test is performed to determine if all shift instances generated by shift instance generation logic have been assigned. If not operation moves back to block and blocks are repeated. If all shift instances have been assigned Block uses this local flex counter to update the minimum and maximum number of flexible workers for the current enumeration Enum e.g. if FlexEnum.Max then Enum.Max Flex . Operation then returns to block described earlier.

The process described in deals with only a single non flexible classification. Other embodiments that include more than one non flexible classification can be handled by modifying the portion of process which assigns unassigned shifts to non flexible workers block so that it first assigns workers of the highest priority non flexible classification e.g. full time then assigns workers of lower priority non flexible classifications e.g. part time before assigning flexible workers blocks . With this modification any number of non flexible classifications can be supported.

Once the next worker is selected at block processing continues at block where dynamic programming is used to assign one or more not yet assigned shift instances to the selected worker in a manner which minimizes under staffing of each worker as an individual. Next at block shift assignments are adjusted by moving unassigned shifts to underutilized workers and processing of the current worker is then complete. Block will be described in more detail below.

A person of ordinary skill in the art might perceive the specific problem solved by block assigning shift instances to get worker utilization as close to the worker s capacity as possible without going over capacity as a classic knapsack problem. However an inventive aspect of logic for automatically scheduling a workforce is the decomposition of the overall problem into two sub problems generating shift instances block of and then assigning workers to shift instances block of . Only after the overall problem is decomposed in this manner would a person of ordinary skill in the art recognize the second sub problem as a knapsack problem.

The shift adjustment performed at block is optional but may be advantageous in some scenarios. The dynamic programming performed in block is an optimizing algorithm for a single knapsack problem. However block considers each worker separately and independently. Logic for automatically scheduling a workforce assigns shifts to multiple workers. Therefore optimizing utilization of individual workers may not result in global optimization. More specifically since a worker is limited to working a single shift in a day some shifts may remain unassigned on particular days even though particular workers still have capacity i.e. haven t yet reached maximum hours for the week . Such workers are underutilized so overall utilization can be improved by moving unassigned shifts to these underutilized workers.

The embodiment shown in performs shift adjustment block after each worker is assigned one or more shift instances in a given week. However other embodiments perform shift adjustment block only when the number of not yet assigned shift instances is relatively low either as an absolute number or relative to the total number of shift instances.

Although a person of ordinary skill in the art should be familiar with dynamic programming as used by logic to solve the knapsack problem a brief discussion and example follow. The problem notation used will be 

The following example is used to illustrate the implementation of the shift instance assignment procedure performed by dynamic programming logic . In this example a store is open from 10 am to 5 pm Monday through Friday and is closed Saturday and Sunday. Thus the scheduling period is Monday Friday. Table 2 shows the shift instances generated by shift instance generation logic generated to cover the demand profile for the week. This example assumes without loss of generality that there are no breaks in the shift instances. The workforce includes one full time worker defined in this example as working a maximum of 26 hours in a week and one part time worker defined in this example as working a maximum of 20 hours a week . Two flexible time workers take up the residual workload. The problem solved by dynamic programming logic is to assign the shifts to the workers in the most efficient manner i.e. to maximum utilization of workers .

Dynamic programming logic solves this problem as follows. Dynamic programming logic first assigns the shift instances to the full time worker. Note that during shift instance assignment only the duration of shift instances are relevant so for the full time worker the choice of shift instance on any given day can be summarized as in Table 3.

For simplification it is assumed here that i 1 2 3 4 and 5 represent Monday Tuesday Wednesday Thursday and Friday respectively. However this is not a requirement for dynamic programming logic the logic can first consider Wednesday for shift instance assignment then Friday and so on. In some scenarios randomizing the order in which the days are selected for shift instance assignment is more efficient if the number of recommended full time part time flex time workers is under estimated then there will be some unassigned shifts and randomization ensures that the unassigned shift instances are spread evenly over all days of the week instead of being concentrated on the last days of the week.

The above results can be interpreted as follows. After considering shifts on day 1 Monday it is possible to assign exactly 0 2 or 6 hours of workload to the full time worker. All other workloads are infeasible since f 1 j for j 0 2 or 6.

Proceeding in similar manner calculations for day 2 can be summarized as 2 for j 0 2 4 6 8 12 and 2 for j 0 2 4 6 8 12.

The interpretation of above expressions is as follows. After considering the shift instances on day 1 and day 2 Monday and Tuesday it is possible to assign exactly 0 2 4 6 8 and 12 hours of work load to the full time worker. All other workloads are infeasible.

Consider f 2 4 4. To determine which shifts were assigned on Monday and Tuesday to the worker that resulted in the total work load being equal to 4 hours dynamic programming logic backtracks through the f i j calculations and finds that f 2 4 f 1 2 s 2 2 4. Thus a shift instance of length s 2 hours was assigned on Tuesday and on Monday the workload was f 1 2 2 hours. The workload of 2 hours on Monday was achieved by assigning a shift instance of length s 2 hours This is identified by backtracking the calculation of f 1 2 .

The values of f i j are thus determined for all i 1 2 3 4 5 and j 0 1 2 . . . c . To find the optimal shift instance assignment for the full time worker dynamic programming logic identifies the maximum f 5 j for j 1 2 . . . c. The maximum value is f 5 26 26. There are two shift instance assignments s s s s s s s s s s that result in f 5 26 26. Dynamic programming logic identifies shift instance assignments through backtracking.

Dynamic programming logic removes those shift instances assigned to the full time worker from the set of shift instances and then repeats this procedure for the part time workers to maximize worker utilization.

Block selects the next day i in the week under consideration on which worker j is not assigned a shift. If there are no such days or all days have been considered then the process returns to block to select the next worker j. Otherwise the next day i has been selected and processing continues at block . Block selects the next worker j with an assigned shift instance on day i but no assigned shift instance on day i. If there are no such workers or all workers have been considered then the process returns to block to select the next day i . Otherwise i j i and j have been selected and processing continues at block .

Although a person of ordinary skill in the art should be familiar with LP relaxation cutting planes and the branch and bound algorithm a brief discussion of these concepts follows. The problem notation used for the LP relaxation discussion are as follows 

The branch and bound algorithm is an LP based technique that efficiently conducts a semi complete enumeration search of the solution space. It solves LP relaxations and progressively adds constraints to the problems based on the solutions obtained. The branching technique used in the branch and bound implementation for the shift generation problem is as follows 

A contact router distributes or routes contacts incoming or outgoing to an agent position. Voice over Internet Protocol VoIP calls and computer based contacts e.g. chat email are routed over one or more data networks and distributed over network to one of the agent workstations . Contact router may include an automatic call distributor ACD to route phone contacts. The embodiments described herein will refer to ACD instead of contact router but analogous contact router actions and operations are intended to be captured by this disclosure. Note that a predictive dialer not shown may be used for directing outbound calls to agents for handling.

If an agent is not available to handle a particular call ACD puts the call into a queue which effectively places the caller on hold. When an agent is available contact router connects the outside trunk line carrying the phone call to one of the agents. More specifically contact router connects an outside trunk line to the trunk line of the selected agent.

When an agent is ready to handle contacts the agent first logs into contact router . This login notifies contact router that the agent is available to take calls. An agent s contact router state changes throughout the workday as the agent performs work activities such as handling calls performing after call work and taking breaks. An example list of states includes available busy after call work and unavailable.

While handling a contact the agent interacts with one or more applications running on workstation . By way of example workstation applications can provide the agent with access to contact records product information ordering status and transaction history. The applications may access one or more business databases not shown via network .

Customer center also includes a workforce management system WFMS . WFMS performs many functions. One such function is providing a customer center supervisor or manager with information about agents and contacts both historical and real time. Another function is supplying the supervisor with information on how well each agent complies with customer center policies. Yet another function is calculating staffing levels and creating agent schedules based on historical patterns of incoming contacts. The functionality of the entire WFMS is typically divided among several applications some of which have a user interface component and WFMS comprises the suite of applications.

A customer center may include but is not limited to outsourced customer centers outsourced customer relationship management customer relationship management voice of the customer customer interaction customer center multi media customer center remote office distributed enterprise work at home agents remote agents branch office back office performance optimization workforce optimization hosted customer centers and speech analytics for example.

In one embodiment the integrated system of customer center also includes one or more of a performance manager an evaluation manager and a development manager. The evaluation manager allows various types of employee performance review processes to be managed i.e. 360 degree reviews . The performance manager receives data from the evaluation manager and presents the performance data to the contact center manager through various scorecard views. The development manager tracks employee Learning Development and detects a need for training.

It should be noted that embodiments of one or more of the systems described herein may be used to perform an aspect of speech analytics i.e. the analysis of recorded speech or real time speech which can be used to perform a variety of functions such as automated call evaluation call scoring quality monitoring quality assessment and compliance adherence. By way of example speech analytics can be used to compare a recorded interaction to a script e.g. a script that the agent was to use during the interaction . In other words speech analytics can be used to measure how well agents adhere to scripts identify which agents are good sales people and which ones need additional training. As such speech analytics can be used to find agents who do not adhere to scripts. Yet in another example speech analytics can measure script effectiveness identify which scripts are effective and which are not and find for example the section of a script that displeases or upsets customers e.g. based on emotion detection . As another example compliance with various policies can be determined. Such may be in the case of for example the collections industry where it is a highly regulated business and agents must abide by many rules. The speech analytics of the present disclosure may identify when agents are not adhering to their scripts and guidelines. This can potentially improve collection effectiveness and reduce corporate liability and risk.

In this regard various types of recording components can be used to facilitate speech analytics. Specifically such recording components can perform one or more of various functions such as receiving capturing intercepting and tapping of data. This can involve the use of active and or passive recording techniques as well as the recording of voice and or screen data.

It should be noted that speech analytics can be used in conjunction with such screen data e.g. screen data captured from an agent s workstation PC for evaluation scoring analysis adherence and compliance purposes for example. Such integrated functionality can improve the effectiveness and efficiency of for example quality assurance programs. For example the integrated function can help companies to locate appropriate calls and related screen interactions for quality monitoring and evaluation. This type of precision monitoring improves the effectiveness and productivity of quality assurance programs.

Another aspect that can be accomplished involves fraud detection. In this regard various manners can be used to determine the identity of a particular speaker. In some embodiments speech analytics can be used independently and or in combination with other techniques for performing fraud detection. Specifically some embodiments can involve identification of a speaker e.g. a customer and correlating this identification with other information to determine whether a fraudulent claim for example is being made. If such potential fraud is identified some embodiments can provide an alert. For example the speech analytics of the present disclosure may identify the emotions of callers. The identified emotions can be used in conjunction with identifying specific concepts to help companies spot either agents or callers customers who are involved in fraudulent activities.

Referring back to the collections example outlined above by using emotion and concept detection companies can identify which customers are attempting to mislead collectors into believing that they are going to pay. The earlier the company is aware of a problem account the more recourse options they may have. Thus the speech analytics of the present disclosure can function as an early warning system to reduce losses.

Also included in this disclosure are embodiments of integrated workforce optimization platforms as discussed in U.S. patent application Ser. No. 11 359 356 filed on Feb. 22 2006 entitled Systems and Methods for Workforce Optimization and U.S. patent application Ser. No. 11 540 185 filed on Sep. 29 2006 entitled Systems and Methods for facilitating Contact Center Coaching both of which are hereby incorporated by reference in their entireties. At least one embodiment of an integrated workforce optimization platform integrates 1 Quality Monitoring Call Recording voice of the customer the complete customer experience across multimedia touch points 2 Workforce Management strategic forecasting and scheduling that drives efficiency and adherence aids in planning and helps facilitate optimum staffing and service levels 3 Performance Management key performance indicators Kips and scorecards that analyze and help identify synergies opportunities and improvement areas 4 e Learning training new information and protocol disseminated to staff leveraging best practice customer interactions and delivering learning to support development 5 Analytics deliver insights from customer interactions to drive business performance and or 6 Coaching feedback to promote efficient performance. By way of example the integrated workforce optimization process and system can include planning and establishing goals from both an enterprise and center perspective to ensure alignment and objectives that complement and support one another. Such planning may be complemented with forecasting and scheduling of the workforce to ensure optimum service levels. Recording and measuring performance may also be utilized leveraging quality monitoring call recording to assess service quality and the customer experience.

The systems and methods disclosed herein can be implemented in software hardware or a combination thereof. In some embodiments the system and or method is implemented in software that is stored in a memory and that is executed by a suitable microprocessor P situated in a computing device. However the systems and methods can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device. Such instruction execution systems include any computer based system processor containing system or other system that can fetch and execute the instructions from the instruction execution system. In other embodiments the system and or method is implemented in hardware including but not limited to a programmable logic device PLD programmable gate array PGA field programmable gate array FPGA or an application specific integrated circuit ASIC .

In the context of this disclosure a computer readable medium can be any means that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system. The computer readable medium can be for example but not limited to a system or propagation medium that is based on electronic magnetic optical electromagnetic infrared or semiconductor technology.

Specific examples of a computer readable medium using electronic technology would include but are not limited to the following an electrical connection electronic having one or more wires a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory . A specific example using magnetic technology includes but is not limited to a portable computer diskette. Specific examples using optical technology include but are not limited to optical fiber and compact disc read only memory CD ROM .

Note that the computer readable medium could even be paper or another suitable medium on which the program is printed. Using such a medium the program can be electronically captured using for instance optical scanning of the paper or other medium compiled interpreted or otherwise processed in a suitable manner and then stored in a computer memory. In addition the scope of the certain embodiments of the present invention includes embodying the functionality of the preferred embodiments of the present invention in logic embodied in hardware or software configured mediums.

It should be noted that any process descriptions or blocks in flowcharts should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. As would be understood by those of ordinary skill in the art of the software development alternate embodiments are also included within the scope of the disclosure. In these alternate embodiments functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved.

This description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the disclosure to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings. The embodiments discussed however were chosen to illustrate the principles of the disclosure and its practical application. The disclosure is thus intended to enable one of ordinary skill in the art to use the disclosure in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variation are within the scope of this disclosure as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled.

