---

title: Message communications of particular message types between compute nodes using DMA shadow buffers
abstract: Message communications of particular message types between compute nodes using DMA shadow buffers includes: receiving a buffer identifier specifying an application buffer having a message of a particular type for transmission to a target compute node through a network; selecting one of a plurality of shadow buffers for a DMA engine on the compute node for storing the message, each shadow buffer corresponding to a slot of an injection FIFO buffer maintained by the DMA engine; storing the message in the selected shadow buffer; creating a data descriptor for the message stored in the selected shadow buffer; injecting the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer; selecting the data descriptor from the injection FIFO buffer; and transmitting the message specified by the selected data descriptor through the data communications network to the target compute node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836143&OS=07836143&RS=07836143
owner: International Business Machines Corporation
number: 07836143
owner_city: Armonk
owner_country: US
publication_date: 20070425
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for message communications of particular message types between compute nodes using DMA shadow buffers.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modem processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather.

When a parallel application running on a compute node transmits a message to another compute node connected to the data communications network the application typically provides messaging software with a pointer to an application buffer storing the message. The messaging software describes the message in the application buffer to a direct memory access DMA engine which in turn sends the message through the network using a DMA transfer. The drawback to this current method of transmitting messages however is that the application must typically monitor for the completion of the transfer to free up the application buffer for use with another operation after the transfer is complete regardless of whether the application needs to know that the transfer is complete. Having the application needlessly monitor for completion of the transfer increases the processing overhead and resources required to effect message transmission. Current solutions that eliminate the need for the application to monitor message transmission typically include having the messaging software allocate a temporary buffer that stores a copy of the message for transmission. After the messaging software copies the message into the temporary buffer the application may free up the application buffer without having to monitor for completion of the message transfer. This current solution however also has drawbacks because the overhead for allocating a temporary buffer is excessive when a message for transmission is generally small in size such as for example control messages. As such readers will appreciate that room for improvement exists in message communications of particular message types between compute nodes.

Methods apparatus and products are disclosed for message communications of particular message types between compute nodes using DMA shadow buffers. Embodiments includes receiving in an origin messaging module on an origin compute node a buffer identifier specifying an application buffer having a message of a particular message type for transmission to a target compute node through a data communications network selecting by the origin messaging module one of a plurality of shadow buffers for an origin direct memory access DMA engine on the origin compute node for storing the message each shadow buffer corresponding to a slot of an injection first in first out FIFO buffer maintained by the origin DMA engine for storing data descriptors specifying messages stored in that shadow buffer storing by the origin messaging module the message in the selected shadow buffer creating by the origin messaging module a data descriptor for the message stored in the selected shadow buffer injecting by the origin messaging module the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer selecting by the origin DMA engine the data descriptor from the injection FIFO buffer and transmitting by the origin DMA engine to the target compute node the message specified by the selected data descriptor through the data communications network.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . The parallel computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The system of operates generally to for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention by receiving in an origin messaging module on an origin compute node a buffer identifier specifying an application buffer having a message of a particular message type for transmission to a target compute node through a data communications network selecting by the origin messaging module one of a plurality of shadow buffers for an origin DMA engine on the origin compute node for storing the message each shadow buffer corresponding to a slot of an injection first in first out FIFO buffer maintained by the origin DMA engine for storing data descriptors specifying messages stored in that shadow buffer storing by the origin messaging module the message in the selected shadow buffer creating by the origin messaging module a data descriptor for the message injecting by the origin messaging module the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer selecting by the origin DMA engine the data descriptor from the injection FIFO buffer and transmitting by the origin DMA engine to the target compute node the message specified by the selected data descriptor through the data communications network. Readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates an application buffer for storing a message for transmission to another compute node.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

In the example of the messaging module operates generally for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The messaging module of operates generally for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention by receiving a buffer identifier specifying an application buffer having a message of a particular message type for transmission to a target compute node through a data communications network selecting one of a plurality of shadow buffers for a direct memory access DMA engine on the compute node for storing the message each shadow buffer corresponding to a slot of an injection first in first out FIFO buffer maintained by the DMA engine for storing data descriptors specifying messages stored in that shadow buffer storing the message in the selected shadow buffer creating a data descriptor for the message and injecting the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these it typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it. The DMA engine of is improved for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The DMA engine of is operates generally for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention by selecting a data descriptor from an injection FIFO buffer for the DMA engine and transmitting the message specified by the selected data descriptor through the data communications network to a target compute node.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems that communicate particular message types between compute nodes using DMA shadow buffers in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in message communications of particular message types between compute nodes using DMA shadow buffers in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems that communicate particular message types between compute nodes using DMA shadow buffers in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for message communications of particular message types between compute nodes using DMA shadow buffers accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes origin compute node and target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of application installed on the origin compute node and application installed on the target compute node . In the example of the application includes an application buffer for storing a message for transmission to application installed on the target compute node . The message is a message of a particular message type such as for example a control message. A control message is a type of message that is typically small in size and used to administer or provide information regarding the transmission of other messages. An example of a control message may include an acknowledgement message confirming the receipt of a previously received message. Data communications between applications are effected using messaging modules installed on each of the compute nodes . Applications may communicate messages by invoking function of an application programming interfaces API exposed by the application messaging modules and . To transmit message to the application the application of may invoke a function of an API for messaging module that passes a buffer identifier specifying the application buffer to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin compute node and messaging module installed on the target compute node . In the example of the messaging module operates for message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention. The messaging module of receives the buffer identifier specifying the application buffer having a message of a particular message type for transmission to a target compute node through a data communications network . The messaging module of selects one of a plurality of shadow buffers for a direct memory access DMA engine on the origin compute node for storing the message . Each shadow buffer corresponds to a slot of an injection first in first out FIFO buffer maintained by the origin DMA engine for storing data descriptors specifying messages stored in that shadow buffer. The messaging module of stores the message in the selected shadow buffer . The messaging module of also creates a data descriptor for the message . A data descriptor is a data structure that describes a message for transmission and specifies transmission data related to the message. For example a data descriptor may describe the address of the buffer storing the message and the size of the message and may specify the particular message type of the message and the packet headers to be used in transmitting the message. In the example of the data descriptor specifies among other things that the message is stored in one of the shadow buffers for the DMA engine . The messaging module of injects the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer.

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters as described above with reference to .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes an injection FIFO buffer having slots for storing data descriptors for messages to be sent to other DMA engines on other compute nodes using a memory FIFO data transfer operation or direct put data transfer operation. Although not shown the exemplary DMA engine of also includes a number of reception FIFO buffers for storing data descriptors for messages received from other DMA engines on other compute nodes. Although only illustrates a single injection FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers.

A memory FIFO data transfer operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. In a memory FIFO data transfer operation data is transferred along with a data descriptor describing the data from an injection FIFO for the origin DMA engine to a target DMA engine. The target DMA engine in turns places the descriptor in the reception FIFO and caches the data. A core processor then retrieves the data descriptor from the reception FIFO and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

A direct put operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

As mentioned above each slot of the injection FIFO buffer corresponds to a shadow buffer . Each shadow buffer is typically the same size and is large enough to hold messages having the same message type as the message . The relationship between each slot and its corresponding shadow buffer dictates that a data descriptor stored in a particular slot specifies a message that is stored in the shadow buffer corresponding to the slot .

The DMA engine of is also capable of message communications of particular message types between compute nodes using DMA shadow buffers according to the present invention. The DMA engine of selects the data descriptor from the injection FIFO buffer and transmits the message specified by the selected data descriptor through the data communications network to the target compute node . The DMA engine of transmits the message specified by the selected data descriptor through the data communications network to the target compute node by encapsulating portions of the message into data packets and injecting the data packets into transmission stacks in the communications hardware . The communications hardware of includes a static routing transmission stack that stores packets for transmission through the data communications network using static routing. The communications hardware of also includes a dynamic routing transmission stack that stores packets for transmission through the data communications network using dynamic routing.

For further explanation sets forth a flow chart illustrating an exemplary method for message communications of particular message types between compute nodes using DMA shadow buffers according to the present invention. The method of includes configuring an injection FIFO buffer and the plurality of shadow buffers in dependence upon configuration criteria. The injection FIFO buffer is a buffer having slots for storing data descriptors of messages to be sent to other DMA engines on other compute nodes using a memory FIFO data transfer operation or direct put data transfer operation. Each of the shadow buffers is a buffer maintained by the DMA engine and corresponds to one of the slots in the injection FIFO buffer . Each shadow buffer is typically the same size and is large enough to hold messages of a particular message type that is messages who size does not often vary so as to enable the shadow buffers to be configured for a fixed size large enough to store the messages. The shadow buffers are so called because each buffer shadows one of the slots in the injection FIFO buffer . The relationship between each slot and its corresponding shadow buffer dictates that a data descriptor stored in a particular slot specifies a message that is store in the shadow buffer corresponding to the slot .

The configuration criteria used to configure the injection FIFO buffer and the plurality of shadow buffers may specify aspects of the injection FIFO buffer and the shadow buffers such as for example the size of the slots in the injection FIFO buffer the size of the shadow buffers the number of slots in the injection FIFO buffer and the number of shadow buffers . The configuration criteria may specify such attributes of the injection FIFO buffer and the plurality of shadow buffers based on requirements of the application historical application performance the size of data descriptors stored in the slots of the injection FIFO buffer the size of messages having a particular message type to be transmitted using the shadow buffers network congestion and any other factors are will occur to those of skill in the art. In the example of the shadow buffers are configured to have a size large enough to store control messages such as for example an acknowledgement message. In the example of illustrating message communications of particular message types between compute nodes using DMA shadow buffers according to embodiments of the present invention therefore the particular message type of messages communicated is a control message type. Readers will note however that such an example is for explanation only and not for limitation.

Although the origin DMA engine is used to send many different types of messages and maintains other injection FIFO buffers not shown the injection FIFO buffer of is maintained by the origin DMA engine exclusively for messages of the control message type and assigned a processing priority. That is only data descriptors for messages having a control message type are stored in the injection FIFO buffer of . The processing priority assigned to the injection FIFO buffer may be higher or lower than the other injection FIFO buffers maintained by the origin DMA engine . The origin DMA engine may assign a higher processing priority to the injection FIFO buffer than the other injection FIFO buffers by polling the injection FIFO buffer for data descriptor more often than the other buffers or spending more time processing the data descriptors in the injection FIFO buffer than the other injection FIFO buffers. The origin DMA engine may assign a lower processing priority to the injection FIFO buffer than the other injection FIFO buffers by polling the injection FIFO buffer for data descriptor less often than the other buffers or spending less time processing the data descriptors in the injection FIFO buffer than the other injection FIFO buffers. The above manner of assigning processing priority to the injection FIFO buffer is for explanation only and not for limitation. Other ways of assigning processing priority to the injection FIFO buffer as will occur to those of skill in the art are also well within the scope of the present invention.

In addition to being designated exclusively for use in transmitting control message the injection FIFO buffer may be designated for static routing. That is the origin DMA engine may transmit all the messages whose data descriptors are stored in the injection FIFO buffer using static routing. Static routing ensures that all the packets used to transmit a particular message take the same path through the network to the target compute node and therefore arrive in the order in which the packets were transmitted by the origin compute node. Similarly the injection FIFO buffer may be designated for dynamic routing. That is the origin DMA engine may transmit all the messages whose data descriptors are stored in the injection FIFO buffer using dynamic routing. Dynamic routing allows each of the packets used to transmit a particular message to take any path through the network to the target compute node typically the most efficient network path and therefore the packets may arrive out of order compared to the order in which the packets were transmitted.

The method of includes receiving in an origin messaging module on an origin compute node a buffer identifier specifying an application buffer having a message of a particular message type for transmission to a target compute node through a data communications network. The origin messaging module of may receive a buffer identifier specifying an application buffer having a message according to the method of when the application calls a function of a messaging module API exposed to support messaging among applications installed on compute nodes.

The method of also includes selecting by the origin messaging module one of a plurality of shadow buffers for an origin DMA engine on the origin compute node for storing the message . As mentioned above each shadow buffer of corresponds to a slot of the injection FIFO buffer maintained by the origin DMA engine for storing data descriptors specifying messages stored in that shadow buffer. The origin messaging module may select one of a plurality of shadow buffers for an origin DMA engine on the origin compute node for storing the message according to the method of by identifying the next slot available for storing a data descriptor in the injection FIFO buffer and selecting the shadow buffer corresponding to the identified slot.

The method of includes storing by the origin messaging module the message in the selected shadow buffer . The selected shadow buffer of may be implemented as a pointer to one of the shadow buffers maintained by the origin DMA engine . The origin messaging module may store the message in the selected shadow buffer according to the method of by copying the message stored in the application buffer identified by the buffer identifier into the selected shadow buffer . Storing the message in the selected shadow buffer advantageously eliminates the need for the application to monitor for completion of the message transfer before freeing up the space allocated to application buffer .

The method of also includes creating by the origin messaging module a data descriptor for the message stored in the selected shadow buffer . The data descriptor of represents a data structure that describes the message for transmission and specifies transmission data related to the message . For example a data descriptor may describe the address of the buffer storing the message and the size of the message and may specify the particular message type of the message and the packet headers to be used in transmitting the message. In the example of the data descriptor specifies among other things that the message is stored in one of the shadow buffers for the DMA engine .

The method of includes injecting by the origin messaging module the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer . The origin messaging module may inject the data descriptor according to the method of by storing the data descriptor into the slot of the injection FIFO buffer corresponding to the selected shadow buffer and advancing the pointer that identifies the next available slot in the injection FIFO buffer for storing a data descriptor.

The method of also includes selecting by the origin DMA engine the data descriptor from the injection FIFO buffer . The origin DMA engine may select the data descriptor from the injection FIFO buffer according to the method of by retrieving the data descriptor from the injection FIFO buffer and advancing the pointer that identifies the next slot in the injection FIFO buffer for processing.

The method of includes transmitting by the origin DMA engine to the target compute node the message specified by the selected data descriptor through the data communications network. The origin DMA engine may transmit the message specified by the selected data descriptor to the target compute node according to the method of by retrieving the message from the shadow buffer packetizing the message into network packets using the header provided in the data descriptor for the message and injecting the network packets in a transmission stack of the network adapter providing a network interface to the compute node. As mentioned above the injection FIFO buffer may be designated for static routing or dynamic routing. When the injection FIFO buffer is designated for static routing the origin DMA engine may transmit the message according to the method of by transmitting the message using static routing. The origin DMA engine may transmit the message using static routing by setting a flag in the header of each network packet containing a portion of the message that indicates static routing is to be used and injecting each network packet into a designated static routing transmission stack of the network adapter of the compute node or injecting each network packet into the same transmission stack of the network adapter such as for example the transmission stack for the X direction in the torus network. When the injection FIFO buffer is designated for dynamic routing the origin DMA engine may transmit the message according to the method of by transmitting the message using dynamic routing. The origin DMA engine may transmit the message using dynamic routing by setting a flag in the header of each network packet containing a portion of the message that indicates dynamic routing is to be used and injecting each network packet into a designated dynamic routing transmission stack of the network adapter of the compute node or injecting each network packet into whichever transmission stack of the network adapter has the least number of packets for processing.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for message communications of particular message types between compute nodes using DMA shadow buffers. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

