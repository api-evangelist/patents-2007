---

title: Method and apparatus for dynamic web service client application update
abstract: A method for managing a web service client update without recompiling or redeploying of the client code includes the following steps or acts of: receiving a request for the web service from a subscribed client; transmitting the request to the web service; receiving notification of the web service update from a service provider or registry or some other means; parsing the notification and retrieving parameters describing the web service update; marshalling the parameters; determining whether the new web service update is compatible with the current web service invoked by the client application; updating the local service proxy instance with the marshaled parameters if the new web service update is compatible with the current web service invoked by the client application; and transmitting a notification if the web service update is not compatible with the current web service invoked by the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07822840&OS=07822840&RS=07822840
owner: International Business Machines Corporation
number: 07822840
owner_city: Armonk
owner_country: US
publication_date: 20071023
---
This application contains subject matter similar to that found in commonly owned U.S. patent application Ser. No. 11 774 162 filed on Jul. 6 2007 entitled Method and Approach to Hosting Versioned Web Services. 

The invention disclosed broadly relates to the field of web services and more particularly relates to the field of web service client updates.

An increasing number of enterprises demonstrate that a successful adoption of Service Oriented Architecture SOA using Web services technologies enables them to develop and integrate applications or solutions quickly and effectively. Compared with conventional techniques including monolithic system and tightly coupled client design Web services provide a new approach for building applications in a loosely coupled platform independent and standardized manner. Though evolutional Web services do not escape the necessity of the software lifecycle and one of its most challenging aspects change management.

In real world scenarios Web services always need to change after the original development or deployment to align with changing business requirements. In the total lifecycle of Web services services can be updated at every stage of the lifecycle. For example the adding or removing of operations from the interface at design time bug fixing or adapting another programming language at build time changing the deployment server at deployment time and updating the security policy at runtime. For these changes a critical issue is to specify the changes and understand their impact to the client. Generally speaking the impact can be described in terms of compatibility.

A change of a service is termed compatible if no potential client is affected for example a bug fix. A change is termed as incompatible if there is at least one potential client who would fail when invoking the service after the change for instance a mandatory parameter is added to the operation in use. In real world scenarios a web service is like a black box so it is hard for the consumers or a third party to specify the compatibility between two versions. Ideally the service developers would need to address the compatibility of the service changes using some kind of assistant tools and making the compatibility classification task as part of their service development.

The evolution of services often necessitates the co existence of multiple versions of the same original service. In the SOA model service providers and consumers have independent development and deployment cycles. It is unreasonable to assume that every time a service changes all of its consumers will rapidly adopt the change by rebuilding and redeploying all their applications. However if client applications fail to keep track of service changes businesses supported by the client applications will be inevitably interrupted and suffer undesirable consequences.

While change management is an important aspect in all software development processes its complexity is increased for Web services due to their loosely coupled nature. A prominent consideration is the impact of the changes in a remote service to a local client application. Consider a case where the public interface of a service remains the same replacing old versions of the service with new versions would be transparent to the consumers. However adding a mandatory input parameter to an existing operation for example would create a difficult task for the underlying platform because the old version cannot simply be retired otherwise any consumer depending on that version would be disrupted.

Today service providers use notification messages such as a release note or an application programming interface API upgrade guide to notify and to help the service developer to update its client applications. The release note or API upgrade guide describes the differences between the new services and the old services and it is sent out from some service registry for example a Universal Description Discovery and Integration UDDI registry or service provider by emails forum discussion community or blogs. When the service developer reads the whole release note or API upgrade guide document then they can determine whether they need to change their client application code.

However if the release note or API upgrade guide is long or complex or the size of the client application code is huge it can be very difficult for the developer to locate the part of the code needing adjustment.

Briefly according to an embodiment of the invention a method for managing a web service client update includes steps or acts of receiving a request for the web service from a client transmitting the request to the web service receiving notification of the web service update from a service provider or registry or some other means parsing the notification and retrieving parameters describing the web service update marshalling the parameters determining whether the new web service update is compatible with the current web service invoked by the client application updating the local service proxy instance with the marshaled parameters if the new web service update is compatible with the current web service invoked by the client application and transmitting a notification if the web service update is not compatible with the current web service invoked by the client application.

The method can also be implemented as machine executable instructions executed by a programmable information processing system or as hard coded logic in a specialized computing apparatus such as an application specific integrated circuit ASIC .

While the invention as claimed can be modified into alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the scope of the present invention.

We describe a method and apparatus for maintaining the runtime environment of Web service client application updates. According to a method embodiment of the present invention the following functions are implemented to manage Web service changes 

a allowing the service client application to receive change notifications when changes occur on the target service 

b in the case of a web service client application invoking the target service through a local proxy the proxy has all the information of the target Web services. If these changes are backward compatible with the old version the proxy instance is dynamically updated at runtime to adapt to backward compatible changes and

c if these changes are not compatible with the previous version a notification message is generated and sent to the appropriate service consumer either the end user or system administrator to notify them of the incompatibility and the need for updating and redeploying the client service application.

The method as described herein is predicated on the following premise. If service consumers can subscribe to the services they use on the side service registry and or service providers are notified about the changes and adapt to them if necessary then the remote service changes can minimize their impact on the consumers. Further if a new service is backward compatible with the old service or if the function used by the consumer has not changed in the new service then this new release of the service should be transparent to the service consumers.

It is an object and advantage of the present invention that the Web service client application does not need to be re built and re deployed for every backward compatible target service change. It is a further object and advantage of the invention that the developers of the Web service client applications receive notifications in advance for in compatible target service changes. Further the history of target service changes can be tracked and stored locally.

With the service provider s description about the compatible changes of different versions of a service on the related service attributes the method according to an embodiment of the invention can determine the types of compatibility changes based on this description. The compatible changes to consider here are 1 fixing bugs 2 adding or renaming the operations 3 adding optional parameters or renaming parameters 4 changing the endpoint address of the target service and 5 adding a communication protocol.

The details of the compatibility definition and the structure and process of this invention are described in the discussion to follow.

Referring now in specific detail to the drawings and particularly there is illustrated a pictorial representation of how a method according to the present invention is integrated with a currently running Web service invocation process. The proxy shown in the dot line box is updated at runtime. As illustrated in in the standard Web service invocation process a Web service client application should never access the target Web service directly. Instead it should invoke the target Web service through a service proxy which is a representation of an instance of the Web service . The proxy has all the service signature definition and configuration features from the Web Service Description Language WSDL file for example the operation name message format and the accessing endpoint address.

Currently this proxy can be created with the help of some auto generation toolkits but it cannot be changed after deploying the Web service client application . So if any changes occur on the target service the developer needs to create a new proxy then re build and re deploy the client application . The present invention addresses this problem by providing an approach to update the proxy instance at runtime to avoid the re build and re deployment process of the client application for backward compatible changes.

For incompatible changes notifications will alert the client environment either the end user or system administrator that the client developer must change the client application code. Referring now to the table in it shows the detailed analysis of the types of Web service changes and their effects on the compatibility issues.

Referring to there is shown a block diagram of how the present invention can be implemented in a current Web service invocation system. The invocation process begins with the Web service client generating a proxy stub that acts as a surrogate for the real Web service. Then a Simple Object Access Protocol SOAP client marshals the parameters received from the proxy stub to a SOAP message. Finally the SOAP message is packaged into an HTTP or JMS message by the HTTP or JMS engine and serialized across the transport layer to the target service .

We add a component Version Agent between the Web service client application and the SOAP engine . This component is used to update the information described in the proxy at runtime or generate the notification for the appropriate service consumer either the end user or system administrator according to some notification message from the service provider or registry or some other means.

The Proxy Instance Checker is used to determine the compatibility of the new service and update the information in the proxy instance according to the notification message for any backward compatible service changes or it will generate the notification message for the appropriate service consumer either the end user or system administrator for any in compatible service changes. A possible implementation and an example are shown in the following.

In we give a possible implementation for the present invention. The Version Agent is implemented by the Java programming language and resides in the IBM WebSphere Application Server WAS runtime environment. The Notification Receiver and Parser are implemented by three components Service Subscriber Message Parser and Version Repository .

Service Subscriber is used to subscribe the service in a service registry for example a UDDI Universal Description Discovery and Integration service registry and get notification from the registry. The subscription notification mechanism can be implemented by many techniques for example the Java Messaging Service JMS framework and mailing list technique. If we select a WAS UDDI component as the service registry then the JMS framework is a better selection to implement the subscription notification mechanism because the WAS UDDI component has already provided some JMS APIs which can be connected to by the client.

The Message Parser is used to retrieve the content of the notification message. Currently most of the transportation messages are in the XML format. So Document Object Model DOM APIs or a Simple API for XML SAX can both be selected to parse the message and retrieve its content.

Version Repository is used to store the information of the services subscribed locally. It actually contains a change history of the target service in a local repository. It can be implemented as a group of files database or some other mediums. To simplify the implementation process we can just use flat files to store the service information locally. A repository accessing class provides the Create Read Update and Delete CRUD functions to these files.

Assuming WFS Version 1 is going to be retired a new WFS Version 2.0 is now made available. Changes introduced by WFS Version 2.0 include a new endpoint address because it is now running on a new server and a new argument days has been added to the original operation getWeatherReport String date String city int days to provide several days weather forecast information for any city in the United States. In order to remain backward compatible the default value of the new parameter days will be automatically set to 1 if the client doesn t specify the number of days in the request message.

For this update the service registry will publish a JMS notification message based on the subscription information. Upon receiving the notification message the Notification Receiver and Parser will cache and parse the received message and then publish the parsed message to the Proxy Instance Checker which is integrated with each Web service client. The Proxy Instance Checker will then use this notification message to reconfigure the service proxy at runtime e.g. sets the value 1 to the third argument days and changes the endpoint address to the new one . Since this is a backward compatible change there is no necessity to issue a message pop up box to the developers. The client application can receive the response message without interruption as shown in . The details of this new version of the WFS service can be seen in the Version Repository .

Now let s assume a newer version of WFS has been published as WFS Version 3.0. The old operation will be changed to getInternationalWeatherReport String date String country String city in order to provide a one day weather forecast information for any city in the world. Because this is an in compatible version we prompt the developer with a message as shown in to notify the developer about the incompatible portion and the new feature added to the target service. If the developer wants to try out this new feature he can see the details in the Version Repository and re build the WFS Client application according to the information in the Version Repository .

Referring to there is shown a flow chart of the method as implemented in a current Web service invocation system. First in step the Web service client generates a proxy stub that acts as a surrogate for the real web service . In step the SOAP client marshals the parameters received from the proxy stub to a SOAP message. Finally in step the SOAP message is packaged into HTTP or JMS. In step the message is serialized across the transport layer to the target service.

Referring to there is shown a block diagram of an information handling system consistent with an embodiment of the present invention. For purposes of this invention computer system may represent any type of computer information processing system or other programmable electronic device including a client computer a server computer a portable computer an embedded controller a personal digital assistant and so on. The computer system may be a stand alone device or networked into a larger system.

The system could include a number of operators and peripheral devices as shown including random access memory read only memory a processor and input output controller . These are linked by a CPU bus . Additionally there is an input output bus and input output interface a disk drive controller a mass storage device a mass storage interface and a removable CDROM drive . The processor may be a general or special purpose microprocessor operating under control of computer program instructions executed from a memory. The processor may include a number of special purpose sub processors each sub processor for executing particular portions of the computer program instructions. Each sub processor may be a separate circuit able to operate substantially in parallel with the other sub processors. Some or all of the sub processors may be implemented as computer program processes software tangibly stored in a memory that performs their respective functions when executed. These may share an instruction processor such as a general purpose integrated circuit microprocessor or each sub processor may have its own processor for executing instructions. Alternatively some or all of the sub processors may be implemented in an ASIC. RAM may be embodied in one or more memory chips. The memory may be partitioned or otherwise mapped to reflect the boundaries of the various memory sub components.

The memory represents either a random access memory or mass storage. It can be volatile or non volatile. The system can also comprise a magnetic media mass storage device such as a hard disk drive.

The I O subsystem may comprise various end user interfaces such as a display a keyboard and a mouse. The I O subsystem may further comprise a connection to a network such as a local area network LAN or wide area network WAN such as the Internet. Processor and memory components are physically interconnected using a conventional bus architecture.

Therefore while there has been described what is presently considered to be the preferred embodiment it will understood by those skilled in the art that other modifications can be made within the spirit of the invention. The above descriptions of embodiments are not intended to be exhaustive or limiting in scope. The embodiments as described were chosen in order to explain the principles of the invention show its practical application and enable those with ordinary skill in the art to understand how to make and use the invention. It should be understood that the invention is not limited to the embodiments described above but rather should be interpreted within the full meaning and scope of the appended claims.

