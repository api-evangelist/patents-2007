---

title: Re-using asynchronous server-side results generated for a request context of one client to satisfy a request context of a different client
abstract: The present invention provides a solution for sharing server generated output to satisfy requests for content originated by different clients. More specifically, a server side resource can analyze a content request and compare this request to a set of active request handling operations. When one of the active operations is capable of satisfying a discrete portion of the content request, an association can be established between the active operation and the content request. When the active operation produces results, these results are returned to satisfy a request of an original client as well as to satisfy a request of a client that issued the content request. The solution can be implemented in a variety of environments, including one where asynchronous server-side operations are conducted by different server-side resources for a single request context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09432243&OS=09432243&RS=09432243
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09432243
owner_city: Armonk
owner_country: US
publication_date: 20070906
---
This continuation in part application claims the benefit of U.S. patent application Ser. No. 11 843 038 filed Aug. 22 2007 and the benefit of U.S. patent application Ser. No. 11 846 423 filed Aug. 28 2007 both of which are incorporated by reference herein.

The present invention relates to HTTP request handling and more particularly to re using asynchronous server side results generated for a request context of one client to satisfy a request context of a different client.

U.S. patent application Ser. No. 11 846 423 entitled Method and Apparatus for Client Side Aggregation of Asynchronous Fragmented Requests disclosed a solution for client side aggregation of asynchronous context sensitive request operations in a single application server environment. A concept of client side content aggregation is extended by U.S. patent application Ser. No. 11 843 038 entitled Client Side Aggregation of Context Sensitive Request Results Where Results for Aggregation are Asynchronously Produced by Multiple Servers which teaches client side aggregation of context sensitive request results where results are asynchronously handled by multiple servers.

With the advent of asynchronous request dispatching one or more application servers can handle simultaneous asynchronous requests for different requesting clients. A possibility arises that two or more of these concurrently handled requests to produce identical content. For example a first client can request a portal page which includes a default news portlet. The news portlet can include dynamically generated content produced by a server in response to an asynchronous request for the portlet content. Soon after a second client can request a portal page which also includes the default news portlet. By default a separate asynchronously request for the news portlet information will be initiated and have to be handled separate from the request for the first client. This scenario results in two concurrent requests ultimately rendering the same content which represents a duplication of effort at multiple layers e.g. thread creation duplicate response output unnecessary request processing and the like .

The present invention provides a solution for sharing server generated output to satisfy request for content originated by different clients. More specifically a server side resource can analyze a content request and compare this request to a set of active request handling operations. When one of the active operations is capable of satisfying a discrete portion of the content request an association can be established between the active operation and the content request. When the active operation produces results these results are returned to satisfy a request of an original client as well as to satisfy a client that issued the content request. The solution can be implemented in an environment where asynchronous server side processes are used to handle a single request context where each asynchronous process represents an operation able to be shared by multiple clients. Additionally the asynchronous server side processes can execute within multiple servers for a single request context yet still produce results shared by multiple clients.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a server side request handling system that includes a set of programmatic instructions stored in a machine readable medium which cause the machine to re use asynchronous server side processing results generated for a request context of one client to satisfy different request context of a different client.

Another aspect of the present invention can include a server side request handling system that includes an active operations table and an operation handler. The active operations table can be stored in a machine readable medium that is accessible by the operation handler. The active operations table can store records for operations currently executing to produce results for received requests. The operation handler can be a software program stored in a machine readable medium and executed by a server side resource that is configured to receive a request to execute an operation and to produce a result for the request. The operation handler can add records to the active operations table for each operation that the operation handler executes. The operation handler can remove records from the active operations table after executed operations have produced results. Before executing an operation to handle a received request the operation handler can query the active operations table to determine whether a currently executing operation is able to handle the received request. When the query indicates that a currently executing operation is able to handle the received request the received request can be associated with the currently executing operation so that results from the currently executing operation are used to handle a multiple requests. The multiple requests can include the received request and an original request for which the currently executing operation was initiated.

Still another aspect of the present invention can include a method for sharing processed server results. In the method a first request can be received for processing. An operation can begin executing for the first request. A second request can be received for processing while the operation is still executing. The second request can be associated with the executing operation. Execution of the operation can complete that produces a result. The produced result can be utilized to satisfy the first request and the second request.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or as a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory or any other recording medium. The program can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

For example each request can be for content related to a user customizable portal where each portal includes a default news related portlet. Content for the news portlet can be dynamically generated content that will produce identical or nearly identical results for both requests . When request is received by resource an operation that produces news portlet content for client can be active. This active operation can he detected when processing for request is initiated and instead of issuing a separate thread process for handling the news portlet content for request the active thread process for this content for request can be identified and linked to the second request . The news portlet results from the active operation can be conveyed to both clients and .

A process flow for the result sharing system is shown by steps . The request handling process can begin when a server resource i.e. resource receives a request as shown by step . In step the request i.e. request or can be logged in an active operation table i.e. table or other memory space. In step request handling operations can be initiated. In step another request can be received for handling. The new request can be similar to a request currently being handled by an active operation which causes the process to proceed from step to step or can be different than currently active operations which causes the process to proceed from step to step .

In step when a similar request is in the process of being handled a result for the active operation handling the original request can also be associated with the new request. In step when another request is received the process can proceed to step where the request is received and handled. Otherwise the process can progress from step to step where a check can be conducted to see if an active operation has produced results. If no results have been produced the process can again check for more requests in step . When results are produced the method can progress from step to step where the results can be optionally cached. This step can be implemented for a system designed to convey cached results to clients under a deterministic set of conditions such as when a processing time out limit is reached.

In step all requests that are satisfied by the produced results can be determined along with requesting client addresses. In one implementation this information can be obtained by querying the active operation table. In step all entries in the active operation table associated with the results can be removed. In step produced results can be conveyed to the requesting client s . The process can repeat for other requests which is shown by the process proceeding from step to step .

It should be appreciated that although a specific embodiment is expressed in system the request handling process can be performed by any server side system. The represented embodiment is one in which a singe request context is able to be asynchronously handled by one or more resources which deliver results to a result server which in turn conveys results to clients . Additionally in the shown embodiment the clients can asynchronously aggregate the received content for a request context. In a different embodiment not shown server side aggregation of content can occur. In still another embodiment not shown a single resource e.g. a Web server can handle requests i.e. using an included accessible handler and table and can directly deliver shared results to multiple clients without using the result service . Further in different contemplated arrangements of system the shared result can either fully satisfy the requests or can satisfy only a common portion of the requests e.g. the requests can both reference a common portlet or other shared result segment .

Referring to the illustrated embodiment of system an implementation is shown that is capable of client side aggregation of content asynchronously handled by multiple server side resources . As shown when an operations handler receives a request and or it can consult an active operations table to determine if an already executing operation exists that can satisfy the new request. For example requests of table can be identified by a unique identifier Req AA Req AB and Req AC which are linked to the same executing operation e.g. an operation with an identifier of Oper FF . When no currently executing operation satisfies the new request a new entry can be added to the table i.e. an entry for a request identified by Req BB and a new operation can be initiated i.e. an operation identified as Oper GG . As soon as results are produced these results can be recorded in table for dissemination to clients shown by conveying response to clients . The table can include numerous other fields not shown such as requestor address request authorization code and the like which can be used to ensure delivery of results to authorized clients .

As used in system the resources can be part of a computing system capable of handling Hypertext Transfer Protocol HTTP requests from a network and of providing HTTP responses to these requests. Each of the resources can be associated with a Uniform Resource Identifier URI used for resource identification when conveying HTTP requests. The HTTP responses can include static and dynamic content. In one embodiment an initial response produced by a request receiving resource can include static content and one or more placeholders. Placeholder content can be produced by different resources which receive request which results in dynamic content. Each resource can include numerous optional features such as authentication support encrypted channel support e.g. HTTPS support through Transport Layer Security TLS technologies Secure Sockets Layer SSL technology and the like content compression and decompression support and the like. Each of the resources can allocate resources to process a received request and can release these resources once that resource s processing tasks are completed. That is a time period in which any of the resources is used to handle a request context can be less than a total time needed to handle the request context. The resources can be implemented within physical machines as well as virtual computing devices such as those provided through visualization solutions e.g. VMWARE MS VIRTUAL SERVER and the like .

The result service can be a server side software program able to handle HTTP and other RESTful messages. A RESTful message is a message conforming to the Representational State Transfer REST software architecture. A REST architecture provides a uniform interface exists that includes a few basic primitive commands e.g. HTTP GET HTTP PUT HTTP POST HTTP DELETE . REST based solutions simplify component implementation reduce the complexity of connector semantics improve the effectiveness of performance tuning and increase the scalability of pure server components.

The result service can be implemented as a servlet a JAVA Server Page JSP an Active Server Page ASP an Enterprise Java Bean EJB an Enterprise Service Bus ESB service and the like. The service can be associated with a URI to which the resources can convey results and to which the clients can convey content requests. The result distribution service can reside within resource or any other computing component. When the service is associated with a component other than the one addressed in the original HTTP request then system must implement measures to ensure that the URLs of the service are available to the resources and the clients .

Each of the clients can be any computing device capable of sending HTTP request and capable of rendering responses to these requests. For example the client can include a personal computer a notebook computer a mobile computing device a smart phone a personal data assistant. PDA an embedded computing device an electronic gaming system and the like. Client can include a browser which handles HTTP communications. The browser can be linked to an interface with which a user interacts with client . The interface can be a graphical user interface GUI a multi modal interface a voice user interface VUI and the like. Interface can include content and placeholders.

The various components of system can be communicatively linked via a network not shown . The network can include components capable of conveying digital content encoded within carrier waves. The content can be contained within analog or digital signals and conveyed through data or voice channels and can be conveyed over a personal area network PAN or a wide area network WAN . The network can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. The network can also include network equipment such as routers data lines hubs and intermediary servers which together form a packet based network such as the Internet or an intranet. The network can further include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. The network can include line based and or wireless communication pathways.

The data store and other data stores not shown linked to resources or clients can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Data store can be a stand alone storage unit as well as a storage unit formed from a plurality of physical devices which may be remotely located from one another. Additionally information can be stored within the data store in a variety of manners. For example information such as table can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Information stored in data store can also be optionally encrypted for added security.

In diagram a client can convey a request to a server . The server can determine whether an active operation is currently executing that is capable of handling the request . This can be done by querying an active operations table and receiving results in response. When no active operations satisfy the request the request and or operations to be executed to handle the request can be logged in the active operations table . The handling operations can then be initiated .

While this operation is executing another request can be conveyed from client to server . The server can determine whether an active operation is currently executing that is capable of handling the request which is performed by querying table . an receiving a response . In diagram requests and can be substantially identical and can be satisfied by executing the same programmatic operations. Therefore a message to add request to a result delivery queue can be conveyed to table . Eventually the initiated process can produce results . These results can be conveyed to a result delivery service . When the server does not have an active auto delivery feature the clients and must send messages to service requesting results .

When an auto delivery feature exists or when requests are received the result service can query the active operations table to determine which clients are to receive the results. The querying can also remove entries form the table relating to the client and or the operations results if all clients that are to receive the results have queried the table . The caveat is provided because clients can asynchronously query service for the results in one contemplated configuration. The service can then convey the result to the requesting clients .

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

