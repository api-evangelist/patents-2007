---

title: System and method for maintaining requirements traceability
abstract: A front end client-server application configured to synchronize requirements between a requirements repository and a testing repository. The front end client-server application validates a requirement, processes at least one filter associated with the requirement, determines a requirement type of the requirement, and processes the requirement. In addition, the method comprises updating a testing application in accordance with the processed requirement. In addition, it can be determined whether a plurality of requirements received by the front end client-server application that need to be synchronized contain traceability relationships. If so, the front end client-server application replicates the traceability relationship between the requirements to be synchronized and any relevant, existing requirements at the testing repository. Furthermore, the front end client-server application allows a user to customize the requirements synchronization process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08191044&OS=08191044&RS=08191044
owner: Fannie Mae
number: 08191044
owner_city: Washington
owner_country: US
publication_date: 20070425
---
The present application claims priority to U.S. Provisional Patent Application No. 60 874 888 filed Dec. 14 2006 and incorporated herein by reference in its entirety.

The present invention relates to requirements management. More particularly the present invention relates to synchronizing requirements defined and or stored in a requirements repository with a testing application.

The creation of a system and or software generally entails a development process that includes the specification of requirements and the testing of those requirements against for example various versions of the software in order to arrive at software having the desired characteristics. A requirement can be thought of as a condition capability and or attribute which the system or software being developed should conform to or contain. Requirements can be specified by a developer or an end user of the system or software business policies and or any other entity or source having a need for such conditions capabilities and or attributes to be present in the system or software.

Additionally during the lifetime of a system or software new requirements can be created old requirements can be deleted and current requirements can be updated or otherwise modified. The process of handling requirements during the lifetime of a system or software e.g. codifying the requirements verifying the requirements tracking the requirements documenting the requirements auditing the requirements traceability of the requirements etc. is generally referred to as requirements management. Thus requirements management comprises a systematic approach to eliciting organizing and documenting system and or software requirements and a process which establishes and maintains agreement between a customer and a project team regarding evolving requirements of the system and or software.

As described above during the development life cycle of a system or software requirements are tested against different versions or releases of the system or the software. Testing is done to ensure that the new requirements are implemented correctly as well as operate correctly when the requirement is tied to a system or software feature.

In order to test the requirements as described above a mechanism is needed to synchronize the requirements between where the requirements are stored and the testing environment. Conventional synchronizing applications are very limited in functionality giving rise to various problems associated with the requirements management and the requirements testing processes. Consider for example a situation where a test group is currently testing requirements associated with a software release 1.0 where the requirements have been received from a requirements store. Consider as well that a development group has released a new version of the software i.e. software release 1.1 that contains new software code and has new requirements associated therewith where the new requirements are uploaded into the requirements store. When a conventional synchronizing application is used to synchronize the new requirements with a testing environment the new requirements will be blindly updated in the associated testing environment without notifying the test group that new requirements have been uploaded effectively replacing the requirements currently being tested. Therefore remaining requirements of software release 1.0 not yet tested will remain untested. In addition traceability among the same or the same type of requirements between different software releases is lost creating for example a situation where it is impossible to determine whether it is software code in release 1.0 or release 1.1 that caused a defect associated with one or more requirements.

In addition conventional synchronizing applications lack any true configurability or control that can be exercised by a tester or test group. For example conventional synchronizing applications are typically implemented on one or more servers thus forcing a tester or test group to access the server to modify any parameters related to the synchronization process. Furthermore there is no control regarding whether all of the requirements associated with for example a software release are to be synchronized with the testing application or only a subset of the requirements are to be synchronized. Also considering that requirements are synched between the two applications it would be advantageous to also provide validation and or authorization processes at the synchronization application to avoid unauthorized or otherwise improper movement of requirements to the testing repository.

Moreover as described above any requirements relationships and hierarchies that have been defined and or identified should be maintained whereas the conventional synchronizing applications have no mechanism for maintaining those relationships and hierarchies once the relevant requirements are sent to the testing environment. Thus relevant information which might aid testers and test groups in properly and meaningfully testing requirements is lost.

According to an exemplary embodiment of the present invention a method of synchronizing a requirement from a requirements repository is provided where the method comprises validating the requirement processing at least one filter associated with the requirement determining a requirement type of the requirement and processing the requirement. In addition the method comprises updating a testing application in accordance with the processed requirement.

In another exemplary embodiment of the present invention a method of updating requirements in a software testing application is provided. The method comprises copying a requirements document from a requirements repository where the requirements document containing a plurality of requirements. Thereafter the method further comprises determining a status of each of the plurality of requirements wherein several actions are taken depending on certain determinations that are made including upon a determination that a requirement is a new requirement associating the requirement with a status type identifier and associating the requirement with at least a first attribute value upon a determination that a requirement is a changed requirement updating at least a second attribute value associated with the changed requirement and upon a determination that a requirement is a deleted requirement deleting the requirement from the requirements document. Furthermore the method includes updating the requirements document according to the status of each of the plurality of requirements and forwarding the updated requirements document to a requirements module of a testing application in accordance with a user specified configuration file wherein the user specified configuration file indicates at least a subset of the plurality of requirements to be forwarded the subset containing only those requirements of the plurality of requirements having tag and attribute values matching tag and attribute values specified in the configuration file. Lastly the method involves incorporating the requirements included in the subset of requirements into at least one test plan linked to the requirements module.

Although certain features and advantages are described herein it will be appreciated that the teachings below may be used to implement systems and methods which do not necessarily have any of these features and advantages but which have other features and advantages.

The various embodiments of the present invention provide a front end client server application and method hereinafter referred to as the synchronization tool for performing configured process based synchronization of requirements from a requirements repository to a testing application. Various aspects of the synchronization process are easily configurable with the use of a configuration file.

In addition the various embodiments of the present invention ensure that the requirements themselves other data associated with the requirements and users that control or are otherwise involved with the synchronization process are properly validated and authorized to perform the synchronization and be synchronized. Moreover traceability and changes to traceability between at least two requirements can be maintained throughout the synchronization process allowing the traceability to be correctly replicated in the testing application and repository. Ultimately the various embodiments of the present invention provide a fast convenient and efficient system and method for managing testing efforts in conjunction with requirements management.

A requirements management application can be utilized in conjunction with a requirements repository. Alternatively either the requirements management application or the requirements repository can be integrated with the other. Regardless of the specific implementation both the requirements management application and the requirements repository work together to handle requirements management processes. Therefore the terms requirements management application and requirements repository are used interchangeably herein.

Various users can access and or utilize the requirements management application including requirements viewers i.e. those users that simply wish to view requirements documents by querying the requirements repository requirements contributors i.e. those users that in addition to viewing requirements also have permission to change specific aspects of certain requirements requirements authors i.e. those users that actually write and or revise requirements documents and can add change and or delete actual requirements in the requirements repository and project administrators i.e. those users that create manage and or oversee all aspects of a project including creating traceability links within and across projects creating requirements types managing security of projects etc.

It should be noted that the categories of users described above can encompass various personnel including but not limited to customers development managers product administrators system engineers software developers technical writers auditors and quality assurance personnel. In addition the roles of such personnel can change throughout the life of a project or from one project to another. For example in a project a system engineer may simply start off as a requirements contributor but as the project progresses and as may be required the system engineer may become a requirements author.

It should also be understood that other entities can contribute to the requirements management process. For example just like a customer may be a source of requirements for a particular software application regulatory agencies and business policies themselves may also be considered to be a source of requirements. That is sources from which requirements can be derived are not limited to human sources. In fact requirements can arise from anyone or anything having some interest in a particular project i.e. a stakeholder. 

The requirements management application can be accessed via a client operating on for example a personal computer PC using for example the Microsoft Windows operating system OS . Alternatively the requirements management application can be implemented as a Web based client for access over the Internet utilizing a Web browser. Requirements documents can be viewed and modified using the requirements management application provided a user can be validated as having the proper authority to access and modify requirements documents. The requirements management application can also be used to create view and modify actual requirements various attribute views traceability views showing the changes made to one or more requirements throughout a development cycle and hierarchical relationships between different requirements of a certain type as well as filter prioritize and sort requirements.

Furthermore the requirements management application can be used to create traceability links within and across projects where a project which can be created by a project administrator or similar entity as described above includes the requirements repository. Various physical databases such as Microsoft Access Microsoft SQL Server and Oracle can be utilized to store requirements as part of a project where the physical database s is operatively connected to and managed by a requirements management application client. It should be noted that the above databases can contain more than one project during any given period. The requirements stored in the requirements repository can be added to modified and or deleted as will be discussed in detail below. When a requirements document changes i.e. when a requirement is modified the changes are reflected in the requirements repository. In addition to the actual requirements and requirements documents related documents can be stored in the requirements repository as well that can be considered to be a part of a project. For example software and hardware specifications and quality assurance procedures can also be stored in the requirements repository.

A requirements document comprises a description or specification that captures the actual requirements describes project goals and objectives and can communicate development efforts and progress. Requirements documents are dynamically linked to the requirements repository allowing changes to the requirements documents to be reflected in the actual requirements as described previously. In addition requirements documents can be created and saved as different types. For example some requirements documents can be defined as use case requirements documents while other requirements documents can be defined as hardware requirements documents. Furthermore all documents of the same type requirements or otherwise can share functional and stylistic attributes for consistency purposes and ease of management and organization.

A testing application can comprise the testing application itself and an associated testing repository for storing any test related data e.g. test cases test results defect reports etc. The terms testing application and testing repository are used interchangeably herein as well. The testing application can be implemented as a Web based client that is accessible over the Internet or a local area network LAN such as a corporate intranet using a Web browser.

In order to utilize the testing application the requirements to be tested are specified by analyzing the software or system at issue and determining relevant testing requirements. This analysis and determination involve defining a testing scope which will achieve any specified test goals objectives and strategies. A requirements tree can then be built to define overall testing requirements. Once the requirements tree is created a list of detailed testing requirements can be created for each branch or topic of the requirements tree. In addition each requirement can be described in detail have a priority level assigned thereto and have attachments added thereto as well. After the testing requirements have been reviewed and or modified and deemed sufficient to meet the defined testing scope a test plan can be created.

The test plan can be created by defining any test strategies to be used. In defining test strategies the actual software or system to be ultimately tested a system environment testing resources such as test personnel and testing hardware can be considered. Then the software or system can be subdivided into various sections or functions and can be represented as a hierarchical test plan tree. The different types of tests necessary to sufficiently test the various sections or functions are determined next where test definitions can be specified. At this point the various requirements to be tested described above can be linked to one or more of the testing requirements. In addition manual tests can be developed by adding test steps to the tests that have been created in the test plan tree where test steps refer to actual test operations test personnel should execute as well as any expected test results. If automated tests are deemed appropriate test scripts can be created which provide the testing application with its own automated test operations steps to perform.

Once the actual tests have been created the tests can be grouped thus forming test sets based on the various requirements needing testing and on the various testing goals that were previously defined. The various tests or sets of tests can be executed one or more times depending on the requirement s being tested at that time. In addition the running of the test or sets of tests can be automated as described above and scheduled to run without further human involvement.

After testing has been completed or throughout the testing process identified defects in the software or system can be reported using a defect reporting function of the testing application. It should be noted that it is not only testers or test groups that can utilize the defect reporting function. Developers system managers end users etc. can also submit defect reports during any phase of the testing process. Allowing such broad reporting minimizes the chances that a defect or problem in the system or software goes unnoticed. Once defect reports are submitted they can be reviewed and analyzed so that they can be subsequently fixed. In addition reports and other notifications can be created and transmitted to aid in the analysis of the defect reports and the repair progress.

This testing process can be performed as many times as is necessary or is allowed given any timing restraints i.e. release date of the software or system. In addition new builds e.g. new software release versions can be developed and re tested using the same tests test plans etc. or new or modified tests and or test plans can be utilized as required. In addition existing requirements are tested as well conventionally referred to as regression testing to ensure that the existing requirements remain correctly implemented or features associated with the existing requirements are not disturbed or otherwise affected by new requirements features and or software code in for example a new software version or release. As well integration testing system testing and unit testing can be performed where the various levels of testing refer to different stages or scopes of testing coverage. For example unit testing can refer to the testing of only a particular software module whereas system testing occurs on a complete system having all relevant software modules integrated therein in order to determine the complete system s compliance with the specified requirements.

Like the requirements management application the testing application can utilize testing application projects as well to organize and manage the testing process described above. A user can create a testing application project and store and manage any information or data generated and or gleaned by the testing application in a testing repository. That is a testing application project can comprise one or more of requirements linked to the tests tests test sets test plans test runs defect reports and any other relevant documentation.

Also like the requirements management application security is implemented in the testing application where access to a testing application project is limited to those users with the proper authority. Lists of authorized users user groups and passwords can be created for association with the various testing application projects. Different levels of access can be given to different users and or user groups where certain users and or user groups can add modify and or delete certain portions of the testing application projects. In addition the rules governing access to the testing application projects can be customized as needed for each project.

Referring to a low level component diagram is illustrated showing the basic elements of a requirements synchronization system . The synchronization tool is implemented as a front end client server application that is operatively connected as an intermediary application between the Testing Application Open Tools Application Programming Interface OTA API and the Requirements Management Application API for managing and controlling the synchronization of requirements from the requirements repository to the testing repository. An API refers to an interface that an application provides in order to allow requests for services from that application to be made of it by other applications and or to allow data to be exchanged between the applications. Therefore the Testing Application OTA API resides within the testing application and the Requirements Management Application API resides within the requirements management application.

In addition the synchronization tool accesses its own synchronization tool database for various processes which will be discussed in detail below. It should be noted that the synchronization tool database can comprise one or more Oracle database s Microsoft Access or SQL Server database s or any other appropriate database s . Furthermore the Requirements Management Application API can access its own database not shown where the requirements to be synchronized are stored and the Testing Application OTA API can also be associated with its own database not shown for storing test related data such as test plans defect reports etc.

As mentioned above various embodiments of the present invention are configured to bridge a requirements repository to a testing application. Therefore the synchronization tool can connect to any requirements management application project and to any testing application project and synchronize the requirements of the requirements management application project. In addition the synchronization tool can customize the synchronization based on configuration settings representing desired synchronization characteristics. The synchronization tool can retrieve requirements specified in documents created and or stored in the requirements repository and process the requirements based on configuration settings specified in a synchronization tool configuration file discussed in further detail below. The synchronization tool then inserts the requirements into a testing application requirements module.

It should be noted that identifiers e.g. a requirement name of the particular requirements are maintained during the synchronization process and appear the same upon retrieval from testing application requirements module for example when a tester retrieves the particular requirements he or she needs to test. In addition any text or metadata associated with each of the particular requirements received from the requirements repository appear as a requirement description discussed in further detail below.

It should further be noted that any synchronizations that occur between the requirements management application and the testing application are one way synchronizations. That is a read only copy of the requirements to be synchronized between the requirements repository and the testing repository is sent to the testing repository as opposed to actual requirements documents maintaining the requirements repository as a master requirements repository. As will be discussed in further detail below a tester utilizing the testing application need only be able to identify the requirements for actual testing of the requirements mapping the requirements to a test cases and or a test plan etc. In other words the tester does not need access to the actual document containing the requirements. This prevents any inadvertent alterations to the requirements documents or the requirements themselves. In fact the system can be configured in such a manner that in order to change requirements or requirements documents a user must first be authenticated validated and or authorized to do so by accessing the requirements management application directly e.g. by logging onto a requirements management application client. It should be noted that looser or stricter access requirements can be implemented.

In addition testing application projects can be protected as well by creating a testing application back up project before commencing with a synchronization tool synchronization. Therefore in the event that a particular synchronization is somehow interrupted corrupted or otherwise adversely affected an existing testing application project to be synchronized is not lost and can be utilized in a subsequent synchronization. Alternatively and or in addition testing application projects can be backed up immediately after a synchronization as well and stored for a predetermined or other amount of time for contingency purposes.

At step registration is checked where one or more validation authentication and or authorization procedures are performed to ensure that the synchronization tool is being accessed by an authorized user and that any project being accessed is also authorized for synchronization via the synchronization tool. Requiring user validation is important in that users initiating synchronizations should be properly trained and well versed in using the synchronization tool. Requiring project authorization is useful for various control and or compliance regulations such as Enterprise Level System Implementation Framework ELSIF requirements where requirements management application and testing application projects should match up before synchronizing requirements between them. More or less validation authentication and or authorization processes may be performed by and or in conjunction with a synchronization tool synchronization. Furthermore differing levels of authority may be given to different entities. For example a test user may only have the authority to access a particular requirements management application and testing application project related to a particular software release version whereas a requirements management supervisor may have access to all requirements management application and testing application projects related all release versions of a particular software application.

Referring back to registration data such as projects project identifiers user identifiers etc. associated with authorized projects and or users can be stored in the synchronization tool database . In particular a user can log onto an instance of The synchronization tool using his or her username and password where the user can be a tester a test manager or any other entity that can properly request a synchronization. The username can be one that is associated with a particular requirements management application project. It should be noted that the username associated with the requirements management application project can be the same username associated with a related testing application project where the testing application project can be a collection of requirements tests test sets test runs defect reports customization data and any other related documentation. When the same username is utilized for both a requirements management application and a testing application project The synchronization tool can internally connect to both the requirements management application and the testing application without requiring the user to manually connect to both applications separately.

Alternatively different usernames can be utilized in which case extra processes can simply be invoked in order to determine which requirements management application project should be associated with which testing application project for synchronization. If either the user or the project cannot be validated synchronization is not allowed and an error message can be sent or displayed to the user. Furthermore unauthorized attempts to access The synchronization tool can be logged and tracked where notifications for example by email can be sent to the proper entity e.g. a project manager a test manager security administrator etc. This is useful for Sarbanes Oxley SOX corporate governance requirements compliance.

At step desired requirements associated with the authorized requirements management application and testing application projects are retrieved from the requirements repository. At step various filters are processed to extract various requirement type tags and or attributes associated with the requirements. Steps and are performed according to certain criteria specified in a configuration file including those filters i.e. requirement type based filters and attribute value based filters.

A requirement type refers to a class of requirements which can be defined as desired for a particular project or across projects. Defining requirement types allows requirements authors and or stakeholders to more easily manage the various requirements associated with a project by grouping certain requirements into more manageable subsets. This becomes helpful for example when testing a requirement where the testing process can be divided among different testing groups. In addition any changes additions or deletions to the requirements and or their effect on for example a particular software product can be managed and seen more easily and more clearly.

The requirement type based filters indicate to The synchronization tool that only those requirement types identified by the requirement type based filters listed in the configuration file are to be processed i.e. synchronized. For example different types of requirements can be specified such as scope requirements functional requirements non functional requirements background requirements use case requirements etc. It should be noted that a user can define any type of requirement desired for that user s particular purpose. If only one type of requirements for example functional requirements need to be tested and thus synchronized with the testing repository the requirement type based filter will ensure that only requirements of the functional type will be synchronized. This requirement type based filtering is accomplished by referencing a requirement type tag associated with each requirement. The requirement type tag is specified in the requirements repository.

Considering the functional requirements example described above all functional type requirements are tagged with a functional identifier in the requirements repository. When the configuration file is created an identifier such as FUNC is specified. Therefore at step when the various filters are processed The synchronization tool knows only to synchronize those requirements tagged with the functional identifier. It should be understood that more than one requirement type can be specified and synchronized according to the configuration file by simply indicating another requirement type such as SCOPE. It should also be understood that different requirements management application projects can have different requirement type tags specified therein.

The attribute value based filters comprise another method of filtering certain requirements for synchronization. Whereas a requirement type refers to a particular kind or class of requirements an attribute can refer for example to that information which can be utilized to manage a requirement in some particular way. For example if requirements need to be filtered and synchronized based on a particular attribute value such as requirements associated with a certain software release an attribute value based filter specifying that certain software release can be indicated in the configuration file. Those requirements in a requirements management application project that are associated with a different software release value are ignored and left unsynchronized.

Requirements can be tagged with attribute values indicating anything of interest or use to the requirements management and testing processes where attributes can be defined articulated and managed in project documents and or the requirements repository itself. Aside from software release versions attribute information can include but is not limited to a relative benefit of a particular requirement an implementation cost of a certain requirement a requirement s priority and the level of testing that is appropriate for a specific requirement. For example one requirement can be tagged with an attribute value indicating that it should be tested at the system test level while another requirement can be tagged with an attribute value indicating that it should be tested at the unit testing level. It should be noted that parent child dependencies are considered e.g. all the child requirements belonging under a particular parent requirement have certain attribute values which are the same.

A configuration file can be used to specify how requirements are to be synchronized attribute wise from the requirements repository to the testing repository. That is attributes of requirements can be mapped from the requirements repository to the testing repository fields using system field mappings. An example set of fields that can be utilized by The synchronization tool are shown in Table 1.

Non system field mappings can also be processed by The synchronization tool. In this situation a comment can be expressed in the configuration file using the following syntax in order to properly map requirements attributes from the requirements repository to the testing repository 

 TESTINGREPOSITORY COLUMN NAME TESTINGREPOSITORY LABEL REQUIREMENTSMANAGEMENTAPPLICATIONATTRIBUTENAME

For example the above comment could be used to map a scope attribute even though scope is not a system defined attribute by including the comment

In addition similar to the manner in which desired requirements types can be indicated by an identifier in the configuration file a comment regarding a desired attribute value can be included in the configuration file. An attribute value filter syntax can be AttributeName Value where for example if it is desired to synchronize those requirements having a high priority the comment Priority High is included in the configuration file.

Besides attribute values and requirement types other information can be included in the configuration file such as notification email addresses log file locations and priority values which are used to inform The synchronization tool of the order in which requirements are to be synchronized. It should be noted that different configuration files can be locally created and stored thereby allowing different Synchronization tool users to specify how requirements are retrieved and synchronized.

Another set of requirement types indicates whether the retrieved requirements are new requirements changed requirements or deleted requirements. At step these requirements types are checked. The process continues to step when the requirements to be synchronized are new requirements step when the requirements to be synchronized are changed requirements and step when the requirements to be synchronized are deleted requirements. The requirements to be tested in the testing repository are updated at step .

At step The synchronization tool generates various notifications such as audit trail logs and metrics. After each execution of a synchronization instance is completed The synchronization tool can generate an audit trail log of all the actions taken during that particular synchronization instance. The audit trail log can contain one or more of but not limited to the following pieces of information requirements management application project name requirements management application user who performed the synchronization testing application project name testing application user who performed the synchronization Packages processed Requirements processed Total requirements processed at the root level and at the child level Check for deleted requirements and packages and Synchronization start and end time. Additional fewer and or different information may be captured in an audit trail log.

It should be noted that a package can refer to units of related artifacts. That is packages are abstract structural objects utilized to conveniently organize requirements and any related information within the requirements management repository. Project information can be organized in folders within packages. By utilizing packages to organize requirements and their related information stakeholders users business team members etc. can more easily find and access desired data. Packages can be created modified deleted and or moved to from and or under another package. For example requirements associated with a particular software feature can be grouped in one package. The synchronization tool is able to recognize and retain packages during a synchronization to the testing repository described below.

Audit trail logs can be created using various methods. For example audit trail log documents can be created with word processing and or spreadsheet applications that are accessed separately from The synchronization tool or integrated therein. Alternatively the information captured in the audit trail logs can be transmitted within an email a Hypertext Markup Language HTML document or other type of text message. In addition formatting of the information captured in the audit trail logs can be but is not limited to tabular formats charts graphs and detailed listings. Furthermore the types of information that are to be captured in the audit trail logs can be specified by an authorized user either before the synchronization or after the synchronization is complete.

If an error message was generated during execution of a synchronization the audit trail log can capture the exact text of the error message and any associated requirement tag s and the GUID where the GUID refers to a unique identifier for each requirement in the requirements management application. Another related auditing feature of The synchronization tool allows a user to determine which requirements have been tested and which requirements have not been tested. This type of auditing provides a way to verify testing data and is a useful way to track the progress of a development cycle. In addition such auditing allows interested entities to determine whether the correct requirements during one or more test cycles have been tested.

After each execution of a synchronization instance The synchronization tool can also generate metrics that also identify certain actions events and or other information related to the synchronization instance. Metrics can be outputted in a HTML format and can contain one or more of but not limited to the following information Synchronization executing date Synchronization execution time requirements management application Project name testing application Server name testing application Domain testing application Project requirements management application User testing application user Number of New Requirements Number of Changed Requirements Number of Deleted Requirements Total Requirements in the requirements management application Total Requirements in the testing repository before synchronization Total Requirements in the testing repository after synchronization the testing repository Total Packages List of New Requirements in the current synchronization List of Changed Requirements in the current synchronization as compared to the previous synchronization and List of Deleted Requirements in the current synchronization compared to the previous synchronization.

Additional fewer and or different information may be captured and output in the metrics. In addition metrics like the audit trail logs can be output in additional and or different formats as well. It should be noted that not only a number of changes requirements is determined and displayed in a particular metric but the actual requirements themselves are displayed. Therefore a metrics report could simply be printed out and used by a tester or test group during testing. Furthermore the types of information that are to be captured in the metrics can be specified by an authorized user either before the synchronization or after the synchronization is complete.

It should also be noted that in the testing repository all packages are considered to be the same as the requirements which is inconsistent with how the requirements management application characterizes packages. To reconcile this difference The synchronization tool allows a user to set a user defined field Package Yes where for all other requirements within the package this user defined field is left blank. Furthermore if there has been no update to a requirement during a current synchronization instance the testing repository retains an earlier synchronization update time and date.

At step The synchronization tool can send various emails and notifications to appropriate entities such as test managers test case authors software developers any users listed in the configuration file The synchronization tool administrators etc. at the end of each synchronization instance. The emails can contain as described above for example the audit trail logs and the metrics described above. It should be noted that emails can be sent out regardless of whether or not the synchronization was successful. Step indicates the end of the synchronization process when a user exits The synchronization tool. Although transmitting notifications is described with relation to emails the notifications can be transmitted using other formats e.g. a text messaging format.

Once authentication is completed the Synchronization tool Main attempts to check registration with the Synchronization tool Oracle database . This is accomplished by calling a CheckOracleCatalog method to authorize the Requirements Management Application project with the Synchronization tool database . Then a configuration file is read by the synchronization tool by accessing Configuration by calling ReadConfigFile to read any field mappings. The synchronization tool Main transmits a GetRequirements request to Requirements Management Application Project after which the Requirements Management Application Project returns a Requirements Object information. The synchronization tool Main object processes the applicable filters if any exist in the configuration file and updates the requirements in Testing Application . A Synchronize method is called as well which in turn calls PrintPrackage Reparent Package PostPackageDelete ReparentRootRequiremenets and ReparentChildRequirements methods to compete the synchronization process.

Audit trail logs and metrics are generated by the synchronization tool Main and stored at the synchronization tool Oracle database using a WriteOracleMetrics method after which the appropriate notifications as described above are generated by calling a Sendmail method. It should be noted that one or more requirements management application projects can be synchronized with one or more testing application projects.

Moreover the synchronization tool synchronization process can occur at a relatively fast rate where the speed of synchronization can be affected by the processing speed of any physical elements within which or with which the synchronization tool synchronization process occurs. For example the speed at which for example an Oracle database acting as the synchronization tool database can respond to a database query requiring the accessing of requirements affects how many requirements can be synchronized from the requirements repository to the testing repository. A baseline rate of operation however can be set at 1000 requirements synchronized in 10 minutes. In addition the amount of data traffic present on a network in which the synchronization tool is implemented can also affect the synchronization speed. As will be discussed below the synchronization tool can be configured to run at off processing times where other system resources are not accessing and or otherwise utilizing the network resulting in faster synchronization speeds.

As mentioned above another type of requirement refers to whether a particular requirements is new changed or deleted. illustrates a synchronization operation for new requirements in greater detail. At step the requirements repository imports a new requirements document containing therein specifications for new requirements that are to be created. Alternatively the new requirements document can be created using the requirements management application itself. At step the new requirements are tagged according to their requirement type while at step the various attribute values associated with each of the new requirements are entered. At step the new requirements are created and can be considered ready to synchronize with the testing repository using the synchronization tool. At step a copy of the new requirements are created in the synchronization tool.

At step the new requirements from the requirements repository are populated in the testing repository. It should be noted that any conditions relating to the requirements tags and or attribute values are specified in the configuration file used by the synchronization tool and any appropriate filters are applied to the new requirements as described above. Once the testing repository has been populated with the new requirements the new requirements are linked to a test plan s at step . At step the new requirements are tested according to the test plan while utilizing the various features and capabilities of the testing application. Lastly at step existing test plans can be updated and the status of the new requirements is also updated. For example the new requirements can be identified as being tested successfully. It should be noted that any mappings between existing requirements and test cases are maintained.

In addition processing new requirements in such a manner allows a tester dr test group to be cognizant of what requirements he or she is testing that are new and may belong to a new software release. This aids in distinguishing the new requirements from those requirements he or she is testing that are old and may belong to a previous software release which can result in efficiency gains by determining that only the new requirements need to be tested. Furthermore a synchronization instance for new requirements or any other type of requirement can be initiated at any time after accepting the new requirements the changed requirements etc. into the synchronization tool.

From a quality assurance processing perspective the synchronization tool ensures that requirements can be baselined are well written audited etc. before any testing on those requirements begins. From a resource utilization perspective appropriate times for synchronization can be determined before initiating a synchronization to ensure that the taking of any system resources for the synchronization will not affect other users of those resources. This is especially important when different development or requirements generating groups access and download or create requirements in the requirements management application without knowledge by testing groups. Thus synchronizing requirements via the synchronization tool does not result in a blind dump of requirements into the testing repository. In addition in situations when multiple testers or test groups are testing multiple requirements related to multiple software packages software release versions and or requirements management application projects which requirements get sent to which testers or test groups can be managed and easily tracked for later review.

In addition if a changed requirement is associated with data indicating a reason why the requirement was changed that data is captured from the requirements repository during the synchronization process and copied to the testing repository as well. Such information becomes very useful during the testing process. For example not only can the tester focus on testing only those requirements that have been updated as opposed to re testing requirements that have already been tested but the tester is able to determine why a requirement was updated which could influence or otherwise impact how the tester tests the updated requirement. Furthermore an option in the synchronization tool is provided which allows a user to blank out all the changes populated in the testing repository for a previous synchronization instance if any to allow the user to see the total changes made to the requirements for the current synchronization instance as opposed to merely a running tabulation of changes.

Regression testing can also be easily performed when it can be determined what requirements have been changed and what requirements have remained the same. That is testing can be performed on those requirements or functions related to those unchanged requirements to determine whether or not the requirements and or functionality are stable or have been affected by the changed requirements.

At step an email notification is automatically outputted indicating the changes made to the updated requirements and or the changed requirements that were updated during the current synchronization instance. At step any existing test plans can be updated as well to reflect any adjustments made to adapt testing to the changed requirements.

Processing deleted requirements in such a manner allows a tester utilizing the testing application to roll back to for example a previous software release that originally contained the currently deleted requirements for further testing if desired. In addition any audit trail logs and or metrics can capture those requirements that have been deleted and the progression during the development life cycle of a piece of software can be seen. Also at step any existing test plans that were mapped to the deleted requirements can be updated to forego testing of those deleted requirements.

Another aspect of the various embodiments of the present invention involves the ability to replicate requirements hierarchies as established in the requirements repository and the ability to replicate any existing traceability between the requirements management application and the testing application. Hierarchical requirement relationships refer to relationships that reflect dependencies between different requirements of the same type. Hierarchical relationships can be one to one one to many and parent child and can be utilized to separate a larger and or more generalized requirement into smaller and or more explicit requirements. For example a parent requirement can specify a software application to display customer information where a related child requirement can direct the software application to specifically display the customer s name address and date of birth.

In order to replicate requirements hierarchies the synchronization tool copies for example the parent child relationship between packages and requirements from the requirements management application in addition to the actual requirements themselves. If any requirement is re parented in the requirements management application the synchronization tool has the ability to re parent the copy of that requirement in its own the synchronization tool database . As well if any requirement is deleted for example in the requirements repository resulting in a deletion of additional child requirements the appropriate parent and child requirements are soft deleted in the synchronization tool database . This hierarchy replication is achieved by tracking each requirement s GUID identifier. Because each GUM identifier is uniquely assigned to a requirement in the requirements management application the requirement can easily be tracked and moved i.e. re parented if necessary.

Traceability refers to a dependency relationship between two requirements where traceability allows any changes to the requirements to be properly managed. As discussed above various types of requirements can exist and in addition relationships between requirements can exist where one or more requirement types can be the link between the requirements. For example requirements that arise from a customer request are ultimately related to features in the end product that are developed to meet the requests. In turn the features are related to specific requirements that embody the features in terms of for example functional behavior. Alternatively a functional requirement may stem from or be derived from a background requirement. Therefore such requirements can be linked using the traceability features of the requirements management application.

When the synchronization tool synchronizes one of those requirements such as the functional requirement the traceability link from the requirements management application is maintained in the testing application. As noted above it is possible to create a traceability link between requirements of the same requirement type. It is also possible however to create a traceability link between requirements of different requirement types. In addition traceability relationships can be created and maintained in a single requirements document between different requirements documents and simply between other requirements stored in the requirements repository. Maintaining the traceability link allows a tester to better appreciate the purpose of the functional requirement.

This better appreciation can be used to tailor test cases for the functional requirement in light of the background requirement. In addition if for example a policy requirement is associated with a plurality of functional requirements a tester can ensure that the functional requirements he or she is supposed to test for example are those functional requirements that actually do get tested by checking the traceability of the functionality requirements to the policy requirement. It should be noted however that requirements can be mutually exclusive unto themselves.

To allow replicating the traceability between requirements from the requirements management application to the testing application the trace to and the trace from relationships identified in the requirements management application are replicated in the testing repository. The terms trace to and trace from refer to states of a particular requirement that has a traceability link associated with it. Referring to the example described above the functional requirements that was derived from the background requirement can be thought of having a traceability relationship in which the functional requirement is traced from the background requirement. The background requirement on the other hand can be considered to be traced to the functional requirement.

It should be noted that both direct and indirect traceability relationships can be defined where a direct traceability relationship refers to the previous example. An indirect traceability relationship would result for example if a scope requirement was traced to a background requirement and the background requirement was traced to a functional requirement resulting in the functional requirement having an indirect traceability link to the scope requirement.

In addition if any changes occur in the traceability of a requirement those changes are also replicated. Furthermore traceability data can be viewed and or utilized to check suspect requirements. For example if a requirement s name metadata type or attribute is changed the requirement may no longer belong to a particular parent requirement. The traceability data can reveal this change and as discussed above with regard to requirements hierarchies the changed requirement can be re parented.

Although traceability has been described above in relation to requirements traceability can also be applicable to testing. For example a changed requirement can affect the testing process related to that changed requirement as discussed previously. As described above additional information relevant to a particular requirement can be associated with the requirement and is retained during synchronization between the requirements repository and the testing repository. Therefore if a user responsible for the changed requirement has suggestions or comments regarding how the changed requirement is to be tested such information can be synchronized as well. This allows appropriate testing personnel to be notified of any relevant information regarding their tests test plans testing strategies etc. for the changed requirement as well as any other requirement that has a traceability link with the changed requirement.

Folder structure can also be replicated during a synchronization from the requirements management application to the testing application. As described above the requirements repository stores requirements according to a particular folder structure that relates to parent child relationships between packages and requirements. If any requirement or package is re parented to another package for example the synchronization tool can move the requirement or package at issue under the current proper parent package. As with the requirements hierarchies described above the unique GUID identifiers associated with each requirement is used to achieve this replication of folder structure.

The various methods of customizing synchronization instances and the system and method used to achieve synchronizations also provides distinct advantages regarding business and software development compliance requirements. The synchronization tool is able to determine indicate log and transmit notifications regarding a plurality of important pieces of information related to the development process. The name or names of actual authors of requirements can be determined and displayed which aids in SOX compliance where any discrepancy between reported authors and those actually determined to be authors can create legitimacy questions. The ability to replicate and maintain hierarchies and traceability between requirements and packages also aids in SOX compliance by being able to certify that software features are related to their original specified requirements. This is especially useful in the development of financial and or accounting type software.

It should be noted that all requirements management application users are registered in the various testing application projects before a synchronization instance can be initiated. Requirement version numbers in addition to for example software release version numbers are maintained and can be displayed. Again the use of version numbers ensures that the development of a system or software progresses using the correct requirements. Furthermore the ability to customize the synchronization tool and the synchronization process allows specific requirements management and change management processes of a particular corporation test group development group etc. to be closely adhered to.

From a business process production perspective various features can be realized using the various embodiments of the present invention described above. Throughout a development cycle of a system or software it is often advantageous to perform gap analysis where gap analysis refers to determining whether any gaps in the testing process have occurred. That is analyzing testing results associated with a particular system or software or a portion thereof to determine if what is actually being or has actually been tested is commensurate with that should be or should have been tested can identify testing process deficiencies.

For example a stakeholder can compare one or more audit trail logs and or metrics generated by and or received from the synchronization tool indicating changed requirements that were to be tested with a test report generated by the testing application and or a particular tester quality assurance personnel etc. If the test report shows that one or more of the changed requirements synchronized with the testing repository using the synchronization tool were not in fact tested steps can be taken to continue testing or re test the system or software.

In addition processing a gap analysis in accordance with the various embodiments of the present invention can be accomplished in a short amount of time. The speed with which gap analyses can be completed results from the synchronization tool the requirements management application and the testing application each having their own requirements repositories to glean information from where the requirements data is kept up to date from synchronizations as well as the fact that metrics and audit trail logs are already created and managed after each synchronization.

Impact analysis is another feature that can be conveniently realized when utilizing the various embodiments of the present invention. Performing impact analyses provides a method of determining in what way changed requirements and or the addition or deletion of requirements affect a particular system or software product. For example testing results can indicate that more defect were reported for a latest software release version than were reported for a previous software release version. Due to the fact that audit trail logs and metrics are kept for the synchronization tool synchronization instances it can be determined that the addition of new requirements in the latest software release were the reason for the increase in defects. In addition because of the traceability functionality provided in the synchronization tool the requirements can be traced to a requirements source for example that could be deemed to be impractical or unworkable.

Furthermore impact analysis results can influence the testing process in terms of how new test cases should be developed and whether or existing test cases should be updated or left the same. For example it is possible to have a situation where an increase in defect reports are a result of current tests and test strategies not correctly determining the impact of new or changed requirements to a system or software product as opposed to issues related to the introduction of the new or changed requirements. Performing impact analysis can identify such a situation whereupon measures can be taken to adjust rework and or develop new tests and test strategies for the changed or new requirements.

In addition the ability to filter requirements as described above can be utilized by system and software developers requirements entities and or business development teams etc. to push down only those requirements deemed necessary for testing. It is very feasible to have thousands of requirements simultaneously existing in the requirements repository where the requirements are related to a plurality of different systems or software release versions. Synchronizing only those requirements relevant to for example a single software release version streamlines the development testing and rollout process as well as provides an effective method of controlling and managing the testing process.

It will be further appreciated that system and method described herein may perform fewer or additional functions as compared to those described herein. For example an entity e.g. a lending institution that performs and or utilizes only some of the above mentioned processes may use a computer system that contains only a subset of the functions described herein. Additionally one or more of the systems or functions described above may be variously combined in alternative configurations.

The foregoing description of embodiments has been presented for purposes of illustration and description. It is not intended to be exhaustive or to be limited to the precise forms disclosed and modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. The embodiments were chosen and described in order to explain the principals of the invention and its practical application to enable one skilled in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

