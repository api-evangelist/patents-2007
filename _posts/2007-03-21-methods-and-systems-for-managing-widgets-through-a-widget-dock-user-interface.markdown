---

title: Methods and systems for managing widgets through a widget dock user interface
abstract: Methods, systems and computer readable media defining computer instructions for rendering a user interface (UI) are provided. The UI is defined for handling a widget that provides functionality to a displayable and executable mini-application. The widget includes a plurality of widget attributes, including a dock tile that is defined to display only selected ones of the plurality of widget attributes of the widget. Also provided is a widget dock to display and contain the dock tile on a display screen, and the dock tile is linked by a functional association to the widget. The widget dock provides access to launch the widget when selection of the dock tile is detected, so as to provide full interface with the plurality of widget attributes of the widget.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881052&OS=08881052&RS=08881052
owner: Yahoo! Inc.
number: 08881052
owner_city: Sunnyvale
owner_country: US
publication_date: 20070321
---
This invention generally relates to the desktop computing environment and particularly but without limitation to a system and user interface for organizing controlling and launching mini desktop applications.

In a desktop computer system a computer user interacts with the computing system through a user interface. In the current age of graphical user interface the computer user normally launches a desired computing application by selecting through clicking or double clicking an application short cut icon on the computer screen. The short cut icon itself is generally passive and the application to which this icon corresponds to does not provide any interface to the computer user unless the application is in running state.

If the computer user expects an application to provide a continuous visual or other type of feedback the computer user is required to run the application and also to keep the application in the running state for the time the computer user desires to keep received the information from the application in question. Furthermore the computer user will need to keep many applications running continuously if the computer user desires to accomplish tasks implemented in different applications. Doing so however will require more computing resources and the running applications will also take screen space requiring the computer user to switch the applications back and forth from background to foreground in order to obtain desired information.

This issue is addressed by the development of mini desktop applications. These mini desktop applications are generally lightweight and can be run by simply rendering them on the display screen. When rendered on the display screen these mini desktop applications visually appear to be the same as the desktop short cut icons. However contrary to the desktop short cut icon the graphical icon or picture provided by the mini desktop is an active display of information. The difference between a normal desktop application corresponding to a desktop short cut and a graphical icon or picture corresponding to a mini desktop application can be better illustrated by the following example. A normal desktop short cut for a laptop battery state indicator will not continuously show the current state of the battery. Only way to get the battery state information is to launch the application. Whereas a desktop icon or picture on the desktop corresponding to a battery state indicator mini application will continuously show the state of battery through changing information on the picture or icon without a need to any user action.

These mini desktop applications are also called widgets . The term widget can refer to any icon or graphical interface element that is manipulated by the computer user to perform a desired function.

A problem arises when the computer user tries to use several of these mini applications because putting too many of these mini applications on the computer user s display screen makes the display screen cluttered thereby making the organization management and use of these mini applications a cumbersome task.

Broadly speaking the present invention fills these needs by providing a widget dock to better manage widgets on the display screen and provides a way for grouping the widgets controlling other visual and functional aspects of the widgets including controlling the widget engine enabling a centralized access to the widgets and widget engine configurations and preferences etc. It should be appreciated that the present invention can be implemented in numerous ways including as a process an apparatus a system a device or a method. Several inventive embodiments of the present invention are described below.

In one embodiment a user interface UI is provided. The UI is defined for handling a widget that provides functionality to a displayable and executable mini application. The widget includes a plurality of widget attributes including a dock tile that is defined to display only selected ones of the plurality of widget attributes of the widget. Also provided is a widget dock to display and contain the dock tile on a display screen and the dock tile is linked by a functional association to the widget. The widget dock provides access to launch the widget when selection of the dock tile is detected so as to provide full interface with the plurality of widget attributes of the widget.

In another embodiment a computer implemented method for handling the widgets is provided. The method is defined to provide functionality to a displayable and executable mini application. The widget includes a plurality of widget attributes. The computer implemented method further includes displaying a widget dock to display and contain a dock tile on a display screen and displaying the dock tile to display only selected ones of the plurality of widget attributes of the widget and linking the dock tile by a functional association to the widget.

In yet another embodiment a computer readable media having program instructions for executing a widget is provided. The widget includes a plurality of widget attributes. The computer readable media includes program instructions for rendering a widget dock displaying module to display a dock tile contained in a widget dock on a display screen. The computer readable media also includes program instructions for rendering a dock tile displaying module programmed to display only selected ones of the plurality of widget attributes of the widget and program instructions for rendering a dock tile linking module to functionally associate the dock tile to the widget.

The advantages of the present invention are numerous. Most notably the apparatus and methods described herein enable a computer user to properly handle control and manage thousands of available widgets. The embodiments of the present invention provide a way to group the widgets control the visual aspects of the widgets enable disable through a unified interface. The disclosed embodiments also enable the computer user to launch the widget to allow access to the full widget interface or alternatively run the widget in a limited functionality mode.

Other aspects and advantages of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of the present invention.

The figures are provided in order to provide a thorough understanding of the present invention. The figures should not be construed as limiting the breath of the invention in any manner.

An invention for a method and apparatus for handling the widgets using a widget dock is disclosed. In the following description numerous specific details are set for the in order to provide a thorough understanding of the present invention. In one embodiment of the invention a widget dock to better manage a plurality of widgets on the display screen is provided. In one aspect the widget dock provides functionality to enable grouping of widgets controlling other visual and functional aspects of the widgets including controlling the widget engine enabling a centralized access to the widgets and widget engine configurations and preferences etc. It will be understood however by one of ordinary skill in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in details in order not to unnecessarily obscure the present invention.

A widget is a graphics rich desktop application which usually has a relatively small memory footprint. On the display screen the widgets appear similar to application desktop icons. However contrary to the desktop icons the widgets when appearing on the display screen are in fact running applications. Furthermore contrary to the application desktop icons the user interface of the widgets is dynamic. For instance the graphics or the information being displayed by the widget can change to show the desired information to the user. For example a weather widget will show continuously changing temperature of a user selected city or zip code.

Because the user interfaces of the widgets are generally designed to occupy small display space on the display screen a user may have many widgets running on the display screen simultaneously. This is a big advantage over normal conventional user applications such as text editors accounting applications etc. in which the user interface is designed to cover either the whole display screen or at least a substantial space on the display screen.

There are hundreds or probably thousands of widgets available for download from the internet or other sources and the number of available widgets is growing rapidly. The embodiments of the present invention among other things address the issue of managing grouping and controlling a plurality of widgets which may be used and displayed on a screen. With this overview in mind the following figures will illustrate example structure functionality and controlling interfaces to render and manage widgets through a widget dock.

In one embodiment the API support includes support for HTTP HTTPS API XML API FTP API Operating System native API JAVA JavaScript programming language API etc.

In one embodiment a user interface UI is broadly defined as a graphical user interface that is capable of interfacing with functional code displaying content and user interactivity and providing feedback to users in view of the manipulations commands or user directed selections or input. Further a UI as rendered by a computing device can display different types of graphical and non graphical objects. Example functionality can include displaying objects and allowing the objects to be moved dragged emailed resized minimized maximized and manipulated either programmatically or manually by the computer user.

In one embodiment the widget menu can be modified or extended to add more preference or configuration features. The widget menu is configurable to enable easy navigation and interface to the configuration options provided by the widget . For example in the exemplary weather widget in the widget menu enabled a computer user to change the name of the city to get the weather information of that particular city. Also because the dock tile is associated to the widget if the information change is made to a widget attribute which is also rendered on the dock tile the information change will also be reflected on the graphical user interface of the dock tile .

In one embodiment the shape of the widget dock is rectangular. The width height colors and visual effects are configurable by the computer user. In another embodiment the width height colors and visual effects are set to default values. These default values however may be adjusted. In a specific embodiment the widget dock will retain the width height colors and visual effects until changed by the computer user. In yet another embodiment the widget dock takes any shape for example circular or convoluted or size so long as the widget dock is able to contain and display the dock tiles .

In one embodiment the shape of the dock tile is rectangular. In another embodiment the shape of the dock tile is square. In yet another embodiment the shape of the dock tile is circular or convoluted. In yet another embodiment the shape of the dock tile is any shape of any size so long as the dock tile is capable of being displayed and contained within the widget dock .

In one embodiment the widget dock and the dock tile are displayed on the display screen in the color scheme selected by the computer user. In another embodiment a default color scheme may be used. In yet another embodiment the widget dock and the dock tile are displayed in any color or in a combination of colors so long as the graphical rendering of the widget dock and the dock tile is visible on the display screen when programmed to be visible.

In one embodiment a plurality of dock tiles contained in the widget dock are arranged in an alphabetical order by the name of the widgets . In another embodiment the dock tiles are arranged by a selected and enabled preference. In yet another embodiment the dock tiles are arranged by the functional categorization or by the importance of the functionality to the computer user. In yet another embodiment the dock tiles are arranged by a computer user selected scheme so long as the dock tiles are capable of being arranged within the widget dock .

In one embodiment the author of the widget has full control on programming the tile behavior the widget behavior and the metadata . In one embodiment the metadata includes a version number of the widget name of the widget etc. In another embodiment the metadata includes widget identification attributes name of the author name of the authoring firm copyright notices etc.

In one embodiment at the time of loading a dock tile the widget dock requests the widget to provide the tile behavior . The tile behavior includes a subset of the widget attributes. In one example the tile behavior is passed to the widget dock through a dock rendering process. The dock rendering process includes selecting one of more widget attributed from the plurality of the widget attributes of the widget .

In the exemplary widget illustrated in the exemplary widget attributes e.g. the picture of the cloud the temperature and the name of the city are the parts of the tile behavior . The information contained in these attribute is transmitted to the dock tile through widget association through the dock rendering . This information so passed to the dock tile is then displayed by the dock tile docked in the widget dock .

In one embodiment the tile behavior includes selected ones of the plurality of the widget attributes. The widget attributes included in the tile behavior data are used to be displayed on the dock tile . As illustrated in the picture of the cloud the temperature and the name of the city are being displayed both by the widget and the dock tile . In another embodiment the tile behavior includes selected ones of the plurality of the widget attributes and one or more attributes that are not a part of the widget attributes.

The widget behavior refers to the behavior of the widget when the widget is rendered on the display screen . In one embodiment an author of the widget writes the XML code JavaScript code and image data to enable the widget to accomplish one or more author defined tasks. For example the weather widget shows and continuously updates e.g. cycles through current weather conditions including the temperature of a selected city . Thus selected ones of the tile behavior is cycled through so that certain attributes are displayed in the dock tile during some period of time and then it automatically changes to a next attribute for another period of time and so on.

The controls are rendered by the widget engine . The controls provide an interface to control the behavior of the dock tile . The controls are also used to set dock tile widget and widget engine preferences. Display and functional characteristics such as activating inactivating are also controlled by the controls .

The dock tile is identified by its associated widget name. Widget name is rendered by the widget database . The widget database includes the name of the widgets . The widget database provides the name of the widget to the widget dock when a dock tile associated with the widget is added to the widget dock .

The Treatment Visual is a functionality built into the dock tile which controls the visual aspects of the dock tile in different situations such as when a mouse pointer is detected on the dock tile or when the dock tile is active inactive etc. The Treatment Visual functionality is rendered to the dock tile by the widget engine .

The Text Formatting functionality is rendered by the widget . The Text and formatting functionality refers to a capability of the dock tile to display the information contained in the widget attributes selected to be rendered on the dock tile .

The Image functionality controls the graphical image displayed on the dock tile by the widget . The widget defines what image is to be rendered on the dock tile . It may be noted that text formatting and image combined constitute the tile behavior of the dock tile .

The Placement function refers to the location of the dock tile in the widget dock . The Placement of the dock tile is controlled or managed by the widget engine . In one embodiment the dock tiles are arranged alphabetically by the name of the widget .

In another embodiment the arrangement of the dock tiles is configured in the widget engine configuration. The widget engine provides dock tiles in a particular sequence as configured by either the computer user or the author of the engine. In yet another embodiment the sequence of the dock tiles is set to a default scheme by the author of the engine or the computer user.

In another embodiment the alignment of the widget dock placement of the controls on the widget dock text and menu display and the shapes and sizes of the dock tiles are settable by preferences. In yet another embodiment the alignment of the widget dock placement of the controls on the widget dock text and menu display and the shapes and sizes of the dock tiles are set to default values by the widget author. As used therein author means a programmer designer company or combination thereof that define the coding functionality and appearance of the widget .

The show all button is visible when the widget dock is displaying only the active dock tiles . In one embodiment an active dock tile is a dock tile which is not marked as a hidden dock tile . In another embodiment an active dock tile is a dock tile whose associated widget is currently in active state. In yet another embodiment an active dock tile is a dock tile whose associated widget is currently being displayed on the display screen .

When the show all button is clicked in one embodiment the widget dock starts showing all the dock tiles both active and inactive loaded in the widget dock . Then the show all button is replaced by the show active button which when clicked causes the widget dock to display only active dock tiles .

The heads up display button in one embodiment when clicked or selected through a keyboard action makes all the objects e.g. displayed interfaces of running applications shortcut icons etc. except the widgets on the display screen and the widget dock hidden on the display screen . In this embodiment by hiding every visual object on the display screen except the widgets and widget dock the computer user may have a unobstructed view of the placement of various widgets on the display screen .

The search button when click or selected in some other way such as through a keyboard shortcut key in one embodiment launches a search window for searching a text string in the world wide web e.g. internet and in a network of connected computers. In another embodiment the search button is configured to provide other search functionalities such as searching in the local storages for different object types or searching using different types of tools or search engines. In yet another embodiment the computer user configures the search functionality to be invoked when the search button is clicked.

When as a part of the tile behavior the widget does not provide an image for displaying by the widget dock on the dock tile in one embodiment the widget engine tries to locate an appropriate image for this dock tile from a widget catalog which includes the metadata of the widgets . The widget metadata may include name of the widget name or other type of identification of the author screenshots of the widgets user ratings user comments widget images widgets download links etc. In one embodiment a cryptographic hash function such as message digest algorithm 5 MD5 is used to match the widget metadata in the catalog for the purpose of retrieving the dock tile appropriate image. In another embodiment a cryptographic hash function may be used for finding and retrieving of widget metadata such as the rating of the widget by other users of the widget user comments etc. If no appropriate image is found a default image is displayed by the dock tile . In another embodiment the computer user selects an appropriate image for the dock tile . In yet another embodiment a default tile behavior is set into the widget dock and used to display the dock tile when the widget does not provide the tile behavior .

As illustrated by in one embodiment an inactive dock tile shows a sign in one of the corner which when clicked activates the dock tile . Similarly the active dock tile shows an sign in one of the corner which when clicked makes the dock tile inactive. In another embodiment different icons are used instead of and . In one embodiment these buttons are only visible when the mouse pointer is brought over or near the dock tile . In another embodiment the computer user through user preferences controls the visibility location and what task to initiate when a particular button is clicked or selected.

A horizontal align selection is used to select a horizontal alignment of the widget dock . In one embodiment the horizontal alignment is set to one of these values right left center . In another embodiment the horizontal alignment is set to any position between the left perimeter edge and the right perimeter edge of the display screen . In yet another embodiment the widget dock is set to float freely and the computer user can move the widget dock to any position on the display screen .

A vertical align selection is used to select a vertical alignment of the widget dock . In one embodiment the vertical alignment is set to one of these values center top bottom . In another embodiment the vertical alignment is set to any position between the top perimeter edge and bottom perimeter edge of the display screen . In yet another embodiment the widget dock is set to float freely and the computer user can move the widget dock to any position on the display screen . In yet another embodiment the widget dock is displayed in a diagonal alignment. In the diagonal alignment the widget dock is displayed in any position between horizontal alignment and vertical alignment.

In one embodiment the auto hide check box is used to control the display characteristics of the widget dock . When the auto hide check box is checked the widget dock is set to hide until the mouse pointer is next to the widget dock .

In one embodiment when the display characteristics of the widget dock are changed from hidden to a visible state the widget dock remains visible for a set period of time when the mouse pointer is moved away from the widget dock . In another embodiment when the display characteristics of the widget dock are changed from hidden to a visible state the widget dock is set to hide without a wait.

In one embodiment a show edge when hidden check box is used to control the visual aspects of the widget dock. When this box is checked a bit of the widget dock remains visible when the full interface of the widget dock is set to hide.

In one embodiment a show widget updates check box is used to instruct the widget dock to check for the updates that may be available for the displayed or non displayed widget in a catalog of widgets . When this check box is checked as illustrated in the dock tile displays a visual indicator which enables the user to install widget updates.

In one embodiment in which the widget dock is of rectangular shape and the size or dimensions of the widget dock is insufficient to show all the dock tiles contained in the widget dock the widget dock shows scroll button . In one embodiment the scroll button can be selected using a mouse pointer . In another embodiment keyboard keys or mouse wheel are used to control the scrolling of the dock tiles in the widget dock .

The dock tiles contained and displayed in the widget dock are grouped into pages where one page contains a number of dock tiles equal to the number of dock tiles which can be displayed by the widget dock in its current size. For example if the widget dock is showing five dock tiles a page would contain five tiles hence in the widget dock contains dock tiles the widget dock would have four pages.

As the size of the page is linked to the size of the widget dock display area increasing or reducing the size of the widget dock display area results in a respective increase or decrease in the size of the page.

In one embodiment the page contains only active dock tiles . In another embodiment the page contains both active and inactive dock tiles . In yet another embodiment the page contains dock tiles which have active associated widgets on the display screen . In yet another embodiment the page contains a mix of active and inactive dock tiles as preferred by the computer user.

In one embodiment the page location indicator is displayed along the widget dock perimeter edges. The location of the page location indicator is set by a user preference. The page location indicator is made visible when the mouse pointer is hovered over the scroll button

In another embodiment the widget dock is horizontally aligned and located in the lower half of the display screen . The location of the page location indicator is alongside of the upper perimeter edge of the widget dock . In yet another embodiment the widget dock is vertically aligned and located in the left half of the display screen . The location of the page location indicator is alongside of the right perimeter edge of the widget dock .

In yet another embodiment the widget dock is vertically aligned and located in the right half of the display screen . The location of the page location indicator is alongside of the left perimeter edge of the widget dock . In one embodiment the center of the location of the page location indicator aligns with the center of the widget dock . In another embodiment the center of the location of the page location indicator does not align with the center of the widget dock .

In one embodiment the page location indicator is permanently displayed alongside the widget dock . In another embodiment the page location indicator is made visible on the display screen only when the number of pages exceeds one. In yet another embodiment the page location indicator display characteristics are set by a user preference.

In one embodiment the scroll button is made visible only when there are more widget tiles than can be displayed by the widget dock . In another embodiment the scroll button is permanently visible on the widget dock . In yet another embodiment the scroll button display characteristics are set by a user preference.

In one embodiment the page location indicator is rectangular in size. In another embodiment the page location indicator could take any size or shape so long as the page location indicator is able to show the location of displayed page with respect to other pages in the widget dock .

In one embodiment the page location indicator will dynamically change to show blocks A equal to number of pages and a partial block to indicate less than a page. In one embodiment each time a scroll button is clicked the widget dock scrolls one full page B in the direction of the scroll. In another embodiment keyboard keys or scroll mouse wheel are used for scrolling.

In one embodiment if there is a less than one full page remainder the last scroll will be a partial scroll to bring the remaining dock tiles into view C. Subsequently scrolling to the other direction will reset to the closest full page boundary.

In one embodiment the paging does not wrap D E. Preserving the relative positions of the dock tiles for each page provides more consistency and makes it easier to locate a particular dock tile . In another embodiment the paging wraps when there is a less than one full page remainder.

In one embodiment the preferences button the hide tile button the download update button and the show tile button are only visible when the mouse pointer is brought over the dock tile .

In another embodiment display properties of the preferences button the hide tile button the download update button and the show tile button are set by a user preference.

In one embodiment the hide tile button is used to hide the dock tile without unloading associated widget . The space occupied by this hidden dock tile in the dock tile display area remains intact but the dock tile does not show the widget attributes. In another embodiment the hide tile button is used to hide the widget on the display screen . When the widget is so hidden in one embodiment its associated dock tile continues to show the widget attributes. In another embodiment when the mouse pointer is brought over the associated dock tile the dock tile shows the widget attributes for the duration the mouse pointer is over or near the dock tile .

In one embodiment the show tile button is used to change the state of the dock tile from hidden to visible. In another embodiment the show tile button is used to change the state of the dock tile from inactive to active. In yet another embodiment a functionality to uninstall the widget from the computer i.e. remove the widget from the widget store may be provided through a button or a menu control on the dock tile . Moreover a button or a menu control may also be provided to show the location of the widget store in user s computer.

The widget engine monitors the provider of the widget for an updated widget . In one embodiment the download update button is shown on the dock tile if an updated associated widget is available at the widget provider location. In another embodiment the widget engine downloads an updated widget from the widget provider location and shows the download update button . In one example the version of the widget is checked against the latest available widget at the widget provider location or at widget catalog using a scheme of unique identifiers coded into the widget . When the download update button is clicked or selected through any other user action the widget is closed the updated widget is downloaded and launched. The dock tile corresponding to the updated widget is displayed in the widget dock .

In one embodiment the widget dock and associated functionality is implemented through various programming modules containing programming instructions to accomplish one or more tasks. The major programming modules in one embodiment of the invention are as follows.

A computer implementation for displaying the widget dock is accomplished by programming a widget dock displaying module. The widget dock displaying module when executed reads widget dock configuration files and displays the widget dock on the display screen according to the configuration. The widget dock displaying module also enable displaying of the dock tiles in the widget dock display area and associating the dock tiles to their respective widgets . The widget dock displaying module also enables the widget dock to display dock tiles within the widget dock display area

The widget dock displaying module is in communication with a dock tile display module. The dock tile display module is programmed to display the dock tiles in the widget dock display area . The dock tile display module also receives the tile behavior data of the widget from the widget engine . The dock tile display module displays the widget attributes included in the tile behavior on the dock tile .

The dock tile display module is in communication with a dock tile linking module. The dock tile linking module is programmed to functionally associate a dock tile to a widget .

The dock tile display module is coupled to a widget launching module. The widget launching module is programmed to provided a full interface of the widget when selection of the dock tile is detected.

The widget dock display module is coupled to a widget dock interfacing module. The widget dock interfacing module is programmed to interface functionally a widget dock with the widget engine . The widget engine is defined to execute programming instructions that enable rendering of the widget and the dock tile .

The widget dock display module is also coupled to a dock bar display module. The dock bar display module is programmed to display a dock bar alongside the widget dock . The dock bar displays widget name identification of a particular one of the dock tiles when user interactivity with the particular one of the dock tiles is detected.

The widget dock display module is coupled to a widget dock positioning module the widget dock positioning module is programmed to display the widget dock at a user author or system defined location on the display screen .

The widget dock display module is also coupled to a plurality of programming modules are provided for configuration customization and resizing of the widget dock . Furthermore the widget dock display module is in communication with a plurality of programming modules for displaying of menus and buttons. The widget dock display module enables the widget dock to perform a desired task when a particular button or a menu item is selected by the computer user.

In one embodiment a seamless interaction between the widget dock and with the network including internet is provided. The widget dock is closely integrated with the widget catalog or gallery database which includes robust metadata of the thousands of widgets submitted to the widget catalog or gallery by the authors or distributors of the widgets . The metadata includes the name the name of the author screenshots brief description detailed description user ratings user comments etc. of the widget . The widget dock tracks and detects an update in the metadata in the widget catalog or gallery with the help of a cryptographic hash function such as message digest algorithm 5 MD5 . When a change in the metadata for the widget or a new version of widget is detected in the widget catalog or gallery the widget is dynamically synchronized with the updated information downloaded from the widget catalog or gallery. A unique identifier is coded in the widgets to keep records of updates across versions. The close integration of the widget dock with the internet and other network resources allows dynamical synchronization of the values of widget attributes when the values being rendered by these widget attributes change and the change is reflected in one or more network resources connected or integrated with the widget dock .

In one embodiment the programming instructions to implement the widget dock functionality are implemented in JAVA programming language JavaScript programming language and XML. In another embodiment C C C Visual Basic JavaScript PHP XML HTML etc. are used to implement the widget dock . Commonly available application programming interface API such as HTTP API XML API and parsers etc. are used in the implementation of the programming modules. In yet another embodiment a computer programming language suitable for suitable for desktop software development is used.

In one embodiment the widget dock and related functionality is implemented on Microsoft Windows operating system. In another embodiment the widget dock and related functionality is implemented on Apple Mac operating system. In yet another embodiment the widget dock and related functionality is implemented on Linux operating system. In yet another embodiment the widget dock and related functionality is implemented on a desktop operating system which provides support for a graphical display screen.

The programming modules and ancillary software components including configuration files setup files required for installing the widget dock are stored on a computer readable medium. Any computer medium such as a flash drive a CD ROM disk an optical disk a floppy disk a hard drive a shared drive and storage suitable for providing downloads from connected computers could be used for storing the programming modules.

The invention may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributing computing environments where tasks are performed by remote processing devices that are linked through a network.

With the above embodiments in mind it should be understood that the invention may employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. Further the manipulations performed are often referred to in terms such as producing identifying determining or comparing.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes such as the carrier network discussed above or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs DVDs Flash magnetic tapes and other optical and non optical data storage devices.

While this invention has been described in terms of several preferable embodiments it will be appreciated that those skilled in the art upon reading the specifications and studying the drawings will realize various alternation additions permutations and equivalents thereof. It is therefore intended that the present invention includes all such alterations additions permutations and equivalents as fall within the true spirit and scope of the invention.

