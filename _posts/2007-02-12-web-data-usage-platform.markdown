---

title: Web data usage platform
abstract: An application programming interface (API) layer is implemented on a computing device. The API layer allows a local application(s) executing on the computing device to access web data in a data store layer, and further allows a remote application(s) that is executing on some other computing device to access the web data in the data store layer. Additionally, this web data can include web pages, some of which may include structured data and some of which may not include structured data. A web browser is permitted to access the web data store via the object model, and generate a user interface based at least in part on these web pages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917507&OS=07917507&RS=07917507
owner: Microsoft Corporation
number: 07917507
owner_city: Redmond
owner_country: US
publication_date: 20070212
---
The Internet and the world wide web the web are becoming an integral part of our daily lives being used for work entertainment research and so on. Currently users can access various web pages using a web browser and obtain data from those web pages such as by manually copying text from those web pages or sometimes saving images from those web pages or even saving entire web pages. However there is currently no easy way for other applications to access the data obtained from such web pages. Accordingly it would be beneficial to have an easy way for data from web pages to be accessed so that it can be used by different applications.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects of the web data usage platform an object model that includes objects representing web data in a data store layer is generated on a computing device. Requests from applications that are executing on the computing device are also received. These received requests are requests to perform an action on the web data and the requested action is performed.

In accordance with one or more aspects of the web data usage platform an application programming interface API layer is implemented on a computing device. The API layer allows a local application s executing on the computing device to access web data in a data store layer. The API layer further allows a remote application s that is executing on some other computing device to access the web data in the data store layer.

In accordance with one or more aspects of the web data usage platform web pages are stored in a web data store. Some of these web pages include structured data while others do not include structured data. An object model is generated having different objects that represent these web pages. A web browser is permitted to access the web data store via the object model and generate a user interface based at least in part on these web pages.

A web data usage platform is discussed herein. The platform includes an engine layer a data store layer and an application programming interface API layer. The engine layer obtains web data and provides it to the data store layer for storage. Changes to web data can also be detected by the engine layer and identified to the data store layer. The data store layer stores the web data and further stores indicators of collections that the web data is part of. The API layer provides an interface allowing applications executing on the same computing device as the platform as well as applications executing on other computing devices to access and use the web data from the data store layer.

Computing device can be any of a variety of different computing devices such as a desktop computer handheld computer laptop computer server computer automotive computer cell phone personal digital assistant PDA game console and so forth. Computing device includes a web data platform that stores web data and allows applications to access the stored web data. The stored web data includes for example web pages indications of collections of web pages and so forth as discussed in more detail below. The stored web data can be obtained by platform from one or more of remote devices . . . . Additionally the applications that can access the stored web data include applications that are executing on one or more of remote devices . . . as well as applications that are executing on computing device .

Remote devices . . . are typically server computers but can alternatively be any of a variety of different computing devices analogous to computing device . Remote devices . . . can store web data that can be retrieved and stored by web data platform . Additionally remote devices . . . can execute applications that access and make use of web data that is stored by web data platform . Some remote devices . . . may store web data for retrieval by web data platform while others may execute applications to access web data stored by web data platform . Alternatively the same remote device can store web data for retrieval by web data platform as well as execute an application s to access web data stored by web data platform .

One or more remote devices . . . store web pages . The data in the web pages is obtained by web data platform and stored as web data. One or more web pages can each include one or more pieces of structured data. Structured data is data that is in a format that is known by and expected by a consumer of the data which is typically a web browser or a behavior a description of a way that structured data is to be used as discussed in more detail below . Structured data can be formatted in accordance with known structured data standards such as the Extensible Markup Language XML or HyperText Markup Language HTML formats. Alternatively structured data can be formatted in accordance with other public and or proprietary standards. Whatever format is used for structured data this format is known by web data platform so that the structured data can be used by platform as discussed in more detail below. The amount and kind of data that constitutes a piece of structured data can vary and is defined as part of a data type.

Different pieces of structured data can be of different data types also referred to as structured data types. A variety of different data types can be used such as a contact type an event type a calendar type a product type a picture type a music type a trip type a web page type a geographic location type and so forth. A data type can be defined to include any kind of data in different properties or fields such as a date a time mapping coordinates a name a phone number an address a product description a destination name a price and so forth. Additionally in certain embodiments an entire web page can be treated as a type of structured data.

The structured data type of a particular piece of structured data can be identified in different manners. In certain embodiments the structured data itself indicates the data type. For example different HTML tags can be used to identify different structured data types or a property or parameter of the structured data itself may identify the structured data type. Alternately or additionally the structured data can be identified in different manners such as by using header information in the page or other meta data in page or associated with page .

Returning to if the web page description does have structured data then an indicator of structured data is presented to the user along with the page. This indicator is typically a visual indicator such as an icon although the indicator may alternatively take different forms e.g. the indicator may be an audible indicator . Ip certain embodiments an icon or other visual indicator is displayed next to or near the display of the structured data from the page. For example if the structured data is an event then the icon would be displayed near the display of the date and time for that event. In certain embodiments the indicator is presented to the user whenever a page with structured data is displayed to the user. In other embodiments the indicator is presented to the user whenever the user hovers a pointer near a location on the page as defined by the page description such as within the structured data itself for at least a threshold amount of time using a cursor control device.

In one or more embodiments the browser can present the indicator in different manners and need not alter the page description itself e.g. the HTML code describing the page in order to present the indicator. For example in the situation where an icon is displayed to the user as the indicator of structured data the browser can present the icon as an overlay on the page. As such the HTML code of the page does not need to be modified in order to display this icon. The location of the icon can vary in different embodiments. For example the browser may analyze the page to identify a blank space e.g. a space where there is little or no text links graphics or images in which the icon will be place. The browser may attempt to position the icon close to the display of data corresponding to the structured data e.g. if the structured data describes an event then the browser may attempt to position the icon close to the display of a description of the event . By way of another example the icon may always be displayed in a particular portion of the display e.g. the top right corner of the window in which the page is being displayed . By way of yet another example the location for the icon may be identified by the structured data itself e.g. the structured data may include an indication of where the icon should be placed and so forth.

In addition to presenting the indicator of the structured data to the user in one or more embodiments a preview of the content of the structured data can also optionally be displayed to the user. This preview can be for example in a separate callout or window overlaying the display of the page and can display at least some of the content of the structured data. The amount of content displayed in this preview can vary and can be determined by the designer of the page e.g. the content to be displayed as the preview can be specified in the structured data itself or alternatively by the browser e.g. based on the size of the window in which the browser is displayed the size of the callout the amount of content and so forth . Alternatively this preview may not be displayed at all or may not be displayed until after a user selection of the indicator is made.

If a web page has structured data the structured data itself can be but need not be displayed to the user as part of the web page. For example if the structured data includes various properties e.g. the date time and geographic location for an event such as a speech then the web page may display these properties in various parts of the web page using HTML code that is separate from the structured data. In such situations the structured data is included in the HTML of the web page but is not displayed to the user. Alternatively the structured data can be displayed to the user as part of the web page or a preview of the structured data can be displayed as discussed above.

Additionally in one or more embodiments options are presented to the user to collect and or subscribe to structured data. Collecting structured data refers to maintaining a copy of the structured data so that it is accessible to the user of the computing device even when computing device is offline e.g. is not connected to network or when the remote device from which the web page was retrieved is temporarily unavailable . In one or more embodiments only the structured data is stored in response to selection of the collect option although in alternate embodiments the entire web page may be stored.

Subscribing to structured data refers to requesting updates to the structured data. When the user is subscribed to changes to the structured data web data platform accesses at regular or irregular intervals a web page to get an updated version of the web page or alternatively just the structured data from that web page . This updated version is typically received from the same web page as the structured data was originally retrieved from but alternatively may be another web page as discussed in more detail below. The web data platform can also compare the updated version of the web page to a previously stored version of the web page and notify the user of any changes to the web page and or to the structured data in the web page.

The collect and or subscribe options can be presented to the user and selected by the user in any of a variety of manners. For example the user may select an on screen button select an option from a pull down menu input text in a data entry field input a voice command via a microphone and so forth. In one or more embodiments the collect and or subscribe options can be selected by the user selecting an on screen button s in a preview window along with the structured data.

Additionally behaviors can be employed to make use of structured data. A behavior is a description of a way that structured data is to be used typically to provide a service to the user of computing device . A behavior typically resides in the form of software instructions and data or code that is executed by computing device although a behavior may alternatively be implemented in different manners such as in firmware and or hardware . Each behavior is associated with one or more structured data types. A behavior that is associated with a particular structured data type knows how to use that data type. For example a particular piece of structured data may be an event data type and the particular piece may include a date time and description of an event e.g. a concert a movie a meeting etc. . A calendaring behavior associated with the event data type knows how to extract the particular date time and description from the event and interact with a calendaring program to add an event to the user s calendar having that particular description for that particular date and time.

In one or more embodiments individual behaviors are programmed or otherwise configured to know how to interact with one or more local applications and or one or more remote applications. For example one behavior may know how to interact with the Microsoft Outlook messaging and collaboration client another may know how to interact with the Google Calendar another may know how to interact with another proprietary calendar program another may know how to interact with an electronic photo album program and so forth.

In one or more embodiments behaviors can be installed on computing device . Typically a user of device can navigate using a web browser to a particular web page that allows a behavior to be installed. Such a web page includes instructions and data that can be downloaded and executed as the behavior or alternatively includes a link to such instructions and data. Installing the behavior on computing device refers to downloading the instructions and data for the behavior to computing device and configuring computing device as necessary so that computing device can execute the instructions and data. The web page that allows the behavior to be installed can but need not include structured data.

In addition to navigating to web pages as a way to install behaviors behaviors can be installed on computing device in other manners. That is behaviors can be installed on computing device using any of a variety of different techniques that can commonly be used to transfer instructions and data to a computing device. For example a file containing the instructions and data for one or more behaviors can be transferred to computing device via a removable storage device such as an optical disk magnetic disk flash memory device and so forth via network via a wired or wireless connection to another computing device and so forth. By way of another example one or more behaviors may be pre installed on computing device so that the behavior is immediately available to the user when he or she first uses computing device . Alternately or additionally one or more behaviors may be installed on computing device when an application is installed on computing device and so forth.

Web data platform uses web data. Generally web data typically refers to data that is available on the web. Web data can include for example web pages specific parts of web pages indications of collections of web pages comments and so forth. In one or more embodiments the format of the web data is the HTML format although other markup language formats or other formats could alternatively be used. Platform can optionally alter the format of the web data for storage after the web data is obtained by platform .

Web data platform includes an engine layer a data store layer and an API layer . Platform may also include a behavior store layer . Generally engine layer obtains web data and provides the data to data store layer for storage. Changes to previously obtained web data can also be detected by engine layer and identified to data store layer . Data store layer stores the web data and further stores indicators of collections that the web data is part of. Data store layer can also store comments on the web data or collections. API layer provides an interface allowing local applications executing on the same computing device as the platform as well as remote applications executing on other computing devices to access and use the web data from data store layer .

During operation web data is added to data store layer . Web data can be obtained from a variety of different sources. Typically at least some web data is initially retrieved by a web browser. The web browser can be a local application that interfaces with data store layer via API layer . Alternatively the web browser may transfer the web data to data store layer via engine layer . Using the web browser the user can browse or otherwise navigate to a particular web page resulting in the web browser displaying that web page to the user. The user can then request to have that web page added to his or her data store. In response to this request the web page becomes the web data added to data store layer . The request to have the web page added to the user s data store can take a variety of different forms such as a request to have the web page added to the user s list of favorite web pages or bookmarked web pages a request to collect a web page and or subscribe to structured data on the web page a request to store a copy of the web page for offline use and so forth. Alternatively when the user navigates to a particular web page using the web browser that web page may be automatically added to data store layer .

Additionally at least some web data is typically obtained during the process of retrieving updated web pages that have been subscribed to. Such web data is retrieved by engine layer and provided to data store layer . Alternatively web data can be retrieved in other manners such as receiving a file containing the web data transferred to computing device via a removable storage device such as an optical disk magnetic disk flash memory device and so forth via network of via a wired or wireless connection to another computing device and so forth. By way of another example web data may be included in data store as part of an installation or creation process of computing device so that the web data is immediately available to the user when he or she first uses computing device . By way of yet another example web data may be included in data store layer when an application is installed on computing device and so forth. By way of still another example an application may create web data such as structured data and saving that web data to data store layer . Such web data can be created in various manners such as converting a file generating the data from scratch and so forth.

Data store layer stores the web data. Data store layer includes one or more items one or more comments and one or more collections . Data store layer stores web data and optionally associated data as discussed in more detail below. The data storage can be implemented in various locations such as on a local storage device e.g. part of the same computing device as implements platform on a remote storage device e.g. part of another computing device remote from the device implementing platform on a removable storage device e.g. a flash memory device a disk etc. and so forth.

Each item represents a link to a web page and thus corresponds to or is associated with a web page. An item can include the data for the web page e.g. the page s HTML code or alternatively a link to where some or all of the data for the web page is located in data store layer . Some web pages can include structured data while other web pages may not include structured data. For web pages that include structured data the corresponding item can optionally identify the structured data to allow the structured data to be easily retrieved. In addition to the data for the web page various meta data describing the link is also included in item . Table I describes example meta data that is maintained in each item in one or more embodiments.

Each comment is associated with an item and can be obtained from the same source from which the web page represented by item is obtained. Each comment can be a single comment or alternatively a collection of comments associated with the item . Each comment includes various information describing the web page represented by item but is typically not displayed as part of the web page.

Each collection identifies one or more items that are grouped together. The grouping is typically performed by a web browser although it may alternatively be performed by another application . In one or more embodiments the grouping is assigned automatically according to the data types of structured data within the linked to web pages. In such embodiments all web pages having structured data of the same data type are grouped together in the same collection. Additionally or alternatively the grouping can be assigned by a user. In such embodiments the user is able to identify names or other identifiers for collections and assign particular items to particular collections according to his or her desires. This assignment can be performed when the web pages are obtained and or at other times e.g. via the web browser or another application .

Additionally one or more applications and or can register with data store layer to be notified of changes to data store layer . Data store layer notifies such applications and or of changes to an item comment and or collection . In one or more embodiments applications and or can register with data store layer to receive notifications of changes to items . Data store layer maintains a record of which applications and or are registered to receive notifications and notifies each of those applications and or whenever there is a change to an item . Registered applications are typically notified of any change to item including changes to any of the meta data of the item any additions of items any deletions of items and any new comments that are added to the item. Alternatively an application may register to receive notification of only changes to particular parts of item e.g. only a change to the structured data or a flag and so forth or changes to a particular item . Additionally or alternatively an application may also register for one or more of changes to a collection changes to a comment changes for items having structured data of a particular data type s and so forth.

In addition in one or more embodiments an event notification component of an operating system on which platform executes is leveraged to assist with the registration and notification. In such embodiments applications and or can register with an event notification component of the operating system causing the event notification component to notify the applications and or whenever an event for which they have registered is received by the event notification component. Applications and or register for item change events and data store layer notifies the event notification component of any item changes. The event notification component of the operating system in turn fires events to or otherwise communicates a notification to the registered applications and or to notify them of item changes.

Platform also optionally includes a behavior store layer in which one or more behaviors are stored. Each behavior is a description of a way that structured data is to be used typically to provide a service to the user of the computing device implementing platform as discussed above. When a behavior is installed on a computing device implementing platform a record of which structured data types the behavior is associated with is maintained. This record can be maintained in behavior store layer in data store layer or alternatively in some separate store layer not shown .

Engine layer obtains web data and provides the data to data store layer for storage. Changes to previously obtained web data can also be detected by engine layer and the changed web data stored in data store layer . Additionally engine layer can notify data store layer and or other components of platform of the changes. This process of identifying changes to a web page and storing the changed version of a web page is also referred to as updating the web page.

Engine layer includes a download engine a sanitizer module and a merge processing module . Download engine obtains updated versions of web pages identified by items . Download engine typically downloads the identified web page although alternatively if only a part of the web page is to be updated e.g. only structured data on the web page then only that part of the web page need be retrieved. Download engine may obtain updated versions for all web pages represented by items or alternatively obtain updated versions for only those web pages for which updates have been requested by the user e.g. by subscribing to structured data on the web page or otherwise requesting updates . An indication of whether updates have been requested for a particular web page can be maintained in the meta data of the corresponding item e.g. as one of the flags discussed above with reference to Table I . For each item for which download engine is to obtain updated versions of the represented web page the item identifies the location from which updates to the web page should be retrieved e.g. as the Source URL discussed above .

Generally a new version of the web page is received by download engine as web data and sanitized by sanitizer module to remove any potentially malicious content. Merge processing module then compares the sanitized web page to a version previously stored in data store layer to determine whether any differences exist between the newly received version of the web page and the previously stored version of the web page. If there are any changes to the web page then merge processing module stores the newly received web page in data store layer and notifies data store layer and or API layer that the web page has changed. In one or more embodiments merge processing module notifies layer and or layer of any changes to the web page while in other embodiments merge processing module notifies layer and or layer only of changes to structured data on the web page. In still other embodiments merge processing module notifies layer and or layer of any changes to the web page and further notifies layer and or layer whether any of the changes are to structured data.

How frequently an item is to be updated can vary. In certain embodiments the item itself includes a property identifying how frequently it is to be updated e.g. one of the flags discussed above with reference to Table I . In other embodiments other mechanisms are used to determine the frequency such as a user may input how frequently he or she would like the updating to occur particular frequencies may be associated with different structured data types and so forth. The updating may be performed at regular intervals e.g. once per day once per hour once every five minutes and so forth or at irregular intervals e.g. once per day in the days leading up to a particular time and date identified in the item once per hour on the same date as identified in the item and once every five minutes on the same date as identified in the item and in the hour immediately preceding a time as identified in the item .

Sanitizer module takes the web page retrieved by download engine and identifies any potentially malicious content on the web page. Sanitizer module removes any such identified content resulting in a sanitized web page that is made available to merge processing module . Sanitizer module can operate in any of a variety of conventional manners to detect potentially malicious content such as checking for particular tags using particular algorithms searching for particular patterns and so forth.

Merge processing module compares the sanitized web page to the web page previously stored in data store layer . Based on this comparison a check is made as to whether there are any changes to the web page. A change to the web page could be the addition of some data or other content or code to the web page a deletion of some data or other content or code from the web page and or a modification of data or other content or code in the web page. Alternatively merge processing module may only compare a portion of the sanitized web page e.g. structured data in the sanitized web page to a portion of the web page previously stored in data store layer e.g. structured data in the web page .

If there are no changes to the web page then merge processing module need take no further action for this item at this time. Alternatively merge processing module may update the meta data of the item to reflect that an update was performed but that no changes to the web page were detected.

However if there have been changes to the web page then the previously stored web page in data store layer is replaced by the newly received web page. This replacement of the old version of the web page with the new version of the web page may be performed by merge processing module or alternatively may be performed by a control component of data store layer . When an item has changed data store layer is notified of the change by engine layer . In one or more embodiments data store layer provides an interface that is accessible to engine layer and allows engine layer to store web pages in data store layer and also allows engine layer to notify data store layer of any changes to a web page.

Changes to a web page are typically identified by engine layer as discussed above. Additionally changes to a comment are typically identified in an analogous manner as the comments are obtained by download engine along with the web page. Changes to a collection or behavior however are typically made by an application . Such changes are detected by data store layer when the change is made and registered applications are notified of such changes analogous to notification of the changes to a web page as discussed above. For example assume an application changes a collection by invoking a method of an object corresponding to the collection the object model is discussed in more detail below . Part of the processing of this invoked method is to notify data store layer of the change to the collection typically identifying the particular collection and the change that was made.

API layer provides an interface allowing local applications executing on the same computing device as the platform as well as remote applications executing on other computing devices to access and use the web data from data store layer . API layer includes an object model and a synchronization protocol module . Local applications include a web browser application as well as any extensions that are added to the web browser application. Extensions can be added to a web browser application by another application or or by a web page to extend the functionality of the web browser. Additionally local applications can be any of a variety of types of applications such as word processing applications spreadsheet applications games databases and so forth. Similarly remote applications can be any of a variety of types of applications such as word processing applications mapping or direction applications games and so forth.

Object model is an object model based on the data in data store layer . Object model includes different objects representing items comments and collections of data store layer . These objects include various properties that correspond to the data stored as items comments and collections . For example an object representing an item can include a property that has the data for the web page e.g. the page s HTML code as well as additional properties for each type of meta data described above with reference to Table I.

Additionally in embodiments where the web page includes structured data the structured data itself can be different properties of an item object. For example assume a web page includes a contact structured data type having a name and a phone number as structured data. This web page is stored as an item and a corresponding object in object model includes properties that are the contact name and contact phone number.

In addition to properties each object in object model can include different methods that allow an application to interact with the object. Examples of such methods include a create method a read method an edit method a delete method and an enumerate method. A create method allows objects to be created and populated with data by an application and corresponding data stored in data store layer . A read method allows properties of the object to be retrieved by an application . An edit method allows properties of the object to be changed by an application and such changes stored in data store layer . A delete method allows the object to be deleted and the corresponding data deleted from data store layer . An enumerate method allows the methods and or properties of the object to be identified to an application .

Additionally a behavior object model in API layer also includes different objects representing behaviors and allows applications to interact with the objects. This object model can be included as part of object model or alternatively another object model in layer . The objects representing behaviors includes various properties that correspond to the behaviors . For example an object representing a particular behavior can include a property that has an identifier of where the code to be executed to carry out the behavior is stored or alternatively the code could be included as part of the object . The object can also include meta data regarding the behavior such as an identifier of the source of the behavior an identifier of the services offered by the behavior an identifier of the structured data types associated with the behavior and so forth.

Each object in the behavior object model also includes different methods that allow an application to interact with the object. Examples of such methods include an invoke method an enumerate behaviors by type method a read method an add method and a delete method. An invoke method allows an application to invoke the behavior represented by the object. The code for the behavior represented by the object is executed when the behavior represented by the object is invoked. A read method allows properties of the object to be retrieved by an application . An add method allows a behavior to be added to behavior store and an object representing that behavior added to the behavior object model. A delete method allows a behavior to be deleted from behavior store and the object representing that behavior deleted from the behavior object model.

An enumerate behaviors by type method allows the different behaviors associated with a particular structured data type to be identified to an application . This enumeration can be accomplished in different manners such as by having an additional object in the behavior object model that maintains this information a method of this additional object can be invoked directly by the application or alternatively can be invoked by the method of another object that was invoked by application by accessing a record of such associations stored in behavior store layer e.g. which is updated each time a behavior is added or an association is changed by having the objects in the behavior object model query each other for the structured data types they are associated with and so forth. An enumerate behaviors method allows the different behaviors that are in behavior store layer to be identified to an application . This enumeration can be accomplished in different manners such as by having an additional object in the behavior object model that maintains this information a method of this additional object can be invoked directly by the application or alternatively can be invoked by the method of another object that was invoked by application by accessing a record of the behaviors stored in behavior store layer e.g. which is updated each time a behavior is added or deleted by having the objects in the behavior object model query each other for the behaviors they represent and so forth.

Synchronization protocol module allows remote applications to maintain data that is synchronized with the data in data store layer . In one or more embodiments each remote application that desires to receive notifications of events sends an indication of this desire to module . Additionally a remote application can register for notifications to changes to data store layer or alternatively module can register for notifications on behalf of an application . Regardless of which of application or module registered for notifications synchronization protocol module receives the notifications. Module maintains a record of the notifications until the next time it is in communication with the remote application at which point module sends all of the notifications it has received and maintained to remote application . Module may also send the corresponding changed data from data store layer to remote application or alternatively wait for remote application to request the data.

Communication between a remote application and synchronization module can be initiated by the application and or the module . In one or more embodiments an application initiates the communication by sending e.g. over network of a request to module for notifications that module has received on its behalf. In other embodiments application provides an indication to module of how to communicate notifications to the application and module maintains this indication. This indication can be for example a URL that is to be accessed when a notification for the application is received. Notifications received by module on behalf of the application are communicated to the application in whatever manner and with whatever frequency is defined by the indication given to module .

Communication of the changes to the data store layer to remote application allows remote application to keep its own copy of the web data in data store layer and further allows remote application to keep its copy of the web data synchronized with that in web data store layer . It should be noted that when a remote application initially desires to obtain notifications of changes to the web data all of the web data in data store layer may be viewed as changed because the remote application has not yet received any of the data. In such situations the current web data in data store layer is typically communicated to the remote application .

In addition in one or more embodiments web pages are able to gain access to data store layer via a web browser application . In these embodiments object model allows a web browser application displaying a web page to access object model . In this manner web pages are able to access and make use of the data in data store layer and the behaviors in behavior store layer without installing an application as an application .

Additionally API layer can control access to APIs and or different web data in data store layer and or behavior store layer . By controlling such access different web pages and or web sites can be restricted to different functionality and or web data. By way of example APIs may be separated into different functionality such as read functionality and write functionality. Different web pages and or web sites can be permitted to access the write functionality while others are permitted to access only the read functionality. By way of another example particular web pages and or web sites may be restricted to accessing only a particular one or more items a particular one or more collections and so forth. The particular access permitted to particular web pages and or web sites can be identified by the user of the computing device implementing platform thereby allowing the user to control access to his or her web data.

Furthermore in one or more embodiments API layer includes a web data picker control module that displays a user interface control that allows a user to select particular web data. The user interface control displays identifiers of at least some of the various web data in data store layer and allows the user of a local application to select particular web data for an action to be performed on. For example if a local application is displaying information about collections the application can display to the user a control listing identifiers of the collections from data store layer . This allows the user to easily select which collection s he or she desires to have displayed. By way of another example if a local application is displaying information about a particular structured data type e.g. calendar events locations etc. the application can display to the user a control listing identifiers of the different structured data of that type from data store layer . This allows the user to easily select which piece s of structured data he or she desires to have displayed. The user interface control is displayed when a request to act on web data is received by the application. The user can request to act on web data in any of a variety of manners such as selection of an on screen button selection of an item from a pull down menu request for execution of an application and so forth.

The user can select a particular collection from control in a variety of different manners. In one or more embodiments the user navigates a pointer or cursor over the identifier in control and clicks a button on a cursor control device e.g. a mouse to select the identifier. The identified collection is then acted upon by the application in whatever manner the application is performed to operate.

Initially web data is obtained act . The web data refers to for example web pages indications of collections of web pages behaviors comments and so forth. The web data can be obtained in a variety of different manners. For example web data can be obtained by the user navigating to a web page using a web browser receipt of a file over the Internet or other network receipt of a file from a removable storage device and so forth. Additionally some web data such as comments and indications of collections can be obtained by receiving text characters selections of icons or other e.g. audible input from a user of the device implementing process .

The obtained web data is stored in a web data store act . This web data store is for example the data store layer of . In one or more embodiments any web data that is obtained in act is stored in act . In other embodiments a request from the user to store the web data is received and only the requested data is stored.

An object model representing the web data in the web data store is generated act . This object model generated in act includes multiple objects each representing a piece of web data from the web data store e.g. each representing an item a collection or a comment . In one or more embodiments the object model generated in act is object model of . In one or more embodiments an object model representing the behaviors from the behavior store is also generated in act .

Having the object model a request can be received from an application to perform an action on the web data act . In one or more embodiments this request is a request from a local application executing on the same computing device as is implementing process . Remote applications as discussed above can be notified of changes to the web data and can maintain their own copy of the web data allowing such remote applications to access their own copy of the web data to perform an action on the data.

The action to be performed on the web data can be any of a variety of actions and typically are the actions that are exposed as methods by the objects in the object model. This includes for example methods exposed by objects representing collections items comments and behaviors. The request is received by the application invoking the appropriate method of the object in the object model.

The requested action is performed act and process returns to act . If the action resulted in any change to the object model then the change essentially results in a newly generated object model that incorporates the change. It is to be appreciated however that the portions of the object model that were not changed need not be re generated.

In addition to receiving requests from applications updates to web data can also be received act . These updates are changes to the web data resulting from comparing the previously stored web data to new versions of the web data. Typically these updates are received from engine layer of . The received updated data is stored in web data store and a new object model is generated representing this changed data act . It is to be appreciated that the portions of the object model that were not changed are not re generated in act . Notifications of this changed data can also be communicated to one or more applications as discussed herein.

Process is performed for each web page each time it is to be checked for updates. How frequently a web page is updated can vary. In certain embodiments the item corresponding to the web page stored in the data store layer includes meta data identifying how frequently the web page is to be updated. In other embodiments other mechanisms are used to determine the frequency such as a user may input how frequently he or she would like the updating to occur particular frequencies may be associated with different web pages or web pages having particular types of structured data and so forth. The checking may be at regular intervals e.g. once per day once per hour once every five minutes and so forth or at irregular intervals that can vary over time.

Initially a new version of a web page to be checked for updates is retrieved act . The location from which the new version is to be retrieved is identified for example in the meta data of the item corresponding to the web page stored in the data store layer.

The new version of the web page is then compared to the previously stored version of the web page in the data store act . Given the comparison a check is made as to whether there are any changes to the web page act . A change to the web page could be the addition of some data to the web page a deletion of some data from the web page and or a modification of data in the web page. Although process is discussed with reference to checking for changes to the web page alternatively changes to only a portion of the web page e.g. structured data on the web page may be checked for and updated in process .

If there are no changes to the structured data then process optionally records the date and time of the update check act in the meta data of the item corresponding to the web page in the data store layer. This date and time can be the date and time the new version of the web page was retrieved in act the date and time the comparison was made in act and so forth. Alternatively act may not be performed. Regardless of whether act is performed the update process for this web page at this time is then complete act . Additionally the data store layer notifies any applications that have registered for notification of changes to the web data of the change to the web page act .

Returning to act if there are changes to the web page then the web page in the data store is replaced with the version of the web page retrieved in act act . The data store layer is also notified of the change to the structured data act . The data store layer can be notified of the change by an explicit change command or indicator or alternatively can be notified of the change implicitly by the web page being updated.

The date and time of the update check are also recorded act in the met data of the item corresponding to the web page in the data store layer. This date and time can be the date and time the new version of the web page was retrieved in act the date and time the comparison was made in act and so forth. The update process for this web page at this time is then complete act .

Computing device includes one or more processors or processing units one or more computer readable media which can include one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Computer readable media and or I O device s can be included as part of or alternatively may be coupled to computing device . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

One or more input output devices allow a user to enter commands and information to computing device and also allows information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

