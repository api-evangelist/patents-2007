---

title: System, method, and computer program product for conditionally preventing use of hardware virtualization
abstract: A system, method, and computer program product are provided for conditionally preventing use of hardware virtualization. In use, an attempt to use hardware virtualization is identified. Further, the use of the hardware virtualization is conditionally prevented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128741&OS=09128741&RS=09128741
owner: 
number: 09128741
owner_city: 
owner_country: 
publication_date: 20071005
---
Traditionally security systems e.g. antivirus antispyware etc. attempt to identify eliminate prevent etc. infection by malware. For example the security systems may identify malware executing on an operating system utilizing signature scanning heuristics behavior patterns. etc. However such security systems have customarily exhibited various limitations such as for example in situations where hardware virtualization is utilized.

For example malware utilizing hardware virtualization has generally been incapable of being identified using current security systems. Such malware may move a currently executing operating system into a virtual machine such that the malware may not be detectable by a security system. Thus moving the operating system into the virtual machine may result in the security system executing inside the virtual machine such that the security system is therefore unable to identify the presence of the malware.

A system method and computer program product are provided for conditionally preventing use of hardware virtualization. In use an attempt to use hardware virtualization is identified. Further the use of the hardware virtualization is conditionally prevented.

Coupled to the networks are servers which are capable of communicating over the networks . Also coupled to the networks and the servers is a plurality of clients . Such servers and or clients may each include a desktop computer lap top computer hand held computer mobile phone personal digital assistant PDA peripheral e.g. printer etc. any component of a computer and or any other type of logic. In order to facilitate communication among the networks at least one gateway is optionally coupled therebetween.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an U O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation may have resident thereon any desired operating system. It will be appreciated that an embodiment may also be implemented on platforms and operating systems other than those mentioned. One embodiment may be written using C and or C language or other programming languages.

Of course the various embodiments set forth herein may be implemented utilizing hardware software or any desired combination thereof. For that matter any type of logic may be utilized which is capable of implementing the various functionality set forth herein.

As shown in operation an attempt to use hardware virtualization is identified. In the context of the present description the attempt may include any action request call etc. to use the hardware virtualization. As an option the attempt may be initiated by an application. For example the application may be a driver an operating system a malware application a spyware application a virtualization application etc. In various embodiments the attempt to use the hardware virtualization may include an attempt to enable the hardware virtualization execute the hardware virtualization etc.

Further the hardware virtualization may allow for any virtualization of hardware. As an option the virtualization of the hardware may also include virtual hardware e.g. memory hard drives network cards etc. . Just by way of example the use of the hardware virtualization may include an abstraction of the hardware by a hardware virtualization layer into a virtual machine. Optionally the hardware may be associated with a hardware virtualization provider.

In one embodiment the hardware virtualization layer may execute directly on the hardware virtualization provider. For example the hardware virtualization provider may be a central processing unit e.g. such as the central processing unit of . In another embodiment the hardware virtualization layer may execute within an operating system.

Furthermore the hardware virtualization layer may include a virtual machine guard that is coupled to the virtual machine and the hardware virtualization provider. In the context of the present embodiment the virtual machine guard may include any module capable of monitoring use of the hardware virtualization. In another embodiment the virtual machine guard may include a virtual machine monitor e.g. a hypervisor . As an option the virtual machine guard e.g. the virtual machine monitor may coordinate and or allocate resources associated with the virtual machine. Accordingly the virtual machine guard may be utilized for monitoring attempts to use the hardware virtualization and thus may be utilized for identifying the attempt to use the hardware virtualization.

In one embodiment the virtual machine guard may include the hardware virtualization layer. For example by using the hardware virtualization of the hardware virtualization provider the virtual machine guard may prevent other applications from using hardware virtualization. Further in another embodiment the virtual machine guard may run within the operating system.

In yet another embodiment the virtual machine guard may register as the hardware virtualization layer with the hardware virtualization provider. For the example the registering may allow the virtual machine guard to receive a request to use die hardware virtualization. Further upon registering the virtual machine guard the virtual machine may be created by the virtual machine guard. As an option the operating system may execute within the virtual machine of the virtual machine guard.

In another embodiment the virtual machine guard may register with the hardware virtualization provider prior to loading the operating system. For example the hardware virtualization may be registered as part of a basic input output system BIOS an operating system loader a master boot record and or any other application used for loading the operating system. In yet another embodiment once the virtual machine guard is registered and the virtual machine is created the operating system may be loaded into the virtual machine. Loading the operating system into the virtual machine may allow the virtual machine guard to identify the attempt to access the hardware virtualization.

Further in still yet another embodiment the virtual machine guard may register with the virtualization provider while the operating system is running and thus after the operating system has loaded. Optionally the virtual machine guard may be executed as an application an application driver an operating system driver etc. in order to register with the hardware virtualization provider. Further after registering with the hardware virtualization provider and or creating the virtual machine the virtual machine guard may move the running operating system into the virtual machine. For example in order to move the running operating system inside the virtual machine the virtual machine guard may clone resources e.g. registers memory tables page tables etc. associated with the operating system for use as the resources associated with the virtual machine. As an option moving the running operating system into the virtual machine may allow the virtual machine guard to identify the attempt to access the hardware virtualization.

In addition in one embodiment the identification of the attempt to use the hardware virtualization may be carried out using the virtual machine guard. Further after registering with the hardware virtualization provider the virtual machine guard may receive callbacks for any attempt by an application to use the hardware virtualization. For example if the application attempts to use the hardware virtualization of the hardware virtualization provider the virtual machine guard may receive a callback identifying the attempt. As an option the callback may include instructions data a plurality of pointers and or a function associated with the attempt to use the hardware virtualization provider.

Additionally as shown in operation use of the hardware virtualization is conditionally prevented. In one embodiment use of the hardware virtualization may be conditionally prevented based on a source of the attempt to use the hardware virtualization. For example the source may include an identifier associated with an application that initiated the attempt to use the hardware virtualization.

Thus the identifier associated with the application that initiated the attempt to use the hardware virtualization may be identified e.g. by the virtual machine guard . Optionally the virtual machine guard may determine if the identifier associated with the application matches a predetermined allowed identifier. For example the predetermined allowed identifier may be included a list e.g. file database etc. of predetermined allowed identifiers e.g. predetermined to not be associated with malware etc. . Optionally the list of predetermined allowed identifiers may include a list of applications predetermined to be allowed to use the hardware virtualization. For example the predetermined allowed identifier may be selected from a white list of applications predetermined to be allowed to use the hardware virtualization.

In one embodiment the attempt to use the hardware virtualization may be allowed if the identifier associated with the application matches the predetermined allowed identifier. In this way the hardware virtualization may be utilized in response to the identified attempt for such use. Additionally the attempt to use the hardware virtualization may be prevented if the identifier associated with the application does not match the predetermined allowed identifier. It should be noted that the attempt may be prevented in any desired manner such as for example blocking use of the hardware virtualization etc. As a further option not shown the attempt to use the hardware virtualization may be logged.

In another embodiment usage of the hardware virtualization may not be all or nothing. As an option computer code attempting to use the hardware virtualization may choose a degree to which the computer code uses the hardware virtualization. For example a hardware virtualization rootkit e.g. Blue Pill may perform the hardware virtualization of select operations. Optionally the hardware virtualization of the select operations may be referred to as virtualization hijacking . In yet another embodiment the degree may indicate the amount quantity level scale extent etc. to which the computer code fully virtualizes the hardware. Still yet in another embodiment the select operations may include instructions commands directives actions data etc. associated with the hardware. In the context of the present embodiment the virtual machine guard may protect against use of the hardware virtualization rootkit.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing technique may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

As shown in decision it is determined whether an attempt to enable hardware virtualization has been identified. In one embodiment a virtual machine guard may monitor instructions from an operating system a driver an application etc. to a hardware virtualization provider. For example the virtual machine guard may passively monitor instructions from the operating system to the hardware virtualization provider for identifying instructions associated with an attempt to enable the hardware virtualization. As an option the instructions may include assembly instructions. Accordingly the virtual machine guard may wait for the assembly instructions that instruct the hardware virtualization provider to enable the hardware virtualization.

As shown in operation once an attempt to enable the hardware virtualization is identified an identifier associated with the attempt is identified. In one embodiment the identifier may be a name a hash a signature a key a certificate etc. Further the identifier may identify a component an application a file a directory a location an application program interface API a callback an instruction and or any other identifier capable of being associated with the attempt to enable the hardware virtualization. For example the identifier may be associated with an application that initiated the attempt to enable the hardware virtualization. As an option the identifier may be identified utilizing the virtual machine guard.

Further it is determined if the identifier associated with the application matches a predetermined allowed identifier as shown in decision . In one embodiment the predetermined allowed identifier may include a list of identifiers associated with applications predetermined to be allowed to use the hardware virtualization. As an option the list of predetermined allowed identifiers may be user defined provided by a central management system provided by a vendor of the virtual machine guard etc. For example the list of predetermined allowed identifiers provided by the vendor of the virtual machine guard may include identifiers associated with virtualization applications such as WMware Server provided by VMware VirtualPC provided Microsoft etc.

As shown in operation the attempt to enable the hardware virtualization is prevented if it is determined that the identifier associated with the attempt does not match the list of predetermined allowed identifiers. Thus the virtual machine guard may optionally prevent the attempt if the identifier is not located in the list of predetermined allowed identifiers. Furthermore as shown in operation the attempt to enable the hardware virtualization is allowed if it is determined that the identifier associated with the attempt matches the predetermined allowed identifier. For example the virtual machine guard may allow the attempt if the identifier is located in the list of predetermined allowed identifiers.

In addition as shown in operation the attempt to enable the hardware virtualization is logged. While it is shown that the attempt is logged in response to either of a determination that the identifier does match a predetermined allowed identifier or that the identifier does not match a predetermined allowed identifier it should be noted that the attempt may optionally only be logged in response to a determination that the identifier does not match a predetermined allowed identifier. In various embodiments a date and time of the attempt the identifier associated with the attempt the result from the determination in operation and or any other information capable of being associated with the attempt may be logged. As an option the information logged may be stored in memory written to a file transmitted to another device etc.

As another option the logged attempt may be displayed to the user. For example the logged attempt may be displayed as a warning an alert a report etc. via a graphical user interface. In another embodiment the logged attempt may be displayed to the user via a textual interface or command line interface. In addition as yet another option the logged attempt may be reported to a central management system.

In yet still another embodiment after the attempt to use the hardware virtualization is logged the virtual machine guard may return to operation in order to identify an additional attempt to use the hardware virtualization. Of course however monitoring of additional attempts to enable the hardware virtualization may continue during any of operations .

Furthermore in one optional embodiment not shown the list of allowed identifiers may be updated in response to the logged attempt being displayed to the user. For example the user may be presented with an option to add the identifier associated with a prevented attempt to the list of predetermined allowed identifiers. As an option if the user indicates that the identifier is allowed the allowed identifier may be added to the list of predetermined allowed identifiers so future attempts to use the hardware virtualization associated with such identifier may be allowed.

As shown the system prior to initialization of the virtual machine guard may include physical hardware an operating system and applications . In one embodiment the applications may be executing on top of the operating system which may further be executing on top of the physical hardware . In another embodiment the operating system may be loaded and or running prior to the initialization of the virtual machine guard .

In one embodiment the virtual machine guard may be initialized by a user executing an application executing a driver etc. In yet another embodiment the virtual machine guard may be automatically initialized by the operating system one of the applications e.g. such as a driver etc. In still yet another embodiment the virtual machine guard may be automatically initialized via a scheduled event and or action in response to an event at the request of another application and or driver etc.

Further in still yet another embodiment once the virtual machine guard is initialized the virtual machine guard may move the previously loaded operating system into a virtual machine such that the previously loaded operating system may become an operating system running within the virtual machine . Optionally the virtual machine guard may move the previously loaded operating system into the virtual machine by cloning the registers memory tables page tables etc. associated with the previously loaded operating system . As a result the applications may also be moved to execute on top of the operating system within the virtual machine and may thus also be moved inside the virtual machine .

In one embodiment once the virtual machine guard is executing on top of the physical hardware the operating system may execute in the virtual machine . For example the virtual machine guard may operate outside the virtual machine as a hypervisor executing directly on top of the physical hardware . Further in yet another embodiment the virtual machine guard may monitor the instructions from the operating system to the physical hardware .

As an option the virtual machine guard may identify an attempt to use hardware virtualization of the physical hardware . In addition as another option the virtual machine guard may prevent or allow the use of the hardware virtualization based on a determination of whether an identifier e.g. associated with the application and or the operating system associated with the attempt is predetermined to be allowed to use the hardware virtualization of the physical hardware . For example the application running on top of the operating system which is executing within virtual machine may attempt to use the hardware virtualization of the physical hardware . In the context of the present example the virtual machine guard may identify the identifier associated with the application that attempted to use the hardware virtualization of the physical hardware and may prevent or allow the attempt based on a determination of whether the identifier matches a predetermined allowed identifier.

As shown the system prior to initialization of the virtual machine guard may include physical hardware and an operating system loader or BIOS . In one embodiment the virtual machine guard may be initialized prior to loading the operating system via the operating system loader or BIOS .

In another embodiment the virtual machine guard may be initialized as part of the operating system loader or BIOS . For example the operating system loader or BIOS may initialize the virtual machine guard prior to loading the operating system . In yet another embodiment the virtual machine guard may be stored within the operating system loader or BIOS memory e.g. RAM ROM disk storage units of etc. etc. In still yet another embodiment the virtual machine guard may execute within the operating system loader or BIOS allocated memory etc. For example the virtual machine guard may be initialized as part of the operating system loader or BIOS as part of a master boot record or any other application used for boot strapping and or loading the operating system .

In one embodiment once the virtual machine guard is initialized hardware virtualization may be enabled and or a virtual machine may be created. Further in another embodiment once the virtual machine is created the operating system loader or BIOS or the virtual machine guard may load the operating system into the virtual machine . In addition applications may execute on top of operating system which is executing inside the virtual machine .

In one embodiment once the operating system is executing in the virtual machine the virtual machine guard may execute on top of physical hardware . For example the virtual machine guard may operate outside the virtual machine as a hypervisor executing directly on top of the physical hardware .

Further in another embodiment the virtual machine guard may monitor instructions from the operating system to the physical hardware . Further as an option the virtual machine guard may identify an attempt to use hardware virtualization of the physical hardware . In addition as another option the virtual machine guard may prevent or allow the use of the hardware virtualization based on a determination of whether an identifier associated with the attempt to use the hardware virtualization for the physical hardware is allowed. For example an application running on top of the operating system which is executing within virtual machine may attempt to use the hardware virtualization of the physical hardware . In the context of the present example the virtual machine guard may identify the identifier associated with the application that attempted to use the hardware virtualization of the physical hardware and may prevent or allow the attempt based on whether the identifier matches a predetermined allowed identifier.

In one exemplary embodiment a virtual machine guard may be used with an operating system running inside a separate virtualization application. For example the separate virtualization application may execute on a host operating system. Further a guest operating system may be executing on the separate virtualization application. As an option the host operating system may be the operating system first loaded executing and or running on physical hardware and the guest operating system may be the operating system loaded executing and or running inside the separate virtualization application running on the host operating system.

Moreover the virtual machine guard may be coupled with the separate virtualization application. Optionally the virtual machine guard may coordinate with the separate virtualization application. In this way the virtual machine guard may conditionally prevent hardware virtualization attempts associated with the separate virtualization application.

Still yet as another option the virtual machine guard may be integrated within the separate virtualization application. For example the separate virtualization application may utilize application programming interfaces APIs of the virtual machine guard. As another example the virtual machine guard may use APIs of the separate virtualization application. Additionally as still yet another example the virtual machine guard application may be dynamically or statically linked with the separate virtualization application. Still yet in another example the virtual machine guard application may be registered with the separate virtualization application.

In one embodiment the virtual machine guard may identify applications executing within the separate virtualization application that attempt to use the hardware virtualization. For example by identifying the attempt to use the hardware virtualization from within the guest operating system running on the separate virtualization application the virtual machine guard may further allow or prevent those applications from using the hardware virtualization.

In another embodiment the virtual machine guard may allow the separate virtualization application to coexist with the virtual machine guard using the hardware virtualization via chain virtualization. Optionally in the chain virtualization multiple virtualization applications may use the hardware virtualization via chaining of the virtualization applications with the physical hardware. As an option the chaining of the virtualization applications with the physical hardware may be implemented via software virtualization. As another option the software virtualization may be a virtualization hosting mechanism that may allow for an additional virtualization application to run as a virtualization guest along with the other virtualization applications. For example a first virtualization application supporting chain virtualization may relay and process commands from a second virtualization application supporting chain virtualization via the software virtualization executing on the physical hardware.

In yet another embodiment if the separate virtualization application does support the chain virtualization the virtual machine guard may prevent or allow the attempt for hardware virtualization from the separate virtualization application. As an option if the separate virtualization application supports chain virtualization then the virtual machine guard may create a new virtual machine and or move the currently executing separate virtualization application into the new virtual machine utilizing the chain virtualization. Additionally the virtual machine guard may be initialized prior to running the separate virtualization application or while the separate virtualization application is running. Optionally the virtual machine guard may be executed from within the guest operating system executing within the separate virtualization application or from within the host operating system executing directly on the physical hardware.

In still yet another embodiment if the separate virtualization application does not support the chain virtualization the virtual machine guard may prevent or allow the attempt for the hardware virtualization from the separate virtualization application. If the virtual machine guard allows the separate virtualization application which does not support chain virtualization to use hardware virtualization then the virtual machine guard may not prevent subsequent hardware virtualization attempts since the separate virtualization application may be using the hardware virtualization.

Thus in one embodiment the virtual machine guard may support chain virtualization. As an option the virtual machine guard may be implemented directly within the separate virtualization application. Further as an additional option the virtual machine guard may be implemented directly within the host operating system the guest operating system etc.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. For example any of tie network elements may employ any of the desired functionality set forth hereinabove. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

