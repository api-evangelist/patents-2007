---

title: Secure computer system integrity check
abstract: The integrity of a computer may be checked by issuing a command to read data from a hardware component of the computer and retrieving the data from a data transfer buffer. The command may be sent to a secure driver that places the central processing unit (CPU) of the computer in system management mode to trigger execution of a system management interrupt (SMI) handler. The SMI handler may read the data from the hardware component, encrypt the data, and place the encrypted data in the data transfer buffer. A system integrity check application program may read the encrypted data to determine presence of malicious code based on the data. For example, the application program may infer presence of malicious code when the encrypted data does not conform to a particular encryption algorithm or when the data does not appear in the data transfer buffer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578477&OS=08578477&RS=08578477
owner: Trend Micro Incorporated
number: 08578477
owner_city: Tokyo
owner_country: JP
publication_date: 20070328
---
The present invention relates generally to computer system security and more particularly but not exclusively to methods and apparatus for checking the system integrity of a computer.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. In the past traditional antivirus techniques allow for detection and removal of malicious codes. However malicious codes have become very sophisticated to the point where they can infect not just application programs but the operating system kernel and low level functionalities as well. New breeds of malicious codes can thus interfere with the operation of conventional antivirus programs preventing malicious codes from being detected and removed. What is needed is a way to detect malicious codes especially those that can affect low level operations of a computer.

In one embodiment the integrity of a computer is checked by issuing a command to read data from a hardware component of the computer and retrieving the data from a data transfer buffer. The command may be sent to a secure driver that places the central processing unit CPU of the computer in system management mode to trigger execution of a system management interrupt SMI handler. The SMI handler may read the data from the hardware component encrypt the data and place the encrypted data in the data transfer buffer. A system integrity check application program may read the encrypted data to determine presence of malicious code based on the data. For example the application program may infer presence of malicious code when the encrypted data does not conform to a particular encryption algorithm or when the data does not appear in the data transfer buffer.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Being computer related it can be appreciated that some components disclosed herein may be implemented in hardware software or a combination of hardware and software e.g. firmware . Software components may be in the form of computer readable program code stored in a computer readable storage medium such as memory mass storage device or removable storage device. For example a computer readable storage medium may comprise computer readable program code for performing the function of a particular component. Likewise computer memory may be configured to include one or more components which may be executed by a processor. Software components may be implemented in logic circuits for example. Components may be implemented separately in multiple modules or together in a single module.

Another way of issuing a query for information to read data from the hardware component is to utilize an application programming interface API to make a system call arrow . In this approach the application invokes the system call to perform a low level operation to read data from the hardware component . However malicious code has infected the operating system kernel . This allows the malicious code which may be a rootkit driver to intercept the system call and return false information to the application arrow .

Even without the presence of malicious code intercepting calls to the operating system library in user mode or the malicious code intercepting calls to operating system services or drivers in kernel mode some other malicious codes may still interfere with the low level operation of reading data from the hardware component . In the example of the operating system kernel may initiate execution of a CPU instruction to read data from the hardware component in response to a query for information from the application arrow . In the absence of malicious code the CPU will read the instruction from the physical main memory arrow retrieve the requested data from the hardware component arrow and place the requested data in the memory for reading by the operating system kernel arrow . The requested data has been labeled as true data to indicate that in this case the data has not been falsified by malicious code. However a malicious code instruction handler such as the so called Blue Pill code may be present to intercept the CPU instruction from the operating system kernel arrow and return false information to the operating system kernel arrow .

As can be appreciated from the foregoing the application cannot reliably obtain data from a hardware component given the possible proliferation of sophisticated malicious codes at different levels of the computer. Malicious codes may return false information to hide their presence from the application .

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer may have less or more components to meet the needs of a particular application. The computer may include a CPU such as those with a system management mode. System management mode allows for suspension of normal execution including the operating system to allow a handler to execute in high privilege mode. When system management mode is entered program execution passes to a handler having a memory location designated by the computer s firmware typically its BIOS basic input output system during system boot. System management mode is available in the Intel 386SL and later microprocessors for example.

As shown in the computer may include one or more user input devices e.g. keyboard mouse one or more data storage devices e.g. hard drive optical disk USB memory a display monitor e.g. LCD flat panel monitor CRT a computer network interface e.g. network adapter modem a physical main memory e.g. RAM and one or more buses coupling its various components. In the example of the memory includes software i.e. computer readable program code components namely a system integrity check application a secure driver a system management interrupt SMI handler and an operating system . In one embodiment the operating system comprises the Microsoft Windows operating system.

The system integrity check application may comprise computer readable program code for detecting presence of malicious code and obtaining data from hardware components labeled as in of the computer . Examples of these hardware components include CPU registers data storage devices chipsets registers of plug in cards and so on. The application may be an antivirus program. As will be more apparent below the application in conjunction with the secure driver and the SMI handler allow for reliably obtaining data from a hardware component or in the event malicious code interferes with its operation detection of presence of the malicious code. Once malicious code has been identified the application may alert the user or a program. In that case the computer may be restored to a state prior to the malicious code infection for example.

The application may be configured to send a command to the secure driver to obtain requested data from or write data to a hardware component. The application may expect to retrieve requested data from an encrypted buffer in the memory after a predetermined timeout period. Encrypting the requested data advantageously allows the application to detect false information which in turn alerts the application to the presence of malicious code. For example the application may compare data from the encrypted buffer to patterns or signatures of false information returned by known malicious codes. Even if malicious code decides to intercept calls without returning false information the application may infer presence of the malicious code if the application cannot obtain the requested data within the timeout period. For example the application may note the contents of the encrypted buffer before sending the command to obtain the requested data. If the contents of the encrypted buffer have not changed within the timeout period the application may infer presence of malicious code interfering with execution of the command.

The secure driver may comprise computer readable program code for interfacing with the application and triggering execution of the handler . The secure driver may operate in kernel mode as a registered operating system driver. As can be appreciated this allows the application to call the secure driver without having to invoke an API that comes and is standard with the operating system . Operating system API s are generally vulnerable to malicious code infection because they are widely known and distributed with copies of the operating system. The secure driver may prevent malicious code interference by restricting its communications only with the application . The secure driver is also not widely known as it does not come with the operating system. Furthermore as explained above even if communications between the secure driver and the application are intercepted by malicious code the malicious code will still have no way of returning false information that will be believable to the application due to the use of an encrypted buffer.

In one embodiment the secure driver triggers the CPU to enter system management mode by writing to an I O port also referred to as SMI port reserved for this purpose. For example the secure driver may trigger system management mode by issuing an OUT instruction to an SMI port.

The secure driver may pass parameters e.g. read write commands hardware component to write to read from to the SMI handler by writing to a predefined memory location designated by the BIOS or other firmware of the computer . The parameters are preferably encrypted to prevent tampering by malicious codes. Preferably all data transmission between the BIOS and the secure driver are encrypted checksummed and acknowledged to prevent tampering.

In one embodiment the secure driver includes initialization code that first checks whether the BIOS of the computer supports secure system integrity check by searching a range of physical memory locations for an encrypted signature followed by the address of predefined memory locations to be used as encrypted data transfer buffer. The encrypted signature prevents malicious codes from fooling the secure driver that the BIOS does not support secure system integrity check even when it does. The secure driver preferably alerts the user e.g. using a message box when it fails to load because of no BIOS support. This advantageously allows the user to infer presence of malicious code if she knows her computer has the secure system integrity check feature.

The SMI handler may comprise computer readable program code for reading data from or writing data to hardware components of the computer during system management mode. In one embodiment the SMI handler is located in a memory location dictated by the BIOS or other firmware of the computer . The SMI handler may be configured to execute when the secure driver initiates system management mode to read data from a hardware component to encrypt the read data and to store the read data in the encrypted buffer in the memory . The SMI handler may also be configured to write data to a hardware component.

In the example of the application sends a read command to the secure driver to read data from a hardware component arrow . As shown in the read command to the secure driver does not involve use of an API that comes standard with the operating system. This prevents the malicious code e.g. rootkit driver that infected the operating system kernel from intercepting the read command. The secure driver receives the read command from the application and accordingly initiates system management mode by triggering the system management interrupt arrow . In one embodiment the secure driver triggers the system management interrupt by issuing a CPU instruction to write to a designated system management interrupt port.

In the case where there is no malicious code that intercepts CPU instructions the CPU enters system management mode and transfers execution to the SMI handler arrow . Accordingly the SMI handler issues a CPU instruction arrow to read data from the hardware component arrow . The SMI handler encrypts the read data using an encryption decryption algorithm known to both the application and the SMI handler and stores the encrypted read data in the encrypted data transfer buffer arrow . The secure driver reads the encrypted read data from the encrypted data transfer buffer arrow and passes the encrypted read data to the application arrow . The application decrypts and analyzes the encrypted read data to determine if the SMI handler and thus the read command has successfully executed. For example the application may deem the read data as false if it is unintelligible e.g. due to the malicious code not knowing the encryption decryption algorithm or does not contain a predetermined verification code. The application may infer presence of malicious code in the computer when the data read from the buffer comprises false information or when the contents of the buffer have not changed after one or more attempts to send a read command to the secure driver . In that case the application may alert the user or an antivirus program to the presence of the malicious code.

In the case where malicious code is present in the memory the malicious code may intercept the CPU instruction from the secure driver arrow . In that case the malicious code may try to return false information to the secure driver arrow . However since the malicious code does not know how to update the encrypted data transfer buffer because it does not know where the buffer is or is unfamiliar with the encryption decryption algorithm employed by the SMI handler the malicious code will fail to correctly update the buffer . This results in unsuccessful execution of the SMI handler which is detected by the application .

As can be appreciated the above described embodiments allow for a system integrity check that has different levels of protection against interference by malicious codes. The described embodiments allow for detection of malicious codes even those that operate at a level low enough to intercept CPU instructions that read data from hardware components.

A secure computer system integrity check has been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

