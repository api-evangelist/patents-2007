---

title: Web service folder interface
abstract: A method of utilizing a Web Service folder interface. A user defines a folder in a local folder directory as a Web Services enabled folder. The folder includes file data and metadata corresponding to the file data. The metadata includes a configurable Web Services type property that corresponds to a remote Web Service. The metadata also includes a configurable data handling property that includes one or more allowable file formats. When a user submits the file data to the remote Web Service by selecting an option in a pull down menu of a graphical user interface (GUI) or dropping the file data in a local output folder, the operating system (OS) sends the file data to the remote Web Service. The OS automatically converts an output file received from the remote Web Service into one of the allowable file formats and updates the local file data with the output file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08671090&OS=08671090&RS=08671090
owner: International Business Machines Corporation
number: 08671090
owner_city: Armonk
owner_country: US
publication_date: 20070829
---
The present invention relates in general to data processing and in particular to data communication by data processing systems. Still more particularly the present invention relates to an improved method and system for data transfer utilizing a Web Service folder interface.

Computer applications often require access to data from multiple sources within a network such as the Internet. In heterogeneous environments data is typically stored in different formats and users can extract manipulate and or distribute data in different contexts. Web Services are software systems that support interoperable machine to machine interaction over a network that includes data in multiple formats. Web Services are typically application programming interfaces APIs that a client can access over a network in order to perform requested services using a remote system.

When a client application accesses a conventional Web Service the Web Service may require the client to use any gathered information within a customized application or to manually transcribe data to another format. For example a client application may need to convert incoming data into a format typically used by local computer users e.g. rich text format RTF documents text files presentations or spreadsheets . It is thus difficult and tedious for a client application to locally manage data that the client imports from a Web Service. Conventional Web Services enable clients to connect to a web page that controls calls to the Web Service from the back end and returns data in the form of a web page or a customized local client application. However conventional methods of providing customized local client applications lack flexibility and are costly to build.

Disclosed are a method system and computer program product for a Web Service folder interface. A user defines a folder in a local folder directory as a Web Services enabled folder. The folder includes file data and metadata corresponding to the file data. The metadata includes a configurable Web Services type property that corresponds to a remote Web Service. The metadata also includes a configurable data handling property that includes one or more allowable file formats. When a user submits the file data to the remote Web Service by selecting an option in a pull down menu of a graphical user interface GUI or dropping the file data in a local output folder the operating system OS sends the file data to the remote Web Service. The OS automatically converts an output file received from the remote Web Service into one of the allowable file formats and updates the local file data with the output file.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

With reference now to there is depicted a block diagram of an exemplary computer with which the present invention may be utilized. Computer includes processor unit that is coupled to system bus . Video adapter which drives supports display is also coupled to system bus . System bus is coupled via bus bridge to Input Output I O bus . I O interface is coupled to I O bus . I O interface affords communication with various I O devices including keyboard mouse Compact Disk Read Only Memory CD ROM drive and flash memory drive . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Computer is able to communicate with server via network using network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as a Local Area Network LAN an Ethernet or a Virtual Private Network VPN . In one embodiment server is configured similarly to computer . Server includes Web Service . As utilized herein a Web Service refers to a remotely located Application Programming Interface API that provides one or more services to a local client in computer e.g. one of application programs via a network such as network .

Hard drive interface is also coupled to system bus . Hard drive interface interfaces with hard drive . In one embodiment hard drive populates system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory may include additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Data that populates system memory includes Operating System OS application programs and folder directory . Folder directory includes multiple folders A through N where N is a positive integer. In one embodiment folder directory provides input data to Web Service and receives output data from Web Service via network . OS and Web Service perform the functions illustrated in which is discussed below.

OS includes shell for providing transparent user access to resources such as application programs . Generally shell as it is called in UNIX is a program that provides an interpreter and an interface between the user and the operating system. Shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. kernel for processing. As depicted OS also includes graphical user interface GUI and kernel which includes lower levels of functionality for OS . Kernel provides essential services required by other parts of OS and application programs . The services provided by kernel include memory management process and task management disk management and I O device management.

Application programs include browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. computer to send and receive network messages to the Internet. Computer may utilize HyperText Transfer Protocol HTTP messaging to enable communication with server .

With reference now to there is depicted the contents of an exemplary Web Services enabled folder according to an embodiment of the present invention. As shown folder A includes both file data and metadata that corresponds to file data . File data may include text files image files and or other documents stored within folder A. Metadata includes a Web Services enabled folder option multiple Web Services type properties multiple data handling properties . In one embodiment a user of computer may use a yes no toggle button provided by GUI to define whether or not a folder such as folder A is Web Services enabled. In another embodiment a user of computer may define folder A as being Web Services enabled using a pull down menu in one of application programs such as browser .

According to the illustrative embodiment Web Services type properties may include a Uniform Resource Identifier URI that corresponds to the location of a Web Service such as Web Service . Web Service type properties may also include one or more applicable operations e.g. viewing printing and emailing and protocols e.g. HTML and extensible markup language XML that apply to file data . Similarly Web Service handling properties includes a listing of one or more allowable data formats e.g. word processor documents spreadsheet files and portable document format PDF files for file data within folder A. All file data within folder A must comply with one of the listed data formats. Accordingly in one embodiment files stored within a folder of folder directory are automatically converted to a pre defined data format using mappings and or associations between files and schema definitions stored within the folder.

According to the illustrative embodiment Web Service handling properties also include a user defined submission handling option such as Context Menu or Save and Drag . If a user selects the Context Menu submission handling option the user may submit a file within the folder to a Web Service such as Web Service by right clicking on a file of input data in the folder and selecting an option from a pull down menu e.g. Submit Input File . OS would subsequently pass the input file to Web Service . If a user selects the Save and Drag submission handling option the user may submit an input file to a Web Service by saving the document and then using a mouse to drag the document to a local output folder in folder directory that corresponds to the desired Web Service e.g. Web Service .

Turning now to there is illustrated a high level logical flowchart of an exemplary method of utilizing a Web Service folder interface according to an embodiment of the invention. The process begins at block in response to a user of computer accessing folder directory for example via GUI . A user of computer creates a new folder within folder directory as depicted in block and the process proceeds to block . In another embodiment a user may instead choose to select an existing folder in folder directory and the process proceeds directly from block to block .

At block OS determines whether or not a user has selected Web Services enabled folder option to define the active folder i.e. the folder created or currently selected by the user as a Web Services enabled folder. If the user has not defined the active folder as a Web Services enabled folder the process terminates at block . If the user has defined the active folder as a Web Services enabled folder the user defines one or more Web Services type properties and or handling properties using a pull down menu in the active folder as shown in block .

In an alternate embodiment the user may define one or more Web Services type properties and or handling properties using GUI . In another embodiment a user may use GUI to define a folder as a Web Services enabled folder.

According to the illustrative embodiment a user of computer creates file data e.g. a spreadsheet file within the Web Services enabled folder as depicted in block . The user subsequently interacts with file data normally i.e. the user performs applicable operations as shown in block . As described above applicable operations may include but are not limited to viewing printing editing saving and emailing file data .

At block OS determines whether or not a user of computer has opted to submit an input file to a Web Service based on the user defined submission handling option stored in handling properties . For example if the submission handling option of the folder that includes the input file is set to Context Menu OS determines whether a user has selected the Submit Input File menu option. If the submission handling option of the folder that includes the input file is set to Save and Drag OS determines whether a user has dragged the input file to a local output folder corresponding to a Web Service.

If the user has not opted to submit an input file to a Web Service the process returns to block and the user continues to interact normally with the local file. Once the user opts to submit the input file to a Web Service OS passes the input file to the Web Service selected by the user e.g. Web Service via network interface as depicted in block . Web Service subsequently performs one or more pre defined operations on the input file at a remote location i.e. server and produces an output file. The file format of the output file may not match the file format of the local Web Services enabled folder.

OS receives the output file via network interface and automatically converts the output file to one of the user defined allowable file formats using the mappings and or associations stored within handling properties as shown in block . Once the output file matches a file format compatible with the local Web Services enabled folder OS updates the local input file in the Web Services enabled folder with the output file as depicted in block and the process terminates at block . In another embodiment OS may place the output file in a separate local output folder in folder directory rather than updating the input file.

The present invention thus provides a method of utilizing a Web Service folder interface. A user of computer defines a folder in folder directory as a Web Services enabled folder. The folder includes file data and metadata corresponding to file data . Metadata includes configurable Web Services type properties that correspond to a remote Web Service . Metadata also includes configurable data handling properties that include one or more allowable file formats. When a user submits file data to the remote Web Service by selecting an option in a pull down menu of GUI or dropping file data in a local output folder OS sends file data to the remote Web Service . OS automatically converts an output file received from the remote Web Service into one of the allowable file formats and updates the local file data with the output file.

It is understood that the use herein of specific names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology and associated functionality utilized to describe the above devices utility etc. without limitation.

In the flow chart above while the process steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

While an illustrative embodiment of the present invention has been described in the context of a fully functional computer system with installed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution. Examples of the types of media include recordable type media such as thumb drives floppy disks hard drives CD ROMs DVDs and transmission type media such as digital and analog communication links.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

