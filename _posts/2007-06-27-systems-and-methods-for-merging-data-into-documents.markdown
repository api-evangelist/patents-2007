---

title: Systems and methods for merging data into documents
abstract: Systems and method in accordance with the presently claimed invention call embedded application to merge values into documents using applications on frontend devices. In some embodiments, the frontend application may be placed in an outplace view so that it will not be visible on the output viewed by the user. Further, in some embodiments, the front end device may trigger the saving of the documents that are created by the front end application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08126928&OS=08126928&RS=08126928
owner: SAP AG
number: 08126928
owner_city: Walldorf
owner_country: DE
publication_date: 20070627
---
This disclosure relates to populating data fields of an electronic document and more particularly to populating data fields of an electronic document when using embedded applications.

Many organizations both large and small use mass mailings to communicate with current and potential customers clients and or members. Organizations may use a mail merge process to create the documents for these mass mailings. These documents may be physical documents such as letters or flyers or they may be electronic documents that are emailed to recipients.

The documents that are communicated as part of the mass mailing may be personalized. This personalization may be accomplished using a mail merge feature implemented in computer software. The mail merge software may access information from a structured data source like a database and place the accessed information into the appropriate position of a template to personalize each document in a mass mailing. A business for example may use the mail merge feature in the word processing program to generate customer invoices. In this example the business may maintain a list of customer names the corresponding mailing address for each customer and the customer s existing balance. A mail merge program may create each customer invoice by placing the customer s name mailing address and existing account balance into the appropriate locations of an invoice template to personalize each customer s invoice.

A mail merge process may be implemented using software that is run on the user s computer. For example a mail merge process may be included as a feature in a word processing program such as MICROSOFT WORD. The mail merge software may create and keep open multiple documents during the mail merge process. For example when the mail merge software is used to personalize customer invoices the mail merge software may open a new document on the user s computer for each personalized invoice that is created. Thus a mail merge program that creates 10 personalized invoices may create and keep open 10 documents during the mail merge process.

A user may access the mail merge process using an embedded application. Issues may arise however when using embedded applications in the prior art to allow applications on other devices to access programs on the user s computer. For example some applications including embedded applications may not allow a user to view multiple windows. Instead embedded applications may restrict the user to viewing one window at a time complicating the use of programs that cause multiple documents to be opened. Further distributing data from a database to a an application on the user s computer may cause the application to quickly open and then minimize multiple documents on the output of the user s computer. The application programming interface in the application may be unable to suppress these blinking documents from appearing on the user computer s output when the application defaults to opening documents as visible. Finally embedded applications may not allow the user s device to trigger the saving of a document. As such for at least these reasons there is a need to improve the ability of embedded systems to allow access to programs on applications on the user s computer.

In accordance with the invention a method for merging data into documents at a frontend device by using an embedded application to access a software application is disclosed. In some embodiments the method may include controlling the embedded application to make the software application not visible through a user interface while the software application is running performing a data merge process using the software application wherein the software application is accessed by the embedded application identifying newly created documents since performing the data merge process and storing the identified documents in at least one of a backend device and a computing device separate from the frontend and backend devices.

In some embodiments of the disclosed method identifying newly created document may include generating a first list identifying all opened documents on the frontend device before the data merge process and generating a second list identifying all opened documents on the front end device after performing the data merge process

A system for merging data into documents by using an embedded application to access a software application in accordance with the invention is also disclosed. The system may include a backend device for controlling the embedded application wherein the embedded application makes the software application not visible through a user interface while the software application is running and a frontend device for performing a data merge process using the software application accessed by the embedded application and for identifying newly created documents since performing the data merge process. In some embodiments the identified documents may be stored on at least one of a backend device and a computing device separate from the frontend and backend devices.

A computer program for using an embedded application to access a software application for merging data into documents at a frontend device in accordance with the present invention is also disclosed. The program may include computer code for controlling the embedded application to make the software application not visible through a user interface while the software application is running computer code for calling the software application to perform a data merge process wherein the software application is accessed by the embedded application computer code for identifying newly created documents since performing the data merge process and computer code for causing the identified documents to be stored in at least one of a backend device and a computing device separate from the frontend and backend devices.

Additional objects and advantages of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The objects and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as described. Further features and or variations may be provided in addition to those set forth herein. For example the present invention may be directed to various combinations and sub combinations of the disclosed features and or combinations and sub combinations of several further features disclosed below in the detailed description.

Reference will now be made in detail to the invention examples of which are illustrated in the accompanying drawings. The implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead they are merely some examples consistent with certain aspects related to the invention. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Backend may be implemented using a server or any other type of computing device capable of storing data and implementing software programs. Backend may be capable of operating ABAP applications. Backend may also be capable of operating Java applications including applications written in J2EE. A backend program may be any program or software capable of being implemented by a server a database or any other type of computing device. The backend programs may include for example a human resources recruitment process and an invoicing process.

Frontend may be implemented using a computer workstation desktop computer laptop computer or any other computing device capable of accessing a computer application. In some embodiments frontend may access a computer application located on another computing device such as backend using network . The programs running on frontend may be referred to as front end programs.

The computing devices used to implement backend and frontend may include one or more connections that can be used to communicate with other devices such as each other over network . A connection included on the devices used to implement backend and frontend may connect to any communication channel capable of allowing the transmission of data between devices. The channel may be a wired or wireless connection using conventional communication protocols and or data port interfaces. In one embodiment for example the computing devices may be provided with conventional data ports such as USB FIREWIRE and or serial or parallel ports for transmission of data through the appropriate communication connection. The communication connection may be any combination consistent with embodiments of the present invention that allows communication between backend and frontend .

Embedded application may be any type of software application devoted to performing a specific task or set of tasks. Although shows embedded application located on backend embedded application may be run on any computing device that can communicate with frontend . In some embodiments backend may include a computing device that is devoted to running only embedded application . Further backend may include computing hardware that is devoted specifically to running embedded application . The HR Recruitment application from SAP AG of Walldorf Germany may be an example of an embedded application. The HR Recruitment application is devoted to performing only those tasks related to the recruiting process such as for example searching resumes advertising vacancies and handling correspondence with applicants. The HR Recruitment application may be located on backend .

Embedded application may be accessed from frontend using a graphical user interface that allows frontend to communicate with the other computing devices on the network. In some embodiments the graphical user interface may be implemented using a web page interface over a network connection. The web page interface may be for example a web browser. For example the graphical user interface may include the SAP GUI which allows users to access SAP programs stored on backend . Frontend may also be coupled to an output device not shown such as a computer monitor.

IOS Factory may provide an interface to allow embedded application to control one or more applications on frontend . IOS Factory may be implemented using software on backend . In some embodiments for example IOS Factory may be implemented using WEB DYNPRO from SAP AG of Walldorf Germany. Although shows IOS Factory in a single component on backend the functions of IOS Factory may be implemented on a plurality of computing devices. In some embodiments some of the functions of IOS Factory may be implemented on frontend .

In some embodiments in which embedded application is accessed using a graphical user interface IOS Factory may modify the user interface to indicate to the user that additional functions may be accessed on front end programs. The user interface for embedded application may be programmed using WEB DYNPRO. When IOS Factory allows embedded application to access functions on frontend programs IOS Factory may cause the user interface provided by WEB DYNPRO to be modified to indicate to the user that these functions are available. For example if IOS Factory allows embedded application to access a mail merge function on frontend embedded application may cause a mail merge button to appear on the user interface to indicate to the user that the mail merge function is available.

Backend may include one or more IOS interface components . In some embodiments IOS Factory may call one or more IOS interface components to manipulate applications on frontend . An IOS interface component may use a set of controls for communicating with and manipulating a specific application on frontend . In some embodiments IOS interface component may use ActiveX controls to manipulate frontend applications. For example in the mail merge process described above IOS Factory may call IOS interface component that can use ActiveX controls to manipulate the operation of a word processing application on frontend . In some embodiments IOS interface component may provide access to other applications on front end such as spreadsheet applications.

By accessing one or more IOS interface components to control programs on frontend IOS Factory may increase the level of abstraction for the user by hiding the different frontend applications called by IOS Factory . For example in a mail merge process used to create a set of user invoices IOS Factory may call an IOS interface component for accessing the mail merge function on a word processing program on frontend . The user however does not have to know that the word processing program on frontend is being accessed for this function and instead may only be aware of the resulting mail merge documents. Accordingly a user may only be aware of the functions that IOS Factory can implement and not of the applications on frontend called to implement these functions.

Referring again to the exemplary embodiment shown in backend may contain one or more IOS Documents . IOS Document may be any electronic document stored on backend . IOS Document may contain different fields for holding variables. IOS interface component may define the fields in IOS Document . For example IOS interface component may define the variable type that may be entered into each field in IOS Document . In some embodiments IOS document may be a template for use with software applications such as those stored on backend . For example OS Document may be a template for a letter or an invoice stored as a word processing document or a budget or inventory stored as a spreadsheet.

When an IOS interface component manipulates a program in frontend it may cause IOS Document to be transmitted to frontend for use in the manipulated frontend program. In some embodiments IOS Factory may cause IOS Document to be transmitted to frontend . For example when creating a set of personalized customer invoices IOS document may be a template for the invoices to be sent to customers. IOS Factory may cause the invoice template to be transmitted to frontend for use by the word processing program in a mail merge process.

Backend may contain one or more databases . Database may include information software and or data that backend may access. Data in database may be entered manually. Alternatively or in addition data in database may be captured automatically from other electronic sources. Database may be a sub component of backend and or a separate component from backend . In some embodiments database and backend may be coupled to a network not shown that allows the two devices to communicate with each other. Data from database may be used in mail merges to personalize documents. The data from database may be merged into the fields of a template to create the personalized documents.

ACF interface may include a physical connection for coupling backend to network not shown in . ACF interface may include hardware and or software for transmitting data and or files between backend and frontend . In some embodiments ACF interface may accept ActiveX controls from IOS interface component and transmit those controls to frontend . For example IOS interface component may contain a set of ActiveX controls IOS document may be an invoice template and database may contain customer balance and address information. ACF interface may be used to pass the controls from IOS interface component the invoice template in IOS document and the information from database to a mail merge function on frontend to create a set of personalized invoices. Backend may obtain the set of personalized invoices from application using IOS Document Container on frontend . ACF interface may be used to receive the set of personalized invoices for storing on backend . ACF Interface may use a protocol to communicate with frontend . For example when using the NETWEAVER platform from SAP AG of Walldorf Germany the protocol used by ACF Interface to communicate with frontend may be an integrated part of the NETWEAVER platform.

Referring again to frontend may include ACF interface ACF Delegator IOS application and Document Container . In one example application is a word processor application. ACF interface may include software for transmitting data and or files between frontend and backend . In some embodiments ACF interface may receive data and or files from backend transmitted over network . In the example above in which a set of personalized invoices are created ACF interface may be used to receive the ActiveX controls the invoice template and the customer information transmitted from components on backend using ACF interface . ACF Interface may use a protocol to communicate with backend . For example when using the NETWEAVER platform from SAP AG of Walldorf Germany the protocol used by ACF Interface to communicate with backend may be an integrated part of the NETWEAVER platform.

Frontend may include ACF Delegator IOS . In accordance with some embodiments of the invention ACF Delegator IOS may receive the data and or files transmitted from backend and perform one or more actions based upon the received data and or files. In some embodiments ACF Delegator IOS may identify each document currently opened on frontend and make a first list of the identified documents. In some embodiments ACF Delegator IOS may only identify a subset of documents currently opened on frontend and make a first list of this subset. For example when backend has transmitted a set of controls to access the mail merge function of a word processing program on frontend ACF Delegator IOS may identify each document of the word processing program opened on frontend and make a first list that contains only these documents.

In some embodiments ACF Delegator IOS may create an environment for executing the controls received from backend . The controls executed by ACF Delegator IOS may allow it to access functions and programs on frontend . In one embodiment of the present invention ACF Delegator IOS may create an ActiveX environment for hosting IOS document and executing the ActiveX controls received from IOS interface component . ACF Delegator IOS may be able to access one or more programs on frontend implemented by application including word processing and spread sheet programs. The type of program accessed may depend on the controls received from backend .

In the example in which backend transmits controls to access the mail merge function on frontend ACF Delegator IOS may create an ActiveX environment. The ActiveX environment created by ACF Delegator IOS may be used to host the invoice template received from backend . As part of the presently described embodiment ACF Delegator IOS may also use the ActiveX environment to execute the ActiveX controls received from IOS interface component . The ActiveX controls may instruct a word processor application to merge customer data from database into the invoice template from backend to create a set of personalized customer invoices using the mail merge function contained in word processor . As part of the ActiveX controls ACF Delegator IOS may access word processor in the background of frontend . Accordingly when word processor is running in the background each of the documents created by word processor as part of the mail merge process may not be visible to the user on the output of frontend . Word processor may be referred to as running in an outplace view when it is not visible on the output of frontend .

After the function on frontend is complete ACF Delegator IOS may identify each document currently opened on frontend and make a second list of the identified documents. In some embodiments ACF Delegator IOS may only identify a subset of documents currently opened on frontend and make a second list of this subset. For example when backend has transmitted a set of controls to access the mail merge function of a word processing application on frontend ACF Delegator IOS may identify each document of the word processing application opened on frontend and make a second list that contains only these documents. By comparing the documents on this second list with the documents on the first list ACF Delegator IOS may identify each of the documents created during the called function. For example when the mail merge function of word processor is used to create a set of personalized invoices word processor may create and keep open each of the personalized invoices created during this process. In this example only the second list will contain each of the newly created personalized invoices. Accordingly ACF Delegator IOS may compare the first and second lists to identify the documents created by the mail merge function.

ACF Delegator IOS may copy each newly created document into frontend . Each of the newly created documents may contain an interface that allows them to be controlled by ACF Delegator IOS . For example when creating a set of personalized invoices each of the newly created personalized invoices may contain an IOleObject interface or other interface through which an embedded object may provide functionality to for example Container that allows each invoice to be controlled by the ActiveX controls in ACF Delegator IOS . Using the ActiveX controls ACF Delegator IOS may use the IOleObject interface to save each of the newly created documents. In some embodiments ACF Delegator IOS may save each newly created document into Document Container . Accordingly saving each newly created document may be triggered from the front end device.

After frontend saves the newly created document the function called on frontend may be changed to be visible from the browser used to access backend . In some embodiments IOS Factory may change the function in frontend to be visible. When an application such as application on frontend is visible through the browser used to access backend the application may be said to be inplace. 

After ACF Delegator IOS has saved each newly created document to frontend it may cause the newly created documents to be transmitted to backend using ACF interface . When backend receives the newly created documents on ACF interface the documents may be saved by backend . Backend may save the documents so that the original format of the documents is preserved. Application may later be used to open documents that have been saved in the original format.

The components shown in and described above are exemplary. Other components may be used to implement the disclosed systems and methods consistent with the invention. For example the components and functions described as part of backend may be implemented across multiple computing devices. In some embodiments the functions associated with IOS Factory and or ACF Delegator IOS may be implemented by more than one computing device or by more than one module on a computing device. For instance the function by IOS Factory of providing an interface for the user to access the embedded application may be implemented by one module while the function of controlling the IOS interface component may be implemented using a second module. Similarly the functions and components on fronted may also be implemented using multiple computing devices. For example ACF Delegator IOS may be implemented using more than one module in frontend . Finally while the exemplary embodiment of relates to an implementation using IOS and ACF type components systems consistent with the invention may be implemented by arrangements using other types of components. For example the general features of transmitting IOS Document from backend to application on frontend saving the newly created set of documents to Document Container and transmitting the newly created set of documents to backend for saving may be available on other applications such as MICROSOFT VISIO or POWERPOINT.

In stage a data merge process may be performed. The data merge process may be performed using for example software application . In some embodiments as shown in software application used to perform the data merge process may be run on frontend . Also the data used in the data merge process of stage may be transmitted to software application from backend from a database or frontend . In some embodiments database may be separate from backend and from frontend .

In stage any documents that have been newly created since performing the mail merge process may be identified. This identification may be performed by frontend . For example frontend may have a processor not shown that can be used to identify the newly created documents.

In stage the identified documents may be stored in one or more of frontend backend and database . The identified documents may be transmitted over network when being stored in backend such as in database . Further ACF interface on frontend may be used to transmit the identified documents on network . AFC interface may be used to receive the identified documents that have been transmitted over network .

In stage the merge values are distributed to frontend . In some embodiments merge values may be obtained by a process on backend . Merge values may be stored on a database such as database that forms a part of backend . The database that stores merge values may also be separate from backend . The process on backend that obtains the merge values may be written using ABAP or Java. For example a user may wish to make a set of customer invoices. The merge values may include each customer s name a customer s address and a customer s account balance. The merge values may be distributed using for example an ACF. As described above with respect to the ACF may be implemented on backend or on frontend . The ACF may also be implemented in part on backend and in part on frontend . In some embodiments the ACF may be implemented using ActiveX controls. The ActiveX controls may be on either or both of backend and frontend . When the disclosed invention is used to create a set of personalized invoices the merge values described above may be distributed from backend to frontend using the active component framework. A template as described above may also be transmitted to frontend .

In stage a first list of opened documents on frontend may be generated. The first list of opened documents may contain all documents opened on frontend . The first list of opened documents may contain a subset of opened documents on frontend . In the example in which a mail merge function of a word processor is requested to create personalized invoices the first list of opened documents may only contain documents opened by the word processor such as word processor .

In stage an application accessed on frontend may perform the requested function. In some embodiments the template used by the frontend application may be stored on frontend or on backend . In some embodiments the frontend application may be in an outplace view in which the frontend application may not be visible on the user interface of the user s device when the application is being accessed by an embedded application. In some embodiments an application in an outplace view may not be visible at any time. In some embodiments an application in an outplace view may not be visible only when the application is being accessed by an embedded application. In the invoice example the called mail merge function may create the set of personalized invoices. In this example each of the documents created by the mail merge function will not be visible on the user s user interface.

In stage a second list of opened documents on frontend may be generated. The second list of opened documents may contain all documents opened on frontend . The second list of opened documents may contain a subset of opened documents on frontend . In the example in which a mail merge function of a word processor is accessed to create personalized invoices the second list of opened documents may only contain documents opened by the word processor to perform the requested function.

In stage the newly created documents during the performance of the requested function are identified. In some embodiments the documents on the second list are compared to the documents on the first list to identify the newly created documents. The difference between the documents on the first list and the second list may indicate the documents created by the frontend application.

In stage each of the newly created documents may be saved to frontend . In some embodiments each newly created document may include an interface that allows it to be controlled by ACF Delegator IOS . For example when creating a set of personalized invoices each of the newly created personalized invoices may contain an IOleObject interface that allows each invoice to be controlled by the ActiveX controls in ACF Delegator IOS . Using the ActiveX controls ACF Delegator IOS may use the IOleObject interface to save each of the newly created documents. In some embodiments ACF Delegator IOS may save each newly created document into a document container. Accordingly saving each newly created document may be triggered from the front end device.

Further in stage the newly created documents may be transmitted to backend where each may be saved. For example database may store each newly created document. Finally after backend saves the newly created document the function called on frontend may be changed to be visible from the browser used to access backend . In some embodiments IOS Factory may change the function in frontend to be visible. In some embodiments embedded application may change the function in frontend to be visible. When an application on frontend is visible through the browser used to access backend the application may be said to be inplace. In some embodiments the application that is accessed on frontend may be inplace before the process begins. When the application is inplace it may be changed to be outplace before stage . The remaining stages may then be performed as described above.

As described above systems and methods consistent with the invention may populate data fields of an electronic document when using embedded applications. For purposes of explanation only certain aspects and embodiments are described herein with reference to the components illustrated in . The functionality of the illustrated components may overlap however and may be present in a fewer or greater number of elements and components. Further all or part of the functionality of the illustrated elements may co exist or be distributed among several geographically dispersed locations. Moreover embodiments features aspects and principles of the present invention may be implemented in various environments and are not limited to the illustrated environments.

Further the sequences of events described in are exemplary and not intended to be limiting. Thus other process stages may be used and even with the processes depicted in the particular order of events may vary without departing from the scope of the present invention. Moreover certain process stages may not be present and additional stages may be implemented in . Also the processes described herein are not inherently related to any particular system or apparatus and may be implemented by any suitable combination of components.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

