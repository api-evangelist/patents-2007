---

title: Automated firmware restoration to a peer programmable hardware device
abstract: Provided are techniques for restoring firmware. A first programmable hardware device determines that a second programmable hardware device needs a valid firmware image, retrieves a copy of the valid firmware image from an external memory, and sends the valid firmware image to the second programmable hardware device via a private communication link, wherein the private communication link enables private communication between the first programmable hardware device and the second programmable hardware device. The second programmable hardware device restores existing firmware using the valid firmware image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761735&OS=07761735&RS=07761735
owner: International Business Machines Corporation
number: 07761735
owner_city: Armonk
owner_country: US
publication_date: 20070413
---
This application is related to the following commonly assigned and co pending United States Patent Applications 

application Ser. No. 11 735 295 filed on Apr. 13 2007 entitled AUTOMATED FIRMWARE RESTORATION TO A PEER PROGRAMMABLE HARDWARE DEVICE by Earle Ellsworth et al. and which is incorporated herein by reference in its entirety and

application Ser. No. 11 304 407 filed on Dec. 14 2005 entitled SIMULTANEOUS DOWNLOAD TO MULTIPLE TARGETS and which is incorporated herein by reference in its entirety.

Embodiments of the invention relate to automated firmware restoration to a peer programmable hardware device.

Programmable hardware devices e.g. a Small Computer System Interface SCSI Enclosure Services SES processor in a storage server or a Universal Serial Bus USB controller for a USB device are found in many different types of systems. In some cases the purpose of the programmable hardware device is to provide reliability availability or serviceability RAS features. However occasionally a programmable hardware device may require an update to the firmware that is driving its operation. Firmware may be described as programming that is a permanent part of a device e.g. by being inserted into Programmable Read Only Memory PROM . Also firmware may be described as programming that is running on the programmable hardware device whereas a firmware image may be described as the set of data that comprises the firmware that gets loaded onto the programmable hardware device. In many cases the firmware that is written to the programmable hardware device will overwrite the previously operating firmware. Thus if corrupt firmware i.e. in the form of a firmware image is written to the programmable hardware device the programmable hardware device will not operate and thus can no longer provide normal functionality. A programmable hardware device with corrupt firmware i.e. with a corrupt firmware image may be referred to as a corrupted programmable hardware device. Firmware that is corrupted may be described as corrupted firmware or invalid firmware.

An alternative condition that occasionally may occur is that the firmware runs into an error during normal operation e.g. when a firmware image download is not occurring or at runtime and the error corrupts the firmware image thus also preventing the programmable hardware device from providing normal functionality.

Typically system devices that fail in some way negatively affect the overall performance of the system which in most customer environments is not acceptable. Typically the conventional means to fix the problem is to replace the programmable hardware device or if possible reinstall the firmware image. However these fixes require intervention from some type of external support and this type of intervention is not automatic. If a customer had critical operations that were negatively affected by any delays the existing solution of calling and waiting for support would not be adequate.

Thus there is a need in the art to enable automatic self correction of a firmware problem for a programmable hardware device.

Provided are a method computer program product and system for restoring firmware. A first programmable hardware device determines that a second programmable hardware device needs a valid firmware image retrieves a copy of the valid firmware image from an external memory and sends the valid firmware image to the second programmable hardware device via a private communication link wherein the private communication link enables private communication between the first programmable hardware device and the second programmable hardware device. The second programmable hardware device restores existing firmware using the valid firmware image.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the invention.

Embodiments provide an automated firmware restoration to a programmable hardware device that either has a redundant partner has a shared external memory with another processor or is linked to another processor that maintains a copy of a valid firmware image for the programmable hardware device. In certain embodiments there are two redundant devices and any firmware update on one of the devices may be corrected by the other device provided the failing device is capable of receiving updates and a communication interface is functioning between the two devices. Firmware update may be described as update of the firmware image. In certain embodiments there are two processors that are not redundant but the corrupted processor has a functioning communication interface to the other processor and this other processor either has access to an external memory of the corrupted processor that contains a copy of the firmware image of the corrupted processor or maintains a copy of the firmware image of the corrupted processor in some storage e.g. the firmware image is sent to the processor during a firmware update for storage purposes . Embodiments are also applicable to a condition separate from a firmware update where the processor encounters some type of error that corrupts the firmware image during normal operation and either the processor detects the failure during normal operation or upon reboot.

Merely to enhance understanding an explanation of embodiments applicable to firmware update are provided. However embodiments are also applicable to conditions in which a firmware image is corrupted in normal operation.

The active BMC includes processor and internal memory . The standby BMC includes processor and internal memory .

In the active and standby BMCs are programmable hardware devices that are redundant. The active BMC and standby BMC may also be referred to as first and second target devices respectively or as partner BMCs. The active and standby BMCs may be described as dual BMCs for redundancy purposes to improve the overall server reliability however there are local components that each BMC individually controls that are not protected by redundancy e.g. one BMC is not able to power components directly controlled by the partner BMC . The BMCs have an internal private communication link between them along with an external memory dedicated to each BMC . Using these components embodiments enable automatic firmware correction.

The active BMC and the standby BMC are able to communicate over the private communication link . The private communication link may be described as a private device communication medium that enables private communication between the active and standby BMCs . The management module is not able to send communications directly on the private communication link . An internal device communication medium is coupled to the external device communication medium . In certain embodiments the external device communication medium may be a bus e.g. a RS485 serial bus inter integrated circuit I2C bus a Dual Port RAM DPRAM or other bus based media and the internal device communication medium may be a bus e.g. an internal RS485 serial bus inter integrated circuit I2C bus a Dual Port RAM DPRAM or other bus based media connected to the external device communication medium .

In normal operation the management module sends a single firmware image through multiple packets to both of the active and standby BMCs by issuing the firmware image over a single external device communication medium . Each BMC in the normal update process writes the firmware image directly to an internal memory e.g. an internal flash area that stores the BMC instruction set that drives the processor . In the event that the firmware image is corrupt each BMC has the limited capability to wait for a new firmware update through a set of reduced functionality provided in code that is not updated in the firmware update process i.e. code that is stored in what is referred to as a boot block . However normal functions of the BMC can no longer be provided when the firmware image is corrupt. In server this may be a problem because each BMC controls system power in the server . So if the server is powered down for a firmware update and the update fails i.e. the firmware image is corrupt the server is not able to power on until a valid firmware update is provided meaning a customer would lose usability of the blade server. A valid firmware update may be described as one that is not corrupted and enables the BMC to start up perform its functionality correctly. An example result of corrupted firmware is a situation in which the firmware update completes successfully and the BMC starts up as normal but then some of its normal functionality is inhibited by the new corrupted firmware. Even though there is a second BMC in the event of a firmware failure the second BMC is not able to power components directly controlled by the partner BMC which underscores the importance of both BMCs being in an operational state.

With embodiments the active BMC is coupled to an external memory in which the active BMC stores a copy of the firmware image. The standby BMC is coupled to an external memory in which the standby BMC stores a copy of the firmware image. In the case of redundant devices each redundant device runs the same firmware. Therefore the copies of the firmware images in the external memories are the same. With these copies if one of the BMCs has firmware that is corrupt the other BMC is able to provide a corresponding firmware image from the external memory .

In certain embodiments the server is a blade server in an IBM BladeCenter chassis available from International Business Machines Corporation where the blade server has dual baseboard management controllers BMCs . The blade server may be described as an midrange server class storage system. However embodiments are applicable to any set of target devices e.g. redundant devices such as the active and standby BMCs may use any shared communication medium e.g. internal device communication medium between the target devices that permits snooping in data sniffing mode and may use any private device communication medium e.g. private communication link between the redundant target devices. Data sniffing mode also referred to as promiscuous mode may be described as a mode in which a target device intercepts and reads each communication e.g. network packet that arrives in its entirety whether or not the communication is addressed to that target device. Embodiments may be used in networks that are serial or non serial. Although examples herein may refer to firmware update embodiments are applicable to software updates. Also there may be any number of devices that receive the update over a same device communication medium. The active and standby BMCs may be described as control entities in the blade server used by an IBM BladeCenter Management Module MM .

During normal operation one BMC e.g. the active BMC is said to own the external device communication medium and so one BMC is capable of communicating with the management module at a time. Although the management module is aware of sending commands to the active BMC the management module does not speak directly to the active BMC . Instead the management module sends messages to an address on the external device communication medium that is associated with the server slot and the active and standby BMCs are capable of responding to and or listening on this address. Therefore from the management module perspective the management module is speaking to one BMC at any moment in time. In certain embodiments of the dual BMCs in a server there is no hardware inhibitor that prevents both BMCs from actively using the external device communication medium where the standby BMC may access the external device communication medium via the internal device communication medium . In certain embodiments however the external device communication medium is actively used by a default BMC that is defined as the active BMC and the other BMC remains in an inactive state with the internal device communication medium until the active BMC that is actively using the external device communication medium fails.

In the programmable hardware devices may also be referred to as partners. The programmable hardware devices have an internal private communication link between them and each programmable hardware device has an external memory . Dashed line indicates that programmable hardware device A is optionally coupled to external memory while dashed line indicates that programmable hardware device B is optionally coupled to external memory . In this manner either external memory or both external memories may function as a shared external memory. In certain embodiments the external memory is dedicated to one programmable hardware device and accessible by the other programmable hardware device . With the embodiments illustrated in the programmable hardware devices do not use the same firmware but each is able to access a copy of the other programmable hardware device firmware image e.g. either from its own external memory or from the other programmable hardware device s external memory . Then if one programmable hardware device fails due to firmware being corrupt then the other programmable hardware device is able to provide a valid firmware image.

Although embodiments refer to an external memory any storage space external to the programmable hardware device may be used as long as the storage space is non volatile or in some way protects the contents such that the firmware in the memory is not lost e.g. during a power off phase .

In an internal device communication medium is coupled to the external device communication medium . In certain embodiments the external device communication medium may be a bus e.g. a RS485 serial bus inter integrated circuit I2C bus a Dual Port RAM DPRAM or other bus based media and the internal device communication medium may be a bus e.g. an internal RS485 serial bus inter integrated circuit I2C bus a Dual Port RAM DPRAM or other bus based media connected to the external device communication medium .

With embodiments each programmable hardware device e.g. BMC or devices makes use of the new hardware component connected to that programmable hardware device the external memory. illustrates logic performed by each programmable hardware device in response to receiving a firmware image in accordance with certain embodiments. Control beings at block with a programmable hardware device receiving a firmware image i.e. a new firmware image that may either be the first firmware image received or that may be an update to previously received firmware image . In block the programmable hardware device stores the firmware image in external memory. Each external memory is large enough to hold multiple copies of a firmware image e.g. multiple versions which enables a programmable hardware device to obtain a particular version of the firmware image . In certain embodiments the number of copies is determined by how many copies the memory supports while in other embodiments other factors may be used in addition to or instead of memory size.

In particular during normal firmware operations each BMC copies the firmware image to an area in the external memory . Each BMC keeps two or more copies. For non redundant programmable hardware devices that do share one or more external memories each programmable hardware device may store a copy of its firmware image in the shared external memory . On the other hand for non redundant programmable hardware devices that do not share one or more external memories each programmable hardware device receives a copy of the firmware image of the other programmable hardware device and stores that copy in its own external memory .

With reference to and embodiments in which there are two redundant devices in the event of a corrupt firmware image being passed from the management module to the BMC since one BMC is updated at a time the firmware update process may fail without actions performed in accordance with embodiments. In certain embodiments the corrupted BMC directly accesses its external memory for a copy of a firmware image to update itself. In certain embodiments if the BMC does not find a valid firmware image in the external memory or if the corrupted BMC is designed to provide an indication to a partner the corrupted BMC provides an indication to the partner BMC that a valid firmware image is needed. The partner BMC is in a position to rollback the firmware of the corrupted BMC by providing the corrupted BMC with the last valid firmware image in its external memory or by directly reading its own firmware image and providing that to the other BMC via the private communication link . The operating BMC acts as the management module that initiates the firmware update process and updates the partner BMC that was corrupted. Control to initiate a firmware update of a BMC may be placed in the valid partner s domain with a heartbeat mechanism. A heartbeat mechanism may be described as one in which a programmable hardware device periodically sends a message to a partner and receives a message from the partner to determine whether the partner is still functioning. For example when a programmable hardware device does not respond to the heartbeat function message within a predetermined period of time the partner programmable hardware device determines that the programmable hardware device has failed and needs a valid firmware image. Thus upon completion both BMCs are able to operate again in a redundant fashion.

With reference to and embodiments in which the devices are not redundant a shared external memory may be available between processors or both processors may maintain the partner s firmware image in separate dedicated external memories . The processors do not have to be redundant but have a functioning communication interface e.g. private communication link . In various embodiments either each processor implements a heartbeat function during normal operation or the corrupted processor indicate a failure to the partner processor . For firmware updates the heartbeat mechanism stops temporarily since the processor being updated is not in a position to handle that functionality i.e. because typically the functionality is in operational code that cannot be accessed during a firmware update . However a timeout may be implemented that expires if the heartbeat mechanism was not started in time i.e. the timeout may be defined as the longest time allowable for a firmware update for the partner processor . In the event of a timeout the partner processor automatically retrieves a firmware image from external memory to update the corrupted processor . In certain embodiments the corrupted processor requests and receives a firmware image of the last version of firmware that is usable from the partner processor . The firmware image may be provided over the private communication link between the processors or alternatively the corrupted processor s internal memory e.g. an internal flash area may be directly updated if the partner processor has the ability to directly update the internal memory by writing directly to a utility that updates a processor s internal memory such as a Joint Test Action Group JTAG interface. Upon completion the corrupted processor has a valid firmware image.

Using these embodiments a programmable hardware device that receives a corrupt firmware image is automatically restored with a valid firmware image. With embodiments when the programmable hardware device encounters an error during normal operation that corrupts its firmware or firmware image the programmable hardware device is able to be restored using a valid firmware image from its own external memory or from a partner . An example of a condition that could corrupt a firmware image during normal operation is an invalid memory access that causes the firmware to execute invalid code or access garbage data. In this case if the programmable hardware device has the capability to identify that it is in a corrupt state during normal operation the programmable hardware device is able to be restored with a valid firmware image. Also if the programmable hardware device reboots because of a timeout e.g. a timeout of a watchdog timer and during its initialization the programmable hardware device identifies that there was a problem the programmable hardware device is able to halt normal boot up to obtain a valid firmware image. A watchdog timer may be described as a timer that is to be periodically reset by hardware and if the timer is not reset the system enters a failure state.

Thus with embodiments a corrupted programmable hardware device is able to obtain a valid firmware image from a partner programmable hardware device and operate with the valid firmware image.

The corrupt firmware image may be restored during firmware update or during normal operation. Embodiments enable rolling back to a valid firmware image. Embodiments also provide a heartbeat mechanism to detect failure of a partner during normal operation.

The described operations may be implemented as a method computer program product or apparatus using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof.

Each of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The described operations may be implemented as code maintained in a computer usable or computer readable medium where a processor may read and execute the code from the computer readable medium. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a rigid magnetic disk an optical disk magnetic storage medium e.g. hard disk drives floppy disks tape etc. volatile and non volatile memory devices e.g. a random access memory RAM DRAMs SRAMs a read only memory ROM PROMs EEPROMs Flash Memory firmware programmable logic etc. . Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The code implementing the described operations may further be implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. . Still further the code implementing the described operations may be implemented in transmission signals where transmission signals may propagate through space or through a transmission media such as an optical fiber copper wire etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signals in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices.

A computer program product may comprise computer useable or computer readable media hardware logic and or transmission signals in which code may be implemented. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the embodiments and that the computer program product may comprise any suitable information bearing medium known in the art.

The term logic may include by way of example software hardware firmware and or combinations of software and hardware.

Certain implementations may be directed to a method for deploying computing infrastructure by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described implementations.

The logic of and describes specific operations occurring in a particular order. In alternative embodiments certain of the logic operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel or operations described as performed by a single process may be performed by distributed processes.

The illustrated logic of and may be implemented in software hardware programmable and non programmable gate array logic or in some combination of hardware software or gate array logic.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The system architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The system architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The system architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the embodiments the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

