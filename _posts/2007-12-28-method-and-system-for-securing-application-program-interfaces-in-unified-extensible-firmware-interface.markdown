---

title: Method and system for securing application program interfaces in unified extensible firmware interface
abstract: A method and system for securing an unified extensible firmware interface application program interface includes establishing a software hook for the application program interface during a pre-boot phase of a computing device and granting or denying access to the application program interface based on a comparison of a user token, which identifies the user, and an access control entry of an access control list associated with the application program interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635664&OS=08635664&RS=08635664
owner: Intel Corporation
number: 08635664
owner_city: Santa Clara
owner_country: US
publication_date: 20071228
---
The 2.1 published Jan. 23 2007 specifies a Unified Extensible Firmware Interface UEFI that provides a software interface between an operating system OS and platform firmware of a computing device. The interface defined by the UEFI specification includes data tables which contain platform information and boot and runtime services which are available to the operating system OS loader and the operating system. The UEFI defines boot services which include text and graphical console support on various devices bus block and file services and runtime services such as date time and NVRAM services. Moreover 1.0 released Oct. 31 2006 defines the firmware interface for chipset initialization.

The open format of the Unified Extensible Firmware Interface allows platform supplier driver authors and other software suppliers to create application program interfaces or protocols for use with the Unified Extensible Firmware Interface. However the extensibility of the Unified Extensible Firmware Interface also creates a larger attack surface and opportunity for the injection of malware into the platform through unprotected application program interfaces.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus based interconnects between components and or one or more point to point interconnects between components. Embodiments of the invention may also be implemented as instructions stored on a machine readable medium which may be read and executed by one or more processors. A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices and others.

The extensibility of the Unified Extensible Firmware Interface allows platform suppliers driver authors and other software suppliers to create application interface programs or protocols to interface with platform devices or other software programs applications or drivers. A system for securing such application interface programs or protocols is illustrated in . In the system a platform supplier or driver author or other software supplier creates one or more application program interfaces . In addition the platform supplier creates a default access control list for each application program interface . As discussed in more detail below the access control list includes one or more access control entries that define which users may access the application program interface and or which other application program interfaces or other Unified Extensible Firmware Interface services may call the application program interface. In some embodiments the access control entries may be embodied as data stored in a database or list which is retrieved in response to the application program interface being called as discussed in more detail below in regard to .

The platform supplier also creates a policy driver which may be used by an administrator or other security personnel to update or modify the access control lists associated with each application program interface . That is the administrator may define the access control entries of each access control list. For example as illustrated in the administrator may establish an access control entry of an access control list that identifies a particular group of users and whether the group of uses are granted or denied access to the application program interface. Additionally the administrator may establish an access control entry that identifies a particular user and whether the user is granted or denied access to the application program interface. Further the administrator may establish an access control entry that defines a default access policy to either grant access or deny access to the application program interface. That is if no matches are established with the other access control entries of the access control list the default access policy is returned. For example in the embodiment illustrated in a user that does not belong to Group would be denied access to the application program interface because the default access policy defined by the access control entry is to deny access. As such the administrator may use the policy driver to maintain the access control lists associated with each of the protected application program interfaces .

In addition to updating and maintaining the access control lists the administrator creates a user token for each user . The user token may be embodied as a data structure that includes data that identifies the user. Additionally the user token may include other data associated with the user. For example as illustrated in the user token may include user identification data group identification list that defines the groups of users to which the particular user belongs and a drive path list that defines whether the particular user can set access policy for the application program interface or protocol installed to the defined drive path and its children.

In use a software hook for each protected application program interface is established. When one of the protected application program interfaces is called by the user the software hook causes the access control list associated with the called application program interface to be retrieved. The token associated with the user is also retrieved and compared to the access control entries of the access control list . Additionally the access control lists of other protected application program interfaces or Unified Extensible Firmware Interface services which are called during the execution of the requested application program interface are accessed and compared to the user token . In this way the least privilege principal is ensured across the entire call stack of the requested application program interface such that an unauthorized user cannot effect privilege escalation by invoking an application program interface that calls a successive denied interface or service.

Based on the comparison of the access control entries and the user token decision to grant or deny the user access to the called application program interface in made. The software hooks for each of the application program interfaces may be stored in a hook database as illustrated in . The hook database defines a number of hook protocols each of which includes a function hook structure an original instance structure a device path and an associated access control list . The function hook structure includes the original called function any pre functions and any post functions . In this way the hook protocol can analyze any additional application program interfaces or other services called by the requested application program interface for which the hook protocol is defined.

Referring now to in use a computing device operated by the user may execute an algorithm or process for securing an Unified Extensible Firmware Interface application program interface. The process begins with block in which the platform of the computing device is initialized. For example the system memory of the computing device may be initialized in block . Additionally in block the software hooks for each protected Unified Extensible Firmware Interface application program interface or protocol is established in block .

Normal pre boot phase operations are continued in block . However during the pre boot phase of the computing device the computing device monitors for the calling of any of the protected Unified Extensible Firmware Interface application program interfaces in block using the software hooks which were established in block . If a protected application program interface is not called or requested normal pre boot operations are continued in block . However if it is determined that a protected application program interface has been called the user token associated with the user of the computing device is retrieved in block . Additionally the access control list for the requested and protected application program interface is retrieved in block . The user token and the access control list may be stored in a memory location such as a reserved memory location in data registers and or on a hard drive or other storage device. Although the blocks and are shown in in a particular sequential order it should be appreciated that the blocks and may be executed in any order or contemporaneously.

In block the next access control entry of the access control list associated with the requested and protected application program interface is retrieved. As discussed above the access control entry may be embodied as data that identifies a particular group of users or a particular user and whether the group of users or user is granted or denied access to the application program interface. Additionally the access control entry may be embodied as a default access policy to either grant access or deny access to the application program interface in the case wherein a match to the user token is not made. In block the access control entry is compared to the user token. As discussed above the user token may include data identify the user and or data identifying the groups to which the user belongs. As such depending upon the type of access control entry the access control entry may be compared to the data identifying the user and or to the data of the user token that identifies the groups to which the user belongs.

If a match between the user token and the current access control entry is made in block the associated access policy i.e. to deny or to grant access to the requested application program is returned in block . However if a match between the user token and the current access control entry is not made in block it is determined whether the current access control entry is the last control entry of the access control list. If not the next access control entry is retrieved in block and compared to the user token in block . However if the current access control entry is the last access control entry the default access policy which may be to grant or deny access to the requested application program interface is returned in block .

It should be appreciated that the process of blocks and may be repeated recursively in those embodiments in which the requested application program interface is configured to call other protected application program interfaces or services. In this way the user is restricted from escalating their associated privileges to access application program interfaces that are restricted from them. Additionally it should be appreciated that although the algorithm has been described above in regard to the pre boot phase or environment of a computing device a similar process may be used to protect Unified Extensible Firmware Interface application program interfaces or protocols that are called during runtime e.g. by being re invoked in a safe mode scenario or virtual instance .

While the disclosure has been illustrated and described in detail in the drawings and foregoing description such an illustration and description is to be considered as exemplary and not restrictive in character it being understood that only illustrative embodiments have been shown and described and that all changes and modifications that come within the spirit of the disclosure are desired to be protected.

