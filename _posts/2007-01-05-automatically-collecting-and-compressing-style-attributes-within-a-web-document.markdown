---

title: Automatically collecting and compressing style attributes within a web document
abstract: A style compressor for improving compression of a web document collects all the style attributes referenced by elements of the web document into a central style repository. The style compressor replaces each reference by each of the elements with a class attribute assigned in the central style repository to the replaced style attributes. Next, the style compressor organizes the style attributes in the central style repository and compresses the style attributes into a minimized selection of class attributes each referencing at least one of the style attributes. The style compressor updates the elements of the web document to reference one or more of the minimized selection of class attributes in the central style repository to produce a shorter, more efficiently organized web document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836396&OS=07836396&RS=07836396
owner: International Business Machines Corporation
number: 07836396
owner_city: Armonk
owner_country: US
publication_date: 20070105
---
The present invention relates in general to improved web document organization. In particular the present invention relates to automatically collecting and compressing style attributes within a web document to generate a smaller more efficiently organized web document.

In many web documents such as Extensible Markup Language XML documents or Hypertext Markup Language HTML documents there are often many elements and many style attributes assigned to each attribute. Particularly within machine generated versions of web documents such as server or client generated dynamic web pages the same style attribute may be assigned multiple times across multiple elements. For example an element may include style attributes such as text align center and font style normal . A different element in the same web document may include the same style attributes text align center and font style normal .

As the number of elements and number of redundant style attributes assigned to elements increases in a document the size of a document increases and the organization of the document is inefficient. A larger inefficiently organized document requires additional storage at a server additional bandwidth for download from a server to a client additional memory for storage at the client and additional processing at the server and the client.

Therefore in view of the foregoing there is a need for a method system and program for automatically organizing and reducing the size of web documents.

Therefore the invention provides for web document organization. The present invention provides for collecting and compressing style attributes within a web document for a smaller more efficiently organized web document.

A style compressor for improving compression of style attributes within a web document collects all the style attributes referenced by elements of the web document into a central style repository. The style compressor replaces each reference by each of the elements with a class attribute assigned in the central style repository to the replaced style attributes. Next the style compressor organizes the style attributes in the central style repository and compresses the style attributes into a minimized selection of class attributes each referencing at least one of the style attributes. The style compressor updates the elements of the web document to reference one or more of the minimized selection of class attributes in the central style repository to produce a shorter more efficiently organized web document.

In collecting the style attributes into a central style repository the style collector detects any redundant selection of style attributes referenced by multiple elements and assigns a single class attribute to the redundant selection of style attributes. In addition in collecting the style attributes into a central style repository the style collector edits the web document to include a single style element in the head element of the web document for storing the central repository.

Prior to compressing the style attributes in the central style repository in one embodiment the style compressor generates a dictionary file including a separate entry for each separate style attribute. The style compressor normalizes the entries in the dictionary file to remove redundant entries alphabetizes the normalized remaining entries and assigns a key to each of the normalized remaining entries. Then the style compressor replaces each of the style attributes in the central style repository with a corresponding key pair in the dictionary file wherein the central style repository is enabled for compressing the sequences of keys to compress the plurality of style attributes in the central style repository into a minimized selection of class attributes each referencing at least one of the style attributes.

In compressing the central style repository the style compressor replaces each reference to a particular style attribute within the central style repository with a same key assigned to the particular style attribute. The style compressor adds an entry for each of the keys to an index file. Next the style compressor scans the central style repository to detect sequential pairs of keys and adds the each sequential pair of keys to the index file. In addition the style compressor scans the central style repository to detect redundant sequences of keys longer than a sequential pair of keys and adds the redundant sequence of keys to the index file. Then the style compressor replaces the central style repository with the minimized number of class attributes representing only the compressed selection of entries from the index file required for matching all the keys in the central style repository.

The style compressor collects central style repositories generated for multiple web documents into a single central style repository. From the single central style repository the style compressor compresses the style attributes into a minimized selection of class attributes each referencing at least one of the style attributes such that multiple web documents share a same compressed central style repository.

With reference now to a block diagram illustrates one example a network environment for supporting compressed web document storage and downloads in which the present invention may be implemented. It is important to note that network environment is illustrative of one type of network environment however other network environments may support compressed web document storage and downloads. In addition it is important to note that the distribution of systems within network environment is illustrative of a distribution of systems however other distributions of systems within a network environment may be implemented.

As illustrated multiple systems within network environment may be communicatively connected via network which is the medium used to provide communications links between various devices and computer communicatively connected. Network may include permanent connections such as wire or fiber optics cables and temporary connections made through telephone connections and wireless transmission connections for example. Network may represent both packet switching based and telephony based networks local area and wide area networks public and private networks. Additionally network environment supports multiple types and levels of protocols for facilitating storage transmission and download of web documents.

Network environment may implement multiple types of network architectures. In one example network environment may be implemented using a client server architecture where computing systems requesting data or processes are referred to as clients and computing systems processing data requests and processes are referred to as servers. In another example network environment may be implemented in a peer to peer network architecture. It will be understood that other types of network architectures and combinations of network architectures may be implemented.

In the embodiment as illustrated a server system includes a web documents database . Server system may download one or more web documents from web documents database to one or more client systems such as client system or client system or other systems communicatively connected via network . In addition server system may access a script from script database and generate a dynamic web document for download to one or more client systems via network . In particular it will be understood that server system includes software and hardware elements that enable server system to receive requests for data access requested data in web documents database and other databases and data storage systems generate dynamic web documents and download the web documents and other data to one or more requesting systems. For example in generating dynamic web documents server system may run scripts or other programs from script database using a common gateway interface CGI where the scripts are based in one or more server side languages such as Hypertext Preprocessor PHP Perl and JAVA Server Pages JSP . For example server system may run middleware such as Websphere Websphere is a registered trademark of International Business Machines Corporation software that manages dynamic web page generation.

Each client system such a client system and client system may include a reader or other application enabled to receive and process web documents. In one example a browser running on client system receives processes and displays web documents as a web page. In addition web documents downloaded from server system to client system may include client side scripts or server system may download scripts from scripts database to client system . Browser upon detection of script runs script to generate dynamic web documents. For example browser may run JAVA Applets or FLASH programs received from server to generate client side dynamic web documents for rendering within a web page display. It will be understood that other types of readers may be implemented on client system and client system to enable processing and display of types of web documents other than web pages.

According to an advantage of the invention a style compressor compresses the style attributes in web documents to generate a smaller more efficiently organized web document. The style compressor may compress the style attributes in a single web document or concurrently in multiple web documents. In addition as illustrated in the examples of style compressor at server system style compressor at client system and style compressor at client system a style compressor may function within one or more of the software layers of a computer system at one or more systems within network environment .

In one illustrative example a user may upload web documents to web documents database . As a user uploads web documents to server system style compressor may automatically compress each web document before storing the web document in web documents database . In particular style compressor may operate as a layer of firmware or other controllers for controlling the interface enabling users to upload web documents to server system . In particular a web site host including personal web page hosts such as blog hosts may automatically compress subscriber designed web documents to reduce required storage space bandwidth and other resource usage.

In another example as described responsive to a request from a client system server system may generate dynamic web documents from web documents and scripts accessed from web documents database and scripts database . Style compressor may automatically compress dynamic web documents before downloading the dynamic web documents to the requesting client system.

In yet another illustrative example as server system receives requests for selections of web documents from web documents database style compressor may track the number of requests for one or a group of web documents. Once style compressor detects a threshold number of accesses to a web document or group of web documents style compressor may automatically trigger compression of the web document or group of web documents. Additionally style compressor may track other types of statistics about web documents compare the statistics with thresholds and trigger compression of web documents when a threshold is reached.

In another illustrative example a user may request access to a web page via browser . Browser requests the web page from server system . In one embodiment accessing the web page requires server system to download one or more of the web documents in web documents database to browser . Browser may run scripts included within web documents to generate dynamic web documents. Style compressor may compress web documents upon receipt and may compress dynamic web documents once generated at the client side. Although style compressor is depicted as a function of browser it will be understood that style compressor may also be a stand alone application at client system .

In yet another illustrative example client system includes operating system with style compressor as a function of operating system . In one example operating system detects access to web documents at client system whether by a browser or other application operating system triggers style compressor to compress received web documents and client side generated dynamic web documents.

The term web document as used herein may refer to documents of one or more document types or file formats complying with one or more language protocols which may be transferred over multiple network communication protocols. A web document may consist of an attachment to another document or message. A web page is one type of web document. Therefore it is important to note that while the examples of web documents illustrated throughout refer to HTML documents and Cascading Style Sheet CSS documents the method system and program described throughout may apply to additional or alternate types of web documents.

With reference now to a block diagram illustrates a computer system in which the present invention may be implemented. The controllers and systems of the present invention may be executed in a variety of systems including a variety of computing systems such as computer system communicatively connected to a network such as network .

Computer system includes a bus or other communication device for communicating information within computer system and at least one processing device such as processor coupled to bus for processing information. Bus preferably includes low latency and higher latency paths that are connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server computer system may include multiple processors designed to improve network servicing power. Where multiple processors share bus an additional controller not depicted for managing bus access and locks may be implemented.

Processor may be a general purpose processor such as IBM s PowerPC processor that during normal operation processes data under the control of an operating system application software middleware not depicted and other code accessible from a dynamic storage device such as random access memory RAM a static storage device such as Read Only Memory ROM a data storage device such as mass storage device or other data storage medium.

In one embodiment the operations performed by processor may control a style compressor as depicted in the operations of flowcharts of and other operations described herein. Operations performed by processor may be requested by operating system application software middleware or other code or the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

The style compressor of the present invention may be provided as a computer program product included on a computer readable or machine readable medium having stored thereon the computer readable program that when executed on computer system causes computer system to perform a process according to the present invention. The terms computer readable medium or machine readable medium as used herein includes any medium that participates in providing instructions to processor or other components of computer system for execution. Such a medium may take many forms including but not limited to storage type media such as non volatile media and volatile media and transmission media. Common forms of non volatile media include for example a floppy disk a flexible disk a hard disk magnetic tape or any other magnetic medium a compact disc ROM CD ROM or any other optical medium punch cards or any other physical medium with patterns of holes a programmable ROM PROM an erasable PROM EPROM electrically EPROM EEPROM a flash memory any other memory chip or cartridge or any other medium from which computer system can read and which is suitable for storing instructions. In the present embodiment an example of a non volatile medium is mass storage device which as depicted is an internal component of computer system but will be understood to also be provided by an external device. Volatile media include dynamic memory such as RAM . Transmission media include coaxial cables copper wire or fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio frequency or infrared data communications.

Moreover the function management tool of the present invention may be downloaded or distributed as a computer program product wherein the program instructions may be transmitted from a remote computer such as a server to requesting computer system by way of data signals embodied in a carrier wave or other propagation medium via network to a network link e.g. a modem or network connection to a communications interface coupled to bus . In one example where processor includes multiple processor elements is a processing task distributed among the processor elements whether locally or via a network may represent a consumer program product where the processing task includes program instructions for performing a process or program instructions for accessing JAVA JAVA is a registered trademark of Sun Microsystems Inc. objects or other executables for performing a process. Communications interface provides a two way data communications coupling to network link that may be connected for example to a local area network LAN wide area network WAN or directly to an Internet Service Provider ISP . In particular network link may provide wired and or wireless network communications to one or more networks such as network . Further although not depicted communication interface may include software such as device drivers hardware such as adapters and other controllers that enable communication. When implemented as a server computer system may include multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller for example. In this manner computer system allows connections to multiple clients via multiple separate ports and each port may also support multiple connections to multiple clients.

Network link and network both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system may be forms of carrier waves transporting the information.

In addition computer system may include multiple peripheral components that facilitate input and output. These peripheral components are connected to multiple controllers adapters and expansion slots such as input output I O interface coupled to one of the multiple levels of bus . For example input device may include for example a microphone a video capture device a card reader a body scanning system a keyboard a mouse or other input peripheral device communicatively enabled on bus via I O interface controlling inputs. In addition for example an output device communicatively enabled on bus via I O interface for controlling outputs may include for example one or more graphical display devices audio speakers and tactile detectable output interfaces but may also include other output interfaces. In alternate embodiments of the present invention additional or alternate input and output peripheral components may be added.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

With reference now to a block diagram illustrates components of a style compressor. It will be understood that style compressor may include additional or alternate components in additional embodiments.

In the example style compressor includes a web language reader and a web language editor . Web language reader reads documents implementing multiple web languages. For example web language reader may read documents including elements in HTML and CSS. Web language editor may edit or generate web documents implementing multiple web languages. For example web language editor may automatically edit or generate HTML or CSS within a web document or in a new web document.

For purposes of compressing web documents web language reader scans a web document to identify each list of one or more style attributes referenced by one or more elements within the web document. Web language editor collects the identified lists of style attributes and generates a central style repository of the identified style attributes. In one example the central style repository is placed in a document separate from the scanned web document. In another example within a scanned HTML document or XML document the central style repository may be placed in the head element of the scanned web document as a single style element.

Next web language editor assigns each list of style attributes within the central style repository to a class identifier. Web language editor replaces each list of style attributes referenced by an element with the class identifier referring to the list of style attributes in the central style repository. Thus each element within a web document that previously referred to a style attribute is edited to refer to a class attribute.

In addition style compressor includes a compression controller . Compression controller reorganizes the lists of style attributes within the central style repository into sequences of keys for optimum compression. If style attributes are removed or reorganized during reorganization and compression then compression controller updates the class attributes referred to by the elements within the document to reflect the class attributes in the compressed and reorganized central style repository. In particular in the embodiment compression controller is described as applying a Lempel Ziv algorithm to compress sequences of keys representing style attributes in the central style repository into a minimized number of class attributes. In other embodiments compression controller may apply other compression algorithms to minimize the number of class attributes required to reference the sequences of style attributes.

Style compressor includes an output controller for controlling how the central style repository for the updated web document is output. In one example the central style repository is placed in the head of a web document. In another example the central style repository generated from a web document is placed in a separate CSS document and the web document is edited to include a reference to the CSS document.

Additionally style compressor includes a compressor preferences application programming interface API . Through compressor preferences API a user may select preferences for running style compressor . Compressor preferences API may store selections of user preferences in a user preferences file . In particular as will be further described compression controller produces a dictionary file while compressing a web document and a user may select through compressor preferences API to store dictionary files in a dictionary file database or reuse dictionary files from dictionary file database when compressing a web document.

Referring now to a block diagram illustrates the multiple reorganization and compression phases performed by the style compressor. As will be further described in detail in the examples depicted in . style compressor performs multiple stages of reorganization and compression of a web document. While the combination of stages produces more efficient reorganization and compression in other embodiments one or more of the stages may be performed by style compressor to generate a reorganized and compressed web document.

In the example in a central style repository generation stage web language reader and web language editor scan and edit a document to generate a central style repository of class attributes each assigned a non redundant list of one or more style attributes and to replace each element within the web document referencing a list of style attributes with a reference to the associated class attribute. In generating central style repository web language editor may alphabetize style attributes for more efficient identification of redundant lists of style attributes.

During central style repository generation stage organizing the lists of style attributes within a web document under class attributes improves the organization of the web document. In addition during central style repository generation stage removing any redundant lists of style attributes provides a first level of compression of the web document.

In a central style repository modification stage compression controller generates a separate dictionary file of each separate style attribute in a web document and normalizes the style attributes in dictionary file to remove redundant copies of a same single style attribute. In addition compression controller orders the style attributes in dictionary file such as by alphabetizing the entries and assigns each entry a key such as an alphanumeric letter. Next compression controller replaces each reference to a style attribute in central style repository with the key paired to the style attribute in dictionary file to generate modified central style repository .

In one embodiment central style repository modification stage reorganizes and compresses the web document in a manner that enables compression controller to most efficiently run a compression algorithm to further compress the references to style attributes. In particular central style repository modification stage reorganizes and compresses the web document to generate sequences of keys within modified central style repository upon which compression controller can run the Lempel Ziv algorithm or other key compression algorithm. In other embodiments compression controller may reorganize style attributes into other formats most efficient for a type of data compression algorithm to be applied.

In another embodiment however dictionary file may be generated into a new web document associated with a single or multiple web documents. By reorganizing style attribute references in a web document to refer to a key pair in a dictionary file web document particularly when compression controller compresses multiple web documents simultaneously the coding size of each web document is reduced by replacing multiple references to a same style attribute with a single key.

In yet another embodiment following central style repository modification stage compression controller may store a web document with modified central style repository and complete the compression of the web document based on a shared dictionary file at a point in the future. For example compression controller may continue to reuse and update dictionary file across multiple web documents and only complete the final stage of compression once a web document is requested or once all web documents in a grouping of web documents have been modified.

Finally in a central style repository compression stage compression controller runs a compression algorithm on the sequences of keys paired to style attributes in modified central style repository and generates compression table index . In one example compression controller runs the Lempel Ziv algorithm which scans the sequences of keys in modified central style repository adding sequences of keys to compression table index and identifying longer redundant key sequences. Based on the key sequences recorded in compression table index compression controller replaces modified central style repository with a minimized number of class attributes each referencing applicable sequences of style attributes from compression table index . Next compression controller updates the elements of the web document to refer to the class attributes in compressed central style repository .

In one example in running the Lempel Ziv algorithm compression controller first initializes compression table index with all single character strings or each key. Next as compression controller scans the sequences of keys in modified central style repository compression controller stores each two character string or pair of keys in compression table index . Next whenever compression controller reads a previously encountered already stored character string then the code for the string concatenated with the next character in the sequence is stored in the table. By running the Lempel Ziv algorithm compression controller efficiently determines the minimum number of entries required to represent the sequences of keys in modified central style repository . It will be understood that compression controller may perform additional or alternate steps in applying the Lempel Ziv algorithm or other data compression algorithm to compress modified central style repository .

With now to exemplary code illustrates the result of web language editor editing a web document to generate a central style repository. In the example code is illustrative of an HTML web document with multiple elements. In particular in code within the body element types of elements include a heading h1 at reference numeral a paragraph P at reference numeral a paragraph SPAN at reference numeral and a heading h2 at reference numeral . It will be understood that while the web document illustrated shows examples of the element types of heading and paragraph a web document may include additional or alternate types of elements such as a list element and may include multiple instances of each type of element.

Each element within code refers to a style attribute. For example element hi at reference numeral refers to multiple style attributes illustrated at reference numeral element P illustrated at reference numeral refers to multiple style attributes illustrated at reference numeral element SPAN illustrated at reference numeral refers to multiple style attributes illustrated at reference numeral and element h2 at reference numeral refers to multiple style attributes illustrated at reference numeral . In particular in the example text align center is one style attribute within the list of style attributes illustrated at reference numeral . In addition in the example the style attributes are described by the CSS specifications and describe properties such as color font alignment and spacing. It will be understood that in other embodiments other style specifications may describe the style attributes and that style attributes may describe additional properties.

Web language reader reads code and identifies each of the style attributes illustrated at reference numerals and . Web language editor edits code to generate code where code includes a central style repository as a single style element of the head element of the web document identified as . In the example central style repository includes each of the style attributes illustrated at reference numerals and however each of the sets of style attributes are assigned to a separate class attribute in central style repository . In the example web language editor assigns the style attributes illustrated at reference numeral to a class attribute s1 as illustrated at reference numeral the style attributes illustrated at reference numeral to a class attribute s2 as illustrated at reference numeral and the style attributes illustrated at reference numeral to a class attribute s3 as illustrated at reference numeral .

In addition web language editor edits the elements within code to replace the style attribute references within the body element to class attribute references correlating with the class attribute assignments in central style repository . For example web language editor replaces the style attributes illustrated at reference numeral with the class attribute s1 as illustrated at reference numeral the style attributes illustrated at reference numeral with the class attribute s2 as illustrated at reference numeral and the style attributes illustrated at reference numeral with the class attribute s3 as illustrated at reference numeral .

The set of style attributes illustrated at reference numeral is the same as the set of style attributes illustrated at reference numeral . As web language editor adds sets of style attributes assigned to class attributes within central style repository web language editor detects redundant sets of style attributes such as the style attributes illustrated at reference numeral and does not generate an additional class attribute for the redundant set of style attributes. In addition as web language editor replaces the style attribute illustrated at reference numeral with a class attribute web language editor replaces the style attribute with class attribute s1 as illustrated at reference numeral . Therefore in a web document with multiple repeated sets of style elements by replacing redundant lists of style attributes with a same class attribute web language editor reorganizes and compresses the code in the web document.

Referring now to a block diagram illustrates a document object model DOM of the nodes of a web document after the web language editor replaces references by elements to style attributes with references to class attributes.

First as illustrated at reference numeral a DOM representation of an HTML document includes a head element and a body element. Under the head element as illustrated at reference numeral a single style element is defined with one or more class attributes however under the body element each of the header and paragraph elements reference style attributes. For example the hi element illustrated at reference numeral is illustrative of a header element referencing a style attribute. In an alternate embodiment one or more of the body elements may reference one or more of the class attributes of the style element illustrated at reference numeral . In addition in an alternate embodiment a DOM may not initially include a style element under the head element.

As a result of style compressor compressing the web document represented by the DOM illustrated at reference numeral under the head element web language editor builds the central style repository under the single style element by creating classes of style attributes composed of the style attributes referenced by the elements of the body element. In particular web language editor adds one or more new class attributes to the style element and assigns the selections of style attributes referenced by the elements of the body element to the new class attributes as illustrated at reference numeral . Because the style attributes are moved under class attributes of the single style element under the body element web language editor replaces the style attributes previously assigned to each element under the body element with a reference to the corresponding new class attribute to which the style attributes are assigned. For example the h1 element illustrated at reference numeral is illustrative of a header element under the body element updated to reference one of the new class attributes.

With reference now to exemplary code illustrates a dictionary file and a central style repository when sorted by the compression controller. As previously described once web language editor generates a central style repository compression controller performs a next reorganization and compression phase by generating a dictionary file with a separate entry for each style attribute reference in a central style repository and replacing the style attributes within the central style repository with the references in the dictionary file.

In the illustrated example a dictionary file includes the sorted style attributes from central style repository each assigned to a key or other value. In the example each style attribute is assigned to a single alphanumeric key. It will be understood compression controller may assign additional or alternate types of keys or other values the style attributes.

In particular in generating dictionary file compression controller normalizes the style attributes to remove redundant style attributes. For example in central style repository class attribute s1 and class attribute s2 include a same style attribute text align center therefore in normalizing the style attributes from central style repository compression controller only includes a single reference to the style attribute text align center in dictionary file .

In addition to normalizing the style attributes within dictionary file compression controller may perform additional ordering of the remaining style attributes for improving organization of the document. For example compression controller may alphabetize the remaining style attributes as illustrated within dictionary file .

Once compression controller generates dictionary file compression controller updates central style repository to reflect the key paired with each style attribute as illustrated by modified central style repository . For example compression controller replaces the style attributes illustrated at reference numeral with the corresponding key pairs as illustrated at reference numeral the style attributes illustrated at reference numeral with the corresponding key pairs as illustrated at reference numeral and the style attributes illustrated at reference numeral with the corresponding key pairs as illustrated at reference numeral .

By replacing class elements within the central style repository with the key pairs to the style attributes the style attributes are efficiently organized for the application of one or more compression algorithms. For example with reference now to a compression table index includes the results of compression controller running the Lempel Ziv algorithm on the entries in dictionary file and the ordered keys in modified central style repository .

In the example in running the Lempel Ziv algorithm compression controller includes a separate entry in compression table index for each of the original dictionary entries in dictionary file as illustrated in entries 0 12 in compression table index . Next compression controller scans the sequences of keys in modified central style repository and adds progressively longer sequences of keys to the compression table as compression controller detects redundancies in sequences of keys. Compression controller may perform one or more passes of the ordered keys in modified central style repository and the compression table index entries in applying the Lempel Ziv algorithm. Thus it will be understood that the entries illustrated in compression table index are illustrative of entries that may be generated in compression table index however additional or alternate entries may be entered.

For example the key pairs illustrated at reference numeral and the key pairs illustrated at reference numeral both include a sequence of CDE . As compression controller scans the sequence of key pairs illustrated at reference numeral compression controller adds entry 13 CD and entry 14 DE . However as compression controller reaches the sequence of key pairs illustrated at reference numeral compression controller detects there is already entry 13 CD and adds a longer sequence of entry 17 CDE .

With reference now to exemplary code illustrates the central style repository and elements of a compressed web document. In the example once compression controller completes compression of compression table index then compression controller replaces modified central style repository with the entries in compression table index as indexed into dictionary .

In the example compression controller replaces modified central style repository with compressed central style repository . Compressed central style repository includes class attributes numbered to correspond with applicable entries from compression table index and referencing corresponding style attributes from dictionary file .

In one example illustrated at reference numeral the class attribute s1 in modified central style repository is replaced with the a class attribute with the same name s1 but referencing the style attribute assigned to the letter B assigned to the 1 index entry within compression table index . The style attribute assigned to the letter B represents the style attribute font family serif in dictionary file . Therefore as illustrated at reference numeral the class attribute s1 in compressed central style repository refers to style attribute font family serif .

In another example illustrated at reference numeral modified central style repository is replaced with a class attribute s17 corresponding to index entry 17 within compression table index . Index entry 17 is indexed to CDE . The style attributes associated with CDE from dictionary file are font size 12 pt font style normal and font weight normal . Therefore as illustrated at reference numeral the class attribute s17 in compressed central style repository refers to style attributes font size 12 pt font style normal font weight normal .

Once compression controller replaces modified central style repository with compressed style repository compression controller then updates the styles in the document elements with the class attributes in compressed style repository as illustrated within the elements of modified web document body .

For example header hi previously referred to class attribute s1 as illustrated at reference numeral . Class attribute s1 referenced the style attributes assigned to letters CDEL in modified central style repository . To update the class attribute of header h1 as illustrated at reference numeral compression controller edits header h1 to reference class attribute s17 which references the style attributes assigned to letters CDE and to reference class s11 which references the style attribute assigned to letter L.

In another example paragraph P previously referred to class attribute s2 as illustrated at reference numeral . Class attribute s2 referenced the style attributes assigned to letters ACDEGHIJKLM . To update the class attribute referenced by paragraph P as illustrated at reference numeral compression controller edits paragraph P to reference class attribute s0 which references the style attribute assigned to letter A to reference class attribute s17 which references the style attributes assigned to letters CDE to reference class attribute s19 which references the style attributes assigned to letters GH to reference class attribute s21 which references the style attributes assigned to letters IJ to reference class attribute s23 which references the style attributes assigned to letters KL and to reference class attribute s12 which references the style attribute assigned to letter M .

In yet another example paragraph SPAN previously referred to class attribute s3 as illustrated at reference numeral . Class attribute s3 referenced the style attributes assigned to letters BCDEF . To update the class attribute referenced by paragraph SPAN as illustrated at reference numeral compression controller edits paragraph SPAN to reference class attribute s1 which references the style attribute assigned to letter B to reference class attribute s17 which references the style attributes assigned to letters CDE and to reference class attribute s5 which references the style attribute assigned to letter F .

Referring now to a block diagram illustrates an example interface through which a user may select style compressor preferences. In the example compressor preferences API enables compression preferences interface through which a user may select preferences using inputs associated with placement of cursor . A user may select preferences through compression preferences interface for a particular web document compression a group of web document compressions or web document compressions in general. Currently selected user preferences are stored in user preferences database .

Compression preferences interface includes a first preferences selection of dictionary preferences . Under dictionary preferences a user may select an option of save discard or prompt . By selecting to save dictionaries dictionary files generated by compression controller are stored in dictionary database . By selecting to discard dictionaries dictionary files generated by compression controller are discarded after the compression of a web document is completed. By selecting to prompt compressor preferences API triggers a prompt to a user once a dictionary file is generated to select whether to save the dictionary file from the compression. Dictionary files stored in dictionary database may be reused when compressing future web documents. In particular compressor preferences API may prompt a user to select a dictionary to reuse from dictionary database prior to compressing a web document.

In addition compression preferences interface includes a second preferences selection of style set preferences . Under style set preferences a user may select an option of internal to document and separate CSS stylesheet . By selecting internal to document output controller stores the compressed central style repository as a class element of a web document. By selecting separate CSS stylesheet output controller stores the compressed central style repository in a separate CSS document and adds a reference to the CSS document to a referring web document.

Compression preferences interface includes a third preferences selection of compression type preferences . Under compression type preferences a user may select an option of Lempel Ziv L Z compression or other types of compression . The selected compression type preference specifies the compression algorithm for compression controller to apply to a modified central style repository with class attributes referencing dictionary entries.

With reference now to a block diagram illustrates one example of a style compressor compressing the style attributes across multiple web documents. In addition to reorganizing and compressing the styles for a single web document style compressor may reorganize and compress multiple web documents to generate a single central style repository for sharing across the multiple web documents. By compressing web documents to share a single central style repository a single CSS can be generated for all the pages of a web site.

In one example a web service may enable a user may upload all the HTML documents and any CSS documents for a website and the web service then runs style compressor to generate a single CSS document for application to all the HTML documents of the user s website. For example a web host may include a service for compressing websites uploaded to the web hosting server. In another example a web service may offer style compressor for download to a user s local system for running at the local system to generate a single CSS document for application to all the HTML documents for a user s website.

In particular in the example style compressor receives web documents DOC CSS and DOC . DOC refers to styles in CSS . DOC includes styles assigned to elements within the body of the web document.

Compression controller of style compressor generates a single dictionary file with the style attributes from DOC CSS and DOC . From dictionary file compression controller generates a single compression table index . Then from compression table index compression controller generates a single compressed central style repository output in each of web documents compressed CSS and compressed CSS . In addition compression controller updates DOC to refer to compressed CSS and modifies DOC to DOCA where the elements of DOCA reference class attributes which in compressed CSS are assigned to one or more style attributes. Compression controller also updates DOC to refer to compressed CSS and modifies DOC to DOCA where the elements of DOCA reference class attributes which in compressed CSS are assigned to one or more style attributes.

In another example a service provider that stores web documents for multiple subscribers such as a blog or other personal website service provider may automatically run style compressor on multiple subscriber web documents to detect patterns and more style templates with subscriber preferred styles. In particular as style compressor collects style attributes into a central style repository list and then collects the central style repository lists for each web document into a dictionary file style compressor may keep a count of the number of redundant style attributes in each web document and keep a count of the number of redundant style attributes across the multiple web documents. From the counted redundant style attributes a service provider may determine the style attributes most used and least used and design templates for customers based on the gathered information.

Referring now to a high level logic flowchart depicts a processing and program for reorganizing and compressing the style attributes in at least one web document. In the example the flowchart starts at block and thereafter proceeds to block . Block depicts collecting style attributes from all document elements of a web document into a central style repository. Next block illustrates replacing the element style attributes with class attribute references defined in the central style repository. Thereafter block depicts reorganizing and compressing all style attributes in the central style repository by applying the Lempel Ziv algorithm for compressing strings of style attributes into a minimized number of class attributes. Next block illustrates updating each document element to reference the class attributes in the compressed central style repository. Thereafter block depicts outputting the modified web document referencing or incorporating the compressed central style repository and the process ends.

With reference now to a high level logic flowchart illustrates a process and program for performing each of the phases of reorganization and compression of a web document. In the example the flowchart starts at block and thereafter proceeds to block .

In a first phase block depicts collecting the element references to style attributes from a web document into a central style repository. Next block depicts assigning each selection of style attributes to a class attribute. Thereafter block illustrates replacing the style attributes referenced by each element with a corresponding class attribute assigned in the central style repository and the process passes to block .

In a second phase block depicts collecting a dictionary file with an entry for each style attribute referenced in the central style repository. Next block illustrates normalizing and sorting the dictionary list and assigning a key to each remaining entry. Thereafter block depicts generating a modified central style repository by replacing each style attribute with a key pair from the dictionary file and the process passes to block .

In a third phase block depicts running a data compression algorithm such as the Lempel Ziv algorithm to compress the key sequences in the modified central style repository into a minimized number of class attributes each referencing one style attribute or a sequence of style attributes from among the key sequences. Next block illustrates updating the elements of the web document to reference the class attributes of the compressed central style repository and the process ends.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

