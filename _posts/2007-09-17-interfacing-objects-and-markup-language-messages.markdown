---

title: Interfacing objects and markup language messages
abstract: A method of automatically generating a markup language message from an application specific interface object, as well as generating an application specific interface object from a markup language message is provided. The method can include receiving an application specific interface object and identifying an object table specified therein. Objects listed in the object table can be automatically identified. The objects can be serialized by representing the objects in the markup language message. The resulting markup language message can be a representation of the application specific interface object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730162&OS=07730162&RS=07730162
owner: International Business Machines Corporation
number: 07730162
owner_city: Armonk
owner_country: US
publication_date: 20070917
---
This application is a divisional application of and accordingly claims the benefit of U.S. application Ser. No. 10 103 001 filed in the U.S. Patent and Trademark Office on Mar. 21 2002 issued as U.S. Pat. No. 7 305 455 on Dec. 4 2007.

The invention relates to the field of application integration and more particularly to the generation of application interfaces which support standard and user defined application data objects.

When interfacing two or more applications many different problems can arise. This is especially true in the case where disparate enterprise resource planning ERP systems are interfaced through a middleware system. Importantly both data issues and application programming interface API issues must be resolved before the applications can interact effectively. Oftentimes API issues arise because ERP system interfaces can be customized to such a large extent to suit the particular business needs of each customer. In addition to API modifications the underlying data model of many ERP systems also can be modified to suit a customer s specific requirements. Such is the case for example with the Ariba Buyer procurement application which is part of a comprehensive business to business platform available from Ariba Inc. of Sunnyvale Calif. Because the Ariba Buyer data model can be modified to meet each customer s specific requirements the interfaces and associated meta data objects describing those interfaces also are unique.

Further complicating the issue is that some ERP systems require additional data to properly interface with other applications. For example if the ERP system is to interface with an accounting application a data structure referred to as a variant can be defined within the ERP system for storing information which is specific to the accounting application. The accounting variant can hold information that is pertinent to the ERP system as well as certain information that is specific to the accounting application to be interfaced with the ERP system. The inclusion of such information within an ERP system leads to further customization of the underlying data model and APIs.

Because of the high degree of API and data model customization within ERP systems and applications developers have turned away from developing a standard integration interface capable of meeting each customer s needs. Instead developers have embraced several different techniques for interfacing ERP systems and or applications to messaging middleware. One technique frequently relied upon by developers has been the development of custom coded solutions. Conventional custom coded solutions however frequently do not allow for future customization or enhancements to the ERP system without creating new custom code. In consequence accommodating for customer modifications and variants can be problematic when implementing a custom interface solution.

Another technique for developing integration interfaces has been to capture application meta data in a database repository. As is known to those skilled in the art meta data can provide a description of an interface to an application in this case an ERP system interface object. One benefit of the database technique is that all of the ERP system meta data is contained within a central repository. Still the database technique does have disadvantages. In particular the use of a database introduces another potential point of failure into a system. Another disadvantage of the database technique is that the overall runtime performance of a system can be decreased due to the frequent calls to the database to access the ERP system meta data necessary for processing events. Finally the customer needs specific knowledge of the application interface which may require the employment of specialized information technology personnel.

The invention disclosed herein provides a markup language message and application specific object interface. In particular the present invention enables enterprise resource planning ERP systems and applications to interact with one another using a single flexible interface solution rather implementing a series of custom coded interfaces. As a result the present invention does not require a meta data repository for operation. The present invention can dynamically generate a markup language representation of an ERP system interface object as well as generate and process a markup language representation of an interface object.

The present invention can serialize an interface object to an extensible markup language XML representation thereby creating a non customer specific application interface. The serialization of the interface object can encapsulate any custom changes of the particular object into a format which can more readily be transformed using various tools such as adapter builders XML editors and interactive development tools. In consequence the information that is needed to generate or process an XML message is available at runtime. The application interface also is reusable and need not be enhanced as a result of customization of an ERP system.

One aspect of the present invention can include a method of automatically generating a markup language message for example an XML message from an application specific interface object. The method can include receiving an application specific interface object and identifying an object table specified by the application specific interface object. A key for the object table can be identified for accessing entries of the object table. Objects listed in the object table can be automatically identified.

The objects can be processed to determine whether the objects represent a subclass. If so the subclass can be represented as a parent element within the markup language message. Additionally attributes of the subclass can be identified and represented as sub elements of the parent element within the markup language message. Non subclass data objects can be represented as single entries in the markup language message. Accordingly the objects can be serialized by representing the objects in the markup language message such that the resulting markup language message is a representation of the application specific interface object.

Another aspect of the present invention can include a method of generating an application specific interface object from a markup language message representing the application specific interface object. The method can include determining the identity of the application specific interface object as specified by the markup language message. The markup language message which can be an XML message can be parsed to identify objects and associated attributes of the application specific interface object represented by the markup language message. For example the parsing step can include comparing elements of the markup language message to determine a data type of the objects specified by the elements and determining whether the objects represent a subclass by identifying sub elements associated with the compared elements representing objects. If the application specific interface object is determined to be a subclass then the sub elements can be recursively processed and represented as another object in the object table. In any case the identified objects and associated parameters can be included within an object table to generate the application specific interface object according to the markup language message and the determined objects and associated attributes.

The invention disclosed herein provides a markup language and application specific object interface. In particular the present invention enables enterprise resource planning ERP systems and applications to interact with one another using a single flexible interface solution rather than implementing a series of custom coded interfaces or utilizing a database for housing meta data. According to the present invention markup language representations of ERP system interface objects can be dynamically generated and ERP system interface objects can be dynamically generated and processed from markup language messages representing the interface objects.

The ERP system can include an interface which allows user defined channels to listen for triggered events or interface objects that are used to provide data to external systems and or applications. The ERP system can initiate a process through an integration event. The process can communicate through the channel that registers a subscription for this event and accordingly the outbound interface object can be provided via the registered channel. Each integration event can specify an integration schema to represent the parameters for sending data to an external system for example in an outbound object as well as parameters for receiving data from an external system. The ERP system further can include an application programming interface defining an object interface for receiving inbound data from external systems and or applications.

The integration system can translate one proprietary ERP system message format whether an object or a markup language message such as an extensible markup language XML message representing an object to another proprietary ERP system message format. Through its various software components the integration system can provide a communication mechanism between applications on different platforms. Thus the integration system can provide messaging infrastructure to facilitate interactions between the ERP system and additional ERP systems and or applications. The integration system can include a message queue for interacting with the ERP system . A dynamic interface also can be included for processing received data objects and generating XML representations of those objects. The dynamic interface further can generate data objects from XML representations of the data objects.

The integration system can be configured as a listener for particular events of the ERP system . Thus in operation the ERP system can provide interface object for example an Ariba Buyer Java object to the integration system . The interface object can be published to the dynamic interface . The dynamic interface then can process the interface object to generate an XML representation for example XML message of the received interface object . The XML message then can be format converted or used to generate information which is formatted for use by another different ERP system or application.

XML message can be an XML representation of information received from another ERP system or application. In that case the dynamic interface can generate an ERP system object for example an Ariba Buyer Java object according to the XML message . The resulting interface object can be passed to the ERP system .

In step in the case where the object table is specified as a hash table a key for the object table can be obtained. The key for example can be located at a predetermined location within the interface object or specified by a predetermined parameter of the interface object. In any case having identified the object table an XML representation of the received interface object can be generated. Accordingly in step a table entry can be identified from the object table. In step the object specified by the table entry can be identified. Beginning in step the parameters of the object identified in step can be queried. For example in step a determination can be made as to whether the object is a subclass. If so the method can continue to step . If not the method can continue to step where the object can be added to the XML message being generated as a single entry or element.

If the object was determined to be a subclass in step the subclass can be added as an element of the XML message being generated. Accordingly in step the attributes of the subclass can be recursively processed. More specifically the attributes of the subclass can be added to the XML message being generated as sub elements of their parent element. In step a determination can be made as to whether additional entries in the object table remain to be processed. If so the method can loop back to step to identify a next object table entry. The method can continue until each of the table entries has been processed.

Upon completion of the method of an XML representation of the received ERP system interface object has been generated. Notably serializing the interface object to XML in this fashion can create a non customer specific application interface. In particular the serialization of the interface object encapsulates any custom changes of the particular interface object into a format which can more readily be transformed using various tools such as adapter builders XML editors and interactive development tools. Pseudo code illustrating the generation of an XML representation of an interface object is provided in Appendix A.

The flow chart of indicates that the elements and sub elements can be added to the XML message as the classes and subclasses of the interface object are processed. Those skilled in the art will recognize that the elements and sub elements need not be added to the XML message as the classes and subclasses are processed. Rather the elements and sub elements can be temporarily stored and periodically written to the XML message or written to the XML message after processing the entire interface object.

In step a particular type of data object can be identified from the XML message. The data object can be an object which is specific or proprietary to the ERP system to which the interface object to be generated will be provided. In step an object to be included in the object table of the interface object can be identified from the elements of the XML representation or message. In step the data type of the object can be identified from the XML representation. Attribute data specified by one or more elements of the XML representation can indicate the data type of the object represented by the XML message. For example the XML message can be parsed to determine whether the interface object represents a string or object data type. In step a further determination can be made as to whether the identified object is a subclass. The subclass determination can be performed by checking whether the field of the current object being processed as specified by the elements of the XML message is associated with sub elements. If so the method can continue to step . If not the method can proceed to step .

In step in the case where the object has been identified as a subclass another object can be instantiated to accommodate the identified subclass. In step the sub elements associated with the element being processed can be recursively processed. In particular the sub elements can be associated with the subclass identified in step . In step the data determined for the particular subclass can be added to the object table. For example the newly specified object from step as well as the sub elements and any other data identified such as the object identity and the data type can be included in the object table.

If the object being processed was not identified as a subclass then the method can proceed to step where the object can be listed in the object table as well as any determined interface object parameters. In step a determination can be made as to whether additional objects specified in the XML message are to be processed. If so the method can loop back to step to process further objects. If no further objects are to be processed the method can continue to step where the interface object can be generated. Pseudo code illustrating the generation of an interface object from a markup language representation of the interface object is provided in Appendix A.

Similar to the method of the method of also indicates that the various objects can be added to the interface object or written to the object table as the elements of the XML message are processed. Those skilled in the art however will recognize that the elements and sub elements can be temporarily stored and periodically written to the interface object or object table or written to the interface object or object table after processing the entire XML representation of the interface object.

The present invention can be realized in hardware software or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also can be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

