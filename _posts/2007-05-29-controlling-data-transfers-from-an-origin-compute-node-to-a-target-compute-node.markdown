---

title: Controlling data transfers from an origin compute node to a target compute node
abstract: Methods, apparatus, and products are disclosed for controlling data transfers from an origin compute node to a target compute node that include: receiving, by an application messaging module on the target compute node, an indication of a data transfer from an origin compute node to the target compute node; and administering, by the application messaging module on the target compute node, the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07966618&OS=07966618&RS=07966618
owner: International Business Machines Corporation
number: 07966618
owner_city: Armonk
owner_country: US
publication_date: 20070529
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for controlling data transfers from an origin compute node to a target compute node.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather.

When a passing messages between compute nodes the compute node attempting to transmit a message is referred to as the origin compute node while the compute node intended as the recipient of the message is referred to as the target compute node. To transfer data through a data communications network from an origin compute node to a target compute node an application running on the origin compute node typically calls a send messaging function of the origin compute node s messaging software and an application running on the target compute node typically calls a receive messaging function of the target compute node s messaging software. When the origin compute node s application calls the send messaging function the origin compute node s messaging software transmits a request to send RTS message to the messaging software of the target compute node that indicates that the origin compute node has data to transfer to the target compute node. The target compute node s messaging software then responds to the origin compute node with a clear to send CTS message indicating that the target compute node is ready to receive the data from the transfer. Upon receiving the CTS message the origin compute node s messaging software then transfers the data to the target compute node. Because the application s call to the receive messaging function specifies the storage location for the data on the target compute node if the application of the target compute node has not yet called the receive messaging function by the time that the target node receives the data from the transfer the target compute node s messaging software stores the transferred data in a temporary message buffer and waits for the target compute node s application to call the receive function. The drawback to this current method of data transfer is that often the target compute node does not have excess memory storage to allow the messaging software to store the data from the transfer in a temporary buffer while waiting for the target compute node s application to call the receive messaging function. As such readers will appreciate that room for improvement exists in controlling data transfers from an origin compute node to a target compute node.

Methods apparatus and products are disclosed for controlling data transfers from an origin compute node to a target compute node that include receiving by an application messaging module on the target compute node an indication of a data transfer from an origin compute node to the target compute node and administering by the application messaging module on the target compute node the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . The parallel computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally to for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. Readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message. The system of operates generally to for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention by receiving by an application messaging module on the target compute node an indication of a data transfer from an origin compute node to the target compute node and administering by the application messaging module on the target compute node the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates an application buffer for storing a message for transmission to another compute node.

Also stored RAM is an application messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program effects data communications with other application running on other compute nodes by calling software routines in the application messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

In the example of the messaging module operates generally for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. The messaging module of operates generally for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention by receiving by an application messaging module on the target compute node an indication of a data transfer from an origin compute node to the target compute node and administering by the application messaging module on the target compute node the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication.

Also stored in RAM is a system messaging module that implements system specific protocols for communications that support messaging for application and the application messaging module . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging module . Such system specific protocols used for communications in the system messaging module are typically isolated from the application through the application messaging module thus making the interface provided to the application somewhat independent of system specific details implemented in the system messaging module . The system messaging module of implements system specific communications protocols using a set of messaging primitives. A messaging primitive is a data communications operation that serves as a basic building block for communicating between compute nodes. A message primitive may be implemented as for example a request to send RTS operation that send a RTS control message to a compute node a clear to send CTS operation that sends a CTS control message to a compute node a remote get operation that transfers data from one compute node to another a memory FIFO operation that transfers data from one compute node to another an acknowledgement operation that sends an acknowledgement message to a compute node and so on. Combining a number of messaging primitives together forms the basis for developing a communications protocol. In carrying out system specific communications protocols the system messaging module typically accesses communications hardware and software useful according to the present invention such as for example DMA controller DMA engine and data communications adapters .

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU may initiates the DMA transfer the CPU does not execute it. In the example of the DMA engine and the DMA controller support the system messaging module and thereby the application message module for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of controlling data transfers from an origin compute node to a target compute node in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in controlling data transfers from an origin compute node to a target compute node in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of controlling data transfers from an origin compute node to a target compute node in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for controlling data transfers from an origin compute node to a target compute node in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of application installed on the origin compute node and application installed on the target compute node . Data communications between applications are effected using application messaging modules installed on each of the compute nodes . Applications may communicate messages by invoking function of an application programming interfaces API exposed by the application messaging modules and . For the origin compute node s application to transmit messages to the target compute node s application the origin compute node s application typically calls a send messaging function of the application messaging module while the target compute node s application typically calls a receive messaging function of the application messaging module . Each application and provides match data to their respective application messaging module and the origin compute node s application providing origin match data and the target compute node s application providing target match data.

Match data is the data used by the application messaging layer to match the send function called by the origin compute node s application with the receive function called by the target compute node s application so that the data specified in the send function is stored in the location specified in the receive function. Match data may be implemented for example as a data structure specifying the origin compute node s unique rank in the operational group a tag number provided by the application and a context that identifies the particular operational group of compute nodes involved in the transfer. Match data provided to the origin compute node s application messaging module is referred to as origin match data while the match data provided to the target compute node s application messaging module is referred to as target match data.

The exemplary communications architecture of includes an application messaging layer that provides a hardware independent messaging interface that supports messaging in the application layer . Such a messaging interface is typically utilized by applications and in the application layer through a set of APIs exposed by application messaging modules. In the example of the messaging layer is composed of an application messaging module installed on the origin compute node and an application messaging module installed on the target compute node . In the example of the application messaging module operates for controlling data transfers from an origin compute node to a target compute node according to embodiments of the present invention. The application messaging module on the target compute node receives an indication of a data transfer from the origin compute node to the target compute node and administers the data transfer using one or more messaging primitives of a system messaging module.

The exemplary communications architecture of includes a system messaging layer that implements hardware specific protocols for communications that support messaging in the application layer and the application messaging layer . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging layer . Such system specific protocols used for communications in the system messaging layer are typically isolated from the application layer through the application messaging layer thus making the interface provided to the application layer somewhat independent of system specific details implemented in the system messaging layer . In the example of the system messaging layer is composed of a system messaging module installed on the origin compute node and a system messaging module installed on the target compute node .

The system messaging layer of implements system specific communications protocols using a set of messaging primitives. A messaging primitive is a data communications operation that serves as a basic building block for communicating between compute nodes. A message primitive may be implemented as for example a request to send RTS operation that send a RTS control message to a compute node a clear to send CTS operation that sends a CTS control message to a compute node a remote get operation that transfers data from one compute node to another a memory FIFO operation that transfers data from one compute node to another an acknowledgement operation that sends an acknowledgement message to a compute node and so on. Combining a number of messaging primitives together forms the basis for developing a communications protocol. In carrying out system specific communications protocols the system messaging layer typically accesses communications hardware and software useful according to the present invention such as for example DMA controllers DMA engines data communications hardware and so on.

The exemplary communications architecture of also includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware and each include a transmission stack and for storing network packets for transmission to other communications hardware through the data communications network and each include a reception stack and for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node and a DMA engine for the target compute node . The DMA engines and in the example of are illustrated in both the system messaging layer and the hardware layer . The DMA engines and are shown in both the system messaging layer and the hardware layer because a DMA engine useful in embodiments of the present invention may often provide system messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engines and of each include an injection FIFO buffer and for storing data descriptors for messages to be sent to other DMA engines on other compute nodes using a memory FIFO data transfer operation or direct put data transfer operation. The exemplary DMA engines and of each also include a reception FIFO buffer and for storing data descriptors for messages received from other DMA engines on other compute nodes. Although only illustrates a single injection FIFO buffer and a single reception FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers for carrying out data transfers from an origin compute node to a target compute node according to embodiments of the present invention.

A memory FIFO data transfer operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. In a memory FIFO data transfer operation data is transferred along with a data descriptor describing the data from an injection FIFO for the origin DMA engine to a target DMA engine. The target DMA engine in turns places the descriptor in the reception FIFO and caches the data. A core processor then retrieves the data descriptor from the reception FIFO and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

A direct put operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

For further explanation sets forth a flow chart illustrating an exemplary method for controlling data transfers from an origin compute node to a target compute node according to the present invention. The origin compute node of includes a processing core and DMA engine and the target compute node of includes a processing core and DMA engine .

The method of includes receiving by an application messaging module on the target compute node an indication of a data transfer from an origin compute node to the target compute node . The application messaging module on the target compute node may receive an indication of a data transfer from an origin compute node to the target compute node according to the method of by receiving origin match data from the origin compute node . Receiving the origin match data from the origin compute node serves as an indication of a data transfer from an origin compute node to the target compute node because the origin match data is typically only sent to the target compute node when an application on the origin compute node initiates a data transfer by calling a send messaging function with the origin match data as a parameter.

Match data is the data used by the application messaging module to match the send function called by an application on the origin compute node with the receive function called by an application on the target compute node so that the data specified in the send function for transfer is stored in the location on the target compute node specified in the receive function. Match data may be implemented for example as a data structure specifying the origin compute node s unique rank in the operational group a tag number provided by the application and a context that identifies the particular operational group of compute nodes involved in the transfer. Match data provided by the application on the origin compute node is referred to as origin match data while the match data provided by the application on the target compute node is referred to as target match data.

In the method of the application messaging module on the target compute node may receive the origin match data from the origin compute node according to the method of in a Request To Send RTS message . The RTS message of is a control message indicating that the origin compute node has data to transfer to the target compute node . The RTS message is transmitted by the origin compute node to the target compute node in response to an application on the origin compute node calling a send messaging function to transfer data to an application on the target compute node . The send messaging function specifies the origin match data along with other information describing the location on the origin compute node of the data to be transferred to the target compute node .

Readers will note that at this point in the method of the origin match data has been received in the application messaging module of the target compute node . As indicated by the dotted arrows however the target match data has not yet been received in the application messaging module on the target compute node at this point in the method of because the application on the target compute node has not yet called the receive messaging function which specifies both the target match data and the location on the target compute node to store the data to be transferred from the origin compute node .

The method of includes administering by the application messaging module on the target compute node the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication. As mentioned above the system messaging module is a set of computer program instructions that implements system specific protocols for communications that support messaging for the application messaging module . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging module . A system messaging module typically implements system specific communications protocols for the application messaging module using a set of messaging primitives. A messaging primitive is a data communications operation that serves as a basic building block for communicating between compute nodes. A message primitive may be implemented as for example a request to send RTS operation that send a RTS control message to a compute node a clear to send CTS operation that sends a CTS control message to a compute node a remote get operation that transfers data from one compute node to another a memory FIFO operation that transfers data from one compute node to another an acknowledgement operation that sends an acknowledgement message to a compute node and so on. Combining a number of messaging primitives together forms the basis for developing a communications protocol.

The application messaging module on the target compute node administers the data transfer in the method of by determining whether the origin match data has been received by the application messaging module on the target compute node . As mentioned above the application messaging module may determine whether the origin match data has been received by the application messaging module on the target compute node according to the method of by identifying whether the target compute node has received an RTS message from the origin compute node that contains the origin match data . If the target compute node has not received the RTS message then the origin match data has not been received by the application messaging module on the target compute node . The origin match data however has been received by the application messaging module on the target compute node if the target compute node has received the RTS message .

The application messaging module on the target compute node also administers the data transfer in the method of by determining whether the target match data has been received by the application messaging module on the target compute node . As mentioned above the application messaging module may determine whether the target match data has been received by the application messaging module on the target compute node according to the method of by identifying whether the application on the target compute node has called the receive messaging function. If the application on the target compute node has not called the receive messaging function then the target match data has not been received by the application messaging module on the target compute node . If the application on the target compute node has called the receive messaging function however then the target match data has been received by the application messaging module on the target compute node .

If the origin match data has been received by the application messaging module and the target match data has not been received by the application messaging module the application messaging module on the target compute node administers the data transfer in the method of by storing the origin match data on the target compute node and waiting to receive the target match data . The application messaging module may store the origin match data in a pending transfer queue along with the information describing the location on the origin compute node of the data to be transferred while the application messaging module waits to receive the target match data from the application on the target compute node .

After some time passes the method of continues with receiving by the application messaging module the target match data from the application on the target compute node . Again the application messaging module may receive the target match data when the application on the target compute node calls the receive messaging function which specifies the target match data and the location on the target compute node for storing the data to be transferred from the origin compute node .

When the origin match data has been received by the application messaging module and the target match data has been received by the application messaging module the application messaging module on the target compute node administers the data transfer in the method of by invoking the data transfer from the origin compute node to the target compute node using the messaging primitives. The application messaging module may invoke the data transfer according to the method of by invoking a remote get operation in the system messaging module of the target compute node to carry out the data transfer . A remote get operation is an operation that allows a compute node to retrieve data from another compute node without involving the processor on the compute node providing the data. In the method of invoking a remote get operation causes the target compute node to transmit a remote get message to the DMA engine of the origin compute node . The remote get message of may include the target match data to allow the target compute node s application messaging module to identify to which remote get operation the returned data corresponds. The remote get message of typically specifies the location on the origin compute node where the data to be transferred is stored and specifies where the transferred data may be stored on the target compute node by the DMA engine as the data arrives on the target compute node . Upon receiving the remote get message the DMA engine of the origin compute node begins the data transfer by reading the data from storage on the origin compute node packetizing the data into network packets and transmitting the data through a data communication network to the target compute node . In the example of the remote get message specifies using a direct put operation to transfer the data so that the processing core on the target compute node is only minimally involved in storing the data on the target compute node .

The application messaging module on the target compute node continues administering the data transfer in the method of by determining whether the data transfer is complete. The application messaging module may determine whether the data transfer is complete according to the method of by initializing a counter on the target compute node to the size of the data to be transferred and decrementing the counter as the data is received on the target compute node . When the counter reaches a value of zero then the data transfer is complete and the application messaging module calls a callback function signaling to the target compute node s application that the data transfer is complete. Readers will note that the size of the data to be transferred is typically included in the RTS message transmitted by the origin compute node .

The application messaging module on the target compute node also administers the data transfer in the method of by sending an acknowledgement to the origin compute node using the message primitives if the data transfer is complete. The application messaging module sends an acknowledgement to the origin compute node according to the method of by invoking an acknowledgement operation of the system messaging module that transmits an ACK message to the origin compute node . Upon receiving the ACK message the origin compute node executes callback function signaling to the origin compute node s application that the data transfer is complete.

In the description of above readers will note that the application messaging module receives the origin match data from the origin compute node and has to wait to receive the target match data from the target compute node before the data transfer is invoked by the application messaging module. In other embodiments however the application messaging module may receives the target match data from the target compute node and have to wait to receive the origin match data from the origin compute node before the data transfer is invoked by the application messaging module. For further explanation sets forth a flow chart illustrating a further exemplary method for controlling data transfers from an origin compute node to a target compute node according to the present invention. Similar to the example of the origin compute node of includes a processing core and DMA engine and the target compute node of includes a processing core and DMA engine .

The method of includes receiving by an application messaging module on the target compute node an indication of a data transfer from an origin compute node to the target compute node . The application messaging module on the target compute node may receive an indication of a data transfer from an origin compute node to the target compute node according to the method of by receiving target match data from the origin compute node . Receiving target match data from the origin compute node serves as an indication of a data transfer from an origin compute node to the target compute node because the target match data is typically only provided to the application messaging module when an application on the target compute node calls a receive messaging function with the target match data as a parameter. When an application on the target compute node calls a receive messaging function the application typically expects that another application running on the origin compute node is calling a send messaging function to initiate a data transfer. In fact the application messaging module receives the target match data from the origin compute node according to the method of as a parameter to the receive messaging function called by the target compute node s application.

Readers will note that at this point in the method of the target match data has been received in the application messaging module of the target compute node . As indicated by the dotted arrows however the origin match data has not yet been received in the application messaging module on the target compute node at this point in the method of because the application on the origin compute node has not yet called the send messaging function which results in the origin compute node transmitting an RTS message to the target compute node which specifies both the origin match data and the location on the origin compute node at which the data to be transferred is stored.

The method of includes administering by the application messaging module on the target compute node the data transfer using one or more messaging primitives of a system messaging module in dependence upon the indication. The application messaging module on the target compute node administers the data transfer in the method of by determining whether the origin match data has been received by the application messaging module on the target compute node and determining whether the target match data has been received by the application messaging module on the target compute node in a manner similar to the method of described above.

If the origin match data has not been received by the application messaging module and the target match data has been received by the application messaging module the application messaging module on the target compute node administers the data transfer in the method of by storing the target match data on the target compute node and waiting to receive the origin match data . The application messaging module may store the target match data in a pending transfer queue along with the information describing the location on the target compute node at which the data to be transferred is to be stored while the application messaging module waits to receive the origin match data from the origin compute node .

After some time passes the method of continues with receiving by the application messaging module the origin match data from the application on the target compute node . Again the application messaging module may receive the origin match data in a Request To Send RTS message . The RTS message of is a control message indicating that the origin compute node has data to transfer to the target compute node . The RTS message is transmitted by the origin compute node to the target compute node in response to an application on the origin compute node calling a send messaging function to transfer data to an application on the target compute node . The send messaging function specifies the origin match data along with other information describing the location on the origin compute node of the data to be transferred to the target compute node .

The remainder of the method of operates in a manner similar to the method of . The application messaging module on the target compute node administers the data transfer in the method of by invoking the data transfer from the origin compute node to the target compute node using the messaging primitives determining whether the data transfer is complete and sending an acknowledgement to the origin compute node using the message primitives if the data transfer is complete.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for controlling data transfers from an origin compute node to a target compute node. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

