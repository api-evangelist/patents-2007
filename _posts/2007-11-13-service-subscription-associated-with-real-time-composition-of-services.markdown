---

title: Service subscription associated with real time composition of services
abstract: Real-time service composition is provided by a Session Initiation Protocol (SIP) transport binding for Simple Object Access Protocol (SOAP) messages. A SOAPAction header and SOAP envelope can be included in a SIP message to identify a requested service. The SIP message recipient can parse out the SOAP envelope and forward same to a corresponding Web Service. An intermediary node, including a SIP Proxy, can evaluate incoming SIP/SOAP messages and provide requested services to which they have access. Service discovery and subscription are facilitated by adding Universal Description, Discovery and Integration (UDDI) services requests and responses.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09112902&OS=09112902&RS=09112902
owner: Optis Wireless Technology, LLC
number: 09112902
owner_city: Plano
owner_country: US
publication_date: 20071113
---
This application is related to U.S. patent application Ser. No. 11 827 498 filed on Jul. 12 2007 entitled Real Time Composition of Services to Torbj rn Dahl en the disclosure of which is incorporated here by reference.

The present invention relates generally to communications and in particular to methods devices and systems for providing real time composition of services in communications systems.

Communication systems continue to grow and evolve. Convergence between different types of communication systems e.g. Internet Protocol IP connection based voice communications and the like is advancing rapidly. Recently the phrase Next Generation Network NGN has been used to describe various activities associated with this evolution. As defined by the International Telecommunications Union ITU an NGN is a packet based network able to provide services including telecommunication services and able to make use of multiple broadband QoS enabled transport technologies and in which service related functions are independent from underlying transport related technologies. NGNs will also likely offer unrestricted access by users to different service providers and will support generalized mobility which in turn will provide for consistent service provision to end users.

So called Web Services are another feature which may become commonplace in NGNs. Web Services provide for example a mechanism for interoperability between software entities which reside on different infrastructures and which may be operated by different companies. Web Services are typically defined as providing distributed services using e.g. the standards suite Web Services Description Language WSDL Simple Object Access Protocol SOAP and Universal Description Discovery and Integration UDDI . For the interested reader a description of WDSL can be found online as Web Services Description Language WSDL Version 2.0 Part 1 Core Language W3C Working Draft 3 Aug. 2004 at http www.w4.org TR 2004 WD wsdl120 20040803 the disclosure of which is incorporated here by reference. Similarly a description of SOAP can be found online as SOAP Version 1.2 Part 0 Primer Second Edition W3C Recommendation 27 Apr. 2007 at http www.w3.org TR soap12 part0 the disclosure of which is incorporated by reference. Additionally for UDDI a standards document entitled UDDI Version 3.0.2 UDDI Spec Technical Committee Draft Dated Oct. 19 2004 can be found at http uddi.org pubs uddi v3.htm the disclosure of which is incorporated here by reference.

Web Services can be characterized as a technology for exposing application functionality as services to software clients or to server applications. Among other things Web Services allow for rapid creation of new services by combining existing functionality in new ways. This process is often referred to as composition or orchestration. Typically Web Services are accessed with XML encoded SOAP messages using hyper text transfer protocol HTTP as a bearer. However HTTP is designed for transaction based client server request patterns where real time properties are not required. Consider in this regard the variable and sometimes extensive delays which can occur when a user retrieves a web page by clicking on an HTTP hyperlink. With the increasing demand for service interaction and rapid composition from the users of peer to peer real time communication services there is a need to also apply the Web Services paradigm to this real time domain.

Moreover such efforts also do not take explicit intermediary addressing into consideration. On the contrary existing work either considers SIP service addressing to be applicable for application launch only e.g. by letting the application use a second protocol e.g. HTTP to perform actual method invocation or is basing service addressing on SIP routing only which provides a crude way of involving intermediary services into the session initiation sequence. This makes existing SIP service addressing based on capabilities ill equipped to implement real time service composition. Additionally once available it would be desirable to provide techniques and mechanisms for allowing users to discover and or subscribe to such real time services.

Accordingly it would be desirable to address this need by providing service subscription techniques associated with real time composition of services in communications systems.

According to an exemplary embodiment a service subscription method includes the step of transmitting a Session Initiation Protocol SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header the SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service subscription request.

According to another exemplary embodiment a computer readable medium contains instructions which when executed on a processor perform the step of transmitting a Session Initiation Protocol SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header the SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service subscription request.

According to still another exemplary embodiment a communications node includes a processor operating as at least one of a SIP user agent server UAS and an Event Service and which receives a first SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service subscription request wherein the processor sends responsive to the first SIP message a second SIP message toward an ultimate receiver of the UDDI service subscription request.

According to yet another exemplary embodiment a communications node includes a processor operating as a watcher and as a SIP user agent server UAS which transmits a SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service subscription request.

The following detailed description of the exemplary embodiments refers to the accompanying drawings. The same reference numbers in different drawings identify the same or similar elements. Also the following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims.

According to exemplary embodiments described in the above identified related application a solution to the need for real time composition of services is provided by a Session Initiation Protocol SIP transport binding for SOAP messages. SIP signaling is described for example in the standards document entitled Session Initiation Protocol RFC 3261 authored by Rosenberg et. al. IETF 2002 which is available online at http tools.ietf.org html rfc3261 and the disclosure of which is incorporated here by reference. As stated therein SIP provides an application layer control signaling protocol for creating modifying and terminating sessions with one or more participants. These sessions include for example Internet telephone calls multimedia distribution and multimedia conferences. SIP invitations are used to create sessions and to carry session descriptions that allow participants to agree on a set of compatible media types. Proxy servers are used in SIP environments to help route requests to the user s current location authenticate and authorize users for services implement provider call routing policies and provide features to users. Of particular interest for the present application SIP provides real time services through the use of timers which ensure minimal transaction delays.

SIP service requests can be characterized as for example either 1 a request to launch an application e.g. a request to play a chess game or 2 a request for some data to be provided or some transaction to be performed as a part of a more complex interaction. The service addressing needed differs depending on which of these two cases are being considered. For the former case 1 referred to herein as the application launching case SIP is used to locate and provide parameters to match the request to an application that can be launched e.g. a multimedia telephony application a chat application a chess application etc. In this case the launched application will then take over application specific signaling using in session SIP signaling or some other protocol. Thus the need for precise service identification and or the provision of service parameters is generally non existent or at least very limited to support SIP service requests involving the launching of applications. Instead for such SIP requests the identification of service capabilities is more significant.

The second case 2 which is referred to herein as the business method integration case involves accessing services by a composition of complex functions from a number of more or less independent participating functions e.g. publishing a Line Status Notification as a SIP session is being set up. This business method integration case applies for example whenever a user wants or needs to request a specific service as opposed to requesting any service which provides certain capabilities in the network or whenever input parameters are necessary to perform the service. Thus in the business method integration case as opposed to the application launching case the ability to precisely identify a requested service and or provide service parameters is important while the ability to specify a requested capability is less important. Exemplary embodiments of the present invention seek to facilitate the business method integration case. However SIP service addressing is generally considered to be applicable for application launch only thereby requiring an application which is launched using SIP to use a second protocol e.g. HTTP to perform the business method invocation. This makes existing SIP service addressing based on capabilities ineffective by itself for real time service composition.

Accordingly these exemplary embodiments provide a SIP transport binding for SOAP messages i.e. exemplary techniques for transporting SOAP messages between SOAP nodes using SIP as a bearer. A real world example of a business integration case will provide an example of the utility of such a transport binding. Suppose for example that a TV channel is associated with a telephone number for charity calls to one of the shows that is being broadcast e.g. on an IPTV multicast session. As Alice calls the TV channel e.g. by using a provided link she has found on a web page the call is routed in real time to a charity payment service that charges her with a donation before the call is forwarded to the TV studio where she can talk with one of the TV show hosts. This can be accomplished in real time according to exemplary embodiments by leveraging the addressing mechanisms supported by SOAP using SIP as bearer. For example by adding a SOAPAction header to a SIP message a SIP user agent server UAS can be identified as the ultimate receiver of the SOAP envelope in the SIP payload. Additionally a WSDL Interface can be used to describe the semantics of a web service being requested in order for corresponding tools to autogenerate client stubs for using the service. Note in this regard WSDL 2.0 has migrated to Interfaces from PortTypes in WSDL 1.0 however either can be used as examples of mechanisms which point to specific services i.e. Web Services and can be used in a SIP SOAP binding. See for example the document WSDL 2.0 Section 2.2 incorporated by reference above. Similarly methods provided in SOAPAction headers according to these exemplary embodiments provide an indicator of the type of service being requested where a Web Service could provide a number of different service variants. In this way information associated with a service s location identification and or input parameters is provided in the SIP message in a manner which is specific enough to connect the user to a particular service instance or Interface. Some detailed examples now follow.

Starting first with the SIP SOAP message itself various examples of a SIP message carrying one or more SOAP data elements as payload according to exemplary embodiments are presented below. A SOAPAction header is provided within the SIP content to enable the receiving SIP endpoint to determine whether to forward the embedded SOAP envelope for further processing e.g. if the recipient node supports the Web Service identified in the SOAPAction header. The SOAPAction header provided in the SIP transport binding for SOAP according to these exemplary embodiments uses the URI syntax generically as follows 

A more specific example of a SOAPAction header according to these exemplary embodiments includes a uniform resource name URN . As will be appreciated by those skilled in the art a URN is a URI that identifies a resource by name in a particular namespace. In the context of these exemplary embodiments the URN syntax can be provided to a SOAPAction header as follows 

where NID is a namespace identifier following for example the syntax for NIDs described in URN Syntax RFC 2141 R. Moats IETF 1997 and NSS has the following syntax 

The SOAPAction header URI indicates the ultimate receiver of the SOAP message embedded in the SIP message which is carrying it according to these exemplary embodiments. By adding a SOAPAction header to a SIP message an Interface and method can be addressed by using the namespace specific part of the URN. This enables SIP proxies and other nodes on the routing path of a particular message to process the message correctly. The SOAP body references the method provided by the addressed Interface. This method is denoted in the SOAPAction header immediately after the delimiter which in this exemplary embodiment is an exclamation mark. Those skilled in the art will however appreciate that any unreserved character or character without other meaning can be used as a delimiter between the Interface and method in SOAPAction headers according to other exemplary embodiments.

Consider below another example of a SOAPAction header along with a SOAP body which can be used in SIP SOAP messages according to these exemplary embodiments.

In this example the Interface QuoteBean is referenced in the SOAPAction header. The method provided by QuoteBean is called GetLastTradePrice. This method is referenced in the SOAPAction header after the exclamation mark. The SOAP body may contain more details relating to the specified method including parameters. For example consider the more detailed example below. Therein the Web Service being accessed by the SOAP payload provides stock quotes. More specifically this particular SOAP message requests the last quote for the current price of Ericsson stock from an Interface called QuoteBean . This code snippet enables Alice to request a stock quote which she will receive from the UAS that represents Bob who might be a stock broker. The quote will be returned in for example the OK message from Bob as a SOAP envelope. Alternatively a SIP proxy on the route between Alice s device and Bob s device could provide the quote to Alice in which case the SIP proxy node would then have been addressed in the SOAPAction header.

Having illustrated some code snippets of an exemplary SIP SOAP combination and an exemplary SOAP syntax for implementing a SIP transport binding of an embedded SOAP message some higher level implementations which employ such messages to invoke real time composition of services according to these exemplary embodiments will now be discussed. illustrates one way in which an application or device according to these exemplary embodiments uses a SOAP client to construct a SOAP envelope in order to invoke a web service method while initiating a SIP session between an originating node and a recipient node . Therein the client application uses an application programming interface API to create a SOAP message using a SOAP client e.g. a SOAP Envelope having a SOAP body with optionally additional parameters indicative of the service to be requested. The SOAP message examples of which are provided above is then passed as all or part of the payload in a SIP message generated by SIP user agent client UAC for example a SIP INVITE message along with a SOAPAction header. The SIP UAC can use client stubs generated by WSDL Interface syntax to create the SOAPAction header and envelope. It will be appreciated however that SIP messages other than SIP INVITE may also be used to carry the SOAP payload according to these exemplary embodiments e.g. SIP OPTIONS or MESSAGE if session initiation is not required for the particular service request.

The SIP UAC sends the message over for example a user datagram protocol UDP IP or transmission control protocol TCP IP link wireline or wireless to the ultimate destination which is indicated by the SOAPAction header provided as part of the SIP payload. There may of course be intervening nodes not illustrated in e.g. SIP proxies. The ultimate destination recipient node contains a SIP user agent server UAS as well as a SOAP endpoint which is able to parse and dispatch the SOAP message to the corresponding Web Service indicated in the SOAPAction header carried as the SIP payload e.g. one of the Web Services or via a service specific API. The SOAPAction header is processed by the SIP UAS to determine whether the SOAP envelope payload should be passed on to the SOAP parser dispatcher . Note in this regard that the ultimate receiver of the SIP message may differ from or be the same as the ultimate receiver of the SOAP envelope carried therein. In for example the above described case where Alice calls a charity telethon TV show the routing of the SOAP envelope toward a charity payment service that charges her with a donation can be performed by a SIP proxy node which is disposed between Alice s user device and the application server associated with handling the call to the TV show host. Thus in this latter case when the intervening SIP proxy node receives the SIP SOAP message its analysis of the SOAPAction header will inform it that the SOAP envelope should be processed locally and its parser dispatcher will extract the SOAP envelope and pass it on to a Web Service that handles payment. Then the SIP message will be forwarded onto its ultimate destination e.g. a VoIP application server not shown in .

The UAS can for example be preconfigured to include a list of currently deployed Web Services within the recipient node to assist with the processing of the SOAPAction header. Typically the response to the SOAP message will then be provided in the payload of a SIP OK message as shown in which is returned to the client from the SIP UAS .

A Web Service provided by Web Services and can be defined for example as a software system designed to support interoperable machine to machine interactions over a network. In some implementations Web Services can be provided as Web APIs accessible via a network such as the Internet and executed on a remote system hosting the requested services. However in the exemplary embodiments illustrated above with respect to and the Web Services and are part of a recipient node which includes the SOAP parser dispatcher and SIP UAS . Similarly elements and are part of an originator node associated with the SOAP SIP message being transmitted. Thus assuming that a match is found by SIP UAS in processing the SOAPAction header a corresponding one of the Web Services will provide the service requested via the SOAP Envelope to the recipient node . It will also be appreciated that a given recipient node may have more or fewer than two Web Services integrated therewith.

The SOAPAction header which provides the Interface and the method indications and SOAP Envelope can be provided by themselves within a SIP message as illustrated above or with other content. For example by using Multipurpose Internet Mail Extensions MIME multipart a SIP message can contain a Session Description Protocol SDP or other content as payload in addition to the embedded SOAP information. An example of this type of multipart SIP message according to an exemplary embodiment is provided below.

Based upon the foregoing description it will be appreciated that various methods e.g. for communicating are presented by these exemplary embodiments. One such method is illustrated in the flowchart of . Therein a SIP message including a SOAP envelope and a SOAP action header is transmitted at step . The SIP message is received at step and the SOAPAction header is evaluated at step to determine whether the SOAP Envelope is intended for that particular recipient node. If so the SIP SOAP message is parsed to remove the SOAP envelope from the SIP message step . The SOAP envelope may then be passed on to a corresponding Web Service at step . Then the service indicated by the SOAP Envelope and SOAPAction header can be provided to the recipient of the SIP message at step . Of course given the fundamental nature of these exemplary embodiments the exemplary method illustrated in can be further generalized as for example illustrated in . Therein at step a Session Initiation Protocol SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header which identify a service are transmitted i.e. a Session Initiation Protocol SIP transport binding for SOAP messages.

Thus it will be apparent that by combining Web Services SOAP WSDL and UDDI and SIP these exemplary embodiments enable for example an application developer to have access to a wide range of Internet services that can be interwoven during the session set up phase of SIP. Furthermore SIP service composition can shorten the time to market for new innovative end user services as well as open up business to business interaction over SIP by providing a facility for the real time composition of services. Some examples of applications of these techniques were provided above. Many others are contemplated herein. For example in the context of integrating presence notification and multimedia session setup consider the following. As Alice makes the call to Bob she also chooses to indicate that her presence should be set to busy for all her watchers. As the session is being set up the application server in Alice s home domain notifies the presence agent that her activity status is Busy i.e. by virtue of a SOAP Action header and or other SOAP data elements passed along with the SIP session setup message to the application server. Then all watchers on Alice s presence list will now see Alice s presence status change for the duration of the call.

The afore described and other exemplary systems and methods for communicating can be implemented by one or more processors executing sequences of instructions contained in a memory device. Such instructions may be read into the memory device from other computer readable mediums such as secondary data storage device s . Execution of the sequences of instructions contained in the memory device causes the processor to operate for example as described above to send or receive SIP SOAP messages. In alternative embodiments hard wire circuitry may be used in place of or in combination with software instructions to implement these exemplary embodiments.

It will be further appreciated that such embodiments can take various physical forms and may be used in for example various consumer electronic goods including but not limited to smart phones personal digital assistants PDAs laptop computers and the like. Generally speaking a communication device which transmits or receives SIP SOAP messages as described above may include the elements of the generic communication device illustrated in . Therein a communication device can include a processor or multiple processor cores memory optionally one or more secondary storage devices an operating system running on the processor and using the memory as well as a one or more corresponding application s . An interface unit may be provided to facilitate communications between the device and the rest of a network or other peer to peer devices or may be integrated into the processor . A wireless transceiver not shown could be included as part of the interface unit if the device is communicating over an air interface.

The foregoing examples depict among other things the exchange of SIP SOAP messages between endpoints to provide real time composition of services. However a SIP SOAP message can also travel across a number of intermediaries. In SIP this concept can be realized by for example sending a SOAP message through SIP servers or SIP terminals supporting SOAP. Intermediaries can be identified by the SOAP role header attribute. The role URI in the SOAP envelope part of the SIP message payload identifies a PortType or Interface as mentioned above which will act as an intermediary node which will process the header. The syntax associated with such an intermediary processing node can for example be described as follows 

The subsequent SOAP header name should then correspond to the method set forth in the role with the header value being at least one of the parameter s to the method.

To provide some context as an aid to understanding the role of intermediaries and intermediary addressing according to these exemplary embodiments consider the following service scenario. Suppose that Alice a stock broker calls her client Bob to discuss a purchase. As she initiates the call session e.g. a VoIP call she also chooses to include two services that will provide data to be presented to Bob at the beginning of the call. For example these two services could be Bob s portfolio service and Alice s purchase candidate list with some history graphs and key figures. To accomplish this the session initiation message which Alice sends to Bob includes service requests to Bob s Portfolio Service and to Alice s Candidate Service. As the message is intercepted by the respective services data is collected and inserted into the body of the message. Finally the message reaches Bob who is presented with his portfolio contents and the list of purchase candidates. At the same time Bob hears Alice s greeting and the conversation begins. An exemplary SIP message carrying SOAP with headers to be processed by an intermediary node to implement this service scenario could for example be generated as follows 

In the foregoing code snippet example the first bolded code line indicates a SOAP action header which is intended to be operated on by an intermediary node according to this exemplary embodiment. The SOAP header which corresponds to the service requested from this intermediary node and associated addressing toward the intermediary node i.e. the soap role parameter are bolded further down within the same code snippet.

An exemplary embodiment of an intermediary node which can be used to perform processing of SIP SOAP messages as described above is illustrated as . Therein the intermediary node operates on e.g. a computing device such as that illustrated in which is connected to an IP network. The intermediary node includes for example a SIP proxy a SOAP parser dispatcher and one or more Web services . The SIP proxy is an entity which enables the intermediary node to receive and proxy SIP messages. SIP proxy can among other things help route requests to a user s current location authenticate and authorize users for services implement provider call routing policies provide features to users and provide a registration function that allows users to upload their current locations for use by proxy servers.

For example the SIP proxy can perform generally in accordance with the specifications for a proxy as specified in RFC the disclosure of which is incorporated here by reference. The proxy functionality of element has the effect that the intermediary node containing the SIP proxy will not terminate the routing of the session initiation but rather process the SOAP envelope append the result to the payload hence modifying the original contents of the SIP message and forward to the destination indicated in the SIP Request URI. The proxy may also add itself to the subsequent SIP messaging by using Record route as specified in RFC . One difference between an intermediary node including a SIP proxy and an endpoint according to these exemplary embodiments is that the endpoint will terminate the session routing. Hence no additional piggy backing of network based data can be added to the SIP message once it reaches an endpoint. The SIP intermediary node including SIP proxy can for example be implemented as a server e.g. as shown in but may also be implemented as logically separate nodes on the same physical node or server.

The SOAP parser parses SOAP headers which are inside a SOAP envelope carried by the SIP messages. Also deployed on the intermediary is a SOAP Dispatcher which is able to invoke Web Services associated with the SOAP headers which are addressed to the intermediary node e.g. addressed using a SOAPAction header and SOAP header with role parameter as illustrated in the foregoing code snippet. These and other features of intermediary nodes will be better understood in the context of the end to end messaging example which will now be described with respect to .

If the SIP Proxy does not detect a SOAP envelope or payload within the SIP message and assuming that the SIP message is itself not addressed thereto then the intermediary node will forward the SIP message onward e.g. toward another intermediary or the final destination . If on the other hand the SIP Proxy detects a SOAP payload within the SIP message then the SIP Proxy invokes an API towards a SOAP Parser Dispatcher . The SOAP Parser Dispatcher receives the SOAP envelope originally contained in the SIP message payload through the API called by the SIP Proxy and parses the SOAP envelope looking for SOAP headers step . Thus according to one exemplary embodiment the SIP Proxy strips out the SOAP envelope from the SIP SOAP message and passes only the SOAP envelope along to the SOAP Parser Dispatcher for further processing. Thus using the foregoing code snippet as an example SIP Proxy could strip out the following code and pass same to the SOAP Parser Dispatcher 

If a SOAP header found by the SOAP Parser Dispatcher matches a deployed Web Service associated with this particular intermediary node step then the SOAP Dispatcher uses a service specific API to invoke the corresponding method in the deployed Web Service step . One exemplary difference between code portions within a SIP SOAP message which are directed toward an intermediary node as compared to those directed an endpoint is the role parameter located in the SOAP header which also contains input parameters to the method provided by the PortType Interface. The endpoint on the other hand is only concerned with processing the actual SOAP body as opposed to the SOAP header in the SIP SOAP message. By providing multiple SOAPAction headers paired with multiple SOAP headers containing a matching role parameter it is possible to chain processing from multiple intermediaries along the route between endpoints to provide services accessible by each. Thus again using the exemplary code snippet described above the SOAP Parser Dispatcher could pass on the following portion of the SIP SOAP message received by intermediary node toward the corresponding Web Service via its API 

After processing of the service request provided within the SOAP envelope is complete the Web Service may forward the result to the next SIP node on the route. The result can be sent by for example modifying the original SIP message received by the intermediary node step e.g. by appending a result received from the Web Service to the payload of the original SIP message. It will be appreciated however that in certain cases intermediary processing of the SOAP method indicated in the SOAP header does not return a result. In such cases there is no need to append a result to the SIP message payload.

The SIP Proxy proxies the SIP message with a modified payload if the original SOAP envelope in the received SIP SOAP message contained a SOAP action header matching a Web Service accessible via this particular intermediary node further along its route to the final destination. When the SIP message reaches its original destination the processing at the endpoint can proceed as described above with respect to . It will be appreciated that although only a single intermediary node is illustrated in the exemplary embodiment of a typical implementation may include a plurality of intermediary nodes disposed along the route between endpoints some or all of which may have access to different Web Services and which will operate on a received SIP SOAP message as described above. Moreover the receiving UAS at a message endpoint will also have the capability to scan for multiple SOAP envelopes within the received SIP SOAP message which envelopes contain results from intermediaries passed along the way.

In order to provide dynamic service composition according to these exemplary embodiments there is also provided the ability for clients and applications to discover existing services. More specifically exemplary embodiments provide methods systems devices and software for discovering such services using UDDI with SIP as transport. By using UDDI API requests as a payload in a SIP message according to these exemplary embodiments a UDDI registry can for example reside on a SIP Server on a mobile device supporting SOAP over SIP. A user can send SIP messages to the registry containing UDDI inquiries for services. The UDDI Inquiry API provides for example the find service method which is used to discover services that match provided criteria for a particular business entity. The categoryBag argument for example contains properties that describe the capability of the service. To illustrate these techniques for service discovery provides an exemplary embodiment showing two endpoints and containing an application and a UDDI registry respectively.

Therein the so called A party s device i.e. the calling party includes an application that is used to initiate a session e.g. a SIP session to the B party i.e. the called party . The application uses a UDDI client which creates a UDDI find service request. The UDDI find service request is passed to the SIP UAC which embeds the UDDI request within a SOAP envelope in the SIP INVITE payload before sending the request to the B party s endpoint . For example the application can call the UDDI client in order to create a SOAP envelope containing the find service request. The SOAP envelope is returned to the application which then passes the envelope on to the SIP UAC which in turn will construct the SIP INVITE message and append the SOAP envelope as payload data.

The B party s device contains a SIP UAS that receives the SIP INVITE message including the UDDI request and parses the payload. If a SOAP envelope is found in the received SIP message then that SOAP envelope is passed to a SOAP Parser Dispatcher through an API. The SOAP Parser Dispatcher parses the UDDI find service request from within the SOAP envelope and invokes its dispatcher illustrated as part of the SOAP Parser but which can be implemented as a separate entity . The dispatcher portion of SOAP Parser Dispatcher invokes the UDDI registry located on the B party s device via an associated API which results in a list of services e.g. Web Services as described above being returned to the SOAP Parser Dispatcher .

When the UDDI registry on the B party s device or endpoint returns the message the SOAP Parser Dispatcher embeds the returned ServiceList in a SOAP envelope. The SOAP envelope is then passed to the SIP UAS which in turn places the SOAP envelope in the payload of the SIP OK response. This latter messaging event is illustrated in wherein the same reference numerals are used to represent the same or similar elements as shown and described above with respect to .

A more detailed example will provide further insight into these exemplary embodiments related to service discovery. Consider the following code snippet example associated with an exemplary scenario wherein Alice sends a SIP INVITE message from her device endpoint which includes a UDDI find service request to query Bob s endpoint and corresponding UDDI registry regarding which services are available accessible via Bob s endpoint .

Therein the bolded code line is a SOAP Action header which indicates the inclusion of a UDDI find service request embedded in the SIP SOAP message being transmitted from endpoint to endpoint . The corresponding code response from Bob s endpoint could for example appear as follows.

A UDDI registry can also be located in an intermediary node as opposed to an endpoint as described above and illustrated in . In such exemplary embodiments the UDDI find services request and corresponding response can be embedded within for example the SIP INVITE and SIP OK messages being sent between the endpoints e.g. the A party and the B party. shows an intermediary node containing a UDDI registry. Therein an application e.g. an operating system associate with a mobile device associated with an endpoint uses a UDDI client to create a UDDI find service request. The UDDI find service request is embedded in a SOAP envelope and placed in the payload of a SIP INVITE message sent by the SIP UAC via an IP network . The SIP message is intercepted by a SIP Proxy which is part of the intermediary node located along the route between the SIP endpoints and . The SIP Proxy detects the SOAP envelope in the payload and sends it to the SOAP Parser Dispatcher . The SOAP Parser Dispatcher parses out and invokes the UDDI find service method toward the UDDI registry . The UDDI registry returns its service list e.g. a list of Web Services which are available via other APIs from the intermediary node and the resulting service list is stored e.g. in the SOAP Parser Dispatcher . The SIP Proxy adds itself to the SIP signaling path by adding a Record route header to the original SIP message which modified version of the SIP message is then proxied to the original destination in this example endpoint .

In order to address a service discovery request to an intermediary UDDI registry according to these exemplary embodiments a SOAP header can be provided within the SOAP envelope in a manner which is similar to that described above for addressing intermediary nodes . However an additional parameter can be added to the SOAP header which informs the SOAP Parser Dispatcher associated with the addressed intermediary node to store the ServiceList and to associate the stored ServiceList with the current SIP dialogue. For example consider the following code snippet wherein a SOAPAction header is paired with a SOAP header in the envelope shown below to achieve this addressing to an intermediary node of a service discovery request 

Additionally a parameter in the SOAP action header is provided that tells the SIP Proxy to Record route itself i.e. place itself on the return path of the dialog. The added parameter to the SOAPAction header can for example be implemented as shown below 

When the SIP OK response is returned from the B party s endpoint as shown in it passes through the SIP Proxy due to the Record route header which was added to the original SIP SOAP message. The SIP Proxy uses the previously stored callback e.g. function pointer or object reference to invoke the SOAP Parser Dispatcher that kept the result from the previous find service invocation. The SOAP Parser Dispatcher inserts the UDDI ServiceList into a SOAP envelope which is placed in the SIP OK payload.

Thus a method for service discovery according to an exemplary embodiment can include the steps illustrated in the flowchart of . Therein at step a Session Initiation Protocol SIP message including a Simple Object Access Protocol SOAP envelope and a SOAP action header is received the SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service discovery request. The SOAP envelope is parsed to identify the SOAP action header within the SOAP envelope e.g. which indicates that a service discovery request is being made to the recipient node at step . In response thereto a UDDI registry is accessed to obtain a service list at step . The service list is forwarded at step e.g. either directly or indirectly as described above.

By combining SIP with UDDI service discovery according to these exemplary embodiments becomes tightly connected to real time communication session initiation. This means that sessions can be renegotiated depending on available services of the called party or by some intermediary along the route. Additionally the combination of SIP and UDDI services can be added to session initiation either by the called party s own device or by a service intermediary along the route. This opens up a wide range of possibilities for combining services and real time communication to provide a richer user experience and an increase in the number of possible service and communication scenarios.

By using UDDI API requests as payload in a SIP message a UDDI registry can reside on a SIP Server located on a mobile device supporting SOAP over SIP as described above. To provide another mechanism for accessing such services according to these exemplary embodiments a user can send SIP SUBSCRIBE messages containing UDDI save subscription requests to the UDDI registry. The UDDI Subscription API provides the save subscription method which can be used according to these exemplary embodiments to subscribe to notifications for new services. In this context an Event Service acts as an intermediary node between a watcher and the provider of the UDDI registry. An example of service subscription according to exemplary embodiments will be described below with respect to .

Therein shows a first endpoint including a watcher function a second endpoint which is running a UDDI registry and an intermediary node with an Event Service operating thereon The Event Service can for example be implemented as software running on a server as intermediary node e.g. a server as shown in in the network using a storage mechanism for active subscriptions e.g. a database or a filesystem. The watcher sets up a subscription by sending a SIP SUBSCRIBE message with a service event package. Service event packages according to these exemplary embodiments are described in more detail below. The SIP SUBSCRIBE message according to this exemplary embodiment contains a UDDI save subscription as payload. By using UDDI as payload in a SIP SUBSCRIBE message a UDDI registry can be subscribed to for new services. The UDDI Subscription API provides the save subscription method which is used to subscribe for services that matches provided criteria. These criteria can for example be implemented as a subscription filter as specified in the above incorporated by reference UDDI specifications.

These exemplary embodiments involve two related processes techniques for setting up service subscriptions and subsequently techniques for notifying subscribers of services. Taking first of all techniques for setting up subscriptions according to exemplary embodiments consider the following example relative to wherein Alice using endpoint device wants to subscribe to services provided by Bob who is operating endpoint device . In this example the watcher i.e. Alice at endpoint sends a SIP SUBSCRIBE message via SIP user agent which requests a subscription to Bob s services using for example the service event package with a UDDI save binding request in the payload to the Event Service at intermediary node . The UDDI save binding request contains a SIP URI which Bob s UDDI registry will use to send subscription notifications as described below with respect to . In the same SIP message payload Alice s endpoint device also includes a UDDI save subscription request to register a subscription on Bob s UDDI registry in order to be notified when new services become available. An example of the SIP SUBSCRIBE message with its UDDI payload according to this exemplary embodiment is provided below.

Note in the foregoing code example the SOAPAction header which includes both a save binding request and a savesubscription request. This exemplary SIP SOAP message can be transmitted by the SIP UA over e.g. IP network . The Event Service in intermediary node receives this message via its own SIP UAS e.g. it is routed to the Event Service using outbound proxy settings in the subscriber s device . The Event Service uses the information in the SOAPAction header to create a NOTIFY message using the service.winfo event package. The NOTIFY message created by the Event Service will contain the save binding request and the save subscription request which were forwarded to it by Alice s endpoint device . That is when receiving a SUBSCRIBE message from Alice s endpoint device the Event Service stores the subscription parameters and forwards the save subscription portion to Bob s device using the contents of the SOAPAction header for routing. For example the NOTIFY message sent to Bob s endpoint device via SIP UAS and IP network can contain a save subscription request generated by the watcher application of Alice s endpoint device as follows 

The NOTIFY message is received by Bob s endpoint device and processed by its SIP UA and SOAP Parser Dispatcher to disassemble the SIP SOAP message and pass the subscription request on to its UDDI Registry . In this way when Bob adds a new service and registers that service with the local UDDI service in his device the UDDI registry will automatically send a PUBLISH message toward Alice s device . The PUBLISH message contains a notify subscriber UDDI request with information about the service to the Event Service as described in more detail below. The save subscription code portion of the code can be used to indicate to Bob those people or devices who are subscribing to his services. This allows him to set up for example black lists or special promotion messages directed toward his service subscribers. As an initial acknowledgement SIP UA sends a SIP OK message toward Alice s endpoint device which contains a subscription structure as an initial response to Alice s save subscription request e.g. using the type of structure described in the UDDI VE specification at section 5.5.8 as found at http www.uddi.org pubs uddi v3.00 published 20020719.htm the disclosure of which is incorporated here by reference.

Having established a subscription with Bob s endpoint device using SIP SOAP messaging with UDDI payloads as described above another aspect of these exemplary embodiments involves subsequent notification toward Alice s endpoint of new services which Bob s endpoint device is able to provide. More specifically Bob s endpoint device will subsequently to establishment of the subscription send SIP PUBLISH messages toward Alice s endpoint which contain information regarding new services. An example of this message flow according to one exemplary embodiment is illustrated in . For example such information can be contained in invocations of the notify subscriptionListener method which can be provided as a web service by the watcher Alice in this example . The PUBLISH message s are received by intermediary node which in turn sends notifications to all of the subscriber s of Bob s services e.g. including Alice s endpoint device . To provide notification of a new service offered by Bob s device an invocation is carried in the payload of a corresponding NOTIFY message which is sent from the Event Service to Alice s endpoint device . An example of such a NOTIFY message is provided below 

As described above service subscription capabilities can be provided to SIP SOAP messaging techniques for real time services. One exemplary mechanism for providing this functionality is to add an explicit service event package to the event packages which are provided for in SIP s event notification framework i.e. to add a service event package to the event packages described in Session Initiation Protocol SIP Specific Event Notification RFC 3265 A. Roach IETF 2002 the disclosure of which is incorporated here by reference. According to one exemplary embodiment this new service event package can be defined as follows although it will be appreciated by those skilled in the art that other definitions could be used for alternate implementations.

The name of the event package is service. This name should be used as value of the Event header in SUBSCRIBE messages.

The body of a SUBSCRIBE message containing the service event MUST contain a SOAP envelope with a UDDI save binding and save subscription request in the SOAP body.

The default expiration time for subscriptions within this package is 3600 seconds. As per the above incorporated by reference RFC 3265 document the subscriber may specify an alternate expiration in the Expires header field.

The body of a NOTIFY message containing the service event contains a SOAP envelope with a UDDI notify subscriptionListener request in the SOAP body.

The SUBSCRIBE PUBLISH and NOTIFY messages also contain a SOAPAction header. The header uses the URI syntax e.g. as defined in Uniform Resource Identifiers URI Generix Syntax RFC 2396 T. Berners Lee et al. IETF 1998 as follows 

where NID follows the syntax for Namespace Identifier in e.g. URN Syntax RFC 2141 R. Moats IETF 1997 

The SOAPAction header URI indicates the ultimate receiver of the SOAP message. By adding SOAPAction header to a SIP message a PortType or interface and method can be addressed by using the name space specific part of the URN. This enables SIP Proxies and other nodes on the route to process the message correctly. The SOAP body references the method provided by the addressed PortType Interface . This method is denoted in the SOAPAction header immediately after the exclamation mark.

By combining Web Services SOAP WSDL and UDDI and SIP the application developer obtains access to a wide range of Internet services that can be interwoven during the session set up phase of SIP. Real time service composition including service discovery and service subscription is facilitated using the afore described exemplary embodiments. In particular a method for service subscription can include the step illustrated in the flowchart of . Therein at block a Session Initiation Protocol SIP message is transmitted including a Simple Object Access Protocol SOAP envelope and a SOAP action header the SOAP action header indicating that the SIP message includes a Universal Description Discovery and Integration UDDI service subscription request. This step can by itself comprise a method for service discovery according to an exemplary embodiment. Alternatively the method can continue to include other steps associated with downstream processing of the SIP SOAP message as shown in . Therein the flowchart illustrates the step of receiving the transmitted SIP SOAP message at an intermediary node including an Event Service and transmitting a SIP NOTIFY message toward an ultimate receiver of the service subscription request at step . Again the method can continue on from the intermediary node toward the ultimate receiver as shown in . Therein at step the recipient node parses the SIP SOAP message and registers the subscription with the UDDI registry .

The above described exemplary embodiments are intended to be illustrative in all respects rather than restrictive of the present invention. Thus the present invention is capable of many variations in detailed implementation that can be derived from the description contained herein by a person skilled in the art. All such variations and modifications are considered to be within the scope and spirit of the present invention as defined by the following claims. No element act or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items.

