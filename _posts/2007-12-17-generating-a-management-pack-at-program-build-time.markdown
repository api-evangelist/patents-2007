---

title: Generating a management pack at program build time
abstract: Technologies are described herein for generating a management pack at program build time. Data is received that defines one or more events generated by the application program. Data is also received that defines one or more management classes for the application program. When a request to build the program is received, the data defining the events generated by the program and the data defining the management classes is utilized to generate a management pack for the program in an automated fashion. Once the management pack has been generated, it may be provided to an operations manager application program for use in monitoring the operation of the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438542&OS=08438542&RS=08438542
owner: Microsoft Corporation
number: 08438542
owner_city: Redmond
owner_country: US
publication_date: 20071217
---
Operations manager application programs are software tools that allow a computer system administrator to monitor and administer computer systems and software applications. Operations manager application programs typically consume rules and configuration information that is utilized to monitor the operation of technology component in the form of a management pack. For instance a management pack may provide data to discover monitor troubleshoot report on and resolve problems for a specific technology component. A management pack may also include health models to analyze the performance availability configuration and security inputs of a technology component as well as the status of related components to determine the overall status of a technology component.

Management packs are generally created individually for each technology component. For instance with respect to a suite of application programs the management pack for each application program in the program suite would be developed independently. As a result it can be difficult for software developers to enforce consistency and quality development of management packs across multiple application programs developed by an organization. Moreover management packs can be difficult to create and are generally created after development of a technology component has concluded. As a result the quality and consistency of management packs may suffer and consequently it may not be possible to monitor the operation of the related technology components in the most effective way.

Technologies are described herein for generating a management pack at program build time. In particular through the concepts and technologies presented herein a management pack for an application program is generated programmatically at the time the application program is built. By generated the management pack for an application program in an automated fashion as described herein much of the difficulty and tedium previously associated with creating a management pack can be eliminated.

According to one aspect presented herein a management pack for an application program is generated in an automated fashion at the time the program is built. In particular data is received that defines one or more events generated by the application program. In one implementation this data is received in the form of a uniform logging service ULS manifest. Data is also received that defines one or more management classes for the application program. For instance this data may specify management rules management tasks performance counters and data for discovering instances of the various management classes. This data is specified in a source extensible markup language XML file through the use of a simplified XML schema for providing management information.

When a request to build the program is received the data defining the events generated by the program and the data defining the management classes is utilized to generate a management pack for the program in an automated fashion. In one implementation a ULS manifest translator is executed to translate the data defining the events generated by the program to an object model specified using the service modeling language SML . A source XML translator is also executed to translate the data defining the management classes for the program into the object model. The ULS manifest translator and the source XML translator may utilize one or more application programming interfaces APIs implemented by a management pack engine to translate the data to the object model.

According to other aspects a management pack compiler may be executed to read the object model expressed using SML and to compile the model into a management pack for the application program. The management pack compiler may also utilize APIs implemented by the management pack engine. Once the management pack has been generated it may be provided to an operations manager application program for use in monitoring the operation of the application program.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for generating a management pack at program build time. Through the use of the technologies and concepts presented herein a management pack for consumption by an operations manager application is generated in an automated fashion at the time an application program is built. In this manner generation of management packs for software components becomes an integral but automated part of the program development cycle rather than an afterthought following the completion of the program development cycle.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for generating a management pack at program build time will be described.

Turning now to details will be provided regarding an illustrative operating environment for the embodiments presented herein. In particular shows a computing system that provides functionality for monitoring the operation of a managed application the managed application may be referred to herein as an application program an application or simply a program . In one implementation the system includes an operations management server and a managed server . Although not illustrated in the operations management server and the managed server are interconnected through one or more local and wide area networks. It should be appreciated that although only one managed server and one operations management server have been illustrated in additional managed servers and operations management servers may be utilized.

The operations management server illustrated in comprises a standard server computer capable of executing an operating system and one or more programs. In particular according to embodiments the operations management server is operative to execute an operations manager application an operations manager console and an authoring console . The operations manager application is a software program that provides functionality for monitoring the operation of one or more technology components. A technology component may comprise a program like the managed application or a device like the managed server . In this regard the operations manager application may be configured to monitor the resource usage performance health and other characteristics of the operation of a technology component.

The operations manager console operates in conjunction with the operations manager application to provide a user interface for configuring the operation of the operations manager application and for receiving information regarding the operational status of various technology components. According to one implementation the operations manager application comprises the SYSTEM CENTER OPERATIONS MANAGER operations manager application program from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that the implementations presented herein may be utilized with operations manager application programs from other vendors.

In order to monitor the operation of technology components like the managed application and the managed server the operations manager application consumes rules and configuration information for monitoring the operation of a technology component in the form of a management pack . The management pack MP is a document that provides data to discover monitor troubleshoot report on and resolve problems for a specific technology component. MPs may also include health models to analyze the performance availability configuration and security inputs as well as the status of related components to determine the overall status of a technology component. Although only one MP is illustrated in a separate MP may be provided for each managed technology component.

In one implementation the MP is an XML document used to provide monitoring settings to the operations manager application . For instance the MP may contain definitions of the different components in a software technology component such as the managed application or a hardware technology component like the managed server and the information needed by an administrator who operates the software or hardware. In general the data contained within a MP transfers knowledge gained during the development cycle of an application device or service and makes that knowledge available to the administrators that are tasked with the day to day operations of the application device or service. Multiple MPs may be stored in an operations database not shown utilized by the operations manager application .

According to implementations the MP may include data defining one or more management classes. Management classes define the type of applications devices or objects that will be discovered and monitored by the operations manager application . Data may also be supplied in the MP that defines relationships between various management classes. Data defining how instances of each of the management classes are discovered may also be provided. Management rules and management tasks may also be specified. Rules are defined for various purposes such as collecting events creating performance data and generating alerts. Management tasks define actions to be taken based on the detection of certain conditions. Key properties may also be specified for each management class.

The authoring console is another software component that executes on the operations management server . The authoring console provides functionality for allowing a user to create a management pack . As discussed briefly above however the process of creation of management packs through the use of an authoring console suffers from several significant drawbacks. The embodiments presented herein allow the creation of a management pack for the managed application at build time of the managed application . As known in the art performing a software build is the process of converting source code into an executable program. As used herein therefore the term build time refers to the time at which a software build is performed. Details regarding the various processes for generating a management pack at the build time of the application are provided below with respect to .

Referring now to additional details will be provided regarding the embodiments presented here for generating a management pack at program build time. In particular shows a software architecture capable of generating a management pack for the application at the build time of the application . According to embodiments the software architecture includes data that defines events generated by the application . In particular in one implementation this data is specified in the form of a ULS manifest . The ULS manifest contains data describing all of the events generated by the application program . The ULS manifest may also contain data identifying the performance counters created by the application program. As known in the art the Unified Logging Service is an API that allows developers to send notifications to event and trace logs to manipulate performance monitor counters and to use other facilities to send performance data to developer of the application .

According to other aspects the software architecture also includes data that defines one or more management classes for the application program . In particular the developer of the application generates the source XML file prior to the build time of the application . The source XML file contains XML that describes all of the management class definitions for the MP and is expressed using a schema that is simplified when compared to the schema used to define the MP . By using an easy to understand XML schema the source XML file abstracts developers from the complexity underlying the MP .

According to embodiments the source XML file can be divided into multiple physical files for a single MP . According to implementations the source XML file may also include XML data defining the relationships between the various management classes data defining one or more performance counters data defining how instances of each of the classes are discovered and data defining management rules and management tasks. In other implementations configuration data may also be specified. The configuration data provides configuration information to the operations manager application for monitoring the operation of the application .

According to various implementations the software architecture also includes a ULS manifest translator a source XML translator and a configuration data translator . As will be described in greater detail below these components make API calls to a management pack engine to convert the contents of the ULS manifest the source XML file and the configuration data respectively into XML that can be utilized by the management pack compiler . As shown in there is one translator for each type of input in one implementation. For instance in this implementation there is a translator for the ULS manifest and a separate translator for the source XML file . In alternative embodiments a single translator may be utilized.

The ULS manifest translator is an executable component that translates the data contained in the ULS manifest into a format that can be consumed by the management pack engine . The ULS manifest translator then calls the API B on the management pack engine to submit the data. As will be described in greater detail below through this process the data contained in the ULS manifest is converted to a management object model stored by the management pack engine in the model store . In one implementation the object model is specified and stored in the model store using the service modeling language SML . SML is an XML based specification that defines a consistent way to model complex information technology IT services and systems. For instance SML may be utilized to model the structure constraints policies and best practices of IT services and systems.

According to implementations the source XML translator is an executable component that transforms the data contained in the source XML file into the management object model stored by the management pack engine . The source XML translator utilizes the API C exposed by the management pack engine to store the converted data in the model store . As discussed above the data contained in the source XML is converted into SML and stored in the model store through this process. In a similar manner the configuration data translator translates the configuration data into SML and stores the translated data in the model store through calls to the API D implemented by the management pack engine .

The management pack engine is an object model that exposes the application programming interfaces B C and D for consumption by the ULS manifest translator the source XML translator and the configuration data translator respectively. The management pack engine also exposes an application programming interface A for consumption by the management pack compiler . Through the interface A the management pack compiler takes various SML models stored by the management pack engine in the model store and processes the SML models to translate them into an appropriate management pack for the application . This occurs at the build time of the application . In this way the management pack compiler processes and consumes the management object models created by the management pack engine to create the management pack at the build time of the application . Additional details regarding this process are provided below with respect to .

Referring now to additional details will be provided regarding the embodiments presented herein for generating a management pack at program build time. In particular is a flow diagram showing an illustrative process for generating a management pack at program build time. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the events generated by the application are defined. As discussed above the ULS manifest is utilized in one implementation to define the events generated by the application . Other data types and formats may be similarly utilized to define the events generated by the application .

From operation the routine continues to operation where the management classes utilized by the application program are defined. As discussed above the source XML file is generated in one implementation to define the management classes. As also described above the source XML file may also include other data for use in the management pack such as data defining the relationships between the various management classes data defining one or more performance counters data defining how instances of each of the classes are discovered and data defining management rules and management tasks.

From operation the routine continues to operation where a determination is made as to whether a request has been received to build the application program . If no such request has been received the routine returns to operation where another determination is made. In response to a build request being received the routine continues from operation to operation .

At operation the ULS manifest translator is executed to translate the data defining the events generated by the application program stored in the ULS manifest into the SML object model utilized by the management pack engine . As discussed above the ULS manifest translator may call the API B implemented by the management pack engine to cause the translated event data to be stored in the model store .

From operation the routine continues to operation where the source XML translator is executed to translate the data defining the management classes for the application and the other data set forth in the source XML file into the SML object model utilized by the management pack engine . The source XML translator may call the API C implemented by the management pack engine to cause the translated data to be stored in the model store . The configuration data translator may also be executed in a similar manner to translate the configuration data and to cause the translated data to be stored in the model store .

From operation the routine continues to operation where the management pack compiler is executed. The management pack compiler reads the SML models stored by the management pack engine in the model store and processes the SML models to translate them into an appropriate management pack for the application . The routine then continues to operation where the generated management pack is provided to the operations manager application for consumption and use in monitoring the operation of the application . From operation the routine continues to operation where it ends.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the management pack engine the ULS manifest translator the source XML translator and the management pack compiler each of which was described in detail above with respect to . The mass storage device and the RAM may also store other types of program modules.

Based on the foregoing it should be appreciated that technologies for generating a management pack at application program build time are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

