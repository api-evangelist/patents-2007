---

title: Methods and systems for interactive computing
abstract: Methods and systems for creating a synthetic surrogate fitness function. User decisions are received representing fitness for a plurality of solutions. A partial ordering of the plurality of solutions is provided based on the received user decisions, wherein at least some of the plurality of solutions are represented to have a greater relative fitness than other of the plurality of solutions. A complete order of at least the plurality of solutions is induced based on the normalized partial ordering. A synthetic surrogate fitness function is generated using the induced complete order.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979365&OS=07979365&RS=07979365
owner: The Board of Trustees of the University of Illinois
number: 07979365
owner_city: Urbana
owner_country: US
publication_date: 20070131
---
This application claims the benefit of U.S. Provisional Application Ser. No. 60 763 788 filed Jan. 31 2006 under 35 U.S.C. 119.

This invention was made with Government support under Contract Number F49620 03 1 0129 awarded by the Air Force Office of Scientific Research AFOSR and Contract Numbers N00014 01 1 0175 and N00014 01 1 0562 awarded by the Office of Naval Research ONR . The Government has certain rights in the invention.

The invention relates generally to the field of methods and systems for interactive computing. The invention relates more particularly to the fields of methods for optimization.

Genetic and evolutionary algorithms GAs may be employed to optimize a solution set in a variety of problem types. Generally GAs include selection from among a plurality of possible solutions based on fitness and recombination of one or more selected solutions to generate additional possible solutions. These two actions may be repeated as necessary until there is a convergence to an optimal or suitable solution.

An important concept used in GAs to implement a survival of the fittest mechanism and to distinguish between good and bad solutions is the notion of fitness. Unlike traditional search methods a fitness measure can be relative and it can be an objective measure including a mathematical equation model or a computation. It could also be a subjective measure involving human evaluation or even be coevolved in a co operative or competitive environment.

GAs may be classified generally based on whether selection choosing and recombination innovation respectively are performed by a human or by a computational agent such as but not limited to a computer. For example a standard GA relies on computational selection e.g. via computing a fitness function model or computation and recombination e.g. crossover and or mutation . Computer aided design CAD on the other hand relies on computational selection of solutions but a human performs the recombination of the solutions. In a human based GA a human performs both steps though these steps may be augmented for example by a network or other communication or collaborative medium.

GAs in which fitness measure or quality of candidate solutions e.g. selection or choosing is provided by human evaluation and or judgment rather than a fitness function but in which recombination e.g. innovation is at least in part based on a computational agent are referred to as interactive genetic algorithms iGAs . iGAs a method of interactive evolutionary computation allow human interaction to provide subjective input regarding fitness while still providing computational recombination.

More particularly in conventional iGAs qualitative fitness as determined by a human user replaces quantitative fitness. As one example of providing qualitative fitness a subset of generated solutions may be sorted and presented to a user who selects a preferred solution from among the presented ones. The preferred solution is used for computationally provided recombination of new subsets which are again presented to the user.

Dawkin s Blind Watchmaker program described in Dawkins R. The Blind Watchmaker New York W. W. Norton 1986 and the Faceprints system developed at New Mexico State University as described in Caldwell C. and Johnston V. S. Tracking a criminal suspect through face space with a genetic algorithm Proceedings of the Fourth International Conference on Genetic Algorithms Morton Kaufmann 1991 pp 416 421 are two nonlimiting examples of iGAs. For example in Faceprints a system replaces the role of a human sketch artist in evolving the faces of criminal suspects from witness recollection. Faces are encoded as binary strings where subcodes represent different facial features nose type mouth type hair type etc. . Each full chromosome maps to a face and the population of chromosomes is presented to the human critic who is asked to determine how closely the face resembles that of the criminal. This subjective ten point scale is used to drive the evolution of subsequent generations of faces and in a relatively short time the iGA arrives at a reasonable facsimile of the correct face.

However unlike in evolutionary algorithms with objective fitness measures one of the daunting challenges of iGAs is providing effective methods of combating user fatigue. Because a human is in charge of the evaluation of a solution user fatigue results from the large time scale between user evaluations and the evolutionary mechanisms used to generate new solutions until convergence. For example even for moderately sized problems iGAs may require for example a few hundred to a few thousand fitness evaluations which is highly improbable sometimes even impossible for users to perform. User fatigue may occur at fairly short time periods such as within 1 2 hours or even earlier.

User fatigue can result in sub optimal solutions or the end of an iGA session before even a suitable solution is found. Similarly repeated evaluation of similar solutions can result in user frustration relatively quickly compounding user fatigue.

Additionally an important element for the successful application of interactive genetic algorithms iGAs or any other interactive evolutionary computation method is the reliability of the evaluations or decisions provided by a user. The decisions that the user makes when using an iGA guide the search across the space of possible hypotheses. Any interactive procedure regardless of how efficient it can be for reducing the number of evaluations required will fail to provide high quality solutions if the user is unable to provide consistent fitness evaluations.

Thus it is desired to provide ways to improve efficiency enhancement for iGAs while also providing the reliability needed to use iGAs successfully.

Methods and systems for creating a synthetic surrogate fitness function are provided according to embodiments of the present invention. In exemplary methods and systems user decisions are received representing fitness for a plurality of solutions. A partial ordering of the plurality of solutions is provided based on the received user decisions wherein at least some of the plurality of solutions are represented to have a greater relative fitness than other of the plurality of solutions. A complete order of at least the plurality of solutions is induced based on the normalized partial ordering. A synthetic surrogate fitness function is generated using the induced complete order.

Simple GAs may require hundreds or thousands of fitness evaluations before finding good quality solutions but most human evaluators providing feedback to an iGA will tire far short of best convergence. User fatigue and reliability concerns with iGAs place a premium on efficiency enhancement techniques. Efficiency enhancement techniques for example may reduce the number of evaluations needed avoid repetitive evaluations and or provide a eureka moment on the part of the user thus more quickly achieving an optimal or suitable solution. For example techniques such as parallelization time continuation evaluation relaxation and hybridization are useful approaches to combat evaluation fatigue by reducing the convergence time.

Generally in evaluation relaxation schemes a computationally costly but accurate function evaluation is replaced by a cheap but less accurate surrogate function. Examples of evaluation relaxation for GAs are described in Sastry K. Evaluation relaxation schemes for genetic and evolutionary algorithms Master s thesis University of Illinois at Urbana Champaign General Engineering Department Urbana Ill. and Sastry K. Goldberg D. E. Pelikan M. Efficiency Enhancement of Probabilistic Model Building Genetic Algorithms Urbana Ill. University of Illinois at Urbana Champaign Illinois Genetic Algorithms Laboratory 2004 which are incorporated by reference herein.

However a serious stumbling block in developing surrogate fitness functions in iGAs is the absence of computable fitness function. Additionally the user evaluation is relative and user preference might change over time. Hence conventional evaluation relaxation methods have fallen short and cannot effectively model user fitness function.

Therefore preferred embodiments of the present invention provide evaluation relaxation systems and methods for actively combating user fatigue. Such systems and methods address issues such as the lack of computable fitness a real fitness function and lack of a systematic way for modeling a user decision process and take advantage of relative evaluations provided by the user to reduce the user fatigue.

Embodiments of the present invention provide methods for interactive computing preferred examples of which are referred to herein as active interactive genetic algorithms active iGAs . Active iGAs include steps of learning from human computer interaction. Steps of using the learned knowledge to actively guide the search based interaction process are performed.

In particular embodiments active iGAs also quantify the consistency of users using them. Quantifying the consistency of a user helps establish confidence measures on the results obtained by a given user and actively intervenes in the interactive evolutionary process helping the user to achieve high quality solutions.

Preferred embodiments of the present invention rely on actively optimizing synthetic fitness functions. In a preferred iGA framework user evaluations provide the necessary input for synthesizing a reasonably accurate surrogate fitness function that models user evaluations or in other words his her decision preferences. User evaluations collected via a tournament selection provide partial ordering relations between solutions. Preferred embodiments assemble a directed partial ordering graph of user evaluations.

Additionally in such a directed graph any contradictory evaluation provided by the user introduces a cycle in the graph. Exemplary embodiments provide methods to measure the consistency of the evaluations provided by the user along the evolutionary process.

In preferred embodiments of the present invention a method for generating a synthetic fitness function is provided. General steps in exemplary methods include 1 partial ordering in which the qualitative decisions made by the user about relative solution quality are used to generate partial ordering of solutions 2 induced complete order employing concepts of non domination and domination count to induce a complete order of the solutions in the population based on their partial ordering and 3 a surrogate function in which the induced order is used to assign ranks to the solutions and use them in a surrogate function to create a surrogate fitness function that effectively models user fitness. The properly trained model provided by a properly chosen surrogate function is able to satisfy two properties a synthetic fitness needs to satisfy fitness extrapolation and order maintenance.

A non limiting example of the surrogate function uses a regressor such as an epsilon support vector regression SVM to create a surrogate fitness function that effectively models user fitness. Preferred active iGAs optimize such a synthetic fitness to obtain educated guesses of the user preferences and thus reduce the number of user evaluations required.

Additionally by augmenting user evaluations with a synthetic fitness function user fatigue is reduced. Actively optimizing the synthetic fitness such as but not necessarily by using a compact genetic algorithm cGA produces a population of candidate solutions. The injection of such candidate solutions into the user evaluation process effectively reduces the number of evaluations required on the user side until convergence. For example by reducing the number of user evaluations needed e.g. 3 7 times fewer evaluations exemplary embodiments of the present invention can actively combat user fatigue. Synthetic fitness produced from the exemplary active iGA may also be used as an add on to existing optimization techniques by supplementing the tournaments based on user input. Such optimization techniques are not limited to GAs.

Embodiments of the invention can also include a step of detecting user fatigue. If for example a user is found to make an inconsistent or contrary selection e.g. selects A over B B over C but then selects C over A an exemplary method may include notifying the user discounting results or taking other actions.

Inducing a synthetic fitness allows one to exploit different time scales involved in an iGA. Computing a synthetic fitness value may take several orders of magnitude less time than a typical user evaluation. This significant disparity in evaluation times allows one to evolve the population with surrogate fitness alone and to show the user potentially high quality solutions.

Exemplary methods allow use of larger population sizes required to obtain high quality solutions which otherwise is at least improbable if not impossible. Such methods also speed up the iGA process and thereby help avoid user fatigue. Additionally preferred methods present potentially high valued solutions for user evaluation thus avoiding user frustration. An exemplary model can also be regarded as a useful insight into the user preferences.

The use of iGAs allows the fusion of human and computer efforts for problem solving. However putting the evaluation process into the hands of a user sets up a different scenario when compared to normal optimization. Research efforts related to the iGA s challenges reveal five general facets that influence iGAs in providing an effective solution 

Clear goal definition A precise description of the goal to the user is helpful to assist the user in engaging a successful innovation process. A clear definition e.g. clear criteria for the goal being reached helps evolve high quality solutions. Moreover if such definition is maintained along the run the user s task is greatly simplified.

Impact of problem visualization The solutions presented to the user should be understandable and comparable. If the visualization is too complex the user will be overwhelmed with details which can mislead the user s evaluations. If there is no simple way to compare solutions qualitatively the user may not be able to make a proper decision. Generally if such qualitative comparison is not easy the quality of the user evaluations will decrease and greatly penalize the performance of the iGA.

Lack of real fitness iGAs lack a quantitative fitness function analogous to the one used in traditional GAs. The qualitative nature of the evaluation process usually leads to evaluation scenarios where the user is asked to provide solution rankings or relative evaluations among a selected subset of solutions. Thus conventionally there has been no numeric form that can be optimized.

Fatigue User fatigue is a critical element to produce high quality solutions. Long times until convergence as a nonlimiting example 1 2 hours lead to tedious and demanding attention periods on the user side. Fatigue becomes the main reason for an early stop of the iGA process and leads to low quality solutions. Reliability of user evaluation also will likely suffer further reducing the quality of the solutions and itself adding to user fatigue for example by resulting in repetitive evaluations.

Persistence of user criteria The user can change his her evaluation criteria along an iGA leading to a noisy evaluation scenario. Though it may be easy to maintain a unique criteria for a short time period the user criteria may drift along the run leading to a dynamic optimization scenario. Methodologies for helping the user to maintain the persistence of his her evaluation criteria along the iGA run is thus significant.

The exemplary active iGA method described above focuses on at least two of these facets the lack of a real fitness and user fatigue. It takes advantage of the relative evaluations provided by the user to reduce the user fatigue by actively learning from the user interaction with the evolutionary process.

Active iGAs rely on learning from the interaction from the user and anticipating what hypotheses the user may be interested in via educated guesses . Generally an active iGA mines the information provided by the user and uses the obtained knowledge to guide the breeding process of new solutions in an educated manner. In preferred embodiments this is accomplished partly by addressing several aspects of interaction with the user.

Conventional efficiency enhancements assume the existence of an objective fitness function that can be computed without any human intervention. Such a requirement cannot be fulfilled under the conventional iGA s paradigm. Moreover the qualitative nature of the evaluations in an iGA also fosters other issues that need to be addressed.

For instance if an iGA run involves two different parallel evaluators the iGA needs to deal with two different subjective evaluation criteria. Thus no assumption should be made about the coherence of such criteria across the parallel evaluators and multimodal and multiobjective approaches may be needed to deal with such situations.

Several techniques have been used to collect the user s subjective evaluation. Ranking of solutions quality measurement of the solution in a 0 to 100 scale or selecting a subset of the promising solutions from a pool are a few alternatives proposed since the origin of iGAs. Each of these methods have their advantages and disadvantages combining different evaluation and selection schemes.

Tournament selection such as that described in Goldberg D. E. Korb B. and Deb K. Messy genetic algorithms motivation analysis and first results Complex Systems 3 5 1989 pp. 493 530 is one of the most widely used ordinal selection schemes for GAs. In tournament selection a specified number of individuals s is selected from the current population of size n. The best individual out of the s individuals gets a copy in the mating pool. The selection of the s individuals can be performed either with replacement or without replacement. In selection with replacement the individuals selected from the current tournament are candidates for other tournaments. On the other hand in selection without replacement the individual once selected is not a candidate for other tournaments.

Such a selection scheme replaces the need for collecting a numeric evaluation from the user. Instead an iGA under a tournament scheme with replacement displays a set of individuals and the user picks the best solution out of the s candidates shown. Evaluation of fitness thus is performed by comparison.

The simplest iGA scenario for the user and the minimal scenario for collecting meaningful domain independent information is provided by a tournament selection of size s 2 where given two solutions the user is able to provide three possible outcomes 1 the first solution is better than the second one 2 the first solution is worse than the second one and 3 both solutions are equal don t know don t care. For instance given two solutions sand sin a given tournament the user picks one of the solutions sfor instance. This decision can be safely cast into fitness terms the solution of sis better than the one of s hence f s f s . Such interpretation introduces a partial ordering among solutions.

Exemplary embodiments of the present invention use a partial ordering partial user evaluation to compute a numerical synthetic subjective fitness. Any attempt to synthesize a subjective fitness based on the partial order provided by the user preferably should at least partially satisfy at least two properties 1 fitness extrapolation and 2 order maintenance. However it is contemplated that in certain methods of the present invention it may be possible to save computational resources by not fully enforcing one or both of these requirements.

The first property fitness extrapolation requires that the synthetic fitness provide meaningful inferences e.g. ordering relations beyond the boundaries of the current partial order provided by the user. Fitness extrapolation guarantees that any attempt to optimize such surrogate fitness will provide a useful guess of the user s future evaluations.

The second property order maintenance guarantees that a synthetic fitness is accurate if it maintains the partial ordering of solutions given by the user decisions. Thus if s s . . . sthen f s f s . . . f s . Such assumptions allow one to use low cost high error modules as long as they maintain the proper ordering.

Nearest neighbor models e.g. see Takagi H. Interactive evolutionary computation Fusion of the capabilities of EC optimization and human evaluation Proceedings of the IEEE 89 9 2001 pp. 1275 1296 have been used for synthetic fitness. However such models may not satisfy the above two synthetic fitness properties. Such models assume that given a set of user evaluated solutions the fitness of a new solution may be estimated as the fitness of the closest evaluated solutions using some distance metric. Other approaches average the fitness of the k nearest solutions. It is easy to prove that such schemes may easily violate both of the previous properties.

For example no fitness extrapolation may be provided by such nearest neighbor surrogate heuristic. illustrates such situation with a simple OneMax counterexample. Any finite randomly generated population will be bounded by two solutions the ones with the best and worst evaluated fitness. If one optimizes such a synthetic fitness the final population may converge in the best case around the best solution in the nearest neighbor model. This happens because all the potential new good solutions top right portion of the line in are equally evaluated not providing any useful insight on unseen good candidate solutions.

Moreover weighted nearest neighbor heuristics may also violate the partial ordering property. Assume one is using a 3 nearest neighbor equally weighted heuristic and the three user evaluated closest solutions to a new unseen solution x 41 are s 40 40 s 42 42 and s 45 45. The estimated fitness

Another surrogate model commonly used as a synthetic fitness function is based on regressors for example neural networks. An exemplary embodiment of the present invention uses a generalized regression model the insensitive regression SVM . A detailed description of SVM may be found for example in Cristianini N. and Shawe Taylor J. An Introduction to Support Vector Machines Cambridge Press 2000 and Shawe Taylor J. and Cristianini N. Kernel Methods for Pattern Analysis Cambridge Press 2004 which are incorporated herein by reference. A synthetic fitness based on SVM using a linear kernel easily satisfies the fitness extrapolation and order maintenance properties. However it will be appreciated that other methods that can be used to fit a curve function approximation such as but not limited to neural networks linear regression non linear regression genetic programming machine learning techniques fuzzy logic etc. may be used for a synthetic fitness function.

The minimal number of user evaluations needed to obtain a surrogate SVM subjective fitness model that guarantees both properties is shown in . Given a problem with no dependencies among decision variables OneMax a set of evaluated solutions is sampled at random to synthesize a fitness by training a SVM regressor. displays the probability of perfect global ordering by the SVM fitness as a function of the number of sampled instances. Results are averaged among 1000 independent runs. Given a problem size l there is a minimal number of samples required to infer a property compliant synthetic fitness. Moreover such minimal number of solutions grow as l 2 as shows. Such results are completely consistent with the theoretical PAC bounds of SVM which requires at least the number of training examples to grow linearly with the number of dimensions of the problem.

These results hold for problems where no linkage among the decision variables is present. If linkage among variables is present such as linkage described in Thierens D. and Goldberg D. E. Mixing in Genetic Algorithms Proceedings of the Fifth International Conference in Genetic Algorithms 1993 pp. 38 45 and Harik G. Linkage Learning via Probabilistic Modeling in the ECGA Urbana Ill. University of Illinois at Urbana Champaign Illinois Genetic Algorithms Laboratory 1999 then a polynomial kernel may be required by the SVM to satisfy the fitness extrapolation and order maintenance properties.

Exemplary embodiments of the present invention exploit user interaction with a selection process. People use computers to make decisions all the time. Aspects of the present invention can exploit these decisions to achieve benefits and advantages. For example users may be presented with two alternative solutions to a problem and asked to select the better one. Through multiple iterations a model such as a predictive or probabilistic one genetic or evolutionary may be built of the user behavior. One exemplary way to build the model is through what is referred to as modeling partial positions . The positions of an overall population are partial since they have been presented to the user for example on an A or B basis two at a time . In this way while a preference between A and B is known that between A and C or D is not. Rules of logic can be used to predict preferences. Another step is to use a so called partial position graph to model relations examples of which are provided herein.

The surrogate models reviewed above make a basic assumption the partial order of user evaluations can be translated into a global numeric value. If such a value is available then a regressor such as SVM provides an efficient synthetic fitness which may be used to combat user fatigue. Thus exemplary methods of the present invention provide among other things a way to turn the user provided partial ordering among the different solutions into a numeric fitness value to synthesize the training examples of a regression model such as but not limited to SVM. As new evaluations are made it is also preferable to incrementally refine the model.

In preferred embodiments of the present invention dominance measures are used based on partial ordering to induce a complete order. This induced complete order is in turn used to train a regression model. In particular embodiments dominance measures are used on a graph G of partially ordered solutions.

Preferably as shown in at least one solution is created step and presented to a user step . Preferably to provide a relative e.g. tournament selection to a user a plurality of solutions is created. However a single absolute solution may alternatively be presented for example and given a subjective fitness by a user for example numerical fitness yes no fitness etc. It is also contemplated that a user may provide input on a solution that is presented for example outside of the exemplary method. For example a solution may be created and or presented via a third party before user input is received. In this case steps and may be omitted in particular embodiments.

To provide a synthetic fitness user input representing subjective fitness is received such as by collecting one or more user evaluations for one or more created solution s step such as but not limited to via a tournament. A partial ordering of solutions is created based on the collected user evaluations step . Partial ordering may be created for example by collecting and organizing user inputs according to user preferences. The partial ordering may be represented by a graph for example. Complete ordering is induced based on the partial ordering step . For example numeric fitness may be computed for the solutions based on the partial ordering and based on the computed numeric fitness a complete order may be induced. The induced complete order is used to create or refine a synthetic surrogate subjective fitness step . The synthetic surrogate subjective fitness preferably is a model in the form of an equation that provides a synthetic surrogate for user subjective fitness. Any method for numerical approximation may be used to create the model based on the induced complete order. As a nonlimiting example the induced complete order may be used to train a regression model. This learned regression model provides the synthetic fitness.

At least one new solution is generated using the new synthetic surrogate subjective fitness step . If stopping criteria are satisfied step the process ends. The stopping criteria determination step may occur at an earlier part of the process if desired. Otherwise the newly generated solution s replaces some or all of the previous solution s depending on whether replacement is used for a particular method to provide a new solution set. The new solution s is presented to the user step preferably along with one or more previously generated solutions and the process continues until stopping criteria are satisfied.

As a non limiting example of presenting solutions to a user step and receiving input step in a tournament selection of size s 2 a user is asked to provide an answer to the question of which of two choices is better. The outcome of such question may be the first shown the second shown or both are equal or the user was unable to decide. Assume an illustrative method where eight solutions 010111 010100 010101 100001 100000 101010 001000 and 001110 need to be evaluated as presented in . These eight randomly chosen individuals from a population can be presented as a sequence of seven different hierarchical tournaments 010111 010100 010101 100001 100000 101010 001000 001110 010111 010101 100000 001000 and 010111 100000 . In the number beside each node simulates the objective function in the user s mind. User input regarding the tournament may be received via any of a variety of methods such as but not limited to an interactive computer session.

The tournament ordering presented in guarantees that the partial order introduced by the user evaluations can be expressed in a graph form such as connected graph G shown in . This is an example of providing a partial ordering of solutions based on the user input step . Such graph G represents the partial evaluation order representing the solutions as a vertex in V and the pair wise comparison among individuals greater lesser or equal as edges in E. As shown in the partial ordering graph provided by the user may be undirected equal evaluations are allowed .

However and preferably such a graph can be easily transformed into a normalized directed graph for example by replacing the equal undirected edges by the proper greater or lesser relations directed edges as shows. This makes it easier to induce complete ordering and provides additional information regarding consistency of user evaluations.

To create a synthetic fitness exemplary methods of the present invention next induce a complete order for the solutions step by using heuristics based on the partial ordering provided by user evaluations and the Pareto dominance concept of multiobjective optimization. A global ordering measure as a nonlimiting example may be computed using a heuristic based on two dominance measures and . Define v dominated vertices as the number of different nodes present in the directed graph on the paths departing from vertex v. Analogously v dominating vertices is defined as the number of different nodes present on the paths arriving to v.

Since the partial order is a directed graph such mapping has an interesting property. If v appears more than once in a path of v or v then a cycle in such graph exists. Thus due to the greater and lesser relations a contradiction on the user evaluations is identified. Exemplary embodiments break such cycles by removing the oldest evaluation edge in the path. Alternative methods include but are not limited to maintaining the user evaluations and or selecting among the contradictory results based for example on a ranking of probabilities of preferences between pairs of nodes. Other factors may include recency statistical methods properties of the graph providing an interactive procedure allowing the user other users or an administrator e.g. an expert to decide between contradictory results etc.

The table in computes v or v using the partial order presented in the graph presented in . In given a vertex v the number of dominated vertices and dominating vertices are computed. Using these measures the estimated fitness of a given solution vertex v may be computed as circumflex over f v v v . Intuitively the more solutions a solution v dominates is greater than the greater the fitness. Otherwise the more solutions that dominate are greater than a solution v the smaller the fitness. The final global estimated ordering circumflex over r v is obtained by sorting the vertices v S by circumflex over f v as shown by example in along with real fitness f v and ranking r v . The estimated ranking introduces some spurious relations inside common ranks.

Once the global ordering is induced such as via computing estimated ranking circumflex over r v such ordering may be used to create a synthetic surrogate subjective fitness step . As a nonlimiting example the induced complete order may be used to train a regressor such as the SVM. The model may vary for example depending on the user s preferences e.g. by complexity of user preferences etc. Certain users for example experts may require a more complex model as they rely on additional decision factors. The model may be based only on the ranking but it may also be mapped for example to fitness values. By optimizing such a synthetic fitness it is possible to obtain a look ahead on candidate solutions to be evaluated by the user for example as the synthetic fitness provides a model based on user behavior.

In exemplary embodiments of the present invention the synthetic fitness function may be combined with an iGA to reduce the number of human evaluations. The synthetic fitness which is based on user input is itself used to generate new solutions to the user in future iterations. An exemplary interactive computing method integrating the synthetic fitness function and an iGA is referred to herein as an active iGA .

Generally in an active iGA a plurality of solutions is generated from a population to provide an initial solution set to create an empty directed graph. The initial solution set is presented to a user for evaluation providing a hierarchical tournament set. For example a tournament is created and presented to the user using the solutions in the solution set. The collected user input is used to provide or update partial ordering in the directed graph and a complete ordering ranking is induced based on the partial ordering. The solutions and their ranking are used to train a surrogate synthetic fitness for example by using a SVM. The synthetic fitness is optimized for example by using cGA.

Based on the provided synthetic fitness solutions in a new solution set are generated. For example the synthetic fitness may be exploited by optimizing the synthetic fitness sampling the best candidate or candidates and presenting the best solutions to the user with other generated solutions for evaluation. Alternatively or additionally the synthetic fitness may be sampled without optimizing. The steps are repeated until converging criteria is met. By supplementing solution sets with solutions provided by a synthetic subjective fitness function the exemplary method provides an educated guess of user preferences. This reduces user fatigue by reducing the number of user evaluations needed to achieve convergence. Also by producing better solutions exemplary embodiments reduce user frustration.

8 Create a V set with 2new different solutions where V V 0 sampling out of the evolved probabilistic model.

Given the theoretical framework used in the exemplary embodiments described above OneMax and SVM using a linear kernel an estimation of distribution algorithm such as but not limited to the compact GA cGA is a suitable option to optimize the synthetic fitness. Similar to other EDAs cGA replaces traditional variation operators of GAs by building a probabilistic model of promising solutions and sampling the model to generate new candidate solutions. The probabilistic model used to represent the population is a vector of probabilities and therefore implicitly assumes each gene or variable to be independent of the other. Particularly each element in the vector represents the proportion of ones and consequently zeros in each gene position. The probability vectors are used to guide further search by generating new candidate solutions variable by variable according to the frequency values.

1 Initialization As in simple GAs where the population is usually initialized with random individuals in cGA one starts with a probability vector where the probabilities are initially set to 0.5. However other initialization procedures can also be used in a straightforward manner.

2 Model sampling Two candidate solutions are generated by sampling the probability vector. The model sampling procedure is equivalent to uniform crossover in simple GAs.

4 Selection Like conventional GAs cGA is a selectionist scheme because only the better individual is permitted to influence the subsequent generation of candidate solutions. A survival of the fittest mechanism is used to bias the generation of new individuals. Tournament selection for example the method described in Goldberg Korb Deb 1989 is usually used in cGA.

5 Probabilistic model updating After selection the proportion of winning alleles is increased by 1 n. Only the probabilities of those genes that are different between the two competitors are updated. That is 

The cGA is described in more detail for example in Harik G. Lobo F. and Goldberg D. E. The compact genetic algorithm Proceedings of the IEEE International Conference on Evolutionary Computation 1998 pp. 523 528 and Harik G. Cant Paz E. Goldberg D. E. Miller B. L. The gambler s ruin problem genetic algorithms and the sizing of populations Evolutionary Computation 7 3 1999 pp. 231 253 and thus a more detailed explanation will be omitted herein. The exemplary cGA is operationally equivalent to the order one behavior of a simple genetic algorithm with steady state selection and uniform crossover. Therefore the theory of simple GAs can be directly used to estimate the parameters and behavior of the cGA. Many other optimization methods such as but not limited to linear programming non linear programming metaheuristics genetic and evolutionary algorithms operations research OR methods machine learning methods artificial intelligence methods etc. can be used in place of cGA.

A simple web interface was created to test the performance of the exemplary active iGA described above. The interface was designed to minimize the interference bias providing a clear goal definition simple problem visualization and a clear relative comparison method to help maintain the user criteria. shows a snapshot of an iGA session using the exemplary active iGA.

To collect unbiased results a user with no experience in evolutionary methods or interactive optimization was selected to perform the experimentation. The underlying problem to be solved was OneMax given different problem sizes l 4 8 12 16 20 24 28 32. The user did not know the underlying problem to be solved. For each problem size 10 independent runs were conducted by the user. Such results were collected averaged and later analyzed and compared against the usage of a theoretical iGA based on the simple GA.

Analysis begins by considering the scalability of selectorecombinative GAs followed by the scalability of the exemplary active iGA. Two factors for predicting the scalability and estimating the computational costs of a GA are convergence time and population sizing. Therefore facet wise models of convergence time and population sizing will now be briefly described.

Goldberg D. E. Deb K. and Clark J. H. Genetic algorithms noise and the sizing of populations Complex Systems 6 1992 pp. 333 362 proposed population sizing models for correctly deciding between competing building blocks BBs . They incorporated noise arising from other partitions into their model. However they assumed that if wrong BBs were chosen in the first generation the GAs would be unable to recover from the error. Harik G. Cant Paz E. Goldberg D. E. Miller B. L. The gambler s ruin problem genetic algorithms and the sizing of populations Evolutionary Computation 7 3 1999 pp. 231 253 refined the above model by incorporating cumulative effects of decision making over time rather than in first generation only. They modeled the decision making between competing BBs as a gambler s ruin problem. Here we use an approximate form of the gambler s ruin population sizing model 

M hlenbein H. and Schlierkamp Voosen D. Predictive models for the breeder genetic algorithm I. continuous parameter optimization Evolutionary Computation 1 1 1993 pp. 25 49 derived a convergence time model for the breeder GA using the notion of selection intensity from population genetics. Thierens D. and Goldberg D. E. Convergence models of genetic algorithm selection schemes Parallel Problem Solving from Nature 3 1994 pp. 116 121 derived convergence time models for different selection schemes including binary tournament selection. Back T. Selective pressure in evolutionary algorithms A characterization of selection mechanisms Proceedings of the First IEEE Conference on Evolutionary Computation 1994 pp. 57 62 derived estimates of selection intensity for s wise tournament and selection. Miller B. L. and Goldberg D. E. Genetic algorithms tournaments selection and the effects of noise Complex Systems 9 3 1995 pp. 193 212 developed convergence time models for s wise tournament selection and incorporated the effects of external noise. B ck T. Generalized convergence models for tournament and selection Proceedings of the Sixth International Conference on Genetic Algorithms 1995 pp. 2 8 developed convergence time models for selection. Even though the selection intensity based convergence time models were developed for the OneMax problem it has been observed that they are generally applicable to additively decomposable problems of bounded order.

In an exemplary analysis we use an approximate form of a convergence time model disclosed in Miller B. L. and Goldberg D. E. 1995 and Goldberg D. E. The design of innovation Lessons from and for competent genetic algorithms 2002 

Using the above two equations we can now predict the scalability or the number of function evaluations required for successful convergence of a GA as follows 

One difference resulting from using a synthetic fitness function is the population size requirements. A presents the population sizing of a simple GA and the one of the iGA. As can be seen the iGA requires a population size that at least grows linearly. Such requirement is the result of using a SVM with a polynomial kernel which requires at least as many training examples as dimensions l in the iGA case as shown previously. Moreover the active iGA population is also constrained by the tree tournament structure so that given a problem size l the population size is forced to grow 2.

Finally shows the speedup achieved using the active iGA with respect to a simple iGA. The results show how with the active use of a simple low cost high error synthetic fitness function we were able to achieve speedups ranging from 3 up to 7 times. The instability of the speedup is the result of the constraints on the population sizing see . However being able to cut down the total number of evaluations on such ratios is shown to be an effective method for combating user fatigue.

A significant element for the successful application of interactive evolutionary computation methods is the reliability of the solution quality assessments made by the user. The decisions that the user takes when using an iGA guide the search across the space of possible hypotheses. Any interactive procedure regardless of how efficient it is will perish in the quest for high quality solutions if the user is unable to provide consistent evaluations. It is helpful to quantify the consistency of users using iGAs as it is the first step toward ultimately establishing confidence measures on the results obtained by a given user and actively intervene in the interactive evolutionary process helping the user to achieve high quality solutions.

An important byproduct of the synthetic fitness described above appears due to using a partial ordering graph ensemble G . Again a vertex in V represents the solutions s presented to the user so far whereas the edges in E represent the partial ordering evaluations provided by the user. The minimal scenario for collecting meaningful domain independent information is provided by a binary tournament scheme s 2 where given two solutions s s V the user is able to provide three possible outcomes 1 s s 2 s

The normalized graph G presents an important property cycles represent a clear contradiction on a proper partial ordering. In other words a cycle in G formed by three solutions s s s S Vis an indication of an inconsistency on the user evaluation criteria because it requires that s s s S. This simple property allows one to erect a first quantitative measure of the consistency of the evaluations provided by the user. This consistency measure can be defined and used along the run of an exemplary active iGA.

According to additional embodiments of the invention the partial ordering graph G which is incrementally built into steps 2 3 4 and 9 of the exemplary active iGA described above is used for providing a consistency measure. The basics of the ensemble of G will now be described.

The synthetic fitness used in the exemplary active iGA described above assumes that the interaction of the user with the evolutionary process can be archived for mining and learning purposes. However it also assumes that this information is going to be limited and independent of the background knowledge available at the problem at hand to be explored. Given the scenario for collecting information mentioned above the evaluations provided by the user introduce a partial order among the solutions presented so far.

The tournament ordering presented in guarantees that the partial order introduced by the user evaluations produces a connected graph G which given certain assumptions can be easily turned into a normalized directed graph G as shows. A table of estimated fitness and final global estimated ranking is shown in . The directed graph is obtained by replacing the equal undirected edges by the proper greater than or lesser than relations directed edges as shown in the following algorithm. The steps in this exemplary procedure to normalize G into G to expand equal relationships are 

Since this partial order graph is a directed graph such mapping has an interesting property. Given a normalized partial ordering graph G if a vertex v appears more than once in a path of v or v then a cycle in such graph exists. Thus due to the greater and lesser relations a contradiction on the user evaluations is identified. This property is the basis of a consistency metric of user evaluations in exemplary methods of the present invention. A user will be consistent at time t if no cycles can be found in the normalized partial ordering graph G .

To compute such a measure in an exemplary method two components are used 1 cycle detection capabilities for a given graph G at time t G and 2 a heuristic measure to quantify how much inconsistency the detected cycle is introducing. Following these criteria exemplary algorithms are provided herein to perform the detection of cycles in the graph based on the evaluations made by the user.

A general idea of exemplary algorithms is to maintain the same criteria on identifying the cycles and thus avoiding the redundancy on the detected cyclic parts. For each vertex v in G the algorithms explore the relation with the other vertex Vnot yet processed using an accumulative set of visited vertex in the path. Once a set of cyclic paths Cis formed the non cyclic parts of the paths are filtered to avoid the subcycle ambiguity. Then the algorithm sorts each vertex of a cycle by age. The exemplary algorithm removes the oldest edge that breaks the cycle. Finally all the vertices that appear in at least one cycle form the set G which is used to define the user consistency measure as explained below.

An exemplary algorithm cycleExplorer to explore all paths departing from v in VI includes the following steps 

Using the algorithms and definitions provided above we are now able to introduce a measure of the user consistency. The consistency of a user at time t G is defined as follows 

The measure is a snapshot of the user consistency at time t. For the rest of the calculations in exemplary embodiments we assume t t or final time. Measuring user consistency accurately would require an average integration of the consistency along the interactive run. illustrate how the measure behaves. These figures present the partial ordering graph the synthetic fitness and ordering computed and consistency of the user G at iterations 1 4 respectively. This example illustrates how the wrong decision provided by the user may greatly reduce the consistency.

An active iGA according to exemplary embodiments of the present invention is described herein including an exemplary consistency measure. The exemplary active iGA is applied to training a Text to Speech TTS program. The aim of any TTS system is the generation of synthetic speech from text. The performance of such systems is evaluated by human beings based on the perceived speech quality. Hence it is essential to embed this subjective criterion into the tuning process of the TTS system for achieving highly natural synthetic speech. The corpus based or unit selection TTS approach is one of the state of the art techniques that try to reach this aim. This method generates the synthetic speech signal using the selection and concatenation of recorded speech units. The tuning of the unit selection module is one of the most important processes in getting high quality synthetic speech. The selection process is driven by a cost function which is typically computed as the combination of several weighted subcosts. A key issue involves the accurate tuning of these weights that is mapping the user subjective preferences among candidate units which is a complicated task. Several approaches have been proposed for weight training distinguishing between either hand tuning or machine driven purely objective methods or perceptually optimized techniques.

GAs have been used for tackling the weight tuning problem. This technique has overcome restrictions of classic approaches attaining better results with a feasible computational effort. Nevertheless this approach as with other known techniques needs to face a key challenge the reliable estimation of the subjective perception of the speech attributes i.e. it is very difficult to define a solid perception mapping function. Thus it is helpful to actually incorporate user preferences for accurately tuning the weights of the cost function. As a first step a simple iGA has been applied for weight tuning allowing an actual perception guided adjustment. However problems have arisen such as the tediousness of the process user fatigue and the complexity of maintaining a stable comparison criterion throughout the whole process user consistency which are weaknesses related to iGAs.

The exemplary active iGA disclosed above provides several advantages for combating user fatigue showing that learning from user interaction and exploiting the learned knowledge to guide the process of collecting user evaluations can greatly reduce the number of evaluations required to achieve high quality solutions. Moreover the user consistency can be evaluated according to the number of cycles of the partial ordering graph. Thus the exemplary iGAs allow one to face the main drawbacks of the iGA based weight tuning approach while incorporating the perception of the user to the process. Due to the real valued representation of the weight tuning problem the optimization step is conducted by a continuous PBIL e.g as described in Sebag M. Ducoulombier A. Extending population based incremental learning to continuous search spaces Lecture Notes in Computer Science 1498 1998 pp. 418 427 instead of using cGA.

The main goal of the experiments is to explore the consistency of user evaluations for interactive corpus based TTS weight tuning. We have repeated the experimentation done in Al as F. Llor X. Iriondo I. Sevillano X. Formiga L. Socor J. C. Perception Guided and Phonetic Clustering Weight Tuning Based on Diphone Pairs for Unit Selection TTS Proceedings of the 8International Conference on Spoken Language Processing ICSLP Jeju Island Korea 2004 pp. 1333 1336 which is incorporated by reference herein but replacing the simple iGA with the exemplary active iGA shown in . The consistency of user evaluations when using both interactive methods is computed by G . Measuring the user consistency required us to set up controlled experiments. For such purposes we used the Sin Evo platform to provide the interface to collect user evaluations.

Given the measure of user consistency G we analyzed the consistency of the users along the evolutionary process from the Alias et al. experimentation. The upper portion of the table in presents the consistency of the users involved in the experiments at the end of evolutionary process. The collected logs of the tournaments presented to the users allowed us to do so. We also studied how G changed at each tournament t presented to the user. These results are displayed on the left portion of . Each of these figures stands for one of the four Catalan phrases explored De la seva selva Fusta de Birm nia I els han venut and Grans extensions .

Two main realizations occurred when analyzing the logs using the G consistency measure. As shown in only the expert user was consistent all the time in a particular experiment. Regardless of the user profile novice knowledgeable or expert all the users had troubles maintaining a consistent criteria during a session using a simple iGA. Another relevant discovery was that inconsistencies show early on the run of the iGA. On average regardless of their profile users tend to contradict themselves around tournament and they contradict themselves 2.83 times per run. Such inconsistencies may be regarded as a noisy subjective fitness function and hence be responsible for increasing the number of evaluations required from the user to get a high quality solution relieving user fatigue.

The analysis was repeated replacing the simple iGA in Sin Evo by an active iGA. The lower portion of presents the consistency G of the users involved in the experiments at the end of the evolutionary process conducted using an active iGA. We also studied again how G changed at each tournament t presented to the user. These results are displayed on the right portion of . We repeated the same experimental setup using the same four Catalan phrases.

The first impression after the analysis of the results obtained using active iGAs is the boost in the consistency of the evaluations provided by the user. Using active iGAs only two out of the fifteen experiments ended in an inconsistent status that is where G 

Given these results we could compute the enhancement on the consistency introduced by using active iGAs for the weight tuning of the TTS embedded in Sin Evo. The table in presents the consistency enhancement percentage between using a simple iGA and an active iGA. Significantly by using the exemplary active iGA we were able to boost the consistency along the evolutionary process supporting the user to provide consistent and unambiguous evaluations.

One of the main reasons for the introduction of active iGAs was to cut drastically the number of evaluations required from the user in a successful effort to combat user fatigue. Though no special efforts were made to tune the active iGA model for efficiency enhancement as the table at also shows an automatic reduction on the number of required user evaluations also was collected. On average the usage of an active iGA according to embodiments of the present invention reduced by half the number of evaluations required from the user and hence required the user to spend half of the time that was spent on the original TTS weight tuning experiment. The stopping criteria were set due to the increment of draws and cycles in the graph this usually happened around generation .

A measure of the solution quality assessments provided by a user in an iGA session has been introduced according to embodiments of the present invention. A partial ordering graph can be used to measuring and or address user consistency via cycle detection. In a partial ordering graph a cycle is a clear indication of user solution quality assessment inconsistency. A consistency measure is provided which requires 1 cycle detection capabilities given a partial ordering graph and 2 a heuristic to quantify how much inconsistency the detected cycles are introducing.

In an exemplary active iGA described above a theoretical framework is assumed where the decision variables involved on the interactive process were independent. This simplifies the theoretical analysis. As a result of the theoretical framework adopted some exemplary embodiments of the present invention described above use an SVM with a linear kernel as the model for the synthetic fitness and the cGA to optimize the learned synthetic fitness. However such an assumption does not constrain the ability of the active iGA to achieve linkage learning capabilities provided proper learning and optimization algorithms are chosen. Methods of the present invention as explained above are not limited to use of SVM and cGA.

It will be appreciated that methods and systems of the present invention are applicable to optimization methods in addition to those described above with respect to genetic and evolutionary computing. Examples of optimization methods that may be improved using methods and systems of the present invention include but are not limited to evolutionary computing operations research OR global optimization methods meta heuristics artificial intelligence and machine learning techniques etc. The present invention is not intended to be limited to genetic and evolutionary computing.

Embodiments of the present invention are directed to methods and program products for interactive computing. Those knowledgeable in the art will appreciate that embodiments of the present invention lend themselves well to practice in the form of computer program products. Accordingly it will be appreciated that embodiments of the invention may comprise computer program products comprising computer executable instructions stored on a computer readable medium that when executed cause a computer to undertake certain steps. Other embodiments of the invention include systems for interactive computing with an example being a processor based system capable of executing instructions that cause it to carry out a method of the invention. It will accordingly be appreciated that description made herein of a method of the invention may likewise apply to a program product of the invention and or to a system of the invention.

While various embodiments of the present invention have been shown and described it should be understood that other modifications substitutions and alternatives are apparent to one of ordinary skill in the art. Such modifications substitutions and alternatives can be made without departing from the spirit and scope of the invention which should be determined from the appended claims.

