---

title: Unwired enterprise platform
abstract: Systems, methods and computer program products for inherently integrating mobility with an enterprise are described herein. Enterprise data is accessed from one or more data sources, wherein such data sources may comprise structured and unstructured data sources. The data is transferred from the enterprise to a plurality of mobile devices over a plurality of diverse networks. In an embodiment, such transfer takes into consideration characteristics of the diverse networks. The enterprise receives data generated by mobile devices while performing enterprise-related operations at the wireless edge. The enterprise responds to environmental changes using the received data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08204870&OS=08204870&RS=08204870
owner: Sybase, Inc.
number: 08204870
owner_city: Dublin
owner_country: US
publication_date: 20070803
---
The present application is related to the following applications all of which are herein incorporated by reference in their entireties 

U.S. patent application titled System and Methodology for Extending Enterprise Messaging Systems to Mobile Devices Ser. No. 10 906 065 filed Feb. 1 2005 

U.S. patent application titled Persistent Query System for Automatic On Demand Data Subscriptions from Mobile Devices Ser. No. 11 882 447 filed Aug. 1 2007 now U.S. Pat. No. 7 752 165 issued Jul. 6 2010 

U.S. patent application titled Programming System for Occasionally Connected Mobile Business Applications Ser. No. 11 882 448 filed Aug. 1 2007 now U.S. Pat. No. 7 739 232 issued Jun. 15 2010 

U.S. patent application titled System Method and Computer Program Product for Context Based Data Pre Fetching and Notification for Mobile Applications Ser. No. 60 935 182 filed Jul. 30 2007 and

U.S. patent application titled System and Methodology Providing Service Invocation for Occasionally Connected Computing Devices Ser. No. 10 904 702 filed Nov. 23 2004 now U.S. Pat. No. 7 467 389 issued Dec. 16 2008.

The present invention is generally related to mobility and more particularly related to incorporating mobility as an intrinsic component of an enterprise.

In the way that mobile devices have changed consumer lifestyle mobility is also transforming the enterprise. This space lies at the intersection of enterprise software networks and mobile devices. Although relatively new this space is a rapidly growing business segment.

Not only is mobility becoming increasingly important to the enterprise it represents a huge opportunity as enterprises unwire. The total worldwide opportunity for mobility taking into account the services the infrastructure the handsets and the glue that holds it together is potentially 340 billion by 2008.

The various sub segments of this market are growing at a compound annual growth rate ranging from 8 to 60 percent. The Gartner Group a leading information technology research and advisory company has said Mobile and wireless technologies will proliferate and mature in the next few years bringing the Internet and new consumer and business applications to ever more places and devices. These technologies must be at the strategic heart of every organization s IT plans. 

To date mobility implementations have started at the edge with mobile devices and have attempted to work back into the core of the enterprise architecture.

There are many flaws with this approach. For example using this approach it is difficult if not impossible to ensure consistency of the total information technology architecture. As a result it is difficult to ensure the integrity of the data delivered to the point of action.

This approach also does not afford a global view of the enterprise or incorporate mobility as an intrinsic extension of the enterprise infrastructure. As a result mobile interactions for the enterprise tend to be siloed and disjointed from the enterprise s information network.

The present invention is directed to systems methods and computer program products for inherently integrating mobility with an enterprise. Briefly stated according to an embodiment enterprise data from for example business processes and applications is accessed from one or more data sources data sources wherein such data sources may comprise structured and unstructured data sources. The data is transferred from the enterprise to a plurality of mobile devices over a plurality of diverse networks. In an embodiment such transfer takes into consideration characteristics of the diverse networks. The enterprise receives data generated by mobile devices while performing enterprise related operations at the wireless edge. The enterprise responds to environmental changes using the received data. The mobile applications that are built using this data are provisioned on to the devices in a secure way across various devices.

Further features and advantages of the present invention as well as the structure and operation of various embodiments thereof are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. Generally the drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The present invention is directed to embodiments for an unwired enterprise. An unwired enterprise is an enterprise that includes mobility as an intrinsic feature. In this context mobility refers to mobile devices including those presently known and those developed in the future. Mobility also refers to mobile users as well as the operations and processes of the enterprise that involve mobile devices and mobile users.

According to the invention the unwired enterprise is built from the core of the enterprise outwards to the edge. The edge also referred to as the wireless edge refers to enterprise operations and processes performed by mobile users using untethered mobile devices where such mobile devices are always or occasionally connected to the enterprise via a diverse plurality of wireless communication mediums. According to the invention the unwired enterprise is built securely from the enterprise applications and business processes to the middleware to the wireless edge.

The invention enables an unwired enterprise through use of an unwired enterprise platform UEP . illustrates a conceptual view of the UEP. The UEP includes a number of data sources such as but not limited to computer applications A server platforms B and databases C. Data is provided from data sources to mobile devices operating on the edge via a link this is represented by the computing on the edge arrow . The UEP ensures that such data is integrated and extended to mobile devices in a secure manner. Mobile devices may be any existing or future mobile device and may be operating from any location.

Mobile devices perform enterprise related operations processes and or tasks on the wireless edge. Information generated collected or otherwise obtained by mobile devices is sent back to the enterprise represented by enterprise data via the link . The enterprise uses this information to sense and respond to changes in its business environment this is represented by the sense and respond arrow . Business environment refers to any environment condition or community relevant to the enterprise such as the enterprise s customers competitors market forces inventory etc.

Accordingly mobile applications operate in a heterogeneous network environment with varying degrees of reliability bandwidth latency connectivity etc. The user experience can be compromised if a perfect network connection is assumed. According to embodiments of the invention the UEP takes into consideration the characteristics of the diverse networks when moving to and from mobile devices . Features of this aspect of the invention are described below in Sections 7 and 10. Additional features of this aspect of the invention are provided in Sections 8 and 9.

The UEP allows applications to view the wired and wireless worlds as a single world a single context . By doing so the UEP hides the complexities of implementations across the multiple diverse networks and across an increasing range of mobile and fixed devices .

According to embodiments of the invention the data resident on any given mobile device includes only a subset of the enterprise data also referred to herein as the enterprise or consolidated database . This is shown as the mapping data paradigm in . There are a number of factors that influence how much data to keep on the device such as 

It is difficult if not impossible to keep so much data between the enterprise and all clients in sync.

Device capacity may be measured in gigabytes but enterprise data is in terabytes petabytes or even exabytes.

Embodiments of the invention include intelligent data fetching and or synchronization processes to better ensure that pertinent device data is provided to the mobile user on a timely basis. These processes are described in sections below such as but not limited to in Sections 8 and 10.

In step data is transferred over network s to devices . Such transfer takes into consideration the characteristics of the diverse networks . The operation of step involves mobile services and device services and aspects of such operation are described in Sections 7 10.

In step mobile devices perform enterprise related operations processes and or tasks on the wireless edge.

In step information generated collected or otherwise obtained by mobile devices is sent back to the enterprise via the multiple diverse networks . The operation of step involves mobile services and device services and aspects of such operation are described in Sections 7 10.

In step the enterprise uses this information to sense and respond to changes in its business environment.

Advantages of the invention shall now be described with reference to a field force automation example. Other advantages of the invention will be apparent to persons skilled in the relevant art s based on the teachings provided herein.

Field force automation is a good market segment for understanding the applicability and value of mobile applications. Consider a utility company as the business domain. With a utility company there is a high volume of field personnel continuously visiting customer sites across a wide geographic area either on a preplanned schedule or responding to incidents generated by customer calls. Typically the bulk of these scheduling and reporting tasks are paper based resulting in a significant amount of time invested in essential but non skilled activities. By employing mobile field force automation solutions the majority of these activities can be automated and optimized including but not limited to 

In summary mobility enhances personnel productivity making the utility company more efficient. The invention including the unwired enterprise platform UEP described herein achieves these advantages.

In essence device services is an abstraction layer that provides a common interface to low level native device services . This interface called an application programming interface or API is common among all devices . Consequently developers are able to more easily program devices without having to know the intricacies of the low level native device services .

Device services run on devices . Specifically in an embodiment a device has one or more device services agents that communicate with mobile services in the enterprise to provide data synchronization messaging device application management as well as other functions described herein.

Functions provided and or performed by device services include but are not limited to those listed in Table 2.

Mobile services also called mobile middleware services or middleware represents middleware that links mobile applications with the enterprise data and services. It provides runtime support for these mobile applications and has the ability to invoke web services.

Mobile services supports the operation of mobile applications on devices . According to an embodiment of the invention mobile services operates with is applicable to and or provides advantages when working with 

Applications where data is required on mobile devices for uninterrupted operation and good user experience.

When there is a need for higher programming abstraction to hide complexity enhance productivity and lower expertise required to generate applications.

When transactions from mobile application are required to integrate with enterprise data and services.

When there is a need for a higher level of relevancy and timeliness through the use of context and inference.

Mobile services communicates with device services i.e. devices using any format protocol or means including but not limited to messages A SMS B and data C. A device communications module is an abstraction layer that provides to devices a common interface for interacting with the enterprise.

Mobile services interacts with data services using any format protocol or means including but not limited to JDBC A and services B. Data service access is an abstraction layer that provides to the enterprise and its data sources a common interface for interacting with the mobile services component .

Mobile services includes inference engine comprising rules and a Bayesian network . Mobile services also includes a metadata repository context server an event processor synchronization engine prefetch module and a device management security provisioning engine .

Data services is an abstraction layer enabling common access to back end data sources . Data services performs queries over data sources and transforms and caches data retrieved from data sources .

Data services is a functional stack comprising a distributed query processing layer a result set caching layer a layer comprising real time analytics streams and a XQuery processor a meta data repository temporary storage layer a layer comprising replication data federation and ETL and a data access services layer .

Functions provided and or performed by data services include but are not limited to those listed in Table 3.

In step data sources are selected. These are the data sources that will be accessed by the application when it is executing on the device. Also mechanisms to access such selected data sources are created using the data services API see in .

In step user business logic components are determined. Such business logic components correspond to the functions and logic that the application is to perform. Code is written corresponding to the user business logic components see in .

In step mobile device application s see in are built in accordance with the user business logic components using the device services API.

In step a developer develops an application according to for example the process of described above . In the course of developing the application the developer identifies software components that are required on a device to properly execute the application. For example the developer may identify an operating system library plug in etc. that are required to be installed on a device so that the application will properly execute on the device .

The listing or identity of such required components is considered to be metadata associated with the application developed in step . In such metadata is provided to mobile services and stored in the metadata repository . In an embodiment the developer provides the metadata to an administrator who stores the metadata in the metadata repository .

In step at some later time a device that is operating on the wireless edge requests that the application be installed.

In step mobile services determines whether to grant this request to install the application on the device . In an embodiment this step is performed by the device management security provisioning engine . In an embodiment the device management security provisioning engine determines whether to grant this request in accordance with policies applicable to the requested application. For example a policy may specify that the application can only be used by certain personnel. In this case the device management security provisioning engine would determine whether the user associated with the requesting device is one of those authorized persons. Another policy may specify that the application can only be used in certain geographical locations or during certain times. In those cases the device management security provisioning engine would determine if the device was located in the approved geographical locations or whether the current time was one of the approved times.

If the device management security provisioning engine determines in accordance with applicable policies that the request of step should be granted see step then in step any software components required for proper operation of the application are identified. In an embodiment device services agents operating on the requesting device automatically interact with mobile services to access the applicable metadata in the metadata repository and determine any software components needed by the requested application.

In step the required software components identified in step are installed on the device . Depending on the nature of the required software components step may be automatically performed i.e. the required software components are automatically pushed to the device or manually i.e. the user of the device is required to manually install the required software components . Some required software components may be installed automatically and others manually.

In step the device management security provisioning engine automatically pushes the requested application to the device .

Thus in accordance with the operation shown in the invention provisions applications to mobile devices in such a way that application device and enterprise security are integrated. This is achieved in part by integrating meta data between development and deployment layers for platform requirements.

In a mobile occasionally connected environment where connectivity to the enterprise is not always available applications require enterprise data to be persistent locally on the device in order to run. To do so a method for tracking changes both on the remote and in the enterprise and synchronizing them is required. Conventional techniques for synchronizing remote data sources with enterprise data sources exist today. These techniques require that the application be responsible for initiating synchronization detecting synchronization failures due to network interruptions and handling these failures in an appropriate manner.

The invention includes a system method and computer program product for background policy based data synchronization that eliminates the need for the mobile application and therefore the mobile application developer to deal with data synchronization. This technique automatically performs the task of synchronizing data between the mobile data source and the enterprise data source on behalf of the mobile application and deals with synchronization failures in a way that is transparent to the application.

According to an embodiment background policy based data synchronization has the following characteristics 

The application and the operations it performs on data is independent of data synchronization. Data synchronization is performed in the background by a separate process that runs independently of the application. This allows data synchronization to occur even if the application is not running.

Data synchronization is policy based. A policy describes when data synchronization occurs and the data that is included in the data synchronization. Pre defined polices are available that will satisfy most mobile application requirements for data synchronization. More sophisticated applications will have the ability to define their own policy by creating a set of rules.

Network connectivity is monitored so that data synchronization can occur based on network availability.

Server side changes will be promptly delivered to the mobile device. This requires that a mobile device be notified of server side changes and initiate data synchronization based on the policy being used.

According to an embodiment of the invention a policy is used to describe how background synchronization takes place. The policy specifies when data synchronization occurs and the data involved in the data synchronization. A set of pre defined policies are available. These include but are not limited to the following scheduled automatic on demand and custom.

The scheduled policy is one that causes data synchronization to occur at a specified interval. When the specified time interval has elapsed synchronization will occur if the network is available and connectivity with the server can be established. If the network is not available an attempt will be made again at the next time interval.

The automatic policy is one that using heuristics attempts to keep the mobile and enterprise data sources as up to date as possible. One possible heuristic is to synchronize after a specified number of transactions have been applied to the local data source a default of one could be used if no number is specified . After the specified number of transactions has occurred synchronization will occur if the network is available and connectivity with the server can be established. If the network is not available an attempt will be made again once the network becomes available.

The on demand policy is one where data synchronization is left in the hands of the mobile application. When this policy is used it is the responsibility of the application to initiate synchronization and deal with network connectivity issues. An application will initiate synchronization using an API that will be provided as part of the synchronization service.

The custom policy allows applications to define their own synchronization policy. This is done by specifying a set of rules. A rule includes two parts a schedule and a condition. The schedule defines when data synchronization is to occur. The condition defines the conditions that must be satisfied in order for data synchronization to take place. The condition can be based on the characteristics of the network in current use. The condition can also specify constraints on the data and thereby defining the data to be included in the data synchronization.

The module that is responsible for performing background policy based synchronization is called the Synchronization Agent. The Agent runs independent of the mobile application. In an embodiment the Agent runs continuously so that the data available to mobile applications running on the device will be as up to date as possible. When the Agent is started the local data source that the Agent is to monitor is specified along with the policy that the Agent will use to drive the data synchronization process.

The Agent while running monitors network connectivity and keeps track of the network characteristics. This information is persisted as name value pairs and can be referenced from rules specified in a custom policy.

The Agent is responsible for implementing the specified policy and driving the synchronization process. It is the Agent that implements pre defined policies. When a custom policy is specified a rules engine running inside the Agent is used to execute the rules. Execution of the rules determines when data synchronization occurs.

The Agent is responsible for listening for notifications from the server that data is waiting to be delivered to the mobile device this class of notifications is called push notifications . Depending on the policy being used this will cause data synchronization to occur. When a push notification is received and a scheduled policy is being used an attempt to synchronize will be triggered at the next time interval. When an automatic policy is used an attempt to synchronize will be triggered immediately. When an on demand policy is used the application will be notified of the event. The application can then decide whether to trigger an attempt to synchronize. When a custom policy is used an attempt to synchronize will be triggered if any of the rules specified by the custom policy are satisfied.

The Agent sends presence information to the server. Presence information includes network status information current network in use network address etc. and location based co ordinates. Network status information is used by the server to send push notifications to the device. Location based co ordinates are used by server side business logic for example to deliver location based content to the device.

Additional information regarding background policy based data synchronization according to embodiments of the invention are provided in pending U.S. patent application titled System and Methodology for Extending Enterprise Messaging Systems to Mobile Devices Ser. No. 10 906 065 filed Feb. 1 2005 which is herein incorporated by reference in its entirety.

This section describes embodiments of the invention for synchronizing a remote database such as the enterprise database with a local database such as a local database in a mobile device . These embodiments are further described in the above referenced application Persistent Query System for Automatic On Demand Data Subscriptions from Mobile Devices which is herein incorporated by reference in its entirety.

Synchronization allows mobile devices to receive the most current data available from the enterprise and its data sources as well as upload its most currently available data to the enterprise for any given application or set of applications. Data as used herein may be any object including but not limited to information in any form text video audio etc. and applications.

As noted above typically a mobile device is unable to replicate every piece of data contained in enterprise database in its own local database. This was referred to above as the mapping data paradigm see . The mobile device may also be unable to constantly query enterprise database in order to obtain the most current data. According to an embodiment of the invention mobile device can create a data subscription in order to attempt to retrieve relevant data from enterprise database into its local database in order to resolve future queries locally.

Accordingly the invention includes a system computer program product and method for creating a data subscription to a remote database. The method includes the steps of creating a meta data definition of a table the table located within the remote database marking a query to be performed on the table within the definition as persistent and generating a persistent query entity based on the definition wherein the persistent query entity is mapped to a persistent query table in a local database.

The invention furthermore includes a system computer program product and method for creating a persistent query wherein a table in a remote database is represented by a meta data definition. The method includes the steps of identifying in the definition a query to be performed on the table wherein the query has been marked as a subscribed query defining a persistent query entity for the subscribed query mapping the persistent query entity to a persistent query table and generating query code the query code operable to perform the query on a local database.

The invention further includes a system computer program product and method for synchronizing a local database with a remote database. According to an embodiment this is achieved by selecting rows from the remote database by joining the table with the persistent query table and downloading the selected rows to the local database in an embodiment such operation creates a copy of the table in the local database . In an embodiment the set of selected rows includes only rows modified or subscribed to since the last synchronization. In an embodiment the steps of selecting rows and downloading the selected rows are implemented in a download cursor.

In creating a meta data definition i.e. entity of a table it is also possible to define a relationship between two such entities. In accordance with an embodiment of the present invention this is accomplished by modeling an entity s attributes as having a data type which is another entity or a list e.g. array of other entities.

The invention also includes embodiments for deleting rows from the mobile device s local database. A deletion in the context of the present invention takes on two forms a complete deletion which not only deletes the row from the local database but also marks the row for deletion at the enterprise database and an eviction which deletes a row from local database to free space but does not disturb the equivalent row in enterprise database . In an embodiment both forms delete persistent query rows.

The invention also includes embodiments for deleting rows from the enterprise database . When a row is deleted from the central database the process is handled much like with a client originated deletion from the point at which the client deleted row has been synchronized with the enterprise database .

The invention also includes embodiments for intelligent prefetch with multiple devices. According to these embodiments it is possible for multiple mobile devices to be associated with a particular user. A user need not be an individual but may also be a group of individuals such as a team division or corporation. The invention includes embodiments by which subscriptions can be optimized for multiple devices controlled by a single user. In accordance with an embodiment of the present invention a user is able to move between devices and with at most a single synchronization be confident that the data available at the current mobile device includes any data the user was recently working with. Subscriptions are associated with the particular user rather than with each individual mobile device.

The invention also includes embodiments for intelligent prefetch with inherited subscriptions. Sometimes it becomes known perhaps by virtue of optimization testing on an application performing queries on a database that when a query is performed on a particular data set a query on a second data set is likely to follow. In the case of a configuration where a mobile device s local database only has a subset of the data available in enterprise database performance benefits may be realized by retrieving not only data related to the first query but also the second query and storing this data in local database. The invention includes an embodiment for performing this optimization through the use of inherited subscriptions.

The invention also includes embodiments for intelligent prefetch with cascading subscriptions. A mobile device is usually capable of running multiple applications often simultaneously. Each of these applications may access either in turn or simultaneously the mobile s local database. As each application may serve a different purpose the optimization needs for each application may vary. The optimization needs may include for example precisely what data each application needs to retrieve from enterprise database into the local database during a synchronization. Accordingly the invention includes an embodiment whereby subscriptions can be defined in a cascading manner for multiple applications.

More information on these embodiments is provided in the above referenced application Persistent Query System for Automatic On Demand Data Subscriptions from Mobile Devices. 

This section describes additional embodiments of the invention for synchronizing a remote database such as the enterprise database with a local database such as a local database in a mobile device . These embodiments are further described in the above referenced application Programming System for Occasionally Connected Mobile Business Applications which is herein incorporated by reference in its entirety.

According to the invention a developer uses a programming system to create XML files which are processed by a code generator to create generated files. These generated files include for example code files persistence files and deployment files. In accordance with an embodiment of the present invention the developer creates custom developed code which is then combined with generated files. These generated files form the basis of software running on a mobile device used to interact with the mobile s local database and synchronize with enterprise database .

The programming system generates code for execution on mobile device by creating XML class definitions. The code generator is run on the XML files. Thereafter output code persistence logic and presentation logic are generated.

In accordance with an embodiment of the present invention a class definition includes parameter attribute and operation definitions. Parameters attributes and potentially other definition types optionally specify a data type. In accordance with an embodiment of the present invention built in data types are specified which have known equivalents in one or more target platforms e.g. Java C .

A service class is an extension of this basic class. Service classes can be used to support business operation replay for the purposes of synchronizing databases such as a mobile s local database and the enterprise database . Business operation replay allows a service class to perform a set of operations against local database and rather than uploading a copy of the results to enterprise database instead captures the operations themselves and replays them against enterprise database .

Additionally change sets of the operations are captured in accordance with an embodiment of the present invention. Change sets indicate that an entity has been modified by an operation. When the operations are replayed against enterprise database a conflict may arise whereby fewer data rows are modified in enterprise database than on the local database in mobile device such as for example when an operation is dependent on another data row which has been modified directly at the enterprise database or by a different mobile device. If the change sets show that additional row insertions deletions or updates were made in the local database that are not reflected in enterprise database then a harmless update is issued against the additional rows at the enterprise database . When enterprise database next synchronizes with mobile device all rows in the local database will have data that matches that in enterprise database .

Accordingly the invention includes a system computer program product and method for synchronizing a local database with a remote database. The method includes the steps of defining a service operation wherein the service operation comprises a transaction processing the transaction on the local database capturing operation calls performed by the transaction and capturing change sets of the transaction.

The invention furthermore includes a system computer program product and method for performing a service operation on a database the database located on a database system. The method includes the steps of defining a service operation wherein the service operation comprises a transaction determining a target environment for the database system and processing the transaction on the database wherein the transaction is selected from a set of transactions the transaction corresponding to the target environment.

More information on these embodiments is provided in the above referenced application Programming System for Occasionally Connected Mobile Business Applications. 

As mobile computing platforms become increasingly ubiquitous and with the availability of network access for the mobile computing platforms it becomes desirable to provide users with as close an approximation to the experience of a full featured computing platform as possible. In order to conserve space and battery power mobile computing platforms such as personal digital assistants PDAs frequently have small display screens limited memory limited processing power and limited communications bandwidth. Such resource restrictions of mobile computing platforms are often incompatible with the goal of providing users with a data needed by the users to enjoy a full featured experience.

Mobile applications require data to be mobilized from the enterprise and stored on a mobile device for occasional disconnected computing while the device is not connected to the enterprise network. However as the mobile devices are often resource restricted the set of data downloaded to the devices is limited to a subset of what is available on enterprise servers and devices see the mapping data paradigm in . In addition the subset of enterprise data needed on mobile devices must be determined a priori. At times the pre determined subset of data is insufficient to meet the mobile user s needs. Necessary data is unavailable on mobile devices when unplanned and planned changes are not accounted for. Without necessary data available at the mobile devices corresponding mobile applications can be rendered difficult to use or inoperable depending on network connectivity.

In traditional enterprise computing environments users are able to request data i.e. fetch data and query databases when it is needed and receive a timely response with the subset of data they have requested. In the mobile environment this traditional request response paradigm does not always work due to potential connectivity problems of roaming mobile devices and or to characteristics of multiple diverse networks . The focus of attention for a mobile user and the corresponding mobile applications is on the task currently being performed so it is not reasonable to expect mobile users or applications to determine what data is necessary to complete the task. Hence pertinent information should be pushed to the mobile user s applications rather than requiring them to pull the information from enterprise servers. Relevant data and notifications must be provided at the appropriate time to mobile devices for to enable mobile users to make time sensitive business decisions. This is because mobile users oftentimes do not know when and what subset of data is needed as they are not aware of the situation or context they are currently in.

Accordingly the invention includes embodiments to dynamically determine the likely set of data needed on a mobile computing platform based on the context of the mobile applications on the platform and the user using the platform. The invention also includes embodiments to provide relevant data and notifications at the appropriate time to a mobile computing platform based on the context of the mobile applications on the platform.

Context model represents the situational information of the mobile user. Context model is defined using ontology. Each context model has a set of concepts as well as the relationships between them expresses in context variables.

Context variables can be simple or derived by aggregating through inferences of simple variables. Context variables may include simple context variables which may contain a collection of values.

In order to facilitate delta based data updating i.e. sending out only information that user does not already have context model stores what is already on the device as one or more context variables . Context variables are part of context model .

There can be many context models within context server . Context server maintains the context models. It does so by polling or receiving updates from physical sensors or software based information for simple variables. Changes in the simple variables will trigger inference to update derived variables.

Data selection functions are functions that calculate the prefetch data for the mobile applications and users. Data selection functions may leverage context variables within context model . For each mobile user device combination there can be a set of data selection functions . The output of each function is combined to form new data set . Data selection functions may use inference e.g. rules or Bayesian network to perform the calculation of the data set required by each mobile user device combination . Data selection functions also access Context model from context server .

In accordance with an embodiment of the invention Data selection functions access Context model that represents the mobile user s context to determine the new data set required by each mobile user device combination .

Each user device combination may subscribe to a set of context variables within context model . Whenever context variables within the subscription changes event engine will determine and execute the affected sets of Data Selection functions . The new data set created by the functions will be compared with what is already on the device stored as context variables to create a delta set of data that the mobile user device combination does not already have.

Event engine is also responsible for receiving notifications updates from sensors and software event mediator and forwards them to context server to maintain context models .

Notifications and data delivered to mobile user device combination have the following characteristics.

Data set is packaged with metadata into a metadata driven container to assist in displaying the data at the mobile device and the metadata contains a description of data .

No modification of data set is allowed data is provided to mobile user device combination only for reference.

Data set requires a client side container to interpret the data set package and display it appropriately at mobile device .

Data set can be acknowledged and discarded by mobile device user combination or after a predetermined time i.e. a timeout period according to a policy on mobile device

Data is generated from mobile device user combination specified data selection functions that are subscribed to context variables within context model .

The metadata driven data set container uses the metadata within the data set to determine how best to display the data . Data container is context aware i.e. aware of the environment that it is executed under such as the characteristics of mobile device user combination . Hence data container can render data in a fashion that is most suitable for the device.

When data is reviewed by user it can be deleted from the mobile device . In addition if data set has an expiration date set it will be discarded when appropriate.

Relevant data can be pushed to mobile device user combination based upon changes in the context that the Data Selection Functions subscribed to.

Change in context context variables within context model can be caused by changes occurring within the enterprise such as changes in data execution of business processes or other change events . These change events are reported to Event Engine which notifies Context Server to update context model .

Change events can also be caused by a mobile device user triggering a change in context by user actions with mobile applications running on mobile device natural language commands queries through messaging or short messaging service SMS and device sensor readings.

More information on the embodiments described in this section is provided in the above referenced application System Method and Computer Program Product for Context Based Data Pre Fetching and Notification for Mobile Applications which is herein incorporated by reference in its entirety.

In an embodiment of the present invention the system and components of the present invention described herein are implemented using well known computers such as computer shown in .

The computer can be any commercially available and well known computer capable of performing the functions described herein such as computers available from International Business Machines Apple Sun HP Dell Compaq Digital Cray etc.

The computer includes one or more processors also called central processing units or CPUs such as a processor . The processor is connected to a communication bus .

The computer also includes a main or primary memory such as random access memory RAM . The primary memory has stored therein control logic A computer software and data.

The computer also includes one or more secondary storage devices . The secondary storage devices include for example a hard disk drive and or a removable storage device or drive as well as other types of storage devices such as memory cards and memory sticks. The removable storage drive represents a floppy disk drive a magnetic tape drive a compact disk drive an optical storage device tape backup etc.

The removable storage drive interacts with a removable storage unit . The removable storage unit includes a computer useable or readable storage medium having stored therein computer software B control logic and or data. Removable storage unit represents a floppy disk magnetic tape compact disk DVD optical storage disk or any other computer data storage device. The removable storage drive reads from and or writes to the removable storage unit in a well known manner.

The computer also includes input output display devices such as monitors keyboards pointing devices etc.

The computer further includes a communication or network interface . The network interface enables the computer to communicate with remote devices. For example the network interface allows the computer to communicate over communication networks or mediums B representing a form of a computer useable or readable medium such as LANs WANs the Internet etc. The network interface may interface with remote sites or networks via wired or wireless connections.

Control logic C may be transmitted to and from the computer via the communication medium B. More particularly the computer may receive and transmit carrier waves electromagnetic signals modulated with control logic via the communication medium B.

Any apparatus or manufacture comprising a computer useable or readable medium having control logic software stored therein is referred to herein as a computer program product or program storage device. This includes but is not limited to the computer the main memory the secondary storage devices the removable storage unit and the carrier waves modulated with control logic . Such computer program products having control logic stored therein that when executed by one or more data processing devices cause such data processing devices to operate as described herein represent embodiments of the invention.

The invention can work with software hardware and or operating system implementations other than those described herein. Any software hardware and operating system implementations suitable for performing the functions described herein can be used.

The attached Appendix forms a part of this application and is thus herein incorporated by reference in its entirety.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

