---

title: Extended cascading style sheets
abstract: A CSSX (Extended Cascading Style Sheets) file including non-CSS (Cascading Style Sheet) extensions is used to define and reference variables and inheritance sets. A CSSX file compiler determines a value of the defined variable, modifies the CSSX file by replacing all references to the defined variable with the value, and generates the CSS file from the modified CSSX file. The inheritance set is defined in the CSSX file and includes a reference to a previously defined CSS rule set. The CSSX file compiler defines a new CSS rule set as a function of the determined attributes included in the previously defined CSS rule set of the defined inheritance set and generates the CSS file including the newly defined CSS rule set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941746&OS=07941746&RS=07941746
owner: Microsoft Corporation
number: 07941746
owner_city: Redmond
owner_country: US
publication_date: 20070711
---
Cascading Style Sheet CSS is a stylesheet language used to describe the presentation of a document written in a markup language e.g. HTML or XHTML . CSS most common application is to style web pages but the language can be applied to any kind of XML document. The CSS specifications are maintained by the World Wide Web Consortium.

Traditionally CSS Cascading Style Sheets have been authored with little emphasis on cross product code sharing. CSSs for each product have been self contained and isolated. When a set of web products want to use a common set of user interface guidelines each product team would implement the guidelines with varying interpretations and coverage in its own CSSs thereby duplicating efforts and making it harder for the user interface guidelines to evolve.

For example web products often want to implement themeing. Themeing allows developers to have the ability to apply a given theme a set of text color background color background images etc to any or all products. The CSS standard s model is not adequate to represent such a system due to the lack of support for variables and inheritance. A few product teams have used server side technologies to inject variables into CSS. However that approach makes CSS considerably harder to author and localize because the system is restricted in the types of modifications it can make to CSS generation and there is no consistent way for defining accessing and overriding theme resources like images.

Additionally localizing CSS is an expensive process where product CSS is given to localizers and they modify and return localized CSS. Examples of localized CSS styles include fonts text sizes colors and text styles e.g. italics bold . In general the localizer often modifies CSS without actually seeing the output and the actual product testing happens after the CSS is handed back to the product team. This makes the process error prone time consuming and expensive.

Embodiments of the invention include extensions to the CSS Cascading Style Sheet language. In an embodiment a CSSX Extended Cascading Style Sheets file including CSSX extensions defining a variable and CSSX extensions for referencing the variable is created. A CSSX file compiler determines a value of the defined variable modifies the CSSX file by replacing references to the defined variable with the value and generates the CSS file from the modified CSSX file.

According another aspect the CSSX file includes a definition for a left variable with a value of left and a right variable with a value of right. The CSSX file compiler generates a right to left CSS file by determining if a specified language reads left to right or right to left. If the specified language reads right to left the right variable is redefined with a value of left and the left variable is redefined with a value of right. The CSSX file compiler generates the CSS file that will automatically render a right to left layout in the web browser.

According yet to another aspect of the invention the CSSX file includes CSSX extensions for defining an inheritance set. The inheritance set is defined in the CSSX file and includes a reference to a previously defined CSS rule set. The CSSX file compiler defines a new CSS rule set as a function of the determined attributes included in the previously defined CSS rule set of the defined inheritance set and generates the CSS file including the newly defined CSS rule set.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In an embodiment the invention includes extensions to the CSS Cascading Style Sheet language. In particular the invention includes systems and methods for defining variables and inheritance sets using extensions to the CSS standard language.

Referring to an embodiment of a method as shown in for creating a CSS file from a CSSX Extended Cascading Style Sheets file including CSSX extensions e.g. non CSS extensions for defining a variable as shown in is illustrated. The CSSX file includes CSSX extensions. According to aspects of the invention the CSSX extensions are not part of the CSS standard. The CSS file is intended for execution by a web browser that does not execute CSSX extensions. Additionally the web browser does not execute the variable definitions of the CSSX file .

At the CSSX file is created. In an embodiment the CSSX file is a text file that may be created by a text editor. The CSSX file includes CSSX extensions defining a variable and CSSX extensions for referencing the variable. In an embodiment the variable is defined using a CSS style rule with a non CSS compatible name. For example the variable can be defined by using a style rule with name define where define Color1 red defines the variable named Color1 with a value red . Additionally in another embodiment the variable can be referenced in the CSSX file by putting a in front of the variable name. For example MyClass color Color1 would get interpreted as MyClass color red if Color1 was defined as red. Furthermore multiple variables can be defined in a single define block i.e. define Color1 red Color2 blue and a variable s value may be any string of text terminated by a semicolon i.e. define SomeText This is value of the SomeText variable and define ContainerBackgroundImage url img a.gif .

At a CSSX file compiler determines the value of the defined variable in the CSSX file . And at the CSSX file compiler modifies the CSSX file by replacing references to the defined variable with the value determined at step . In an embodiment a whole CSS term or part of a CSS term may be replaced by the reference to the variable. For example the following code in the CSSX file

At the CSSX file compiler generates the CSS file from the modified CSSX file . The CSS file does not include the variable definition but includes the replaced variable value. Thus the CSS file contains only CSS compatible commands and no CSSX extensions.

For example if a specific style value e.g. color value is used in multiple rules in the CSS file all the instances have to specify that style value explicitly. There is no support for defining and referencing the variable in standard CSS. For example suppose in a page there is one element whose background color must be the same as another element s border color shown in the following CSS code example 

Now if the color needs to be changed from blue to red then it needs to be changed in both the rules above. There is no syntax in CSS to indicate that the blue value in these two styles must remain in sync. Such code quickly becomes hard to maintain and it is advantageous to define and reference a variable whose value would change from blue to red and all code instances would use the variable instead of using the color directly.

In an embodiment when multiple definitions for a single variable are present in the CSSX file at step the CSSX file compiler assigns the last defined variable value as the determined value of the variable.

In another embodiment the method allows for automatic right to left processing of the CSSX file . A right to left language is written and read right to left such that the writings of the language begin at a right hand side of a page and concludes at a left hand side. For example right to left languages include Arabic and Hebrew. A left to right language is written and read left to right such that the writings of the language begin at a left hand side of a page and concludes at a right hand side. For example left to right languages include languages which use the Latin alphabet.

In this embodiment a left variable with a value of left and a right variable with a value of right are defined. In one embodiment the left and right variables are defined in the CSSX file . Alternatively the left and right variables are defined by the CSSX file compiler and may be referenced in a CSSX file without being previously defined in the CSSX file .

At least the left variable or the right variable is referenced in the CSSX file . Additionally a language is specified within the CSSX file . Alternatively the CSSX file compiler may determine the language from a parameter of a client e.g. web browser or computer . The parameter includes a client locale or a client designation.

The CSSX file compiler determines if the specified language reads left to right or right to left. If the specified language reads right to left the CSSX file compiler redefines the right variable with a value of left and the left variable with a value of right. Thus the CSSX file compiler automatically generates the CSS file from the CSSX file that will render a right to left layout in the web browser when the language reads right to left. The CSS file does not include the left or right variable definition but includes the replaced variable values. Thus the CSS file contains only CSS compatible commands and no CSS extensions.

At the CSSX file is created including a CSSX extension e.g. non CSS extensions for defining the inheritance set. The definition of the inheritance set includes a reference to a previously defined CSS rule set. And at the CSSX file compiler determines the attributes of the previously defined CSS rule set included in the definition of the inheritance set of the CSSX file . For example the following CSSX file 

defines the inheritance set MyClass3 using attributes from previously defined classes MyClass1 and MyClass2.

At the CSSX file compiler defines anew CSS rule set as a function of the determined attributes included in the previously defined CSS rule set of the defined inheritance set. Alternatively the defined inheritance set includes references to multiple previously defined CSS rule sets. And the newly created CSS rule set is defined as a function of the determined attributes included in all of the previously defined CSS rule sets of the defined inheritance set. For example from the CSSX file above the following CSS file will be created 

In yet another alternative the defined inheritance set includes a reference to an inline CSS style and the inline CSS style takes precedence over the determined attributes of the previously defined CSS rule set when defining the new CSS rule set. For example the following CSSX file 

In a fourth alternative embodiment the defined inheritance set includes a reference to a previously defined CSS rule set including a pseudo class and the defined new CSS rule set includes the pseudo class. For example the following CSSX file 

At the CSSX file compiler generates the CSS file . The CSS file does not include the definition for the inheritance set but includes the newly defined CSS rule set. Thus the CSS file contains only CSS compatible commands and no CSS extensions.

In an embodiment the computer and the server are connected through a network. The server and computer may operate in a networked environment using logical connections to one or more remote computers. The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to server and computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

The server also includes the CSSX file compiler for generating the CSS file from the CSSX file and the storage device for storing the CSSX file and the CSS file . In an embodiment the CSSX file compiler is a two pass compiler where variables and values are gathered during the first pass of the CSSX file and the gathered values are substituted for variable during the second pass. The generated CSS file contains only CSS compatible commands and no CSS extensions. In an embodiment the web server may access the area of the storage device containing the CSS file and the CSSX file compiler may access the area of the storage device containing the CSS file and the CSSX file .

In another embodiment the CSSX file includes CSSX extensions for defining at least one variable and at least one CSSX extensions for referencing the variable. The CSSX file compiler determines the value of the defined variable and modifies the CSSX file by replacing all references to the defined variable with the determined value. The CSSX file compiler generates the CSS file from the modified CSSX file . The generated CSS file does not include the variable instead the CSS file includes the replaced variable value. Furthermore the CSS file contains only CSS compatible commands and no CSSX extensions. In an embodiment CSSX file compiler uses the longest variable name available when resolving conflicts. For example if two variables are defined in the CSSX file 

In yet another embodiment the CSSX file includes a definition for a left variable with a value of left and a right variable with a value of right a reference to at least the defined left variable or the defined right variable and a language specifier. The CSSX file compiler determines if the specified language reads left to right or right to left. If the specified language reads right to left the CSSX file compiler redefines the right variable with a value of left and the left variable with a value of right in the CSSX file . The CSSX file compiler generates the CSS file from the CSSX file . The CSS file does not include the variable definition but it includes the replaced variable value. Thus the CSS file contains only CSS compatible commands and no CSS extensions. Advantageously by switching the values of the left and right variable when the language specifier indicates the language reads right to left the generated CSS file will automatically render a right to left layout in the web browser . In an embodiment the language is specified by a parameter of the web browser such as the web browser locale or the web browser designation.

Alternatively the CSSX file includes a CSSX extension for defining an inheritance set including a reference to the previously defined CSS rule set. The CSSX file compiler determines the attributes of the previously defined CSS rule set included in the definition of the inheritance set and defines a new CSS rule set as a function of the determined attributes included in the previously defined CSS rule set. The CSSX file compiler generates the CSS file including the newly defined CSS rule set but not the definition for the inheritance set. The generated CSS file contains only CSS compatible commands and no CSS extensions.

In an embodiment the defined inheritance set includes a reference to an inline CSS style. The inline CSS style takes precedence over the determined attributes of the previously defined CSS rule set when defining the new CSS rule set.

In yet another embodiment the system includes an editor for creating the CSSX file including CSS extensions and standard CSS. The editor provides components to create the CSSX file and modify the CSSX file. Additionally the editor includes syntax for the CSS extensions and for the standard CSS in the CSSX file. For example the editor allows a user to create and maintain a CSSX file including CSS extensions and standard CSS without having to learn completely new syntax for creating the CSSX file.

Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer e.g. server and computer .

Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The computer e.g. server and computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates the storage device that includes removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to a hard disk a magnetic disk a optical disk magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer e.g. server and computer .

In a networked environment program modules depicted relative to computer e.g. server and computer or portions thereof may be stored in a remote memory storage device not shown . The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

For purposes of illustration programs and other executable program components are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer e.g. server and computer .

Although described in connection with an exemplary computing system environment including computer e.g. server and computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

