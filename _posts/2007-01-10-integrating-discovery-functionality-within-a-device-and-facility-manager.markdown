---

title: Integrating discovery functionality within a device and facility manager
abstract: Techniques are provided for implementing the WS-DeviceProfile standard as a multi-threaded process (“DFM”) executing on a multi-function peripheral (“MFP”). The DFM takes care of the discovery of devices and services on a network. The DFM also acts as a facility manager. The DFM implements various web services in a single component that applications can re-use. The DFM insulates these applications from some of the more complex details of the web services that the DFM implements. The MFP may comprise several different applications that each use web services provided by the DFM. The threads of the DFM can handle separate tasks concurrently. For example, one thread, of the multi-threaded DFM, may perform one or more functions specified by the WS-DeviceProfile protocol, while another thread may perform one or more functions specified by a WS-Discovery protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321546&OS=08321546&RS=08321546
owner: Ricoh Company, Ltd.
number: 08321546
owner_city: Tokyo
owner_country: JP
publication_date: 20070110
---
This application is related to the following U.S. Patent Applications the contents of each of which are incorporated by reference for all purposes as though fully disclosed herein U.S. patent application Ser. No. 11 265 835 titled APPROACH FOR DISCOVERING NETWORK RESOURCES filed on Nov. 2 2005 U.S. patent application Ser. No. 11 497 000 titled ADVANCED WEB SERVICES ON A LEGACY PLATFORM filed on Jul. 31 2006 and U.S. patent application Ser. No. 11 644 181 titled MULTI THREADED DEVICE AND FACILITY MANAGER filed on Dec. 21 2006.

The present invention relates to providing web services and more particularly to implementing the WS DeviceProfile standard as a multi threaded process executing on a multi function peripheral MFP .

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

The World Wide Web WWW is a global read write information space. Text documents images multimedia and many other items of information referred to as resources are identified by short unique global identifiers called Uniform Resource Identifiers URIs so that each can be found accessed and cross referenced in the simplest possible way. The World Wide Web Consortium W3C is an international consortium where member organization a full time staff and the public work together to develop standards for the World Wide Web. The W3C defines a web service as a software system that is designed to support interoperable machine to machine interaction over a network. This definition encompasses many different systems but in common usage the term refers to those services that use SOAP formatted Extensible Markup Language XML envelopes and that have their interfaces described by Web Services Description Language WSDL . Web services allow devices and applications to communicate with each other over one or more networks without the intervention of any human being while using the same suite of protocols e.g. Hypertext Transfer Protocol HTTP that a human being would use to communicate with such devices and applications over one or more networks.

The specifications that define web services are intentionally modular and as a result there is no one document that defines all web services. Instead there are a few core specifications that are supplemented by other specifications as the circumstances and choice of technology dictate. The most common core specifications are SOAP WSDL WS Security and WS ReliableExchange. Different specifications address different tasks and functions.

SOAP is an XML based extensible message envelope format with bindings to underlying protocols e.g. HTTP and Simple Mail Transfer Protocol SMTP . Using XML SOAP defines how messages should be formatted so that those messages are formatted in such a way that the recipients of those messages devices and applications can understand those messages. SOAP can be used to perform remote procedure calls for example.

WSDL is an XML format that allows web service interfaces to be described along with the details of those interfaces bindings to specific protocols. WSDL is typically used to generate server and client code and for configuration. WS Security defines how to use XML encryption and XML signature in SOAP to secure message exchanges. WS ReliableExchange is a protocol for reliable messaging between two web services.

Embodiments of the invention involve a specific implementation of the WS DeviceProfile specification. Embodiments of the invention include a device and facility manager DFM that is not expressly specified in the WS DeviceProfile specification. The DFM uses various web services e.g. those specified by WS Addressing WS Discovery WS Security etc. and describes how to use those web services to perform various tasks. The DFM performs discovery of devices and services on a network. The DFM also acts as a facility manager. The DFM implements various web services in a single component that applications can use and re use. The DFM insulates these applications from details of the web services that the DFM implements.

In one embodiment of the invention the DFM is implemented within a device which may include but is not limited to a multi function peripheral MFP . For example the MFP may comprise several different applications each of which has a different function e.g. printing scanning faxing etc. . Each of these applications may use the web services provided by the DFM. Additional applications that are later dynamically added to the MFP also may use the web services provided by the DFM. Because the most commonly used web services such as WS Discovery are provided by the DFM these web services do not need to be implemented separately by each application.

In one embodiment of the invention the DFM is implemented as multiple threads of execution. The multi threaded nature of the DFM increases efficiency. When the DFM comprises multiple threads separate threads can handle separate tasks concurrently. For example one thread executing on the device may perform a first set of one or more functions specified by the WS DeviceProfile protocol e.g. the thread may perform tasks related to the management of web services protocols provided by the device. Another thread executing on the device may perform a second set of one or more functions specified by a WS Discovery protocol e.g. the thread may communicate with other devices to inform those devices that the device is available and what are the capabilities of the device.

Embodiments of the invention may increase the efficiency of the DFM using other approaches. For example threads of the DFM may communicate with each other by setting and reading flags thereby minimizing the time in which one thread is waiting upon another. Also portions of the DFM may be implemented using a static class thereby avoiding the complexities of managing pointers to instantiated objects.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

While depicts the device as being a MFP in other embodiments of the invention MFP may correspond to a different device other than a MFP such as a printer a copier a facsimile machine an image forming device a digital camera and a scanner. Thus embodiments of the invention may implement a DFM on other devices other than a MFP however for ease of explanation examples discussed herein shall chiefly be discussed in terms of the DFM being implemented on a MFP. As a result embodiments of the invention are not limited as to what type of device the DFM may be implemented on e.g. the DFM may be implemented on a vending machine a kitchen appliance a personal computer and an embedded computer.

MFP comprises multiple different modules each of which serves a different function. These modules include a central processing unit CPU a network interface e.g. an Ethernet card memory e.g. random access memory RAM a storage device e.g. a hard disk drive a display e.g. a liquid crystal display a front panel input device e.g. a keypad a fax engine a scan engine and a print engine . In various embodiments of the invention an MFP may comprise more fewer or different modules than those illustrated in .

MFP comprises a web services application which executes on MFP . Web services application communicates with web services client via network and DFM . MFP further comprises a SOAP software development kit SDK and web services protocols . MFP may comprise any of a number of different platforms A N. Each such platform may be a different operating system and or a different set of hardware for example. Although shows multiple platforms A N in one embodiment of the invention MFP comprises only one platform which may be any one of platforms A N.

MFP may comprise any of a number of different platforms A N. Each such platform may be a different operating system and or a different set of hardware for example. Although shows multiple platforms A N in one embodiment of the invention MFP comprises only one platform which may be any one of platforms A N.

For each of platforms A N there is for each of web service applications A and B a separate API implementation that is specific to that platform and that web service application. Each of abstract API implementations AA NA implements abstract API A for a specific platform. Similarly each of abstract API implementations AB NB implements abstract API B for a specific platform. Thus abstract API implementation AA is a platform specific implementation of abstract API A for platform A abstract API implementation BA is a platform specific implementation of abstract API A for platform B and so on. Similarly abstract API implementation AB is a platform specific implementation of abstract API B for platform A abstract API implementation BB is a platform specific implementation of abstract API B for platform B and so on. Web services application A communicates with platforms A N via their corresponding abstract API implementations AA NA while web services application B communicates with platforms A N via their corresponding abstract API implementations AB NB.

MFP also comprises DFM which in one embodiment of the invention is an implementation of the WS DeviceProfile specification. For each of platforms A N there is a separate general API implementation that is specific to that platform. Each of general API implementations A N implements general API for a specific platform. Thus general API implementation A is a platform specific implementation of general API for platform A general API implementation B is a platform specific implementation of general API for platform B and so on. DFM communicates with platforms A N via their corresponding general API implementations A N.

The MFP as indicated by may comprise any of several platforms e.g. a legacy platform a Linux based platform and a VxWorks based platform upon each of which one or more of the WSAs may execute. The platforms depicted in are merely provided as examples as the approach is applicable to any type of platform.

DFM represents the MFP by responding to discovery requests metadata requests from client and configuration and other MFP administration requests from an administrator . DFM may act as a repository of implementations of multiple web service specifications such as WS Discovery and WS MeX i.e. WS MetadataExchange .

Client requests services from the MFP. Each WSA executing on the MFP provides a service to client using the SOAP protocol for example . Each WSA may employ a service specific abstract API such as abstract API independent from the target platform. Each WSA may also employ WS Eventing .

Client discovers that an MFP exists via a discovery request or a discovery HELLO message i.e. a broadcast or multicast message announcing the MFP to devices on the same network . Once client is aware of the existence of an MFP client may send a device metadata exchange request e.g. via WS MetadataExchange to discover all the services that the MFP provides. DFM acting for the entire device receives the request and returns metadata that describes the various services provided by the MFP. Client may request service metadata from a particular web service application executing on the MFP such as web service application WSA . WSA may request the service metadata from a web service device WSD manager which returns the service metadata to WSA . WSA forwards the service metadata to client .

Alternatively the device metadata of the MFP and the service metadata of one or more WSAs may be sent to client in the same response.

Based on the service metadata client generates and transmits a SOAP request that corresponds to a service provided by WSA . WSA receives and processes the SOAP request. Based on a service request WSA may use an abstract API to make a platform specific call to an implementation of abstract API such as an abstract API implementation . A developer of a web service application e.g. WSA may focus on the development of the web service itself without having to know the complexities of the underlying platform upon which the web service executes. Therefore someone with knowledge of the target platform even other than the web service application developer may define the implementation of the corresponding abstract API.

Client is an application that is associated with a process that requests one or more services provided by the MFP. Client is typically an application that is associated with the operating system that supports the initial requesting process. A purpose of client is to convert a platform specific procedure call from a requesting process into a SOAP request that can be processed by an application that understands SOAP.

For example the requesting process may be associated with a Microsoft Word application. WSA may provide a print service. Client may be an application that is associated with the operating system that supports the initial requesting process. Client might receive a platform specific print data request that was sent from the requesting process. Client would then encode the print data request into a SOAP message that can be processed by WSA .

SOAP communication between client and the MFP may be made over a network not shown . The network may be implemented by any medium or mechanism that provides for the exchange of data between various nodes in the network. Examples of such a network include without limitation a network such as a Local Area Network LAN Wide Area Network WAN Ethernet and or the Internet and or one or more terrestrial satellite or wireless links. The network may include a combination of networks such as those described. The network may transmit data according to Transmission Control Protocol TCP User Datagram Protocol UDP and or Internet Protocol IP for example.

DFM represents the MFP by accepting discovery requests requests for logging information and configuration instructions. According to one embodiment of the invention DFM also acts as a repository of implementations of multiple web service specifications. Thus DFM may include a shared library of routines that each implement one or more functions that are defined by one or more web services specifications e.g. WS Security and WS MetadataExchange . In this way multiple web service specifications may be implemented once and then shared with each of the multiple web service applications e.g. WSA that execute on the MFP. As a result developers of web service applications can use and rely on the MFP implemented web service specification without knowing many details about any of these specifications. Some web service specifications implemented on DFM may include but are not limited to WS Discovery WS Transfer WS MeX i.e. WS MetadataExchange and WS Security .

In one embodiment of the invention DFM includes library routines that correspond to the SOAP protocol. Each SOAP library routine implements one or more functions that are defined by one or more SOAP specifications. The SOAP library routines are used to analyze SOAP requests and package SOAP messages. Multiple versions of the SOAP protocol standard may be supported. Updates to a newer version of a SOAP protocol standard may be performed with little or no modification to WSA .

In one embodiment of the invention DFM sends out broadcast messages to indicate updates to one or more WSAs on the MFP. In one embodiment of the invention client does not need to subscribe to such an update event. However in one embodiment of the invention client registers to receive notifications of updates to one or more WSAs on the MFP. In such an embodiment of the invention if DFM receives update information that pertains to an update of a particular application and if client is registered to receive a notification of such an update then DFM sends to the client application a notification of the update.

In one embodiment of the invention DFM receives update information pertaining to a WSA. For example WSA may provide a fax service. The MFP might detect that the fax line is disconnected. While the fax service is unavailable DFM should not respond to future metadata requests with device metadata that indicates that the MFP provides a fax service. Therefore in response to receiving update information from WSA DFM updates the device and or service metadata that is associated with WSA .

In one embodiment of the invention DFM receives configuration requests from administrator . A configuration request indicates one or more WSAs that are to be configured and or updated. DFM handles configuration requests and performs or causes to be performed the configuration or update instruction on the appropriate WSA. Alternatively DFM may instruct WSD manager to handle such configuration requests.

In one embodiment of the invention DFM receives and responds to log requests from administrator . DFM retrieves logging information that pertains to one or more WSAs that execute on the MFP. DFM sends the logging information to administrator . WSD manager may retrieve and provide the logging information to DFM .

According to one embodiment of the invention DFM also comprises WSD manager . WSD manager provides a central point for logging information status inquiries and external management of the MFP. In one embodiment of the invention administrator is an application that is configured to retrieve through WSD manager information that pertains to the MFP. For example WSD manager may centralize all logging information that comes internally from all WSAs and from the various platforms upon which WSAs are executing. Administrator may also configure update or disable a WSA using WSD manager .

In one embodiment of the invention WSD manager maintains overall status information such as where the MFP is located which WSAs are installed on the MFP and whether the WSAs are running properly.

In one embodiment of the invention WSD manager maintains the metadata for the MFP. In one embodiment of the invention WSD manager maintains service metadata that pertains to each WSA running on the MFP.

According to one embodiment of the invention WSD manager retrieves general information that pertains to the MFP such as the IP address and the model number of the MFP through general API . General API defines an interface by which DFM receives information specific to each platform of the MFP. As a result a DFM developer is not required to know the details of a specific platform the DFM developer only needs to know the details of the DFM that the developer is building for an MFP. The dotted lines in represent API calls from a particular API to the appropriate API implementation.

If general API has been defined for DFM then a platform specific implementation of general API is defined. For example a general API implementation is defined for general API on legacy platform . Similarly a general API implementation is defined for general API on Linux based platform . A general API implementation defines the functions that are specified in a device specific request and implemented on the MFP. The developer of DFM may define the general API implementation. Alternatively someone else who has knowledge of the target platform may define the general API implementation.

Web services application WSA is a module that provides one or more web services and relies on web services protocols and technologies such as those protocols provided by DFM . WSA may also rely on a separate SOAP module not shown to analyze SOAP requests if WSA does not include logic for analyzing SOAP requests. As indicated above the separate SOAP module may be provided by DFM and shared among all WSAs .

In one embodiment of the invention WSA also comprises a WS Eventing module for responding to event requests from client . Client may subscribe to an event that is associated with the service provided by WSA . For example WSA might be a printing application. An event to which client subscribes might be the MFP s completion of a print job. Under such circumstances upon the event s completion WSA sends an event message to client . The event message indicates that the print job is completed.

WSA may also comprise an abstract API e.g. abstract API through which device specific calls may be generated. The abstract API defines an interface by which the associated WSA invokes one or more functions on the MFP. Therefore the developer of a web service application is not required to know the underlying complexities of the target platform but only of the new service that the developer aims to provide.

If an abstract API has been defined by a web service application developer then an implementation of the abstract API for a specific platform is defined. For example as shown in an abstract API implementation is defined for abstract API on legacy platform . Similarly an abstract API implementation is defined for abstract API on VxWorks platform . An abstract API implementation defines the functions that are specified in a device specific request and implemented on the MFP. The developer of the web service application may define the implementation. Alternatively someone else who has knowledge of the target platform may define the implementation.

As is discussed above in one embodiment of the invention the DFM e.g. DFM is implemented via multiple concurrently executing threads. In one embodiment of the invention there are at least four threads including 1 a WSD manager thread 2 a WS Discovery thread 3 an inside dispatcher thread and 4 an external request processing thread.

In one embodiment of the invention when the MFP is powered on a main thread initializes and starts up multiple components. After the main thread has started up the other threads the main thread gives control to or begins acting as the WSD manager thread. The WSD manager thread monitors the registration and un registration of web services applications e.g. web services applications A and B . The WSD manager thread also monitors any changes that are coming from the MFP via the abstract layer e.g. general API general API implementation A . In response to any such change arising the WSD manager thread 1 updates a version of device metadata that is stored on the MFP and 2 instructs the WS Discovery thread to broadcast e.g. via network the change in the device metadata to other devices that are external to the MFP.

In one embodiment of the invention the WS Discovery thread waits for the WSD manager thread s approval to send a Hello message. In response to the WS Discovery thread obtaining such approval from the WSD manager s thread the WS Discovery thread broadcasts e.g. via network a Hello message to other devices to indicate the presence of the MFP. After sending such a Hello message the WS Discovery thread listens for incoming Probe and Resolve messages. In response to receiving a Probe or Resolve message the WS Discovery thread responds appropriately as specified by the WS Discovery specification.

Additionally in one embodiment of the invention in response to receiving from the WSD manager thread a notification that indicates that the MFP s device metadata has been updated the WS Discovery thread broadcasts e.g. over network the change in the device metadata. For example the message may indicate to other devices that an additional web service e.g. printing scanning etc. is now available on the MFP or that a web service which was previously available on the MFP is now unavailable.

In one embodiment of the invention the internal dispatcher thread handles message exchanges between DFM and web services applications A and B and or other applications that are executing on the MFP. These messages are composed so that they follow a specified format. The internal dispatcher thread parses received messages. The internal dispatcher thread dispatches these messages to the appropriate component of the DFM. The internal dispatcher thread relays the DFM components responses to these messages back to the appropriate entities e.g. web services applications A and B .

In one embodiment of the invention the external request processing thread monitors request messages that originate from devices and processes that are external to the MFP. For example the external request processing thread may monitor messages that web service clients send to the MFP over network . Thus in one embodiment of the invention the internal dispatcher thread handles only messages that originate within the MFP while the external request processing thread handles only messages that originate from outside of the MFP. Beneficially the internal dispatcher and external request processing threads may handle messages concurrently so that the MFP can react to requests from both within and without in a parallel rather than a serial manner. The external message dispatcher thread determines the types of the incoming messages dispatches the messages to the appropriate DFM components based on the types of those messages receives responses to the messages from the DFM components to which the messages were dispatched and sends e.g. over network the responses to the external entities from which the messages originated.

Beneficially a multi threaded DFM allows external requests to be queued and handled on a first come first served basis without impacting the rest of the MFP. Additionally a multi threaded DFM allows web services applications to be registered and un registered with the MFP dynamically without impacting the other tasks of the DFM. Furthermore a multi threaded DFM allows communications with the MFP platform to be handled without putting any restrictions on the work that the DFM is doing. Additionally a multi threaded DFM allows one thread to focus on the business logic of the DFM without needing to do anything regarding communications with the MFP platform the web services applications or MFP external entities. From a programmatic point of view having a multi threaded DFM makes the DFM more modular flexible and robust.

Because the external request processing thread is separate from the internal dispatcher thread the DFM is able to handle communications with MFP internal and MFP external entities simultaneously the DFM does not need to wait for communications with an MFP internal entity to complete before beginning communications with an MFP external entity or vice versa. Although the embodiment of the invention illustrated includes only four threads alternative embodiments of the invention may include a greater or lesser number of threads. For example for each web service application on the MFP a separate thread could be started to handle communications involving that web service application and no other web service application. However as the number of threads increases the overhead required to maintain those threads also increases.

In an alternative embodiment of the invention there are only two concurrently executing threads the WS Discovery thread which handles all communications specified by the WS Discovery specification and another thread which performs operations that are not performed by the WS Discovery thread.

In one embodiment of the invention the main thread s invocation of a DFMCleanUp method causes all of the other threads to shut down in a graceful manner.

Steps are performed by the main thread. In block the WSD manager is initialized. In block the external and internal Internet Protocol IP address and port are retrieved from the WSD manager. In block the WS Discovery thread is initialized. The WS Discovery thread begins to perform steps concurrently with steps being performed by the main thread. In block the internal dispatcher thread is initialized. The internal dispatcher thread begins to perform steps concurrently with steps being performed by the main thread. In block the external request processing thread is initialized. The external request processing thread runs concurrently with the main thread and other threads.

In block the WSD manager is started. In block the WSD manager waits for a web service application registration or a registration timeout. In block the WSD manager instructs WS Discovery to start. In block the WSD manager checks for a new web service application registration or metadata change. In block a determination is made as to whether a termination signal has been received. If a termination signal has been received then control passes to block . Otherwise control passes back to block .

In block the internal dispatcher thread is stopped. In block the external request processing thread is stopped. In block the WS Discovery thread is un initialized. In block the WSD manager is uninitialized.

The WS Discovery thread runs concurrently with the other threads. In block flags signals are checked. In block a determination is made as to whether a start signal has been set e.g. by the WSD manager in block . If a start signal has been set then control passes to block . Otherwise control passes back to block .

In block a Hello message is sent. In block a discovery starting flag is cleared. In block the WS Discovery thread begins listening on the network. In block incoming e.g. from the network Probe and Resolve messages are handled and ProbeMatch and ResolveMatch messages are sent e.g. over the network in response as appropriate. In block other signals are checked and handled as appropriate. In block a determination is made as to whether a termination signal has been received. If a termination signal has been received then control passes to block . Otherwise control passes back to block .

The internal dispatcher thread runs concurrently with the main thread and the other threads. In block the internal dispatcher thread waits for inter module communication IMC messages. IMC messages are communications within the MFP between the DFM and the WSAs. IMC messages are processed by the internal dispatcher thread. In block IMC messages are processed. In block the internal dispatcher thread obtains one or more responses to one or more IMC messages. In block the internal dispatcher thread sends the one or more responses back to the entities from which the IMC messages were received. In block a determination is made as to whether a termination signal has been received. If a termination signal has been received then control passes to block . Otherwise control passes back to block .

The external request processing thread runs concurrently with the main thread and the other threads. In block the external request processing thread waits for request messages from a client e.g. web services client that is external to the MFP. In block the message type is checked. In block the message is dispatched to other modules or threads e.g. the WSD manager and or the internal dispatcher thread based on the message s type. In block the external dispatcher thread obtains a response to the message from the module or thread to which the message was dispatched. In block the response is sent back to the client from which the message was received. In block a determination is made as to whether a termination signal has been received. If a termination signal has been received then control passes to block . Otherwise control passes back to block .

In an embodiment a DFM such as DFM may be implemented via multiple concurrently executing threads. As discussed above a multi threaded DFM may include at least four threads including 1 a WSD manager thread 2 a discovery thread 3 an inside dispatcher thread and 4 an external request processing thread.

In other embodiments of the invention the multi threaded DFM may also include a DFM signal handler thread. In an embodiment the DFM signal handler thread is responsible for informing the other threads of the multi threaded DFM when a particular signal is detected. Such signals may include a signal associated with a command to power down the device upon which the multi threaded DFM is implemented and a signal associated with a determination that a lost network connection has been reestablished.

In an embodiment the discovery thread performs the majority of discovery functionality such as sending Hello messages and Bye messages listening for Probe and Resolve messages and replying to Probe and Resolve messages with ProbeMatch and ResolveMatch messages respectively. While the activities performed by the discovery thread shall chiefly be described herein in the context of performing discovery functionality in accordance with the WS Discovery protocol it is contemplated that other embodiments of the invention may employ a discovery thread that performs discovery functionality in accordance with one or more discovery protocols besides the WS Discovery protocol e.g. in other embodiments the discovery thread may perform discovery functionality in accordance with any discovery protocol other than the WS Discovery protocol.

In an embodiment threads of the multi threaded DFM may monitor a set of flags. Upon a thread detecting that a flag has been set the thread may perform a responsive action. For example when a particular flag associated with a change in the capabilities of the device implementing the DFM is set the discovery thread sends a new Hello message that reflects the new capabilities of the device over the network. In this way threads of the DFM may communicate with each other by setting and reading flags thereby minimizing the time in which one thread is waiting upon another. The process of threads of the DFM setting and reading flags shall be discussed in further detail below with reference to .

Device metadata is stored at or accessible to a MFP. Device metadata may include data that describes information that identifies the MFP e.g. device metadata may include information about the serial number or model of the MFP. Device metadata may also include information capability information that describes the current capabilities of the MFP e.g. capability information may include information about the services currently provided by the MFP.

In an embodiment of the invention in response to the discovery thread receiving a notification that indicates that device metadata for MFP has been changed the discovery thread broadcasts e.g. over network a message that indicates the device metadata for MFP has changed. The broadcast message sent by the discovery thread may contain in whole or in part device discovery data.

In an embodiment device discovery data may include information about the device type and scope of the MFP. In addition device discovery data may include address information that describes how entities should communicate with the MFP e.g. the address information may identify an IP address of the MFP. Additionally the device discovery data may identify a metadata version associated with the device metadata of the MFP. For example the metadata version may be incremented each time the device metadata changes. If a recipient of the device discovery data has a lower metadata version than the metadata version identified by device discovery data the recipient of the device discovery data may be informed that the device metadata has changed and may take an appropriate action. In an embodiment the broadcast message sent by the discovery thread may identify the metadata version without including other types of device discovery data. This manner of informing an entity that the device metadata of a MFP has changed is merely illustrative as other approaches may be used.

In an embodiment the operation of the multi threaded DFM is more efficient by integrating the performance of discovery functionality within the DFM. The discovery thread interacts with the WSD Manager thread. The WSD Manager thread provides the discovery thread with device discovery data and notification of changes in the device metadata. In this way the discovery thread may be notified when a change in MFP occurs and may obtain device discovery data reflecting the new capabilities of MFP . The communication between the WSD Manager thread and the discovery thread ensures that the information passed to the discovery thread is current and up to date.

In an embodiment the WSD Manager thread also controls when the execution of the discovery thread starts and stops. This control of the WSD Manager thread over the discovery thread may be implemented using a flag thereby yielding an efficient communication between the two threads and allowing the WSD Manager thread to quickly return from API calls made to set the flag to communicate with the discovery thread.

In an embodiment the discovery thread may also interact with the DFM signal handler thread. Such interaction may be accomplished by the DFM signal handler thread setting an appropriate flag that the discovery thread monitors. Once the discovery thread detects that a flag has been set the discovery thread may make an appropriate action such as sending a WS Discovery Hello Message or terminating the discovery thread.

In an embodiment the discovery thread may be implemented using a static class with no instance member data or member functions. Such an approach is advantageous as the complexities of managing pointers to instantiated objects may be avoided.

To further illustrate the interaction between threads of the multi threaded DFM consider . is a first sequence diagram illustrating communication between modules of a DFM according to an embodiment of the invention. For ease of explanation the illustrative threads of an exemplary multi threaded DFM shall be explained with reference to their implementation on MFP of reference will also be made to which illustrates MFP which is a more detailed illustration of MFP .

As shown in the DFM main thread initializes the discovery thread. In an embodiment the DFM main thread uses a static class to initialize the discovery thread. The DFM main thread may provide certain information such as a network address of the device in which the DFM is implemented to the static class when initializing the discovery thread.

After the discovery thread is created the DFM Main thread may instruct the WSD Manager thread to start. In response the WSD Manager thread may fetch device metadata for DFM . After retrieving the device metadata the WSD Manager thread provides the discovery thread with device discovery data. The discovery thread in turn stores the device discovery data. Prior to storing the device discovery data the discovery thread may parse validate and or perform additional processing on the device discovery data to ensure its accuracy.

After the discovery thread has stored device discovery data the WSD Manager thread may make an API call to set a flag the start flag associated with instructing the discovery thread to start the performance of its duties. In an embodiment the discovery thread once created would monitor this flag. As a result once the start flag is set the discovery thread detects that the start flag is set clears the start flag and commences the performance of its duties. For example the discovery thread duties may include listening for Probe and Resolve messages continuing to monitor flags used in communicating with other threads sending Hello messages and sending ProbeMatch and ResolveMatch messages as appropriate. Messages such as hello messages ProbeMatch messages and ResolveMatch messages sent by the discovery thread may contain information about what services are supported by the device implementing the DFM e.g. the Hello message may indicate which DCPs are active at DFM .

In an embodiment at some later point in time the WSD Manager thread may detect a change in the device metadata and or the device discovery data. For example the WSD Manager thread may detect that a particular DCP is no longer available or that the IP address of the MFP has changed. In response to the WSD Manager thread detecting a change in the device metadata and or device discovery data the WSD Manager thread notifies the discovery thread of the change and provides the discovery thread with an updated set of device discovery data that reflects the change. The discovery thread in turn stores the device discovery data. As before prior to storing the device discovery data the discovery thread may parse validate and or perform additional processing on the device discovery data to ensure its accuracy.

In an embodiment the WSD Manager thread may set a flag the change flag associated with notifying the discovery thread to that metadata has been updated. The discovery thread may monitor this flag. As a result once the change flag is set the discovery thread clears the change flag and sends new Hello messages over network to inform listening entities that device metadata for the MFP has changed and to inform listening entities of any updated device discovery data. In this way the change in the MFP may be publicized in an efficient and timely manner so that interested parties may be quickly notified of the change in the device metadata of the MFP.

After the DFM signal handler thread detects that a network reset has occurred the DFM signal handler thread may instruct the discovery thread to handle the reconnection. In an embodiment the DFM signal handler thread may instruct the discovery thread to handle the reconnection by setting a flag the network reset flag that is accessible to the discovery thread. Once the discovery thread detects that the network reset flag has been set the discovery thread clears the network reset flag and sends out a new Hello message over network . In this way other devices on the network such as web services client of may be notified that MFP is online and available. After the discovery thread sends the new Hello message the discovery thread will continue to listen for Probe and Resolve messages as well as monitor flags used in communicating with other threads.

Also illustrated in the embodiment of the DFM signal handler thread may at some point in time detect that a device shutdown signal has been received. A device shutdown signal corresponds to a command received at MFP that instructs the MFP to shut down. For example an administrator may send a device shutdown signal to MFP of to cause MFP to power down.

Once DFM signal handler thread receives the device shutdown signal the DFM signal handler instructs the WSD Manager thread to stop. The WSD Manager thread in turn instructs the discovery thread to stop. In the embodiment depicted in the WSD Manager thread instructs the discovery thread to start processing by setting a start flag. Similarly in the embodiment depicted in the WSD Manager thread instructs the discovery thread to stop processing by setting a stop flag. In this way the WSD Manager thread may control when the discovery thread begins and ends processing.

After the discovery thread detects that the stop flag has been set the discovery thread clears the stop flag and stops processing. For example the discovery thread may stop processing by sending a Bye message over network to inform all web services clients that MFP is no longer available and may subsequently stop listening for messages.

At some point in time after the DFM signal handler thread has sent a stop command to the WSD Manager thread the DFM signal handler thread may send a stop command to the DFM main thread. Upon the DFM main thread receiving the stop command from the DFM signal handler thread the DFM main thread sends an unitialize command to the discovery thread. In an embodiment the unitialize command may be sent by the DFM main thread by setting a clean up flag that is accessible to the discovery thread.

In an embodiment when the discovery thread detects that the clean up flag has been set the discovery thread clears the clean up flag and performs clean up functionality. The clean up functionality performed by the discovery thread may include cleaning up or deallocating any data structures associated with the discovery thread.

In an embodiment when a MFP detects that a change to a web service provided the MFP has occurred the MFP send a new hello message over the network. However if the change is temporary e.g. a scanner service is being taken down temporarily the MFP may determine that a new hello message need not be sent over the network. In such an embodiment upon the MFP determining that a change to a service is not temporary the discovery thread may cause a hello message such as a WS Discovery Hello message to be sent over network and upon the MFP determining that a change to a service is temporary discovery thread may determine a hello message should not be sent over network .

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

