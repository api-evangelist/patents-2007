---

title: Heterogeneous two-phase commit test engine
abstract: A computer-implemented method, information processing system, and computer program storage product validate a two-phase commit process. First information is received that indicates a plurality of web services to be tested. Each of the web services are associated with a different resource manager. Second information is received that indicates a plurality of application servers for performing the web services. A global transaction is created that includes a plurality of transactions based on the first information that was received. A two-phase commit process is initiated at one of the application servers for performing the global transaction. After the two-phase commit process has ended, results of the global transaction that include information regarding each of the transactions within the global transaction are displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07792896&OS=07792896&RS=07792896
owner: International Business Machines Corporation
number: 07792896
owner_city: Armonk
owner_country: US
publication_date: 20071231
---
The present invention generally relates to the field of global transactions within a computing environment and more particularly relates to validating two phase commit processes for completing global transactions.

Two phase commit protocols are generally used in computing environments to provide an automatic recovery mechanism when a system or media failure occurs during execution of a transaction. Two phase commit protocols such as Open Group s XA protocol ensure that all participating processing nodes e.g. application servers or database servers receive and implement the same action either to commit or to roll back a transaction regardless of local or network failure.

Two phase commit operations generally occur between transaction managers such as WebSphere and WebLogic and resource managers such as DB2 Oracle and SQL Server . A resource manager is responsible for managing a part of a computer s shared resources i.e. software entities can request access to a resource from time to time using services that the resource manager provides . A transaction manager is responsible for managing global transactions coordinating the decision to commit them or roll them back and coordinating failure recovery.

Testing two phase commit operations within a system allows administrators to determine if a two phase commit protocol can be properly implemented in a system. However current system testing environments and tools do not provide a mechanism to validate two phased commit processing with heterogeneous resource managers being enlisted by Enterprise Java Beans EJBs themselves or EJBs called by WebService endpoints.

In one embodiment a method for validating a two phase commit process is disclosed. The method includes receiving first information that indicates a plurality of web services to be tested. Each of the web services are associated with a different resource manager. Second information is received that indicates a plurality of application servers for performing the web services. A global transaction is created that includes a plurality of transactions based on the first information that was received. A two phase commit process is initiated at one of the application servers for performing the global transaction. After the two phase commit process has ended results of the global transaction that include information regarding each of the transactions within the global transaction are displayed.

In another embodiment an information processing for validating a two phase commit process is disclosed. The information processing system includes a memory and a processor communicatively coupled to the memory. The information processing system further includes a test module that is communicatively coupled to the memory and the processor. The test module is adapted to receiving first information that indicates a plurality of web services to be tested. Each of the web services are associated with a different resource manager. Second information is received that indicates a plurality of application servers for performing the web services. A global transaction is created that includes a plurality of transactions based on the first information that was received. A two phase commit process is initiated at one of the application servers for performing the global transaction. After the two phase commit process has ended results of the global transaction that include information regarding each of the transactions within the global transaction are displayed.

In yet another embodiment a computer program storage product for validating a two phase commit process is disclosed. The computer program storage product includes instructions for receiving first information that indicates a plurality of web services to be tested. Each of the web services are associated with a different resource manager. Second information is received that indicates a plurality of application servers for performing the web services. A global transaction is created that includes a plurality of transactions based on the first information that was received. A two phase commit process is initiated at one of the application servers for performing the global transaction. After the two phase commit process has ended results of the global transaction that include information regarding each of the transactions within the global transaction are displayed.

Other objects features and advantages of the present invention will become apparent from the following detailed description. It should be understood however that the detailed description and specific examples while indicating preferred embodiments of the present invention are given by way of illustration only and various modifications may naturally be performed without deviating from the present invention.

The various embodiments of the present invention discussed below allow two phased commit processing with heterogeneous resource managers being enlisted by Enterprise Java Beans EJBs themselves or EJBs called by WebService endpoints. In one embodiment various resource managers such as but not limited to DB2 IMS CICS and WebSphere MQ are enlisted in a global transaction comprising chained superior subordinate requests across multiple JAX WS web service calls. In another embodiment the call chaining occurs across Remote Method Invocation over Internet Inter Orb Protocol RMI IIOP calls between EJBs in a server as client configuration also superior subordinate .

In a preferred embodiment a Web GUI front end for a two phase commit test engine enables a tester to dynamically configure combinations and sequences of chaining requests for the various resource managers. Options for either JAX WS web service call chaining or EJB RMI call chaining are presented to the tester. In this embodiment a pause function can also be utilized by a tester so that an enlisted transaction in a global transaction can be suspended. This allows precise failover testing to be performed i.e. failing a specific system where the suspended transaction is located . After a unit of recovery has been re dispatched on a recovery server the transaction can then be resumed and verification automatically occurs to validate that the entire set of requests has completed properly. The two phase commit test engine of this embodiment can also be ran under stress in a WebSphere clustered environment such that a large volume of work is being processed during a failover test and that all initiated test Web Service or EJB request chains execute to successful completion.

An operating environment according to an embodiment of the present invention is illustrated in . As shown one or more information processing systems comprise a two phase commit test module for validating two phase commit processing within the operating environment . The two phase commit test module presents an automated end to end testing of a two system process without requiring the construction of a new test case and validation checker for each configuration.

In this embodiment the two phase commit processing being validated comprises heterogeneous resource managers that are enlisted by the business logic of EJBs themselves or EJBs called by WebService endpoints. The operating environment of this embodiment also includes multiple systems and such as but not limited to application servers for simplicity these systems and are referred to below as application servers . In this embodiment the two phase commit test module validates tests two phase commit processes on one or more of the application servers and . The two phase test module can also reside on one of the application servers and .

At least one of the application servers and is communicatively coupled to the two phase commit test system via a network . The application servers and are also communicatively coupled to one another. Each application server and in this embodiment includes a transaction manager and one or more resource managers and and a set of resources and . In this embodiment each of the application servers and also includes a web service endpoint and which is a referenceable entity such as but not limited to a processor or resource that can receive web service messages.

Examples of a transaction manager and are but not limited to WebSphere and WebLogic . Examples of a resource manager are but not limited to DB2 Oracle and SQL Server . The application server and which can be but is not limited to a WebSphere Application Server uses a transaction manager and also known as an external coordinator to communicate with the application components e.g. Java servlets or Enterprise Java Beans and the resource managers and e.g. IMS or DB2 through resource adapters e.g. IMS Connector for Java to coordinate a transaction.

If a transaction manager coordinates a transaction that transaction is considered a global transaction. A global transaction is multiple operations grouped into a single transaction or a single unit of work in which all changes within the transaction are either fully completed or fully rolled back. Stated differently a global transaction is indivisible or atomic . If a transaction manager and coordinates a transaction with more than one resource manager and the transaction manager and uses a two phase commit protocol. For example a user wants to transfer money from a savings account to a checking account. If the savings account information resides on a separate resource manager from the checking account information e.g. the saving account resides on IMS and the checking account resides on DB2 the transaction manager and in the application server and WebSphere Application Server helps the application to coordinate the changes between IMS and DB2 transparently using two phase commit processing. Specifically the transaction manager works with an IMS resource adapter to coordinate the changes in IMS.

As discussed above a two phase commit process handles system and media failures in such a way that data integrity is preserved across all processing nodes. Two phase commit operations generally occur between transaction managers and resource managers. In a first phase of a two phase commit process a transaction manager asks a resource manager to prepare to commit transaction branches i.e. resource manager is queried to see if it can guarantee the ability to commit a transaction branch . If the resource manager is able to commit it records any pertinent information that is needed and then replies affirmatively. A negative reply indicates failure of a transaction. After making a negative reply and rolling back its work the resource manager can discard its knowledge of the transaction branch.

In a second phase of a two phase commit test process the transaction manager issues the resource manager an actual request to commit or roll back the transaction branch. Prior to issuing requests to commit the transaction manager records decisions to commit as well as a list of all involved resource managers in this case resource manager . The resource manager either commits or rolls back changes to resources and then returns status to the transaction manager . The transaction manager can then delete entries related to the global transaction.

In one embodiment the two phase commit test module comprises a user interface . The user interface of this embodiment is a web service client that allows a user to dynamically configure combinations and sequences of chaining requests for the various resource managers and such as but not limited to DB2 IMS CICS and WebSphere MQ. The user interface web service client allows a user to dynamically configure JAX WS web service call chaining and EJB RMI call chaining. The user interface web service client is discussed in greater detail below. The two phase commit test module of this embodiment also includes a test manager for receiving and managing user configuration data. The test manager also manages and monitors the two phase commit testing being performed across the application servers and based on the received user configuration data. The test manager is discussed in greater detail below.

As discussed above embodiments of the present invention validate two phased commit processing with heterogeneous resource managers being enlisted by EJBs themselves or EJBs called by WebService endpoints. shows one exemplary embodiment of the user interface in the form of a web service client that that allows a user to dynamically configure combinations and sequences of chaining requests for various heterogeneous resource managers and for testing a two phase commit process. The user interface web service client presents an interface for the user to dynamically configure JAX WS web service call chaining and or EJB RMI call chaining.

In the example of the user interface web service client is used for dynamically configuring JAX WS web service call chaining. In this example the application servers and are WebSphere Application Servers implementing WS AT Web Services Atomic Transaction . WS AT provides transactional support for Web service application requests that are compliant with JSR and made using SOAP HTTP. WS AT allows distributed Web Service applications and the resources they use to take part in distributed global transactions.

The user interface web service client of this embodiment includes fields that allow the user to select a sequence of web services to be called within an atomic transaction i.e. global transaction . In other words the fields allow the user to configure combinations and sequences of chaining requests. For example in the example illustrated in the user has selected a first sequence of DB2 WebService a second sequence of IMS WebService Pause and a third sequence of JMS WebService. These sequences of the transaction combine to create an atomic transaction. A pause option such as that selected in the IMS WebService Pause sequence is an option that suspends an action to allow the service to be failed. This is useful for testing the recovery function of a two phase commit operation which is discussed in greater detail below.

The user interface web service client also includes a Host IP Address field that allows the user to specify the IP address of the host. In the example of the host IP address is localhost which is a specialized server address that indicates the address of the machine that is local to where the application is running. The user interface web service client also includes a Port field . The Port field allows the user to enter the port number of the first application server to be used in the two phase commit testing process. In the example of the lowest port number has been entered.

A Number of Servers field allows the user to enter the number of servers to be used during the two phase commit testing process. The port number provides the starting port number and the number of servers provides the total number of sequentially numbered ports to be used. In the example of the user has configured the two phase commit test module to test two phase commit process using three heterogeneous resource managers on three different application servers starting with port . Thus this identifies the ports to be used as ports and .

A first widget allows the user to submit the displayed configuration to initiate the testing process and eventually get the results of the testing process. A second widget allows the user to reset all of the fields and . The configuration of the user interface web service client shown in is only one example for the purposes of illustration and is not meant to limit the present invention.

Also Policy Sets of type WS Transaction are attached to the service providers and the service clients to enable the web services to participate in atomic transactions. The Transaction context propagates across the web service calls so that all of the transactions become a part of one global transaction. In this embodiment a wsimport tool generates the web service artifacts for the JAX WS web service clients and a wsgen tool generates the web service artifacts to enable a service endpoint to be called by a web service client in the JAX WS runtime. The input to the wsgen tool is a java implementation class with WebService annotation of javax.jws.WebService. The web service endpoint interface is specified in the annotation of the implementation class which defines the public method that the web service client calls. The methods in the endpoint interface are annotated with WebMethod. The input and output parameters of the methods are JAXB compatible.

Based on the selection of the sequence from the web interface the user interface web service client issues a web service call to the first component from the selection. In the example of the first selection was DB2 WebService. The web service calls its respective EJB which connects to the resource manager . As discussed above the EJB is defined as TX REQUIRED and starts the global transaction. The global transaction context is propagated to the rest of the web services which have WS Transaction policy sets enabled. Once connected to the resource manager the EJB performs its business logic utilizing the services of the resource manager .

Data validation is then performed. For example the transaction manager associated with the application server requests a PREPARE command and a CONFIRM command to be confirmed by the resource manager to verify that the operation was successful. The data validation information can then be sent to the two phase commit module or aggregated with data validation from subsequent transactions at the other servers. The aggregated data can then be sent to the two phase commit test module . The EJB becomes a web service client and then issues a call to the next web service in the sequence received from the user. The test manager then performs a checksum type validation back at the client to make sure all transactions within the global transaction ran successfully.

The EJB then becomes a web service client and issues a call to the next web service in the sequence received from the user. In this example the web service requires the CICS resource manager and a pause which suspends the enlisted transaction of the global transaction . This allows precise failover testing to be performed i.e. failing a specific system where the suspended transaction is located . The two phase commit test module in this situation determines whether a unit of recovery properly re dispatches on a recovery server. Also if the error is non recoverable the two phase commit test module ensures that the environment being tested properly performs a rollback of all services within the atomic transaction.

The error recovery procedure is shown in more detail in . In this example the user interface web service client calls a web service on System that calls an EJB that calls its respective resource manager . The EJB performs its business logic and proceeds to initiate the next transaction by calling the next web service on System . This web service calls its EJB which in turn calls its resource manager and performs the requested service. During the process of this transaction System goes down and the transaction becomes a Unit of Recovery UOR and the UOR is shifted to another intact system for recovery. In this example the UOR is completed on System . All the application servers are registered to a workload manager for HighAvailability. When a system does down another intact system is chosen by the workload manager to handle the UOR. The next element enlisted in the global transaction then continues on System .

In one embodiment there are two modes of recovery depending upon which subsystem detects an outage. When a peer restart and recovery manager detects a system outage the unit of work becomes a unit of recovery and the manager shifts the unit of recovery to a servant that it initializes on a still viable functioning system for the sole purpose of completing the unit of recovery then the servant ends. If the HA recovery subsystem detects the outage the unit of work is shifted to another existing server instance in the cluster.

Returning to after the pause the transaction resumes e.g. a restart processes is performed to completion the EJB becomes a web service client and calls the next web service . This process continues until reaching the end of the sequence submitted by the user. The restart process in one embodiment is performed by a separate application tool that targets the paused application thread in the target server and resumes its execution from the paused state.

The validation data from each transaction hop can then be analyzed by the test manager to determine whether all transactions within the global transaction ran successfully or whether proper rollback procedures were performed. The results of the two phase commit test are then displayed.

Accordingly the two phased commit testing system of the present invention allows various heterogeneous resource managers to be enlisted in a global transaction comprising chained superior subordinate requests across multiple JAX WS web service calls. The call chaining can occur across Remote Method Invocation over Internet Inter Orb Protocol RMI IIOP calls between EJBs in a server as client configuration. The global transaction comprising these various chaining calls can be tested across various systems to ensure that they run successfully or that recovery operations are properly performed. In preferred embodiments the user can dynamically configure combinations and sequences of chaining requests for the various resource managers and can implement a pause function within a test sequence for enabling precise failover testing to be performed.

The two phase commit test module at step is invoked with the data submitted by the user. The two phase commit test module at step performs the first web service based on the data entered by the user. In particular the two phase commit test module when invoked acts as a web service client to invoke the first web service call. The control then flows to step of . Turning now to at step the EJB client at the service endpoint is given control of the transaction process. The EJB client at step calls the first EJB .

The EJB at step initiates the global transaction. The EJB at step enlists the first resource manager in the sequence given by the user. If any pause request exists for this transaction it is performed at step . If so data associated with the paused transaction is collected at step and then the processing is resumed. As discussed above the pause transaction allows a failure to be tested to determine if recovery operations perform successfully. The EJB at step becomes a web service client. Upon return completion of the transaction status data at step is collected and chained into a response object. As discussed above this status data reflects whether or not the two phase commit process e.g. prepare commit or recovery was successful for that particular transaction. The response object at step is returned to the caller which is the two phase commit test module in this example. At step the next service endpoint is then called. The control then flows to step of .

At step the web service associated with the next transaction becomes a subordinate transaction within the global transaction. The EJB client service endpoint at step class the next EJB in the sequence. The EJB at step enlists the next resource manager in the sequence given by the user. If any pause request exists for this transaction it is performed at step . Any data associated with the paused transaction is also collected at step and the process is resumed. The EJB at step becomes a web service client. Upon return completion of the transaction status data at step is collected and chained into a response object. The response object at step is returned to the caller which is the two phase commit test module in this example.

At step the EJB determines if the end of the sequence chain has been reached. If the result of this determination is negative the control flows to step of . If the result of this determination is positive a return call is issued to the two phase commit test client at step . In this embodiment the Test Client is returned to by way of the return at . The caller is returned to after calling the next service in the chain. That is the tool keeps chaining services and when it reaches the last service in the chain it recurses back through the chain returning to the callers and the returns start happening after reaching the end of the chain. The Two Phase commit test client is retuned to by returning from the original first e.g. Service calls Service which calls Service which calls Service and then Service returns to Service which returns to Service which returns to Service which returns to the test client .

The control then flows to step of . The test manager at step gathers the response objects created after each transaction of the global transaction. The test manager at step analyzes the status data of the response objects and presents the results to the user at step . The user or an automated system in further embodiments at step validates that the requested sequence completed successfully or that a recovery operation was performed properly. The control flow then exits at step .

The information processing system includes a computer . The computer has a processor that is connected to a main memory mass storage interface terminal interface and network adapter hardware . A system bus interconnects these system components. The mass storage interface is used to connect mass storage devices such as data storage device to the information processing system . One example of a data storage device is a computer readable medium such as a disk drive which may be used to store data to and read data from a CD or a floppy diskette not shown . Another type of data storage device is a hard disk drive storage device configured to support for example NTFS type file system operations.

The main memory in this exemplary embodiment comprises the two phase commit test module and its components. Although illustrated as concurrently resident in the main memory respective components of the main memory are not required to be completely resident in the main memory at all times or even at the same time. In this embodiment the information processing system utilizes conventional virtual addressing mechanisms to allow programs to behave as if they have access to a large single storage entity referred to herein as a computer system memory instead of access to multiple smaller storage entities such as the main memory and data storage device . The term computer system memory generically refers to the entire virtual memory of the information processing system .

Although only one CPU is illustrated for computer computer systems with multiple CPUs can be used equally effectively. This embodiment of the present invention further incorporates interfaces that each includes separate fully programmed microprocessors that are used to off load processing from the CPU . Terminal interface is used to directly connect one or more terminals to computer to provide a user interface to the computer . These terminals which are able to be non intelligent or fully programmable workstations are used to allow system administrators and users to communicate with the information processing system . The terminal is also able to be a user interface and peripheral devices that are connected to computer and controlled by terminal interface hardware included in the terminal I F that includes video adapters and interfaces for keyboards pointing devices and the like.

An operating system included in the main memory is a suitable multitasking operating system such as the IBM z OS Linux UNIX Windows XP or Windows Server 2001 operating system. Further embodiments of the present invention are able to use any other suitable operating system. Some embodiments of the present invention utilize architectures such as an object oriented framework mechanism that allows instructions of the components of operating system to be executed on any processor located within the information processing system . The network adapter hardware is used to provide an interface to a network . Embodiments of the present invention are able to be adapted to work with any data communications connections including present day analog and or digital techniques or via a future networking mechanism.

Although the exemplary embodiments of the present invention are described in the context of a fully functional computer system further embodiments are capable of being distributed as a program product for example via CD or DVD CD ROM or other form of recordable media.

While there has been illustrated and described what are presently considered to be the preferred embodiments of the present invention it will be understood by those skilled in the art that various other modifications may be made and equivalents may be substituted without departing from the true scope of the present invention. Additionally many modifications may be made to adapt a particular situation to the teachings of the present invention without departing from the central inventive concept described herein. Furthermore an embodiment of the present invention may not include all of the features described above. Therefore it is intended that the present invention not be limited to the particular embodiments disclosed but that the invention include all embodiments falling within the scope of the appended claims.

