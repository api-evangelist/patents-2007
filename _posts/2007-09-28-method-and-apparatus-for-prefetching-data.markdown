---

title: Method and apparatus for prefetching data
abstract: A method and apparatus for pre-fetching data to be streamed from a data storage to a user computer comprising the steps of determining information regarding a file type of a data file, establishing pre-fetch parameters in response to the information, accessing the data file and pre-fetching data blocks from the data file in accordance with the pre-fetch parameters is described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09323680&OS=09323680&RS=09323680
owner: Veritas US IP Holdings LLC
number: 09323680
owner_city: Mountain View
owner_country: US
publication_date: 20070928
---
Embodiments of the present invention generally relate to prefetching computer files and more specifically to a method and apparatus for prefetching data for transmission to a user computer.

Many users of the Internet subscribe to services such as Storage On Demand to augment the needs of data storage. In such services users can obtain storage resources by purchasing the services of the online storage service provider. Most of the user s data stored in the online storage pools is multimedia data for example movies pictures and music files.

When multimedia files are played they are streamed from the storage resources to the application for example Windows Media Player running on the user s computer. As the multimedia data file is accessed remotely through a computer network for example the Internet or a LAN and the like latency in receiving the file contents may negatively affect the user s experience. Latency may be caused by a limited connection speed available local storage caching methods and similar reasons. Such latency causes discontinuities in the reception of data and gaps in presentation caused by these discontinuities are often experienced by the user. Conventional pre fetching methods and caching methods provided by conventional file systems have been insufficient to remedy such discontinuities. These methods also create undo transmission bandwidth burden upon the network. Inefficient caching and pre fetching methods do not provide the user with a seamless data access for example a seamless music or movie playing experience.

Accordingly there exists a need for a method and apparatus that improves the performance of data access from a data storage to a user computer.

Embodiments of the present invention comprise a method and apparatus for pre fetching data. In one embodiment a method and apparatus for pre fetching data to be streamed from a data storage to a user computer comprises determining information regarding a data file establishing pre fetch parameters in response to the information accessing the data file and pre fetching data blocks from the data file in accordance with the pre fetch parameters.

While the invention is described herein by way of example using several embodiments and illustrative drawings those skilled in the art will recognize that the invention is not limited to the embodiments of drawing or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modification equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. Further the word a means at least one and the word plurality means one or more unless otherwise mentioned.

The memory may be random access memory read only memory for example PROM EPROM EEPROM and the like removable storage such as optical disk tape drive and the like hard disk storage flash drives and the like generally known in the art. The memory further includes a file system a pre fetching module and multimedia files . In one embodiment the pre fetching module e.g. a caching pre fetching layer is included within the file system .

The computer is coupled to the storage device via a computer network . The computer network may be a Local Area Network LAN Wide Area Network WAN or any such communications network known in the art for communicating data from one computer to another.

The computer comprises a CPU a memory and support circuits . The CPU may include a microprocessor instruction set processor or similar processor known in the art. The memory may be random access memory read only memory for example PROM EPROM EEPROM and the like removable storage such as optical disk tape drive and the like hard disk storage flash drives and the like generally known in the art. The memory further comprises an application for example Windows Media Player and an Application Programming Interface API for example Windows API or WinAPI. Generally the application programming interface API is a source code interface that an application such the application uses to communicate with a control program such as operating system data base management system DBMS communication protocols among various others. The memory also includes pre fetched data for storing data pre fetched from the storage device through the API . The pre fetched data may include a complete data file or one or more data blocks of the specified data file. The support circuits may include conventional cache power supplies clock circuits data registers I O circuitry and the like to facilitate operation of the computer . The support circuit and the memory are coupled to the CPU . Those skilled in the art will appreciate that the hardware depicted in the may vary from one computer system to another. For example other peripheral devices such as optical disk drives graphics card data storage devices various other input devices and the like may also be used in addition to or in place of the hardware depicted.

According to one embodiment the application when executed on the computer communicates with the file system within the storage device through the API . The application provides the necessary information related to the file type and or file extension type for example .jpg .avi and the like to the file system through the API . In another embodiment the API instructs the pre fetching module included as the pre fetching layer of the file system to pre fetch and cache the correct files or blocks of data to lessen or eliminate discontinuities when accessing the one or more files from the multimedia files . In one embodiment the application provides the necessary information related to a total number of files e.g. a play list an order in which the files are executed e.g. a slide show and or their respective file extension type to the file system through the API . The API also communicates with the pre fetching module regarding pre fetching parameters that control various aspects of the pre fetching process.

According to one or more embodiments the pre fetch parameters may be established in response to information regarding a download speed or a block fetching speed a file extension type metadata characteristics of the file type heuristic learning based on usage of the file instructions from an API e.g. the API as used by the application and the like as well as any combination of such approaches. In one embodiment the pre fetch parameters include pre fetching in alphabetical order numerical order an order according to a play list or an order following instructions from the API.

The metadata contains the information related to a particular data file and is used to facilitate the understanding use and management of data. Metadata varies with the type of data and context of use. For example metadata about a computer file may include the name of the file the type of file file access dates and times and the name of the data administrator. The heuristic pertains to the process of gaining knowledge or some desired result by intelligent guess work rather than following a pre established formula.

According to one or more embodiments of the present invention the pre fetch parameters are established based on information regarding the contents of the data file or metadata characteristics of the specific file type e.g. underlying structure of the file type . Based on the information and or the metadata characteristics the pre caching module determines which and how many data blocks to pre fetch. For example .avi files have a known structure and the application within the computer performs the following steps for accessing the .avi file e.g. within the storage device for reading 1. open the block that contains a pointer to a pointer block open the pointer block and start playing the movie at the first block identified by the pointer block. The pre fetching module within the file system establishes pre fetch parameters based on this structure of the .avi file and pre fetches data blocks from the .avi file in accordance with the pre fetch parameters. In one embodiment the pre fetching module uses the structure for the .avi for pre fetching data blocks from another .avi at a later time e.g. the next likely .avi file requested by the application . In either embodiment the pre fetched data blocks are ready for execution by the application before the pre fetched data blocks are needed e.g. request by the application . Then the pre fetched data blocks are consumed by the application e.g. displayed as streaming media .

Pre fetching techniques may vary according to the file extension type. In cases where multiple caching techniques are applicable for the specific file extension type the pre fetching module picks one of the techniques and records the success or failure of the particular pre fetching inside some meta data field of the file system . In cases of failure the subsequent read accesses for the same file can be performed differently using different techniques while in the cases of success the subsequent read access is performed in the same manner. Success is defined as the situation in which the file blocks are pre fetched such that no read operation has to wait for the download.

In certain cases due to a lack of prior knowledge of the underlying structure of the specific file extension type the pre fetching performed by the caching pre fetching layer may not be effective. In such cases the caching layer analyzes the read access pattern for the specific file extension type. While opening the same data file or another data file of the same type at a later time proper and effective pre fetching is enabled for the pre fetching module based on the read access pattern.

According to another embodiment of the invention the pre fetching module predicts the next file or data block likely to be accessed by the application based on past access patterns. Examining the past access pattern helps the file system to make a prediction the next likely data file or data block. Based on this prediction the pre fetching module e.g. included within the caching layer of the file system pre fetches data blocks from the data file. The pre fetching module then updates the prediction to reflect recent accesses. For example in cases where the application is using a play list the contents of the play list is examined by the pre fetching module so that proper pre fetching can be performed at file boundaries.

Occasionally media files are accessed sequentially e.g. alphabetical order chronological order numerical order and the like . Accordingly the blocks associated with the particular media file are pre fetched sequentially based on the arrangement of the data blocks of the particular media file within the file system and the memory . For example alphabetical based pre fetching is utilized to pre fetch the data files in alphabetical order of their respective file names. Alphabetical based pre fetching may be advantageous when the application executes e.g. views plays and the like the data files in alphabetical order such as a collection of images videos or audio files. In one embodiment alphabetical based pre fetching may sort the file names by their American Standard Code for Information Interchange ASCII codes. That is if 001.jpg is viewed first then it is likely that 002.jpg is viewed next and so on and forth.

According to another embodiment of the invention the pre fetching module determines certain factors in order to compute a number of data blocks to pre fetch i.e. read ahead from memory pre fetches the number of data blocks and then releases one or more data blocks e.g. pre fetched and non pre fetched of the data file read from the memory e.g. transmits the pre fetched data blocks to the application . The factors may include effective download speed A bit rate size of media B and length of play C . From these three values an amount X of data blocks to read ahead needed before releasing any of the data blocks of the data file is determined. X can be determined as X B A C . X is then multiplied by a safety factor to ensure seamless experience. If X

The application cooperates with the API in instructing the file system to pre fetch data from multimedia files . The pre fetched data blocks are communicated to the computer and stored cached in the pre fetched data included in the memory . The application collects and reads the pre fetched multimedia data from the pre fetched data in lieu of receiving a data stream directly from the computer network .

According to another embodiment of the invention the pre fetched data blocks once consumed by the application may be discarded when pure sequential access is used by the application . This helps in keeping the cache clean. However in some cases a certain amount of blocks may be kept in the cache e.g. in memory to allow a user to scroll back a few seconds in the movie or music file. Such caching provides for better responsiveness of the application.

In one embodiment the application is configured to execute e.g. play files in a play list. The play list may include a catalogue of music tracks that helps the user in organizing and managing various music files on the application for example the application installed on the computer . The tracks included in the play list are required to be played in some specified order. The application sends this information to the file system for example the file system through the API . Based on the information received from the API the file system pre fetches the tracks according to one of the various embodiments of pre fetching the data as disclosed. After pre fetching the data related to the tracks the tracks are cached in the memory in the computer e.g. cached in the pre fetched data . While the application plays a particular track from the play list the API instructs the pre fetching module within the file system to pre fetch the file containing the next track as specified in the play list from the storage device and store the pre fetched file in the pre fetched data for faster access. Before the application finishes playing the first track the API instructs the file system to pre fetch the file containing the next track stores the file in the pre fetched data and provides the track to the application . The pre fetching module helps the application avoid jerks and discontinuities in executing the pre fetched files such as the pre fetched music files thereby creating a seamless user experience.

At step a determination is made as to whether to perform file type extension based pre fetching. If the file type extension based pre fetching is to be performed option YES then the method proceeds to step at which a determination is made as to whether to the data file has a known structure as described above. If the data file does not have a known structure option NO then the method proceeds to step . At step a read access pattern for the file type extension is analyzed as described above. If the data file has a known structure e.g. an .avi file option YES then the method proceeds to step . At step at least one of the contents or metadata of the data file is analyzed. If the file type extension based pre fetching is not to be performed option NO then the method proceeds to step .

At step a determination is made as to whether to perform file usage pattern based pre fetching If the file usage pattern based pre fetching is to be performed option YES then the method proceeds to step where a usage pattern of the data file is examined. As a result the pre fetching module within the file system can now predict the next data file and or data block likely to be pre fetched for the application from the past usage patterns. If the file usage pattern based pre fetching is not to be performed option NO the method proceeds to step .

At step a determination is made as to whether to compute a number of data blocks from the data file to read ahead. If the number of data blocks to read ahead is to be computed option YES then the method proceeds to step at which the number of data blocks is computed using certain factors as described above. If the number of data blocks to read ahead is not to be computed option NO then the method proceeds to step .

At step a determination is made as to whether to perform API based pre fetching. If the API based pre fetching is to be performed option YES then the method proceeds to step . At step instructions from the application e.g. application through the API e.g. the API is processed. In one embodiment the pre fetching module processes the instructions as part of the information needed to establish the pre fetch parameters. If the API based pre fetching is not to be performed option NO then the method proceeds to step .

At step the pre fetch parameters are established based on the information gathered from the steps above. For example if the information shows that the data file is one picture from an album then the pre fetch parameters would instruct the pre fetching module to pre fetch the picture files in alphabetical order because such files are normally viewed alphabetically. As another example if the information provides the number of data blocks to read ahead for a movie file then the pre fetch parameters would instruct the pre fetching module to pre fetch at least that number of data blocks in order to provide a seamless playing experience for that movie file. The method ends at step .

Those skilled in the art will appreciate that various embodiments of the present invention are not only applicable to online storage but may be used in various scenarios in which multimedia files are stored on a storage device having a slower access speed than the local disk drive. The local disk drive may include one or more storage devices coupled to the user s computer. For example embodiments of the present invention may be applied advantageously to any file stored in a hierarchical system. The blocks in the file may be pre fetched from the slower media to the faster media.

Further although various embodiments of the present invention have been illustrated with respect to multimedia files those skilled in the art will readily appreciate the application of the various embodiments to other files and all such embodiments are also included within the scope and spirit of the invention defined by the appended claims.

Certain embodiments of the invention may be used advantageously in Online Video on Demand like services where an API may access more data from pre fetch cache located in the remote storage. Moreover since online storage is becoming more and more prevalent various embodiments as discussed herein provide for creating a seamless user experience while accessing online storages.

The present invention in its various embodiments advantageously provides for pre fetching the data where the data is streamed from data storage to a user computer in an effective and fast manner. Various embodiments of the present invention advantageously provide for methods and systems to establish pre fetch parameters based on the information related to the file type.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

