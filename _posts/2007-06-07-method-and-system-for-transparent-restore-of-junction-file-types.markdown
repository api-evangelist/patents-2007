---

title: Method and system for transparent restore of junction file types
abstract: A method and system for backing up and restoring data in a file system that includes junctions is provided. In a backup operation, a junction is encoded as a symbolic link (“symlink”) directive, and sent with a sequential image data stream in the backup operation and written to a tape or disk. In a restore operation, when the encoded symlink directive is encountered after data is read from the tape, the symlink is decoded by an administrator to obtain the embedded junction information contained in the symlink directive. The administrator can then recreate the junction using the information. The junction information is thereby transmitted as part of the backup and restore operation while remaining transparent to third party software performing the backup and restore processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412896&OS=08412896&RS=08412896
owner: NetApp, Inc.
number: 08412896
owner_city: Sunnyvale
owner_country: US
publication_date: 20070607
---
The present application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 914 504 which was filed on Apr. 27 2007 by Chellappa et al. for a METHOD AND SYSTEM FOR TRANSPARENT RESTORE OF JUNCTION FILE TYPES and is hereby incorporated by reference in its entirety.

This application is related to commonly owned U.S. patent application Ser. No. 11 680 255 filed on Feb. 28 2007 of Eisler et al. for a SYSTEM AND METHOD FOR ENABLING A DATA CONTAINER TO APPEAR IN A PLURALITY OF LOCATIONS IN A SUPER NAMESPACE which is incorporated by reference herein in its entirety.

The present invention relates to storage systems and more particularly to backup and restore of information in such systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network. In response the storage system may return a data container handle for use by the client to access a data container served by the system.

A plurality of storage systems nodes may be interconnected as a cluster to provide a storage system environment configured to service many clients. Each storage system in the cluster may be configured to service one or more volumes wherein each volume stores one or more data containers. Yet often a large number of data access requests issued by the clients may be directed to a small number of data containers serviced by a particular storage system of the cluster. A solution to such a problem is to distribute the volumes serviced by the particular storage system among all of the storage systems of the cluster. This in turn distributes the data access requests along with the processing resources needed to service such requests among all of the storage systems thereby reducing the individual processing load on each storage system.

In addition to distributing the volumes served by a storage system among the storage systems of the cluster an administrator may relocate the volumes or data containers stored on the volumes among any of the storage systems in the cluster. However it is desirable to allow a client to still access e.g. the relocated data container using the data container handle. In order to ensure that relocation of the data container is transparent to the client the administrator may employ a redirection identifier that indicates to the file system that the requested data container is not stored at the original storage location identified by the data container handle contained in the client access request.

An example of a redirection identifier is a junction that is associated with a storage location and that indicates that data is not stored at the originally used location but is available at another storage location. Essentially the junction provides a level of indirection between a storage system and a client accessing a data container served by the system. Junctions are described in further detail in commonly owned U.S. patent application Ser. No. 11 676 894 of Eisler et al. for a SYSTEM AND METHOD FOR ENABLING A DATA CONTAINER TO APPEAR IN A PLURALITY OF LOCATIONS IN A SUPER NAMESPACE which was filed on Feb. 20 2007 the contents of which are incorporated herein by reference in entirety .

Another example of a redirection identifier that may provide a level of indirection with respect to a data container served by a storage system is a symbolic link. A symbolic link symlink is a Unix structure that instead of representing a name of a data container such as a file or directory on a Unix platform provides a path descriptor such as a path name to that data container. Symlinks are useful because of the flexibility they provide with respect to the locations of data containers on a storage system. In other words a client can be informed that its data is provided at a location specified by a symlink and an administrator when reconfiguring the location of that data may easily change the content path descriptor for that symlink.

A recovery feature provided by the clustered storage system is tape backup for data served by the cluster. Here the tape is used to restore data that was lost due to a failure in the cluster. Alternatively the tape backup information can be used on a second file system to provide a mirroring function for redundancy backup for volumes served by a first file system. Thus information from the first file system may be retrieved and written onto a tape using a backup program the backup process is sometimes referred to as a dump . Subsequently the information can be read restored from the tape by a reader and written onto disks associated with the second file system. The industry standard for tape based dump and restores are provided in the Network Data Management Protocol NDMP which is an open source control protocol for enterprise wide network based backup. The NDMP architecture allows network attached storage vendors to backup data of storage devices onto tape drives and tape libraries. The NDMP standard is set forth in an Internet Draft of the Network Working Group of the Internet Engineering Task Force IETF September 1997 of Hitz et al. the contents of which are incorporated herein by reference in entirety .

The NDMP standard provides a messaging protocol for performing a backup operation using an NDMP client application which controls an NDMP server. The protocol includes a set of XDR encoded messages that are exchanged over a bi directional e.g. TCP IP connection and are used to control and monitor the state of the NDMP server and to collect detailed information about the data that is backed up. The storage system which may be a Unix server typically executes an NDMP server application. Data is backed up from the storage system to either a local tape drive or to a backup device on a remote storage system. The data is formatted into an image stream by a suitable program such the Berkeley Software Distribution BSD format which is a standard format created as a derivative work by the University of California as will be understood by those skilled in the art known as Berkeley Software Distribution BSD which is also sometimes referred to as Berkeley Unix it is a Unix derivative distributed by the University of California starting in the 1970s. The name is also used collectively for various more recent descendants of such distributions.

During the backup the NDMP server acts as a data server which reads data from disk and generates an image stream in the specified backup format. More specifically at the start of each tape a tape start header is created and it is followed by one or more additional headers and data representing the directories from the lowest inode number to the highest for example. These directories provide the names for the files that follow. After the directories one or more headers and data representing the non directory files such as regular files symlinks device files and the like are recorded from lowest inode number to highest. At the end one or more tape headers stating tape end is provided. During the restore the data server reads the NDMP data stream from the tape and restores it back to a disk.

The industry standard NDMP protocol does not specifically provide for transfer of information related to junctions. In other words it is not part of the known standard to back up and restore junction file type information. There has been no known way of handling junction file types in backup and restore processes in the standard. Thus if a junction is encountered as part of the serialized data stream in a restore operation the restore operation itself may fail because the junction information is not recognized. To rewrite code to place such functionality into the standard for recognition of the junction file type would be disadvantageous because it may force third party vendors to purchase or rewrite software code to accommodate sending junction information during dump and restore activities. Accordingly there remains a need for a method and system for backup and restore of junction information in a backup and restore operation.

These and other disadvantages of prior techniques have been overcome by the method and system of the present invention which provides a storage system having a backup and restore process that sends junction information in such a manner that it can be later restored. Specifically the invention provides a backup process that obtains junction information from a data structure such as a junction table. The junction information obtained from the junction table is then encoded by the backup process and is sent transparently in the backup data stream. The junction information can be later restored and used in response to data access requests in the storage system.

More specifically in accordance with one implementation when a backup operation of data on volumes in a cluster is to be performed a novel backup process running on a storage system or node in the cluster that hosts the volumes controls the backup operation. The backup process interfaces through a cluster switching fabric or other connection system with a suitable NDMP server application acting as a tape server for the backup. Typically the NDMP server operates on a Unix platform. During the backup process an NDMP connection is set up between the backup process and the NDMP server illustratively over the network connection and the information on the volumes is serialized in an appropriate format such as Berkeley Software Distribution BSD format which is a standard format created as a derivative work by the University of California which is referred to herein as BSD format commonly used by an NDMP server. The data is then packetized for transfer over the NDMP connection to the server which writes the packets of information to tape for purposes of backup or mirroring for example.

In order to serialize the data the information on disks comprising the volumes of a file system e.g. mode data structures disk blocks etc. executing on the node is scanned and formatted into a sequential image stream. In accordance with the invention when a junction file type is detected in an inode data structure the file system is configured to extract information from the inode data structure and use that information to index into a junction table of a storage location repository to retrieve junction information. This junction information is located in an appropriate junction table entry of the junction table. Further in accordance the invention the junction information is retrieved from the junction table and encoded as a symbolic link symlink .

More specifically a symlink directive is constructed which contains as a path descriptor the junction information defining the junction which is part of the file system to be backed up on tape. A symlink directive typically includes a path name. When encoded with junction information which includes a path name the directive is recognized as a Unix structure by the NDMP server and is thus encoded into BSD format passed along with the sequential image stream as part of the backup process and is written to the tape in that format. When the NDMP tape server encounters the symlink directive the server encodes the symlink directive into the BSD format or other format being used and writes it to the tape. Sending the junction information in the image stream absent this symlink encoding may cause the NDMP server to fail to recognize the junction data which may result in an error that could delay or suspend the backup or the restore process.

Subsequently when the data is restored from the tape the sequential image is read back. The tape server decodes the symlink from the BSD format and sends it to the restored disk. When a restore process running on the file system detects the decoded symlink command a notice is sent to an administrator. The administrator managing the restore process becomes aware of the symlink and parses the symlink directive to retrieve the path descriptor. The path descriptor includes the junction information which the administrator can thus use to recreate the junction in the file system that is being restored. Accordingly the junction information is transferred to the tape in the backup process and retrieved from the tape in a restore process in a manner that is transparent to the NDMP server s .

The present invention provides a storage system having a backup and restore process that sends junction information in such a manner that it can be later restored. Specifically the invention provides a backup process that obtains junction information from a data structure such as a junction table. The junction information retrieved from the junction table is then encoded by the backup process and is inserted into the backup data stream. The junction information can later be restored and used in response to data access requests in the storage system.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the connection system . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named data containers such as directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures such as symlink translation table . The symlink translation table may be maintained if it is desired to store symlink information for performing the functions of the present invention or to provide a technique for utilizing a symlink to provide a further level of indirection in the storage system. Further details of a technique for utilizing a symlink in this manner are provided in commonly owned U.S. Pat. No. 6 968 345 of Muhlestein which issued on Nov. 22 2005 the contents of which are incorporated herein by reference in entirety . The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of data containers such as blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS . To that end the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements processes such as a redirection process which includes one or more computer readable instructions that manage redirection identifiers of storage locations or volumes as described above. Within the clustered storage system multiple volumes may be served by a single D module or multiple volumes may be served among multiple D modules. For example volumes distributed among multiple D modules may be implemented with striped volumes of data e.g. round robin allocation of data among the striped volumes. Methods of distributing multiple volumes among D modules or multiple volumes sharing a single D module are possible as long as the volumes include redirection identifiers. These redirection identifiers are referred to herein as junctions. Junctions redirect data access requests when the data is not found in a particular volume. The redirection process manages the redirection identifiers by interfacing with management commands issued by an administrator at a management station . For example the administrator can enter a command to create a redirection identifier for a particular volume either through a graphical user interface GUI or through a command line interface CLI or the like.

In addition to the redirection process and other processes described herein the file system also includes a process for managing a tape backup and a process for managing a restore of data . The backup process and the restore process illustratively implement inter alia the Network Data Management Protocol NDMP as described and incorporated herein with the addition of program instructions including a symlink process that comprises one or more computer readable instructions for generating symlink directives in connection with performing the backup and restore of junction file types in accordance with the present invention.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify data containers such as files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A data container handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a data container file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the connection system and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the connection system .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Patent Application Publication No. US 2002 0116593.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an inode number field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with this data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an exemplary inode data structure that includes a meta data section and an inode number and a data section . The information stored in the meta data section of each inode describes a data container e.g. a file and as such includes the type e.g. regular directory vdisk junction of file its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file.

The meta data section also includes a generation number gen no which illustratively is a monotonically increasing number adapted for use in a variety of embodiments. In one exemplary embodiment the inode number of a junction type inode is combined with the generation number to form a multi bit e.g. a 32 bit field that is used to access an entry of a junction table described further herein. However other exemplary embodiments may use any size for the bit field as long as the field is capable of storing information regarding the junction. Further the inode includes the data section . Specifically the data section may include file system data or pointers the latter referencing 4 kB data blocks on a disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks.

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit not shown . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using a dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998 the contents of which are incorporated herein by reference in entirety .

The junction is a redirection identifier associated with a storage location indicating that a data container is not stored at the storage location where the data container is originally sought but is available at some other storage location. A storage location repository includes the location information of the data container such as a volume. Junctions are mounted during volume creation by the implementation of a management command from a CLI GUI or the like. For example the command may be create a volume and mount it on the pathname a b c. The pathname a b c indicates that the directory names are parent directory a followed by sub directory b. The last component c is a junction. The new volume is created on an aggregate. The new volume identification and the junction inode information are recorded in a storage location repository.

The management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database. Specifically the VLDB process and the RDB cooperate to provide a storage location repository that includes e.g. a junction table . It should be appreciated that separation of the VLDB process and the RDB is purely exemplary. Accordingly in another exemplary embodiment the storage location repository may be implemented as a VLDB having an integrated database functioning as a persistent object store. Messages may be sent via an administrator interface which may be operated on a node management station or client . Management tools may be used to create modify and check inconsistencies of the entries of the storage location repository . Such exemplary tools are useful for maintaining the replicated database within the cluster thus avoiding or preventing data inconsistencies within the storage system repository.

In an exemplary embodiment the N module of each node accesses configuration table to obtain information that maps volume identifiers to a D module that owns services a data container within the cluster. The configuration table illustratively functions as a cache to store frequently accessed VLDB information. The VLDB is capable of tracking the locations of volumes and aggregates of nodes . Specifically the VLDB includes a plurality of entries which in turn provides the contents the configuration table . Among other things the VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster.

The VLDB illustratively implements a RPC interface e.g. an ONC RPC interface which allows an N Module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N Module sends an RPC to a VLDB process. In response the VLDB process returns to the N Module the appropriate mapping information including an ID of the D Module that owns the data container. The N Module caches the information in its configuration table and uses the D Module ID to forward the incoming request to the appropriate D module servicing the requested data container. All functions and communication between the N Module and D Module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications.

Specifically upon receipt of the data access request the N module examines the VLDB to determine the location of a volume that contains the file identified in the request. Assume the file is originally contained in a volume located at path z1. Illustratively the VLDB identifies volume C as the volume that contains z1 and in turn identifies volume C s location as D module . The N module then forwards the access request to the appropriate D module e.g. D module and the file system executing on D module retrieves the inodes for z2 from volume C . Upon examining the inode for z2 the file system executing on D module encounters a junction .

As noted the junction is a type of inode that functions as a redirection identifier associated with a storage location to indicate that the data is not stored at the originally used location but is available at some other storage location. Junctions are generally created during volume creation and or administrative reorganization by the invocation of a management command from a CLI GUI or the like issued by the administrator. The command in turn may create a junction type inode and initiate the storage of volume identification and other information relating to the junction in the storage location repository .

Since the junction is an indication that data is located elsewhere the VLDB is once more examined. Specifically the filehandle of volume C is returned after encountering the junction type in order to use the filehandle to look up the appropriate pathname in the junction table. It should be appreciated that in some exemplary embodiments the next volume that may contain the sought for data may be stored on another volume of the D module . In yet other exemplary embodiments the sought for data may reside on a volume of a different D module e.g. D module . Thus the file system i.e. the redirection process of the file system sends the request to the N blade which in turn examines the VLDB to determine the new location of the data. Specifically the redirection process combines the inode number of the junction type inode with the generation number also from the inode to form an index into the junction table of the storage location repository as illustrated in .

Upon examining the junction table of the VLDB the redirection process essentially redirects the access request via the cluster switching fabric to the D module servicing volume B . Again the file system executing on the D module retrieves and examines the inode for the requested file. The inode contains the inode number and the generation number as well as the type field which in the example is a junction. This is also illustrated in in which the volume P has inode which is used to index into the junction table and specifically the table entry .

Returning to the example of the file info.txt is found under the pathname z1 z2. By using the junction table individual volumes need not store volume identification information or maintain complex chains of redirection information. The volumes containing the junction information may be the subject of a tape backup. Thus in accordance with the present embodiment when a backup of the information on volumes such as the volumes and is to be performed the backup process running on the file system controls the backup. The backup process interfaces through either the cluster switching fabric or the connection system with a suitable NDMP server acting as a tape server for the backup. The tape server oversees a retrieval of information from the disk array associated with D module for example. During the backup process an NDMP connection is set up between the backup process of the D module and the tape server . The information from the volumes of the disk array is formed into a sequential image stream using an appropriate format such as the above cited BSD format. This image stream is decoded by the tape server and is written to the tape for purposes of backup or mirroring for example.

Further aspects of the invention may be better understood with reference to which form a flow chart of the steps of a procedure for backing up data that includes junction information in accordance with the invention. The procedure begins at step and proceeds to step in which a backup operation is initiated by the backup process running in the file system on D module for example. In step each disk in each constituent volume such as volume and is scanned. In step during the disk scan the file type field in each inode data structure is read from the disk. In step a junction type is detected in an inode data structure. The procedure then continues to step in which the inode number is obtained from the inode data structure for that junction. In step the inode number is used by the D module to obtain the junction inode as well as its generation number . In step the inode number and generation number are used to index into the correct junction table entry to retrieve junction information from the VLDB .

In step the symlink process executes one or more instructions that generate a symlink directive and encodes the junction information as a symbolic link. More specifically junction information is extracted from the junction table entry and that information is inserted as the path descriptor in the symlink directive illustratively in the following format 

As will be understood by those skilled in the art a symlink creates a symbolic link to a file. The symlink industry standard commands and error codes are set forth in The Open Group Base Specifications Issue 6 IEEE Standard 1003.1 2004 Edition which is incorporated herein by reference. As noted the symbolic link allows a file to have multiple logical names using as text in the symlink argument the path names to be linked. Here the linked text is the junction information. Illustratively this junction information included in the symlink by the symlink process is one or more of the version numbers of the junction format the inode number of the junction inode the generation number of the junction inode the volume number MSID that the junction points to and the DSID of the volume.

Notably the symbolic link can cross traverse file system boundaries. Thus the symlink directive in this instance can traverse a node in the cluster to the tape server without creating errors. Furthermore the symbolic link can be used to embed the junction information within the sequential image stream as it is sent in accordance with a backup operation such that is transparent to the backup operation itself. Thus in other words the symlink is a transparent means of transferring the junction information across the interface to the tape server and allowing it to be stored on the tape for the purposes of backup.

More specifically the symlink directive is encoded with junction information that is recognized as a Unix structure by the tape server and it is thus encoded into BSD format. This encoded symlink directive is passed along with the sequential image stream as part of the backup process and is written to the tape in step via the tape server . The backup information may also be stored on another type of storage medium such as a disk in addition to or instead of a tape. The backup operation continues until the complete image of the volume file system has been written to the tape via the tape server as in step . The procedure ends at step .

Subsequently when it is desired to restore the information stored on the tape the symlink is decoded to obtain the junction information. This can be better understood with reference to which is a flowchart of a procedure for restoring data that includes junction information in accordance with an illustrative embodiment of the present invention. The procedure begins with step and continues to step in which the restore process is invoked by an administrator at a work station . In step data is read from the tape. In step a symlink is detected. In an illustrative embodiment an administrator will most likely be aware that there are one or more junctions contained within the volume e.g. a striped volume set that is being restored so the administrator will be on notice that a symlink is contained within the sequential image stream and that the symlink may contain junction information. Thus either the administrator will check the sequential image stream for a symlink as it is read from the tape and decoded or alternatively the administrator can do a search of the text for a symlink phrase. In an alternative embodiment the restore process can be configured to detect a symlink and generate an appropriate message to notify the administrator that the symlink has been encountered so that the administrator s attention is drawn to the symlink. In accordance with step the symlink directive is parsed by either the administrator or a restore process to retrieve the junction information.

In step the junction information embedded within the symlink is used to recreate the junction using the version inode number generation number and the MSID and DSID to create a corresponding junction in the volume i.e. file system that is being restored. This information is then written to the disk and a message is sent to the appropriate VLDB allowing it to store the junction information in the appropriate entry in its junction table as in step . The procedure ends at step .

It should be understood that the present invention has the advantage that the complete volume or file system is capable of being restored even if it includes junctions which otherwise would not be recognized using the standard NDMP protocol. Thus in the illustrative embodiment the restore process can be executed by any restore program that understands the Unix based BSD dump format. This is because a restore program will transfer the symlink as part of the data and thereby no new changes are needed to allow it to restore junctions when using the industry standard NMDP protocol. In other systems a different type of redirection identifier other than symlink may be used for that purpose and it is contemplated as being within the scope of the present invention that the junction information described herein may be embedded in such other type of redirection identifier or other suitable command structure such that it may be transparently transferred to and from the tape servers as part of a backup and restore process. In other words it should be understood that suitable software commands and formats other than symlink may be used to carry the junction information as long as such commands are understood by the process that is decoding the backup data stream that is retrieved from the tape. Thus junctions can be handled in the backup and restore processes of the present invention without requiring any modifications to third party software.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

