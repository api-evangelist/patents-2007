---

title: Method and apparatus for reducing power consumption for isochronous data transfers
abstract: A method and article for reducing power consumption for isochronous data transfers are described. The method may include receiving packets of data having multimedia information with empty spaces. The packets of data may be stored in a first buffer having a first buffer size allocated for a universal serial bus processing stack. The empty spaces may be removed from the packets of data and the packets of data having the empty spaces removed may be copied to a second buffer having a second buffer size allocated for a media information processing stack. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774521&OS=07774521&RS=07774521
owner: Intel Corporation
number: 07774521
owner_city: Santa Clara
owner_country: US
publication_date: 20071228
---
A transition is taking place between analog television and digital television and digital television is becoming available on a vast array of digital devices. As digital devices continue to become more mobile power conservation in the devices becomes an increasingly important consideration. Depending upon the underlying transfer mechanisms however certain data transfers may result in increased power consumption for the device. For example in a universal serial bus USB implementation isochronous data transfers may be utilized to transmit the digital television data. Isochronous data transfers however may result in stored data that contains empty spaces resulting in inefficiencies and increased power consumption when the data is processed. Consequently there exists a substantial need for techniques to improve the power consumption for isochronous data transfers.

Various embodiments may be generally directed to a method and apparatus for reducing power consumption for isochronous data transfers. In one embodiment for example packets of data having multimedia information with empty spaces may be received and stored in a first buffer having a first buffer size allocated for a universal serial bus processing stack. The empty spaces may be removed from the packets of data and the packets of data having the empty spaces removed may be copied to a second buffer having a second buffer size allocated for a media information processing stack. In this manner the processor responsible for executing the multimedia information may more frequently enter a power conserving state and as a result reduce power consumption for the device. Other embodiments may be described and claimed.

Various embodiments may comprise one or more elements. An element may comprise any structure arranged to perform certain operations. Each element may be implemented as hardware software or any combination thereof as desired for a given set of design parameters or performance constraints. Although an embodiment may be described with a limited number of elements in a certain topology by way of example the embodiment may include more or less elements in alternate topologies as desired for a given implementation. It is worthy to note that any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment. Moreover the techniques discussed herein may be applied in various environments such as the networking environment discussed with reference to and or the computing systems discussed with reference to .

The devices may communicate with the network through wired and or wireless connections. Hence the network may be a wired and or wireless network. For example as illustrated in the wireless access point may be coupled to the network to enable other wireless capable devices such as the device for example to communicate with the network . In various embodiments the wireless access point may include traffic management capabilities. Also data communicated between the devices may be encrypted or cryptographically secured to limit unauthorized access.

The network may utilize any communication protocol such as Ethernet Fast Ethernet Gigabit Ethernet wide area network WAN fiber distributed data interface FDDI Token Ring leased line analog modem digital subscriber line DSL and its varieties such as high bit rate DSL HDSL integrated services digital network DSL IDSL etc. asynchronous transfer mode ATM cable modem and or FireWire.

Wireless communication through the network may be in accordance with one or more of the following wireless local area network WLAN wireless wide area network WWAN code division multiple access CDMA cellular radiotelephone communication systems global system for mobile communications GSM cellular radiotelephone systems North American Digital Cellular NADC cellular radiotelephone systems time division multiple access TDMA systems extended TDMA E TDMA cellular radiotelephone systems third generation partnership project 3G systems such as wide band CDMA WCDMA etc. Moreover network communication may be established by internal network interface devices e.g. present within the same physical enclosure as a computing system such as a network interface card NIC or external network interface devices e.g. having a separate physical enclosure and or power supply than the computing system to which it is coupled .

The processor may include one or more caches which may be private and or shared in various embodiments. Generally a cache stores data corresponding to original data stored elsewhere or computed earlier. To reduce memory access latency once data is stored in a cache future use may be made by accessing a cached copy rather than refetching or recomputing the original data. The cache may be any type of cache such a level 1 L1 cache a level 2 L2 cache a level 3 L 3 a mid level cache a last level cache LLC etc. to store electronic data e.g. including instructions that is utilized by one or more components of the system .

A chipset may additionally be coupled to the interconnection network . The chipset may include a memory control hub MCH . The MCH may include a memory controller that is coupled to a memory . The memory may store data e.g. including sequences of instructions that are executed by the processor or any other device in communication with components of the computing system . In various embodiments the memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM etc. Nonvolatile memory may also be utilized such as a hard disk. Additional devices may be coupled to the interconnection network such as multiple processors and or multiple system memories.

The MCH may further include a graphics interface coupled to a display device e.g. via a graphics accelerator. In various embodiments the graphics interface may be coupled to the display device via an accelerated graphics port AGP . In various embodiments the display device which for example may include a flat panel display or a cathode ray tube may be coupled to the graphics interface through for example a signal converter that translates a digital representation of an image stored in a storage device such as video memory or system memory into display signals that are interpreted and displayed by the display. The display signals produced by the display device may pass through various control devices before being interpreted by and subsequently displayed on the display device .

As shown in a hub interface may couple the MCH to an input output control hub ICH . The ICH may provide an interface to input output I O devices coupled to the computing system . The ICH may be coupled to a bus through a peripheral bridge or host controller such as a peripheral component interconnect PCI bridge a universal serial bus USB controller etc. The controller may provide a data path between the processor and peripheral devices. Other types of topologies may be utilized. Also multiple buses may be coupled to the ICH for example through multiple bridges or controllers. For example the bus may comply with the Universal Serial Bus Specification Revision 1.1 Sep. 23 1998 and or Universal Serial Bus Specification Revision 2.0 Apr. 27 2000 including subsequent amendments to either revision . Alternatively the bus may comprise other types and configurations of bus systems. Moreover other peripherals coupled to the ICH may include in various embodiments integrated drive electronics IDE or small computer system interface SCSI hard drive s USB port s a keyboard a mouse parallel port s serial port s floppy disk drive s digital output support e.g. digital video interface DVI etc.

The bus may be coupled to an audio device one or more disk drive s and a communication device which in various embodiments may be a NIC or a tuner card. Other devices may be coupled to the bus . Also various components such as the communication device may be coupled to the MCH in various embodiments. In addition the processor and the MCH may be combined to form a single chip.

Additionally the computing system may include volatile and or nonvolatile memory or storage. For example nonvolatile memory may include one or more of the following read only memory ROM programmable ROM PROM erasable PROM EPROM electrically EPROM EEPROM a disk drive e.g. a floppy disk a compact disk ROM CD ROM a digital versatile disk DVD flash memory a magneto optical disk or other types of nonvolatile machine readable media capable of storing electronic data including instructions.

The memory may include one or more of the following in various embodiments an operating system O S application device driver buffers function driver and or protocol driver . Programs and or data stored in the memory may be swapped into the disk drive as part of memory management operations. The application s may execute e.g. on the processor s to communicate one or more packets with one or more computing devices coupled to the network such as the devices of . In various embodiments a packet may be a sequence of one or more symbols and or values that may be encoded by one or more electrical signals transmitted from at least one sender to at least one receiver e.g. over a network such as the network . For example each packet may have a header A that includes various information that may be utilized in routing and or processing of the packet such as a source address a destination address packet type etc. Each packet may also have a payload B that includes the raw data or content the packet is transferring between various computing devices for example the devices of over a computer network such as the network .

In various embodiments the application may utilize the O S to communicate with various components of the system e.g. through the device driver and or function driver . For example the device driver and function driver may be used for different categories e.g. device driver may manage generic device class attributes whereas the function driver may manage device specific attributes such as USB specific commands . In various embodiments the device driver may allocate one or more buffers A through M to store packet data such as the packet payload B. One or more descriptors not shown may respectively point to the buffers . In various embodiments one or more of the buffers may be implemented as circular ring buffers. Also one or more of the buffers may correspond to contiguous memory pages in various embodiments. Furthermore a protocol driver may implement a protocol driver to process packets communicated over the network according to one or more protocols. In accordance with various embodiments as discussed herein forth reference to function driver may or may not refer to other types of drivers e.g. including device driver function driver and or protocol driver .

As illustrated in the communication device may include a network protocol layer for implementing the physical communication layer to send and receive network packets to and from remote devices over the network . The network may include any type of computer network such as those discussed with reference to . The communication device may further include a direct memory access DMA engine which may write packet data to buffers to transmit and or receive data over the network . Additionally the communication device may include a controller which may include logic such as a programmable processor for example to perform communication device related operations. In various embodiments the controller may be a MAC media access control component. The communication device may further include a memory such as any type of volatile nonvolatile memory e.g. including one or more cache s and or other memory types discussed with reference to memory .

In various embodiments the communication device may include a firmware storage device to store firmware or software that may be utilized in management of various functions performed by components of the communication device . For example the firmware may be used to configure various operations such as those discussed with reference to . The storage device may be any type of a storage device such as a non volatile storage device. For example the storage device may include one or more of the following ROM PROM EPROM EEPROM disk drive floppy disk CD ROM DVD flash memory a magneto optical disk or other types of nonvolatile machine readable media capable of storing electronic data including instructions.

In various embodiments communication device may include or comprise a USB tuner card configured to receive and process multimedia information. The tuner card may comprise a component that receives digital television signals for any of devices described in . In various embodiments the tuner card may also function as video capture card allowing the card to record multimedia information onto a hard disk. In various embodiments the tuner card may comprise a USB express card a USB mini card a USB half mini card or any other suitable USB form factor card. The tuner card may contain a receiver tuner demodulator and an analog to digital converter in various embodiments.

In various embodiments the multimedia information comprises a digital television signal sent over network from a media source not shown to the communication device . The multimedia information may comprise a constant bit rate signal for a given modulation rate code rate and guard interval. The multimedia information may comprise generic coding of moving pictures and associated audio information. In various embodiments the multimedia information comprises an MPEG2 transport stream. The multimedia information may contain multiple digital television channels or logical streams in each physical channel received from the media source. For example the multimedia information may comprise various digital television channels such as BBC 1 BBC 2 BBC 3 and BBC 4 in a single physical channel.

In various embodiments the received multimedia information is converted from an analog signal to a digital signal using an analog to digital converter in the tuner card. Demodulation may also occur in the tuner card. In various embodiments the multimedia information is also filtered in the tuner card to isolate the desired portion of the multimedia information. For example the multimedia information may pass through a series of Program Identification PID filters in the tuner card to isolate the individual digital television channels contained in the physical channel. If a request for the channel BBC 1 has been received for example the multimedia information will be filtered by the PID filters and only the requested channel BBC 1 will be sent in response to the request. Performing the filtering at the tuner card reduces the amount of data that is sent in response to a request for data and which reduces the amount of bandwidth used in the system.

In various embodiments the filtered multimedia information is sent from the communication device to the chipset over bus . As a result of the processing performed in the communication device the multimedia information sent over bus to chipset comprises variable bit rate data even though the information received from the media source comprises constant bit rate data.

In various embodiments bus may comprise a USB bus. Isochronous mode is one of the four data flow types for USB devices the others being Control Interrupt and Bulk . Isochronous mode is commonly used for streaming multimedia data types such as video or audio sources. In isochronous mode a device can reserve bandwidth on the bus making isochronous mode desirable for multimedia applications. In various embodiments the data transfer described herein utilizes isochronous mode.

The multimedia information passes through chipset to memory for storage and processing. The variable bit rate of the multimedia information being sent over bus and the isochronous mode of data transfer however may result in empty spaces being present in the multimedia information stored in memory . As a result of the empty spaces larger buffer size packets cannot be posted to the USB host controller driver leading to higher kernel mode CPU consumption. Further larger size buffers cannot be circulated in the media processing graph due to the audio latency that would result when the multimedia information is retrieved. The net impact of these problems is that overall platform power consumption is higher for isochronous mode data transfers as compared to bulk mode transfers even though there is higher sleep state residency in isochronous mode compared to bulk mode.

In various embodiments different buffering schemes can be deployed in memory to reduce power consumption for isochronous mode data transfers. The different buffering schemes may be described in more detail with reference to .

Device driver may comprise a component that handles interactions between memory and any of the elements of computing system for example. Device driver may be responsible for allocating and managing buffers A and B. In various embodiments device driver allocates USB buffers A to be as large as the USB processing stack will allow. Device driver may also allocate media buffers B the size of media buffers B selected to reduce or eliminate audio latency when the multimedia information is retrieved.

USB buffers A may comprise a permanent or temporary allocation of memory to store multimedia information. As shown in the multimedia information stored in USB buffers A may comprise data and empty spaces. If a system operating in isochronous mode attempts to retrieve the multimedia information stored in USB buffers A the empty spaces result in increased processing requirements because the processor must locate the start of the data after the empty space. After the start of the data has been located empty space are encountered which requires the processor to skip the empty space and again look for the start of the next portion of valid data. This increased processing results in increased power consumption for the device. As a result it is advantageous to remove the empty spaces from the stored multimedia information.

In various embodiments device driver controls the making of a copy of the multimedia information from USB buffers A to media buffers B. In various embodiments the empty spaces in the multimedia information stored in the USB buffers A are removed before the data is copied to the media buffers B. The media buffers B may comprise a second allocation of memory to store the multimedia information with the empty spaces removed. As shown in the data stored in media buffers B does not contain any empty spaces as a result of the copying process controlled by device driver .

Media control engine may comprise a component that controls requests for multimedia information. An example of a media control engine is the Microsoft DirectShow application programming interface API by Microsoft Corporation of Redmond Wash. DirectShow is a media streaming architecture for the Microsoft Windows platform that allows applications to perform high quality video and audio playback or capture. In various embodiments media control engine may retrieve requested multimedia data from media buffers B to fulfill requests for specific multimedia information for example a specific television channel or program and provide the requested information to processor for further processing and playback.

Operations for the above embodiments may be further described with reference to the following figures and accompanying examples. Some of the figures may include a logic flow. Although such figures presented herein may include a particular logic flow it can be appreciated that the logic flow merely provides an example of how the general functionality as described herein can be implemented. Further the given logic flow does not necessarily have to be executed in the order presented unless otherwise indicated. In addition the given logic flow may be implemented by a hardware element a software element executed by a processor or any combination thereof. The embodiments are not limited in this context.

The packets of data are stored in a first buffer having a first buffer size allocated for a universal serial bus processing stack at . In various embodiments the first buffer may comprise USB Buffers A. The first buffer may be allocated such that the buffer size is as large as the USB processing stack will allow. The larger size of the first buffer allows a processor such as processor to conserve power by entering a power conserving states more frequently. The power conserving states may comprise C states for example. In various embodiments the higher or deeper the C state the more likely the processor can be shut down and therefore realizing greater the power savings.

The empty spaces are removed from the packets of data at . The process of removing the empty spaces may be controlled in various embodiments by device driver . The empty spaces result from the system operating in isochronous mode and the packets of data being variable bit rate data.

The packets of data having the empty spaces removed are copied to a second buffer having a second buffer size allocated for a media information processing stack at . The second buffer may comprise for example media buffers B. The second buffer size is allocated such that the buffers are as large as possible but not so large that latency such as audio latency for example occurs when the packets of data are retrieved from the second buffer. In various embodiments the second buffer is allocated as one or more buffers and the first buffer size is larger than the second buffer size.

The packets of data are sent from the second buffer to the media information processing stack. In various embodiments the media information processing stack further comprises a media control engine such as media control engine for demodulating decoding and rendering the multimedia information. Examples of a media control engine comprise Microsoft DirectShow.

The packets of data are retrieved from the information processing stack for use by a processor. In various embodiments the processor comprises processor . The processing performed by processor may include for example rendering digital audio information and digital video information comprising a digital television signal and providing the digital television signal for playback on display .

The processor is placed in a power conserving state after processing the packets of data. Because the empty spaces have been removed from the packets of data during the copying from the first buffer to the second buffer the processor does not have to continually search for the start of a portion of valid data. Additionally the processor is not required to use unnecessary computations to skip empty spaces in the stored data. Even though there is copying of data from a first set of buffers filled by the USB stack to a second set of buffers processed by the media processing engine there is an overall reduction in platform power consumption compared to not using the described embodiments for the same bitrate traffic. As a result the processor may more readily enter a power conserving state such as a high C state and overall power consumption for the device is improved.

As illustrated in the system may include several processors of which only two processors and are shown for clarity. The processors and may each include a local memory controller hub MCH and to couple with memories and . The memories and or may store various data such as those discussed with reference to the memory of . For example each of the memories and or may include one or more of the O S application drivers and and or buffers .

The processors and may be any type of processor such as those discussed with reference to the processors of . The processors and may exchange data via a point to point PtP interface using PtP interface circuits and respectively. The processors and may each exchange data with a chipset via individual PtP interfaces and using point to point interface circuits and . The chipset may also exchange data with a high performance graphics circuit via a high performance graphics interface using a PtP interface circuit .

Each of the processors and may include one or more processor cores and respectively. Various embodiments may exist in circuits logic units or devices within the system of . Furthermore other embodiments may be distributed throughout several circuits logic units or devices illustrated in .

The chipset may be coupled to a bus using a PtP interface circuit . The bus may have one or more devices coupled to it such as a bus bridge and I O devices . Via a bus the bus bridge may be coupled to other devices such as a keyboard mouse communication devices such as modems network interface devices etc. an audio device and or a data storage device . The data storage device may store code that may be executed by the processors and or . For example the packet discussed with reference to may be transmitted to or received from the network by the system through the communication devices . The packet may also be received through the I O devices or other devices coupled to the chipset . Furthermore in various embodiments one or more of the I O devices communication devices and or audio devices may include the firmware storage device .

Numerous specific details have been set forth herein to provide a thorough understanding of the embodiments. It will be understood by those skilled in the art however that the embodiments may be practiced without these specific details. In other instances well known operations components and circuits have not been described in detail so as not to obscure the embodiments. It can be appreciated that the specific structural and functional details disclosed herein may be representative and do not necessarily limit the scope of the embodiments.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

Some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

Some embodiments may be implemented for example using a machine readable medium or article which may store an instruction or a set of instructions that if executed by a machine may cause the machine to perform a method and or operations in accordance with the embodiments. Such a machine may include for example any suitable processing platform computing platform computing device processing device computing system processing system computer processor or the like and may be implemented using any suitable combination of hardware and or software. The machine readable medium or article may include for example any suitable type of memory unit memory device memory article memory medium storage device storage article storage medium and or storage unit for example memory removable or non removable media erasable or non erasable media writeable or re writeable media digital or analog media hard disk floppy disk Compact Disk Read Only Memory CD ROM Compact Disk Recordable CD R Compact Disk Rewriteable CD RW optical disk magnetic media magneto optical media removable memory cards or disks various types of Digital Versatile Disk DVD a tape a cassette or the like. The instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code encrypted code and the like implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices. The embodiments are not limited in this context.

It should be noted that the methods described herein do not have to be executed in the order described or in any particular order. Moreover various activities described with respect to the methods identified herein can be executed in serial or parallel fashion.

Although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. It is to be understood that the above description has been made in an illustrative fashion and not a restrictive one. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description. Thus the scope of various embodiments includes any other applications in which the above compositions structures and methods are used.

It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. section 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate preferred embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

