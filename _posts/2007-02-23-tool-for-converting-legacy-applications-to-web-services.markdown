---

title: Tool for converting legacy applications to web services
abstract: A design tool assists with the conversion of legacy applications to web services. The design tool provides a flexible and visual design environment through which web services are defined, created, and deployed for controlling a legacy application. As a result, the legacy applications may be made accessible through web services to remote callers consonant with the wide spread adoption of web services. An organization may thereby extend the life-cycle of their legacy applications and continue to realize the benefit of substantial investment in the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971183&OS=07971183&RS=07971183
owner: Accenture Global Services Limited
number: 07971183
owner_city: Dublin
owner_country: IE
publication_date: 20070223
---
This disclosure concerns systems and methods for building graphical user interface application GAP based integrated systems. In particular this disclosure relates to an efficient and non invasive approach to creating integrated systems from GAPs and web services.

There is a strong demand for modern systems to integrate e.g. exchange information with other systems. However modern systems often incorporate Graphical User Interface GUI Applications GAPs implemented in a closed and monolithic manner. System integrators find retrofitting existing GAPs to interoperate a particularly difficult technical challenge especially for closed and monolithic GAPs. Thus a fundamental technical problem of interoperability for system integrators is how to compose integrated systems with existing GAPs that do not already interoperate with each other and web services efficiently and non invasively.

System Integrators and organizations purchasing system integration services recognize the difficulty and enormous expense of building integrated applications. Beyond developing integrated applications components system integrators and applications programmers must define protocols and implement functionality required to enable information exchanges between the integrated applications components which may include GAPs and web services. Organizations tend to use legacy GAPs as long as possible in business operations primarily to realize the return on investment for the legacy GAPs. However system integrators find enabling GAPs to interoperate difficult because system integrators consider the vast majority of GAPs encountered as closed and monolithic. In other words most GAPs do not expose programming interfaces or data in known formats. Thus while system integrators find the use of GAPs as components in integrated applications desirable often the original implementation of a GAP makes enabling interoperability impossible.

In contrast to GAPs developers design web services as software components that flexibly exchange information over networks including the Internet. Consequently business industry demand for applications that easily and inexpensively exchange information has partly caused widespread acceptance of web services. Employing web services unlike GAPs enables organizations to quickly build integrated systems by composing i.e. configuring the web services for information exchange. Organizations have invested heavily in legacy GAPs but GAPs are not easily added to an existing framework of web services. System integrators find it difficult to modify source code of GAPs to enable interoperability because of brittle legacy architectures poor documentation significant programming effort and subsequently the large cost of such projects. Organizations often do not have access to the source code necessary to modify third party GAPs. Given the complexity of GAPs and the cost to make GAPs interoperable a fundamental problem exists of how to enable GAPs to exchange information with each other and web services and build integrated systems using the GAPs and web services efficiently and non invasively.

Organizations consider e procurement systems EPS critical because EPS influence all areas of the organization performance. Businesses employ elaborate EPS that often include different GAPs that support different steps of a purchasing process. In EPS the rule of separation of duty requires operations separated into subparts and performed by independent persons i.e. agents to maintain integrity. The separation of duty rule prevents a person from causing a problem that will go unnoticed because a person who creates or certifies a transaction may not also execute the transaction. Implementing the separation of duty rule results in agents requiring different GAPs that provide different services for different parts of a purchasing process.

Consider a typical e procurement scenario where employees order items using an electronic shopping cart service of a web based application BuyMoreStuff BMS . Department managers review selected items in the shopping cart approve and order the items and enter the ordered items into Acme Expense GAP AEG which is a third party closed and monolithic Windows GAP that the company uses internally to keep track of purchases. The BMS web service sends a notification to a company accountant who uses a closed and monolithic GAP named My Invoices and Estimates MIE to create invoices for ordered goods. When a receiving agent receives the ordered goods from BMS a receiving agent compares them with the entries in AEG. The accountant can view the AEG records but cannot modify the AEG records and likewise only the accountant can insert and modify data in MIE. If the received goods match the AEG records then the receiving agent marks the entries for the received goods in AEG and notifies the accountant. After comparing the invoices in MIE with the marked entries in AEG and determining that they match the accountant authorizes payments. In this example each procurement agent uses a different GAP to accomplish different portion of a business process. Conceivably several GAPs used together accomplish a single business goal and agents transfer data between GAPs and perform other operations manually. Organizations clearly recognize automation as critical to improving the quality and efficiency of business services.

A need has long existed for a system and method to enable GAPs to interoperate with each other and with web services.

Composing legacy GAPs with each other and web services into integrated systems allow organizations to improve their business processes and extend the usability of legacy GAP systems. The Composer of Integrated Systems Coins provides an approach for creating integrated systems composing GAPs and web services. Coins combines a non standard use of accessibility technologies used to access and control GAPs in a uniform way with a visualization mechanism that enable nonprogrammers to compose GAPs with each other and web services. Coins uses accessibility technologies to control GAPs and their user interface UI elements as programming objects set and retrieve UI elements and associates methods with actions that users perform on the UI elements. For example when a user selects a combo box item the combo box invokes a method that performs some computation. A web service would invoke methods and set or retrieve field values of a programming object representing the combo box to control the combo box programmatically. Coins controls GAPs as programming objects and UI elements as fields of the programming objects and invokes methods on the objects to perform actions and manipulate the GAPs and UI elements. Unfortunately web services cannot access and manipulate UI elements as pure programming objects because UI elements only support user level interactions. However accessibility technologies expose a special interface that allows the Coins to invoke methods and set and retrieve UI element values and thereby control UI elements and GAPs.

Accessibility technologies provide different aids to disabled computer users including as examples screen readers for the visually impaired visual indicators or captions for users with hearing loss and software to compensate for motion disabilities. Under 36 CFR part 1194 the Architectural and Transportation Barriers Compliance Board s Electronic and Information accessibility Standards requires that when Federal agencies develop procure maintain or use electronic and information technology the electronic and information technology allows Federal employees with disabilities access and use of information and data comparable to Federal employees without disabilities. Accordingly because the Federal Government s large appetite for technology and the desire of the technology industry to sell technology to the Federal Government most computing platforms include accessibility technologies. For example Microsoft designed Microsoft s Active accessibility MSAA technology to improve the way accessibility aids work with applications running on Windows and Sun Microsystems accessibility technology assists disabled users who run software on top of Java Virtual Machine JVM . Many computing platforms as well as libraries and applications incorporate accessibility technologies in order to expose information about user interface elements. Accessibility technologies provide a wealth of sophisticated services useable to retrieve UI elements attributes set and retrieve UI element values and generate and intercept different events. Most implementations of accessibility technologies exploit the fact that UI elements expose a well known interface i.e. accessibility interface that exports methods for accessing and manipulating the properties and the behaviour of UI elements. For example a Windows UI element employs the IAccessible interface to allow access and control of the UI element using the MSAA API calls. Programmers may write code to access and control UI elements as if the UI elements were standard programming objects. Accessibility API calls may include get into object perform action on object get value from object set value on object navigate to object and set property on object.

Organizations may require legacy GAPs to support new business processes. Coins allows users to extend the functionality of GAPs by integrating them with web services. For example a new business procedure may require users to submit information about entered or modified expenses to a web service that verifies the expenses using a set of business rules before saving the expenses in QE. Because the business invested in AEG and used AEG for many years integrating AEG with a new service allows the business to achieve new functionality at a low cost. Coins allows a user to connect UI elements of AEG with properties of the web service to specifying how to transfer data from the AEG GAP to the new service. Coins user selects a method of the web service and determines how to invoke the web service for example a user performing some action on a UI element e.g. clicking a button on a GAP screen invokes the method. Coins user defines whether to pass the values of the UI elements as parameters to the invoked method or use the values to set properties of the web service before invoking the method. In addition the Coins user specifies how to use the return values of the invoked method for example whether to update selected UI elements of the GAPs with the values or display the values in message dialogs. Coins user may define an action in response to certain return values of the invoked method.

Other systems methods and features of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the following claims.

The Composer of Integrated Systems Coins addresses the technical challenge of enabling GAPS to exchange information i.e. interoperate with each other and web services over the Internet and solves the technical problem of composing integrated systems using GAPS and web services efficiently and non invasively. Coins allows users to create composite web services from multiple GAPS and web services. Coins identifies and registers multiple GAPS as a result of the Coins capturing through the accessibility layer i.e. accessibility API information regarding GAPS and user interface UI elements of the GAPS. Coins registers GAPs and web services using a design tool user interface to capture user interface interaction specifications that create user interface element correspondence between a UI element of one GAP and a different UI element in a different GAP. Coins defines a web service parameter relationship between a web service parameter and one or more UI elements of a GAP and defines a composite web service definition for a composite web service from one or more web service parameters. Coins generates and deploys composite web services based on composite web service definitions one or more user interface interaction specifications and one or more web service parameter relationships. Coins may also generate and deploy web services based on web service definitions that include one or more user interface interaction specifications between UI elements of different GAPS and one or more web service parameter relationships.

Coins uses proxies to command and control GAPs and UI elements of GAPs to fulfil web service requests. When a proxy receives a response from a GAP the proxy extracts data from the GAP and forwards the extracted data to one or more web services. Proxies use hooks to perform various actions on UI elements and GAPs programmatically through accessibility API calls. Accessibility technologies allow hooks to register for different events produced by UI elements and GAPs monitored by accessibility APIs. One or more GAPs may run with a proxy and corresponding hooks on a single designated GAP host computer along with a accessibility API.

Coins uses a dispatcher as a central point for coordinating proxies in a distributed environment. A proxy registers with the dispatcher under a unique name collects GAP identification data and information about GAPs running with the proxy on a GAP host computer and sends the collected GAP identification and information about GAPs to the dispatcher. The dispatcher uses the information collected from the proxies to route web service requests to proxies. The dispatcher routes web service request components of composite web services to one or more GAP host computers where corresponding proxies ultimately command and control GAPs and UI elements. The dispatcher acts as an intermediary that enables web services and GAPs to run on separate computers while presenting a common view to client programs. Because organizations may move web services and GAPs around the enterprise computing environment for various reasons e.g. to improve business processes efficiencies or the performance of applications the dispatcher provides web services and GAPs migration and location transparency to client programs.

The elements illustrated in the Figures interoperate as explained in more detail below. Before setting forth the detailed explanation however it is noted that all of the discussion below regardless of the particular implementation being described is exemplary in nature rather than limiting. For example although selected aspects features or components of the implementations may be depicted as being stored in memories all or part of systems and methods consistent with Coins may be stored on distributed across or read from other machine readable media for example secondary storage devices such as hard disks floppy disks and CD ROMs a signal received from a network or other forms of ROM or RAM either currently known or later developed.

Furthermore although specific components of the Coins will be described methods systems and articles of manufacture consistent with the system may include additional or different components. For example a processor may be implemented as a microprocessor microcontroller application specific integrated circuit ASIC discrete logic or a combination of other type of circuits or logic. Similarly memories may be DRAM SRAM Flash or any other type of memory. Logic that implements the processing and programs described below may be stored e.g. as computer executable instructions on a computer readable medium such as an optical or magnetic disk or other memory. Alternatively or additionally the logic may be realized in an electromagnetic or optical signal that may be transmitted between entities. Flags data databases tables and other data structures may be separately stored and managed may be incorporated into a single memory or database may be distributed or may be logically and physically organized in many different ways. Programs may be parts of a single program separate programs or distributed across several memories and processors and may be implemented or distributed as shared libraries application programming interfaces APIs or in other forms. Furthermore the programs or any portion of the programs may instead be implemented in hardware.

In one implementation when proxy receives a web service request component the proxy interacts with one or more UI elements of the GAP with UI elements through the hook in response to the web service request component. The accessibility layer may support hook to perform various actions on GAP with UI elements programmatically. Proxy in communication with GAP host computer for GAP with UI elements and hook may register the GAP with UI elements with the dispatcher resulting in a second composite web service request component of the composite web service to route through the dispatcher to the GAP host computer . In one implementation when proxy receives the second web service request component the proxy interacts with one or more of the UI elements of the GAP with UI elements through the hook in response to the second web service request component. The accessibility layer may support hook to perform various actions on GAP with UI elements programmatically. The dispatcher may use a load balancer to route web service requests to multiple GAP host computers.

In one implementation of the Integrated System multiple instances of a GAP e.g. Acme Expense GAP AEG run concurrently on separate GAP host computers e.g. GAP host computer GAP host computer and GAP host computer . The dispatcher assigns each instance of AEG a unique GAP identifier enabling the dispatcher to coordinate parallel execution of multiple instances of AEG so that when the composite web service sends a composite web service request component to the dispatcher in response to a request from a client program the dispatcher routes the composite web service request component to the correct instance of AEG.

In one implementation the accessibility layer supports hook and hook to perform various actions programmatically on GAP GAP UI elements and GAP and GAP UI elements respectively. The accessibility layer may also assist with capturing a structural representation of GUIs of a GAP and UI elements of the GAP as a result of interactions with the GAP. The structural representation of GUIs of a GAP and UI elements of the GAP may provide the proxy hook and hook comprehensive information to locate control and manipulate GAP GAP GAP UI elements and GAP UI elements . The structural representation of GUIs of a GAP and UI elements of the GAP may be implemented with a data structure e.g. an XML file that captures a depth first traversal of the GUI breadth first traversal of the GUI or that otherwise stores the interface elements and screen sequences of the GUI. The proxy may analyze the structural representation of GUIs of a GAP and UI elements of the GAP to locate a GAP UI element in the GAP GUI.

The proxy may include registration logic an accessibility layer command coordinator and a GAPs identification table . The proxy may use the registration logic to register GAP and GAP with the dispatcher. The accessibility layer command coordinator may control GAP and GAP UI elements through hook in response to a web service request component. To that end the accessibility layer command coordinator may receive web service request components extract the graphical user interface element identifiers a structural representation of a GAP and the requested action on the identified graphical user interface element. The accessibility layer command coordinator may then traverse the structural representation to determine where the identified graphical user interface element resides in the GAP user interface and make calls to the hook to navigate the GAP to the interface that includes the identified graphical user interface element. Once at the appropriate interface the accessibility layer command coordinator may then exercise the graphical user interface element through the hook to perform the requested action.

In another implementation proxy uses an accessibility layer command coordinator running on and dedicated to GAP host computer to control GAP with UI elements through hook in response to a web service request component. The proxy may collect GAP identification data and information about GAPs e.g. GAP and GAP hosted with proxy on the multiple GAPs host computer and stores the collected GAP identification data and information about the GAPs in the GAPs identification table . In one implementation the proxy may store GAP Identifiers for multiple locally hosted GAPs e.g. GAP and GAP in the GAP identification table . The proxy may periodically send the collected GAP identification data and information about the GAPs to the dispatcher . The multiple GAPs host computer may use the external storage to store the GAP exe and GAP exe programs.

In an alternative implementation the dispatcher receives a web service request message from the web service that includes a GAP UI element Identifier and an action request identifier for a specific GAP UI element e.g. GAP UI elements . The GAP UI element may correspond to a GAP e.g. GAP executing in memory . The dispatcher may send the web service request message to proxy which extracts the GAP UI element identifier and action request identifier from the web service request message. The proxy may perform an action against the GAP UI elements specified in the action request identifier through hook . The action request identifier may include a GUI element data setting action or a GUI element data retrieval action that the proxy performs through hook against the GAP UI elements specified in the action request identifier.

In one implementation when a client program invokes a method of a web service or composite web service the web service or composite web service to which the method belongs sends a web services registration request to the dispatcher . The dispatcher may identify the GAPs required to fulfil a method of a web service or a composite web service . The dispatcher may use registration logic to receive GAP registration requests from GAPs and web services registration requests from web services and composite web services . The dispatcher may also use the registration logic to control GAPs to web services assignments logic to analyze the proxy GAPs identification tables to assign GAPs and UI elements to methods of web services and methods of composite web services . In one implementation the registration logic instantiates the proxy GAPs identification table e.g. proxy GAPs identification table and proxy GAPs identification table in response to a GAP registration request from a GAP. The dispatcher may include a GAPs request queue to store web service requests and web service request components when a web service requests an unavailable GAP which will be explained in further detail below.

The interaction logic captures one or more GAP UI elements and one or more GAP UI elements using the accessibility layer . In other words the Interaction logic may capture a structural representation of GUIs of a GAP and UI elements of the GAP through the accessibility layer using the hook logic to communicate with the GAPs e.g. GAP GAP and corresponding GAP UI elements and GAP UI elements . Proxy logic may control the GAPs through the hook logic and the proxy logic may use the registration logic to send GAP registration requests to the dispatcher . The structural representation of GUIs of a GAP and UI elements of the GAP may include a GAP UI element label a UI element Identifier and location information in the GAP GUI for the GAP UI elements e.g. GAP UI elements and GAP UI elements and may also include a GAP GUI screen sequence representation for each GAP GUI screen sequence.

The design tool user interface logic may generate the design tool user interface that includes the input parameter area and a screen sequence area monitor and determine an operator s selection of at least one of the GAP UI elements in the GAP GUI represented in the structural representation of GUIs of a GAP and UI elements of the GAP and add the selected GAP UI elements to the input parameter area . The definition logic may establish the web service definition with at least one of the web service parameters e.g. WS parameter WS parameter and WS parameter that will interact with the at least one of the GAP UI elements . The relation logic may establish a web service parameter relationship between at least one of the web service parameters e.g. WS parameter WS parameter and WS parameter and at least one of the GAP UI elements . The relations logic may establish multiple web service parameter relationships with multiple web service parameters e.g. WS parameter WS parameter and WS parameter and each of the GAP UI elements .

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly other implementations are within the scope of the following claims.

