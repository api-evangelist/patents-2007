---

title: Dynamic update of authentication information
abstract: A framework is provided that decouples credential acquisition from authentication processes using those credentials in a way that facilitates dynamic update of credential information. An authentication component may receive credential information for authentication of a user or a device for access to a resource. During interactions with an external authenticator, the authentication component may identify that updated credential information is required and issue a request to the application including credential parameters defining the updated credential information. An application component receiving the request may acquire updated credential information from a user or another entity. In addition, the authentication method may issue notifications to the application. The framework enables the application to update credentials in a context specific way.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941831&OS=07941831&RS=07941831
owner: Microsoft Corporation
number: 07941831
owner_city: Redmond
owner_country: US
publication_date: 20070209
---
Frequently in computer systems access to some resource such as a network or files stored on the network is restricted to authorized entities. For example resources may be made available only to authorized users or from authorized devices. Accordingly before access to a resource is provided an entity seeking access may be authenticated.

Authentication may be performed according to a protocol that uses a set of credentials. As part of the protocol a device may exchange credentials with some authentication mechanism that if proper credentials are provided according to the protocol can enable the device to access a resource. An authentication mechanism may be for example an access control server.

Many different types of authentication protocols are available and each type may use different credentials or different types of credentials. To facilitate the exchange of credential information authorization components in the software in both the device and the authentication mechanism may communicate. To account for the wide range of possible protocols many computing devices incorporate an authentication framework that accepts methods each of which when invoked can execute an authorization protocol. A widely used authentication framework is the Extensible Authentication Protocol EAP .

EAP is an Internet Engineering Task Force IETF standard that provides a framework for network access clients and authentication servers to host plug in modules or EAP methods for many authentication methods and technologies. EAP which was originally created as an extension to Point to Point Protocol PPP is highly flexible and supports arbitrary network access authentication methods. EAP is used for IEEE 802.1x specification based enterprise network access to authenticate network access server NAS devices such as Ethernet switches and wireless access points AP . With EAP authentication protocols such as Challenge Handshake Authentication Protocol CHAP Microsoft Challenge Handshake Authentication Protocol MS CHAP and MS CHAP version 2 MS CHAPv2 a specific authentication mechanism is chosen during the link establishment phase. During the authentication phase the negotiated authentication protocol allows the exchange of credential information.

The exact authentication scheme to be used is negotiated by the network access client and the authentication server e.g. the Remote Authentication Dial In User Service RADIUS server . A connecting client that associates with an access point cannot gain access to the network until the user performs a network logon. After association the client and the authentication server may exchange EAP messages to perform mutual authentication with the client verifying the authentication server credentials and vice versa.

Currently various EAP methods use different set of credentials to authenticate with the authentication server e.g. a backend RADIUS server . Acquiring these credentials from the user or a device and using them for authentication is specific to each EAP method and is handled completely inside the EAP method. For example if during authentication additional information is required for the EAP method to complete authentication the EAP method may control information presented on a user interface through which that information may be obtained.

A device may be provided with a generic authentication framework. According to the framework an authentication component such as an EAP method can describe using a credential interface credentials that it needs to execute an authentication protocol. The credential description is independent of a specific EAP method and the framework can be extended to any authentication component that supports the credential interface.

By using the credential interface applications can manage credentials by receiving credential descriptions and then collecting credentials from a user from memory from a device or any other suitable location. The application may collect credentials from a user by creating a user interface which may be built by the application based on the credential description. Because the user interface is built by the application a user experience around providing credentials may be improved by using context information from within the application when credentials are requested.

Furthermore the credential interface may be used by the authentication component to communicate information to the application during authentication. During execution of the authentication protocol the authentication component may issue a notification and or a request for additional information required to complete the authentication. In response to the request which may be described using the credential interface and handled independently of the EAP method the application may collect through a user interface the requested additional information.

Because the EAP method can communicate to the application relating to the status of an attempted authentication an improved user experience can be provided because the application can present status information such as a notice requesting updated credentials in an appropriate context. Further because the application is aware that updated credential information has been obtained dynamic updating of other components of the device that use the credentials may occur seamlessly.

In one aspect the invention provides a computer readable medium having computer executable components comprising an authentication component e.g. an EAP component that when executed performs a method for authenticating an entity such as a user or a device using first credential information. During authentication the authentication component may identify that second credential information is required to complete the method for authenticating. The computer readable medium also comprises at least one application component separate from the authentication component that when executed obtains the first credential information and the second credential information for the entity.

In another aspect the invention provides a process of operating a client device to authenticate an entity. According to the process first credential information is obtained with a first component and provided to a second component. The process includes interacting between the second component and an authenticator external to the client device using the first credential information and identifying by the second component that second credential information is required. The process further includes providing by the second component second parameters of the second credential information obtaining with a first component second credential information consistent with the second parameters and interacting between the second component and the authenticator external to the client device using the second credential information.

In yet another aspect the invention provides a process of communicating between an application and an EAP component executed in a device. The process includes identifying by the EAP component that credential information is required. The EAP component obtains the credential information from the application.

The inventors have appreciated that a user experience can be improved by decoupling acquisition and use of credentials which also allows unifying credential management for different authentication methods. The inventors have further appreciated that by providing a mechanism to manage credentials and any related information independently of an authentication method more functionality may be obtained for authentication purposes. For example dynamic updating of credentials and related information during authentication may be performed. Furthermore the framework may provide device authentication when the user may or may not be present allowing a device to logon to a network before a user logs on to the device.

Such a framework may be implemented with an interface comprising an application component e.g. software application and an authentication component separate from the application component. The interface may be implemented as four application programming interfaces APIs wherein a first application programming interface may provide a credential definition from the authentication component to the application component and a second application programming interface may provide credential information from the application component to the authentication component. A third application programming interface may provide a definition of additional information required for authentication from the authentication component to the application component and a fourth application programming interface may provide the additional information from the application component to the authentication component.

The credential definition may be obtained for example in a form of parameters such as for example credential parameters or in any other suitable form. The application component may obtain credential information consistent with the credential definitions from a user or a device.

The credential information may be obtained through a user interface such as for example a user interface enabling a SSO experience whereby the user may need to enter a single set of credentials for network access and user logon. Alternatively the credential information may be obtained from the device. The collected credential information may then be provided to the authentication component to perform authentication. As an option the credential information may be stored for future use.

During authentication it may be required that the credential information be modified. Furthermore additional information may be requested and or notification may be issued by the authentication component. In response to a request for some additional information from the authentication component the application provides an interface through which the user can enter the requested information.

The client comprises an EAP host including an EAP method and an application . In the example illustrated the application may be supplicant software for an IEEE 802.1x based enterprise wireless network or other software that requires access to a resource for which authentication is required.

EAP host may be a set of internal components that provide architectural support for one or more EAP methods in the form of plug in modules. For successful authentication both the client and authentication server typically need to have EAP authentication modules installed that interact to perform authentication according to a desired protocol. Therefore the EAP method installed on the client may be designed to interact with EAP method installed on the authentication server to perform a desired authentication protocol.

The EAP method is schematically shown to be coupled to a user interface for collecting credentials from users and or devices. The coupling is shown to demonstrate that the EAP method in the prior art framework of is responsible for both collecting and managing the credentials and related information. The client may include an application component and an application component that may employ authentication to gain access to a resource. The application components and may be by way of example only and not to limit the scope of the invention e mail calendaring and scheduling applications that access servers for which authentication is required. It should be appreciated that client may comprise other suitable components that are not illustrated in .

The server may comprise EAP host including EAP method and an access control component . A common access control protocol utilized by the IEEE 802.1x security standard is a Remote Authentication Dial In User Service RADUIS . The RADIUS is an Authentication Authorization and Accounting AAA protocol and is often used for authentication of users and or applications and for securing access to services in wireless networks. Access control component may implement RADIUS or other access control protocols. It should be appreciated that sever may comprise other suitable components.

An authenticator may rely on a centralized AAA server e.g. RADUIS server to authenticate clients. In this case logical communication of EAP messages is provided between the EAP method installed on the client and the EAP method installed on the authentication server and authenticator does not need to support any specific EAP method.

EAP is extensible through EAP methods. To add support for a new EAP method an EAP method library file may be installed on both the client and the authentication server. Thus though one EAP method is shown in each of client and server any number of methods may be present on a client depending on the number and types of resources to which that client may gain access and the authentication protocols used for those resources.

Different EAP methods may use different sets of credentials to authenticate with the authentication server. For example the MS CHAPv2 authentication protocol uses a user name and password for authenticating to the RADIUS server. In addition an EAP method may use different credential information at different times depending on how the method is configured. For example a method may be configured to use either logon user name and password of the currently logged in user or a different user name password pair.

Though not all credentials are in the form of user name and password. For example the EAP Transport Layer Security EAP TLS protocol may use a certificate from a smart card or a certificate from a disk for authentication purposes. Accordingly methods exist that use a variety of types of credentials from a variety of sources.

Acquiring the credentials from a user or a device and using them for authentication is typically specific to each EAP method and is handled completely inside the EAP method. The EAP method typically handles any functionality associated with dynamic update of credentials during authentication or at other time points. This may complicate building generic software solutions that unify credential management for different EAP methods.

In the embodiment illustrated client and authentication server include respective EAP hosts and that may have EAP method and EAP method installed respectively. The authentication server includes an access control component .

In some embodiments the client may deploy the Microsoft Windows Vista operating system. The authentication server may deploy the Microsoft Windows Server software which may host RADIUS as an access control protocol. The EAP hosts and may comprise EAPHost architecture of the Windows Vista and Windows Server software which provides third party vendors with extensibility opportunities to develop and distribute different EAP methods. However the specific software used for implementing the components of the authentication framework are not critical to the invention and any suitable components may be used and any of the components described herein may be implemented in any suitable programming language.

To facilitate separating the acquisition of credentials from performing authentication using credentials the EAP method may expose a credential interface through which the EAP method may describe the credentials that it needs to execute an authentication protocol. Any EAP method that can support such an interface may potentially utilize the framework . The credential interface may return a description of the credentials using credential parameters or other suitable representation. In some embodiments credential parameters are represented as an array of so called credential specifiers where each credential specifier may describe a credential needed for authentication.

In some embodiments each call to credential interface may result in the EAP method returning the same credential specifiers. However in some embodiments an EAP method may be configurable and may require different credentials in different configurations. The credential interface may take as an argument a configuration parameter. Such a parameter provides the EAP method with the ability to change the description of credentials that it needs based on the configuration of the EAP method.

In the embodiment illustrated credential interface may be implemented as four application programming interfaces APIs . One API may act as a provisioning interface which when called by an application returns a description of credentials EAP method uses for executing an authentication protocol. A second API may receive those credentials and when called may cause the EAP method to execute the authentication protocol using those credentials.

A third API may act as a dynamic notification interface which may provide status information to the application such as a notification of the progress of the authentication and or a request to the application for additional information needed to complete authentication. The request initialized by the EAP method or some other trigger may be a request for additional information that may be needed for example for an EAP method to complete authentication. For example the request may be provided to prompt the user to enter a new password upon expiry of an old password.

A fourth API may receive the requested additional information and when called may cause the EAP method to complete authentication. It should be appreciated that the API may provide functionality of the API and vice versa. Likewise the API may provide functionality similar to that of API and vice versa. Accordingly in some embodiments functionality of both API and may be provided through same API. Also the functionality of APIs and may be provided through the same API.

Each API may be coded in the C programming language. However credential interface may be implemented in any suitable way using any suitable programming language.

Application software in some embodiments may be any software that requires access to a resource for which authentication is required. However it is not necessary that application access such a resource and may be any component or components that manage credentials. Application software may be operating system software or may be client software. In embodiments that include Windows Vista operating system clients an application may be client software and may be referred to as a supplicant. Client may be referred to as a supplicant as well.

Application may pass authentication requests to EAP host which may then be carried out by an EAP method installed in client . It should be appreciated that application may run side by side with EAP methods e.g. EAPHost in Windows Vista and may use EAP host and one or more EAP methods.

Application may in turn include one or more components that perform authentication functions or functions for which authentication is required. For example application may include user logon software such as Winlogon in Windows Vista operating system. User logon software may interact with EAP method to request credential description and provide other credential collection and management functionality.

The application may also include a credential provider that may obtain credentials in accordance with the credential description provided by EAP method . Credential provider may obtain credentials in any suitable way. Credentials may be obtained from users from credential store or otherwise obtained from the computing device on which client is implemented.

Credential provider may be implemented in any suitable way. For example it may be implemented as a plug in module that may define a user interface to gather credentials. The user interface may be a GUI a command line interface or any other suitable interface.

Credential provider may be coupled to credential interface so that credentials obtained may be provided to an EAP method.

Once collected the credentials may also be retained for future use. The collected credentials may optionally be stored for future use in a credential store . Credential information may be stored in an encrypted format or otherwise stored in a secure fashion. If credential information is stored it may be updated by application whenever application detects change in that information such as may occur for example when a password expires.

Though a single credential provider is shown multiple credential providers e.g. a user name and password credential provider and a smart card credential provider which can be user selected and or event driven may be installed on the client to obtain different types of credentials or credentials in different contexts. For example user interface may appear differently when application is collecting credentials when a user first establishes a connection to a network than when the user reestablishes a connection that was interrupted during a session. It should be appreciated that embodiments of the invention provide a functionality enabling independent software components to create appropriate user interfaces for acquiring credentials from the user or to obtain the credentials in any other suitable way from any other suitable source.

Application may be any software component that may require authentication at any time. However in many enterprise settings a client is given access to resources when a user of a client device is authenticated. Frequently authentication is based on a user name and password. In many instances the client device is programmed to be locked until an authorized user logs on by providing an appropriate user name and password. Accordingly illustrates that application may include logon software to control the logon process so that a user may be authenticated.

In addition application may communicate with application components and to provide these components with credential information. The application components and may be for example e mail calendaring and scheduling applications. Application may provide updated credential information to application components and . The notification may take place at different times including but not limited to while the user is using the application components.

In embodiments implemented on Windows Vista operating system user logon software implemented as Winlogon communicates with LogonUI which using credential providers draws user interface on a display or other output device associated with the device on which client is implemented. In user interface is shown by way of example only as coupled to credential provider . Though illustrates credentials being obtained through a user interface credential provider may obtain credentials in any suitable way. For example credential information may be stored within the device implementing client . Alternatively such a device may be equipped with hardware components that provide credentials. For example credentials may be in the form of a token digital certificate smart card based certificate or any other suitable form and may therefore be obtained from a device that reads a smart card or stores a certificate.

Regardless of the source of credentials credential provider may use a credential description such as a credential specifier provided through credential interface e.g. using API to obtain the appropriate credentials. The credential specifier may include by way of example and not to be limiting the following information 

The Credential Name is a name that may be used to refer to the credential when it is presented to a user for input or other purposes.

The Credential Flags may be used to describe different properties of the credential such as for example properties given hereinbelow.

In embodiments of the invention the user interface may take credentials as an array of credential name value pairs at start up or during authentication. The framework may provide a mechanism ensuring that an EAP method can be invoked at any time for authentication purposes if credentials are available and is not limited to operation only at start up or at user logon.

In some embodiments API facilitating dynamic update functionality may be called as DynamicUpdateCredentialRequest with the call made by the authentication component to an application e.g. application or any other suitable application . The parameters in this call may include by way of example and not to be limiting the following information 

The dynamic update credential request type may be accompanied by a list of credential specifiers that may include information as described above.

An application may call the authentication component using API as DynamicUpdateCredentialRespone . The parameters in this call may include by way of example and not to be limiting the following information 

The dynamic update credential response type may be accompanied by a list of credential specifiers that may include information as described above.

By separating the collection of credential information from execution of an authentication protocol functions may be performed that facilitate use of client . As one example a Single Sign on SSO function may be implemented. As part of the SSO a user is prompted for credential information once even though multiple authentication protocols may be executed each using a subset of the obtained credentials. For example in the traditional enterprise setting a user may log into a device implementing client by providing credential information. A user authentication protocol may be performed to complete the logon process. Subsequently a second authentication protocol may be performed to authenticate the user to a network. Accordingly client may include multiple authentication methods one for authenticating a user at logon and a second for authenticating a user to acquire network access. In some enterprise environments both user logon and network access are performed using the same user name and password. However if separate credentials are required for user logon and network access application may determine the credentials needed by obtaining a credential description from a method performing authentication at user logon and from a method performing authentication as part of obtaining network access. Application may then request through user interface or any other suitable mechanism that the user provide both sets of credential information as part of a single step.

Even if user logon and network access use the same credential information separating the acquisition of credential information from the use of the credential information may simplify the burden of the user of providing that information. For example if the credential information provided at logon is incorrect or changes and therefore needs to be reentered application because it manages the collection of credential information can determine that the credential information for network access has also changed and supply the appropriately changed credential information to the method obtaining network access.

This capability allows framework to support an SSO experience. SSO is a tool that has been developed to simplify and streamline user logon whereby a user may be required to provide user authentication information once to access multiple applications devices and systems. With such a tool a user may enter credential information once for network connectivity and user and or device logon. Though the SSO experience is not limited to just the functions and may be used with any other desired combination of authentication functions.

During authentication or at any other time an EAP method may request that additional credential information be collected and provide a description of the additional credential information. As a result application or any other suitable application separate from application may provide a user interface to collect the additional credential and related information consistent with the description and send the collected information to the EAP method. The EAP method may also issue notifications e.g. informative messages that do not require any action but may be displayed to a user and contribute to improving user logon and authentication experience.

Referring to the SSO process starts in this example at a user logon at a step . As one example user logon may start when a user types a specific key sequence or the device implementing client is powered on. At logon user logon software may invoke the SSO component based on any suitable criterion in a step . For example user logon software may be invoked when a user needs to perform a first time logon to a domain joined machine in which case no stored credentials may be available and connect to a network e.g. the 802.1x network . It should be appreciated that user logon software may be any suitable user logon software.

In a step user logon software may inspect a configuration of an EAP method to be used to connect to the network or other EAP methods that may be used for logon. Using the framework the credential management software may request in a step that the EAP methods describe the credentials needed to authenticate the client. Similar calls may be placed to other EAP methods that may execute authentication protocols with the network. Such requests may be made by one or more calls through credential interface .

In response to the request made in step the descriptions of the credentials may be received in a step . The user logon software may then aggregate the descriptions of the EAP credentials needed for the network access with the user logon credentials needed to logon the user in a step to create a credential set. The same credential set may be used for both user logon and network connectivity or subsets may be used for each function depending on the specific EAP methods used.

The credential description provided by the EAP method may enable user logon software using one or more credential providers e.g. credential provider to build a dynamic user interface e.g. user interface prompting the user to enter credentials consistent with the description of the credentials parameters in a step . In a step the required credentials entered by the user may be received. A subset of these credentials may be supplied to the EAP method as credential name value pairs using the credential interface e.g. credential interface exposed by the EAP method in a step . It should be appreciated that a single set of credentials may be required to authenticate network access and user logon. Alternatively two separate sets of credentials may be required for network access authentication and user logon.

Upon receiving the required credentials the EAP method may perform an authentication using these credentials in a step . At a step a subset of these credentials may be provided to another authentication component whether another EAP method or a logon software that takes steps necessary for user logon to one or more devices machines domains or other entities.

The EAP method may determine in a step whether any additional information may be required. This information may be for example a new password upon expiry of the old password. If the answer is affirmative the EAP method may notify the application about the required information. The notification may include description of the required information provided in any suitable form. In addition the notification may include informative messages that do not request any action. An example of such informative message may be for example a notification of the use that a new password entered by the user does not meet backend policy requirements. If the application was notified e.g. credential interface that some additional information is required the application may receive the information form the user as a step upon which the information may be sent in a step to the EAP method to perform authentication in step . If in step it was determined that no additional information is required to complete authentication a subset of the collected credentials may be provided in step to another authentication component whether another EAP method or a logon software that takes steps necessary for user logon to one or more devices machines domains or other entities.

Though credentials may be obtained at logon there may be instances in which network connectivity is desired even with no user logged on. Therefore embodiments of the invention may allow network connectivity be established before user logon. This feature may be useful for processes occurring at logon time e.g. running logon scripts including but not limited to group policy logon scripts updating group policy objects maintaining roaming user profiles and other . Though credentials may be obtained other than from a user.

In situations where there is no user logged on to a device and or machine and if the device and or machine does not support the concept of a logon e.g. phones an EAP method may try to use credentials associated with the device and or machine. However such credentials may not be available in all deployments. For example a machine not joined to a domain or an unprogrammed smartphone may not have the right certificate to authenticate to the network. As a result it might not be possible for the device and or machine to obtain network connectivity in such deployments.

The framework provided by embodiments of the invention allows decoupling credentials acquisition from the EAP method thus permitting a software application e.g. user logon software to gather credentials required by the EAP method and then use these credentials to establish network connectivity. Network connectivity can be established regardless of a presence of a user on the device and or machine or provisioning of a machine through joining to a domain.

Logon software may be invoked either explicitly by the user or through a trigger e.g. when an EAP method configuration indicates that credentials need to be provided by the user in a step . Logon software may inspect the configuration to be used to connect to the network.

Using the framework in a step logon software may request the EAP method describe the credentials needed to authenticate with the network using this EAP method. In response the EAP method may provide the EAP credential description possible through credential interface so that user logon software will receive the description from the EAP method in a step .

In a step it may be determined whether user input is needed. If the answer is affirmative the description of credentials needed to authenticate network access may optionally be aggregated with the user logon credentials description in a step . The credentials description provided by the EAP method enables user logon software to draw a dynamic user interface e.g. user interface prompting the user to enter credentials consistent with the credentials description in a step . The user credentials may then be received from the user in a step . The received credentials may be supplied to the EAP method as credential name value pairs using the credential interface exposed by the EAP method in a step . Following this the credentials are sent to the EAP method in a step . The credentials may optionally be stored in credential store .

If in step it is determined that the user input is not needed the device credentials or other stored credentials may be obtained in a step . The device credentials or other stored credentials may then be sent in a step to the EAP method for the authentication performed by the EAP method using these credentials. The device credentials or other stored credentials along with the EAP method configuration may optionally be stored in an appropriate machine device wide store e.g. credential store for subsequent connectivity which is shown in a step .

As another example illustrates a user interface which prompts the user to enter a single credential set . Such an embodiment may be used when a single set of credentials is used for multiple purposes. If network authentication is required the set of credentials may be used for both user logon and network authentication. The network authentication may not be required in which case the credential set is provided to collect user logon credentials only.

In summary embodiments of the invention provide the framework that decouples credential collection and dynamic update from an EAP method by providing the unifying credential description mechanism. The framework provides an interface which allows acquiring credential description from an authentication method needed by this method to perform authentication collecting credentials consistent with the description and providing the collected credentials to the authentication method. The authentication method may request for dynamic updates of the collected credentials during authentication which may be handled by the framework in such a manner that information required for the updates is collected independently of the EAP method. The framework also enables the SSO that may provide network connectivity at the time of user logon which may be established using single set of credentials required for network connectivity and user logon. The SSO tool may simplify user experience. Furthermore the framework allows device authentication when user may or may not be present.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

