---

title: Method and system for presenting information with multiple views
abstract: Method and system for presenting information on a user device are disclosed. The method includes collecting a plurality of data objects on the Internet, annotating each data object in the plurality of data objects in accordance with user-defined data and implicit data, wherein the user-defined data and implicit data form metadata associated with the plurality of data objects, creating correlations between the plurality of data objects using the metadata associated with the plurality of data objects, and presenting the plurality of data objects in multiple views on the user device simultaneously according to the correlations between the plurality of data objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745162&OS=08745162&RS=08745162
owner: Yahoo! Inc.
number: 08745162
owner_city: Sunnyvale
owner_country: US
publication_date: 20070119
---
This application is a continuation in part application and claims the benefit of co pending U.S. application Ser. No. 11 508 596 Persistent Saving Portal filed Aug. 22 2006 which is incorporated herein in its entirety by reference.

The present invention relates to the field of Internet applications. In particular the present invention relates to a method and system for presenting information with multiple views.

Currently if a user wants to save certain information from the web the user would have to go to the website click through the web pages and then bookmark the page in order to save information on the page. Essentially the user has saved the access to the website. However there are at least two problems associated with this approach because the Internet is a very transitory evolving environment. First when the user needs the information again the website may no longer be there. Second even if the website is still there the content of the website has changed such that the information of interest to the user may no longer be there.

Another approach to save certain information from the web is to open a clipboard like application such as Microsoft Word and then the user may select copy and paste particular information of interest to the Word document. One drawback of this approach is that other information related to the information of interest is not moved to the Word document when such information is copied. The user would have to manually enter the citation URL author and other contextual information related to the information retrieved which is a time consuming and tedious task.

Yet another approach is to use an application like My Web offered by Yahoo Inc. which allows the user to save a copy of the web page containing the information of interest. However this approach saves both information the user is interested in and the information the user is not interested in. The user may be only interested in a particular section of a page or a particular image on a page. Another drawback of this approach is that once the user saves the page the user may have lost the citation URL author and other contextual information related to the information retrieved unless the user enters such information manually.

In the above cases one drawback is that the user is required to add metadata about the information acquired as a post harvest action. There is no mechanism that allows the user to gather and annotate the information with metadata in real time. In addition there is no mechanism to save the information in a structured manner. As a result the user would have to organize and structure the information into useful formats after such information is collected. Therefore there is a need to address such issues of the current art. Specifically there is a need for a persistent saving portal for collecting information on the Internet.

Another drawback is that the user is provided with one style of presentation of the information whether as a map a list a grid chart or a calendar view of the data content of interest. For example when a user is comparing prices of an item on the Internet typically a grid view chart is displayed showing the list prices of the item for different stores. However the locations of the stores and time the user has to spend to drive to the stores may be some of the user s considerations in deciding to which store the user would go to buy the item. In this case the user would have to go to the Maps application and search for the location of each store and get an estimated time for driving to that store. As another example when a user is creating an itinerary for a trip the user would have to go back and forth between the map which shows the different locations the user wants to visit and the comparison charts that show the prices of different airlines hotels etc. that the user is willing to pay such switching back and forth between different views of the information allows the user to fully grasp the data content and to coordinate the different events. In both of the above examples the processes are tedious and time consuming. Therefore there is a need for presenting information to users in a more effective and understandable manner.

In one embodiment a method for presenting information on a user device includes collecting a plurality of data objects on the Internet annotating each data object in the plurality of data objects in accordance with user defined data and implicit data wherein the user defined data and implicit data form metadata associated with the plurality of data objects creating correlations between the plurality of data objects using the metadata associated with the plurality of data objects and presenting the plurality of data objects in multiple views on the user device simultaneously according to the correlations between the plurality of data objects.

Method and System are provided for presenting information with multiple views. The following descriptions are presented to enable any person skilled in the art to make and use the invention. Descriptions of specific embodiments and applications are provided only as examples. Various modifications and combinations of the examples described herein will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other examples and applications without departing from the spirit and scope of the invention. Thus the present invention is not intended to be limited to the examples described and shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

Some portions of the detailed description that follows are presented in terms of flowcharts logic blocks and other symbolic representations of operations on information that can be performed on a computer system. A procedure computer executed step logic block process etc. is here conceived to be a self consistent sequence of one or more steps or instructions leading to a desired result. The steps are those utilizing physical manipulations of physical quantities. These quantities can take the form of electrical magnetic or radio signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. These signals may be referred to at times as bits values elements symbols characters terms numbers or the like. Each step may be performed by hardware software firmware or combinations thereof.

Alternatively the servers may include the databases processors switches routers interfaces and other components and modules. Each of the servers may comprise one or more servers or may be combined into a lesser number of servers than shown depending on computational and or distributed computing requirements. The servers may be located at different locations relative to each other. The databases may also be separately connected to the servers . There may be more or fewer than two databases depending on computational and or distributed computing requirements. The databases may be located at different locations relative to each other and the servers .

Each of the clients may be a general purpose computer such as a personal computer having a central processing unit CPU a memory an input device an output device and a display. Other computer system configurations including Internet appliances hand held devices wireless devices portable devices wearable computers cellular or mobile phones portable digital assistants PDAs multi processor systems microprocessor based or programmable consumer electronics set top boxes network PCs mini computers and the like may also be implemented as the clients . Each of the clients may also implement analog and digital baseband circuitry power management circuitry radio frequency RF transceiver and battery interface and charging circuitry. Clients may include one or more applications program modules and or sub routines. As an example clients may include a browser application e.g. Internet Explorer etc. and a graphical user interface GUI to access websites and web pages provided by the servers and data stored at the databases . Clients may be remote from each other the servers and or the databases .

The network is a communications network such as a local area network LAN a wide area network WAN or the Internet. When the network is a public network security features e.g. VPN SSL secure transport may be included to ensure authorized access within the system.

The servers further include a plurality of individual domains for example shopping domain news domain My Web domain Maps domains etc. A domain is a computer system implemented with different hardware and software for a specific application such as the shopping applications news applications and maps applications. The persistent saving portal application and the application for presenting information with multiple views of the present invention are run on the My Web domain which implement Web 2.0 functionalities using a combination of HTML CSS JavaScript Widget Engine and Asynchronous JavaScript and XML AJAX . In particular JavaScript is used to create monitor change and destroy objects and change the state of the various objects in addition to keeping track of browser behavior changes initiated by the user.

In as a user browses the web page the user may be interested to save the map on the web page. To do so the user may simply drag and drop the map to the relevant portal in the set of persistent saving portals . In this example the map relates to Trip to France and it is stored in the portal . Item illustrates the map being dragged to the portal labeled Trip to France. Note that any unit or type of information on the web page may be saved including but not limited to photo text graphics video sound URL etc. Also note that objects collected and annotated in accordance with the present invention are not limited to objects on a website the user may collect and annotate self created information such as a photo of a car taken by his cellular phone or a bar code of a product scan by the user. Such objects can be used to obtain further information the user is interested in.

The user may define a set of attributes to label the objects collected. These attributes are defined upon the collection of the objects and they may be edited or modified any time afterwards. The set of attributes may include the key words and or symbols the user may use to automatically annotate objects saved in a particular portal. For example item shows user specified annotation terms for example Paris Honeymoon that are used to label objects stored in the Trip to France portal. In addition item shows other implicit data such as the user s name Karon the date the information is saved Dec. 26 2005 and the data type jpg . These data are automatically attached to the information dropped in the portal without manual intervention. Note that other types of implicit data may be attached including but not limited to time of the day location file type file size access permission etc. Both the user specified and the implicit terms of each object are considered as the metadata of the object.

Note that there are several ways of constructing and associating structural data when an object is being collected or gobbled. First the URL associated with the object is analyzed to search for unique object identification that may be used to subsequently query a backend database. For example a business in the Yahoo local may have a unique ID in its URL. If a URL is identified as belonging to Yahoo local from the domain local.yahoo.com then the identity in the URL such as id 1234567 may be used to inquire the Yahoo local web service database for more information about that business like the phone number hours of operation customer or expert reviews all from the URL associated with the business.

Second the object being collected may contain Microformats. Microformats are markups that allow expression of semantics in an HTML or XHTML web page. A gobbler application may extract meaning from a standard web page that is marked up with Microformats. Existing XHTML and HTML standards allow for semantics to be embedded and encoded within them. This is done using specific HTML attributes. Adding Microformats to a standard HTML web page allows machines to process HTML text and to possibly load data into remote databases. This would allow programs such as the gobbler application to find items such as contact information events and reviews on web pages.

Finally one may use information analysis techniques like LiveWords http desktop.yahoo.com or term extraction http developer.yahoo.com to analyze the text in the gobbled object to extract entities. The LiveWords feature gives a user a simple way to search the web for additional information the user may be interested in. Examples of entities include addresses businesses and companies which can then be applied in other queries to data sources such as Yahoo local for searching more business or company information or in general web searches.

Such structured metadata may be applied in many ways putting the gobbled information on a map for example or into a calendar and may also be gathered from the user s annotations or tags. For example adding a text tag of Palo Alto may be used to geo tag objects collected in a saving portal with the geo coordinates of the city of Palo Alto which is identified as a city by LiveWords.

The gobbler application allows the user to efficiently categorize the objects he has collected and to efficiently access such objects using the metadata that annotate the objects. Metadata may be added or deleted after the objects have been collected. For instance when the user adds a new term to a project all objects contained within the project may be updated with the term. In another approach the user may elect to selectively add certain terms to the metadata of certain objects. That would require more steps on the part of the user to select and add the terms to the particular objects specified. The metadata may be implemented in the user s environment as a tag cloud or in other visual ways to support browsing and query the system for object and collection retrieval. As the user s collection of objects increases the need for object and collection retrieval also increases. In addition if the user s collection is published into a public repository the metadata enables the clustering of like projects or collections and supports retrieval from multiple sources.

In a persistent saving portal French Class is shown to collect information relates to the French Class Group. The user may create multiple saving portals for each group the user belongs to. In this example item shows user specified annotation terms for example Reference Paris Trip and Travel Guide that are used to label objects stored in the French Class portal. In addition item shows other implicit data such as the user s name Karon and the data type jpg . These data are automatically attached to the map of Paris that is dropped in the portal without manual intervention. After an object is collected in a saving portal it may be broadcasted or distributed to a destination the user subscribes to via an RSS Really Simple Syndication feed or other means of transmitting information over the Internet. The RSS file format is a family of web feed formats specified in XML and used for Web syndication. RSS delivers its information as an XML file called an RSS feed Webfeed RSS stream or RSS channel . These RSS feeds provide a way for users to passively receive newly released content such as text web pages sound files or other media this may be the full content itself or just a link to it possibly with a summary or other metadata.

In a typical use scenario a content provider publishes a feed link on their site which end users can add to an aggregator program running on their machine. Periodically typically every 5 10 minutes though most aggregators make this user configurable the aggregator asks all the servers in its feed list if they have new content. If so the aggregator either makes a note of the new content or downloads it. In this example the map of Paris is routed to the French Class Group s home page . On the French Class Group s home page objects that have been saved and projects that have been created by group members are shown. For example the map of Paris the user just collected is posted along with other objects as item .

One aspect of the present invention is that the annotation data are attached to the objects collected in the portal automatically without manual intervention after the initial setup based on the terms defined by the user also known as user specified terms when the portals are initially set up. Other implicit terms such as the user s name are determined from the owner or login of computing device. The file type is determined from the source of the data or provided by the URL of the data. In addition the computing device can provide other types of implicit data such as the date time of the day access permission etc. The user specified and implicit annotation data also known as the metadata of the objects are made available to the user and can be attached to the objects collected when the object is transferred from one person to another.

In one embodiment when an object is transferred from one person to another the method accumulates new metadata to the existing metadata that has already been attached to the object. Thus the method assigns a set of unique metadata to each object. In such a way the metadata supports citation and copyright requirements as well as delivery of context. The user may used the metadata to find the original website where an object was collected from and allows the user to retrieve other information from the website if necessary. This method of gathering and annotating information supports the creation of derivative works by the user. This is because not only the method supports adding metadata to each object gathered it also maintains the history authorship context and location of the metadata.

Note that the objects collected in the portals are more than lumps of text and pictures. These objects may be used in conjunction with other information available to an Internet content provider to provide additional information goods or services to the user. For example the objects collected in the Xmas ideas portal may be linked to the shopping domain of . In this manner the user may be able to find the dealers in the local area that sell the sail boat. In addition information may be provided to the user to allow him to compare features and prices for different models of sail boats. Information about the accessories of the sail boat may also be provided to the user to further enrich the user experience of the sail boat. Such information may be displayed in certain ways such as a grid or ranked by particular criteria for example price selected by the user. The way the objects are collected and annotated enables information to be viewed in different intelligent ways.

For another example conventionally when people see an address on a webpage they either manually cut and paste the text into another document or manually write down the address on a piece of paper. Converting this address into an address book item involves a number of tedious and time consuming steps. With the present invention the addition of the metadata enables the object to provide the related context. For example this address object may be linked to the Maps domain of an Internet content provider to obtain the name phone number location and driving directions to the business at this address or linked to the News domain of an Internet content provider to obtain additional information about the business at this address.

The benefit of having universal access to the persistent saving portal by different user devices can be illustrated by the following example. Assuming a user made a travel arrangement from his desktop computer at home and saved the itinerary in a persistent saving portal. While traveling the user may access the itinerary saved in the persistent saving portal using a mobile device. For example the user may obtain the hotel address with his mobile device. From the hotel address the user may obtain map information and driving directions to the hotel through the Maps domain of the Internet content provider. Thus the capability of having universal access to the persistent saving portals enables the user to navigate to his destinations. In one approach the user may harvest information into one of the saving portals using their mobile device. For example the user may scan a bar code take a photo or video and immediately add the object to the portal with metadata. The application may apply the geo location of the user automatically to assign implicit data to a photo in a saving portal for example photo taken in Paris would go into the Trip to France portal while the user is traveling in Paris.

In one embodiment a portal may be shared among multiple users. For example user A and user B are working on different portions of a same project and user B depends on the output of user A to continue his work. Each time user A finishes a task he may place the task in a first shared portal such that user B may receive a notification of user A s status and retrieve the information from the first shared portal. Similarly each time user B finishes a task he may also place the task in a second shared portal such that user A may receive a notification of user B s status and continue to supply new tasks to the first shared portal. The ability to share information collected may be done with an individual object with a set of objects or with the user s collection of objects in all saving portals. The user may define a customized sharing model for each portal namely public private or to my friends only.

In one embodiment the browser and the information gathering application also referred to as the gobbler application may be implemented with JavaScript running on the user s computing device such as a desktop personal computer. The gobbler application presents a user interface for collecting information which is shown as one or more saving portals and as in and listens for data to be collected on a Transmission Control Protocol Internet Protocol TCP IP port using a dynamically linked library DLL . In this example either the web site provides the JavaScript or it is injected into the page using a bookmarklet. A bookmarklet is a small JavaScript program that can be stored as a URL within a bookmark in most popular web browsers or within hyperlinks on a web page.

The browser JavaScript creates a Flash object and parses contents of a web page into a plurality of collectable objects creating collectable objects that may be selected dragged and dropped to a saving portal. A user may gobble data by dragging and dropping one or more collectable objects of the web page onto a saving portal or by clicking on an action button near that element in the page. As objects are gobbled the JavaScript in the web page uses the Flash object to establish a connection to a widget running on a predetermined TCP IP port. The JavaScript then sends the data about the object being gobbled over this TCP IP connection. The receiving widget processes the object by annotating it with various attributes such as time date etc. The receiving widget then sends the object to a backend server for storage and further processing. The further processing includes analyzing the source of the object to establish other metadata related to the object that may be collected.

The JavaScript in the widget contacts the gobbler service using the XMLHttpRequest XHR or other similar techniques to add the object to the appropriate user s store. XHR is an API that can be used by JavaScript JScript VBScript and other web browser scripting languages to transfer and manipulate XML data to and from a web server using HTTP establishing an independent connection channel between a web page s Client Side and Server Side. The data returned from XMLHttpRequest calls may often be provided by back end databases. Besides XML XMLHttpRequest can be used to fetch data in other formats e.g. JSON or even plain text. XMLHttpRequest is a part of the Ajax web development technique and it is used by many websites to implement responsive and dynamic web applications.

In another embodiment the gobbler application includes only JavaScript running in the browser of a user s computing device. Similarly in this example either the web site provides the JavaScript or it is injected into the page using a bookmarklet. The browser JavaScript parses the web page creating collectable objects that may be selected dragged and dropped into a saving portal. In addition the browser JavaScript creates new page element presenting a user interface comprising one or more saving portals for collecting information. Users may gobble data by dragging and dropping the collectable objects of the web page onto the gobbler part of the page or by clicking on an action button near that collectable object in the page. As objects are gobbled the JavaScript annotates the object with various attributes such as time date etc. The page JavaScript then sends the object to a backend server for storage and further processing. The further processing includes analyzing the source of the object to establish other related metadata that may be collected. The JavaScript in the web page contacts the gobbler service using the XHR or other similar techniques to add the object to the appropriate user s store.

In yet another embodiment the Yahoo widget engine described below may be used to implement the persistent saving portals of the present invention. Persons of ordinary skill in the art would appreciate that other implementations or other types of widget engines may be used to implement the persistent saving portals. In addition in the following discussions mothods of constructing and using the widgets are described for computing devices running Windows operating system. Persons of ordinary skill in the art would understand that similar implementations may be done for the Macintosh UNIX or Linux operating system.

The Yahoo widget engine also referred to as widget engine or engine in this document uses the Extensible Markup Language XML to define widgets and objects. This language forms a clear hierarchical structure for each object the order the object is drawn in and the order to associate the attributes of each object. An example of a widget is shown as follows 

The widget reduces the opacity of an image by 10 every time the user clicks on the text that says Click Here. This sample widget is used to illustrate a few points. First the structure of the widget uses a symmetrical language XML such that each object specifier e.g. has a corresponding terminator . Within these pairs of specifiers and terminators the attributes of the objects are defined such as screen positions alignments etc. Second objects defined in XML may be manipulated in JavaScript. Third the name of objects begins with a letter. Only letters numbers and underscores are allowed for a name. The XML description of a widget is stored in a file with the extension .kon. In practice a widget may have many images and text objects multiple JavaScript sections and may create new objects at runtime using JavaScript to implement complex functionality. The following sections describe various embodiments of techniques and codes for creating a new widget.

Entities are an XML construct that allows a user to specify a character via a special escape sequence. Some characters that are used to parse the XML syntax are considered reserved. The symbol is used as the entity escape start and for that reason is also a reserved character . The standard set of entities is used to represent XML special characters 

Since the XML engine looks for the and symbols to mark blocks of XML data the JavaScript engine needs to have these symbols replaced with it and gt respectively. For example 

Alternatively the user may use XML comments to hide the JavaScript code from the XML engine as is commonly done in HTML 

These alternative approaches make the code easier to read. In yet another approach a user may put the XML parser in a strict mode which enforces the rules of XML in ways the parser normally does not do. To enable the strict mode the following line is added to the top of the XML file 

In the strict mode the following aspects of the program are enforced 1 All attribute values are put into quotes 2 No stray characters are allowed in a normal text section 3 Entities things that start with are evaluated inside attribute values 4 No double dash allowed inside a comment. For this reason it is preferable to put code into CDATA blocks and 5 If an external file is included there is no need to replace entities such as It in that file.

File paths in the widget engine are relative to the location of the XML file. This means a file reference without a directory e.g. main.js will be searched in the same directory as the XML file while one with a directory e.g.javascript main.js will be searched in the specified subdirectory of the directory where the XML file resides. It is preferable not to use absolute paths e.g. ones that begin with a since the disk layout of different computers may differ greatly.

In Windows machines the files that make up a widget are stored in a widget file. This is a standard ZIP file that has had its extension changed to widget. The Windows versions of the widget engine can read the zipped up widget files. This is also the format of choice when creating cross platform widgets. In one example a widget bundle has the following structure 

The .kon file contains the actual widget code similar to the sample widget in the section above . In one implementation the .kon file is contained in the Contents folder. A user may put resources such as pictures in it. Typically the resources would be put into a Resources folder as shown above.

If the user does not use the widget converter and instead decides to zip the files manually this may be done on a Windows computer by right clicking the widget folder and creating a ZIP file from that. It should be noted the user does not need to create a zipped up widget file for testing each time the user makes a change while developing the widget. The user may double click the .kon file to achieve the same effect.

Note that the widget package should not be modified at run time. In other words one should not use the widget package to store information inside of itself. While many widgets use preferences to store their settings a widget may store information inside its own package. In addition when the widget engine runs a zipped widget it first unzips it into a special location and then runs it from there. This unzipping happens every time one runs the widget so if information is stored in the widget s unzipped package it may be overwritten. To accommodate widgets that need to store permanent data a system widget DataFolder folder path may be used to store a widget s permanent information.

In yet another embodiment a widget engine may support a flat file format that is not zipped. When the flat file format is not compressed the size of a widget is larger than the size of the widget in the zip format. Since images take up most of a widget s size the increase is about 15 on average because images are normally already in a compressed format PNG JPG while text files are typically not compressed. The benefit of having the files compressed is that there is no need to store the files in RAM until actually needed because the files are file mapped. By using this new format the time for launching a widget application is reduced.

When a widget uses a flat file format items such as Dynamic Link Libraries DLLs that may have been packaged with the widget may not be used unless a new API widget.extract File is used to extract the file out of the flat file widget into a location in the file system. One exception is that sound files played through the play function may work without any changes.

This section discusses how widgets are run and some of the issues that need to be addressed. When a widget is opened it is run as a separate process. This is done to ensure one widget does not affect the rest of the widgets that a user may use. A widget that is in zip format is unzipped into a special location C Documents and Settings Local Settings Application Data on a PC . A widget that is not zipped is run from where it is located. For this reason one may not rely on where the widget is. Once the .kon file is located in the widget the current directory is set to the directory in which the .kon file is located. So for example if a .kon file is in the Contents folder the current working directory would be Contents. This allows relative paths to Resources to function properly. A .kon file would reference an image as Resources Image1.png for example if its images are in the Resources folder in Contents folder.

When the .kon file is located and the current directory is set the file is parsed and the objects defined therein are created. After everything is created successfully the onLoad handler is called. Then the widget runs the initialization routine. Note that the onLoad handler is typically executed before the widget is made visible. In other words many widgets set their window to be hidden at first and become visible upon complete execution of the onLoad handler. After the onLoad handler is run successfully the widget is up and running. Note that the next time the widget is run it is unzipped again. For this reason one cannot rely on storing information in the widget bundle. Instead it is preferable to store information in the widget s DataFolder as discussed previously.

The widget engine keeps track of what widgets may be opened automatically. The next time the widget engine is launched it automatically reopens any widgets that were running at the time when the widget engine was last shut down.

Actions are important in widgets because they are where a user defines how a widget behaves when he interacts with the widget. In one implementation an action is specified by setting the action to certain JavaScript text. This text is evaluated and run when the user clicks for example 

However there are at least two limitations 1 the user may not use the JavaScript this object to refer generically to the object for which the action was running and 2 if the user has several objects with the same code he may have to duplicate the JavaScript and change the names of the objects to reflect each object to which he has attached the code.

To remedy these limitations the widget engine supports proper JavaScript functions for these actions. For example no parameters are sent to the actions. In addition an onMouseUp handler may receive the x and y coordinates of the mouse instead of inspecting system.event. To use functions a user may either use a function in the XML by using an attribute or set the property to the function to call in JavaScript as shown below 

In the XML description a user may set the property. This defines the global JavaScript object that may be created and bound to the object of which the name is a part. For example the code

Some provisions are made for debugging the widgets. There is an XML tag debug that a user may set to on for debugging purposes. When the debug tag is set to on a debug output window will open when a widget is launched. Calls to log or print in the JavaScript code are routed to this debug window. Any errors encountered inside the widget engine are also reported in this window. Note that the debug window will not open unless the debug tag is set to on.

While developing a widget it is preferable that the debug tag is turned on so that it can inform the user about errors that occurred while the widget is running. For example if an attribute is spelled wrong the output window informs the user about this error along with where in the code the problem may be found.

There are two types of security windows that may appear in the widget engine. The first is a first run modification window. On a first run of a widget that the widget engine has not seen before a window appears to inform the user that a new widget is about to open and ask the user to confirm the action. This is to protect against widgets that may just run without the user s knowledge. Also if the user allows a widget to run and subsequently the widget is modified another window appears the next time the widget is launched informing the user about the modified widget. Again the user may confirm or deny the request to launch this modified widget.

If a user is in the process of debugging a widget the user may turn on the debug mode which may suppress the first run modified security windows. Thus the user is not interrupted every time the user modifies the code and reloads the widget.

The second type of window is a sandbox window. In one approach the sandboxed action relates to user s login to his Internet content provider account. The first time a widget attempts to login to his account a window will appear to alert the user of this fact and ask whether the widget should be granted permission to use the user s data on the account.

In the preceding paragraphs extensive details about a method and system for collecting and saving data objects on the Internet have been disclosed. The method includes parsing contents of a web page to form a plurality of collectable objects storing the one or more objects to one or more saving portals annotating the one or more objects in accordance with user specified data and annotating the one or more objects in accordance with implicit data of the one or more saving portals. Once the data objects and their corresponding metadata are made available such information can be utilized to solve real information based problems. One of the applications is to identify correlations between data objects using their corresponding metadata and to present information about the data objects in multiple views simultaneously according to the correlations between the data objects.

The capability of presenting information with multiple views delivers additional context about the data objects to users based on the information derived from the data objects and their corresponding metadata. Each of the views can provide specialized properties that can be utilized to support unique tasks. For example calendar views are useful for illustrating time based events and map views are useful for illustrating geospatial relationships etc. The following sections describe a method and system for presenting information in a display that consists of at least two views and for delivering correlated information to users in a sensible and useful manner using a combination of the specialized views.

The application is able to take geo spatial information whether it be latitude or longitude or in the form of an explicitly generated map location and to display information related to that location and multiple views related to the location. In this example when the user sees a point of interest such as the Washington Monument the user may also want to look at it from the perspective of different orientations. Thus a bird s eye view of the Washington Monument from north south east and west would be interesting to the user. The application can provide the user with contextual views of the Washington Monument based on the user s location in space. Using the capability of displaying different map views based on the contextual information the user is interested in more information can be conveyed to the user.

In one embodiment a map view may be generated through the Yahoo Maps Application Programming Interfaces APIs . A user can plot points on the map view with features such as custom descriptions URLs labels groups and icons. Alternatively a satellite or a hybrid view can be displayed in lieu of the map view. Longitude and latitude coordinates are used to plot a point on the map view through the Yahoo Maps APIs. Alternatively an address may be used so that a built in Yahoo Map s Geocoder can generate the requisite longitude and latitude coordinates.

The Yahoo Maps APIs are available in four variations namely the Simple API the Flash API the Asynchronous JavaScript AJAX API and the Image API. The Simple API enables a user to overlay custom map data on a Yahoo Map without programming. The Flash API enables a user to embed maps in the user s web site or application using the Macromedia Flash technology. The Flash API has three variations a the AS Flash API allows a user to create a Macromedia Flash application to display a map using ActionScript b the JS Flash API allows a user to create applications quickly with scriptable Flash maps and JavaScript without Flash programming and c the Flex API allows a user to create more powerful applications with Macromedia s Presentation Server Technology. The AJAX API enables a user to use DHTML and JavaScript to host his own maps. Other aspects of the AJAX API are similar to the Flash API. The Image API enables a user to stitch image tiles together to build his own static map images by using the Geocoding API to transform physical addresses into encoded latitude longitude geocoded responses.

An ordered list may be created using the ordered list OL element which includes information regarding where order should be emphasized. For example in a recipe 

A definition list may be created using the definition list DL element which generally consists of a series of term or definition pairs. An example of a list written in HTML is shown below.

Note that lists may also be nested and different list types may be used together. For example a definition list may include an unordered list and an ordered list.

In one embodiment a grid view may be generated through the HTML table model that enables a user to arrange data such as text preformatted text images links forms form fields other tables etc. into rows and columns of cells. Each table may have an associated caption that provides a short description of the table s purpose. A longer description may also be provided via the summary attribute for users using speech or Braille based user agents. Table rows may be grouped into the head foot and body sections via the table head THEAD table foot TFOOT and table body TBODY elements respectively. Row groups convey additional structural information and may be rendered by user agents in ways that emphasize the structure. User agents may exploit the head body foot division to support scrolling of body sections independently of the head and foot sections. When long tables are printed the head and foot information may be repeated on each page that contains table data.

Users may also group columns to provide additional structural information that may be exploited by user agents. Furthermore users may declare column properties at the start of a table definition via the column group COLGROUP and the column COL elements in a way that enables user agents to render the table incrementally rather than having to wait for all the table data to arrive before rendering.

Table cells may contain either header information or data. Cells may span multiple rows and columns. The HTML table model enables users to label each cell so that non visual user agents may communicate heading information about the cell to the user more easily. Not only can these mechanisms assist users with visual disabilities they also make it possible for multi modal wireless browsers with limited display capabilities such as web enabled pagers and phones to handle tables.

In one embodiment a calendar view is generated through a Calendar Control in the Yahoo UI Library. The Calendar Control is a UI component that enables a user to choose one or more dates from a graphical calendar. Calendars are generated entirely via script and can be navigated without any page refreshes. The Calendar Control is a useful and easy to implement enhancement to any date selection interaction. The Calendar s foundation classes allow extensions to build complex interfaces that visually organize date tagged information such as appointments photos events etc.

The different relationship views show users how things are related to each other. In the map view of a relationship it shows all the people in an area who are related to the topic of dyslexia. In the tree structure view of a relationship it shows the branches of the tree structure that people belong to. For example the upper left hand side represents parents who had children with dyslexia the upper right hand side represents children that have dyslexia the lower right hand side represents educators and the lower left hand side represents researchers. This tree structure view of a relationship is very different from the map view of the relationship. The related territories view shows different ways of viewing how some of the relationships overlap each other. Using the related territories view one can identify the intersections of the relationships. For example one can identify the researchers who have children that are dyslexic or educators who have experience in dyslexia research.

As shown in the same set of data objects is displayed in two different presentations. The user can select the first presentation consisting of the map view and the calendar view over the second presentation consisting of the list view and the calendar view. In addition the user may specify to have temporal information be displayed on the calendar geo spatial information be displayed on the map and information related to a linear process be displayed as a list. Since the presentations are related to each other through the metadata of the data objects they can be switched from one to the other seamlessly and automatically in accordance with the user s preference.

It will be appreciated that the above description for clarity has described embodiments of the invention with reference to different functional units and processors. However it will be apparent that any suitable distribution of functionality between different functional units or processors may be used without detracting from the invention. For example functionality illustrated to be performed by separate processors or controllers may be performed by the same processors or controllers. Hence references to specific functional units are to be seen as references to suitable means for providing the described functionality rather than indicative of a strict logical or physical structure or organization.

The invention can be implemented in any suitable form including hardware software firmware or any combination of these. The invention may optionally be implemented partly as computer software running on one or more data processors and or digital signal processors. The elements and components of an embodiment of the invention may be physically functionally and logically implemented in any suitable way. Indeed the functionality may be implemented in a single unit in a plurality of units or as part of other functional units. As such the invention may be implemented in a single unit or may be physically and functionally distributed between different units and processors.

One skilled in the relevant art will recognize that many possible modifications and combinations of the disclosed embodiments may be used while still employing the same basic underlying mechanisms and methodologies. The foregoing description for purposes of explanation has been written with references to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described to explain the principles of the invention and their practical applications and to enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

