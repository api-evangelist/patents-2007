---

title: Communicating with devices in an ATM
abstract: A method of operating a self-service terminal is described, along with software for performing the method. The self-service terminal has a number of service providers installed on it. According to the method, a call from a self-service terminal application to open a session with a service provider is received by a manager module. The call includes details of a device related parameter, such as a logical service name or device class. Those service providers which can support the device related parameter are identified and then queried to determine if an associated device is present. Based on the results of the query, one of the service providers is selected and a session is opened between the self-service terminal application and the selected service provider module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505037&OS=08505037&RS=08505037
owner: NCR Corporation
number: 08505037
owner_city: Duluth
owner_country: US
publication_date: 20071031
---
The present invention relates to communicating with devices installed in a self service terminal. It is particularly related to but in no way limited to communication with devices within an Automated Teller Machine ATM which runs XFS eXtensions for Financial Services .

In an example as shown in the services for the cash dispenser module are provided by service provider . A session with this service provider may be opened using a call which includes the logical service name CurrencyDispenser .

Traditionally the logical service names are hard coded within the ATM application such that there is a fixed one to one relationship between a logical service name and a service provider. For example an ATM application would always open a cash dispensing module session using the CurrencyDispenser logical service name. Problems arise however where different vendors use different names for equivalent devices e.g. Receipt Printer and ReceiptPrinter because then the application has to be tailored depending on the vendor. Additionally problems occur where a single vendor supports more than one variant of a given device e.g. more than one keyboard because then there may be more than one logical service name for equivalent devices which must be supported.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

A method of operating a self service terminal is described along with software for performing the method. The self service terminal has a number of service providers installed on it. According to the method a call from a self service terminal application to open a session with a service provider is received by a manager module. The call includes details of a device related parameter such as a logical service name or device class. Those service providers which can support the device related parameter are identified and then queried to determine if an associated device is present. Based on the results of the query one of the service providers is selected and a session is opened between the self service terminal application and the selected service provider module.

A first aspect provides a method of operating a self service terminal the self service terminal comprising a plurality of service providers and the method comprising receiving a call from a self service terminal application to open a session with a service provider wherein the call identifies a device related parameter identifying a subset of service providers from the plurality of service providers based on ability to support said device related parameter querying each of the subset of service providers to obtain information on presence of a device associated with the service provider in the self service terminal selecting one of the subset of service providers based on said information and opening a session between the self service terminal application and the selected one of the subset of service providers.

The method may further comprise on installation of a service provider storing data comprising a unique name for the service provider and at least one device related parameter supported by the service provider.

The step of identifying a subset of service providers from the plurality of service providers based on ability to support said device related parameter may comprise accessing data provided by each of the plurality of service providers on installation and identifying the subset of service providers from the plurality of service providers based on said data wherein said data comprises a unique name for each service provider and at least one device related parameter supported by each service provider.

Additionally querying each of the subset of service providers to obtain information on presence of a device associated with the service provider in the self service terminal may comprise opening a session with each service provider in the subset of service providers using the unique name for each service provider and querying each service provider in the subset to obtain said information on presence of a device associated with the service provider in the self service terminal.

Selecting one of the subset of service providers based on said information may comprise if said information indicates presence of one device selecting a service provider associated with said one device and if said information indicates presence of no devices selecting any one of the subset of service providers.

Selecting one of the subset of service providers based on said information may further comprise if said information indicates presence of a plurality of devices selecting a service provider associated with one of said plurality of devices.

In an embodiment selecting one of the subset of service providers based on said information may further comprise publishing data identifying the selected one of the subset of service providers. It may yet further comprise closing each opened session with a service provider in the subset of service providers.

In this embodiment the method may further comprise on receipt of the call running an executable arranged to perform the identifying querying and selecting steps.

In another embodiment opening a session between the self service terminal application and the selected one of the subset of service providers may comprise closing each opened session with a service provider in the subset of service providers except for the session with the selected one of the subset of service providers and passing messages between the self service terminal application and the selected one of the subset of service providers.

In this embodiment receiving a call from a self service terminal application to open a session with a service provider may comprise receiving the call at a DLL Dynamic Link Library associated with the device related parameter.

A second aspect provides one or more device readable media with device executable instructions for performing steps comprising receiving a call from a self service terminal application to open a session with a service provider wherein the call identifies a device related parameter and wherein the self service terminal comprises a plurality of service providers identifying a subset of service providers from the plurality of service providers based on ability to support said device related parameter querying each of the subset of service providers to obtain information on presence of a device associated with the service provider in the self service terminal selecting one of the subset of service providers based on said information and opening a session between the self service terminal application and the selected one of the subset of service providers.

A third aspect provides an ATM comprising a processor a plurality of service providers and a memory arranged to store executable instructions arranged to cause the processor to receive a call from an ATM terminal application to open a session with a service provider wherein the call identifies a device related parameter and wherein the ATM comprises a plurality of service providers identify a subset of service providers from the plurality of service providers based on ability to support said device related parameter query each of the subset of service providers to obtain information on presence of a device associated with the service provider in the ATM select one of the subset of service providers based on said information and open a session between the ATM application and the selected one of the subset of service providers.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings. The preferred features may be combined as appropriate as would be apparent to a skilled person and may be combined with any of the aspects of the invention.

Embodiments of the present invention are described below by way of example only. These examples represent the best ways of putting the invention into practice that are currently known to the Applicant although they are not the only ways in which this could be achieved.

One solution to the need to support multiple equivalent devices or multiple logical names for the same device is to modify the ATM application to search a registry for service providers matching the given class of device e.g. the class of keyboards in the example given earlier . However this requires the application to be modified.

Another possible solution is for the system to identify which devices are available on start up i.e. at the end of the platform load and populate a registry with the devices found. However this may lead to synchronization problems as applications may start automatically before the platform has completed its load and there may not be sufficient time to identify the devices and populate the registry before the application has opened the session. Where an application has already opened a session before the population of the registry is complete the application will not see all the devices available on the ATM. In order to resolve this the ATM would need to be rebooted after the registry has been fully populated.

A third possible solution is to only install the service providers for the devices which are actually present on the ATM. However this requires the software to be tailored for each individual ATM and prevents the same software from being installed on a large range of machines. This creates a configuration management problem as the combinations of hardware rise exponentially. Additionally the second and third possible solutions do not address the multi vendor issues of logical service name differences.

A solution which enables the system to be software plug and play is shown in which shows a further schematic diagram of an ATM application communicating with devices on the ATM. Each device is controlled by a service provider . The system includes a Manager which may be referred to as the XFS Manager where the ATM runs XFS. The methods described herein are not limited to implementation in an ATM which runs XFS and alternative standards and protocols may be used. Furthermore the use of the term registry does not limit the methods to implementations running on Microsoft Windows and any suitable data store may be used.

The Manager includes additional functionality compared to the XFS Manager shown in which enables the Manager to select a particular service provider and the associated device on receipt of a call to open a session with a service provider from the ATM application . The additional functionality may be referred to as a Resolver . The operation of the ATM application and the devices need not be affected by the additional functionality of the Manager although the devices may receive additional queries which they are already designed to respond to e.g. additional status queries . The service providers are modified to provide information on installation as described below. The Manager may comprise a DLL Dynamic Link Library which is loaded at run time or the Manager may comprise a collection of DLLs. The additional functionality of the Manager may be provided in a number of different ways and two examples are described below. In the first example described with reference to the functionality is provided by an executable which is run by the Manager and in the second example described with reference to the functionality is provided by one or more DLLs. Additional methods which may be described in terms of variations of the methods shown in are also described below.

In operation when the ATM application issues a call to open a session using a logical service name block the call is received by the Manager which causes it to run an executable block . The executable uses the data provided on installation in block which may be in a registry to identify those service providers which support the required logical service name block . A session is then opened which each of these identified service providers block and the corresponding devices are queried for presence status block . Generally these queries will identify the presence of one device which can support the particular logical service name or alternatively will identify that there are no such devices physically present in the ATM. A third possible situation is that there is more than one such device present.

If one device is present Yes in both blocks and the executable selects the service provider which is associated with that present device block e.g. if both service provider and service provider have indicated that they can support the required logical service name but device is present and device is not then the executable will select service provider . If there are no devices which are present No in block the executable selects any of the identified service providers block e.g. if both service provider and service provider have indicated that they can support the required logical service name but neither device nor device are present either service provider or service provider is selected. If more than one device is present Yes in block and No in block the executable selects any one of the identified service providers having a device which is present block e.g. if both service provider and service provider have indicated that they can support the required logical service name and both device and device are present either service provider or service provider is selected. The service provider may be selected according to any defined criteria such as 

Once the executable has selected a service provider in one of blocks the executable closes all the sessions opened in block and instructs the Manager to open a session with the selected service provider block e.g. by publishing the details of the selected service provider. The Manager then opens up the session with the selected service provider block and the interaction between the ATM application and the service provider continues with the Manager as an intermediary but without the further involvement of the executable. Where there are no devices present which can support the required logical service name No in block in the subsequent interaction between the ATM application and the service provider via the Manager the service provider will respond with a status message indicating that there is no device present and at this point the ATM application may choose to close the session.

In an example there may be three different variants of receipt printer used by a particular vendor or by multiple vendors in a multi vendor system and each of the three variants i.e. the three service providers one for each printer variant will be installed on the ATM. Each of the receipt printers has a different unique name for example 

In an example the executable which may be referred to as the Resolver may identify the service providers supporting the logical service name in block by checking the registry and may inform the Manager which service provider to load in block by modifying the registry such as the Windows Registry .

In a further example the above system may be implemented using a collection of DLLs which may in an example be referred to as the Resolver and shows an example flow diagram of a method of operation of an ATM in such an embodiment. On installation each service provider registers its unique name and details of the logical service name it supports block as described above with reference to block . Each of the DLLs within the collection of DLLs may be fixed as the service provider for a particular logical service name e.g. in a fixed one to one relationship and therefore when the ATM application issues a call to open a session in block this is directed to the corresponding one of the collection of DLLs block . The DLL uses the data provided on installation in block which may be in a registry to identify those service providers which support the required logical service name block . A session is then opened which each of these identified service providers block and the corresponding devices are queried for presence status block .

As in there are three possible outcomes no device present one device present or more than one device present. If one device is present Yes in both blocks and the DLL selects the service provider which is associated with that device which is physically present block . If no devices are present No in block the DLL selects any of the identified service providers block . If more than one device is present Yes in block and No in block the DLL selects any one of the identified service providers having a device which is present block . The service provider may be selected in block according to any defined criteria including but not limited to one of those detailed above in relation to . Once the DLL has selected a service provider in one of blocks the DLL closes all the sessions with service providers except for the session with the selected service provider block . The DLL then passes through application commands to and from the selected service provider acting as an intermediary between the selected service provider and the Manager block . Where no device is present No in block in the subsequent interaction between the ATM application and the service provider via the Manager and the DLL the service provider will respond with a status message indicating that there is no device present and at this point the ATM application may choose to close the session.

In this example the operation of the collection of DLLs the Resolver is transparent to the application blocks in a corresponding manner to the operation of the executable in however in this method one of the collection of DLLs remains as an intermediary between the service provider and the ATM application whereas in the executable provides instructions to the Manager and then plays no further part in the session.

The DLL may open a session with each identified service provider in block by loading the DLLs for each of the service providers that have registered their capability for that logical service name and querying the status of each appropriate device e.g. by issuing the device status command to each service provider as described above .

Whilst in the above two examples the identification and selection of a service provider is performed on the basis of the logical service name which is included in the call to open a session in other examples alternative parameters may be used. In further examples the device class may be used and the method of operation of an ATM may be a modified version of that shown in or . The device classes used may be as defined in the CEN XFS standard. In such an example on installation the service provider provides both its unique name and the device class it supports in a corresponding manner to blocks and . This data may be used to populate a registry or stored elsewhere. A device class may be included in the session call by the ATM application either in addition to or instead of a logical service name in a step corresponding to step or . The device class may then be used by the executable to identify service providers in a corresponding manner to block . In the DLL variant the device class is used to determine which DLL from the set of DLLs is loaded in a block which corresponds to block and to identify service providers in a corresponding manner to block . Having identified service providers the methods may continue as shown in blocks or blocks .

In further examples which may be considered variants of the methods shown in whilst the call to open a session may include the logical service name and in some embodiments not include the device class the device class may still be used to identify service providers in blocks corresponding to blocks and . In such examples each service provider provides its unique name and the device class which it supports on installation in a corresponding manner to blocks and and the methods may include an additional step as described below. Where an executable is used in a step between blocks which correspond to blocks and the executable translates from the logical service name to the device class. This may use a look up table or any other suitable method. Beyond the identification of the service providers the method may continue as shown in blocks . Where a DLL is used the translation may occur between blocks corresponding to blocks and such that the DLL which corresponds to the device class is loaded in a block corresponding to block . Alternatively the translation may occur between blocks corresponding to blocks and . Again the translation may be performed using any suitable technique including but not limited to using a look up table. Following the identification of the service providers in a block corresponding to block the method may continue as shown in blocks .

In yet further examples the service providers may on installation provide details of their unique name and both the logical service name and device class which they support. In such an example one or both of the logical service name and the device class may be used to identify the service providers in response to a call to open a session.

It will be appreciated that whilst in the examples above the call to open a session which is issued by the ATM application is described as including a logical service name and or a device class the calls may include many other parameters. In the above description only those elements which are necessary to describe the methods are mentioned and many additional elements parameters may be present. Similarly it will be appreciated that shows only a subset of the elements within an ATM.

The methods described above enable the same ATM application and Manager to be installed on all ATMs irrespective of the actual devices installed on any one machine. The ATM application does not need to know what devices are physically installed on the particular ATM and or what unique names these devices respond to. The changes made to the system i.e. the changes made to the Manager by the introduction of the Resolver which comprises an executable or a collection of DLLs are transparent to the ATM application which makes the ATM application less vendor and device specific and the fact that the application does not require any changes may be a significant benefit where the application is provided by a third party. Furthermore the methods enable extra service providers to be added e.g. during the life of the ATM without requiring any changes to the application. The service provider can be installed at any time and on installation it provides its unique name and details of the logical service name and or device class that it supports. By populating the registry on installation of each service provider and then resolving those devices which are available when a session is opened the latency problems described above are avoided and the system is much more flexible e.g. upgrades are enabled . Additional reboots are not required and the configuration management problems do not arise.

Where a single device supports multiple logical service names or multiple device classes such as a recycling device which may be capable of both dispensing cash and receiving cash e.g. as a deposit the device may be considered logically as two modules i.e. as two logically separate devices controlled by two logically or physically different service providers.

The methods described above provide a vendor independent solution. The ATM application may be produced by any vendor as it uses standardized session calls. In addition or instead the devices may be provided by any vendor because the ATM application is not required to know the unique names of all the devices and the Manager uses logical service names which may be standardized or defined for a particular vendor s ATM application or standardized device classes in order to associate the calls made by the ATM application and the particular service providers that can offer the required device.

Whilst in each service provider is shown communicating with a single device this is by way of example only. In some situations a service provider may control more than one device e.g. a service provider may control two different receipt printers however this is not practical in many circumstances particularly where two devices have different interfaces e.g. WIN32 and proprietary interfaces .

The examples given above refer to multiple different receipt printers by way of example only. Receipt printers are just one example of a device which may be included within an ATM and where multiple variants may be available. Other examples include but are not limited to dispensers keyboards displays card readers or any other device within an ATM. As described above the methods are also not limited to any particular ATM implementation i.e. the methods are not limited to Microsoft Windows trade mark and or XFS based ATMs. Furthermore whilst the above description refers to ATMs this is by way of example only and the methods are applicable to any type of self service terminal SST including for example ticket machines teller assist machines self checkout machines and vending machines.

Any range or device value given herein may be extended or altered without losing the effect sought as will be apparent to the skilled person. It will be understood that the benefits and advantages described above may relate to one embodiment or may relate to several embodiments. It will further be understood that reference to an item refers to one or more of those items.

It will be understood that the above description of a preferred embodiment is given by way of example only and that various modifications may be made by those skilled in the art.

The above specification examples and data provide a complete description of the structure and use of exemplary embodiments of the invention. Although various embodiments of the invention have been described above with a certain degree of particularity or with reference to one or more individual embodiments those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of this invention.

The methods described herein may be performed by software in machine readable form on a storage medium. The software can be suitable for execution on a parallel processor or a serial processor such that the method steps may be carried out in any suitable order or simultaneously. This acknowledges that software can be a valuable separately tradable commodity. It is intended to encompass software which runs on or controls dumb or standard hardware to carry out the desired functions. It is also intended to encompass software which describes or defines the configuration of hardware such as HDL hardware description language software as is used for designing silicon chips or for configuring universal programmable chips to carry out desired functions.

Those skilled in the art will realize that storage devices utilized to store program instructions can be distributed across a network. For example a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively the local computer may download pieces of the software as needed or execute some software instructions at the local terminal and some at the remote computer or computer network . Those skilled in the art will also realize that by utilizing conventional techniques known to those skilled in the art that all or a portion of the software instructions may be carried out by a dedicated circuit such as a DSP programmable logic array or the like.

The steps of the methods described herein may be carried out in any suitable order or simultaneously where appropriate. Additionally individual blocks may be deleted from any of the methods without departing from the spirit and scope of the subject matter described herein. Aspects of any of the examples described above may be combined with aspects of any of the other examples described to form further examples without losing the effect sought.

