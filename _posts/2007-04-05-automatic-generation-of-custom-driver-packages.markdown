---

title: Automatic generation of custom driver packages
abstract: A structured INF source language that can coexist natively within higher level language source files is used to improve the consistency and quality of custom driver package components. A common source code file includes machine readable instructions in the structured inf source language for building various components of the custom driver packages for different target customer platforms. The number of errors introduced when changes are made for particular features, configuration, and customization keys is reduced by using a single source code file. The source code is parsed to automate the production of installation scripts, online internal documentation, and enabling per device, per platform, per operating system, and per customer control. An approval process with a security feature is used to ensure that the changes to the source code are authorized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890925&OS=07890925&RS=07890925
owner: NVIDIA Corporation
number: 07890925
owner_city: Santa Clara
owner_country: US
publication_date: 20070405
---
The present invention generally relates to software installation scripts INF files and more specifically to automatic generation of the INF files from device driver source code.

Device information files INF files are a critical piece of the installation image which are used to configure the software that is installed e.g. device drivers for a target customer platform. An INF file is a text file that contains all the information necessary to install a device such as driver names and locations registry information version information operating system hardware device version and platform specific information that is necessary for correct operation and that may not be discoverable. Typically the INF files contain registry keys and values for those keys which are conditionally installed for various devices platforms operating systems and hardware vendors.

Conventionally INF files are generated manually and then verified by visual inspection. Changes to features configuration and customization of the registry keys in installation scripts are conveyed through manual process by cross referencing documents and instructions received from engineers that articulate the behavioural effects of these registry keys in software source code. The process is time consuming and prone to errors. The various components of a custom driver package are prepared independently so that inconsistencies may exist between the INF files documentation and enabling files. Changes in code or the operating system may require repeated manual adjustments of the documentation and the installation files. Sometimes the separate documentation of these registry keys diverges from actual behaviour in software or in the installation script. Yet this connection is critically important to determine the combination of registry keys and settings used in customer enabling in order to correctly configure and customize software for target customer platforms.

Accordingly what is needed in the art are systems and methods for improving the quality of the various components of a custom driver package documentation and installation scripts by reducing the number of errors introduced during the editing process while also reducing the time needed to validate the changes.

Systems and methods that automatically produce various components of custom driver packages for different hardware configurations increase the quality of those custom driver packages by using a common source code file. A structured INF source language that can coexist natively within higher level language source files is used to represent machine readable instructions that are inserted into the common source code for building the various components. The number of errors introduced when changes are made for particular features configuration and customization keys is reduced by using the single source code file to produce each component of a custom driver package. The source code is parsed to automate the production of installation scripts online internal documentation and enabling per device per platform per operating system and per customer control. An approval process with a security feature is used to ensure that the changes output in the custom driver packages are authorized. The structured INF source language enables improvements in consistency and quality of the custom driver packages.

Various embodiments of a method of the invention for generating custom driver package components include inserting commands specifying customization information for a registry key into source code for a custom driver package checking that a syntax of the commands is valid checking the commands into a database that stores the source code parsing the source code to produce a component of the custom driver package based on the customization information and processing the source code to produce an executable device driver that is configured to communicate with a device of a target platform.

Various embodiments of the invention for generating custom driver package components include a memory and a processor. The memory stores a source code file that is configured to define device driver functions and specify registry keys including customization information. The processor is configured to execute a build process to parse the source code and produce the device driver and the custom driver package components for a target platform based on the customization information.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention.

Using an automated process increases the consistency and quality of custom driver package components while reducing the time needed to introduce a change for features configuration and customization keys. The automated process allows for engineers to retain the ability to ensure that their changes appear correctly in builds for customer platforms while reducing the number of errors caused by manual editing. Using a single source code base for the various components of the custom driver package ensures that the documentation and installation scripts INF files reflect the same behaviour and are consistent. The structured INF source language that can coexist natively within higher level language source files enables the insertion of machine readable instructions into the common source code for building the various custom driver package components.

Memory bridge which may be e.g. a Northbridge chip is connected via a bus or other communication path e.g. a HyperTransport link to an I O input output bridge . I O bridge which may be e.g. a Southbridge chip receives user input from one or more user input devices e.g. keyboard mouse and forwards the input to CPU via path and memory bridge .

A processing subsystem is coupled to memory bridge via a bus or other communication path e.g. a PCI Express Accelerated Graphics Port or HyperTransport link in one embodiment processing subsystem is a graphics subsystem that delivers pixels to a display device e.g. a conventional CRT or LCD based monitor . A system disk is also connected to I O bridge . A switch provides connections between I O bridge and other components such as a network adapter and various add in cards and . Other components not explicitly shown including USB or other port connections CD drives DVD drives film recording devices and the like may also be connected to I O bridge . Communication paths interconnecting the various components in may be implemented using any suitable protocols such as PCI Peripheral Component Interconnect PCI Express PCI E AGP Accelerated Graphics Port HyperTransport or any other bus or point to point communication protocol s and connections between different devices may use different protocols as is known in the art.

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip. The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

The connection of processing subsystem to the rest of system may also be varied. In some embodiments processing subsystem is implemented as an add in card that can be inserted into an expansion slot of system . In other embodiments a processing subsystem can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of processing subsystem may be integrated on a single chip with CPU .

Processing subsystem can be a graphics processor in a unified memory architecture UMA embodiment in such embodiments little or no dedicated graphics memory is provided and processing subsystem would use system memory exclusively or almost exclusively. In UMA embodiments processing subsystem may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI E connecting the processing subsystem to system memory e.g. via a bridge chip.

Any number of engines can be included in processing subsystem . For instance multiple engines can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of the engines could be integrated into a bridge chip. The engines in processing subsystem may be identical to or different from each other for instance different engines might have different numbers of cores different amounts of local memory and so on. Where multiple engines are present they may be operated in parallel to process data at higher throughput than is possible with a single engine.

Systems incorporating one or more processing subsystem may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

The RegKey registry key change enters a submission process for peer review and approval by a person in the position of a development manager . Registry keys are used to express customization information specifying features and functionality such as resource management video OpenGL and the like. If regkey change is approved then a signature secure signature is generated as a one way hash of the regkey change . Secure signature is added at the end of the key definition section of source code and regkey change is checked into the database that stores source code . Secure signature indicates that regkey change has been approved and secure signature can be validated before regkey change is built as part of custom driver package .

In some embodiments of the present invention registry keys are entered into a header file that is included in source code . When regkey change and secure signature are checked into the database they become part of the source code . Source code is the unified code that is used during a build process to produce the various components of custom driver package such as documentation INF file and OEM INF file . Build process is executed by a CPU such as CPU to parse source code and process scripts that include commands to automatically generate the components of custom driver package . Source code is stored in a memory that is accessible by the process that performs build process . Build process may be configured to validate that secure signature matches the registry key in source code before producing INF files and OEM INF files . A single regkey change may be included in many OEM INF files or may be included in only a single OEM INF file . Therefore each regkey change can be leveraged to produce custom driver packages for multiple customers and configurations.

Build process can also be configured to produce audit reports . Audit reports can be used to identify the number of registry key changes that do not have valid hashes and other characteristics of source code . Documentation is input to DNE do not enable filter to produce OEM enabling information . DNE filter can be configured to remove registry keys that should not be exposed such as registry keys for customer specific workarounds. OEM enabling information is provided by an OEM team to communicate the customization options to different OEMs.

Descriptors representing registry keys are included in the custom driver package source code using a scripting tool. Syntax commands of the structured INF source language are designed to be used within compiler header files to allow build process to perform scripted post processing to automatically generate custom driver packages including customer INF installation files online documentation auditing reports and information for program managers and customer enabling . By using a single source code to produce the various components of custom driver packages it is possible to avoid replication of engineering effort to maintain consistency between different files and reduce the opportunities for error when duplicating changes in multiple files.

TABLE 1 includes prior art code for a video post processing feature that is included in an INF file to enable various overdrive states for a LCD liquid crystal display .

In the prior art code shown in TABLE 1 four define instructions are used to specify the registry key name two setting values and a default value. Similar changes would be made in the documentation and any other components for each custom driver package that includes the LCD overdrive video post processing feature.

TABLE 2 includes example code for a registry key that decorates source code to define the video post processing feature. In some embodiments of the present invention the code for the registry key is included in a header file and in other embodiments it is included directly in source code . The header file is included within source code in order to derive the various components of the custom driver package in a single source.

The syntax commands shown in TABLE 2 allow descriptive information about how to format the registry keys and values within INF files and OEM INF files . Flags can be used to allow per registry key and per value controls. Specifically flags may be used to enable visibility of features for particular customers indicate supported devices platforms OEM s operating systems and the like. To help a CPU parse source code the syntax commands are inserted in a defined format in the header file within C C comments bounding the actual definition of the registry key which is used within driver code included in source code .

Note that the four define instructions used in TABLE 1 to specify the registry key name two setting values and a default value are included in the code shown in TABLE 2. Additional new commands are used to specify information needed for documentation audit files and the build process as described further herein. The command is only recognized if on a line initiated by the C C comment declaration Spaces and other characters before the are supported and will be ignored. Where applicable the command should precede the header definition to which it applies. Script commands to be parsed by build process are prefixed by a and follow the general syntax of Commands are case insensitive.

There are three basic non exclusive functions of commands to assist script processing during the build process to directly affect INF file generation and for documentation purposes without affecting INF file generation. The two commands BeginKey and EndKey bound the lines of code containing the registry key definition and the script processing. Therefore processor commands begin after BeginKey and end before a EndKey as shown in TABLE 2. As build process is parsing a registry key definition section it will assume default values for commands which are not present. The processor commands shown in TABLE 3 are minimally necessary even for documentation only purposes and should be included in each registry key definition section. The registry key will not appear in an INF file or unless the syntax is correct and includes the minimally required fields.

The processor commands shown in TABLE 4 are not necessary but are recommended for inclusion in the registry key code if build process will produce INF file or OEM INF .

Some processor command lines must be arranged next to lines of code so build process can pick up text from the header code define. For example 

The next non comment line after ValueDescription will be parsed by the build process to extract the value field 0x10000000 from the C header definition which is then included in INF file or OEM INF and documentation by build process .

Other additional command modifiers that apply additional meaning to the registry key or value are inserted in between . . . Description and the C define for example 

Command parameters separated by a are mutually exclusive options. For example the following are not combinable options and only one may be provided DWORD SZ MULTI SZ BIN. Parameters may be expressed as comma delimited strings numbers in C base formats 0x58CB9E12 96.70 42 pre defined constants MOBILE DESKTOP WIN2K VIDEO MOD and defined constants BUILD1312 .

A constant definition command Define defines a Constant to an optionally provided Parameter. The association applies from the point of definition onwards across all definitions sections. An example of the constant definition command is used to define a constant R85 Define BUILD R85 R85 

A begin key section command BeginKey is used to declare the beginning of the Registry Key definition and the module owner of the definition. This is required for key processing. In some embodiments of the present invention can be VIDEO MOD RM MOD DISPLAY MOD D3D MOD OPENGL MOD CPL MOD or UNKNOWN MOD Default or other abbreviated token names used to represent which functional organization group owns or is responsible for the key entry.

An end key command EndKey is used to declare the end of the Registry Key and optionally a hash of the section. Like the begin key section command this command is also required for key processing. is an optional one way hash of the key definition section. If used this will be auto generated by submission process for insertion into source code and build process for checking during generation of custom driver package .

A feature group command FeatureGroup is used to specify the product feature to which this key belongs. This is a documentation syntax but may also affect how keys are grouped within an INF file. The operand may be a pre defined or variable name. The feature group command may be used as follows 

A key path command KeyPath specifies which type of Registry Hive Key this Registry Key belongs under. This affects how the key is incorporated in the INF. Multiple KeyPath s can be entered for the same key. In some embodiments of the present invention is one or more of the following HKR Default installation relative path HKCR class root HKCU current user and HKLM local machine . The key path command may be used as follows 

A version command Version specifies the releases to which a particular registry key will be conveyed in documentation form. This command may contain one or two parameters which may be numerical or text. If a single version number is supplied the registry key applies to the indicated build and forward. If two versions are supplied this represents a range within which when the registry key was applicable. An example of the version command to specify that the registry key applies to release 95.00 and forward is Version 95.

A key name command KeyName specifies the human readable name of the registry key which will be used as the heading when output in any documentation form. If none is provided then the name found in the define under key description will be used. An example use of the key name command is KeyName Overdrive Control 

A key description command KeyDescription specifies descriptive text as to the purpose and usage of the registry key preceding where a registry key is defined. This command will cause the next non comment line to also be included in documentation and will cause build process to use the parsed Key Name. The key description command may be used as follows 

A value description command ValueDescription is used to provide descriptive text as to the purpose and usage of the Value preceding where a Value is defined. This command will cause the next non comment line to also be included in documentation and will cause build process to use the parsed Value. The value description command may be used as follows 

A value type command ValueType is used to declare the Value to be one of the pre defined types. This is used to generate the INF file section type correctly and affects how the key is incorporated in the INF by build process . In some embodiments of the present invention is one or more of the following DWORD 32 bit value SZ string MULTI SZ unicode string BIN binary value . An example use of the value type command is ValueType DWORD.

A value default command Value Default is used to provide a default value when no registry key value is provided. If no parameter is provided then the value in the subsequent non comment line is assumed as the default. This affects how the key is incorporated in the INF file by build process . The value description command may be used as follows 

A value recommendation command ValueRecommendation is used to provide a recommended value which should be used in most cases for enabling most customers. This is a documentation only syntax.

A value format command ValueFormat is used to declare a Value to use either a enum or bit field style for values. This affects INF file generation. In some embodiments of the present invention is one or more of the following ENUM Default has one or more options as defined values or BITFIELD Combines options as bits within the value field . An example use of the value format command is If ValueOptions ENUM.

Submission comments may be included in regkey change to provide additional information on changes using a command SubmissionComments . This is a documentation only syntax and must include a version number string or numeric as well as text. Including the date is also strongly recommended. An example use of the submission comments command is SubmissionComments 96.70 9 1 06 Change added for Toshiba 

A key visibility command KeyVisibility is used to assert if how the Registry Key should be enabled externally. This is a documentation only syntax. In some embodiments of the present invention is one or more of the following ENGINEERING TEST ONLY Default not exposed externally OEM USABLE DONT ADVERTISE selectively enabled and OEM VISIBLE provided to OEM s an option . The value description command may be used as follows 

A value visibility command ValueVisibility is used to assert if how specific Values of a Registry Key should be enabled externally. This must follow a ValueDescription command and precede the actual Value define. By default all values are exposed if the key is exposed. This affects which INF files will include the key. In some embodiments of the present invention is one or more of the following ENGINEERING TEST ONLY not exposed externally OEM USABLE DONT ADVERTISE selectively enabled OEM VISIBLE Default provided to OEM s . The value visibility command may be used as follows 

A supported OS command SupportedOS is used to specify an operating system OS . The provided Value is the default which is used when no registry key value is provided. This affects what and how INF files are produced. In some embodiments of the present invention is one or more of the following ALL Default all supported O S s WIN2K Windows 2000 and all service packs WINXP Windows XP and all service packs VISTA RTM Windows Vista as first released to manufacturing and NOT where the specified O S s are not supported. An example use of the supported OS command is SupportedOS WINXP VISTA RTM.

A platforms command Platforms is used to assert the platforms on which the key should be applicable. This affects which INF file will include this key. In some embodiments of the present invention is one or more of the following ALL default MOBILE DESKTOP WORKSTATION and NOT where the specified platforms are not supported.

A supported OEM systems command SupportedOEMSystems is used to assert the platforms on which the registry key should be applicable. This affects which INF files will include the registry key. In some embodiments of the present invention is one or more of the following ALL default a 16 bit Subsystem Vendor ID in hex indicating the system manufacturer a 32 bit Subsystem Vendor Device ID indicating a specific product NOT where the specified systems are not supported. The following is an example where the defined registry key is supported on a specific companies platform but not systems from an other OEM 

A supported adapters command SupportedAdapters is used to assert the adapters to which the key should be applicable. This affects which INF files will include the registry key. In some embodiments of the present invention is one or more of the following ALL default a 16 bit Subsystem Vendor ID in hex indicating the manufacturer a 32 bit Subsystem Vendor Device ID indicating a specific product a 48 bit Vendor Device and Subsytem Vendor ID a 64 bit Vendor Device and full Subsytem ID and NOT where the specified adapters are not supported. The following is an example where the defined registry key applies only to NVIDIA Quadro NVS 120M SupportedAdapters .

In step approval for including regkey change in source code is requested via submission process . During submission process regkey change may be reviewed for quality and accuracy. Development manager determines whether or not regkey change is approved for inclusion in source code and in step if approval is not received regkey change is discarded. Development manager may provide approval for a submitted regkey change to submission process electronically. In step an approved regkey change is checked into the database that stores source code .

The secure signature mechanism includes generating the secure signature inserting the secure signature into source code and validating the secure signature when source code is processed by build process . Although the secure signature mechanism is described in the context of source code for producing custom driver packages the secure signature mechanism may be used to certify changes to any type of source code file.

In step build process parses source code to generate an installation script as a component of custom driver package . TABLE 6 includes a portion of an installation script that is produced from the portion of source code shown in TABLE 2.

In step source code is processed in build process to produce an executable device driver binaries and also the installation scripts. In some embodiments of the present invention the device driver is unified meaning that it can be used with any of the target platforms provided by any vendor. Importantly the same source code is used to produce the device driver and the various components of custom driver package .

The structured INF source language enables improvements in consistency and quality of the custom driver packages. Using a common source code to produce the device driver and the custom driver package components allows for engineers to retain the ability to ensure that their changes appear correctly in builds for customer platforms while reducing the number of errors caused by manual editing. The automated build process advantageously increases the quality of custom driver package components while reducing the time needed to introduce a change for features configuration and customization keys. In addition to allowing for automatic generation of the production of installation scripts online internal documentation and enabling per device the script commands written in the structured INF source language that are inserted into the source code allow per platform per operating system and per customer control for each registry key.

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

