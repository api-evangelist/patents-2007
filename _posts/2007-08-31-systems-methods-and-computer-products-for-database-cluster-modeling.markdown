---

title: Systems, methods and computer products for database cluster modeling
abstract: Generating in a computer system and deploying a data model of a plurality of database cluster configuration availability solutions over a computer network by creating a database cluster configuration modeling specification including objects contained in a unified model language diagram providing a definition of a database cluster configuration data model. Creating the database cluster configuration data model using the database cluster configuration modeling specification and upon receiving signals from a graphical user interface or from XML batch data files or from application programming interfaces, indicating the definition of the cluster configuration model. After creating the graphical database cluster configuration data model, constraints that specify a valid logical configuration are validated and the solution is transformed into data understandable by database cluster manager software applications and then transmitted over a network to multiple cluster manager targets to be incorporated as database cluster configuration availability solutions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730091&OS=07730091&RS=07730091
owner: International Business Machines Corporation
number: 07730091
owner_city: Armonk
owner_country: US
publication_date: 20070831
---
This application contains subject matter which is related to the subject matter of the following co pending applications each of which is assigned to the same assignee as this application International Business Machines Corporation of Armonk N.Y. Each of the below listed applications is hereby incorporated herein by reference in its entirety U.S. patent application Ser. No. 11 849 021.

IBM is a registered trademark of the International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be trademarks and registered trademarks or trade or product names of International Business Machines Corporation or other companies.

The exemplary embodiments relate generally to networked computer system administration and management relating to storage management. More particularly the exemplary embodiments relate to generating and graphically displaying database cluster configuration modeling solutions for database cluster requirements. The exemplary embodiments can be applied to any system running any service provider application.

In general clusters are groups of computer systems which can provide advantages in availability service uptime through redundant hardware. For example if systems A and B are in a cluster together and system A fails then its workload can be relocated to system B. In clusters that involve more systems or nodes in cluster parlance the specification of the workload relocation can be more complex. Clusters manage resource groups which are taken to be a collection of resources hardware or software that provide a service to clients and can be treated as a unit. The specification of the full configuration model of a cluster and DB2 instances contained within it can be both error prone and time consuming given the large amount of data which must be specified. This is further complicated by the fact that different cluster managers the software packages that manage clusters have different models of the software and hardware that the cluster contains for example Oracle s RAC system provides a clustered database manager instance and comes with associated configuration tooling. However as of the 10 g release it appears that the hardware node NIC network and database configuration steps are handled by separate tools. RAC is also tightly coupled with Oracle s own cluster manager and thus provides no cluster independent abstraction. Additionally most database administrators are not familiar with clustering or its associated terminology which creates usability issues when databases must be clustered. These problems have been observed in general in many types of service provider networked database cluster applications. Thus problems with configuring networked database clusters for high availability are not limited to the above mentioned applications. Other applications and vendors are similarly affected.

Therefore the need exists for a modeling system that permits the user to specify the configuration of a clustered database instance in terms of familiar hardware node system network interface network and database instance database path objects thus causing the specification of the full configuration model of a cluster and DB2 instances contained within to contain few errors and take a reduced amount of time to prepare given the large amount of data which must be specified.

Further the need exists for a modeling system where these objects are contained in a unified model where the configuration is specified at a logical level that is independent of the 3rd party cluster manager which manages the configuration. This provides a complete specification of the cluster configuration within a single modeling tool for specifying the configuration of different cluster managers that have different models of software and hardware and permits the user to take a logical snapshot of the cluster s configuration.

Finally the need exists for a modeling system that allows for easy version to version migrations of DB2 instances which can require different specifications to the underlying cluster manager as well as simplifying cluster manager to cluster manager migrations because most database administrators are not familiar with clustering or its associated terminology which creates usability issues when databases must be clustered.

A method and system of generating by a computer processor a plurality of logical symbolic representations comprising a single model of an entire database cluster hardware and software . This representation of the single model of the entire database cluster is specified logically and independent of the cluster managers individual models. Cluster availability solutions are derived from use of the representation of the single model of the entire database cluster and a plurality of database cluster configuration modeling solutions can be displayed on a computer display then the entire database cluster configuration modeling solutions can be transmitted and deployed over a network to multiple cluster managers where in any given cluster there is only a single cluster manager in use. The core operations of the method include creating a database cluster configuration modeling specification including objects and paths contained in a unified model diagram which provides a definition of a database cluster configuration model from which a data model of the database cluster configuration modeling solution is built. The data model of the database cluster configuration is created from the sub operations of receiving the definition of the database cluster configuration model either through a user interface UI or from an XML file or from the cluster manager via API calls. The user interface can be any one or more of a text based user interface a graphical user interface GUI an interactive GUI or any variation of an interactive configuration text and or graphical user interface. The definition can also be received from Extensible Markup Language XML batch data files or from an existing database cluster through an application programming interface. From the definition a database cluster configuration data model is built. Constraints are checked that specify a valid logical database cluster configuration for the data model. Then after displaying the valid logical database cluster configuration said configuration is transformed from a data model to data easily understood by cluster management software i.e. cluster managers and the transformed solution is transmitted over a network to multiple cluster managers as a single configuration model that can be used to manage multiple database cluster instances on the network however in any given cluster there is only a single cluster manager in use. Once a logical model is configured and verified to be valid against a set of constraints the service provider transforms the logical model into a form that is transmitted to and understood by cluster managers. The logical model is specified in a cluster manager independent fashion so this step has to determine what each object and or connection between objects in the logical model represents in the cluster manager s configuration model. This specification in terms of the cluster manager s configuration model is then sent to the cluster manager via API calls which are also cluster manager specific . The entire unified model language diagram of the database cluster definition that is used to create the dynamic data model representing the plurality of database cluster configuration modeling solutions can be displayed enabling a user to visualize and or edit the dynamic database cluster solutions that are implemented over the network. The above operations and sub operations can be repeated at any stage of any one of the operations and or sub operations for generating a data model of a plurality of database cluster configuration availability solutions or the operations and sub operations end when the constraints are satisfied and when there are no more solutions required thus completing the operations.

Exemplary embodiments of the method and system of generating displaying and transmitting by a computer processor over a network a plurality of logical symbolic representations including representing generalized tree data structures in which nodes may have more than one parent other representations can also be used of a plurality of database cluster high availability configuration modeling solutions to an operator and or user are described in detail below. The disclosed exemplary embodiments are intended to be illustrative only since numerous modifications and variations therein will be apparent to those of ordinary skill in the art. In reference to the drawings like numbers will indicate like parts continuously throughout the view. The exemplary embodiments disclosed herein address problems in service uptime availability of groups of computer systems including database operations referred to herein as database clusters . The disclosed exemplary embodiments can be applied to any system running any service provider application. Further the terms a an first second and third etc. herein do not denote limitations of quantity but rather denote the presence of one or more of the referenced item s .

A database cluster configuration modeling solution method herein referred to as method and a database cluster configuration modeling solution system herein referred to as system in a computer system network herein referred to as Network are illustrated in respectively. illustrates a graphical image of a database cluster configuration information flow herein referred to as cluster config info flow .

Referring to system includes computer workstation processor which contains memory . Algorithm unit resides in memory and contains a plurality of algorithms including first algorithm A and second algorithm A up to nth algorithm An. Also residing in computer workstation processor is program unit containing program . Memory also contains a dynamic data model definition repository which contains a plurality of repository entry locations R R R R and up to Rn which hold and or store unified modeling language UML diagram data D which represents the data shown in Table 1 and Table 2 database cluster configuration modeling specification data D which maps to the contents of Data Model in cluster config info flow existing database cluster configuration data D constraint data D up to a plurality of dynamic node network and path data Dn and node network and path logical symbolic representations symbols S S S respectively up to Sn. Note dynamic data model definition repository can be actual or virtual memory either on board or external to computer workstation processor .

In the exemplary embodiments system includes a combination of controllers including display controller memory controller and input output I O controller a plurality of interfaces including interfaces cooperatively connected and implemented by either software and or hardware to a database cluster configuration graphical user interface program herein referred to interchangeably as config GUI program implemented by either software and or hardware and a set of application programming interfaces herein referred to as API and API implemented by either software and or hardware and a combination of computer peripheral devices cooperatively coupled to system including display a set of input devices including keyboard and mouse network interface and output device via standard interface connectivity. Network interface cooperatively couples computer workstation processor via network where network can be a wide area network such as the Internet or a local area network including an intranet or an extranet to a plurality of networked computer systems including a plurality of DB2 database storage devices H H H up to Hn in a cluster configuration physically virtually or logically implemented as a plurality of DB2 storage systems on network including sys sys sys up to sys n used in data storage and retrieval operations.

Display can render displays of the following graphical images and or text representing unified modeling language UML diagrams herein referred to interchangeably as unified modeling diagrams graphical images and or text representing database cluster configuration modeling specifications graphical images and or text representing a plurality of database cluster configuration data modeling solutions including objects and paths contained in the unified model diagram included in Table 1 and Table 2 providing a definition of a database cluster configuration model where the objects include nodes networks network interfaces and paths which are represented by boxes arrows and lines. In the exemplary embodiments illustrates a graphical image of a database cluster configuration information flow i.e. cluster config info flow which represents three bidirectional bijective reversible sources of configuration information flow where logical configuration information can be either pulled from or sent to any and or each of these sources where the config GUI program can be a program communicating with program and the data model is a source and the XML file is a source and the cluster manager software is a source further data model would be the address space for the configuration GUI program. is a source and the XML file is a source and the cluster manager software is a source. Cluster manager software is a program communicating with program by way of API calls or calls to routines and or algorithms. Further data model serves as a central repository in the database cluster configuration information flow where the logical building blocks of possible multiple high availability solutions for multiple DB2 storage systems reside as illustrated in and . Furthermore display can display a graphical rendering of the data model as illustrated in . The unified model diagram of a model database clustered instance configuration definition is shown below in two parts the first part in TABLE 1 and the second part in TABLE 2. The UML diagrams are a visual representation of the structure of the data model graph that the service provider is building. In the bottom left box in Table 1 there is an Interface that is connected to Node and Physical Network boxes which indicate that the Interface node in the graph is the child of a single Node mode and is also a child of a single Physical Network. The multiplicities on these connections also indicate that a Node may be the parent of N Interfaces and a Physical Network can be the parent of between 2 and N Interfaces. The data listed within the Nodes Interface Physical Network and the rest of the boxes indicate the set of information that each node of that type in the network contains. The complete set of such nodes and their interconnections form the data model graph that models the database cluster configuration that is built form the combination of the existing database cluster configuration data D pulled from the cluster manager software and or the XML file and or the user input from the interactive configuration GUI program all illustrated in the database cluster configuration information flow of .

Table 1 and Table 2 compose the unified modeling language diagram data D stored in repository entry location R of the dynamic data model definition repository included in computer workstation processor . The core of method and system is a graph that models the clustered instance s configuration. The two unified modeling diagrams in Tables 1 and 2 above show one possible structure for this model graph i.e. the UML diagram composed of Tables 1 and 2 describe the structure of the graph the service provider operator of system can build. The two unified modeling diagrams are divided and shown in two tables for convenience of layout alone. The Instance node in Table 2 is the same Instance node in the in Table 1 however in Table 2 the Instance node is expanded out to show the dependencies i.e. the parent child relationships under the Instance node. Internally system would store one large graph in repository entry location R of the dynamic data model definition repository . Boxes and lines in the UML diagrams of Tables 1 and 2 specify containment relationships with a parent being above a child. The numbers associated with each line denote the multiplicity of the relationship e.g. Instances contain 1 . . . N one to N Partitions . Semi colons in the multiplicity relationships denote a binary condition. For example the FailoverPolicy can contain either 0 or 1 to N of both of its children because the types of children are mutually exclusive. A single failover policy cannot contain both StandbyNode entries and SystemPair entries in the model. The nodes in the model contain data elements which specify the represented object s properties. None of these properties are tied to specific cluster manager information. In Table 1 there is a Node block which can be the parent of an Interface. There is also a Physical Network block which can also be the parent of an Interface. An Interface resides within a cluster node which is a computer system but the Interface is also part of a network. Thus system can build a graph that is defined by the composition of Tables 1 and 2.

In the exemplary embodiments the reversible transformations from the config GUI program and the XML file to the data model can be accomplished with no extra information but the transformation from the data model to the cluster manager software would be poor if done directly. This is because the logic represented in the UML diagram in Tables 1 and 2 are easily understood by the database administrators i.e. the service provider but that same logic representation is not easily understandable to the cluster manager applications and this is because the model stores some information which is not universally stored by cluster managers. These objects and properties are stored by the DB2 instance in a binary configuration file to ensure that the model bijective reversible arrows cluster mapping remains reversible. Thus referring to and the service provider sends the logical definition UML diagram data D in a translated version to the cluster manager software that the cluster manager can understand and use.

The exemplary embodiments are directed to how to model configurations of a data model to specify an abstract logical model of how a database cluster looks in terms of database administrators and or service providers ease of understanding and configuration while providing a translation layer between the abstract logical model and the plurality of cluster managers applications running on the clusters where the abstract logical model is translated and mapping an deploying a modeling solution to uptime requirements so the cluster managers can support the new cluster configuration modeling solution.

Referring to and at operation start of method a service provider operator user using an input device such as any one of input devices mouse or keyboard activates and initiates program where method is stored as executable program code on a computer executable medium. The operator user activates program and performs other selections in method by making entries using keyboard or mouse thus at operation start the system receives the operator user initiation and selection signals causing program to be executed by computer workstation processor to perform the operations and sub operations of method of creating and deploying a data model of a plurality of database cluster configuration modeling specifications based on a unified model diagram which provides a definition of the database cluster configuration data model based on the database cluster configuration modeling specification and or definition. Thus if display zoomed in on data model and descended into data model what would be rendered would be the logical representation of the UML diagram composing Tables 1 and 2.

Referring to and at create database cluster configuration modeling specification operation herein referred to as operation program executed by system causes system to perform the operations of creating in the computer workstation processor a database cluster configuration modeling specification data D where the database cluster configuration modeling specification data D includes objects contained in the unified model diagram providing a definition of a database cluster configuration data model and which form the contents of data model and where the computer workstation processor includes a plurality of interfaces including a configuration graphical user interface program along with a set of application programming interfaces API and API .

Referring to and at create database cluster configuration model operation herein referred to as operation program executed by system causes system to perform the operations of creating the database cluster configuration information flow herein referred to as cluster config info flow from the database cluster configuration modeling specification data D wherein creating the data model includes performing sub operations of receiving the definition of the database cluster configuration data model checking constraints to validate a logical configuration and transforming a valid logical configuration of an entire logical independent cluster manager application solution. These sub operations are described in more detail below.

Referring to and at performing sub operations program executed by system causes computer workstation processor to perform sub operations of receiving from either the configuration graphical user interface program or from a batch of data from an XML file or from existing database cluster configuration data D defining per the database cluster configuration modeling specification data D a database cluster configuration data model . When computer workstation processor receives data defining the database cluster configuration modeling specification data D via the configuration graphical user interface program computer workstation processor receives a selection signal from the config GUI program that causes program to call the first algorithm A to record and or retrieve data to and or from dynamic data model definition repository . When computer workstation processor receives data defining the database cluster configuration modeling specification data D by way of batch data from one or more XML files program calls the second algorithm A to supervise the transfer of batch data from the one or more XML files via one or more of the plurality of interfaces . When computer workstation processor receives data defining the database cluster configuration modeling specification data D from existing database cluster configuration data D program causes transfer of including recording and retrieving existing database cluster configuration data D by the operation of one or more application programming interfaces of the set of application programming interfaces API and API . The transfer of data by way of either config GUI program and or the transfer of batch data by way of XML files and or the transfer of existing database cluster configuration data D by way of one or more application programming interfaces of the set of application programming interfaces API and API includes recording and or retrieving data to and or from dynamic data model definition repository including unified modeling language diagram data D and or database cluster configuration modeling specification data D and or existing database cluster configuration data D and or a plurality of node network and path data Dn and logical symbolic representations symbols S S S respectively up to Sn.

Again referring to and at performing sub operations program executed by system causes system to perform sub operations of connecting objects and arrows forming the symbolic logical representations comprising a single model of an entire database cluster i.e. data model where connecting objects includes connecting a set of nodes that store data where the set of nodes that store data represent a plurality of database cluster instances of hardware system nodes network interfaces and networks where the arrows represent database instances of database containment and paths relationships between objects. The system nodes network interfaces and networks and arrow data along with the use of unified modeling language diagram data D database cluster configuration modeling specification data D and or existing database cluster configuration data D are accessed by program calling through one of the plurality of algorithms from either first algorithm A or second algorithm A or up to nth algorithm An to retrieve the plurality of node network and path data Dn and logical symbolic representations symbols S S S respectively up to Sn from one or more of the repository entry locations R R R up to repository Rn of dynamic data model definition repository . The following code shows the XML modeling schema used in the unified model diagram of the database clustered instance configuration definition shown in Tables 1 and 2 above.

Referring once again to and at performing sub operations after the cluster data model is built program executed by system computer workstation processor to perform sub operations of checking a series of constraints that specify a valid logical configuration for the plurality of database cluster instances of hardware systems nodes network interfaces and networks. When these constraint tests are satisfied i.e. the checks pass then the validated data model cluster configuration can be transformed and or translated by the service provider in computer workstation processor to output data that can be transmitted to the plurality of networked computer systems for deployment in their database cluster systems sys sys sys up to sys n.

Model constraints checked are shown in TABLE 3 below. Referring to Tables 1 and 2 as well as Table 3 the constraints described in Table 3 can be written into a routine in program and or the constraints and the database cluster configuration modeling specification data D can be loaded into the dynamic data model definition repository so that the process of building data model can be dynamic i.e. and enforced programmatically and then accessed programmatically through a routine or an algorithm called by program or through an application programming interface call from API and or API . The information in Tables 1 and 2 describe the form that data model can take i.e. data model will be in the form of a graph and it has to have the logical structure represented in Tables 1 and 2 but in Tables 1 and 2 constraints on the data within the structure of data model are not addressed in Tables 1 and 2. However the algorithmic representations in Table 3 place constraints on the data that can be contained with in the nodes of the data model . Both the UML diagram in Tables 1 and 2 and the constraints in Table 3 represent data that show what needs to happen. These data can be loaded into dynamic data model repository definition and then either an algorithm or a routine in program can access and or operate on the data to make sure the database cluster configuration modeling specification data D the existing database cluster configuration data D and the constraint data D agree with each other and match the specification from the UML diagram. Thus the data model has to conform to the logical specification represented in the UML diagram described in Tables 1 and 2 and all of the data stored within the data model must conform to the constraints represented in Table 3 in order for the completed data model to be a valid.

Referring once again to and at performing sub operations after checking constraints program executed by computer workstation processor causes computer workstation processor to perform sub operations of transforming the valid logical data of the cluster configuration of data model to an entire logical independent cluster manager application solution to be output as data and transmitted to any of the three possible input sources config GUI program XML file and or cluster manager software as illustrated in . The specifics of the transformation depend on the output target for manageability and ease of configuration and implementation by the database cluster manager software . The overall structure of the system is shown in where each bidirectional arrow describing a bijective reversible transformation between one interface to the system and the model. Referring to the six possible directions of information flow correspond to the following 6 use cases 

1 Config GUI Program Model The user is specifying the configuration of their cluster through an interactive configuration interface.

2 Data Model Config GUI Program The user is reviewing the configuration of an existing cluster through an interactive configuration interface.

5 Cluster Manager Software Data Model The current configuration of Cluster manager software is being mapped into a logical model.

6 Data Model Cluster Manager Software The logical model is being mapped into the configuration of Cluster Manager Software i.e. creating or modifying objects in the native configuration model of cluster manager software . Cases 5 and 6 rely on a set of application programming interfaces i.e. API and API to manage the mapping between the cluster and the model.

An example configuration file that could be used with  any  cluster manager software that DB2 supports to configure a two system active passive shared disk cluster is as follows 

Referring once again to at display entire database cluster configuration modeling solution operation program executed by computer workstation processor causes system to display the entire database cluster configuration data model modeling solution on display for review and or editing by the service provider operator or user.

Referring to at transmit entire database cluster configuration modeling solution operation program executed by computer workstation processor causes computer workstation processor to transmit the entire database cluster configuration data model modeling solution providing version to version migrations of DB2 instances between cluster manager applications with different specifications and through a unified configuration interface that specifies a single configuration to multiple cluster managers through a single configuration model and provides correction of availability failure in cluster configurations of the plurality of networked computer systems .

Referring to in the exemplary embodiments bijective reversible transformations in regard to the set of bidirectional arrows include one of receiving a first signal from a user computer system through the configuration graphical user interface specifying the configuration of a cluster of the user computer system wherein the configuration graphical user interface is an interactive configuration graphical user interface and receiving a second signal from the user computer system through the interactive configuration graphical user interface indicating that the user computer system is reviewing the configuration of the existing cluster of the user computer system and receiving a third signal from the XML file including the batch of data from the user computer system specifying the configuration of the cluster of the user computer system and receiving a fourth signal through the configuration graphical user interface indicating that the user is actuating the logical snapshot of the user cluster where the logical snapshot is the case where the logical model of what the cluster configuration data model looks like is transmitted via XML file at a point in time saved in the XML file and receiving a fifth signal from a set of application program interfaces indicating a current configuration of the existing cluster of the user computer system is mapped into a logical model and receiving a sixth signal from the set of application program interfaces indicating that the logical model is mapped to one of creating and modifying a native configuration model of the cluster of the user computer system.

Referring to at operation program executed by computer workstation processor causes system to either return to any of the above operations and sub operations of method and repeat or continue iteratively processing and performing said operations and sub operations of method of generating a database cluster configuration data model representing a plurality of database cluster configuration modeling solutions or ending the method of generating a database cluster configuration data model because failover problems have been resolved by the provision of the required availability service uptime solutions for current applications.

While the disclosure has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the disclosure. In addition many modifications may be made to adapt a particular situation or material to the teachings of the disclosure without departing from the essential scope thereof. Therefore it is intended that the disclosure not be limited to the particular exemplary embodiments disclosed as the best mode contemplated for carrying out this disclosure but that the disclosure will include all embodiments falling within the scope of the appended claims.

