---

title: Pausing a VoiceXML dialog of a multimodal application
abstract: Pausing a VoiceXML dialog of a multimodal application, including generating by the multimodal application a pause event; responsive to the pause event, temporarily pausing the dialogue by the VoiceXML interpreter; generating by the multimodal application a resume event; and responsive to the resume event, resuming the dialog. Embodiments are implemented with the multimodal application operating on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non-voice modes, the multimodal application is operatively coupled to a VoiceXML interpreter, and the VoiceXML interpreter is interpreting the VoiceXML dialog to be paused.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08713542&OS=08713542&RS=08713542
owner: Nuance Communications, Inc.
number: 08713542
owner_city: Burlington
owner_country: US
publication_date: 20070227
---
The field of the invention is data processing or more specifically methods apparatus and products for pausing a VoiceXML dialog of a multimodal application.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Current lightweight voice solutions require a developer to build a grammar and lexicon to limit the potential number of words that an automated speech recognition ASR engine must recognize as a means for increasing accuracy. Pervasive devices have limited interaction and input modalities due to the form factor of the device and kiosk devices have limited interaction and input modalities by design. In both cases the use of speaker independent voice recognition is implemented to enhance the user experience and interaction with the device. The state of the art in speaker independent recognition allows for some sophisticated voice applications to be written as long as there is a limited vocabulary associated with each potential voice command. For example if the user is prompted to speak the name of a city the system can with a good level of confidence recognize the name of the city spoken.

Incorporating speech into web application leads users to expect a multimodal application to support pausing and resuming multimodal dialogs. One advantage of a multimodal application over a traditional web application is the capability of entering data using either the visual or speech mode of interaction where the speech mode is supported by VoiceXML. There are times however when the user has to stop entering data because of an interruption and come back later to resume where he or she left off. In the current state of the art however there is no VoiceXML oriented technology that supports user directed pause and resume functionality for multimodal dialogs.

Methods apparatus and computer program products are described for pausing a VoiceXML dialog of a multimodal application that include generating by the multimodal application a pause event responsive to the pause event temporarily pausing the dialogue by the VoiceXML interpreter generating by the multimodal application a resume event and responsive to the resume event resuming the dialog. Embodiments are implemented with the multimodal application operating on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes the multimodal application is operatively coupled to a VoiceXML interpreter and the VoiceXML interpreter is interpreting the VoiceXML dialog to be paused.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention are described with reference to the accompanying drawings beginning with .

The system of operates generally to pause a VoiceXML dialog of a multimodal application according to embodiments of the present invention by generating by the multimodal application a pause event responsive to the pause event temporarily pausing the dialogue by the VoiceXML interpreter generating by the multimodal application a resume event and responsive to the resume event resuming the dialog. Pause events and resume events may be generated by a VoiceXML element or a VoiceXML element in a multimodal application .

Alternatively pause and resume events may be generated by a multimodal application on other user interface events such as for example when the when the multimodal application is running in a graphical user interface GUI window and focus changes to a different window. Focus identifies the component of the graphical user interface which is currently selected for active use by a user through the interface. Text entered at the keyboard or pasted from a clipboard is sent to the component which currently has the focus. Focus is similar to cursor location in a text based environment such as a word processor or command line interface. When considering a GUI however there is also a mouse cursor involved. Moving the mouse will typically move the mouse cursor without changing the focus. The focus can usually be changed by clicking on a component that can receive focus with the mouse. Many desktops also allow the focus to be changed with the keyboard. By convention the tab key is used to move the focus to the next focusable component and shift tab to the previous one. In certain circumstances the arrow keys can also be used to move focus.

A multimodal device is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also displaying more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

the IETF provides standard RTP payload formats for various codecs. It is useful to note therefore that there is no limitation in the present invention regarding codecs payload formats or packet structures. Speech for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention may be encoded with any codec including for example 

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick multimodal client or thick client because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin multimodal client or simply a thin client because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

A multimodal application in this example provides speech for recognition and text for speech synthesis to a speech engine through a VoiceXML interpreter . A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user including vocal help prompts. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The VoiceXML interpreter and its FIA in this example are improved to support pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention by temporarily pausing the dialogue in responsive to pause events and resuming the dialog in response to resume events.

As shown in a VoiceXML interpreter may be installed locally in the multimodal device itself or a VoiceXML interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own VoiceXML interpreter . The VoiceXML interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the VoiceXML interpreter and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture the dialog to be paused is interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture the dialog to be paused is interpreted by a VoiceXML interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

The VoiceXML interpreter provides grammars speech for recognition and text prompts for speech synthesis to the speech engine and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. In a thin client architecture the VoiceXML interpreter is located remotely from the multimodal client device in a voice server the API for the VoiceXML interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the VoiceXML interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a VoiceXML interpreter but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present invention. Each of the example multimodal devices in the system of may be configured to pause a VoiceXML dialog of a multimodal application by installing and running on the multimodal device a multimodal application that generates pause events and resume events according to embodiments of the present invention.

The use of these four example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to an ASR engine through a VoiceXML interpreter and receiving and playing speech prompts and responses from the VoiceXML interpreter may be improved to function as a multimodal device for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention is a data communications data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web sever a markup document as part of a multimodal application may execute speech elements by use of a VoiceXML interpreter and speech engine in the multimodal device itself or by use of a VoiceXML interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for pausing a VoiceXML dialog of a multimodal application according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server.

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured to pause a VoiceXML dialog of a multimodal application according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support pausing a VoiceXML dialog of a multimodal application may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present invention.

The voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes a grammar a lexicon and a language specific acoustic model . The language specific acoustic model is a data structure a table or database for example that associates SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in a human language. The lexicon is an association of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammar communicates to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Grammars for use in pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention may be expressed in any format supported by any ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V . A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In this example expansion includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush and the rule accepts today or this afternoon or tomorrow or next week. 

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out automated speech recognition the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector SFV . An SFV may be defined for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

Also stored in RAM is a VoiceXML interpreter a module of computer program instructions that processes VoiceXML grammars. VoiceXML input to VoiceXML interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimedia devices. In this example VoiceXML interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimedia devices and provided to VoiceXML interpreter through voice server application .

A multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to VoiceXML interpreter through data communications across a network with multimodal application . The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user including vocal help prompts. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . In this example the VoiceXML interpreter contains a dialog to be paused where the dialog to be paused has been provided to the VoiceXML by a multimodal application to be interpreted by the VoiceXML interpreter.

The VoiceXML interpreter and its FIA in this example are improved to support pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention by temporarily pausing the dialogue in responsive to pause events and resuming the dialog in response to resume events. VoiceXML interpreters have traditionally functioned as event handlers for certain built in events including for example help events where a user has asked for help noinput events where a user has not responded within a timeout interval and nomatch events where the user provided input speech for recognition but no words in the user s speech were recognized. The VoiceXML interpreter in this example has been improved also to support pause events and resume events by acting as the event handler for such events.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft NT AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application VoiceXML interpreter ASR engine JVM and TTS Engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture ISA buses and Peripheral Component Interconnect PCI buses.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for pausing a VoiceXML dialog of a multimodal application in a thin client architecture according to embodiments of the present invention. The example of includes a multimodal device and a voice server connected for data communication by a VOIP connection through a data communications network . A multimodal application runs on the multimodal device and a voice server application runs on the voice server . The multimodal client application may be a set or sequence of X V or SALT documents that execute on multimodal browser a Java voice application that executes on the Java Virtual Machine or a multimodal application implemented in other technologies as may occur to those of skill in the art. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In addition to the multimodal sever application the voice server also has installed upon it a speech engine with an ASR engine a grammar a lexicon a language specific acoustic model and a TTS engine as well as a JVM and a Voice XML interpreter . VoiceXML interpreter interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to VoiceXML interpreter through voice server application . VoiceXML input to VoiceXML interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimedia device application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

VOIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VOIP protocols. VOIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port to connect to SIP servers.

SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VOIP protocol and transmits the speech to voice server through the VOIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts including vocal help prompts according to embodiments of the present invention. Voice server application includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The system of operates generally to pause a VoiceXML dialog of a multimodal application according to embodiments of the present invention by generating by the multimodal application a pause event responsive to the pause event temporarily pausing the dialogue by the VoiceXML interpreter generating by the multimodal application a resume event and responsive to the resume event resuming the dialog. Pause events and resume events may be generated by a VoiceXML element or a VoiceXML element in a multimodal application . Alternatively pause and resume events may be generated by a multimodal application on other user interface events such as for example when the when the multimodal application is running in a GUI window and focus changes to a different window or when a GUI button for pausing a dialog is selected by a user with a mouseclick.

In this example the VoiceXML interpreter contains a dialog to be paused where the dialog to be paused has been provided to the VoiceXML by a multimodal application to be interpreted by the VoiceXML interpreter. The VoiceXML interpreter and its FIA in this example are improved to support pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention by temporarily pausing the dialogue in responsive to pause events and resuming the dialog in response to resume events. VoiceXML interpreters have traditionally functioned as event handlers for certain built in events including for example help events where a user has asked for help noinput events where a user has not responded within a timeout interval and nomatch events where the user provided input speech for recognition but no words in the user s speech were recognized. The VoiceXML interpreter in this example has been improved also to support pause events and resume events by acting as the event handler for such events.

The multimodal application is operatively coupled to a VoiceXML interpreter . In this example the operative coupling between the multimodal application and the VoiceXML interpreter is implemented with a VOIP connection through a voice services module . The voice services modules is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a VoiceXML interpreter and receiving in response voice prompts and other responses including vocal help prompts according to embodiments of the present invention.

The voice services module provides data communications services through the VOIP connection and the voice server application between the multimodal device and the VoiceXML interpreter . The API is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

Pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. All the components needed for speech synthesis and voice recognition in pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly as do parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a JVM a VoiceXML Interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine a grammar a lexicon a language dependent acoustic model and a TTS engine . The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

In this example the VoiceXML interpreter contains a dialog to be paused where the dialog to be paused has been provided to the VoiceXML by a multimodal application to be interpreted by the VoiceXML interpreter. The VoiceXML interpreter and its FIA in this example are improved to support pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention by temporarily pausing the dialogue in responsive to pause events and resuming the dialog in response to resume events. As mentioned above VoiceXML interpreters have traditionally functioned as event handlers for certain built in events including for example help events where a user has asked for help noinput events where a user has not responded within a timeout interval and nomatch events where the user provided input speech for recognition but no words in the user s speech were recognized. The VoiceXML interpreter in this example has been improved also to support pause events and resume events by acting as the event handler for such events.

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine useful for pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention. The multimodal application implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded VoiceXML interpreter for processing. The embedded VoiceXML interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input including dynamically generated vocal help prompts according to embodiments of the present invention.

In a further class of exemplary embodiments the multimodal application may be implemented as a Java voice application that executes on Java Virtual Machine and issues calls through the VoiceXML API for speech recognition and speech synthesis services. In further exemplary embodiments the multimodal application may be implemented as a set or sequence of SALT documents executed on a multimodal browser or microbrowser that issues calls through the VoiceXML API for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present invention.

The multimodal device in this example is configured to pause a VoiceXML dialog of a multimodal application according to embodiments of the present invention by generating by the multimodal application a pause event responsive to the pause event temporarily pausing the dialogue by the VoiceXML interpreter generating by the multimodal application a resume event and responsive to the resume event resuming the dialog. Pause events and resume events may be generated by a VoiceXML element or a VoiceXML element in a multimodal application . Alternatively pause and resume events may be generated by a multimodal application on other user interface events such as for example when the when the multimodal application is running in a GUI window and focus changes to a different window or when a GUI button for pausing a dialog is selected by a user with a mouseclick.

The multimodal application is operatively coupled to a VoiceXML interpreter. In this example the operative coupling between the multimodal application and the VoiceXML interpreter is implemented through the VoiceXML interpreter API . The VoiceXML interpreter API is a module of computer program instructions that for use by an application level program in providing dialog instructions and speech for recognition to a VoiceXML interpreter and receiving in response voice prompts and other responses including vocal help prompts according to embodiments of the present invention. The VoiceXML interpreter API presents the same application interface as is presented by the API of the voice service module on in a thin client architecture. At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

The multimodal application in this example running on a multimodal device that contains its own VoiceXML interpreter and its own speech engine with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application as well as all or most of the functionality for dynamically generating vocal help prompts according to embodiments of the present invention is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention. Pausing a VoiceXML dialog of a multimodal application in this example is implemented with the multimodal application operating on a multimodal device supporting multiple modes of interaction including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode is represented here with audio output through a speaker and audio input through a microphone . Non voice modes are represented by user input devices a keyboard and a mouse.

The multimodal application is operatively coupled to a VoiceXML interpreter . The operative coupling provides a data communications path from the multimodal application to the VoiceXML interpreter for dialogs for interpretation grammars speech for recognition and prompt text for TTS conversion. The operative coupling provides a data communications path from the VoiceXML interpreter to the multimodal application for voice prompts recognized speech semantic interpretation results and other responses. The operative coupling may be an API on when the multimodal application is implemented in a thick client architecture and the operative coupling may include an API on a voice service module on and a VOIP connection on when the multimodal application is implemented in a thin client architecture.

The method of includes generating by the multimodal application a pause event . The VoiceXML interpreter is interpreting the VoiceXML dialog to be paused the VoiceXML dialog to be paused was previously provided to the VoiceXML interpreter through its operative coupling to the VoiceXML interpreter. In the method of generating a pause event may be carried out by generating a pause event through a VoiceXML element or a VoiceXML element. Alternatively in the method of generating a pause event may be carried out by generating a pause event by the multimodal application when the multimodal application is running in a GUI window and GUI focus changes to a different window. The multimodal application communicates the pause event to the VoiceXML interpreter through the operative coupling .

The method of also includes temporarily pausing the dialogue in response to the pause event. The VoiceXML interpreter pauses the dialogue in this example by interrupting the operation of the FIA and preserving the state of the FIA until a resume event is generated. It useful to be able to preserve the state of the FIA because the FIA may be used to interpret some other dialog during the pause thereby risking its state being changed during the pause.

The method of also includes generating by the multimodal application a resume event . Resume events are generated in a manner similar to the generation of pause events through or elements in a multimodal application or through user interface events such as changes in focus or user selected GUI buttons.

The method of also includes resuming the dialog in response to the resume event. The VoiceXML interpreter resumes the dialogue in this example by restoring the preserved state of the FIA and instructing the FIA to resume interpretation of the dialog. It useful to be able to restore the preserved state of the FIA because the FIA may have been used to interpret some other dialog during the pause thereby risking its state being changed during the pause.

For further explanation of generating pause and resume events consider the following pseudocode X V document 

This is an example of an X V document that uses a VoiceXML dialog form to voice enable an html data input form. The X V document represents a component of a multimodal application. The data input sought is the name of a primary color and this example is therefore sometimes referred to as the primary color example. The primary color example is said to be pseudocode because the primary color example is an explanation not an actual working model presented in the general form of X V code.

The primary color example uses a element to generate a pause event or a resume event when user speech input matches a pause control grammar 

The symbol in the grammar in the primary color example returns the value on a match. A match on stop therefore returns pause a match on halt returns pause and so on. There is no need for the attribute on the pause and resume elements of the grammar because it would be redundant. The grammar can be expanded to include many synonyms halt stop suspend forward proceed and so on but the grammar is configured so that on a match the grammar only returns pause or resume. And the element only generates pause events and resume events.

The element may be authored expressly into the multimodal application as shown in the primary color example. Or the function can be completely built in to the VoiceXML interpreter an implicit link as it were so that it is completely transparent to the source code of the multimodal application not set forth in the X V document at all. Or the can be included as an express element that nevertheless is not authored but instead is shielded from normal programmer contact because its insertion is encoded into a multimodal browser which automatically inserts the express when the multimodal application is loaded. Thereafter the multimodal application through the browser provides the to the VoiceXML interpreter thereby enabling pause and resume events when its grammar is matched by spoken user input.

In the primary color example a VoiceXML form named colorForm voice enables an HTML data entry form named cid because the input field named c1 designates the VoiceXML field named color as its event handler when c1 gains focus. The colorForm VoiceXML form is the X V format of a VoiceXML dialog passed from a multimodal application to a VoiceXML interpreter for interpretation amenable to being paused and resumed according to embodiments of the present invention. ColorForm uses a new VoiceXML element to generate a pause event when the multimodal application is running in a GUI window and GUI focus changes to a different window 

ColorForm also uses the pause control element to generate a resume event when the window in which the multimodal application is running regains focus 

In this example the functionality to generate pause and resume events upon losing or regaining window focus is authored into the multimodal application. Alternatively however this functionality may be built directly into the multimodal browser or JVM that provides the execution environment for the multimodal application so that the multimodal application can effectively generate such pause and resume events when it loses or regains window focus with no need for additional authoring of code within the multimodal application itself.

The VoiceXML form named colorForm also uses a element to generate a pause event when a user provides input speech for recognition but no words in the user s speech are recognized 

That is upon a nomatch the colorForm dialog causes the multimodal application to sound a warning beep from beep.wav and then generate a pause event.

The HTML input for named cid in the primary color example uses an new HTML input field type pause named c2 that when selected by a user with a mouseclick generates a pause event 

For further explanation sets forth a flow chart illustrating a further exemplary method of pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in which generating a pause event includes creating a script variable to hold an interpretation of a user utterance matching a pause control grammar. The interpretation is the output of the VoiceXML interpreter when the VoiceXML interpreter finds a match between a user utterance and a grammar. Script languages useful for creating a script variable to hold an interpretation of a user utterance matching a pause control grammar include ECMAScript JavaScript and JScript. ECMAScript is a scripting programming language standardized by Ecma International in the ECMA 262 specification. JavaScript is the name of Netscape Communications Corporation s implementation of ECMAScript. JScript is Microsoft s Active Scripting implementation of ECMAScript.

When a multimodal application is loaded by a multimodal browser the browser creates a document object model DOM in which all the identified elements of the multimodal application are represented with named objects. In representing this example element in the DOM 

In the method of generating a pause event also includes specifying the pause control grammar the pause control grammar comprising words that when matched will resolve to a pause keyword. In this X V example 

In the method of generating a pause event also includes providing a script whose evaluation identifies the name of an event to be generated as the pause keyword. In this X V example 

This pause processing functionality described with reference to can be built into a multimodal application and its operating environment a JVM or multimodal browser which passes an implicit to the VoiceXML interpreter in a thick client architecture or a thin client architecture when the multimodal application begins executing. Or the functionality can be built into the VoiceXML interpreter and its FIA also in either the thick or thin client architecture. Or the functionality so described can be authored into the multimodal application itself as an express element for example in the X V setting.

For further explanation sets forth a flow chart illustrating a further exemplary method of pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in which generating a resume event includes creating a script variable to hold an interpretation of a user utterance matching a pause control grammar. In this X V example 

In the method of generating a resume event also includes specifying the pause control grammar the pause control grammar comprising words that when matched will resolve to a resume keyword. In this X V example 

In the method of generating a resume event also includes providing a script whose evaluation identifies the name of an event to be generated as the resume keyword. In this X V example 

the value of the eventexpr attribute provides a script whose evaluation identifies the name of an event to be generated as the pause keyword. The value of the eventexpr attribute is an ECMAScript expression that evaluates to the name of the event to generate when user speech matches a word or phrase in the pause control grammar. The ECMAScript is the text between the quote marks identifying the value of the eventexpr attribute in this case pause control the name of the ECMAScript variable that was created to hold an interpretation of a user utterance matching a pause control grammar. A script comprising only a variable name evaluates to the value of the variable. As mentioned above then the grammar is of this form 

This resume processing functionality described with reference to can be built into a multimodal application and its operating environment a JVM or multimodal browser which passes an implicit to the VoiceXML interpreter in a thick client architecture or a thin client architecture when the multimodal application begins executing. Or the functionality can be built into the VoiceXML interpreter and its FIA also in either the thick or thin client architecture. Or the functionality so described can be authored into the multimodal application itself as an express element for example in the X V setting.

For further explanation sets forth a flow chart illustrating a further exemplary method of pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in which at the point in time when the pause event is generated the multimodal application is playing a prompt through a text to speech TTS engine without listening for voice input. The multimodal application executes much of its functionality through the VoiceXML interpreter and its FIA. The FIA of the VoiceXML interpreter operates in phases 

There are therefore times during dialog processing when a multimodal application may be playing a prompt without listening for voice input for example when executing a VoiceXML element or when executing a VoiceXML element.

In the method of temporarily pausing the dialog includes the multimodal application s suspending play of the prompt through the TTS engine and waiting for the resume event . In this example when a prompt is playing and the multimodal application is not listening for voice input the VoiceXML interpreter is improved to treat the pause event as a notification to suspend play of the prompt and wait for a resume event.

In the method of resuming the dialog includes the multimodal application s resuming play of the prompt through the TTS engine . In this example where a prompt was suspended in response to a pause event received when the multimodal application was not listening for voice input the VoiceXML interpreter is improved to treat the resume event as a notification to resume play of the prompt.

For further explanation sets forth a flow chart illustrating a further exemplary method of pausing a VoiceXML dialog of a multimodal application according to embodiments of the present invention in which at the point in time when the pause event is generated the multimodal application is playing a prompt through a TTS engine and listening for voice input. A VoiceXML input field may have this general structure 

The multimodal application with its VoiceXML interpreter executes this field by activating the grammar playing the prompt listening for voice input and if voice input matches the grammar executing the element. The prompt is played by passing the prompt to a TTS engine. The prompt is played asynchronously with respect to other processing. So when the multimodal application begins to listen for voice input the prompt is still playing.

In the method of temporarily pausing the dialog includes the multimodal application s suspending play of the prompt through the TTS engine stopping listening for voice input stopping a no input timer and waiting for the resume event . In this example when a prompt is playing and the multimodal application is listening for voice input the VoiceXML interpreter is improved to treat the pause event as a notification to suspend play of the prompt through the TTS engine stop listening for voice input stop a no input timer and wait for a resume event.

In the method of resuming the dialog includes the multimodal application s resuming play of the prompt through the TTS engine resuming listening for voice input and restarting the noinput timer . In this example where a prompt was suspended in response to a pause event received when the multimodal application was listening for voice input the VoiceXML interpreter is improved to treat the resume event as a notification to resume play of the prompt resume listening for voice input and restart the noinput timer.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for pausing a VoiceXML dialog of a multimodal application. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

