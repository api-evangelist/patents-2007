---

title: Systems and methods for SNMP access
abstract: Systems and methods for SNMP access are disclosed. A computer-implemented method of SNMP access includes mapping a MIB object in a MIB into an XML object in an XML document, generating a class library based on the XML document, creating a service object representative of a service associated with SNMP access to the MIB object, and linking the class library according to the service object to perform the service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327007&OS=08327007&RS=08327007
owner: Iyuko Services L.L.C.
number: 08327007
owner_city: Dover
owner_country: US
publication_date: 20070629
---
The present invention relates to computer networks in general and more particularly to systems and methods for simple network management protocol SNMP access.

With the proliferation of computer networks the need has developed for more powerful tools to manage computer networks as they increase in size and complexity. One facility available for managing computer networks is the simple network management protocol SNMP . The SNMP includes two primary elements a manager and agents. The SNMP manager is the console through which the network administrator performs network management functions. The SNMP agents are entities that interface to the actual network devices being managed. Hubs routers or network servers are examples of managed network devices that contain managed objects. The managed objects of each managed network device might be hardware configuration parameters performance statistics and so on that directly relate to the current operation of the managed network device. The managed objects are arranged in a management information base MIB and each managed object is referred to as a MIB object in the MIB. The SNMP allows managers and agents to communicate for the purpose of accessing these MIB objects.

The structure of management information SMI a SNMP standard defines the rules for how MIB objects are structured described and organized in the MIB. Typically the MIB is organized in a tree structure composed of branch nodes and leaf nodes. The MIB objects representing the managed objects of the same network device usually reside at the leaf nodes rooting from the same branch node. Each MIB object has an object identifier OID which is a sequence of integers in a tree structure that uniquely identifies the MIB object residing at a leaf node. When the manager requests a value of a MIB object from an agent the OID of the MIB object should be sent by the manager and traversed by the agent.

To perform SNMP access a variable binding that contains an OID a type and a corresponding object value should be built. The variable bindings are the actual data that are transported back and forth inside SNMP messages. Typically the SNMP uses five basic messages GET GET NEWT GET RESPONSE SET and TRAP to communicate between the manager and an agent. For instance when the manager wants to know the value of a MIB object such as the system name or the system uptime the manager will assemble a GET packet that includes the OID for the MIB object. Upon receiving the GET packet the agent will assemble and send a GET RESPONSE packet to the manager with either the current value of the MIB object or an error indication as to why the request cannot be processed. Similarly the manager will assemble a SET packet that includes the OID for each MIB object of interest thereby requesting a change be made to the value of the MIB object. The agent will then respond with a SET RESPONSE packet indicating the change has been made or an error indication as to why the change cannot be made. The agent can also assemble and send a TRAP packet that includes OID and value information bindings to spontaneously inform the manager of an important event. The manager can use the bindings to correlate and manage the event.

Though the SNMP access is simple due to the small number of command messages GET GET NEWT GET RESPONSE SET and TRAP it requires that the user have in depth knowledge of the MIB and particularly be familiar with the OID of each MIB object. Also building the variable binding which includes the OID and the corresponding object value is typically a tedious task when the manager performs the SNMP access. Additionally the manager needs to translate the response from the agent into a readable service value to facilitate user understanding and decision making.

In one embodiment a computer implemented method of SNMP access is provided. The method includes mapping a MIB object in a MIB into an XML object in an extensible markup language XML document generating a class library based on the XML document creating a service object representative of a service associated with SNMP access to the MIB object and linking the class library according to the service object to perform the service.

Reference will now be made in detail to embodiments of the present invention. While the invention will be described in conjunction with the embodiments it will be understood that they are not intended to limit the invention to these embodiments. On the contrary the invention is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the invention as defined by the appended claims.

Some portions of the detailed descriptions which follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application a procedure logic block process or the like is conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually although not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present application discussions utilizing the terms such as mapping generating creating linking parsing programming invoking translating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments described herein may be discussed in the general context of computer executable instructions residing on some form of computer usable medium such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.

By way of example and not limitation computer usable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electrically erasable programmable ROM EEPROM flash memory or other memory technology compact disk ROM CD ROM digital versatile disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information.

Communication media can embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

Advantageously the manager in the SNMP management system mainly cares about the services associated with SNMP access to the MIB object such that there is a decreased requirement of MIB knowledge for users. In this instance the manager simply executes instructions like SystemMO mo new SystemMO mo.sysName O2MICRO mo.doset to perform the service of setting the MIB object the system name as O2MICRO . As illustrated these instructions can be interpreted into setting the MIB object the system name as O2MICRO in a literal sense. In one embodiment these instructions may be programmed in an object oriented programming language such as Java C Smalltalk Object Pascal Objective C etc. which is user friendly and has a decreased requirement for MIB knowledge. The class library is capable of translating these instructions into a SET packet containing the command message e.g. SET the value e.g. O2MICRO and the OID 1.3.6.1.2.1.1.5 . The SET packet is further sent to the agent which in turn sets the MIB object the system name as O2MICRO . Furthermore the response from the agent e.g. a SET RESPONSE packet can be translated into a service value readable by users by the class library . The service value is further transferred to the manager such that no additional effort of response translation is required at the manager side.

In one embodiment the Java class library is generated based on an XML document which defines how a MIB object in the MIB is mapped into an XML object. In one embodiment a plurality of MIB objects which are associated with the same network device and reside at the leaf nodes rooting from the same brand node may be wrapped together to create an XML object. Referring to a table illustrates an exemplary XML object structure. The XML object structure uses a plurality of tags such as or to define the MIB mapping. In one embodiment the tag indicative of an XML object may include a plurality of variables such as name and type . The variable name represents the name of the mapping. The variable type represents the type of the mapping.

According to the MIB objects mapped from the MIB to the XML object there are two types of mapping group type and table type. When the MIB object is in a table format in the MIB the table type mapping will occur. The tag indicates the plurality of MIB objects that are associated with the same network device and wrapped into the same XML object. The tag indicates each wrapped MIB object underneath the tag . The tag may include a plurality of variables such as name oid syntax and writable . The variable name represents the name of the MIB object. The variable oid represents the OID of the MIB object. The variable syntax represents the type of the MIB object such as an integer or an octet string. The variable writable represents whether the MIB object is writable.

The tags and are defined specifically for the table type mapping. The tag may include a plurality of variables such as row create rowstatus oid get method non rep and max rep . The variable row create represents the row status when a new row is created. The variable rowstatus oid represents the OID of the row status. The variable get method represents the methods of getting values which include getnext and getbulk in one embodiment. The variable non rep represents that there is no repeat when the variable get method is defined as getbulk . The variable max rep represents the maximum repetition when the variable get method is defined as getbulk . The tag may include a plurality of variables such as entry oid and entry name . The variable entry oid represents the OID of table entry in the MIB . The variable entry name represents the name of table entry in the MIB . The tag may include a plurality of variables such as name oid and syntax . The variable name represents the name of the index. The variable oid represents the OID of the index and the variable syntax represents the type of the index such as an integer or a string.

Examples of XML objects in the XML document are shown as below respectively representing the XML object system of the group type mapping and the XML object addrTable of the table type mapping.

Turning to the Java class library may be generated based on the XML document . In one embodiment an XML object parser not shown may parse the XML document to generate the Java class library . Via the parsing process each XML object in the XML document is mapped into a Java class. As a whole after being mapped into an XML object in the XML documents the plurality of MIB objects associated with the same network device are further mapped from the XML object into a Java class. The Java class specifies field variables properties and methods behaviors that the plurality of MIB objects can work with such that the manager can access the plurality of MIB objects by invoking the methods of the corresponding Java class. In one embodiment such methods may be named after the services associated with SNMP access to the plurality of MIB objects to facilitate the programming of instructions representative of such services at the manager side. Particularly the manager needn t specify the command message and the OID to perform a service associated with SNMP access to an MIB object.

In operation the manager simply executes instructions in Java language and representative of the service. In response to the instructions the manager can link the Java class library load the corresponding Java class and invoke the corresponding method to perform the service. Additionally the API that is a collection of classes and methods may be used by the manager to make the programming easier.

Also Java classes are related. In one embodiment the relation between Java classes is inheritance which involves derived classes and base classes. Derived classes can include several kinds of customizations to the respective base classes such as addition of new filed variables addition of new methods and overriding of existing methods to support the new field variables. Conceptually a base class may be considered as a common part of derived classes. A derived class is created by extending the base class.

In one embodiment the Java class library may include a base class BaseMO. The base class BaseMO includes a plurality of filed variables and a plurality of methods that belong to a common part of derived classes e.g. GroupMO and TableMO. For example the plurality of field variables defined in the base class BaseMo include  o2 Reqparam  o2 Excutor  o2 Mapmodule  o2 Mapname and  o2 Object . The plurality of methods defined in the base class BaseMo include getExcutor setExcutor IMapExecutor getMapModule getReqaram RequestParam copyFrom BaseMO getUserObject and setUserObject Object .

Via inheritance the derived class GroupMO can be created based on the base class BaseMO to represent the XML objects having the group type mapping. For instance the derived class GroupMO can be programmed as below.

Similarly the derived class TableMO can be created based on the base class BaseMO to represent the XML objects having the table type mapping. For instance the derived class TableMO can be programmed as below.

Advantageously the derived classes GroupMO and TableMO can be further inherited to create a particular class to represent a particular XML object. As a whole the particular class representing the particular XML object also represents the plurality of MIB objects in the MIB which have been mapped into the particular XML object. For example a derived class SystemMO can be programmed as below to represent the XML object System .

As illustrated above the methods defined in the Java classes are named after services associated with SNMP access to facilitate the programming at the manager side. By invoking the methods encapsulated in the Java classes the manager can access the MIB objects in the MIB without going through the tedious task of organizing the command message and the OID. The manager simply executes the instructions representative of the services associated with SNMP access. For example the manager executes instructions like SystemMO mo new SystemMO mo.sysName O2MICRO mo.doset to set the MIB object of the system name as O2MICRO . In particular the instruction SystemMO mo new SystemMO functions to create a service object mo representative of the service requested by the manager . Concurrently the manager links the Java class library to load the Java class SystemMO in response to creation of the service object mo . In this instance the instructions mo.sysName O2MICRO mo.doset can invoke the method doset encapsulated in the Java class SystemMO to perform the service requested by the manager . Furthermore a return value of the invoked method doset is readily readable by users such that the manger needn t translate the response from the agent any more.

In conclusion the behavior of the invoked method may be to translate the instructions representative of the service into the command message and the OID readable by the agent in one embodiment. In response to the command message and the OID the agent can access the MIB objects in the MIB . As such the user needn t make additional effort to organize the command message and the OID to perform the service. In one embodiment the behavior of the invoked method may be to translate the response from the agent into a service value readily readable by users. As such the effort for the manager to translate the response from the agent into a readable service value to facilitate user understanding and decision making is also unnecessary. In other words behaviors defined in the Java classes are invisible to the manager such that the manager can concentrate on programming the instructions representative of the services associated with SNMP access to invoke the corresponding Java classes and methods. In this way users can access the MIB objects by using an object oriented language which is user friendly and has a decreased requirement for MIB knowledge such as Java C Smalltalk Object Pascal Objective C etc.

In block a MIB object in a MIB is mapped into an XML object in an XML document. In one embodiment the MIB object of the system name in the MIB is mapped into the XML object system in the XML document . In block a class library is generated based on the XML document. In one embodiment the XML object parser can be used to parse the XML objects in the XML document and thereby to generate the Java class library . In block a service object representative of a service associated with SNMP access to the MIB object in the MIB is created. In one embodiment a service object mo is created to represent the service of setting the MIB object of the system name as O2MICRO . In block the class library is linked according to the service object to perform the service. In one embodiment the Java class library is linked in response to creation of the service object mo to perform the service of setting the MIB object of the system name as O2MICRO .

The terms and expressions which have been employed herein are used as terms of description and not of limitation and there is no intention in the use of such terms and expressions of excluding any equivalents of the features shown and described or portions thereof and it is recognized that various modifications are possible within the scope of the claims. Other modifications variations and alternatives are also possible. Accordingly the claims are intended to cover all such equivalents.

