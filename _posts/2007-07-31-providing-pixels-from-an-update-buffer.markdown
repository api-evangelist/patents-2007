---

title: Providing pixels from an update buffer
abstract: A method comprises storing pixel data in a frame buffer, retrieving the pixel data from the frame buffer and processing at least one pixel value of the pixel data to generate an output pixel bit stream. The method further comprises storing pixel values in a first update buffer. The pixel values are derived from the output pixel bit stream. The method also comprises providing the pixel values from the first update buffer across a network to a remote graphics system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07944451&OS=07944451&RS=07944451
owner: Hewlett-Packard Development Company, L.P.
number: 07944451
owner_city: Houston
owner_country: US
publication_date: 20070731
---
Some electronic systems permit a user of one computer to view on his or her display images graphics and text that are generated on another computer remotely located from the user s computer. In some such systems the remote computer where the graphics data is generated transmits images to the user s computer that causes the user s computer to replicate the images on the computer where the images originated. Unfortunately the images viewed on the user s computer may not be identical to the images originally generated on the remote computer.

Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate computer companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . . Also the term couple or couples is intended to mean either an indirect direct optical or wireless electrical connection. Thus if a first device couples to a second device that connection may be through a direct electrical connection through an indirect electrical connection via other devices and connections through an optical electrical connection or through a wireless electrical connection.

In some embodiments the sending system has a display coupled thereto but in other embodiments the sending system s display is not included. The receiving system may include an input device such as a keyboard or mouse which permits a user of the receiving system to effectively interact with the graphics application as if the graphics application were being executed on the receiving system .

Referring to sending system executes a graphics application that causes images e.g. text lines fills to be shown by the graphics subsystem on the display . The graphics application comprises any one or more of a plurality of executable programs that use a graphics API. The APIs used by the graphics application are implemented by the graphics subsystem . The graphics application causes images to be shown on display by providing graphics commands to the graphics subsystem which creates and stores images comprising pixel data in a frame buffer in the graphics subsystem .

The sending system provides a copy of the pixel data being presented on the display to the receiving system via the network . However rather than transmitting the pixel data from the frame buffer to the receiving system the sending system takes the output pixel bit stream from the display refresh unit and specifically the post frame buffer processor unit and provides pixel values indicative of the output pixel bit stream to the receiving system over the network . Because the output pixel bit stream has the effects of the post frame buffer processor unit encoded into it the images transmitted to the receiving system comprise what is being shown on display . If the pixel data from the frame buffer was transmitted to the receiving system such data would not be encoded with the effects of the post frame buffer processor unit and thus the receiving system might not show the same images as are shown on the sending system .

The graphics memory of the graphics subsystem of also comprises an update buffer and a delta buffer BFR . Update and delta buffers and are separate from the frame buffer . The update buffer generally comprises a video frame that precedes in time the current frame encoded in the output pixel bit stream generated by the display refresh unit . The display refresh unit also comprises a comparison unit . The comparison unit receives a copy of the output pixel bit stream generated by the post frame buffer processor . The comparison unit compares for example on a pixel by pixel basis the pixels encoded in the output pixel bit stream with the pixel values stored in the update buffer to determine if the currently display image differs from a previous image stored in the update buffer . In some embodiments each successive pair of image frames are compared while in other embodiments image frames other than every successive pair are compared by the comparison unit . In some embodiments for example every other image frame is compared .

As a result of the comparison performed by the comparison unit the comparison unit may determine that one or more pixels have changed while determining that other pixels have not changed between the previous image stored in the update buffer and the current image encoded in the output pixel bit stream of the display refresh unit . A relatively static image for example will have at least some pixels whose color values do not change from one image frame to the next. The comparison unit overwrites the pixel values in the update buffer that the comparison unit determines have changed and does not overwrite i.e. leaves alone those update buffer pixel values that are determined not have changed. The overwrites may comprise replacement pixel values or a difference value that is equal to the difference between the old and new pixel values. As a result of the pixel by pixel comparison and at least partial update buffer overwriting the comparison unit and thus the display refresh unit in effect caused a copy of the output pixel bit stream to be generated and stored in the update buffer . Alternatively stated the contents of the update buffer reflect the image currently being shown on the sending system s display .

In various embodiments the delta buffer comprises a bit associated with each pixel whose color value is stored in the update buffer . The comparison unit writes a delta buffer bit to a value of for example 1 to indicate that the pixel corresponding to that delta buffer bit has changed or to a value of 0 to indicate that the corresponding pixel has not changed. In some embodiments the contents of the delta buffer are initially 0 and thus the comparison unit need only change certain bits to a value of 1 to indicate that a change in color has occurred to such pixels i.e. a 0 value need be written to the delta buffer to indicate the absence of a color change . In other embodiments a delta bit value of 0 indicates that the corresponding pixel has changed and a value of 1 indicates that the corresponding pixel has not changed. All of the bits in the delta buffer may be initialized to a 0 value as noted above or to a value of 1. 

In some embodiments each bit in the delta buffer pertains to a separate pixel in the update buffer. In other embodiments each bit in the delta buffer pertains to a group of pixels in the update buffer. For example each delta buffer bit may pertain to an 8 by 8 group of pixels. The delta buffer bit corresponding to a group of pixels specifies whether any of the pixels in the group have changed.

In some embodiments once the update and delta buffers have been updated some or all of the contents of the buffers are written to system memory via the system bus . In various embodiments the graphics subsystem writes to system memory pixel values corresponding to only those pixels that have actually changed as indicated by the contents of the delta buffer . For example the graphics subsystem examines the bits in the delta buffer and only writes those pixel values from the update buffer that correspond to delta buffer bits that have been written by the comparison unit to indicate that a corresponding pixel has changed. In some embodiments all of the contents of the update and delta buffers and are written to system memory and the sending system s host processor examines the copy in system memory of the contents of the delta buffer to determine which pixels have changed. The host processor generates one or more image packets containing just the changed pixels based on the processor s examination of the delta buffer contents. In various embodiments the host processor compresses the pixel data to be transmitted over the network to the receiving system.

In some embodiments the sending system s host processor examines a delta buffer and also combines adjacent blocks into larger blocks or adjacent pixels into larger rectangular regions. For example if d 0 1 and d 0 2 have been modified where d is the delta buffer the pixels to which d 0 1 and d 0 2 correspond would be combined into a single larger rectangle. Then these larger regions are read back into system memory compressed and transmitted to the receiving system. Thus pixel regions that have changed that touch each other are adjacent are combined into larger regions so that the number of read operations are reduced. Reducing the number of read operations helps improve performance. Instead of reading many small rectangles fewer but larger rectangles are read.

In various embodiments each pixel value sent to the receiving system is encoded with an X Y screen coordinate to indicate to the receiving system s graphics subsystem the location the screen to which that pixel is to be applied. In other embodiments a string of pixels could be encoded with a starting X and starting Y coordinate along with a length value to indicate the number of pixels to follow. Further still a block of pixels e.g. a rectangular group of adjacent pixels could be encoded with a coordinate of opposite corners of the block e.g. upper left and lower right . Yet another embodiment comprises the following method that works on a pixel by pixel basis 

Thus from system memory pixel data indicative of the sending system s displayed images is provided over the network to the receiving system . Such transmitted pixel data comprises less than a full screen or window s worth of pixel values if any of the pixels have color values that have not changed as explained above. The sending system provides pixel values from system memory and thus indirectly from the update buffer across network to a remote graphics system receiving system . If the pixel data transmitted over the network have been compressed the receiver decompresses the data and provides the pixel data to the graphics subsystem to be shown on display . The image frame comparison process and the transmission of the resulting update buffer contents explained above repeats itself thereby causing the receiving system s display to be updated with the images being generated by the sending system .

Other embodiments of using multiple update and delta buffers are possible as well. For example rather than copying the A update and delta buffers to the B update and delta buffers as explained above one pair of the update and delta buffers is designated Current and the other pair of update and delta buffers is designated Previous. In this embodiment the output pixel bit stream generated by the display refresh unit is written into the Current update buffer . As pixel data is being written into the Current update buffer such pixel data is compared by the comparison unit with the corresponding pixel data in the Previous update buffer . If a difference is found the Current delta buffer is updated for that particular pixel or region of pixels. When the sending system is ready to compress and send the next image frame to the receiving system the roles of the Previous and Current update and delta buffers are swapped. In at least some embodiments the act of swapping the roles of the buffers is synchronized to a display retrace period to prevent for example image tearing. In this embodiment the Current delta buffer is cleared each time the roles are swapped. In some embodiments the Current delta buffer can be always updated in the case that there are two buffers. Because the compare operations against the previous frame are always occurring against the frame since the last swap then it is possible to just update the delta buffer.

The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

