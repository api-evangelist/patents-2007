---

title: Importing and reconciling resources from disjoint name spaces to a common namespace
abstract: A namespace exploits individual resource identity attributes of an application to allow the integration of resource instances from applications into a configuration management database (CMDB), prior to any data cleansing or namespace harmonization activities. An approach for incremental reconciliation of resource instances within the CMDB is defined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364683&OS=08364683&RS=08364683
owner: International Business Machines Corporation
number: 08364683
owner_city: Armonk
owner_country: US
publication_date: 20070830
---
The present invention relates in general to data processing systems and in particular to using computers to import and reconcile resources from disjoint name spaces.

One issue inhibiting the integration of applications is the lack of a common naming scheme and namespace to identify resources dealt with by those applications. This is especially problematic in the common case where the applications are dealing with overlapping sets of resources. Configuration management databases CMDBs attempt to support the integration of applications by providing an integrated view of resources dealt with by those applications and the relationships among the resources.

A configuration management database provides a repository of information related to all the components including applications of an information technology environment. A CMDB can be used to represent a configuration of the components of the IT environment. A CMDB helps an organization understand the relationships between these components and track their configuration. CMDB implementations often involve federation the inclusion of data into the CMDB from other sources such as Asset Management in such a way that the source of the data retains control of the data. For CMDBs to achieve their maximum value they should be able to quickly and efficiently integrate and reconcile resource information including identity from multiple applications even when the multiple applications lack a common naming schema.

CMDBs such as those addressing reconciliation of resources within a well defined namespace often require manual data cleansing and harmonization of namespaces prior to integration into the CMDB. A characteristic of such CMDBs is that a name schema and namespace is defined as a data model common to the implementation i.e. a Common Data Model . With this characteristic data cleansing or harmonization is often required prior to integration.

In accordance with an aspect of the present invention a method for importing and reconciling resources from disjoint name spaces that includes applying a default naming rule on all resource instances categorizing the resource instances according to a consistent type model and reconciling the resource instance as additional information about the resource becomes available.

In accordance with an aspect of the present invention a computer program product for importing and reconciling resources from disjoint name spaces. The computer program product includes a computer usable medium having computer usable program code embodied therewith. The computer usable program code includes computer usable program code configured to apply a default naming rule on all resource instances computer usable program code configured to categorize the resource instances according to a consistent type model and computer usable program code configured to reconcile the resource instance as additional information about the resource becomes available.

In accordance with an aspect of the present invention a system that includes a processor a data bus coupled to the processor and a computer usable medium embodying computer program code. The computer usable medium is coupled to the data bus. The computer program code comprises instructions executable by the processor and configured for applying a default naming rule on all resource instances categorizing the resource instances according to a consistent type model and reconciling the resource instance as additional information about the resource becomes available.

As will be appreciated by one skilled in the art the present invention may be embodied as a method system or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to there is depicted a block diagram of an exemplary computer with which the present invention may be utilized. Computer includes processor unit that is coupled to system bus . Video adapter which drives supports display is also coupled to system bus . System bus is coupled via Bus Bridge to Input Output I O bus . I O interface is coupled to I O bus . I O interface affords communication with various I O devices including keyboard mouse Compact Disk Read Only Memory CD ROM drive and flash memory drive . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Computer is able to communicate with server via network using network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as a Local Area Network LAN an Ethernet or a Virtual Private Network VPN . In one embodiment server is configured similarly to computer .

Hard drive interface is also coupled to system bus . Hard drive interface interfaces with hard drive . In one embodiment hard drive populates system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory may include additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Data that populates system memory includes Operating System OS application programs and database . Database includes multiple records of standardized business data. In another embodiment database may instead be stored in server .

OS includes shell for providing transparent user access to resources such as application programs . Generally shell as it is called in UNIX is a program that provides an interpreter and an interface between the user and the operating system. Shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. kernel for processing. As depicted OS also includes graphical user interface GUI and kernel which includes lower levels of functionality for OS . Kernel provides essential services required by other parts of OS and application programs . The services provided by kernel include memory management process and task management disk management and I O device management.

Application programs include browser and namespace system . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. computer to send and receive network messages to the Internet. Computer may utilize HyperText Transfer Protocol HTTP messaging to enable communication with server . Namespace System performs the functions as discussed below. In one embodiment Namespace System is included within a software application program or a collection of software application programs such as a Tivoli Application Dependency Discovery Manager TADDM that is called via an Application Programming Interface API . Namespace System is capable of writing resource and relationship instance data into a system that is accessible to a user or multiple users such as a Configuration Management Database CMDB .

The hardware elements depicted in computer are not intended to be exhaustive but rather are representative to highlight essential components required by the present invention. For instance computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

The namespace system includes code for implementing the processes described below. As noted above the namespace system can be downloaded to a client computer from service provider server . Additionally in one aspect of the invention service provider server performs all of the functions associated with the present invention including execution of the namespace system thus freeing a client computer from using its resources.

It should be understood that at least some aspects of the present invention may alternatively be implemented in a computer useable medium that contains a program product. Programs defining functions on the present invention can be delivered to a data storage system or a computer system via a variety of signal bearing media which include without limitation non writable storage media e.g. CD ROM writable storage media e.g. hard disk drive read write CD ROM optical media system memory such as but not limited to Random Access Memory RAM and communication media such as computer and telephone networks including Ethernet the Internet wireless networks and like network systems. It should be understood therefore that such signal bearing media when carrying or encoding computer readable instructions that direct method functions in the present invention represent alternative embodiments of the present invention. Further it is understood that the present invention may be implemented by a system having means in the form of hardware software or a combination of software and hardware as described herein or their equivalent.

With reference now to a block diagram of a CMDB system in which the namespace system is instantiated is shown. The namespace system comprises a schema compatible namespace system as well as a disjoint namespace system . The namespace system operates within an information technology IT environment and specifically within a CMDB system of the IT environment . The CMDB system integrates a plurality of applications . Each application within the IT environment includes a knowledge domain . The knowledge domain comprises an awareness of the existence of resources and an awareness of the relationships among the resources . The knowledge domain also comprises an identity of the resources .

The IT environment also comprises a resource transfer module which is responsible for the transfer of information about the existence of resources e.g. resources from an application e.g. application to the existence of resources in the CMDB system . The resource transfer module i.e. a schema compatible resource transfer module transfers schema compatible resources . Schema compatible resources are resources from a separate knowledge domain that share the same naming schema and namespace as the CMDB system . The resource transfer module i.e. a non schema compatible resource transfer module transfers non schema compatible resources . Non schema compatible resources are resources from a separate knowledge domain that do not share the same naming schema and namespace as the CMDB system .

While two applications e.g. may deal with the same physical and logical resources instances in the IT environment each application can identify the resources according to an individual naming scheme. The individual naming scheme can assign identity attributes that are unique within the knowledge domain of the application. Perceptions of the application regarding the types of the resources within their respective knowledge domains are correlatable by an administrator familiar with resource type domains of the applications. For example an administrator can recognize that the type ComputerServer in the knowledge domain of application X has the type ComputerSystem in the knowledge domain of application Y.

The namespace system exploits the individual resource identity attributes of an application to allow the integration of resource instances from applications into the CMDB system . The namespace system further defines an approach for incremental reconciliation of resource instances within the CMDB where a plurality of conditions are true. The plurality of conditions include whether the application has unique identifiers for its resources that are consistent across time if the application finds the same resource twice it will identify the resource the same way both times and the application has a map of the resource types in a knowledge domain of the application with fidelity to the resource types in the type model of the CMDB e.g. AIXOperatingSystem is mappable to AIX OS. 

In certain embodiments the knowledge domain of the application produces a unique identity attribute for each managed resource. In certain embodiments this unique identity attribute is referred to as a managed system name ManagedSystemName attribute. The managed system name attribute is used with applications that have an awareness of a type of object instance but not necessarily sufficient information to satisfy Common Data Model naming rules from the CMDB system for the object type. The managed system name attribute corresponds to a resource within an application s knowledge domain and namespace. Within the CMDB system usage of the application s managed system name attribute is a last choice alternative for identifying resource instances see e.g. the default naming rule step below . This naming rule allows resource instances from non schema compatible knowledge domains to be imported to the CMDB system . When this naming rule is used by an application there is a high risk that the resource will not correlate initially with other instance data in the CMDB system .

Additionally to permit resource data to exist as a Common Data Model resource instance the disjoint namespace system uses the managed system name attribute for resources that do not contain enough data to meet other naming rules. There is no restriction on the contents of the managed system name attribute. At a minimum the managed system name attribute contains an identify value that is known and unique to a single application knowledge domain and that is consistent across time. As a best practice the contents of the managed system name attribute contain identity values for a resource instance that are known to more than one management technology i.e. that are known across applications in different knowledge domains .

By using the managed system name attribute within the application a rapid integration solution with a particular management technology and consumers of this data such as the CMDB system is enabled. This attribute thus enables users of the CMDB system to perform operations e.g. view query update delete on selected categories of resources instances see e.g. step below . For example the categories of resources can include all DB2 database manager resources. As more resource instances from additional knowledge domains are loaded into the CMDB system those resources will also contain additional information see e.g. step below that match other Common Data Model naming rules as well as the managed system name attribute. Thus as more information about previously loaded resource instances is loaded over time from new knowledge domains or from previously loaded knowledge domains sufficient data will be available to allow the reconciliation operations of namespace system to perform incremental reconciliation see e.g. step below of resource instances named by the managed system name attribute.

Referring to a flow chart of the operation of the namespace system is shown. More specifically to read information from applications whose namespace and schema is disjoint from the CMDB s native namespace and schema the namespace system provides a default naming rule on all concrete resource classes that allows a unique identity string of an application to be used to identify a CMDB instance at step . Because the CMDB s namespace system provides a default naming rule applications can integrate resource instances of the application into the CMDB having aligned namespaces or naming schemas. Next at step for a given the resource type mapping the resource instances read from the application are now categorized correctly according to a consistent type model by the namespace system .

For example the CMDB could read ComputerSystem instances from an Inventory Application that inventories servers in an IT environment. The requirement would be that the application s administrator recognizes that the servers of the Inventory Application are CMDB ComputerSystems. The result is that data integrated in the CMDB such that queries for Show me all my ComputerSystems would be able to return not only the ComputerSystem instances that fully conform to the CMDB s native namespace and schema but also those that were brought in via the Inventory Application. At this point there is the potential for redundant instances in the CMDB due to incomplete reconciliation.

Next the namespace system performs an incremental reconciliation operation at step . The incremental reconciliation operation can include both manual reconciliation and automated reconciliation . As additional information becomes available about the resources stored by applications in the CMDB as determined at step that namespace system may be able to access additional identity attributes that align with the identity attributes used by the CMDB system .

When performing a manual reconciliation operation a user such as an IT administrator recognizes from the additional attributes of an application that instances from multiple sources reconcile to the same or different instances. The namespace system enables a user to perform such a manual reconciliation.

When performing an automatic reconciliation the namespace system uses attribute matching operations and possibly other heuristic identity matching approaches to reconcile the resources stored by applications with other resources already present within the CMDB. As soon as sufficient matching identity attributes are stored on resource instances of a given class the namespace system can recognize the resources as a single resource instance. For example as soon as an application updates a ComputerSystem instance with Manufacturer Model and Serial Number attributes that match a second instance of class ComputerSystem in the CMDB system the two instances may be reconciled to a single instance of ComputerSystem. The resultant instance in the CMDB system is a union of the disjoint attribute sets of the resource instances and a merge of the matching attribute sets of the resource instances. The namespace system may apply reconciliation heuristics on any matching attributes that had inconsistent values.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block might occur out of the order noted in the figures. For example two blocks shown in succession maybe executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the invention of the present application in detail and by reference to preferred embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.

