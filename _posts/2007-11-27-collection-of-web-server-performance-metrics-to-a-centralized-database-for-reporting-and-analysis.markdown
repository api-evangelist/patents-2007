---

title: Collection of web server performance metrics to a centralized database for reporting and analysis
abstract: Systems, methods, and computer-readable media are provided for, among other things, generating web server performance metrics from log file information and storing the metrics offline in a centralized database. A collector accesses log file information from a log file for a web server and generates web server performance metrics on a per web page basis. The web server metrics include a number of requests for a web page, error count for the web page, average response time for the web page, total number of bytes transferred for the web page, and a number of times a service level objection for the web page was exceeded. The web server metrics are stored in a centralized database such that the metrics are available for offline web server performance reporting and analysis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330051&OS=09330051&RS=09330051
owner: Sprint Communications Company L.P.
number: 09330051
owner_city: Overland Park
owner_country: US
publication_date: 20071127
---
Web servers generally maintain a variety of web pages or documents and make the web pages available to client devices upon receiving web page requests from the client devices. Companies governments and other entities often rely on the availability of web servers for a variety of purposes such as servicing clients and connecting employees. As such it is desirable to monitor web servers for capacity planning and problem identifying purposes and to maximize web server performance.

In some cases web traffic simulators have been used to analyze the performance of web servers. These web traffic simulators provide synthetic user transactions in an attempt to simulate what users would do when they visit a web site. However web traffic simulators present a number of drawbacks. For instance web traffic simulators fail to provide real world data including information such as the volume of actual transactions. Additionally web traffic simulators are limited in the types of transactions they can perform and may not be able to perform transactions that a real user could perform. Further the web traffic generated by the web traffic simulators typically is not realistic as it does not truly mimic how a real user would interact with a web site. Accordingly the usefulness of information provided by such web traffic simulators is limited.

The present invention is defined by the claims below. This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention provide systems methods and computer readable media for among other things accessing log file information from a web server generating web server performance metrics based on the log file information and storing the web server performance metrics in a centralized database. Embodiments of the present invention have several practical applications in the technical arts including but not limited to making web server performance metrics for a web server available in a centralized database separate from the web server facilitating offline web server performance reporting and analysis.

Accordingly in one aspect an embodiment of the invention is directed to one or more computer storage media embodying computer useable instructions for performing a method that includes accessing on a device separate from a web server log file information from a log file for the web server the log file information including entries for web server transactions during an interval period for a number of web pages maintained by the web server. The method also includes parsing the log file information and grouping the parsed log file information by web page. The method further includes calculating web server performance metrics on a per web page basis for the interval period based on the parsed log file information. The web server performance metrics include for at least a portion of the web pages a number of web page requests error counts average response time total number of bytes and a number of times a service level objective was not met. The method still further includes storing the web server performance metrics in a database.

In another aspect of the invention an exemplary embodiment is directed to one or more computer storage media embodying computer useable components for generating web server performance metrics for facilitating web server performance analysis. The computer useable components a log file access component that accesses log file information from a log file for a web server at a predetermined sampling rate. The log file includes a number of entries for web server transactions for a number of web pages maintained by the web server wherein the web server transactions include web page requests and responses. The computer useable components also include a parser that parses the log file information. The computer useable components further include a total accumulator for calculating web server performance metrics on a per web page basis based on the parsed log file information. The total accumulator calculates the web server performance metrics for interval periods corresponding with the predetermined sampling rate. The web server performance metrics include a total number of web page requests for each web page an error count for each web page an average response time for each web page a total number bytes transferred for each web page and a number of times a service level objective was exceeded for each web page. The web server performance metrics from the total accumulator are stored in a database external to the web server.

A further aspect of the invention takes the form of one or more computer storage media having stored thereon a data structure for storing web server performance metrics for facilitating web server performance analysis. The data structure includes a first data field containing data representing a web page identifier for a web page a second data field containing data representing a total number requests for the web page during an interval period a third data field containing data representing an error count for the web page during an interval period a fourth data field containing data representing an average response time for the web page during the interval period a fifth data field containing data representing a total number of bytes transferred for the web page during the interval period and a sixth data field containing data representing a number of times a service level objective for the web page was exceeded during the time interval.

As previously mentioned embodiments of the present invention permit among other things web server performance metrics to be generated from log file information and stored offline in a centralized database. More particularly embodiments of the present invention provide systems methods and computer readable media for among other things accessing log file information from a web server generating web server performance metrics based on the log file information and storing the web server performance metrics in a database. The web server performance metrics are generated on a per web page basis and include a number of requests for a web page error count for the web page average response time for the web page total number of bytes transferred for the web page and a number of times a service level objection for the web page was exceeded. Storing the web service performance metrics in a centralized database allows the metrics to be available for offline web server performance reporting and analysis.

Throughout the description of the present invention several acronyms and shorthand notations are used to aid the understanding of certain concepts pertaining to the associated system and services. These acronyms and shorthand notations are solely intended for the purpose of providing an easy methodology of communicating the ideas expressed herein and are in no way meant to limit the scope of the present invention. The following is a list of these acronyms 

As one skilled in the art will appreciate the present invention may be embodied as among other things a method system or computer program product. Accordingly the present invention may take the form of a hardware embodiment a software embodiment or an embodiment combining software and hardware. In an embodiment the present invention takes the form of a computer program product that includes computer useable instructions embodied on one or more computer readable media.

Computer readable media include both volatile and nonvolatile media removable and nonremovable media and contemplates media readable by a database a switch and various other network devices. Network switches routers and related components are conventional in nature as are means of communicating with the same. By way of example and not limitation computer readable media comprise computer storage media and communications media.

Computer storage media or machine readable media include media implemented in any method or technology for storing information. Examples of stored information include computer useable instructions data structures program modules and other data representations. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD holographic media or other optical disc storage magnetic cassettes magnetic tape magnetic disk storage and other magnetic storage devices. These memory components can store data momentarily temporarily or permanently.

Communications media typically store computer useable instructions including data structures and program modules in a modulated data signal. The term modulated data signal refers to a propagated signal that has one or more of its characteristics set or changed to encode information in the signal. An exemplary modulated data signal includes a carrier wave or other transport mechanism. Communications media include any information delivery media. By way of example but not limitation communications media include wired media such as a wired network or direct wired connection and wireless media such as acoustic infrared radio microwave spread spectrum and other wireless media technologies. Combinations of the above are included within the scope of computer readable media.

Referring to a block diagram is shown of an exemplary system in which exemplary embodiments of the present invention may be employed. It should be understood that this and other arrangements described herein are set forth only as examples. Other arrangements and elements e.g. machines interfaces functions orders and groupings of functions etc. can be used in addition to or instead of those shown and some elements may be omitted altogether. Further many of the elements described herein are functional entities that may be implemented as discrete or distributed components or in conjunction with other components and in any suitable combination and location. Various functions described herein as being performed by one or more entities may be carried out by hardware firmware and or software. For instance various functions may be carried out by a processor executing instructions stored in memory.

In an embodiment of the present invention the web server is configured to provide log files in a format that is easily parseable and includes information used in generating a metrics file as will be described in further detail below. By way of example only and not limitation log file formats that may be employed within various embodiments of the invention include IIS W3C Extended log file format SunOne Iplanet Apache HIS 2.0.X and Apache HIS 1.3.X. Typically the default log file format is not employed. Instead the settings for the file format are adjusted to provide the parseable format and information necessary to generate the metrics file in accordance with embodiments of the invention. By way of example only and not limitation in embodiments log file formats may be specified as follows 

A collector is provided for accessing information from the log file and generating a metrics file . Although illustrates a single collector accessing a log file from a single web server it should be understood that in embodiments one or more collectors may access log files from one or more web servers XXX. In some embodiments the collector may reside on a computing device separate from the web server . As such the operation of the collector and collection of web server metrics in accordance with embodiments of the present invention reduces or eliminates any impact on applications running on the web server . Additionally any updates to the collector require no downtime for the web server . Further no additional code needs to be added to and no API needs to be inserted into the web server . The web server continues to operate normally and the collector residing on a separate computing device simply accesses data from the log file .

A block diagram of a collector in accordance with one embodiment of the present is provided in . The collector generally includes among other components not shown a log file access component a parser a total accumulator and a metrics file generation component . Additionally the collector includes and or has access to a number of configuration files including position.txt trans.cfg group.cfg ip.cfg and slo.cfg that facilitate operation of the collector and generation of the metrics file .

The log file access component accesses the log file and retrieves information for the metrics file . In an embodiment the log file access component is configured to access the log file at a given sampling rate which may be configurable and retrieve information from the log file corresponding with an interval period defined by the sampling rate. For instance the log file access component may be configured to access the log file every five minutes and retrieve information corresponding with the previous five minute period.

In an embodiment the log file access component employs a file named position.txt for determining where the in log file to begin retrieving information for a particular interval period. More particularly when the log file access component retrieves information from the log file the number of bytes in the log file at that time is recorded in the position.txt file . Accordingly the next time the log file access component retrieves information from the log file the log file access component uses the total byte count from the position.txt file to determine the position in the log file at which to start retrieving information for the current time interval. In other words the log file access component retrieves all information in the log file after the position indicated by the total byte count from the position.txt file . Each time the log file access component retrieves information from the log file the position.txt file is updated to reflect the total byte count at that time for use during the next collection.

Typically web server performance information is written to log files such as the log file in real time such that the information stored in the log files is organized based on time. The parser is configured to parse information retrieved from the log file to identify individual data entries. The parsed information is then used by the total accumulator to generate information for the metrics file .

The total accumulator aggregates web server performance information from the log file on a per web page basis to generate web server metrics for the metrics file . Initially the total accumulator groups web server performance information by web page. This process includes identifying the web pages with which information from the log file corresponds. In some cases there may be dynamically generated web pages that create different link paths in the log file. However the different link paths correspond with the same web page. For example there may be a large number of portlets that all point to the same web page. However based on the user request portions of each portlet will be customized for each user. The dynamically generated output will then cause the link paths in the log file to differ although the same web page was requested. Accordingly to identify information from the log file as corresponding with a given web page the total accumulator may perform pattern matching to identify information that corresponds with a particular web page. To facilitate this process the total accumulator may access the group.cfg file which lists patterns and their corresponding web page. If a portion of a directory path in an entry in the log file information matches a pattern from the list in the group.cfg file the information is mapped to the corresponding web page for that pattern.

In some cases there may be information in the log file that should be excluded from the metrics file . For instance there may be duplicate entries in the log file for a given web server transaction. As a specific example a load balancer may cause a duplicate entry to be logged. In particular both a requesting client device s IP address and the load balancer s IP address may be counted and logged as separate web page requests when in reality there has only been a single page request. Another example of information in the log file that may be excluded is events from a web traffic simulator. In particular if it is desirable for the metrics to reflect real transaction simulated transaction from a web traffic simulator should be excluded. To facilitate data exclusion an ip.cfg file may be provided that lists IP addresses for which information should be excluded. Accordingly the total accumulator may access the ip.cfg file and exclude entries corresponding with IP address listed in the ip.cfg file .

After grouping log file entries on a per page basis and excluding information based on the ip.cfg file exclusions the total accumulator calculates several web server performance metrics. First the total accumulator determines the total number of page requests for each web page for the interval period. Next the total accumulator determines the total number of errors for each web page for the interval period. In some embodiments the total accumulator may determine total number of errors for each of a variety of different types of errors. For instance in one embodiment the total accumulator determines a total error count a faults error count a time outs error count and a data problems error count.

The total accumulator next identifies response times for the web pages and determines an average response time for each web page for the interval period. The total accumulator also determines the total number of bytes transferred for each web page for the interval period. The total accumulator further determines the number of web page requests for each web page for which a service level objective SLO was not met. In particular the total accumulator may access a slo.cfg file that lists a SLO for each web page. In an embodiment the SLO for a web page is a particular response time for that web page. The total accumulator may compare the response time for each web page request for a given web page against the SLO for that web page from slo.cfg file . A SLO count is thus generated for a web page by determining the total number of times that the response time for the web page exceeds that web page s SLO during the time interval.

The metrics file generation component generates and or adds metrics information to the metrics file . An entry is provided for each web page with metrics information for that corresponding web page as determined by the total accumulator e.g. number of page requests error counts average response time total bytes and or SLO count .

In an embodiment a trans.cfg file is provided that includes a list of all known web pages. By employing the list of web pages within the trans.cfg file the metrics file generation component may include an entry within the metrics file for a web page even if the web page did not have any transactions during a time interval. In other words the metrics file generation component may provide an entry in the metrics file for a given time interval for all web pages listed in the trans.cfg file regardless of whether there were any transactions for some web pages. For web pages that did not have any transactions during the current time period the metrics will reflect that no transactions occurred during that time period e.g. zero web page requests etc. .

Referring again to after the collector has generated web server performance metrics the collector generates a metrics file using the web server performance metrics or adds the web server performance metrics to an existing metrics file . The metrics file is the used to load data into the metrics database . In some embodiments the collector may directly store the web server performance metrics to the metrics database .

An exemplary data structure for a metrics file in accordance with an embodiment of the present invention is illustrated in . The data structure includes a first data field containing data representing a web page identifier. As metrics are collected on a per page basis the web page identifier provides an indication of which web page the following metrics correspond.

The data structure also includes a second data field containing data representing a total number of page hits during the time interval. In particular this represents the total number of requests for the web page identified by the page identifier contained in the first data field

The data structure further includes a third data field containing data representing a error counts for the web page. As indicated previously in various embodiments one or more types of error counts may be tracked including but not limited to a total number of errors during the time interval a total number of faults during the time interval a total number of time outs during the time interval and a total number of data problems during the time interval.

A fourth data field contains data representing an average response time indicating the average time it took the web server to respond to requests for the web page by providing the requested web page. A fifth data field contains data representing a total number of bytes transferred for the web page during the time interval.

The data structure also includes a sixth data field containing data representing a number of times during the time interval that a response time for the web page failed to meet the SLO set for that web page. The data structure further includes a seventh data field containing data representing a timestamp for the present time interval. The timestamp may indicate for instance a start time or an end time for the present time interval.

Referring now to a flow diagram is provided illustrating a method for collecting web server performance metrics in accordance with an embodiment of the present invention. Initially as shown at block the log file format on a web server is set to a format that facilitates determining web server performance metrics. In particular the log file format is set to one that is easily parseable and includes information necessary to generate a metrics file.

As shown at block log file information from the log file on the web server is accessed by a collector such as the collector of . As indicated previously in an embodiment the collector resides on a computing device separate from the web server and may access the log file from the web server at some configurable time interval e.g. every five minutes . When the collector accesses the log file information from current time interval is retrieved e.g. the last five minutes of information . In an embodiment the total byte count of the log file at each log file access is recorded for determining where to begin retrieving information at the next log file access. Accordingly when the log file is accessed the current total byte count of the log file is recorded as shown at block .

After accessing the log file the log file information is parsed as shown at block . Because metrics are provided on a per web page basis in embodiments of the present invention the information is grouped by web page as shown at block . In various embodiments this may include identifying entries in the log file associated with different directories as corresponding with a common web page. For instance a file including patterns that match given web pages such as the group.cfg file of may be used to facilitate matching entries to a given web pages. In embodiments in which a trans.cfg file is used to maintain a list of web pages encountered by the collector any new web pages that are identified are added to the trans.cfg file as shown at block .

As shown at block entries associated with IP address that are listed in an exclusion file such as the ip.cfg file of are excluded. The web server performance metrics are then calculated on a per web page basis as shown at block taking into account the grouping and exclusions of blocks and . The web server performance metrics are then stored in a database external to the web server as shown at block . As such the web server performance metrics are available for offline reporting and analysis.

As can be seen embodiments of the present invention are directed to accessing log file information from a log file on a web server and generating web server performance metrics on a per web page basis. The web server performance metrics are stored in a centralized database for offline reporting and analysis. Many different arrangements of the various components depicted as well as components not shown are possible without departing from the spirit and scope of the present invention.

The present invention has been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those skilled in the art that do not depart from its scope. Many alternative embodiments exist but are not included because of the nature of this invention. A skilled programmer may develop alternative means of implementing the aforementioned improvements without departing from the scope of the present invention.

It will be understood that certain features and subcombinations are of utility and may be employed without reference to other features and subcombinations and are contemplated within the scope of the claims. Not all steps listed in the various figures need be carried out in the specific order described.

