---

title: XML board support customization
abstract: A markup language file comprises software build options usable to determine at least one software build configuration setting. One or more software build options are specified in a markup language file to specify one or more software build configuration settings for use in compilation of software. The markup language is an XML file, is editable in an Integrated Development Environment such as via a Graphical User Interface, and includes settings specific to an embedded processor system configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397206&OS=08397206&RS=08397206
owner: Digi International Inc.
number: 08397206
owner_city: Minnetonka
owner_country: US
publication_date: 20070713
---
The invention relates generally to configuration of computer system boards and more specifically to customization of a board support package using an XML file.

A portion of the disclosure of this patent document contains material to which the claim of copyright protection is made. The copyright owner has no objection to the facsimile reproduction by any person of the patent document or the patent disclosure as it appears in the U.S. Patent and Trademark Office file or records but reserves all other rights whatsoever.

Computerized devices often use similar processors and circuits to perform different tasks relying on the general purpose nature of many processors to provide a relatively inexpensive and fast means to produce a specialized computerized device. Some processors are specifically designed to be embedded in customized applications and include a wide variety of features such as analog and digital inputs and outputs network support and specialized software libraries supporting such features to make software design for such systems relatively easy.

Some such systems are called embedded systems reflecting that a processor or computerized system is embedded in the system to perform a specific task which distinguishes an embedded system from a general purpose computer that usually lacks the software and hardware configured to perform one or more specific tasks in a specific embedded environment. Examples of embedded systems include controllers for industrial processes remote monitoring and sensing systems as well as handheld devices such as cell phones and personal digital assistants. Although some of these devices such as personal digital assistants often include general purpose software execution among their features their construction and configuration resembles that of traditional embedded system devices and so they are often considered embedded systems.

Embedded systems can also often be customized to a greater extent than general purpose computers discarding hardware components and software drivers not used in a specific application of an embedded system. Embedded processor providers typically provide support for a variety of hardware through very robust software packages supporting a variety of different configurations such as USB analog network serial analog to digital digital to analog and other interfaces. It is therefore desirable to manage the hardware and software support included in a specific board configuration.

One example embodiment of the invention comprises a markup language file comprising software build options usable to determine at least one software build configuration setting. In another embodiment a method of configuring software for an embedded processor system comprises using one or more software build options specified in a markup language file to specify one or more software build configuration settings for use in compilation of software. The markup language in various embodiments is an XML file is editable in an Integrated Development Environment such as via a Graphical User Interface and includes settings specific to an embedded processor system configuration.

In the following detailed description of example embodiments of the invention reference is made to specific example embodiments of the invention by way of drawings and illustrations. These examples are described in sufficient detail to enable those skilled in the art to practice the invention and serve to illustrate how the invention may be applied to various purposes or embodiments. Other embodiments of the invention exist and are within the scope of the invention and logical mechanical electrical and other changes may be made without departing from the subject or scope of the present invention. Features or limitations of various embodiments of the invention described herein however essential to the example embodiments in which they are incorporated do not limit other embodiments of the invention or the invention as a whole and any reference to the invention its elements operation and application do not limit the invention as a whole but serve only to define these example embodiments. The following detailed description does not therefore limit the scope of the invention which is defined only by the appended claims.

Embedded systems including processors and associated hardware configured to perform a specific function are used to make a variety of common devices including medical devices aviation instrumentation home automation products communications devices such as routers handheld computers such as personal digital assistants and cell phones video game systems industrial control systems automotive computers and a wide variety of other such computerized devices.

Although many of these systems could be easily built using the same embedded processor the hardware around the processor will likely differ from application to application. A router for example will likely have several wired network ports but will not have wireless network capability or other data interfaces. An industrial controller might have a variety of analog to digital converter inputs to digitize analog signals being sensed and provide control output via a digital to analog converter but may not include any network functionality or USB ports.

Design of embedded systems such as these typically involves use of a prototype or evaluation circuit board having the desired hardware incorporated into the circuit along with an integrated development environment IDE including software support for a wide variety of hardware devices that are supported by the embedded processor provider. The IDE typically includes a source code editor and a compiler as well as a variety of libraries of functions to provide easier programmer interface to various hardware elements such as networking USB and other interfaces. The program segments are sometimes provided as part of what is known as a software development kit SDK which can include application programming interface API dynamic linked library DLL and other support for referencing external software or system services from a computer program. This makes it easier for a programmer to quickly and efficiently write software that uses a variety of different hardware components without having to learn or program common functions of the various hardware components.

In one such example a programmer using a wireless network interface can use pre existing software provided as a part of the software development kit to perform functions such as setting the IP address of a network device or configuring wireless network encryption by specifying certain configuration information and does not need to write the actual software that manages the wireless network connection and provides a TCP IP interface to other software.

But it is sometimes difficult to ensure that the proper provided software is included in a program or to ensure that the software provided or that is indicated as available to the programmer in the SDK or IDE is associated with hardware that is included in the specific configuration on which the programmer is designing software to run. For example an embedded system that includes a wireless network interface but not a wired or Ethernet interface does not need drivers for a wired Ethernet port included in the completed application but needs a network stack such as TCP IP and needs drivers for the wireless network interface. Managing this information to ensure that the right software is included or linked to the program under development when it is compiled is made easier in an embodiment of the invention by using an XML file to configure a board support package so that the hardware specific program configuration and code is included when needed.

Prior board support packages used documentation to describe the various hardware options and the associated software and configuration parameters. Changing these settings relied on the programmer to either manipulate the configuration files manually such as by using an editor to find and change the settings in various configuration files or use a software configuration tool such as the IDE to make configuration changes. In some software configuration tool examples all changes made to the configuration must be made via the configuration tool as the resulting configuration data is stored in a proprietary format that isn t user readable. In other examples the user can either manually edit the configuration files or can start over and make a new set of configuration files using the support tools.

Some embodiments of the invention seek to make management of this type of configuration information easier by using a programmer readable XML file to store board support information for a specific project or board configuration making it easy to change the configuration by editing the XML file directly or by using the IDE to make changes to the XML file. The parameters set via the XML file are presented in the IDE in some embodiments via a graphical user interface such as a menu having selection boxes radio buttons and prompts for configuration information.

In one such example a wireless network button is made available based on the board configuration s incorporation of wireless networking hardware as indicated in the XML file provided with the IDE. In another example the presence of the wireless networking hardware is detected by the IDE or can be configured by the programmer so that a board lacking certain hardware can be used to develop software for an embedded system that will include the hardware or other different configuration.

In this example a variety of wireless networking parameters are selectable via the IDE once the wireless network button is selected including IP address selection wireless encryption method and key and other such configuration parameters. These can be entered easily via the IDE without having to find a specific wireless networking specific configuration file and can further be read and modified in a single XML file that is used to configure other hardware on the board. By modeling the board support package configuration in XML the IDE can refer to a single representation of the board configuration in the XML file which contains the content and relationships between configuration elements. Details of the board support package are therefore managed via a single interface and a single XML configuration file even in embodiments where the XML information is used by the IDE or compiler to configure other files such as board support package variables build options template applications and makefiles based on the configuration information specified in the XML file.

The XML file in some examples describes the options available for a particular board but does not itself hold the configured values. For example in there is a configurable option called File System . This is a boolean value that is stored in a source file called bsp.h located in the BSPPLATFORMDIR directory of the developer s computer system using the tag BSP INCLUDE FILESYSTEM FOR CLIBRARY. When the board support package is created the graphical user interface presented via the Integrated Development Environment displays a check box indicating whether the File System option has been selected. If the box is checked the IDE tool edits the bsp.h file and changes the tag to indicate that a file system is to be included. Alternately the user can manually edit the bsp.h file to make the change and the IDE will recognize the changed setting when reading the tag specified in the XML file and indicate that a file system has been selected as an option.

For example line 11 of includes a makefilerule that is applied when building a make file or when compiling a program into executable code and in this example instructs the compiler whether to include IPSec security protocol software for supporting a certain type of security over Internet Protocol connections with the markup language instruction makefilerule noipsecrule . This parameter can be set by deselecting an IPSec button in a network configuration screen presented to a programmer working with a board that has a network interface or can be manually added or removed by editing the configuration files identified in the XML file directly. Because the XML file identifies the individual files that can also be manually edited changes made via one method will be observable and changeable via the other eliminating the need to manage multiple configuration files and compiler settings in different locations in completing a project.

The example of illustrates a variety of settings used in compiling a real time operating system RTOS or real time OS including the network support example previously discussed as well as other setting such as debugging settings and the location of various files used in compiling the operating system. In this example the settings made in the XML file of are settings that are specific to a NET OS operating system and are applicable to all board types that use this operating system. Other portions of the XML file or in some embodiments other XML files are used to configure other settings and to provide other information as shown in .

Similarly illustrates a portion of an XML file for a specific program or application consistent with an example embodiment of the invention. A variety of library paths are specified identifying software code libraries for performing functions used in the application such as operating and FTP server communicating e mail inclusion of a CPU load monitor and using SSL and other software level encryption services. Some parts of the XML file include comments as well as parameters and settings such as the description of the CPU Load Monitor function which can be used to make it easier to manually edit the XML file or can be imported into a graphical user interface presentation as a description field for the relevant configuration option. Much like the operating system specific settings of the application settings in may be applicable to more than one board type.

The Integrated Development Environment in this example guides the program developer through selecting various settings in the three levels of configuration represented by the XML files illustrated and described in and uses the selected settings to create an embedded application.

In some embodiments the XML file provided identifies all settings applicable to any board configuration for a specific board type processor or family and only those portions of the XML file relevant to the particular board configuration are displayed in the IDE graphical environment. For example the XML file may contain a variety of Ethernet wireless network Internet protocol network security and other networking configuration settings but the IDE will not present them to a user working on a project for a board that does not have network capability.

The various levels of configuration options illustrated in these three applications show how build options such as compiler and linker options libraries and operating system features can be identified via an XML markup language file and can be understood and edited by working directly with the configuration files or by working with the configuration file data specified in an XML file through a graphical user interface in an Integrated Development Environment. Because option changes are automatically saved to the appropriate configuration files when changed in the IDE the chances for error in managing settings across a large number of configuration files compiler settings and other project elements is reduced. Further understanding the structure and operation of the features available is enhanced by the relatively easy readability of the XML file and by integrating the settings stored there with presentation of a hierarchy of settings made selectively available in the IDE.

The underlying structure of the integrated development environment such as the libraries of code and the various configuration files used in a project can remain as they were in some embodiments so that the original structure of the programming environment remains compatible with prior programming projects and is easily understood by experienced programmers. These settings are in some embodiments managed via a central XML file to make management of the settings more convenient and more easily understood an so that the IDE can present the settings in a more useful way such as by requiring all needed settings be specified or ensuring that only available parameters are chosen.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement that achieve the same purpose structure or function may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the example embodiments of the invention described herein. It is intended that this invention be limited only by the claims and the full scope of equivalents thereof.

