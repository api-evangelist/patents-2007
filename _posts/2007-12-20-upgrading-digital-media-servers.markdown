---

title: Upgrading digital media servers
abstract: A system and method are disclosed for upgrading both hardware and software components of a digital media server without disrupting media delivery services. In a preferred embodiment, the present system and method employ an object-oriented model that allows system servers to remain fully operational while software upgrades at both the operating system and application levels are installed. Additionally, the system and method use redundant or partitionable programmable logic devices to perform firmware upgrades without disrupting media delivery services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=RE042685&OS=RE042685&RS=RE042685
owner: 
number: RE042685
owner_city: 
owner_country: 
publication_date: 20071220
---
Digital media servers such as Web based servers and video on demand servers typically include a number of functional components including components for storing digital media converting such media from file format to wire format and scheduling the delivery of media packets. During operation a media server accepts incoming requests for content from clients or administrators and delivers media packets to clients via a network.

Most digital media servers employ a PC based architecture and run a variety of software components to provide the above described functionality. Great effort is made during the design of such software components to ensure that they are fully debugged and free from defects. As a practical matter however many defects are not discovered during the design phase and are exposed only when the software is put into actual operation.

Defects discovered during system operation are often corrected by performing a software upgrade. Software upgrades are also sometimes performed to supplement or improve server functionality thus extending a server s competitive life.

To upgrade an executing software component the component must be stopped and the replacement version loaded into memory and run. During this period services normally provided by the component are unavailable.

The consequences of a defect in a media server s operating system may be even more severe. Operating systems are typically designed around a number of tightly coupled modules that supply abstract data structures such as files memory storage input output streams semaphores processes and threads to other programs. Application programs access these abstract structures through an application programming interface API . A change made to one of these structures may cause side effects in other structures or modules. Generally replacement of operating system level components requires reloading the entire operating system and is accomplished during a reboot of the server. Thus operating system level resources cannot be upgraded without taking the media server offline and rebooting may take a considerable amount of time before these services can be restored.

Offline servers are unable to accept incoming requests or deliver content to existing sessions. Consequently an offline server may affect the availability of an entire service network unless adequate redundant servers are available

Before the upgrade can be installed pre upgrade management steps are performed. In particular in step user sessions are either thinned or transferred to unaffected machines. Next in step services affected by the software to be upgraded are discontinued.

Next upgrade process steps are performed. In particular in step the settings and properties of the system are either copied or modified. In step new components are copied from the upgrade package. Although some media servers may permit the local or remote transfer of data into the server while it is operating some service disruption is typically necessary to effect the upgrade and in most cases the server must first be brought offline.

Next post upgrade process steps are performed. In particular in step the media server s power is cycled off and then back on if the server was taken offline and services provided by the upgraded software are restarted. A single power cycle may last anywhere from a few seconds to several minutes. The amount of time required for a single power cycle depends on how long the server needs to perform an orderly shutdown of running applications before powering off plus the time needed to reboot the server and restore the applications after powering back on. Only after these events are completed can the server begin to accept new user sessions step .

The above process may significantly affect system operation especially in cases of system wide upgrades such as an upgrade of all system APIs and low level drivers. A typical digital media company may have dozens of on line media servers affected by such an upgrade. Although the company may select a time for the upgrade when server usage is at its lowest point the upgrade may still disrupt service to some extent if it necessitates shutting down media servers. At a minimum the company may experience loss of revenue for the downtime and risk customer dissatisfaction

To avoid such service disruptions companies often maintain excess server capacity or redundant systems to handle traffic channeled away from affected servers during an upgrade. But redundant systems introduce additional overhead cost and in many cases are not available.

A system and method are disclosed for upgrading both hardware and software components of a digital media server without disrupting media delivery services In a preferred embodiment the present system and method employ an object oriented model that allows system servers to remain fully operational while software upgrades at both the operating system and application levels are installed. Additionally the system and method use redundant or partitionable programmable logic devices to perform firmware upgrades without disrupting media delivery services.

In one aspect the present invention is directed to a method of upgrading a digital media server comprising checking for the existence of an upgrade package comprising new objects identifying new objects in the upgrade package identifying functions and properties of the new objects evaluating compatibility of the new objects instantiating new objects as applications objects or services objects determining whether a new object replaces an old object and if the new object replaces the old object replacing the old object.

In another aspect of the present invention the step of replacing further comprises locking the old object and the new object copying fields from the old object to the new object establishing links from the new object to objects dependent on the old object rerouting links to the old object from other objects to the new object unlocking the new object and removing the old object.

In another aspect of the present invention the upgrade package further comprises one or more new methods for old objects and the method further comprises identifying the one or more new methods evaluating compatibility of the one or more new methods determining whether a new method replaces an old method and if the new method replaces the old method blocking and replacing the old method.

In another aspect of the present invention the method further comprises downloading the upgrade package from a network source.

In another aspect of the present invention the method further comprises loading the upgrade package from a storage medium.

In another aspect the present invention is directed to a method of upgrading a digital media server having a partitionable programmable logic device having a first active partition and a second inactive partition comprising programming the second partition with new logic transitioning the second partition from the inactive state to the active state and simultaneously assuming data processing functions from the first partition and transitioning the first partition to an inactive state.

In another aspect of the present invention the method further comprises programming the first partition with the new logic

In another aspect the present invention is directed to a method of upgrading a digital media server having two or more redundant programmable logic devices each having an active and inactive state comprising determining a first set of programmable logic devices that are in the active state loading new logic into a second set of one or more logic devices in the inactive state transitioning the second set of devices to the active state and simultaneously assuming data processing functions from the first set of devices and transitioning the first set of devices to the inactive state.

In another aspect of the present invention the method further comprises loading new logic into the first set of devices.

In another aspect the present invention is directed to a method of installing upgrades on a digital media server comprising a general purpose computer and a hardware engine the computer comprising an object oriented runtime environment and the hardware engine comprising a programmable logic device having a first active partition and a second inactive partition the method comprising checking for the existence of an upgrade package comprising new objects and new logic identifying new objects in the upgrade package identifying functions and properties of the new objects evaluating compatibility of the new objects instantiating new objects as applications objects or services objects determining whether a new object replaces an old object if the new object replaces the old object replacing the old object identifying new logic in the upgrade package programming the second inactive partition with the new logic transitioning the second partition from an inactive state to an active state and simultaneously assuming data processing functions from the first active partition and transitioning the first partition to an inactive state.

In another aspect of the present invention the step of replacing further comprises locking the old object and the new object copying fields from the old object to the new object establishing links from the new object to objects dependent on the old object rerouting links to the old object from other objects to the new object unlocking the new object and removing the old object.

In another aspect the present invention is directed to a method of installing upgrades on a digital media server comprising a general purpose computer and a hardware engine the computer comprising an object oriented runtime environment and the hardware engine comprising two or more programmable logic devices each having active and inactive states the method comprising checking for the existence of an upgrade package comprising new objects and new logic identifying new objects in the upgrade package identifying functions and properties of the new objects evaluating compatibility of the new objects instantiating new objects as applications objects or services objects determining whether a new object replaces an old object if the new object replaces the old object replacing the old object identifying new logic in the upgrade package determining a first set of programmable logic devices that are in the active state programming the new logic into a second set of one or more logic devices in an inactive state transitioning the second set of devices to the active state and simultaneously assuming data processing functions from the first set of devices and transitioning the first set of devices to the inactive state.

In another aspect of the present invention the step of replacing further comprises locking the old object and the new object copying fields from the old object to the new object establishing links from the new object to objects dependent on the old object rerouting links to the old object from other objects to the new object unlocking the new object and removing the old object.

In another aspect of the present invention the upgrade package further comprises one or more new methods for old objects and the method further comprises identifying the one or more new methods evaluating compatibility of the one or more new methods determining whether a new method replaces an old method and if the new method replaces the old method blocking and replacing the old method.

In another aspect the present invention is directed to a digital media server comprising an object store and an object oriented runtime environment comprising service objects application objects and an object manager adapted to facilitate the replacement of the service objects and the application objects without disrupting data processing functionality supplied by the service and application objects.

In another aspect of the present invention the server further comprises a network interface for downloading an upgrade package comprising replacement service and application objects.

In another aspect of the present invention the server further comprises storage media for storing an upgrade package comprising replacement service and application objects.

In another aspect the present invention is directed to a digital media server comprising two or more programmable logic devices each capable of switching between an active state and an inactive state an input data path and an output data path wherein one or more programmable logic devices in the active state processes digital media arriving on the input data path and presents processed digital media to the output data path while one or more programmable logic devices in the inactive state are programmed.

In another aspect the present invention is directed to a digital media server comprising a partitionable programmable logic device having two or more independently programmable partitions each partition capable of switching between an active state and an inactive state an input data path and an output data path wherein one or more partitions in the active state process digital media arriving on the input data path and present processed digital media to the output data path while one or more partitions in the inactive state are programmed.

In another aspect the present invention is directed to a digital media server comprising an object store an object oriented runtime environment comprising service objects application objects an object manager adapted to facilitate the replacement of the service objects and the application objects without disrupting data processing functionality supplied by the service and application objects two or more programmable logic devices each capable of switching between an active state and an inactive state an input data path and an output data path wherein one or more programmable logic devices in the active state processes digital media arriving on the input data path and presents processed digital media to the output data path while one or more programmable logic devices in the inactive state are programmed with new logic.

In another aspect the present invention is directed to a digital media server comprising an object store an object oriented runtime environment comprising service objects application objects an object manager adapted to facilitate the replacement of the service objects and the application objects without disrupting data processing functionality supplied by the service and application objects a partitionable programmable logic device having two or more independently programmable partitions each partition capable of switching between an active state and an inactive state an input data path and an output data path wherein one or more partitions in the active state process digital media arriving on the input data path and present processed digital media to the output data path while one or more partitions in the inactive state are programmed with new logic.

For purposes of illustration and to facilitate understanding of the present invention the preferred embodiments described below will be described in connection with a particular digital media server.

As shown in the digital media server of these preferred embodiments preferably comprises a hardware engine a general purpose computer and a storage device . Hardware engine preferably comprises a media buffer one or more programmable logic devices PLDs and a network interface . As described in detail below in a preferred embodiment hardware engine may comprise a partitionable PLD or redundant PLDs to facilitate media server upgrading without service disruption.

General purpose computer preferably comprises an object oriented runtime environment an operating system and hardware interfaces . Buses provide data communication paths between hardware engine general purpose computer and storage .

Hardware engine is preferably adapted to generate wire data packets from data stored on storage device and send them to clients across a digital network. In a preferred embodiment data is copied from storage device to media buffer under control of general purpose computing device . A preferred architecture comprising a general purpose computing device and hardware engine is described in U.S patent application Ser. No. 10 369 305 entitled Hybrid Streaming Platform filed on Feb. 19 2003 and identified by Pennic Edmonds LLP docket no. 11055 005 999 which is hereby incorporated by reference in its entirety for each of its teachings and embodiments.

PLDs are preferably adapted to convert the copied data in media buffer from file format to wire format. Complete data packets are sent onto the network by network interface . A preferred system and method for implementing these steps is described in U.S. patent application Ser No. 10 369 306 entitled Flexible Streaming Hardware filed on Feb. 19 2003 and identified by Pennie Edmonds LLP docket No. 11055 006 999 which is hereby incorporated by reference in its entirety for each of its teachings and embodiments.

A preferred embodiment of a streaming process implemented by digital media server is illustrated in FIG. . As shown in in step blocks of media data are read from storage device and copied directly to media buffer in accordance with instructions from general purpose computing device . In step hardware engine reassembles the media data from the blocks stored in media buffer .

In step hardware engine generates data packets while reading from media buffer . In step hardware engine transfers the freshly generated data packets to network interface which in turn writes the packets to a digital network. As noted this process and a platform for implementing it are described in more detail in U.S. patent application Ser. No. 10 369 306 entitled Flexible Streaming Hardware filed on Feb. 19 2003 and identified by Pennie Edmonds LLP docket No. 11055 006 999 and Ser. No. 10 369 305 entitled Hybrid Streaming Platform filed Feb 19 2003 and identified by Pennic Edmonds LLP docket No. 11055 005 999 both of which are hereby incorporated by reference in their entirety for each of their teachings and embodiments.

In a preferred embodiment general purpose computing device preferably has installed a runtime environment adapted to run object oriented software programs including programs for accomplishing any desired streaming solutions or other tasks. Such tasks may include session setup management and teardown of streaming sessions and error handling. In a preferred embodiment these programs are designed as object oriented programs.

Methods are procedures or functions that may be used to operate on data in fields . Methods of an object that may be called by other objects to interact with the object are known as interfaces .

Dynamic references represent control and data flow paths between objects . An object s references need not be defined before runtime and can be changed even after object has been created in runtime environment .

Object manager is preferably responsible for maintaining the state of all objects included in applications and services . In a preferred embodiment object manager validates objects to ensure that these objects are properly formed and not corrupt before loading them into runtime environment . Object manager also enumerates the objects and evaluates them to ensure compatibility with object manager environment generally and other objects .

Runtime environment is preferably built on facilities provided by general purpose computer s operating system . Application objects can indirectly access hardware by interacting with services through operating system . One with skill in the art will recognize that operating system may be implemented using object oriented components. Such an operating system may be located within runtime environment and operate as an extension of services . Effectively runtime environment may then be viewed as merged with operating system . This permits the operating system to be upgraded without interrupting the functionality it provides as described below.

Hardware preferably includes input output interface cards for interfacing with objects in the runtime environment as well as data storage .

Data storage is a repository that preferably contains definitions for objects or collections of objects known as packages . Such packages are typically assembled to make delivery of a collection of objects more convenient.

A preferred embodiment for upgrading object oriented software running on general purpose computer is described in connection with FIG. . As shown in in step a system administrator initiates an upgrade session. In step object manager determines whether an object package containing upgraded objects exists in data store . If an upgrade package is available a runtime extensible upgrade is performed in step .

Before performing the runtime extensible upgrade step object manager continually tracks the state of all current instances of objects in environment including their dynamic references to other objects. In step object manager identifies any new objects in upgrade package and if so validates that they are properly formed and not corrupt. In step each object in package and the object s corresponding interfaces and properties are enumerated. During this enumeration process object manager determines how the objects will interact with other objects. Next in step each object is evaluated for compatibility with other objects that may call it. Also the object version is preferably checked to ensure that it is compatible with object manager and environment as well as other interacting objects.

In step object manager creates instances of the new objects in appropriate areas of environment . Object manager also establishes the logical connections between the new objects and existing services or applications .

With respect to new objects that wholly or partially replace functions provided by existing objects object manager is preferably adapted to direct an orderly transition from those existing objects being replaced to the new objects being installed. This process is referred to herein as staging and is described in more detail below in connection with FIG. . In step object manager copies fields from existing objects into their corresponding replacement objects. Next in step new dynamic references are established between existing objects that are to remain on line and any new objects. In step existing dynamic references are re routed to the new objects. This permits an orderly rerouting of object references from existing objects to new objects.

In step objects that are no longer in active use are either permanently purged from environment by object manager or archived to storage for possible later retrieval.

Because an upgrade may include a partial or complete replacement of existing objects a potential exists for suspension of services or functions provided by objects being replaced. In a preferred embodiment the present system and method address this issue by staging new replacement objects to avoid service disruption as existing objects are replaced. More specifically staging allows object manager to transfer active data communication paths from existing objects to new objects during an upgrade rather than disrupting or terminating these data communication paths.

An exemplary staging process is illustrated in FIG. . In the exemplary scenario of object A is being replaced by object B as part of an upgrade. In step object manager verifies that the methods and properties of object B are compatible with upstream objects that object A references These upstream objects are objects that provide data or services to object A. In step object manager verifies that the methods and properties of object B are compatible with downstream objects that reference object A. These downstream objects are objects that require services or receive data from object A. Once these verifications have been completed object manager creates an instance of object B in environment .

Next in step object manager locks object A and object B in environment . Locking prevents fields of either object from changing and provides object manager with exclusive access to these objects during the transition from object A to object B.

While the objects are locked in step object manager copies the value of fields found in object A to object B. Then in step references to upstream objects are copied from object A to object B. Likewise in step references to object A found in downstream objects are redirected to object B. In step object B is unlocked by object manager thus restoring the services and functionality originally provided by object A but now provided by object B and making available any new services and functionality provided by object B. In step object manager purges or archives object A thus completing the staging process.

Staging may also comprise a finer grained approach where an object s methods are changed without replacing the entire object. In such cases the entire object need not be locked instead access to the upgraded method is restricted. For example suppose that a log writer interface contained in a stream manager object requires upgrading. The stream manager object continues to provide functions to other objects through other methods. The staging process blocks object access to the log writer interface but does not lock the stream manager object. After the code for the log writer interface has been replaced objects can resume interaction with the log writer interface.

Programmable logic devices in hardware engine do not typically comprise an operating system like general purpose computer . Instead PLDs are typically designed with programmable logic to efficiently accomplish a relatively limited set of data processing tasks as described above. Two preferred embodiments for maintaining media delivery at full capacity during an upgrade of the programmable logic found in a PLD are described below.

In the first preferred embodiment each PLD is capable of selectively partitioning and reprogramming specific portions of the device leaving other non affected portions operating normally. In the second preferred embodiment hardware engine comprises redundant PLDs. These embodiments are described in connection with and .

An example of a firmware upgrade process for partitionable PLD is illustrated in more detail in FIG. . As shown in in step when a system administrator initiates a firmware upgrade a new partition is created in PLD . Next in step the partition is programmed with a new set of hardware description language HDL logic. In step an operational transfer is made wherein the partition takes control of processing functions from an original partition that it is replacing. More specifically the new inactive partition is transitioned to the active state and supplies the processing functions necessary to continue streaming digital media. Concurrently the original partition is transitioned to an inactive state. Then in step the original partition is reprogrammed thus completing the upgrade session.

With this redundant approach one PLD may be left available for reprogramming while the other responds to requests from general purpose computer . Later the two PLDs may again swap control so that the other may be upgraded. A firmware upgrade may thus be completed without disrupting digital media delivery service.

An example of a firmware upgrade process for redundant PLD pipeline is illustrated in more detail in FIG. . As shown in in step when a system administrator initiates a firmware upgrade a determination is made as to which device is active and which is inactive or pass through. For purposes of the exemplary scenario of it will be assumed that PLD A is active. Next in step PLD B is upgraded by loading a new set of hardware description language HDL logic. In step an operational transfer is made wherein PLD B becomes the active device and PLD A becomes inactive. Then in step PLD A is upgraded with a new set of HDL logic thus completing the upgrade session.

While the invention has been described in conjunction with specific embodiments it is evident that numerous alternatives modifications and variations will be apparent to those persons skilled in the art in light of the foregoing description.

