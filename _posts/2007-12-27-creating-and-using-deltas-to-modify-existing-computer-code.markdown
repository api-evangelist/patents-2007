---

title: Creating and using deltas to modify existing computer code
abstract: Aspects of the subject matter described herein relate to creating and using deltas to modify existing computer code. In aspects, computer code may be translated into a higher level language to make it easier for a software developer to modify the computer code. The translated computer code may be presented by an editing tool that presents a user interface that allows changes to be made to the translated computer code. A delta engine may then determine a delta that indicates the changes to perform on the existing computer code to create computer code that would result from compiling the translated computer code as changed via the editing tool. Later, this delta may be used to change the existing computer code after it has been loaded to add or change debugging hooks or other features of the computer code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584102&OS=08584102&RS=08584102
owner: Microsoft Corporation
number: 08584102
owner_city: Redmond
owner_country: US
publication_date: 20071227
---
When computer code is released it may be released with debugging hooks. Debugging hooks may allow a debugging tool for example to be notified when certain events occur. Once the computer code is released however adding hooks or changing the available hooks is somewhat cumbersome. For example because of security reasons some software vendors sign computer code and build applications that will only work when they are interacting with code having a particular signature. Thus changing the code to include the additional hooks repackaging the code for distribution distributing the updated code and installing the updated code besides being work intensive may not be sufficient to allow additional debugging of the updated code at a customer site.

Briefly aspects of the subject matter described herein relate to creating and using deltas to modify existing computer code. In aspects computer code may be translated into a higher level language to make it easier for a software developer to modify the computer code. The translated computer code may be presented by an editing tool that presents a user interface that allows changes to be made to the translated computer code. A delta engine may then determine a delta that indicates the changes to perform on the existing computer code to create computer code that would result from compiling the translated computer code as changed via the editing tool. Later this delta may be used to change the existing computer code after it has been loaded to add or change debugging hooks or other features of the computer code.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects is to be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned previously adding debug hooks to already existing computer code may be cumbersome and involve many steps. The term debug hooks as used herein is to be read to include any code modification to a first computer code. Such code modifications may include code that allows second computer code to get information or get or set data in the first computer code. For example a debug hook may add the capability to be notified of an event that occurs in the first computer code. As another example a debug hook may add the capability to get or set a data element structure object or the like of the first computer code. Aspects of the subject matter described herein are directed to easing the process of modifying existing computer code including the adding deletion and or modifying of features and or program hooks to existing computer code.

The computer code may be included in a subroutine. As defined herein a subroutine includes a method a function a procedure a section of code that is callable with or without parameters a section of code that returns or does not return parameters a section of code with an entry point and an exit point and the like.

The computer code may be encoded in intermediate language assembly language binary code some combination of the above and the like.

An intermediate language is a language that is between a language in which a software developer develops computer code and a language used for object or machine code for a computer that will execute the computer code. Sometimes an intermediate language is used to facilitate portability or optimizations. For example a company may create a suite of compilers for different programming languages where each compiler compiles computer code written in its corresponding programming language into a common intermediate language.

The computer code is provided to the code translator . The code translator uses the computer code and creates corresponding computer code in a higher level language. Just a few exemplary higher level languages include C C C Basic Java Pascal Fortran assembly language and Cobol. Those skilled in the art will recognize many other higher level languages. In one embodiment where the computer code is represented in intermediate language the code translator creates a higher level language that is often compiled into the intermediate language code. For example if the computer code is encoded in Java bytecode the code translator may decompile the computer code into Java . As another example if the computer code is encoded in an intermediate language for use with the NET Framework the code translator may decompile the computer code into C or Visual Basic. As yet another example the binary representation of an intermediate language e.g. bytecode may be translated into a human readable representation e.g. source code via disassembly.

The code translator may use any of many techniques in translating the computer code into a higher level language. Some of these techniques include decompiling the computer code and disassembling the computer code . Note that decompiling may be used in conjunction with some manual tweaking of the code created by the decompilation without departing from the spirit or scope of aspects of the subject matter described herein. Other techniques may involve extracting information from metadata associated with the computer code . Other mechanisms of translating the computer code may also be used without departing from the spirit or scope of aspect of the subject matter described herein.

After the code translator has translated the computer code into computer code encoded in a higher level language this higher level language code is presented to an editing tool . In the editing tool a software developer is able to make changes to the code. In editing the code the software developer may expose delete or change hooks properties data structures or other features of the code.

The editing tool may also provide some enhanced editing functions regarding the translated code. For example the editing tool may allow the developer to indicate actions that are to occur before computer code is executed and or actions that are to occur after the computer code is executed.

After making changes to the code the software developer may indicate that a delta is to be created. A delta indicates changes to make to the computer code to modify the computer code so that the changes the software developer has made in the higher level language are reflected in the modified code. As will be described later in one embodiment the changes indicated by the delta may be applied after or while the computer code is being loaded into memory. In another embodiment the delta may be applied before the computer code is loaded into memory and may be persisted to non volatile storage.

In one embodiment after the software developer indicates that a delta is to be created a compiler takes the higher level language representation of the modified computer code and creates code in a lower level language corresponding to the language in which the computer code is written. The delta engine receives this lower level language code and generates a delta of differences between this code and the computer code . This delta may then be used to modify the computer code to reflect the changes made with the editing tool using the higher level language.

In one embodiment the delta engine may operate directly on the source code provided by the editing tool to create the delta . For example in one embodiment the delta is created without compiling the higher level language into a lower level language. In such an embodiment the compiler may be omitted.

Furthermore one or more of the entities indicated in may be combined with other entities. For example two or more of the code translator editing tool compiler and delta engine may be combined into a single tool that performs the various functions of the combined entities while presenting a unified interface to a user.

When the computer code is to be executed on a computer a software loader loads the computer code into main memory. The software loader may be one of many types of software loaders including for example a debugger profiler dynamic link library loader general purpose executable loader intermediate language loader and the like.

After the software loader has loaded the computer code into main memory the computer code is more readily available for execution as will be understood by those skilled in the art. In addition as mentioned previously computer code may be cryptographically signed. Changing the computer code before loading it into main memory may cause other computer code that interacts with the computer code to reject the modified computer code. Allowing the software loader to load the original computer code into main memory allows standard security mechanisms to verify that the computer code has not been changed. Computer code that will not run unless there is valid cryptographically signed computer code will work properly and not abort if the original computer code is loaded into memory and verified by expected security mechanisms.

Also note that loading the computer code into main memory does not need to occur all at once. Rather portions of the computer code may reside on disk or other non volatile storage until they are needed for execution. At the time a particular portion of the code is needed for execution it may then be loaded into main memory. Memory paging mechanisms may also be employed without departing from the spirit or scope of aspects of the subject matter described herein.

After the original computer code is in memory at block a tool herein sometimes called patcher uses the delta that was created as described in conjunction with and modifies the computer code in memory. The patcher may comprise for example a debugger a profiler or some other computer code.

In one embodiment the software loader and the patcher may be part of the same component with the ability to load the original computer code directly into the modified computer code in memory while applying the delta . In another embodiment the software loader and the patcher may be separate components that communicate with each other to load the original computer code directly into the modified computer code in memory .

The modified computer code in memory may be linked to one or more other software including for example a logger a debugger and or other application . Note that this linking may occur before or after the patcher has modified the original computer code in memory.

The helper computer code may include interfaces to additional features exposed in the modified computer code in memory . When an application links to the modified computer code in memory the application may not be aware of the additional features that are available. This may result for a variety of reasons including that the application may link to the modified computer code in memory before the computer code is modified.

To overcome this obstacle in not being able to access the new features because of not being aware of the new features the helper computer code may be utilized. In one embodiment the helper computer code may not be a part of the original computer code. Instead it may be injected into the modified computer code in memory at run time.

The helper computer code may include application programming interfaces APIs that correspond to the new features of the modified computer code in memory . These APIs may be plumbed to the modified computer code in memory so that when accessed they turn around and access the new features in the modified computer code and such that when a new event that is exposed in the modified computer code in memory occurs corresponding code in the helper software code notifies a registered application of the event. An application may link to the helper computer code and may call the helper computer code to access a new feature activate or deactivate a feature in the computer code or be called or notified by the helper computer code when a newly exposed event occurs in the modified computer code.

The helper computer code may be coded to interface with the modified computer code in memory as modified such that the helper computer code is aware of the new features of the modified computer code and is able to call and otherwise interact with the new features of the modified computer code. The helper computer code may be distributed or made available in conjunction with the delta .

The logger debugger and or other application are intended to be exemplary. Indeed virtually any computer code may link to the modified computer code in memory before or after it is modified as well as the helper computer code to gain access to new or changed features in the modified computer code in memory .

In one embodiment the helper computer code may comprise a set of features that are to be made available to an application such as a debugging tool. The application e.g. one of the logger the debugger or the other application may be coded to strictly access the helper computer code instead of accessing the modified computer code in memory . Then for each computer code that the application is to be used with a delta may be created that causes the computer code to communicate with the helper computer code to deliver the set of features needed by the helper computer code to deliver the features to the application.

In this manner the application does not need to be rebuilt for each software program. Instead the application may access the helper computer code and trust that the helper computer code will have access to the appropriate features in the computer code via a delta built to expose the features in the computer code to the helper computer code .

As will be recognized by those skilled in the art this allows one to develop a debugging platform that is specific to a certain domain. For example a debugging platform may deal specifically with animation features database features inter process communication features networking features other features or the like and may provide a rich visual environment in which to debug these features. To debug a particular computer code one or more deltas may be created to cause the computer code to interact with the helper computer code as appropriate to provide the information provided by the helper computer code .

Turning to the apparatus may include components an original computer code and a delta . The components may include a code translator a delta engine a compiler assembler and an editing tool . The apparatus may be implemented as a computer e.g. the computer of 

The code translator may translate computer code encoded in one computer language to computer code encoded in another computer language. For input the code translator may use the original computer code . The code translator operates similarly to the code translator described in conjunction with and will not be described in more detail here.

The editing tool allows a software developer to make changes to the translated code generated by the code translator . The editing tool operates similarly to the editing tool described in conjunction with and will not be described in more detail here.

The compiler assembler hereinafter referred to as the compiler compiles or assembles computer code encoded in one computer language to a computer code encoded in another computer language. The term compiler assembler refers to a component that is capable of compiling or assembling or compiling and assembling. Furthermore wherever the term compiler is used in this document outside of the claims in another embodiment the term assembler is to be substituted instead of compiler. In such embodiments the term compiles and its equivalents is to be replaced with assembles or its equivalents. As input the compiler may receive the computer code as edited by the editing tool and may generate other computer code encoded in the computer language of the original computer code for example. The compiler operates similarly to the compiler described in conjunction with and will not be described in more detail here.

The delta engine generates the delta of differences between one computer code e.g. the original computer code and the other computer code e.g. the changed computer code compiled by the compiler . As mentioned previously this may be possible to do without compiling the changed computer code. In such an implementation the compiler may be omitted. The delta may indicate the changes to make to change the original computer code into a computer code that would result by compiling the changed computer code obtained via the editing tool . The delta engine operates similarly to the delta engine of and will not be described in more detail here.

Turning to at block the actions begin. At block the original computer code is translated into a higher level language. For example referring to the original computer code may be decompiled by the code translator .

At block the translated computer code is obtained by an editing tool. For example referring to the editing tool obtains the translated computer code from the code translator .

The original computer code may be translated by a component separate from or a part of the environment that includes the editing tool. If the translator is part of the editing tool s environment obtaining the translated computer code may be as simple as obtaining a pointer to the memory in which the translated computer code resides. If the translator is not part of the editing tool s environment obtaining the translated computer code may involve obtaining a name of a file that includes the translated computer code a location at which the translated computer code may be found or the like.

At block the editing tool receives changes to the translated computer code. For example referring to the editing tool may present a user interface that a software developer may use to change the translated computer code. The editing tool may receive these changes from the software developer.

At block a changed computer code is created using the changes. For example referring to the editing tool may change the computer code as indicated by the software developer. The computer code as changed may be stored to main memory or non volatile memory under a different name as desired.

At block the changed computer code is compiled into a compiled computer code. For example referring to the compiler may compile the changed computer code into a computer code encoded in the programming language of the original computer code for example. In embodiments where compilation is not needed to create a delta the actions associated with block may be omitted.

At block a delta is created that indicates changes that need to be made to the original computer code to create the compiled changed computer code. For example referring to the delta engine may apply a differencing algorithm to the compiled changed computer code and the original computer code to determine the changes.

Turning to at block the actions begin. At block a patching tool receives the delta. For example referring to the patcher receives the delta .

At block the original computer code is loaded into memory. For example referring to the software loader loads the original software code into memory.

At block a verification may be performed to determine that the computer code has not changed. For example referring to an application may verify that the original software in memory has not changed before linking to the original software in memory. To do this the application may use a security feature associated with the software. One exemplary security feature comprises a cryptographic signature that involves use of the code of the original software in memory to create a signature. Using this signature another entity can determine whether the code has changed. In light of the teachings contained herein other mechanisms for ensuring that the software in memory has not changed will be apparent to those skilled in art. Such other mechanisms may also be used without departing from the spirit or scope of aspects of the subject matter described herein.

At block the changes indicated by the delta are applied to the original computer code. For example referring to the patcher uses the delta and applies the changes included therein to the original computer code in memory . The result is the modified computer code in memory . In one embodiment the delta may be applied at the moment the computer code is about to be executed.

At block at least a portion of the changed computer code is executed before being purged from memory. For example referring to an application e.g. the logger debugger or other application and or the helper computer code may call a routine in the modified computer code in memory .

As can be seen from the foregoing detailed description aspects have been described related to creating and using deltas to modify existing computer code. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

