---

title: Distribution of job in a portable format in distributed computing environments
abstract: A distributed computing system includes a device that creates a job to be performed by one or more workers, where the job includes a group of tasks. The device further encodes the job into a group of portable format files, where each portable format file includes one or more tasks of the group of tasks. Each portable format file may be handled by each scheduler of a group of different schedulers. The device also transfers the group of portable format files via a network of the distributed computing system and sends information related to the job to one scheduler of the group of different schedulers. The information allows the one scheduler to cause the group of portable format files to be distributed to the one or more workers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745624&OS=08745624&RS=08745624
owner: The Mathworks, Inc.
number: 08745624
owner_city: Natick
owner_country: US
publication_date: 20070810
---
This application is a continuation of pending U.S. patent application Ser. No. 11 060 971 filed Feb. 17 2005 which is a continuation in part of pending U.S. patent application Ser. No. 10 940 151 filed on Sep. 13 2004 which is a continuation in part of pending U.S. applications Ser. No. 10 896 784 filed Jul. 21 2004 the entire disclosures of all of these applications being expressly incorporated by reference herein in their entireties.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention generally relates to distributed computing environments and more particularly to systems methods and computer program products for distributing a job in a portable format in the distributed computing environments.

MATLAB is a product of The MathWorks Inc. of Natick Mass. which provides engineers scientists mathematicians and educators across a diverse range of industries with an environment for technical computing applications. MATLAB is an intuitive high performance language and technical computing environment that provides mathematical and graphical tools for mathematical computation data analysis visualization and algorithm development. MATLAB integrates numerical analysis matrix computation signal processing and graphics in an easy to use environment where problems and solutions are expressed in familiar mathematical notation without traditional programming. MATLAB is used to solve complex engineering and scientific problems by developing mathematical models that simulate the problem. A model is prototyped tested and analyzed by running the model under multiple boundary conditions data parameters or just a number of initial guesses. In MATLAB one can easily modify the model plot a new variable or reformulate the problem in a rapid interactive fashion that is typically not feasible in a non interpreted programming such as Fortran or C.

As a desktop application MATLAB allows scientists and engineers to interactively perform complex analysis and modeling in their familiar worker environment. However a single worker can be limiting to the size of the problem that can be solved because of the relationship of the computing power of the worker to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time. For example a simulation of a large complex aircraft model may take a reasonable time to run with a single computation with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters e.g. at one hundred different altitude levels and fifty different aircraft weights to understand the behavior of the model under varied conditions. This would require five thousand computations to analyze the problem as desired and the single computer would take an unreasonable or undesirable amount of time to perform these simulations. In this case the single computer would be allocated full time to performing the computation while many computer resources on the network may be idle. Additionally the benefit of the interactive features of the software is reduced as the computation time increases.

With many engineering and scientific problems requiring larger and more complex modeling computations accordingly become more resource intensive and time consuming. When a computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single computer a solution to decrease the computation time is needed. As a solution distributed computing systems have been provided to deal with a large and complex engineering and scientific computation. In the distributed computing systems a job manager or scheduler may be employed to distribute a given computation to remote computing entities so that the remote computing entities are able to perform the distributed computation. The job manager or scheduler may be provided by various vendors and may be unique in many respects. Therefore it is needed for the distributed computing environment to interface with an arbitrary job manager provided by an arbitrary vendor i.e. any one of a number of different job managers . In the conventional distributed computing environment however the job manager or scheduler deals with tasks in a job to distribute the tasks to remote computing entities which increases the dependency of the distributed computing environment upon the platform structure of the job manager or scheduler. Therefore it is needed to provide a distributed computing environment that is independent of the platform structure of the job manager or scheduler.

In one aspect a computer readable medium stores instructions executable by at least one processor to perform a method. The computer readable medium may include one or more instructions for creating a job object defining a job to be executed by at least one worker in a distributed computing environment that includes a group of different schedulers and a group of workers one or more instructions for encoding the job object into portable format that is independent of an architecture of the group of different schedulers one or more instructions for transferring the job object encoded in the portable format via a network of the distributed computing environment and one or more instructions for sending information relating to the job to one scheduler of the group of different schedulers where the information allows the scheduler to cause the job object in the portable format to be distributed to the at least one worker.

In a second aspect a method may be performed in a distributed computing environment that includes a client a group of different schedulers and a group of workers. The method may include creating a job to be performed by one or more workers of the group of workers where the job includes a group of tasks and forming a group of portable format files from the job where each portable format file of the group of portable format files includes one or more tasks of the group of tasks and where each portable format file is capable of being handled by any scheduler of the group of different schedulers. The method may further include transferring the group of portable format files via a network of the distributed computing environment and sending information related to the job to one scheduler of the group of different schedulers where the information allows the one scheduler to cause the group of portable format files to be distributed to the one or more workers.

In a third aspect a distributed computing system may include a device. The device may create a job to be performed by one or more workers where the job includes a group of tasks and encode the job into a group of portable format files where each portable format file of the group of portable format files includes one or more tasks of the group of tasks. Also each portable format file is capable of being handled by each scheduler of a group of different schedulers. The device may further transfer the group of portable format files via a network of the distributed computing system and send information related to the job to one scheduler of the group of different schedulers. The information may allow the one scheduler to cause the group of portable format files to be distributed to the one or more workers.

In a fourth aspect a method may include creating a job that includes at least one task encoding the job into a portable format where the portable format is independent of a platform structure of a scheduler transferring the encoded job in the portable format via a network sending information related to the job to the scheduler where the information allows the scheduler to cause the encoded job in the portable format to be distributed to a worker receiving the encoded job in the portable format at the worker decoding the job from the portable format to restore the job and executing the job at the worker.

In a fifth aspect a client in a distributed computing environment that includes a group of different schedulers and a group of workers may include means for creating a task to be performed by one worker of the group of workers means for forming a portable format file from the task where the portable format file includes the task and being independent of an architecture of the group of different schedulers means for transferring the portable format file via a network of the distributed computing environment and means for sending information related to the job to one scheduler of the group of different schedulers where the information allows the one scheduler to cause the portable format file to be distributed to the one worker.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not made express herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides a distributed computing environment in which an arbitrary scheduler is able to be employed. In the distributed computing environment of the illustrative embodiment tasks can be created on a technical computing client and additionally organized into jobs. A job is a logical unit of activities or tasks that are processed and or managed collectively. A task defines a technical computing command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. A job is a group of one or more tasks.

The illustrative embodiment will be described solely for illustrative purposes relative to a distributed MATLAB technical computing environment. Although the illustrative embodiment will be described relative to a distributed MATLAB based application one of ordinary skill in the art will appreciate that the present invention may be applied to distributing the processing of technical computing tasks with other technical computing environments such as technical computing environments using software products of LabVIEW or MATRIXx from National Instruments Inc. or Mathematica from Wolfram Research Inc. or Mathcad of Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

In the illustrative embodiment of the present invention a job including technical computing tasks may be submitted to an arbitrary scheduler for distributing the job to remote technical computing workers for execution of the tasks on multiple computers systems. The job is submitted to the arbitrary scheduler in a portable format such as a MAT file format. In the illustrative embodiment the portable format refers to the format of a program or database that is capable of being moved to various systems. The illustrative embodiment utilizes the MAT file format to submit the job to a scheduler. Since the MAT file format is independent of the platform structure of the scheduler the schedule can handle the job regardless of the platform structure of the scheduler. Those of ordinary skill in the art will appreciate that the MAT file format is an illustrative format and the job can be submitted to the scheduler in any other portable format such as a binary format or a serial format.

The scheduler then transfers the job in the MAT file format to one or more remote workers with designation information of the technical computing tasks in the job so that the remote workers perform technical computing on designated tasks and return results to the arbitrary scheduler. The scheduler in turn forwards the result to the technical computing client. In the illustrative embodiment the scheduler refers to a process or program that tracks the progress of and allocates resources for a series of tasks. Although the scheduler generally refers to a job manager or task manager with additional functions the terms including scheduler job manager and task manager are used interchangeably in the description of the illustrative embodiment of the present invention.

The illustrative embodiment of the present invention also provides an interface between the host or client and the arbitrary scheduler so that the host or client is able to submit a job and information on the job to the arbitrary scheduler. The information on the job is used for the scheduler to distribute the job to one or more remote workers. Interfaces with the arbitrary scheduler may also be provided to establish communication channels between the arbitrary scheduler and the remote workers so that the arbitrary scheduler is able to distribute the job to the remote workers through the communication channels. The scheduler may send the remote workers information on the designation of one or more tasks in the job so that the remote workers can execute the designated one or more tasks in the job and return the results of executing the one or more tasks to the arbitrary scheduler through the established communication channels between the arbitrary scheduler and the remote workers. The scheduler may subsequently forward the results to the host or client.

The computing device may be electronic and include a Central Processing Unit CPU memory storage an input control a modem a network interface a display etc. The CPU controls each component of the computing device to provide the distributed computing environment. The memory temporarily stores instructions and data and provides them to the CPU so that the CPU operates the computing device and runs the distributed computing environment. The memory may include a computer system memory or random access memory such as DRAM SRAM EDO RAM etc. The memory may also include other types of memory as well or combinations thereof. The storage such as a hard drive or CD ROM usually contains software tools for applications. The storage includes in particular code for the operating system OS of the device code for applications running on the operation system including applications for providing the distributed computing environment such as MATLAB distributed computing environments and data for jobs and tasks created in the distributed computing environment and the results of executing the jobs and tasks. The input control may interface with a keyboard a pointing device and other input devices. The computing device may receive through the input control input data necessary for creating jobs and tasks. The computing device may display in the display user interfaces for the users to create the job and tasks. The computing device may also display other user interfaces for the users to interact with the computing device through the display such as a computer monitor which may include a graphical user interface GUI . The modem and network interface will be described below with reference to .

The technical computing client can be a technical computing software application that provides a technical computing and graphical modeling environment and to define mathematical algorithms for simulating models. The technical computing client can be a MATLAB distributed computing client which may include all or a portion of the functionality provided by the standalone desktop application of MATLAB . Additionally the technical computing client can be any of the software programs available in the MATLAB product family. Furthermore the technical computing client can be a custom software program or other software that accesses MATLAB functionality via an interface such as an application programming interface or by other means. One ordinarily skilled in the art will appreciate the various combinations of client types that may access the functionality of the system.

With an application programming interface API and or programming language of the technical computing client functions can be defined representing a technical computing task to be executed by either a technical computing environment local to the client or remote on a worker. The local technical computing environment may be part of the technical computing client or a technical computing worker running on the client . The programming language includes mechanisms to define a job to be distributed to a technical computing environment and to communicate the job to the technical computing worker on the worker or alternatively on the client . For example the technical computing client may declare a function to generate a random set of ten numbers and further delegate that the technical computing worker running on the worker execute the function. Also the API and programming language of the MATLAB distributed computing client includes mechanisms to receive a result from the execution of technical computing of the job from another technical computing environment.

The technical computing workers and can be a technical computing software application that provides a technical computing environment for performing technical computing of tasks such as those tasks defined or created by the technical computing client . The technical computing workers and can be a MATLAB distributed computing application module service software component or a session which includes support for technical computing of functions defined in the programming language of MATLAB . The technical computing workers and can include all the functionality and software components of the technical computing client or it can just include those software components it may need to perform technical computing of tasks it receives for execution. The technical computing workers and may be configured to and capable of running any of the modules libraries or software components of the MATLAB product family. As such the technical computing workers and may have all or a portion of the software components of MATLAB installed on the workers and or alternatively accessible on another system in the network . The technical computing workers and are capable of performing technical computing of the task as if the technical computing client was performing the technical computing in its own technical computing environment.

The technical computing client includes an interface that enables the arbitrary scheduler on the server to interface with the technical computing client on the client . The interface establishes the communication channel between the technical computing client and the arbitrary scheduler so that the technical computing client is able to submit the job to the arbitrary scheduler through the communication channel. In addition the technical computing client also receives a result from the execution of the job through the communication channel established by the interface between the technical computing client and the arbitrary scheduler . One of ordinary skill in the art will appreciate that the interface may be provided in the technical computing client or in the network interface .

The workers and include interfaces and that enable the arbitrary scheduler on the server to interface with the technical computing workers and on the workers and respectively. The interfaces and establish the communication channels between the arbitrary scheduler and the technical computing workers and so that the arbitrary scheduler is able to distribute the job to the technical computing workers and through the communication channels. In addition the arbitrary scheduler may also receive the result from the execution of the tasks through the communication channels. One of ordinary skill in the art will appreciate that the interfaces and may be provided in the technical computing workers and and or in the network interface .

The interfaces establish the communication channel independent of the vender of the arbitrary scheduler and the interface protocol of the arbitrary scheduler. The interfaces are able to establish communication channels with an arbitrary scheduler supplied from various venders and independent of an interface protocol or interface format of the arbitrary scheduler. The interface protocol or interface format refers to a set of rules for transmitting data and receiving data from the arbitrary scheduler. The set of rules is capable of defining a data format for transferring data to or receiving data from an arbitrary scheduler and is further capable of defining at least a type of error checking if any to be used for data transmissions a data compression method if any how the sending mechanism will indicate that it has finished sending data how the arbitrary scheduler will indicate that it has received data.

The interface engine is responsible for managing data transfers between the technical computing client and the arbitrary scheduler . The interface engine is further responsible for formatting the data into a format understandable by the technical computing client or the arbitrary scheduler . The interface engine can interface with a scheduler object to determine a communication protocol defining how the data is transferred between the arbitrary scheduler and the technical computing client . The interface engine communicates to the adaptor in order to allow the interface engine to communicate with the arbitrary scheduler . The interface is capable of including more than one adaptor for interfacing with different arbitrary schedulers . As such it is possible to have an adaptor for each scheduler . The adaptor of the illustrative embodiment is extensible to interface with any of the different arbitrary schedulers . The adaptor may provide base properties generic to the arbitrary schedulers . The base properties apply to all supported schedulers regardless of the vendor. The adaptor may also provide additional properties specific to each of the different arbitrary schedulers . The scheduler specific properties apply only to a scheduler from a specific vendor. By adding the scheduler specific properties the adaptor can be extended to interface with the specific scheduler. The adaptor assists in creating an abstraction of information specific to the arbitrary scheduler . The abstracted data is used by the interface to create one or more objects such as a scheduler object which will be described below in more detail with regard to .

The interface using the interface engine and the adaptor establishes and provides a communication channel between the technical computing client and the arbitrary scheduler . Thus the communication channel operates in a manner independent of an interface type and protocol and the vendor of the arbitrary scheduler thus allowing the technical computing client to interface with and interact with the arbitrary scheduler using a set of functions methods and controls.

The interface may receive a request for a communication channel between the technical computing client and the arbitrary scheduler step . The interface engine searches a directory or other suitable data structure such as a file or look up table for an available adaptor suitable for the arbitrary scheduler step . The search for available adaptors can be performed once when the request for the communication channel is received the results of which can be stored in a storage device or in a suitable storage medium. Nevertheless the interface is adaptable so that each time the request is received a new search is performed for available adaptors in the event that a new adaptor is plugged in. For the purpose of the discussion of the illustrative embodiment of the present invention information on available adaptors is stored after an initial search. The interface engine can initialize all available adaptors or initialize a selected one or more adaptors suitable for use with the arbitrary scheduler . Each initialized adaptor provides some form of an indication such as a Boolean return value to the interface engine to indicate completion or failure of initialization. The interface engine upon receipt of all values from the initialized adaptors returns a list of available adaptors that were successfully initiated to the technical computing client .

If the adaptor is available for the arbitrary scheduler step then it is determined if the adaptor has already abstracted information concerning the arbitrary scheduler and if that information is available for example is there a file a class definition or object that contains the abstracted information step . If the information is not available the interface engine calls or queries the adaptor to find all schedulers available through the adaptor step . The adaptor returns a list of schedulers available through the adaptor . Those skilled in the art will recognize that an adaptor and a scheduler are capable of having a one to one relationship so that a selected adaptor must be used to communicate with the arbitrary scheduler . Nevertheless those skilled in the art will further recognize that an adaptor is capable of communicating with multiple schedulers so long as each scheduler has similar methods of communication. If it is determined that no adaptor is available step then the interface ends the process of establishing the communication channel.

The adaptor is queried for properties functions and information of the arbitrary scheduler . In turn the adaptor is able to abstract the requested information and return to the interface engine functions and property information for the arbitrary scheduler . The adaptor is also capable of returning a template having the appropriate values in the appropriate fields or returning one or more objects that include the appropriate source and property information for the arbitrary scheduler . Further the adaptor is capable of updating a file or object with data specific to the arbitrary scheduler .

To facilitate abstraction of scheduler information by the adaptor that concerns an arbitrary scheduler the interface can provide a read mechanism to assist in creating the scheduler object . In one embodiment of the present invention the read mechanism is a file that contains property information for the arbitrary scheduler . Such property information includes but is not limited to a property name property type property constraints help information and other like information concerning the arbitrary scheduler that the adaptor or the interface engine can read in and create a scheduler object . Those skilled in the art will recognize that the read mechanism is not limited to property information for the arbitrary scheduler but can include functions and other information. In one embodiment of the present invention the read mechanism is structured as a markup language file.

If the adaptor returns one or more objects the interface engine requests the adaptor to instantiate an object that includes the attributes and methods for the arbitrary scheduler step . The adaptor instantiates such an object and creates a handle to the object that is returned to the adaptor for inclusion in a scheduler object for use by the technical computing client and the interface engine to communicate with the arbitrary scheduler . For example the interface engine upon receipt of the handle from the adaptor can call a constructor that creates the scheduler object . The constructor using the provided handle can configure the proportions of the scheduler object to correspond to selected constructor arguments.

The scheduler object provides a high level representation of the communication channel between the technical computing client and an arbitrary scheduler . The scheduler abstraction provided by the adaptor provides properties for one or more schedulers . The scheduler object further provides access to configuration settings for one or more schedulers . The scheduler abstraction provided by the adaptor is further capable of providing a collection of methods for one or more schedulers . One list of these properties and methods is described below.

The scheduler object may include inputs such as a name given to an associated adaptor a unique scheduler identifier and other like inputs. The adaptor name input is a term used to describe the adaptor that manages the communication between the arbitrary scheduler and the interface engine . The unique scheduler identifier is set to an available identifier by the interface engine if one is not provided. The scheduler object is associated with the arbitrary scheduler uniquely identified by the inputs of the scheduler object .

Those skilled in the art will appreciate that within the MATLAB environment a MATLAB M file is configurable such that when the M file is executed the scheduler object is recreated with the configurations it had when the M file was called. In this manner a user is able to capture the state of their configuration settings for later use without having to reconfigure all their settings manually. Furthermore the execution of a file or other executable means to recreate configuration settings allows a user to readily generate a function that recreates a pre configured object suitable to their needs. The generated function can then be integrated into an application. Nevertheless those skilled in the art will appreciate that other executable files are creatable in other software environments to recreate a scheduler object with configuration settings when the executable file is called.

The interface establishes the communication channel between technical computing client and the arbitrary scheduler step . That is the technical computing client calls the interface engine . In turn the interface engine calls the adaptor . The adaptor communicates with the arbitrary scheduler and establishes a connection or communication channel between the technical computing client and the arbitrary scheduler . Those skilled in the art will recognize that depending on the arbitrary scheduler and the capabilities of the arbitrary scheduler the interface can offer multiple threads or multiple communication channels between the technical computing client and the arbitrary scheduler or between the technical computing client and multiple arbitrary schedulers.

Referring back to users can create a job locally on the client step . With an application programming interface API and or programming language of the technical computing client a job can be defined representing a technical computing task to be executed by remote technical workers and . The programming language may include mechanisms to define a job to be distributed to a technical computing environment. For example users may create a job with the following statement in MATLAB session on the client . If this command is executed on the client session a job object is instantiated from a job class on the client .

The created job has no callbacks or links to a scheduler which means that the job is created independently of the scheduler on the network . The job s State property is pending. This means that the job has not been queued for running on the scheduler so users can add tasks to the job. After users have created the job and while it is still in the pending state users can create tasks for the job step . Tasks define the functions to be evaluated by the workers during the running of the job. In the illustrative embodiment a task defines a technical computing command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. An exemplary task is provided as follows.

This task will generate a random number. Users can see the properties of the task object with the following statement in MATLAB .

Referring back to after creating the job and tasks on the client the users then submit the job to the scheduler in a portable format to run the job and have its tasks evaluated in the remote workers and step .

Referring back to the job object is then encoded into a portable format which is independent of the platform structure of the scheduler step . The portable format refers to the format of a program or database that is capable of being moved to various systems. In the illustrative embodiment the job object is serialized or encoded into a MAT file format using the save function provided in MATLAB . The save function encodes the job object to a continuous byte stream. This involves taking the job object and encoding it into an architecture independent form suitable for archival to a file piping to another application or by extension transmission across a network. The stream may be transient RAM based or persistent disk based . A transient stream may be used to prepare the job object for transmission to the scheduler. A persistent stream such as a file on disk allows storage of the job object after the current session is finished. In both cases the information in the stream can later be used to construct a data structure containing the same job object as the original. When the workers receive the byte stream the encoding process is reversed to get a copy of the original job object which will be described below in more detail with reference to .

A MAT file stores data in binary form and support MATLAB array types including multidimensional numeric arrays character arrays sparse arrays cell arrays structures and objects. The MAT file includes a header and one or more data elements. Each data element includes a tag and data. The tag specifies the number of bytes in the data element and the type of data in the data element. By using the tags the MAT file format provides quick access to individual data elements in the MAT file. Those of ordinary skill in the art will appreciate that the MAT file format is an illustrative format and other portable formats can be used in other embodiments.

Referring back to the job object encoded in the portable format is submitted to the scheduler through the communication channel between the client and the scheduler step . Also information on the job such as the properties of the job can be sent to the scheduler so that the scheduler can distribute the job in the portable format to remote workers using the information step . The properties of the job may include UserName Tag State CreateTime SubmitTime StartTime FinishTime Tasks JobData SerializedProductList etc. as described above with reference to .

Those of ordinary skill in the art will appreciate that the job can be broken into a plurality of portable format files containing one or more tasks and the plurality of portable format files can be submitted to the scheduler so that the scheduler can distribute the tasks to remote workers. In this case each of the plurality of portable format files may include the license information .

The scheduler is an arbitrary scheduler provided by any of a number of vendors. The arbitrary scheduler may include or be associated with an automatic task distribution mechanism for the automatic distribution of tasks from the technical computing client to the technical computing workers and . The automatic task distribution mechanism may allow the technical computing client to delegate the task distribution to the automatic task distribution mechanism. For example a task can be defined and submitted to the arbitrary scheduler without specifying which technical computing worker is to perform the technical computing of the task. The technical computing client does not need to know the specifics of the technical computing worker. The technical computing client can define a function to submit the task to the arbitrary scheduler and get a result of the task from the arbitrary scheduler . As such the arbitrary scheduler provides a level of indirection between the technical computing client and the technical computing worker.

This eases the distributed programming and integration burden on the technical computing client . The technical computing client does not need to have prior knowledge of the availability of the technical computing workers and . For multiple task submissions from the technical computing client the arbitrary scheduler can manage and handle the delegations of the tasks to the same technical computing worker or to other technical computing workers and hold the results of the tasks on behalf of the technical computing client for retrieval after the completion of technical computing of all the distributed tasks.

One of skill in the art will appreciate that the distributed computing system described above is illustrative and not limiting the scope of the present invention. Rather another embodiment of the present invention may implement different computing system such as serial and parallel technical computing systems which are described in more detail in pending U.S. patent application Ser. No. 10 896 784 entitled METHODS AND SYSTEM FOR DISTRIBUTING TECHNICAL COMPUTING TASKS TO TECHNICAL COMPUTING WORKERS which is incorporated herewith by reference.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

