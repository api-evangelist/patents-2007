---

title: Highly available central controller to store and enforce valid state transitions of distributed components
abstract: A highly available central controller to store and enforce valid state transitions of distributed components is provided for centrally controlling access to a service. Central control is provided by a database with an API according to a set of stored procedures, which provides a virtual view to requesters that seek to read or manipulate service entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08219654&OS=08219654&RS=08219654
owner: Microsoft Corporation
number: 08219654
owner_city: Redmond
owner_country: US
publication_date: 20070517
---
The subject disclosure generally relates to storing and enforcing valid state transitions of distributed components.

As computers and software have become more powerful developers and vendors are providing new and more complex features to increasingly sophisticated users. Moreover the proliferation of high speed internet access has enabled developers and vendors to offer users and customers entirely new and even more complex services over the internet through the use web services web applications and application servers.

Such services when required to support a large scale user base or to provide a high level of availability are often provided in a data center using one of many service oriented architectures SOA . Implementation of an SOA requires tools as well as run time infrastructure software which is collectively referred to as an SOA implementation framework. Such frameworks have unique requirements at both the tools and infrastructure levels. These include a distributed event enabled architecture flexibility via service enabled processes enterprise standards support fault tolerance reliability and scalability security in distributed environment visual process composition and monitoring and support for rapid process changes and process development to enable providing new and improved user services.

For many reasons e.g. fault tolerance reliability and scalability user account entities may be distributed across many architectural components which may be partitioned into several smaller sets. For example in a system with thousands of accounts each with their own set of data it may be desirable to spread such accounts among several repositories. Each repository may hold one or more account.

However each level of scope e.g. repository and account has its own state that can apply to its children. For example if an entire repository is taken down for maintenance all accounts in that repository are implicitly unavailable. On the other hand if a single account is deactivated it does not affect the state of the repository or the other accounts in the repository.

A problem can arise in the event that a process attempts to change the state of a system entity e.g. repository account etc. to an inconsistent state. As a real world example it should not be possible for a person to change state from being married to being single never married . The only valid states after married might be divorced widowed or deceased . Likewise a user account should not be able to accessed e.g. in an account available state if its respective repository is taken down for maintenance e.g. in a repository unavailable state . This problem is further exacerbated as the level of system scales to support more users and as the degree of architectural component distribution increases because of the administrative overhead required to coordinate an increasing number of distributed components. As a result access to the state needs to be tightly controlled in an efficient and reliable manner.

One approach to maintaining consistent states of a service s entities could be to directly poll an entity for its status and require that either the requestor e.g. external clients or tools or each entity verify any requested state change which would require direct coordination among the service s entities and the requester. However with such a distributed access and control model as the number of distributed components increases to support more users or to support reliability and redundancy goals the overhead associated with such a model can become excessive. Additionally the required intra entity coordination among distributed components can be complex and subject to increasing conflicts as the system scales. Furthermore the maintenance flexibility of such an approach may be hampered because of the need to manually account for the various intra entity dependencies.

Accordingly in consideration of the need to ensure that the system entity state is consistent and all state transitions are valid it would be desirable to provide an efficient and reliable mechanism to control access to the system state and ensure valid state transitions of system entities.

In consideration of the foregoing the invention provides a controller to store entity status and enforce valid state transitions of distributed components. In various non limiting embodiments the invention can comprise using a controller interface e.g. an API which can comprise stored database procedures. A database can be configured similar to the disclosed schema to allow the storage and updating of the service s entity states such that central tracking and control of the service s entities are enabled.

Furthermore the logic of a state machine such as within the disclosed API provides a virtual view of the service s entities status e.g. partitioned accounts and the allowed e.g. valid state transitions such that requests to read and manipulate the entity states can be validated before being granted access to such entities. Thus the controller s virtual view of the service s entity status can be provided to requesters that need to read or manipulate entity status and such requests can be routed or disallowed depending on the validity of the requested state transition. As a result the controller can coordinate and tightly control access to the state of the associated entities and can enforce valid entity state transitions thus ensuring consistent entity state in the system without the problems associated with a distributed access and control model.

Accordingly rather than requiring a requester or an entity to directly determine each entity status and validity of requests to read or manipulate such entity status the central controller tracks and updates entity status. Because all requests to read or manipulate the service s entities are required to use the controller for such purposes valid state transitions can be centrally enforced while avoiding the aforementioned complications associated with distributed enforcement of valid state transitions.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. Instead the sole purpose of this summary is to present some concepts related to some exemplary non limiting embodiments of the invention in a simplified form as a prelude to the more detailed description of the various embodiments of the invention that follows.

As mentioned in the background SOAs need to ensure that the system state is consistent and all entity state transitions are valid. Thus it is desirable to provide an efficient and reliable mechanism to control access to the system state and ensure valid state transitions of system entities. The need is even greater as the system is scaled and becomes more distributed to meet the demands of a larger user base and to provide higher reliability.

Highly Available Central Controller to Store and Enforce Valid State Transitions of Distributed Components.

In order to describe the operation and benefits provided by the invention an exemplary non limiting block diagram of a service architecture is presented which is suitable for use of the present invention. shows the architecture of components of a sector in a datacenter A. Each entity e.g. datacenter sector repository etc. has a state associated with it. Specifically the architecture shown is a simplified overview of a MICROSOFT LIVEMEETING LM service architecture. The datacenter typically contains a data locator service DLS dispatcher to redirect all requests reaching the common LIVEMEETING.com domain to the virtual IP of the appropriate application pool App Pool based on the application domain and the account not shown referred to in the request looking it up from the DLS database . Among other benefits provided by the DLS database a list of supported applications and their internal URLs is stored in the DLS database .

According to various non limiting embodiments of the invention central control can be maintained by making the DLS database the owner for maintaining status values of all entities in the system. Furthermore an API set can be provided to all tools and clients that manipulate read the status of individual entities in the system. All applications can be forced to use the DLS APIs to fetch set the status of the entities before data in a Repository is read or updated. Additionally the logical structure of the DLS API can form a state machine such that by forcing all access to take place via the DLS APIs valid state transitions can be enforced.

Furthermore a set of stored of procedures can be provided in the DLS database e.g. a DLS API for various tools to access the status of entities in the system as shown in . For example Account Status Management Tool and a Data Management Tool can access the status of the system entities via the stored procedures. illustrates as an exemplary non limiting embodiment of the invention single Master DLS writeable database and 3 read only subscriber databases per Data Center. For example data from the Master can be replicated to the Replicated Backup to provide a measure of redundancy and reliability. However such details are not crucial to the invention provided. As a result the invention should not be limited to the described embodiment as other arrangements and advantages provided according to the invention will become apparent to one skilled in the art.

Details of the various aspects of exemplary non limiting embodiments of the invention have been briefly described to help enable a basic or general understanding of various aspects of the invention. Further details are provided below of an exemplary DLS database schema DLS API and DLS entity state machine diagrams to help further understand the advantages and operation of the invention.

According to a further embodiment the APIs marked by an asterisk in can be made public and accessible to a service host whereas the remainder can be made internal for use by internal tools and applications released only to the service host. Furthermore according to one aspect of the invention the tools and applications can be forbidden to update the service entities directly without using the APIs provided in . As a result the invention can advantageously enforce an order for setting status values for various entities and only allow those transitions that are valid.

According to a further aspect of the invention the set status stored procedures of the DLS API following a naming convention e.g. rsp  setstatus  return an error if the transition is not valid illustrating the functions atomic nature to further enforce valid state transitions.

According to a further aspect of the invention a command line utility can be employed to wrap all the public DLS APIs exposed to a service host those indicated by an asterisk . A precheck for such a DLS set status utility can for example check if the provided destination status for the entity is allowed from the current state of the entity and check if the entity or any of its parents is Locked in which case state changes are disallowed. Note that the only state change that should be allowed on an entity when it is locked is Unlock and that is allowed only when none of its parents are in the Locked state. The only exception to the above rule is when the entity is currently in an unstable state and the setstatus is trying to move it to a stable state only allowed from internal tools and not exposed to the command line tool .

According to an aspect of the invention each entity e.g. datacenter sector etc. has a state associated with it as implemented in the database stored procedures. These states can be determined by the aggregation of one or more state columns. According to a further aspect of the invention there can be two types of state current and cascaded. illustrates an exemplary current state matrix J of possible states for various service entities according to an embodiment of the present invention. The current state J for example is simply the state of an entity taking only that entity s state columns into consideration. For example if a sector s availability column is available and its parent datacenter s availability column is unavailable the sector s current state is available . According to a further aspect of the invention the repository state datachanging marked by an asterisk is special in that it looks at its child entities e.g. accounts . A repository is in this state if any accounts in the repository are in the beingcreated or beingmoved state.

According to one embodiment the external state represented in the state diagrams can be stored as composite values in the following columns in the database as shown in Table 21 and .

According to a further embodiment the DataChanging state of a repository is derived and not stored in the database. For example a repository can be determined to be in DataChanging state along with any other state shown in the state diagram for repository when either a one or more accounts are being moved out Account Status is BeingMoved of the repository or b one or more accounts are being moved Account Status is BeingMoved into the repository. DataChanging can be reported when the repository is Quiescent and not otherwise. Since it is a parallel state the other active states can override DataChanging which means for example that the repository can be Available and DataChanging but DataChanging is not reported the status reported is Available since the repository can be accessed by all the applications. DataChanging may be reported when the repository is inactive e.g. Quiescent . As a result according to a particular embodiment when the repository is Quiescent and DataChanging it is reported as DataChanging. When the repository is reported DataChanging when it is Quiescent and DataChanging the state cannot be changed to other inactive states ConfigChanging.

In addition to the states described in a particular embodiment the business activity of an account can be set to Suspended or Deactivated in which case all activity on that account is forbidden.

According to a further embodiment a state called Internal can be used to enable testing of a Repository Account when it is still cutoff from the external world Not Active . For example when an entity is in this state only those requests that originate from a set of restricted IP addresses may be allowed access to the application. All external requests can be directed to a Maintenance URL.

According to a further embodiment a Locked state can be provided to Lock an entity to ensure that no state changes are allowed and guarantees to hold the current state of the entity. Advantageously this enables a type of safety switch that can disallow running any tool while holding the current status of the entity and therefore all its child entities whether the status is Available or Unavailable. For example if an entity is Available and Locked all external client requests can be honored while disallowing running of any tool including an ops shutdown tool. Also if an entity state is Unavailable and Locked all requests are routed to a maintenance page and none of the tools are allowed to run including ops configure tool. This can be used by a service host to ensure that no tools are accidentally run on a sector account servicing a priority 1 customer e.g. a 24 7 availability customer .

One of ordinary skill in the art can appreciate that the invention can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment connected to any kind of data store. In this regard the present invention pertains to any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes which may be used in connection with a highly available central controller to store and enforce valid state transitions of distributed components in accordance with the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage. The present invention may also be applied to standalone computing devices having programming language functionality interpretation and execution capabilities for generating receiving and transmitting information in connection with remote or local services and processes. A central controller and thus some of the techniques for storing and enforcing valid state transitions of distributed components in accordance with the present invention can be applied with great efficacy in those environments.

Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for objects such as files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may implicate the systems and methods for a highly available central controller that stores and enforces valid state transitions of distributed components of the invention.

It can also be appreciated that an object such as may be hosted on another computing device etc. or etc. Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. any of which may employ a variety of wired and wireless services software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks. Any of the infrastructures may be used for exemplary communications made incident to the controller according to the present invention.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power lines for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11B or wired e.g. Home PNA Cat 5 Ethernet even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media or other graphical data may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also digital interconnects for clusters of media devices. All of these network environments and others that may emerge or already have emerged as protocol standards may be interconnected to form a network such as an intranet that may be connected to the outside world by way of a wide area network such as the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently any of the computing devices of the present invention may share and communicate data in any existing manner and no one way described in the embodiments herein is intended to be limiting.

The Internet commonly refers to the collection of networks and gateways that utilize the Transmission Control Protocol Internet Protocol TCP IP suite of protocols which are well known in the art of computer networking. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over network s . Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system with which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as an example computers etc. can be thought of as clients and computers etc. can be thought of as servers where servers etc. maintain the data that is then replicated to client computers etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting services or tasks that may implicate the controller system or method in accordance with the invention.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. As a result some software objects utilized pursuant to the techniques for the controller of the invention may be distributed across multiple computing devices or objects.

Client s and server s communicate with one another utilizing the functionality provided by protocol layer s . For example HyperText Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW or the Web. Typically a computer network address such as an Internet Protocol IP address or other reference such as a Universal Resource Locator URL can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium e.g. client s and server s may be coupled to one another via TCP IP connection s for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with server s in communication with client computer s via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet GSM network the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to control access to a service.

In a network environment in which the communications network bus is the Internet for example the servers etc. can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc. as may be characteristic of a distributed computing environment.

As mentioned communications may be wired or wireless or a combination where appropriate. Client devices etc. may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects etc. and with connections or access to various types of storage elements or objects across which files or data streams may be stored or to which portion s of files or data streams may be downloaded transmitted or migrated. Any one or more of computers etc. may be responsible for the maintenance and updating of a database or other storage element such as a database or memory for storing data processed or saved according to the invention. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other like devices and databases .

As mentioned the invention applies to any device wherein it may be desirable to control access to a service. It should be understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the present invention i.e. anywhere that a device may request or receive process or store data. Accordingly the below general purpose remote computer described below in is but one example and the present invention may be implemented with any client having network bus interoperability and interaction. Thus the present invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as an interface to the network bus such as an object placed in an appliance.

Although not required the invention can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates in connection with the component s of the invention. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that the invention may be practiced with other computer system configurations and protocols.

With reference to an exemplary remote device for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up may be stored in memory . Memory typically also contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example computer could include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and or an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. A hard disk drive is typically connected to the system bus through a non removable memory interface such as an interface and a magnetic disk drive or optical disk drive is typically connected to the system bus by a removable memory interface such as an interface.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through user input and associated interface s that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics subsystem may also be connected to the system bus . A monitor or other type of display device is also connected to the system bus via an interface such as output interface which may in turn communicate with video memory. In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer which may in turn have media capabilities different from device . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter. When used in a WAN networking environment the computer typically includes a communications component such as a modem or other means for establishing communications over the WAN such as the Internet. A communications component such as a modem which may be internal or external may be connected to the system bus via the user input interface of input or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s managed code platform i.e. .NET includes servers building block services such as Web based data storage and downloadable device software. Generally speaking the .NET platform provides 1 the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them 2 increased interactive capability for Web pages enabled by greater use of XML rather than HTML 3 online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications such as e mail for example or software such as Office .NET 4 centralized data storage which increases efficiency and ease of access to information as well as synchronization of information among users and devices 5 the ability to integrate various communications media such as e mail faxes and telephones 6 for developers the ability to create reusable modules thereby increasing productivity and reducing the number of programming errors and 7 many other cross platform and language integration features as well.

While some exemplary embodiments herein are described in connection with software such as an application programming interface API residing on a computing device one or more portions of the invention may also be implemented via an operating system or a middle man object a control object hardware firmware intermediate language instructions or objects etc. such that the methods for controlling access in accordance with the invention may be included in supported in or accessed via all of the languages and services enabled by managed code such as .NET code and in other distributed computing frameworks as well.

There may be multiple ways of implementing the present invention e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the systems and methods for controlling access to a service in accordance with the invention. The invention contemplates the use of the invention from the standpoint of an API or other software object as well as from a software or hardware object that stores and enforces valid state transitions in accordance with the invention. Thus various implementations of the invention described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the subject matter disclosed herein is not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

As mentioned above while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to control access to a service. For instance the controller of the invention may be applied to the operating system of a computing device provided as a separate object on the device as part of another object as a reusable control as a downloadable object from a server as a middle man between a device or object and the network as a distributed object as hardware in memory a combination of any of the foregoing etc. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code and nomenclature that achieves the same similar or equivalent functionality achieved by the various embodiments of the invention.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the controller of the present invention e.g. through the use of a data processing API reusable controls or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer etc. the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.

Furthermore the disclosed subject matter may be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer or processor based device to implement aspects detailed herein. The term article of manufacture or alternatively computer program product where used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick . Additionally it is known that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN .

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flowcharts tables and diagrams of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example while exemplary network environments of the invention are described in the context of a networked environment such as a peer to peer networked environment one skilled in the art will recognize that the present invention is not limited thereto and that the methods as described in the present application may apply to any computing device or environment such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate.

While exemplary embodiments may refer to utilizing the present invention in the context of particular programming language constructs the invention is not so limited but rather may be implemented in any language to provide methods for a highly available central controller to store and enforce valid state transitions of distributed components. Still further the present invention may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

