---

title: Methods of managing a key cache
abstract: Methods of managing a key cache are provided. One method may include determining whether a given key has previously been loaded to a trusted platform module (TPM), loading the given key to the TPM and generating a key cache object corresponding to the given key if the determining step determines the given key has not previously been loaded to the TPM and restoring the given key to the TPM based on the key cache object corresponding to the given key if the given key has previously been loaded. Another method may include extracting a key from a TPM if the TPM does not have sufficient memory to load a new key, the extracted key corresponding to a least frequently used key cache object within the TPM. Another method may include restoring a key to a TPM, the restored key having been previously loaded to and extracted from the TPM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07978856&OS=07978856&RS=07978856
owner: Samsung Electronics Co., Ltd.
number: 07978856
owner_city: Gyeonggi-do
owner_country: KR
publication_date: 20070525
---
This application claims the benefit of Korean Patent Application No. 10 2006 0047526 filed on May 26 2006 in the Korean Intellectual Property Office the disclosure of which is incorporated herein in its entirety by reference.

Example embodiments of the present invention relate generally to methods of managing a key cache and more particularly to methods of managing a key cache for a trusted platform module TPM .

A system on chip SoC e.g. standardized by Trust computing group TCG may be configured in order to provide secure key management and platform integrity. The standardized SoC may be referred to as a trusted platform module TPM . Applications may use a TPM software stack TSS to load keys to the TPM. The TSS may be a standard application programming interface API by which applications use the TPM.

The TSS may be divided into a TSS service provider TSP and a TSS core service TCS . The TSP may be provided as a dynamic library to applications and the TCS may be provided as a system service or daemon to the TSP. Accordingly applications may call the API of the TSP and or the TSP may call the API of the TCS in order to use the TPM.

Referring to the TPM may correspond to hardware that is an SoC having relatively limited memory resources. Furthermore increasing the capacity of the TPM may be relatively expensive. Limitations on TPM memory resources may restrict key loading functionality.

Further different versions of the TPM and TSS may be executed at the same time because developments of the TPM and TSS respectively may be based upon both hardware engineering and software engineering which may not necessarily progress at the same rate. However it may be difficult to implement different versions of the TPM and TSS due to compatibility issues.

An example embodiment of the present invention is directed to a method of managing a key cache including determining whether a given key has previously been loaded to a trusted platform module TPM loading the given key to the TPM and generating a key cache object corresponding to the given key if the determining step determines the given key has not previously been loaded to the TPM and restoring the given key to the TPM based on the key cache object corresponding to the given key if the determining step determines the given key has previously been loaded to the TPM.

Another example embodiment of the present invention is directed to a method of managing a key cache including extracting a key from a TPM if the TPM is determined not to have sufficient memory to load a new key the extracted key corresponding to a least frequently used key cache object within the TPM if the TPM is operating in accordance with a first TPM protocol the extracted key not requiring authentication for loading to or extracting from the TPM and corresponding to a least frequently used key cache object within the TPM if the TPM is operating in accordance with a second TPM protocol.

Another example embodiment of the present invention is directed to a method of managing a key cache including restoring a key to a trusted platform module TPM in response to a request to load the restored key the restored key having been previously loaded to and extracted from the TPM the restored key being restored to a key slot unit if the TPM is operating in accordance with a first TPM protocol and the restored key being restored in a data structure of the restored key if the TPM is operating in accordance with a second TPM protocol.

Another example embodiment of the present invention is directed to a method of managing a key cache including storing information corresponding to a key requested to be loaded into a TPM within a key cache object the information stored within the key cache object including a position of the key an indication as to whether the key is stored in memory an indicator indicating a frequency of use of the key a point value associated with data of the key the point value affected by which of a plurality of TPM protocols is active information associated with a parent key of the key and information extracted related to data extracted from the TPM.

Another example embodiment of the present invention is directed to a key cache management process in a TPM software stack core service TCS which is performed in compatibility with the version of a trusted platform module TPM while efficiently managing a limited TPM memory resource.

Detailed illustrative example embodiments of the present invention are disclosed herein. However specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments of the present invention. Example embodiments of the present invention may however be embodied in many alternate forms and should not be construed as limited to the embodiments set forth herein.

Accordingly while example embodiments of the invention are susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit example embodiments of the invention to the particular forms disclosed but conversely example embodiments of the invention are to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention. Like numbers may refer to like elements throughout the description of the figures.

It will be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first element could be termed a second element and similarly a second element could be termed a first element without departing from the scope of the present invention. As used herein the term and or includes any and all combinations of one or more of the associated listed items.

It will be understood that when an element is referred to as being connected or coupled to another element it can be directly connected or coupled to the other element or intervening elements may be present. Conversely when an element is referred to as being directly connected or directly coupled to another element there are no intervening elements present. Other words used to describe the relationship between elements should be interpreted in a like fashion e.g. between versus directly between adjacent versus directly adjacent etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. It will be further understood that terms such as those defined in commonly used dictionaries should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

In the example embodiment of the key cache management process may include receiving an application request to load a key to the TPM at S determining whether the requested key has been loaded to the TPM at S restoring the key to the TPM through a key cache object corresponding to the key if the key is determined to have been loaded to the TPM at S and generating the key cache object corresponding to the key and loading the key to the TPM if the key has not been loaded to the TPM at S .

In the example embodiments of the key cache management process may generate a trusted platform module software stack core service TCS context object in response to an application request e.g. S of to load a key to the TPM. In an example the TCS context object may be generated for each application.

In the example embodiments of the TCS context object may store information associated with a TCS key list head. A TCS key may include a point value associated with a TCS key cache. That is the key cache management process may generate the TCS key cache in response to the application request at S to load a key in order to manage the requested key and may communicate with the application through the TCS key that points to the TCS key cache.

In the example embodiments of if the request to load the key is generated at S the key cache management process may determine whether the requested key has been loaded to the TPM at S . Thus at S whether a TCS key cache corresponding to the requested key is present within the TCS may be determined.

In the example embodiments of the TCS may construct the TSS together with a TSS service provider TSP. In an example the TCS may correspond to an interface through which the application request to load the key to the TPM at S is received. The TCS may include a context manager CM that manages the TCS context object and a key cache manager KCM that manages the TCS key cache.

In the example embodiments of during the key cache management process of the TCS key cache may store information related to a key that is loaded or has previously been loaded to the TPM. The TCS key cache may be generated for each key. The key cache management process may manage the request of an application to load a key to the TPM through the TCS key cache.

In the example embodiments of the TCS key cache may store information relating to the position of the corresponding key in the TPM and information about a relative point of time if the TCS key cache is used. The information stored in the TCS key cache will be explained in greater detail. In an example the TCS key cache may be embodied as a linked list.

In the example embodiment of the TCS may initialize the key cache list e.g. a linked list at S . For example the initialization of S may synchronize the KCM with the TPM.

In the example embodiment of if the TCS is operated the TCS may request the TPM to transmit a list of keys e.g. all keys loaded in the TPM at S . The requested list of keys loaded in the TPM may include information related to key handles which may indicate the positions of the loaded keys. Once the requested list of keys is received from the TPM at S the TCS may evict or flush the keys included in the list from the TPM in response to a command TPM FlushSpecific or TPM Evict at S .

Returning to the example embodiments of if the requested key s have not been loaded in the TPM the TCS key cache corresponding to the key may not be present within the TPM. Accordingly in this case the key cache management process may generate the TCS key cache corresponding to the requested key s at S e.g. to load the missing key into the TPM so the application may access a desired key .

In the example embodiments of a determination may be made as to whether the TPM includes sufficient memory to load the requested key at S . If the TPM does not include sufficient memory to load an additional key a key from the TPM may be extracted at S which will be described in greater detail below.

In the example embodiment of if the TPM includes sufficient memory or space for loading the requested key the TCS key cache corresponding to the key may be generated at S . For example if a request to load a key stored in a persistent storage PS is transmitted to the TCS the TCS key cache may store a Key Universal Unique Identifier KeyUUID and or a Parent key Universal Unique Identifier ParentUUID indicating whether the requested key is stored in memory. For example if the requested key is stored in the PS the requested key may include a KeyUUID. The TCS key cache may store the KeyUUID so as to maintain a record indicating that the requested key is stored in the PS.

Furthermore the TCS key cache may store the ParentUUID of the requested key so as to maintain a record indicating that the ParentUUID is stored in the PS. The relationship between the key and the parent key is well known in the art and as such a further description thereof has been omitted for the sake of brevity.

In the example embodiments of the TCS may generate a TCS context object corresponding to each application and the TCS key cache corresponding to the requested key as described above. If a plurality of applications requests to load the same key the TCS key cache may shared by the plurality of applications. That is the TCS key cache may be shared by a plurality of TCS context objects.

In the example embodiment of the TCS context objects A and B may share a TCS key cache K. The TCS key cache may store information ulRefCount indicating a number of applications sharing the TCS key cache. That is the TCS key cache may store information ulRefCount indicating the number of the TCS context objects.

In the example embodiment of the TCS key cache K shared by the TCS context objects A and B may store 2 as ulRefCount e.g. indicating that the TCS key cache K is shared and a TCS key cache K store 1 as ulRefCount e.g. indicating that the TCS key cache K is not shared .

Returning to the example embodiments of the TPM may load the requested key in response to a command TPM LoadKey and may transmit a TPM key handle to the TCS. The TPM key handle may include information indicating the position of the key in the TPM. The TCS key cache may store a TPM key handle value hTpmKey.

In the example embodiments of the TCS key cache may store information pstTcpaKey and pstTpmKey indicating a key data structure e.g. the key data structure may vary based on which version of the TPM is active . If a key is loaded to a TPM having limited resources e.g. a lower available memory the TCS may extract or remove keys that are not used frequently from the TPM e.g. without notifying applications as to the key removal s and may thereafter restore the extracted removed key s if a request for the extracted removed keys is received. Such an operation may be referred to as load key transparency. In an example a difference between versions TSS 1.1 and TSS 1.2 of the TPM may be related to whether the load key transparency is limited or not.

For example if the version TSS 1.2 of the TPM supports TPM LoadKeyContext and TPM EvictKeyContext according to the TCG specifications the TCS may load or extract the key to from the TPM in a key slot unit storing data corresponding to the key. Accordingly the version TSS 1.2 of the TPM may reduce a restriction of the load key transparency present within the version TSS 1.1 of the TPM. In another example in the case of the version TSS 1.1 of the TPM a load key transparency restriction may occur because authentication for loading extracting a corresponding key to from the TPM may be required. However the authentication for loading extracting a key to from the TPM need not be received in version TSS 1.2 of the TPM.

In another example a TPM may use different data structures for a key according to its respective version e.g. TSS 1.1 or 1.2 . For example the version TSS 1.1 of the TPM may represent the key using a structure TCPA KEY whereas the version TSS 1.2 of the TPM may represent the key using a structure TPM KEY.

In the example embodiment of the TCS key cache may store a point value pstTcpaKey or pstTpmKey indicating the structure TCPA KEY or TMP KEY according to the version of the TPM in order to indicate key data loaded in the TPM. The generating of the TCS key cache at S and loading the generated TCS cache to the TPM at S may further include confirming the version of the TPM in order to store the information pstTcpaKey and pstTpmKey indicating a key data structure based on the version of the TPM in the TCS key cache.

In the example embodiment of the key cache management process may store the information pstTcpaKey and pstTpmKey indicating the key data structure based on the version of the TPM in the TCS key cache so that the TCS or TSS may be operated irrespective of the version of the TPM.

Returning to the example embodiments of the TCS may extract a given key from among the keys loaded in the TPM at S if the space or memory for loading the key is not sufficient in the TPM. The key extraction process will be described in greater detail later.

In the example embodiments of the TCS key cache may be generated and the key may be loaded to the TPM so that the key handle value hTpmKey may be stored in the TCS key cache an aging value of the TCS key cache may be updated to a value larger than a maximum aging value at S . In an example the aging value may represent a relative point of time indicating when the TCS key cache is used. A previously used TCS key cache may have a smaller aging value. For example a TCS key cache having an aging value of 1 may be dormant e.g. not used for a longer period of time than a TCS key cache having an aging value of 4 . The maximum aging value may correspond to the aging value of the most recently used TCS key cache among the TCS key caches.

Returning to the example embodiment of the key cache management process may restore the key to the TPM through the TCS key cache corresponding to the key at S if the key has been loaded to the TPM. Thus a new TCS key cache need not be generated because the TCS key cache corresponding to the key may be present. Thus the key may be restored to the TPM using information associated with the key stored in the TCS key cache that has been already or previously generated. For example the key may be restored to the TPM using an example process based on the version of the TPM at S .

In the example embodiment of the version of the TPM may be confirmed to determine whether a key dump function may be used at S . As described above in the case of the version TSS 1.2 of the TPM the key may be loaded or extracted in a key slot unit which may be referred to as a key dump function.

In the example embodiment of if the TPM supports the key dump function the TCS may restore the key to the TPM in a key slot unit at S and S which may be referred to as a function RestoreKey AutoLoad. Alternatively if the TPM does not support the key dump function the TCS may restore the key to the TPM in the unit of a data structure of the key at S and S which may be referred to as a function RestoreKey AutoLoad.

In the example embodiment of a determination may be made as to whether the TPM includes sufficient space or memory for loading the requested key at S . If the TPM includes sufficient memory the TCS may restore the key to the TPM at S . For example the key restoration may be carried out based on the TCS key cache. Otherwise if the TPM does not include sufficient memory one or more keys may be extracted from the TPM e.g. a less frequently used key may be removed from the TPM at S which will be described in greater detail later.

In the example embodiments of the TCS may extract a key satisfying a given condition from keys loaded in the TPM if the TPM does not include sufficient space or memory for loading the requested key because the TCS key cache may store information rgbKeyContestBlob and ulKeyContextSize related to the extracted key. In this case rgbKeyContestBlob may represent data of the dumped key and ulKeyContextSize may represent the byte size of rgbKeyContestBlob. A further description of the extraction process of a key at S in the TPM will be explained in greater detail later.

In the example embodiment of the aging value of the TCS key cache may be updated to a value larger than the maximum aging value because the TCS key cache has been used to restore the key at S .

In the example embodiments of the RestoreKey AutoLoad method S may locate the parent key of the requested key which may be loaded into the TPM at S . As described above the RestoreKey AutoLoad function S may be applied to the TPM that need not support the key dump function because the parent key of the key may be required to be loaded into the TPM in order to load extract the key to from the TPM.

In the example embodiment of the parent key and the child key may be judged through the KeyUUID and ParentUUID stored in the TCS key cache. The TCS may store pointer information pstParent of a parent key cache object in the TCS key cache so that the relationship of the parent key and the child key may be determined.

In the example embodiment of if the parent key loaded into the TPM is determined the child key of the parent key may be loaded into the TPM at S . If the child key is determined to correspond to the key requested to be loaded at S the child key may be restored to the TPM at S . Otherwise if the child key is determined not to correspond to the key requested to be loaded the TCS may load the child key of the child key at S and may then return to Swhere the child key of the child key may be compared with the requested key and so on.

In the example embodiments of though the RestoreKey AutoLoad function S of may be similar to the RestoreKey LoadContext function S of in that a key satisfying a given condition e.g. less frequent use may be extracted or removed from keys loaded in the TPM if the TPM has no space for loading the additional or restored key.

In another example embodiment of the present invention referring to key cache management may be performed irrespective of a TPM version employed by an application.

In the example embodiment of the TCS may extract a key satisfying a given condition from keys loaded in the TPM if the TPM does not have sufficient space or memory for loading the key. In an example the key extracting process as will now be described may be based on the version of the TPM e.g. 1.1 1.2 etc. .

In the example embodiment of if the TPM is determined to support the key dump function at S the TCS may extract a key corresponding to the TCS key cache having the smallest aging value from the keys loaded in the TPM at S . Accordingly the key that has not been used for the longest period of time e.g. the least frequently used key may be extracted e.g. removed from the TPM which may be referred to as a function ExtractKey SaveKeyContext at S .

In the example embodiment of if the TPM is determined not to support the key dump function the TCS may retrieve the keys and their respective parent keys that do not require authentication for loading and extraction among keys loaded on the TPM at S e.g. because the loading and extraction of a key requiring authentication may be restricted in version 1.1 of the TPM .

In the example embodiment of the TCS may extract the least frequently used key from the keys requiring no authentication at S S S which may be referred to as a function ExtractKey AutoEvict. In an example the TCS may be compatible with any version of the TPM because the TCS may support the key extracting process adaptively in response to a determination as to which version of the TPM is active.

In the example embodiment of and after a given key has been used during the key cache management process of the TCS key cache corresponding to the given key may be evicted . For example if an application receiving a requested key no longer requires the requested key the application may issue a command TCS EvictKey to the TCS at S by calling a function Tspi CloseContext at S and the TCS may reduce a value ulRefCount of the corresponding TCS key cache at S . After the value ulRefCount is decremented the above process S S S may repeat until ulRefCount is decremented to a value equal to a threshold value e.g. 0 at S . The TCS may evict a TCS key cache for which the value ulRefCount is decremented to the threshold value at S .

Example embodiments of the present invention being thus described it will be obvious that the same may be varied in many ways. For example while the above described example embodiments are directed to a TCS performing the operations of updating generating evicting etc. information of a TCS key cache these operations may be performed by any well known module in other example embodiments of the present invention e.g. a key cache manager .

Such variations are not to be regarded as a departure from the spirit and scope of example embodiments of the present invention and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims.

