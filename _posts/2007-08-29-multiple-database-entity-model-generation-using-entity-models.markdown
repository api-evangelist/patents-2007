---

title: Multiple database entity model generation using entity models
abstract: The claimed subject matter provides a system and/or method that generates or creates database entity models using entity models. The system can include devices and components that receive database vendor specific store schema descriptions. The vendor specific store schema descriptions can be employed in conjunction with mapping files that characterize a instance of a database to generate a common object model that can be used to provide a common interface comprehensible across multiple vendor or database types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08150886&OS=08150886&RS=08150886
owner: Microsoft Corporation
number: 08150886
owner_city: Redmond
owner_country: US
publication_date: 20070829
---
Developers of data centric solutions routinely face situations in which data representations used by applications differ substantially from ones used by databases. A traditional reason for this distinction has included impedance mismatches between programming language abstractions and persistent storage developers want to encapsulate business logic into objects yet most enterprise data is stored in relational database systems. A further reason for the distinction is to enable data independence. Even if applications and databases start with the same data representation they can evolve leading to differing data representations that must be bridged or mapped. Yet a further reason is independence from Data Base Management System DBMS vendors many enterprise applications run in the middle tier and need to support backend database systems of varying capabilities which can require different data representations. Thus in many enterprise systems separation between application models and database models has become a design choice rather than a technical impediment.

The data transformations required to bridge or map applications and databases can be extremely complex. Even relatively simple object to relational O R mapping scenarios where a set of objects is partitioned across several relational tables can require transformations that contain outer joins nested queries and case statements in order to reassemble objects from tables. Implementing such transformations can be difficult especially since the data usually needs to be updatable a common requirement for many enterprise applications. For example a recent study indicated that coding and configuring object to relational O R data access accounts for up to 40 of total project effort.

Since the mid 1990 s client side data mapping layers have become a popular alternative to hand coding data access logic funneled by the growth of Internet applications. A core function of such a layer is to provide an updatable view that exposes a data model closely aligned with the application s data model driven by an explicit mapping. Many commercial products and open source projects have emerged to offer these capabilities. Virtually every enterprise framework provides a client side persistence layer e.g. Enterprise Java Bean EJB in Java 2 Platform Enterprise Edition J2EE . Most packaged business applications such as for instance Enterprise Resource Planning ERP and Customer Relationship Management CRM applications incorporate proprietary data access interfaces e.g. Business Application Programming Interfaces BAPIs .

Currently in order to program against an object relational mapping technology such as an entity frame work database customers e.g. users database administrators database application developers etc. typically utilize SQL metadata embedded within application programs. Such an approach however forces database application programmers users administrators and the like to develop applications or code fragments that are database vendor e.g. Oracle IBM Sybase Microsoft etc. and or database type e.g. SQL Server DB2 dBase . . . specific which can be extremely wasteful in terms of expenditure and time.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The claimed subject matter in accordance with an illustrative aspect provides a system and or method that generates or creates database entity models using entity models. The system can include devices and components that receive database vendor specific store schema descriptions. The vendor specific store schema descriptions can be employed in conjunction with mapping files that characterize an instance of a database to generate a common object model that can be used to provide a common interface comprehensible across multiple vendor or database types and that can be used to provide common access to the instance of the database.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed and claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

The subject matter as claimed is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the claimed subject matter can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

Prior to embarking on an extensive discussion of the claimed subject it should be noted for the purpose of ease of exposition rather than limitation that a database agnostic metadata model can refer to a model that can be employed to read metadata from a database in a vendor agnostic manner. Further a database instance model as utilized herein can refer to a model created by an entity model generator and that can be utilized to interact with instance data in a database.

Currently in order to program against an object relational mapping technology such as an entity frame work e.g. an object relational mapping technology geared to solving the mismatch between the data formats as stored in databases and those that can be employed in an object oriented programming language or other front ends database customers e.g. users database administrators database application developers etc. typically utilize SQL metadata embedded within application programs. Such an approach however forces database application programmers users administrators and the like to develop applications or code fragments that are database vendor e.g. Oracle IBM Sybase Microsoft etc. and or database type e.g. SQL Server DB2 dBase . . . specific. In order to curtail much duplication of effort in developing applications and code segments specific to each and every database vendor and database type utilization of entity framework models can be adopted. By switching to entity models over a database to generate target entity data models the entity model itself can be employed to generate across multiple database vendors e.g. Oracle IBM Sybase Microsoft . . . and or database types e.g. dBase DB2 SQL Server etc. and thus can be considered database vendor agnostic.

The subject matter as claimed provides systems and methods that generate conceptual models from existing databases. Construction of such conceptual models involves building database independent entity models or database agnostic metadata models that describe the content of a database wherein database elements are abstracted through use of the entity framework. The constructed database agnostic metadata model once built can include a common abstraction for the database in terms of the entity data model EDM provision of vendor and or version independent mapping and abstraction for databases that have been conceptualized through use of the claimed subject matter and or projection of logical models in terms of the entity data model EDM via native queries.

It has been found that vendors typically can need more expressive mappings than field by field mapping to their tables and further that some vendors can often need to leverage native queries. The subject matter as claimed in accordance with one aspect specifies a database agnostic metadata model that can include the following concepts described in terms of entity data model EDM entity types and entity sets 

In order to effectuate and facilitate mapping of an actual database catalog to the foregoing structure database vendors can specify and or supply a combination of mappings in MSL Mapping Schema Language and Store Specific queries in a Store Schema Description Language SSDL typically expressed in a markup language e.g. tag languages such as SGML XML and the like . The mappings together with a previously or contemporaneously rendered or developed database agnostic metadata model e.g. a high level conceptual entity data model of how a database structures its tables etc. can be employed to convert the stored structure of a database instance into a database instance model expressed as an entity data model. The resultant database instance model can include a list of objects that define and describe objects that are in a database. For instance a list of C Java or C entity objects that lists all tables in a database instance or target database can be produced.

Entity model generator can thereafter utilize the database agnostic metadata model together with the mapping information specific implementation details and or associations against a database instance e.g. an actual database rather than a conceptual one to create a database instance model. Such database instance models can thereafter be employed to develop applications that can access and manipulate the database instance data through the database agnostic metadata model. The database agnostic metadata model of the database instance effectively provides a common abstraction for the database instance in terms of an entity data model EDM such that programming expenditure required to access manipulate and acquire information stored in database instances can be significantly minimized.

System can also include network topology and database A . . . database B wherein entity generator can be in continuous and operative or sporadic but intermittent communication via network topology with database A . . . database B wherein Z denotes a positive integer whole number or natural number greater than or equal zero 0 . Network topology can include any viable communication and or broadcast technology for example wired and or wireless modalities and or technologies can be utilized to effectuate the claimed subject matter. Moreover network topology can include utilization of Personal Area Networks PANs Local Area Networks LANs Campus Area Networks CAMs Metropolitan Area Networks MANs extranets intranets the Internet Wide Area Networks WANs both centralized and distributed and or any combination permutation and or aggregation thereof.

Database A . . . database B represents disparate database instances implementations and or vendor types. For instance database A can be a database that stores airline reservations built using Microsoft s implementation of SQL Server whereas database B can be a database maintained by a financial institution and constructed using IBM s DB2. Each of these disparate database instances implementations and or vendor types can be accessed by entity generator or alternatively and or additionally entity generator on detection of a particular database and or database type can automatically generate or where a database agnostic metadata model has previously been created for a particular database type entity generator can retrieve a previously persisted version a database agnostic metadata model of each of database A . . . database B . As noted above such a database agnostic metadata model can be written in the form of a Conceptual Schema Description Language CSDL that can provide a conceptual overview of specific database implementations e.g. how particular databases are structured and can thereafter be employed by entity generator to construct database instance models that employ a particular specific database implementation.

Interface can receive data from a multitude of sources such as for example those associated with a particular database instance database vendor specific details client applications services users clients and or entities involved with a particular transaction a portion of transaction and thereafter convey the received information to abstraction component for further analysis and or evaluation. Additionally interface can receive data from abstraction component which then can be utilized to present high level conceptual vendor agnostic entity data models written in the form of Store Schema Description Languages that provides a conceptual overview of how particular vendors structure their databases which in turn can be utilized to build entity data models of particular database instances that employ a particular vendor specific database implementation.

Interface can provide various adapters connectors channels communication pathways etc. to integrate the various components included in system into virtually any operating system and or database system and or with one another. Additionally interface can provide various adapters connectors channels communication modalities etc. that provide for interaction with various components that can comprise system and or any other component external and or internal data and the like associated with system .

Abstraction component can translate a database instance or a specific database implementation into a store schema description written in a Store Schema Description Language SSDL for example. The store schema description provides conceptual abstractions of database instances and or the specific database implementation. Typically the schema description is a list of objects that describe an underlying database instance and or specific implementation details.

The abstraction component can receive retrieve or contemporaneously generate a high level conceptual store schema description that describes in general terms how a particular database implementation structure has been laid out. Generally such a high level conceptual store schema description can have implementation specific commands e.g. SELECT JOIN etc. and table and or column specifications e.g. how a particular database structures its data for instance. The high level conceptual store schema description typically written in one or more Store Schema Description Language SSDL can also include information schema also expressed in Store Schema Description Language SSDL that can contain tables columns stored procedures names of stored procedures how to call the stored procedure etc. With the high level conceptual store schema description and mapping information abstraction component can generate a common model of a database instance. Such a common model of the database instance can be in the form of a Common Specification Description Language CSDL and typically is a representation of an entity relationship diagram which has tables views columns view columns view table columns functions and the like.

Common model object component can thereafter receive from store schema definition component the constructed common model. The common model written in a common specification and description language CSDL for example provides a representation of an entity relationship diagram which can have tables views columns view columns view table columns functions and the like. Such a common model permits database vendors to provide a universally comprehensible representation of any database regardless of vendor complexity or database type. The common model object component upon receipt of the common model can generate schema descriptions e.g. in Store Schema Description Language SSDL of underlying database instances that can thereafter be employed to develop applications that can access and manipulate the database instances through the conceptual model or the common model thereby significantly reducing programming expenditure required to access manipulate and acquire information stored in database instances.

It is to be appreciated that store can be for example volatile memory or non volatile memory or can include both volatile and non volatile memory. By way of illustration and not limitation non volatile memory can include read only memory ROM programmable read only memory PROM electrically programmable read only memory EPROM electrically erasable programmable read only memory EEPROM or flash memory. Volatile memory can include random access memory RAM which can act as external cache memory. By way of illustration rather than limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM . Store of the subject systems and methods is intended to comprise without being limited to these and any other suitable types of memory. In addition it is to be appreciated that store can be a server a database a hard drive and the like.

The independent components may be used to further fill out or span an information space and the dependent components may be employed in combination to improve quality of common information recognizing that all sensor input data may be subject to error and or noise. In this context data fusion techniques employed by data fusion component may include algorithmic processing of sensor input data to compensate for inherent fragmentation of information because particular phenomena may not be observed directly using a single sensing input modality. Thus data fusion provides a suitable framework to facilitate condensing combining evaluating and or interpreting available sensed or received information in the context of a particular application.

In view of the foregoing it is readily apparent that utilization of the context component to consider and analyze extrinsic information can substantially facilitate determining meaning of sets of inputs.

Users can also interact with regions to select and provide information via various devices such as a mouse roller ball keypad keyboard and or voice activation for example. Typically the mechanism such as a push button or the enter key on the keyboard can be employed subsequent to entering the information in order to initiate for example a query. However it is to be appreciated that the claimed subject matter is not so limited. For example nearly highlighting a checkbox can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via text message on a display and an audio tone the user for information via a text message. The user can then provide suitable information such as alphanumeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a graphical user interface and or application programming interface API . In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and EGA with limited graphic support and or low bandwidth communication channels.

In view of the exemplary systems shown and described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow chart of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter. Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers.

The claimed subject matter can be described in the general context of computer executable instructions such as program modules executed by one or more components. Generally program modules can include routines programs objects data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined and or distributed as desired in various aspects.

The claimed subject matter can be implemented via object oriented programming techniques. For example each component of the system can be an object in a software routine or a component within an object. Object oriented programming shifts the emphasis of software development away from function decomposition and towards the recognition of units of software called objects which encapsulate both data and functions. Object Oriented Programming OOP objects are software entities comprising data structures and operations on data. Together these elements enable objects to model virtually any real world entity in terms of its characteristics represented by its data elements and its behavior represented by its data manipulation functions. In this way objects can model concrete things like people and computers and they can model abstract concepts like numbers or geometrical concepts.

The benefit of object technology arises out of three basic principles encapsulation polymorphism and inheritance. Objects hide or encapsulate the internal structure of their data and the algorithms by which their functions work. Instead of exposing these implementation details objects present interfaces that represent their abstractions cleanly with no extraneous information. Polymorphism takes encapsulation one step further the idea being many shapes one interface. A software component can make a request of another component without knowing exactly what that component is. The component that receives the request interprets it and figures out according to its variables and data how to execute the request. The third principle is inheritance which allows developers to reuse pre existing design and code. This capability allows developers to avoid creating software from scratch. Rather through inheritance developers derive subclasses that inherit behaviors that the developer then customizes to meet particular needs.

In particular an object includes and is characterized by a set of data e.g. attributes and a set of operations e.g. methods that can operate on the data. Generally an object s data is ideally changed only through the operation of the object s methods. Methods in an object are invoked by passing a message to the object e.g. message passing . The message specifies a method name and an argument list. When the object receives the message code associated with the named method is executed with the formal parameters of the method bound to the corresponding values in the argument list. Methods and message passing in OOP are analogous to procedures and procedure calls in procedure oriented software environments.

However while procedures operate to modify and return passed parameters methods operate to modify the internal state of the associated objects by modifying the data contained therein . The combination of data and methods in objects is called encapsulation. Encapsulation provides for the state of an object to only be changed by well defined methods associated with the object. When the behavior of an object is confined to such well defined locations and interfaces changes e.g. code modifications in the object will have minimal impact on the other objects and elements in the system.

Each object is an instance of some class. A class includes a set of data attributes plus a set of allowable operations e.g. methods on the data attributes. As mentioned above OOP supports inheritance a class called a subclass may be derived from another class called a base class parent class etc. where the subclass inherits the data attributes and methods of the base class. The subclass may specialize the base class by adding code which overrides the data and or methods of the base class or which adds new data attributes and methods. Thus inheritance represents a mechanism by which abstractions are made increasingly concrete as subclasses are created for greater levels of specialization.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers.

Artificial intelligence based systems e.g. explicitly and or implicitly trained classifiers can be employed in connection with performing inference and or probabilistic determinations and or statistical based determinations as in accordance with one or more aspects of the claimed subject matter as described hereinafter. As used herein the term inference infer or variations in form thereof refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the claimed subject matter.

Furthermore all or portions of the claimed subject matter may be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Some portions of the detailed description have been presented in terms of algorithms and or symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and or representations are the means employed by those cognizant in the art to most effectively convey the substance of their work to others equally skilled. An algorithm is here generally conceived to be a self consistent sequence of acts leading to a desired result. The acts are those requiring physical manipulations of physical quantities. Typically though not necessarily these quantities take the form of electrical and or magnetic signals capable of being stored transferred combined compared and or otherwise manipulated.

It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the foregoing discussion it is appreciated that throughout the disclosed subject matter discussions utilizing terms such as processing computing calculating determining and or displaying and the like refer to the action and processes of computer systems and or similar consumer and or industrial electronic devices and or machines that manipulate and or transform data represented as physical electrical and or electronic quantities within the computer s and or machine s registers and memories into other data similarly represented as physical quantities within the machine and or computer system memories or registers or other such information storage transmission and or display devices.

Referring now to there is illustrated a block diagram of a computer operable to execute the disclosed system. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the claimed subject matter can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the subject matter as claimed also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the claimed subject matter may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

With reference again to the exemplary environment for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1194 interface technologies. Other external drive connection technologies are within contemplation of the claimed subject matter.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the exemplary operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed and claimed subject matter.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the claimed subject matter can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices e.g. a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1194 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks e.g. a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network e.g. the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication e.g. a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

Wi Fi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. Wi Fi is a wireless technology similar to that used in a cell phone that enables such devices e.g. computers to send and receive data indoors and out anywhere within the range of a base station. Wi Fi networks use radio technologies called IEEE 802.11x a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet .

Wi Fi networks can operate in the unlicensed 2.4 and 5 GHz radio bands. IEEE 802.11 applies to generally to wireless LANs and provides 1 or 2 Mbps transmission in the 2.4 GHz band using either frequency hopping spread spectrum FHSS or direct sequence spread spectrum DSSS . IEEE 802.11a is an extension to IEEE 802.11 that applies to wireless LANs and provides up to 54 Mbps in the 5 GHz band. IEEE 802.11a uses an orthogonal frequency division multiplexing OFDM encoding scheme rather than FHSS or DSSS. IEEE 802.11b also referred to as 802.11 High Rate DSSS or Wi Fi is an extension to 802.11 that applies to wireless LANs and provides 11 Mbps transmission with a fallback to 5.5 2 and 1 Mbps in the 2.4 GHz band. IEEE 802.11g applies to wireless LANs and provides 20 Mbps in the 2.4 GHz band. Products can contain more than one band e.g. dual band so the networks can provide real world performance similar to the basic 10 BaseT wired Ethernet networks used in many offices.

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment for processing the disclosed architecture in accordance with another aspect. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information by employing the claimed subject matter for example.

The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the claimed subject matter for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of the disclosed and claimed subject matter. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

