---

title: Scalable programmable video recorder
abstract: A programmable video recorder (PVR) includes a writer application programming interface (API) and a reader API that operate essentially independently to enable the PVR to be networked to multiple reader applications. The writer API creates a backing store and a shared memory mapped file. The backing store stores streamed data in temporary files. The shared memory mapped file stores state information of the backing store files. The reader API receives requests from reader applications to access the stored streamed data. In response to the requests, the reader API permits the reader applications to access the shared memory mapped file to determine where the stored streamed data is located. Upon locating the stored data, the reader API permits the requesting reader applications to access the stored streamed data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07743032&OS=07743032&RS=07743032
owner: Microsoft Corporation
number: 07743032
owner_city: Redmond
owner_country: US
publication_date: 20071005
---
This application is a continuation of U.S. patent application Ser. No. 10 172 551 filed Jun. 14 2002 and entitled SCALABLE PROGRAMMABLE VIDEO RECORDER. The present application claims priority to the foregoing application which is incorporated herein by reference in its entirety.

The present invention is directed to methods for writing and reading streamed data and more particularly to methods for writing and reading streamed data in a Programmable Video Recorder PVR .

The PVR also known as the Digital Video Recorder DVR has recently entered the home entertainment market as device that is capable of providing many conveniences not previously considered practical for the traditional Video Cassette Recorder VCR . For instance the PVR can immediately access recorded data without having to fast forward or rewind a videocassette in the sequential and time consuming manner previously required by the VCR. This ability is largely a function of the type of data and the type of storage utilized by the PVR. In particular the PVR utilizes digital data and a digital storage medium which is capable of storing and indexing the digital data in such a manner that it can be accessed almost instantaneously.

Another convenience provided by the PVR due to the digital medium in which it operates is the ability of the PVR to record and play data at the same time. In particular the PVR utilizes a writer which writes the data to a storage medium and a reader which can read the data from the storage medium at substantially the same time the writer is writing data to the storage medium. It will be appreciated that the utility of being able to simultaneously record and play data at the same time is a significant advantage over the traditional VCR.

In particular the PVR enables the viewer watching a live program to temporarily pause rewind or replay a portion of the program without interrupting the recording of the program such that the viewer can then later resume watching the program including the portions of the program that were broadcast and recorded into the buffer during the temporary pause. It will be appreciated that this functionality is a result of the PVR having a writer and a reader that can perform their specific write and read functions somewhat independently. Nevertheless as described below the functionality of the reader is in reality heavily dependent upon the functionality of the writer.

Digital data which is utilized by the PVR is typically received in a streamed data format which enables the data to be read and rendered while it is received without having to first receive the entire contents of the file to which the data corresponds. There are various streaming standards and formats which are known to those of ordinary skill in the art including but not limited to MPEG Moving Picture Experts Group ASF Advanced Streaming Format AVI Audio Video Interleave Active Movie Cinepaq QuickTime and Indeo.

Existing PVR devices are configured to operate with an appropriate streaming format to provide the functionality described above. However not all PVR devices are configured to operate with all streaming formats. Accordingly for any PVR to function properly the PVR must receive data in a format the PVR is designed to operate with. Otherwise the writer will be unable to write the data and the reader will be unable to read the data in a manner that enables the PVR to function properly.

Although existing PVR devices are not all configured to utilize the same data formats PVR devices are configured with a writer and a reader that are capable of operating with the same streaming format. Otherwise the reader would be unable to read the data written by the writer and would therefore render the PVR essentially inoperable.

Accordingly although the writer and the reader function independently to some degree for enabling the PVR to record and play data at the same time it will be appreciated that the reader is in reality substantially dependent on the writer. In particular the reader can only read data once it has been written by the writer and is therefore dependent upon the writer writing data that the reader is capable of accessing and interpreting. For instance if the reader is only capable of reading MPEG data but the writer is only capable of writing ASF data then the PVR is for all intents and purposes inoperable. This is not a typical problem experienced by the PVR however since the PVR is specifically designed with the prior knowledge of how the reader will operate and the types of data the reader is capable of reading. Accordingly the PVR is configured at the time of manufacture with a writer that is specifically designed to write data in the same format that can be read by the reader.

During use the reader of the PVR accesses and reads the streamed data from the ring buffer and transmits the streamed data to the rendering device . The rendering device which can include a display monitor or an audio system ultimately renders the streamed data into the desired video and audio. Since the reader and the writer both directly access the ring buffer it will be appreciated that for the existing PVR to work the reader and the writer must agree upon the data storage format used in ring buffer that knowledge of this format must be built in to both the reader and the writer and that neither of them can deviate from this format. Specifically the writer is configured to receive and write a pre determined set of appropriate types of data to the ring buffer which the reader is correspondingly configured to read.

Configuring the PVR with a writer that will only write the appropriate type of data to the buffer and in the appropriate manner is useful for ensuring that the reader will be able to read the data once it has been written to the buffer . Nevertheless this built in interdependency between the writer and the reader also significantly limits the scalability and utility of the PVR . In particular limiting the type of data that can be written by the writer to only the type of data formats that can be read by the reader limits the utility of the PVR to the functionality of that reader . This forecloses the utility that could otherwise be realized in recording different types of data that can be read and utilized by different types of reader applications.

Existing PVR devices are also not configured to interconnect with other reading devices and applications external to the PVR inasmuch as it is impractical for the PVR to store data that cannot be utilized by the reader of the PVR. This however is an unnecessary limitation of existing PVR devices inasmuch as this prevents external reader devices and applications for obtaining the data stored by the PVR even when they are capable of reading and utilizing the stored data. Accordingly the existing PVR is essentially un scalable because it cannot be networked to external reader devices and is therefore correspondingly limited to the functionality and operation of the single integrated reader incorporated within the PVR.

The present invention is primarily directed towards methods for increasing the scalability of the programmable video recorder PVR so that the data stored within the PVR can be accessed and utilized by multiple and remote reader applications.

According to one aspect of the invention the PVR isolates the writing and reading functions of the PVR so that the operation of the writer is not constrained by the limited capabilities of the reader. This is accomplished by providing a writer Application Programming Interface API and a reader API that operate substantially independently. Primitive operations performed by the writer API include the following creating a backing store comprising a plurality of different files to store the streamed data creating a shared memory mapped file that includes the state information of the backing store files writing the streamed data into the appropriate files of the backing store and writing the appropriate state information for the files of the backing store into the shared memory mapped file.

When a request from one or more reader applications for the stored streamed data is received the state information for the stored streamed data is accessed from the shared memory mapped file through the reader API. Upon accessing the state information the reader API permits the requesting reader applications to independently access the requested data from the backing store.

According to one aspect of the invention the writer API and the reader API hide the specifics of the data storage format used in the backing store from corresponding writing and reading modules. Without having to worry about the details of data storage the writing module is able to write various types of data into the backing store without having to update or modify any existing reader applications for the different types of data that are being written. During use the reader API enables one or more reader applications to access the recorded data regardless of the manner in which the data was recorded.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention extends to methods systems and computer program products for buffering streamed data within devices such as the Programmable Video Recorder PVR that are configured to record and render streamed data. According to one aspect of the invention the PVR includes a writer API and a reader API that function substantially independently such that streamed data can be written to the backing store of the PVR without regard to the type of data that can be read by the reader application of the PVR. According to another aspect of the invention a shared memory mapped file or another shared memory data section is created to store state information of the files in the backing store of the PVR. The shared memory mapped file can be accessed by multiple and remote reader applications to locate and access desired data from the backing store according to the methods of the invention.

The embodiments of the present invention may comprise a special purpose or general purpose computer including various computer hardware as described in greater detail below.

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media can comprise physical storage media such as RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of computer readable media. Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions.

Management system includes a signal input which receives streamed data from a signal source . The streamed data is transmitted from signal source to signal input via an input line which can be a cable or optic connection a terrestrial antenna system a satellite system or any device or system capable of transmitting streamed data to management system .

The signal source may be either a single channel signal source or a multiple channel signal source. A single channel signal source provides programming from a recorded medium such as a videocassette compact disc etc. Examples of a single channel signal source include a VCR a DVD and the like. Alternatively a multiple channel signal source includes any system or device that is capable of sending a signal that may be received by a satellite receiver a cable or optic connection a terrestrial antenna or the like. Examples of a multiple channel signal source include DSS DVB a cable box locally broadcast programming i.e. programming broadcast using UHF VHF and ATVEF and the like.

While illustrates home entertainment system as having a single programming input line and a single signal source there can instead be a plurality of programming input lines that transmit programming from a plurality of signal sources. In such embodiments the home entertainment system may receive the streamed data from one signal source or from a plurality of signal sources at a time.

Management system also includes a user input interface which receives input from an input device such as a remote control keyboard microphone or any other device capable of generating electronic instructions for management system . Input device is communicatively coupled to management system over an input link so as to enable such control. Input device generates electronic instructions over input link in response to preprogrammed data or in response to a viewer pressing buttons on input device . Input device may also control Web browser software within management system as when the management system receives streamed data through an Internet connection.

The operation of management system is controlled by a central processing unit CPU illustrated as processing unit which is coupled to an application specific integrated circuit ASIC and uses computer executable instructions implemented in software and or hardwired logic circuitry. Processing unit and ASIC are coupled via a system bus which also interconnects various other system components such as the system memory mass storage interface user interface and signal input . Processing unit executes software designed to implement features of management system including features of the present invention. ASIC contains circuitry that is used to implement certain functions of management system . Instructions data and other software necessary for the operation of processing unit and ASIC may be stored in the system memory such as in read only memory ROM and or in random access memory RAM and or in a mass storage device which is coupled to mass storage interface . ROM RAM and mass storage device are communicatively coupled to ASIC so as to be readable by ASIC and so that data may be written from ASIC to RAM and possibly mass storage device .

Mass storage device may be a magnetic hard disk or any other magnetic or optical mass memory device that is capable of storing large amounts of data. Any desired computer readable instructions or data including application programs other program modules and an electronic programming guide EPG which specifies the broadcast times and channels of programs can be stored in mass storage device . Mass storage device can also be used to record streamed data including multimedia data and non multimedia data. Examples of multimedia data include audio data and video data. Examples of non multimedia data include meta data markers events and IP data.

In the embodiment where management system receives streamed data from the Internet management system communicates with a remote computer via a wide area network WAN by including a serial port interface that is interposed between the system bus and a modem a wireless link or other means for establishing communications over a WAN that may be internal or external to management system . Management device is also capable of transmitting information and receiving streamed data via the Internet by direct dial communication over standard telephone lines or by using any other available communication medium.

Referring now to signal input if the signal on programming input line includes multiple channels that are each receiving different streams of data a tuner included in signal input tunes to a selected channel in the signal. Multiple tuners can be used to provide enhanced features such as recording streamed data from one channel while viewing streamed data on another channel and recording streamed data from a plurality of channels simultaneously. A signal decoder converts video data from an analog format to a digital format or from a digital format to an analog format in the event that ASIC and tuner employ different formats. Signal decoder can also decode decompress and split audio video meta data and other data from a compressed stream format e.g. MPEG ASF . In embodiments where the management system includes multiple tuners management system may also include multiple signal decoders to perform the operations disclosed herein.

Management system also includes a video output and an audio output which are useful for transmitting data to rendering devices such as display device and audio system . It will be appreciated however that the management system is not limited to transmitting data to rendering devices. In particular the management system can also transmit data to any number of remote computing devices such as remote computer which are each independently configured with reader applications for reading data stored in the mass storage device of the management system . The remote computer can directly receive the data from the management system through an output line which can be a cable or optic connection a terrestrial antenna system a satellite system or any device or system capable of transmitting streamed data to home management system . Alternatively the remote computer can indirectly receive the data from the management system through the wide area network .

While and the corresponding discussion above provide a general description of a suitable environment in which the invention may be implemented it will be appreciated by one of ordinary skill in the art upon reading this application that the methods of the present invention may be practiced in association with a variety of different system configurations.

As mentioned above streamed data can include multimedia data such as audio and video data as well as non multimedia data such as meta data markers events and IP data all of which are well known in the art. The streamed data can also be encoded according to any suitable standard and format including but not limited to MPEG ASF AVI Active Movie Cinepaq QuickTime and Indeo. The term streamed data and data are at certain times used interchangeably herein.

Although the PVR is shown to be in communication with only a single streamed data source it will also be appreciated by one of ordinary skill in the art upon reading this application that the PVR can communicate with multiple streamed data sources thereby enabling the PVR to receive a plurality of different streamed data signals at the same time.

Upon receiving the streamed data the PVR processes and stores the streamed data so that it can be accessed and read by an appropriate reader application and rendered by an appropriate rendering device. To enable the PVR to process and store the streamed data according to the methods of the invention the PVR is configured with a plurality of modules including a tuning and decoding module a writing module and a reading module . The PVR also includes a writer API a reader API and a storage medium each of which will now be described in detail.

The tuning and decoding module is configured to receive the streamed data from the streamed data source and when necessary split the streamed data into appropriate and individual streams such as audio streams video streams IP data streams and so forth. Decompression and de multiplexing of the streamed data may also performed by the tuning and decoding module when necessary. It will be appreciated that the tuning and decoding module is not limited to receiving data through a broadcast signal. Accordingly the tuning and decoding module can also be considered a receiving module for receiving data through the Internet another network connection or from other sources of streamed data such as file sources.

According to one aspect of the invention the writer API creates a backing store in the storage medium that has any number of files that are appropriately configured to store the streamed data so that the streamed data can be accessed and rendered at a later time at the viewer s discretion. In one embodiment the backing store includes a plurality of temporary files and permanent files that are used to buffer the streamed data as described below.

The writing module is configured to write the streamed data to the backing store of the storage medium as directed by the writer API . The writing module is also able according to one embodiment to write the streamed data to more than one file at a time. This is useful when the streamed data includes a plurality of different streams so that each of the different streams can be written to appropriate files without causing data to be lost which can occur when the writing module is unable to write data as fast as it is received.

The writer API also creates a shared memory mapped file within the storage medium which contains state information corresponding to the files and . As described below in more detail the shared memory mapped file enables reader applications to locate and access the streamed data stored within the backing store . The shared memory mapped file which is described below in more detail is only one example of a suitable shared memory data section that may be used to store state information corresponding to the files. Accordingly the invention extends to the use of any shared memory data section or index that can be used to store state information that corresponds to the files.

Although the backing store and the shared memory mapped file are shown to be included within the storage medium of the PVR it will be appreciated by one of ordinary skill in the art upon reading this application that the backing store and the shared memory mapped file can also be contained within independent mass storage devices that are located outside of the storage medium of the PVR and which are accessible by the PVR . Although the temporary files and the permanent files of the backing store are shown in the present embodiment to be located within the same mass storage medium it will also be appreciated by one of ordinary skill in the art upon reading this application that the temporary files and the permanent files can be located in a number of different mass storage mediums that can be accessed by the PVR .

The reading module accesses and reads streamed data from the backing store as instructed by the reader API . When necessary the reading module also decompresses and splits the streamed data into appropriate signals to be rendered by a rendering device associated with the PVR such as for example a television a monitor an audio system and other similar rendering devices.

The reader API is configured to receive and manage requests from one or more reader applications to access the streamed data stored on the backing store . The terms reader application reading module and reader are sometimes used interchangeably herein.

Upon receiving a request for streamed data the reader API permits the one or more requesting reader applications to access the shared memory mapped file to determine where the desired data is located. Upon determining where the desired data is located the reader API enables each of the requesting reader applications to retrieve the data. The reader API also monitors requests for data that has not yet been written to the backing store so that when the data is finally written to the backing store the data can be accessed by the requesting reader application. According to one embodiment the reader API may permit multiple reader applications to access and read data from the backing store independent of each other and potentially even at the same time.

Examples of reader applications that may access the stored data from the backing store include the reading module of the PVR remote reader application combination reader application and rendering device and network reader application . A non limiting example of the remote reader application includes a remote computer device which is independently capable of processing the streamed data into an appropriate signal that can be transmitted to and rendered by a corresponding rendering device that is in communication with the remote reader application . A non limiting example of the combination reader application and rendering device includes a rendering device such as a television that has a built in reading module for processing the streamed data into appropriate signals that can be rendered. A non limiting example of the network reader application includes a server or a proxy computer that communicates with a plurality of rendering devices through a Local Access Network LAN or a Wide Area Network WAN such as the Internet.

The PVR communicates with rendering device and each of the remotely located reader applications through an appropriate networking connection such as but is not limited to cable and optic connections terrestrial antenna systems and satellite systems. As described above in reference to the appropriate networking connection may include signal output and output line . It will be appreciated by one or ordinary skill in the art after having reviewed this specification that upon practicing the methods of the invention each of the reader applications and may independently and simultaneously access the data stored within the backing store . This can be useful for example to enable different viewers to independently watch pause rewind or otherwise utilize program data buffered in the backing store at the same time. Moreover it will be appreciated that the writer API and the reader API hide the specifics of the data storage format used in the backing store from the writing module and the reading module respectively. This means that the writing module can be extended to write new types of data into the backing store without having to update or modify the existing reader applications and while permitting new reader applications to access the new types of data.

For example a first viewer can watch a replay of a program stored in the backing store through the PVR at the same time a second viewer watches a different replay of the same program through the PVR. It will be appreciated by one of ordinary skill in the art upon reading this application that this is a significant advantage over existing PVR devices that utilize only a single reader application and which are only capable of executing a single read function at a time.

Attention is now be directed to which illustrates a flow chart containing some of the primitive operations implemented by the writer API during implementation of the methods of the invention. Each of the primitive operations associated with the writer API are described below in terms of steps and acts performed by the writer API. In the present illustration the steps and performed by the writer API are bounded by dashed lines and the acts and performed by the writer API are bounded by solid lines.

The first illustrated step performed by the writer API includes the step for creating a backing store in the storage medium of the PVR step . According to one embodiment the step for creating the backing store step includes the corresponding acts of specifying a total number of files that are permitted in the backing store and specifying the duration of streamed data each file is permitted. By specifying the duration of streamed data each file is permitted rather than specifying the byte size of each file as is done by prior art devices the PVR is able to know the exact duration of content contained within each of the files. Knowing the exact duration of content contained within a file can be useful for example when a viewer wishes to rewind a program a specific amount of time.

According to one embodiment the duration of content assigned to each file within the backing store is sequentially assigned to the files as they are opened such that the files sequentially string together the content of the streamed data. For example if a first file is assigned the first ten minutes of content then the next file may be assigned a duration of content for the following ten minutes from the ten minute mark to the twenty minute mark. For example as illustrated in the backing store includes four temporary files F F F and F. File F is assigned a duration of content corresponding to time T thru time T file F is assigned a duration of content corresponding to time T thru time T and file F is assigned a duration of content corresponding to time T thru time T. File F which is also shown in to be assigned a duration of content corresponding to time T thru time T will be described in more detail below.

It will be appreciated by one of ordinary skill in the art upon reading this application that the duration of streamed content each temporary file can contain may be varied to accommodate different needs and preferences. For example the duration may be limited to six minutes ten minutes twenty minutes or any other duration. Although smaller durations are sometimes useful for minimizing how much data is lost at any given time when the temporary files are overwritten as described below it will be appreciated by one of ordinary skill in the art upon reading this application that the durations are not necessarily small or limited to any particular duration.

Upon creating the backing store step as shown in the writer API performs the act of creating a shared memory data section act . The act of creating a shared memory data section generally includes the acts of defining and storing state information for each of the files stored in the backing store. According to one aspect of the invention the shared memory data section is updated whenever the state information of a file changes. Non limiting examples of state information include the duration of content assigned to each file the duration of content written to each file the type of data written to each file an indication of whether the file is a permanent file or a temporary file and address information pointing directly or indirectly to the location of the file in the backing store. The shared memory data section and the state information contained within the shared memory data section are described in more detail below with specific reference to creating a shared memory mapped file in reference to . A shared memory mapped file is one embodiment of a shared memory data section.

The writer API may then perform an act of receiving the streamed data from the streamed data source act . According to one embodiment streamed data includes a plurality of discrete data samples that are streamed together with a streaming format such as but not limited to MPEG ASF AVI Active Movie Cinepaq QuickTime and Indeo. Unlike certain prior art devices that are configured to only receive streamed data that is formatted according to a single preferred streaming format that can be read by the integrated reader of the PVR the writer API of the present invention is configured to receive streamed data of many different streaming formats regardless of the specific capabilities of the integrated reader of the PVR.

As shown in the writer API is also capable of performing the step for writing the streamed data to the backing store step . The step for writing the streamed data to the backing store step can be accomplished by executing the corresponding act step and corresponding act as described below.

Initially while receiving the streamed data act the writer API identifies and defines the corresponding data samples as they are received act . Defining the data samples of the streamed data can include defining the type of data contained within each data sample the format used to encode the data into a stream the data source and any other useful information pertaining to the data. Examples of different types of data that can be defined include multimedia data such as audio data and video data and non multimedia data such as meta data markers events and IP data each of which are well known in the art. Defining each data sample can also include the act of assigning a time stamp to each data sample that corresponds to the time in which the data sample was received. Assigning a time stamp to each data sample can be useful for enabling each of the data samples to be retrieved at a later time based on a request for a data having a desired time stamp. Data samples can be indexed by one or more time stamps within each file in the backing store.

Upon identifying and defining the new data samples of the streamed data the writer API further engages in the step for determining where each newly received data sample should be stored step . This can initially be accomplished by determining whether any existing file in the backing store is suitably configured to store the data. In one embodiment a file is suitably configured to store a data sample only when the file is assigned a duration of content that corresponds to the time stamp of the data sample. In another embodiment the file is suitably configured to store a data sample only when the file is assigned to store the same type of data as the data sample e.g. audio video IP data and so forth .

When there is no file suitably configured to store the data sample and the total number of permitted files for the backing store have not yet been opened then the method may also include the act of opening a new file that is suitably configured to store the data sample. Alternatively when an appropriate file to store the data sample is not open and the total number of permitted files for the backing store have already been opened then the method may include the act of overwriting an existing file with a new file that is suitably configured to store the data sample. Upon determining where a data sample should be written step the data sample is finally written to the appropriate file act .

The type of data pertaining to the data sample can also be a factor in determining where the data sample is stored. For example in the present embodiment data sample D which comprises IP data and data sample D which comprises video data were both received together at the same time such that they both received the same time stamp of T. When data samples D and D where received from the data stream they were split apart with the tuning and decoding module of the invention which is described above with reference to . In the present embodiment file F is configured to store multimedia data and file F is configured to store non multimedia data. Accordingly the data sample D comprising video data is written to file F and data sample D comprising IP data is written to file F. Data samples D and D are written to the appropriate files by writer which corresponds to the writing module described above.

According to another aspect of the invention data samples are assigned to different files according to the data stream or data source from which they are received. This embodiment is particularly useful when multiple data streams are received at the same time by the PVR.

Data stream and data stream can be formatted with the same format or different formats according to the invention. It will be appreciated by one of ordinary skill in the art upon reading this application that this is an improvement over conventional technology inasmuch as this enables the PVR to receive and store data that can be utilized by multiple reader applications having different capabilities to read different types of formatted data. In particular the backing store can buffer streams of data that are encoded in formats that cannot be read or utilized with the single incorporated reader application. Although only two streams are shown in the present embodiment it will also be appreciated by one of ordinary skill in the art upon reading this application that additional streams of data may be received and stored in the backing store . The quantity of streams that can be received by the PVR is only constrained by the capacity of the storage medium in which the backing store is located.

By storing the streamed data into different files based on different criteria as described above it is useful to index the data so that it can be accessed and utilized at a later time by the one or more reader applications in communication with the PVR. One method for indexing the stored data according to the invention is to update the shared memory data section act which is described above in reference to act so that it contains valid state information for the files that are storing the data. According to one embodiment the shared memory data section is updated whenever a new file is created and whenever new data is written to a file step .

A description of a shared memory mapped file which is one suitable example of a shared memory data section will now be provided with specific reference to FIGS. and .

Attention is first directed to which illustrates certain primitive operations associated with the reader API for enabling reader applications to read the stored data from the backing store with the assistance of the shared mapped memory file. Each of the primitive operations associated with the reader API is described below as acts performed by the reader API.

Initially upon receiving a request from one or more reader applications to access the streamed data act the reader API permits the reader applications to access the state information contained in the shared memory data section act . Next the reader API permits the reader applications to access the data files containing the desired data according to the recorded state information act . Finally the reader applications are permitted to access and read the requested data act .

For example if a reader application such as reader R see seeks program data that corresponds to time T in a program then the reader API will direct reader R to the location of file F since file F is shown to contain data content pertaining to time T to time T. Once the reader R is able to locate file F the reader R can precisely access the desired data D by referencing an index I associated with the file F that indexes each of the data samples D D D D and D by their corresponding time stamp as generally described above. The reader R may also access header H which may contain information that is required for properly reading the data samples contained within the file F.

According to one aspect of the invention the backing store can also be accessed by a plurality of different reader applications at the same time. For example as shown reader R and reader R access files F and F of the backing store respectively at the same time reader R accesses file F of the backing store even though the actual content that is being simultaneously accessed by reader R has a different associated time stamp namely T than the content accessed by the readers R and R namely T . Each of the readers R R and R can be remote reader applications or integrated reader applications. It will be appreciated by one of ordinary skill in the art upon reading this application that this is a significant advantage over the prior art PVR devices that are only configured to operate with a single integrated reader application.

One particularly useful advantage of the present PVR solution is that different readers can access the same or different information from the backing store at the same time. For example in the present embodiment reader R seeks video data having a time stamp of T from data stream while at the same time reader R seeks IP data having the same time stamp from data stream . In the present embodiment state information includes the type of data that is stored in the files such that it can be determined that file F contains video data at the desired time T see the second to last row of shared memory mapped file . It can also be determined that file F contains IP data a time T see the last row of shared memory mapped file . Upon accessing this state information the readers R and R are permitted by the reader API to access the appropriate files having the desired data D and D respectively.

The shared memory mapped file can also be configured with state information regarding the file type and the reader position of each file in the backing store. This state information is useful as described below for helping locate the desired data and for cuing reader application requests for data that is not yet written.

It will be appreciated by one of ordinary skill in the art upon reading this application that the permanent memory can also be used to maximize the use of the temporary memory . For example when a viewer wishes to make a permanent file of certain data the permanent memory F can be used as part of the buffer in the backing store such that the recorded data does not have to also be recorded in the temporary memory thereby minimizing the resources required to store the data.

During use the writer API causes the writer to write data samples to the backing store as the data samples are received from the data stream . According to one present embodiment the files of the backing store are also defined as to whether they are stored in temporary memory or permanent memory . Criteria for determining whether a data sample should be written to temporary or permanent memory may be based upon viewer instructions received by the PVR.

In the present embodiment viewer instructions have been received that indicate the content of the data stream that pertains to time T thru T should be archived. Accordingly as shown data samples D D D D and D are written to permanent file F whereas the remaining data samples are written to temporary files F and F as they are received. When data samples D D and D are received they will also be written to the backing store in the order they are received.

Now turning to it is shown how the state information corresponding to files F F and F has been created and updated in the shared memory data section shared memory mapped file according to the invention so that reader applications can access the desired data from the files F F and F. In the present embodiment the state information of the files includes the duration of content stored in each file a file identifier from which the file location may be directly or indirectly determined and the description of the file type .

It will be appreciated by one of ordinary skill in the art upon reading this application that the file type is useful for locating files that are stored in different storage locations within the backing store. For example in the present embodiment of reader R is seeking data from the data stream pertaining to time T. As indicated by the shared memory mapped file this data is located in file F in permanent memory . Accordingly to help ensure that the data located within the permanent memory can be accessed by reader applications it is useful to include the file type in the shared memory mapped file . Identifying the file type is particularly useful when the permanent files and temporary files are located in different storage media as described above. It is also necessary to help determine which files in the backing store can be deleted or overwritten when the writer has to create a new temporary file and the memory allocated to the backing store cannot be increased.

Although examples have been provided in which the shared memory data section comprises a shared memory mapped file it will be appreciated that the invention extends to the use of any shared memory data section. Furthermore despite the specific examples of the shared memory mapped file that have been provided it will be appreciated that the shared memory data section of the invention can include additional state information corresponding to the stored files that is not shown to be included within the specific examples of the shared memory mapped file. Additionally the primitive operations associated with the reader API and the writer API can also be executed in a variety of different orders to accommodate different needs and preferences.

It will be appreciated that the present invention provides a significant advantage over existing PVR devices that are configured to operate with only a single reader application and to utilize only a single type of streamed data. In particular the methods of the present invention enable a PVR device to buffer multiple types of streamed data that can be accessed by multiple reader applications even remote reader applications independently and simultaneously. The invention also generally enables a writer API and a reader API to hide the specifics of data storage formatting that is used in the backing store from corresponding writing and reading modules thereby enabling a wide variety of data types to be recorded and read even when the writing and reading modules are not specifically designed to write and read the said variety of data types.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

