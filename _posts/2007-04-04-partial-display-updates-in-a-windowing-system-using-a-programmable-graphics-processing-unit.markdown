---

title: Partial display updates in a windowing system using a programmable graphics processing unit
abstract: Techniques to generate partial display updates in a buffered window system in which arbitrary visual effects are permitted to any one or more windows (e.g., application-specific window buffers) are described. Once a display output region is identified for updating, the buffered window system is interrogated to determine which regions within each window, if any, may effect the identified output region. Such determination considers the consequences any filters associated with a window impose on the region needed to make the output update.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07969453&OS=07969453&RS=07969453
owner: Apple Inc.
number: 07969453
owner_city: Cupertino
owner_country: US
publication_date: 20070404
---
This is a continuation application which claims priority to U.S. patent application Ser. No. 10 957 557 filed Oct. 1 2004 which claims priority to U.S. patent application Ser. No. 10 877 358 entitled Display Wide Visual Effects for a Windowing System using a Programmable Graphics Processing Unit filed 25 Jun. 2004 and which is hereby incorporated by reference.

The invention relates generally to computer display technology and more particularly to the application of visual effects using a programmable graphics processing unit. The subject matter of the invention is generally related to the following jointly owned and co pending patent applications System for Reducing the Number of Programs Necessary to Render an Image by John Harper Ser. No. 10 826 773 System for Optimizing Graphics Operations by John Harper Ralph Brunner Peter Graffagnino and Mark Zimmer Ser. No. 10 825 694 System for Emulating Graphics Operations by John Harper Ser. No. 10 826 744 and High Level Program Interface for Graphics Operations by John Harper Ralph Brunner Peter Graffagnino and Mark Zimmer Ser. No. 10 826 762 each incorporated herein by reference in its entirety.

Referring to in prior art buffered window computer system each application e.g. applications and has associated with it one or more window buffers or backing stores e.g. buffers and only one for each application is shown for convenience . Backing store s represent each application s visual display. Applications produce a visual effect e.g. blurring or distortion through manipulation of their associated backing store. At the operating system OS level compositor combines each application s backing store in a manner that maintains their visual order into a single image stored in assembly buffer . Data stored in assembly buffer is transferred to frame buffer which is then used to drive display unit . As indicated in compositor an OS level application is implemented via instructions executed by computer system central processing unit CPU .

Because of the limited power of CPU it has not been possible to provide more than rudimentary visual effects e.g. translucency at the system or display level. That is while each application may effect substantially any desired visual effect or filter to their individual window buffer or backing store it has not been possible to provide OS designers the ability to generate arbitrary visual effects at the screen or display level e.g. by manipulation of assembly buffer and or frame buffer without consuming virtually all of the system CPU s capability which can lead to other problems such as poor user response and the like.

Thus it would be beneficial to provide a mechanism by which a user typically an OS level programmer or designer can systematically introduce arbitrary visual effects to windows as they are composited or to the final composited image prior to its display.

Methods devices and systems in accordance with the invention provide a means for performing partial display updates in a windowing system that permits layer specific filtering. One method in accordance with the invention includes identifying an output region associated with a top most display layer e.g. an application specific window buffer wherein the output region has an associated output size and location determining an input region for each of one or more filters wherein each of the one or more filters is associated with a display layer and has an associated input size and location substantially any known visual effect filter may be accommodated establishing a buffer e.g. an assembly buffer having a size and location that corresponds to the union of the output region s location and each of the one or more input regions locations and compositing that portion of each display layer that overlaps the buffer s location into the established buffer. In one embodiment that portion of the buffer corresponding to the identified output region is transferred to a frame buffer where it is used to update a user s display device. In another embodiment the acts of identifying determining and establishing are performed by one or more general purpose central processing units while the act of compositing is performed by one or more special purpose graphical processing units in a linear fashion beginning with the bottom most display layer and proceeding to the top most display layer .

Methods and devices to generate partial display updates in a buffered window system in which arbitrary visual effects are permitted to any one or more windows are described. Once a display output region is identified for updating the buffered window system is interrogated to determine which regions within each window if any may effect the identified output region. Such determination considers the consequences any filters associated with a window impose on the region needed to make the output update. The following embodiments of the invention described in terms of the Mac OS X window server and compositing application are illustrative only and are not to be considered limiting in any respect. The Mac OS X operating system is developed distributed and supported by Apple Computer Inc. of Cupertino Calif. 

Referring to buffered window computer system in accordance with one embodiment of the invention includes a plurality of applications e.g. applications and each of which is associated with one or more backing stores only one of which is shown for clarity and convenience e.g. buffers and . Compositor one component in an OS level window server application uses fragment programs executing on programmable graphics processing unit GPU to combine or composite each application s backing store into a single image stored in assembly buffer in conjunction with possibly temporary buffer . Data stored in assembly buffer is transferred to frame buffer which is then used to drive display unit . In accordance with one embodiment compositer GPU may also manipulate a data stream as it is transferred into frame buffer to produce a desired visual effect on display .

As used herein a fragment program is a collection of program statements designed to execute on a programmable GPU. Typically fragment programs specify how to compute a single output pixel many such fragments being run in parallel on the GPU to generate the final output image. Because many pixels are processed in parallel GPUs can provide dramatically improved image processing capability e.g. speed over methods that rely only on a computer system s CPU which is also responsible for performing other system and application duties .

Techniques in accordance with the invention provide four 4 types of visual effects at the system or display level. In the first hereinafter referred to as before effects visual effects are applied to a buffered window system s assembly buffer prior to compositing a target window. In the second hereinafter referred to as on effects visual effects are applied to a target window as it is being composited into the system s assembly buffer or a filter is used that operates on two inputs at once to generate a final image one input being the target window the other being the contents of the assembly buffer. In the third hereinafter referred to as above effects visual effects are applied to a system s assembly buffer after compositing a target window. And in the fourth hereinafter referred to as full screen effects visual effects are applied to the system s assembly buffer as it is transmitted to the system s frame buffer for display.

Referring to below effect in accordance with one embodiment of the invention is illustrated. In below effect the windows beneath i.e. windows already composited and stored in assembly buffer a target window e.g. contained in backing store are filtered before the target window e.g. contained in backing store is composited. As shown the contents of assembly buffer are first transferred to temporary buffer by GPU block in and in . GPU then filters the contents of temporary buffer into assembly buffer to apply the desired visual effect block in and in . Finally the target window is composited into i.e. on top of the contents of assembly buffer by GPU block and in . It will be noted that because the target window is composited after the visual effect is applied below effect does not alter or impact the target window. Visual effects appropriate for a below effect in accordance with the invention include but are not limited to drop shadow blur and glass distortion effects. It will be known by those of ordinary skill that a filter need not be applied to the entire contents of the assembly buffer or target window. That is only a portion of the assembly buffer and or target window need be filtered. In such cases it is known to use the bounding rectangle or the alpha channel of the target window to determine the region that is to be filtered.

Referring to on effect in accordance with one embodiment of the invention is illustrated. In on effect a target window e.g. contained in backing store is filtered as it is being composited into a system s assembly buffer. As shown the contents of window buffer are filtered by GPU block in and in and then composited into assembly buffer by GPU block in and in . Referring to on effect in accordance with another embodiment of the invention is illustrated. In on effect a target window e.g. contained in backing store and assembly buffer block in and in are filtered into temporary buffer block in and in . The resulting image is transferred back into assembly buffer block in and in . Visual effects appropriate for an on effect in accordance with the invention include but are not limited to window distortions and color correction effects such as grey scale and sepia tone effects.

Referring to above effect in accordance with one embodiment of the invention is illustrated. In above effect the target window e.g. contained in backing store is composited into the system s assembly buffer prior to the visual effect being applied. Accordingly unlike below effect the target window may be affected by the visual effect. As shown the target window is first composited into assembly buffer by GPU block in and in after which the result is transferred to temporary buffer by GPU block in and in . Finally GPU filters the contents of temporary buffer into assembly buffer to apply the desired visual effect block in and in . Visual effects appropriate for an on effect in accordance with the invention include but are not limited to glow effects.

Referring to full screen effect in accordance with one embodiment of the invention is illustrated. In full screen effect the assembly buffer is filtered as it is transferred to the system s frame buffer. As shown the contents of assembly buffer are filtered by GPU block in and in as the contents of assembly buffer are transferred to frame buffer block in and in . Because in accordance with the invention programmable GPU is used to apply the visual effect virtually any visual effect may be used. Thus while prior art systems are incapable of implementing sophisticated effects such as distortion tile gradient and blur effects these are possible using the inventive technique. In particular high benefit visual effects for a full screen effect in accordance with the invention include but are not limited to color correction and brightness effects. For example it is known that liquid crystal displays LCDs have a non uniform brightness characteristic across their surface. A full screen effect in accordance with the invention could be used to remove this visual defect to provide a uniform brightness across the display s entire surface.

It will be recognized that as a practical matter full screen visual effects must conform to the system s frame buffer scan rate. That is suitable visual effects in accordance with include those effects in which GPU generates filter output at a rate faster than or at least as fast as data is removed from frame buffer . If GPU output is generated slower than data is withdrawn from frame buffer potential display problems can arise. Accordingly full screen effects are generally limited to those effects that can be applied at a rate faster than the frame buffer s output scan rate.

Event routing in a system employing visual effects in accordance with the invention must be modified to account for post application effects. Referring to for example application may write into window buffer such that window includes button at a particular location. After being modified in accordance with one or more of effects and display may appear with button modified to display as . Accordingly if a user the person viewing display clicks on button the system i.e. the operating system must be able to map the location of the mouse click into a location known by application as corresponding to button so that the application knows what action to take.

It will be recognized by those of ordinary skill in the art that filters i.e. fragment programs implementing a desired visual effect operate by calculating a destination pixel location i.e. x y based on one or more source pixels. Accordingly the filters used to generate the effects may also be used to determine the source location coordinates . Referring to event routing in accordance with one embodiment of the invention begins when an event is detected block . As used herein an event may be described in terms of a click coordinate e.g. x y . Initially a check is made to determine if the clicked location comports with a filtered region of the display. If the clicked location x y has not been subject to an effect the No prong of block the coordinate is simply passed to the appropriate application block . If the clicked location x y has been altered in accordance with the invention the Yes prong of block the last applied filter is used to determine a first tentative source coordinate block . If the clicked location has not been subject to additional effects in accordance with the invention the Yes prong of block the first tentative calculated source coordinate is passed to the appropriate application block . If the clicked location has been subject to additional effects in accordance with the invention the No prong of block the next most recently applied filter is used to calculate a second tentative source coordinate. Processing loop is repeated for each filter applied to clicked location x Y .

In addition to generating full screen displays utilizing below on and above filtering techniques as described herein it is possible to generate partial screen updates. For example if only a portion of a display has changed only that portion need be reconstituted in the display s frame buffer.

Referring to consider the case where user s view is the result of five 5 layers background layer L layer L layer L layer L and top most layer L . In the prior art when region was identified by the windowing subsystem as needed to be updated e.g. because a new character or small graphic is to be shown to the user an assembly buffer was created having a size large enough to hold the data associated with region . Once created each layer overlapping region e.g. regions and was composited into the assembly buffer beginning at background layer L region up to top most layer L region . The resulting assembly buffer s contents were then transferred into the display s frame buffer at a location corresponding to region .

When layer specific filters are used in accordance with the invention the prior art approach of does not work. For example a specified top layer region comprising a b pixels may because of that layer s associated filter require more e.g. due to a blurring type filter or fewer e.g. due to a magnification type filter pixels from the layer below it. Thus the region identified in the top most layer by the windowing subsystem as needing to be updated may not correspond to the required assembly buffer size. Accordingly the effect each layer s filter has on the ability to compute the ultimate output region must be considered to determine what size of assembly buffer to create. Once created each layer overlapping the identified assembly buffer s extent size and location may be composited into the assembly buffer as described above with respect to with the addition of applying that layer s filter e.g. a below on or above filter as previously described.

Referring to assembly buffer extent size and location determination technique in accordance with one embodiment of the invention includes receiving identification of a region in the user s display that needs to be updated block . One of ordinary skill in the art will recognize that this information may be provided by conventional windowing subsystems. The identified region establishes the initial assembly buffer s AB extent block . Starting at the top most layer that is the windowing layer closest to the viewer block a check is made to determine if the layer has an associated filter block . Illustrative output display filters include below on and above filters as described herein. If the layer has an associated filter the Yes prong of block the filter s region of interest ROI is used to determine the size of the filter s input region required to generate a specified output region block . As described in the filters identified in paragraph 0002 a filter s ROI is the input region needed to generate a specified output region. For example if the output region identified in accordance with block comprises a region a b pixels and the filter s ROI identifies a region x y pixels then the identified x y pixel region is required at the filter s input to generate the x y pixel output region. The extent of the AB is then updated to be equal to the combination via the set union operation of the current AB extent and that of the region identified in accordance with block block . If there are additional layers to interrogate the Yes prong of block the next layer is identified block and processing continues at block . If no additional layers remain to be interrogated the No prong of block the size of AB needed to generate the output region identified in block is known block . With this information an AB of the appropriate size may be instantiated and each layer overlapping the identified AB region composited into it in a linear fashion beginning at the bottom most or background layer and moving upward toward the top most layer block . Once compositing is complete that portion of the AB s contents corresponding to the originally identified output region in accordance with the acts of block may be transferred to the appropriate location within the display s frame buffer FB block . For completeness it should be noted that if an identified layer does not have an associated filter the No prong of block processing continues at block . In one embodiment acts in accordance with blocks may be performed by one or more cooperatively coupled general purpose CPUs while acts in accordance with blocks and may be performed by one or more cooperatively coupled GPUs.

To illustrate how process may be applied consider in which user s view is the result of compositing five 5 display layers background layer L layer L layer L layer L and top most layer L . In this example assume region has been identified as needing to be update on display and that i layer L has a filter whose ROI extent is shown as ii layer L has a filter whose ROI extent is shown as iii layer L has a filter whose ROI extent is shown as and iv layer L has a filter whose ROI extent is shown as .

In accordance with process region is used to establish an initial AB size. As would be known to those of ordinary skill in the art the initial location of region is also recorded. Next region in layer L needed by layer L s filter is determined. As shown the filter associated with layer L uses region from layer L to compute or calculate its display L Filter ROI . It will be recognized that only that portion of layer L that actually exists within region is used by layer L s filter. Because the extent of region is greater than that of initial region the AB extent is adjusted to include region . A similar process is used to identify region in layer L . As shown in the filter associated with layer L does not perturb the extent size of the needed assembly buffer. This may be because the filter is the NULL filter i.e. no applied filter or because the filter does not require more or fewer pixels from layer L e.g. a color correction filter .

The process described above and outlined in blocks is repeated again for layer L to identify region in layer L . Note that region is smaller than region and so the size extent of the AB is not modified. Finally region is determined based on layer L s filter ROI . If region covers some portion of background layer L not yet within the determined AB the extent of the AB is adjusted to do so. Thus final AB size and location extent represents the union of the regions identified for each layer L through L . With region known an AB of the appropriate size may be instantiated and each layer that overlaps region is composited into it starting at background layer L and finishing with top most layer L i.e. in a linear fashion . That portion of the AB corresponding to region may then be transferred into display s frame buffer at a location corresponding to region for display.

As noted above visual effects and display updates in accordance with the invention may incorporate substantially any known visual effects. These include color effects distortion effects stylized effects composition effects half tone effects transition effects tile effects gradient effects sharpen effects and blur effects.

Various changes in the components as well as in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For instance in the illustrative system of there may be additional assembly buffers temporary buffers frame buffers and or GPUs. Similarly in the illustrative system of there may be more or fewer display layers windows . Further not all layers need have an associated filter. Further regions identified in accordance with block need not overlap. That is regions identified in accordance with the process of may be disjoint or discontinuous. In such a case the union of disjoint regions is simply the individual regions. One of ordinary skill in the art will further recognize that recordation of regions may be done in any suitable manner. For example regions may be recorded as a list of rectangles or a list of closed paths. In addition acts in accordance with A A A and may be performed by two or more cooperatively coupled GPUs and may further receive input from one or more system processing units e.g. CPUs . It will further be understood that fragment programs may be organized into one or more modules and as such may be tangibly embodied as program code stored in any suitable storage device. Storage devices suitable for use in this manner include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

The preceding description was presented to enable any person skilled in the art to make and use the invention as claimed and is provided in the context of the particular examples discussed above variations of which will be readily apparent to those skilled in the art. Accordingly the claims appended hereto are not intended to be limited by the disclosed embodiments but are to be accorded their widest scope consistent with the principles and features disclosed herein.

