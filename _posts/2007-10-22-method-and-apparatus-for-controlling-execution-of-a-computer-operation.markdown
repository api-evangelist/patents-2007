---

title: Method and apparatus for controlling execution of a computer operation
abstract: Computer operations whose execution would increase usage costs may require use of authorization and notification to prevent unauthorized execution. The computer operations may be designed to execute only if a authorization and notification routines are properly registered. The computer system customer establishes the authorization and notification requirements based on standard application programming interfaces to suit the customer's business practices and links the requirements to the computer operation. The computer operation determines if the authorization and notification are proper. If authorization is granted, the computer operation checks to see that the notification is proper, executes the computer operation, and then executes a notification module to notify the necessary personnel. Both authorization and notification routines return errors that are passed to the user through the computer operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07926101&OS=07926101&RS=07926101
owner: Hewlett-Packard Development Company, L.P.
number: 07926101
owner_city: Houston
owner_country: US
publication_date: 20071022
---
This is a continuation of copending application Ser. No. 10 023 811 filed on Dec. 21 2001 now U.S. Pat. No. 7 287 277 which is hereby incorporated by reference in its entirety herein.

The technical field is the dynamic purchasing of computer processor power and in particular the management and control of capacity on demand purchasing.

The emergence of instant capacity on demand iCOD high end computers has provided corporations enterprises and other users with great flexibility in paying for and purchasing high end multiprocessor computers. A customer can purchase a high end iCOD computer or server with multiple central processing units CPUs yet pay a reduced price by activating only some of the CPUs. The remaining CPUs remain inactive and are not licensed for use until the inactive CPUs are activated. In this way the customer can save money by initially paying a system vendor for only the CPUs that are required at the time of purchase while retaining the ability to instantly activate CPUs in the future. The customer merely needs to activate additional CPUs with system administration commands and to pay additional licensing fees for activating the additional CPUs. The iCOD computer customer can effectively add CPUs to the iCOD system without needing to purchase or install any additional CPUs.

The iCOD computer or server measures the total number of CPUs that are currently on the iCOD computer and the number of CPUs that are currently inactive and periodically reports these measurements back to the system vendor. The system vendor then determines if there are any unlicensed CPUs where the customer has activated iCOD CPUs without paying and notifies the customer that payment is required. The iCOD CPU may be priced at market rate at the time of activation and the iCOD customer is able to easily activate capacity and then pay for the iCOD CPU.

This model of iCOD CPU activation followed by payment creates administrative problems for many customers especially larger and more bureaucratic organizations. The person who activates additional iCOD CPUs is typically either a low level system operator or a system administrator who may work for a different organization than that of the persons or departments that oversee the budgets. The system administrator may also work for a different group than system planners authorized to make decisions on the computer configuration. The system administrator or operator may not even be employed by the same corporation as that of the system architecture planning or purchasing departments because the system administration may have been outsourced. This disconnect between the persons activating additional iCOD CPUs and the persons overseeing or paying for the additional iCOD CPUs frequently results in system administrators activating iCOD CPUs and effectively making a substantial purchase under the iCOD agreement without first seeking approval from the customer s budgetary system architecture or other designated authorizing parties. These authorizing parties moreover are not notified of this purchase until a bill or payment reminder issues from the system vendor which usually occurs well after the system capacity was increased and put into use.

Vendors such as Hewlett Packard currently request that customers designate a system contact to be notified of any system changes such as the activation of additional iCOD CPUs so that someone in the customer s organization is informed of such changes. Even this solution however is far from foolproof because the system contact given to the vendor may in fact be the system administrator or operator particularly if only one system contact is required. Moreover merely notifying the system contact after activation still may prove problematic even if the correct person is notified because the system administrator could still activate an iCOD CPU and effectively make a substantial purchase without prior authorization.

What is disclosed is a method executed on a suitably programmed computing device for regulating execution of a computer operation by a computer operator. The method includes the steps of providing a programming interface for a customer to customize an authorization routine receiving a request to execute a computer operation from a computer operator determining if authorization is required for executing the computer operation seeking authorization from an authorizing party with the authorization routine if authorization is required executing the computer operation if authorization is granted and terminating the computer operation if authorization is denied.

Also disclosed is A method executed on a suitably programmed device for regulating execution of a computer operation by a computer operator. The method includes the steps of receiving and storing an authorization and notification routine that regulates execution of the computer operation wherein the routine may be customized using a programming interface receiving a request to execute a computer operation from a computer operator determining if authorization is required for executing the computer operation seeking authorization from an authorizing party with the authorization routine if authorization is required determining if notification is required for executing the computer operation if notification is required generating a notification executing the computer operation if authorization is granted and terminating the computer operation if authorization is denied wherein the party to be notified will know that the computer operation was executed or terminated.

Further what is disclosed is a customized authorization and notification routine created using a programming interface the routine executed on a suitably programmed computing device and capable of regulating operation of the device. The routine includes receiving a request to execute an operation on the device determining if authorization is required for executing the operation seeking authorization from an authorizing party with the authorization routine if authorization is required determining if notification is required for executing the operation if notification is required generating and providing a notification executing the operation if authorization is granted and the notification was received and terminating the operation if authorization is denied or if the notification was not received wherein the party to be notified will know that the operation was executed or terminated.

A system is disclosed that would give a customer the capability to add either authorization or notification controls or both to a computer operation. The controls may check that all authorization and notification data such as authorizing parties or parties to be notified are specified prior to running the controls. The authorization control may determine whether the computer operation were authorized. The computer operation then executes if authorized and the notification control may notify any parties after the computer operation executes.

How each control is implemented however depends highly on the customer s own internal business controls. Different customers will choose to implement different authorization and notification controls and some customers may choose to implement to omit either the authorization control or the notification control or both. A flexible approach is needed so that different customers can design and customize authorization and notification controls to suit their business needs.

Plug ins which may be implemented as an executable a library function or a script may be used to implement these controls to regulate execution of certain computer operations. illustrates a computer whose operating system includes a computer operation an authorization plug in and a notification plug in . The authorization and notification plug ins are implemented to prevent unauthorized or un notified execution of the computer operation . The computer operation may include computer operation code for a system function and may come from a system vendor e.g. an HP UX command as part of a release of the operating system for the computer where the computer operation code performs the actual system function. The computer operation could perform any system function that the customer or system vendor deems as needing regulation though generally the computer operation that is being regulated would cost the customer additional money or otherwise have a financial consequence if executed.

The computer operation may be developed and distributed to the customer with no plug ins or other controls other than an application programming interface API for communicating with plug ins developed by the customer. The customer can then decide on how to modify the computer operation before internally distributing the computer operation to all of the customer s computers typically the customer will have a plurality of computers. The customer is in fact free to distribute the computer operation without any additional plug ins in which case the computer operation will execute without plug ins at all. However distributing a computer operation without plug ins would basically allow for any system administrator to execute the computer operation without requiring any authorization or notification.

The customer and often the customer s system architecture groups may first modify the computer operation prior to distributing the computer operation to all of the computers . Customers deciding to implement controls over the computer operation may design and develop their own authorization and notification plug ins . The authorization plug in and notification plug in are both registered with the computer operation so that the computer operation will know where to access the authorization and notification plug ins on the computer . The files containing the authorization and notification plug ins would preferably be located in either a system directory for plug ins or in some other dedicated directory. Another possible location would be a directory structure reserved for customer installed operations. The computer operation would be placed in the directories for system functions and the location for the authorization and notification plug ins would be stored in a registry that the computer operation could read. The registry may be located within the computer operation or it may be part of a preference file read by the computer operation .

The authorization and notification plug ins may use certain information such as authorizing party or party to be notified to perform either authorization or notification. The information may be conveyed to the plug ins in the form of parameters although the information may also be conveyed as environment variables. The computer operation may be designed so that parameters may be specified by a system administrator operator or other user of the computer operation where the authorization and notification plug ins would read the parameters required for each plug in. However the computer operation vendor does not know what parameters will be required by the plug ins because the customer and often the customer s system planning or architecture groups rather than the computer operation vendor may design and develop the plug ins. The plug ins may also be designed to not require plug in parameters. Consequently the computer operation may permit generic parameters to be passed through directly to the authorization and notification plug ins . If the computer operation were executed using a UNIX command line for example the computer operation may be designed with an x option so that any text following an x option may automatically be passed to the authorization and notification plug ins as a generic plug in parameter. Multiple x parameters may be passed with one command. A similar field or window may be added if the computer operation were implemented as a graphical user interface GUI .

The computer operation does not parse these plug in parameters other than to separate them from specific computer operation parameters used by the computer operation . Rather the computer operation simply passes the plug in parameters through to the authorization and notification plug ins which look for particular parameter names specific to each plug in. Some parameter names such as persons to be notified may be required and used by both the authorization plug in and the notification plug in . The possibility of a conflict among parameter names is reduced because customers design or at least customize both plug ins prior to use.

The customer may design the specific actions or sequence of actions performed by the authorization and notification plug ins and may tailor these plug ins and their parameters for the customer s business or organizational set up. The authorization plug in and notification plug in may be implemented as either shared library functions that are dynamically linked at runtime or as separate commands including as command scripts. The authorization and notification plug ins are also generally required to adhere to an application programming interface API . This plug in API would typically specify that the plug ins read in generic plug in parameters from the computer operation and would further specify that the plug ins return either a success or failure signal when the plug in terminates. Success or failure signals may be implemented as exit values if the authorization and notification plug ins were C functions or UNIX commands. The API may further require that the authorization and notification plug ins return a data structure for indicating what parameters are missing.

In addition the authorization and notification plug ins may have two modes of operation a check mode and an execute mode. In the check mode the plug in does not execute the substantial plug in function i.e. authorization or notification but checks to see whether the parameters required for the given plug in have been supplied or specified. In the execute mode by contrast the plug in performs or executes the plug in s substantial function i.e. authorization or notification . The plug in then may be run in the check mode prior to running the plug in in the execute mode so that the plug in will be executed with the required parameters.

The authorization and notification plug ins must first be registered with the computer operation before the computer operation will invoke the plug ins . Registration provides the location of the plug ins to the computer operation and places this information in the registry . As noted above the registry may be a separate preference file or the registry may be embodied in the computer operation . The actual registration may be implemented in the computer operation so that one would execute the computer operation with a registration option where one could specify the file locations or path of the plug ins . Alternately the computer operation could be designed to automatically register plug ins found in a default path. Plug in registration could also be implemented as a registration command or command script separate from the computer operation .

Similar commands or options could be used to un register the authorization or notification plug ins in the event one wanted to update or modify the plug ins. However the un registration command itself would require calling the currently registered authorization and notification plug ins . Requiring authorization for un registering the authorization or notification plug ins would prevent a system administrator or operator from replacing the existing authorization or notification plug ins with the administrator s own controls or removing the authorization or notification plug ins altogether.

Execution of the authorization plug in in check mode will be described with respect to . The authorization plug in first determines whether the plug in is being run in check mode or execute mode step . If the authorization plug in were being run in check mode the authorization plug in reads the generic plug in parameters that are passed through the computer operation step . The authorization plug in checks whether all of the required authorization plug in parameters are included in the parameters that were passed from the computer operation step . If all of the required authorization plug in parameters are present the authorization plug in merely terminates with success ending the check mode step . On the other hand if any required parameters are missing the authorization plug in may return an error message and may also return a data structure indicating what parameters are missing step . The error message passes through the computer operation to the user and may include information on missing parameters or correct syntax in order to allow the user to correct the error. The computer operation knows no specifics about the authorization plug in except whether the authorization plug in terminates in success or failure. The computer operation thus passes through any error messages received from the authorization plug in to the user. The authorization plug in then terminates with failure for example by returning an exit value of 1 as is done by some C functions or by a numerical code that indicates failure step .

Once the authorization plug in returns to the computer operation after terminating with failure the computer operation will know that the authorization plug in is missing certain parameters from the termination with failure signal and the returned data structure. The computer operation may display the textual error message that was passed from the authorization plug in . The computer operation may actively prompt the user to enter the missing parameters or may simply terminate after displaying the missing parameters in which case the user would re execute the computer operation . The user of the computer operation is thus apprised of which authorization plug in parameters are missing and can try and enter the proper parameters.

Returning to assuming the authorization plug in has successfully found all plug in parameters required for the authorization plug in the computer operation runs the authorization plug in in execute mode step . It is possible to combine both steps into a full execute mode for the authorization plug in as well.

Returning to the authorization plug in is now run in execute mode. The plug in first determines whether the plug in is being run in check mode or execute mode step . If the authorization plug in is run in execute mode the authorization plug in proceeds to check for authorization to execute the computer operation reading the authorization plug in parameters as necessary step . The customer designs the particular mechanisms for obtaining authorization to suit the customer s needs. One example of obtaining authorization would be to require the user or system administrator to enter a key code parameter that is provided to the user or administrator by the customer s authorizing parties and to deny authorization in the absence of the correct key code parameter. The authorization plug in will display an error message which may be in text format if authorization is denied step the authorization plug in will terminate with failure once the error message is displayed step . Terminating with failure or success will be conveyed to the computer operation instructing the computer operation to either continue or terminate. The error message however will be passed through to the user by the computer operation without modification so that the user i.e. the system operator will know why authorization failed. If the authorization were granted on the other hand the authorization plug in will simply terminate with success and return to the computer operation step .

Returning to assuming authorization was granted the computer operation then proceeds to call the notification plug in in check mode step . The computer operation runs the notification plug in in check mode before executing the computer operation code and in execute mode after executing the computer operation code . Notification takes place after the computer operation code is executed but the computer operation checks that the correct parameters are specified before actually executing the computer operation code . The computer operation passes a flag to the notification plug in indicating which mode the notification plug in is being called in. Checking for parameters prior to execution of the computer operation code ensures that the proper persons and other notification information are specified before execution rather than checking only after the computer operation code is executed.

Referring to the notification plug in first determines whether the notification plug in is being called in check mode or execute mode step . If the notification plug in is called in check mode the notification plug in then reads the parameters that had been specified when the computer operation was first invoked step . The notification plug in first checks the mode flag to see whether the notification plug in is checking for notification plug in parameters or actually performing notification. The plug in will then look for any required notification plug in parameters among the plug in parameters step and will transmit an error message to the computer operation if any required notification plug in parameters are not properly specified step . As with the authorization plug in the computer operation will transmit any error message received from the notification plug in directly to the user. The notification plug in will then terminate with failure and signal this failure to the computer operation step in the same way as the authorization plug in does. As with the authorization plug in the notification plug in may also return a data structure that indicates which parameters are missing. The computer operation may similarly read this data structure and prompt the user for the missing parameters or alternately may simply display an error message and terminate. On the other hand the notification plug in will terminate with success if the proper notification plug in parameters have been specified step .

Returning again to once the notification plug in has been run in check mode the computer operation runs the computer operation code which performs the substantive function of the computer operation step . The computer operation executes the computer operation code because the proper authorization will have been granted and the proper notification plug in parameters will have been provided for notifying one or more parties designated by the customer after executing the computer operation code . The computer operation will return any errors generated by the computer operation code itself but if no errors are present the computer operation will proceed to execute the notification plug in in execute mode step . The error messages from the computer operation code may also be forwarded to the notification plug in in order to notify the appropriate parties of any errors.

Returning to the notification plug in will first check whether the plug in is being run in check mode or execute mode step and if in execute mode the notification plug in will notify the appropriate persons or groups step in the manner that the customer has specified in the notification plug in . The notification plug in like the authorization plug in will return any errors that occur for the computer operation to display so that the user will know whether the notification plug in terminated with success or failure. The notification plug in will then end and return to the computer operation .

Returning again to the computer operation ends once the notification plug in has run in execute mode step . The computer operation code and thus the computer operation presumably has been executed with proper authorization and with proper notification in ways that meet the customer s business or organizational needs.

The customer designs and develops the notification plug in just as the customer designs the authorization plug in . Consequently the customer can tailor the notification plug in to conform to the customer s notification policies or protocols. Some customers for example may designate their computer capacity planning group to be notified while other customers may designate require an accounting group to be notified of any changes. A customer may also designate the authorizing party for notification. The customer may design the notification message that is ultimately transmitted by the notification plug in as well as the means e.g. e mail ftp for conveying the notification. As with the authorization plug in the notification plug in may communicate to the computer operation that the notification plug in terminated with either failure or success and as noted above may also provide a data structure for specifying missing parameters. The notification plug in may also be designed to not require parameters but rather have a party to be notified hard coded into the notification plug in .

If the computer operation had activated an iCOD processor for example the notification plug in might inform a manager that an iCOD processor had been activated and might note that the newly activated processor would cost an additional sum of money. In this way the manager would be aware of changes to the system particularly those changes that have budgetary impact.

The authorization plug in can be implemented in any fashion provided it meets the API requirements for check execute mode data structure error messages and termination as noted above. However in one embodiment the authorization plug in may be synchronized or linked with a license key generation tool so that an authorizing party can generate a key for the computer user to enter as a means of granting authorization. The key may be generated by any number of known license key algorithms including generating a key based on the day date or type of operation or some combination of all three. The authorizing party who is often not a system administrator may run software to generate a license key that would eventually be given to the user of the computer operation . The software can be made as user friendly as necessary depending on the technical skill of the authorizing party.

The computer operation user who often is a system administrator would then enter this license key when executing the computer operation where the license key would be passed to the authorization plug in as one of the required plug in parameters. The authorization plug in would also have access to the license key generation tool and be able to grant or deny permission based on checking the key. Alternately the authorization plug in could run the same algorithm with the same inputs as the license key generation tool in order to verify whether or not the particular license key holder was authorized to execute the computer operation . Similarly the computer operation user could enter a password where the authorization plug in would contact an authorizing authority and determine whether the password matches a required password.

The authorization plug in may also be implemented without using plug in parameters. The authorization plug in may determine the identity of the computer from system identification information and query an authorization server not shown regarding whether execution of the computer operation is authorized for the computer . The authorization plug in would then receive either approval or denial of authorization for the computer operation from the authorization server.

While the invention has been described with reference to the above embodiments it will be appreciated by those of ordinary skill in the art that various modifications can be made to the structure and function of the individual parts of the system without departing from the spirit and scope of the invention as a whole.

