---

title: Embedded device program debug control
abstract: An embedded processor system includes an integrated development environment and an embedded processor operating system. The embedded processor operating system is operable to run on the embedded processor system, and a command queue is operable to receive commands from a debugging module external to the embedded processor system. A command queue processing module is operable to change settings in the embedded processor system in response to commands in the command queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533678&OS=08533678&RS=08533678
owner: Digi International Inc.
number: 08533678
owner_city: Minnetonka
owner_country: US
publication_date: 20070713
---
The invention relates generally to debugging software and more specifically to controlling an embedded device while debugging an embedded device program.

A portion of the disclosure of this patent document contains material to which the claim of copyright protection is made. The copyright owner has no objection to the facsimile reproduction by any person of the patent document or the patent disclosure as it appears in the U.S. Patent and Trademark Office file or records but reserves all other rights whatsoever.

Computerized devices often use similar processors and circuits to perform different tasks relying on the general purpose nature of many processors to provide a relatively inexpensive and fast means to produce a specialized computerized device. Some processors are specifically designed to be embedded in customized applications and include a wide variety of features such as analog and digital inputs and outputs network support and specialized software libraries supporting such features to make software design for such systems relatively easy.

Some such systems are called embedded systems reflecting that a processor or computerized system is embedded in the system to perform a specific task which distinguishes an embedded system from a general purpose computer that usually lacks the software and hardware configured to perform one or more specific tasks in a specific embedded environment. Examples of embedded systems include controllers for industrial processes remote monitoring and sensing systems as well as handheld devices such as cell phones and personal digital assistants. Although some of these devices such as personal digital assistants often include general purpose software execution among their features their construction and configuration resembles that of traditional embedded system devices and so they are often considered embedded systems.

Embedded systems can also often be customized to a greater extent than general purpose computers discarding hardware components and software drivers not used in a specific application of an embedded system. Embedded processor providers typically provide support for a variety of hardware through very robust software packages supporting a variety of different configurations such as USB analog network serial analog to digital digital to analog and other interfaces.

Software designed to execute on embedded systems therefore often use a variety of hardware settings in addition to software configuration settings and other parameters to control operation of certain parts of the program. For example an embedded processor coupled to a network may use hardware settings including an Internet Protocol IP address encryption keys and other network configuration settings to communicate with other computerized systems. Changing these settings can change how the software operates and which software instructions are executed. It is therefore desired to manage such settings while debugging embedded software.

One example embodiment of the invention comprises an embedded processor system including an integrated development environment and an embedded processor system operating system. The operating system is operable to run on the embedded processor system and a command queue is operable to receive commands from a debugging module external to the embedded processor system. A command queue processing module is operable to change settings in the embedded processor in response to commands in the command queue.

In the following detailed description of example embodiments of the invention reference is made to specific example embodiments of the invention by way of drawings and illustrations. These examples are described in sufficient detail to enable those skilled in the art to practice the invention and serve to illustrate how the invention may be applied to various purposes or embodiments. Other embodiments of the invention exist and are within the scope of the invention and logical mechanical electrical and other changes may be made without departing from the subject or scope of the present invention. Features or limitations of various embodiments of the invention described herein however essential to the example embodiments in which they are incorporated do not limit other embodiments of the invention or the invention as a whole and any reference to the invention its elements operation and application do not limit the invention as a whole but serve only to define these example embodiments. The following detailed description does not therefore limit the scope of the invention which is defined only by the appended claims.

The invention provides in one example embodiment an embedded processor system including an integrated development environment and an embedded processor system operating system. The operating system is operable to run on the embedded processor system and a command queue is operable to receive commands from a debugging module external to the embedded processor system. A command queue processing module is operable to change settings in the embedded processor in response to commands in the command queue. Embedded systems including processors and associated hardware configured to perform a specific function are used to make a variety of common devices including medical devices aviation instrumentation home automation products communications devices such as routers handheld computers such as personal digital assistants and cell phones video game systems industrial control systems automotive computers and a wide variety of other such computerized devices.

Although many of these systems could be easily built using the same embedded processor the software and operating system configuration of the system and the hardware around the processor will likely differ from application to application. A router for example will likely have several wired network ports configured with IP addresses and other configuration settings but will not have wireless network capability or wireless encryption settings. An industrial controller might have a variety of analog to digital converter inputs to digitize analog signals being sensed and provide control output via a digital to analog converter but may not include any network functionality or USB ports.

Design of embedded systems such as these typically involves use of a prototype or evaluation circuit board having the desired hardware incorporated into the circuit along with an integrated development environment IDE including software support for a wide variety of hardware devices that are supported by the embedded processor provider. The IDE typically includes a source code editor and a compiler as well as a variety of libraries of functions to provide easier programmer interface to various hardware elements such as networking USB and other interfaces. The program segments are sometimes provided as part of what is known as a software development kit SDK which can include application programming interface API dynamic linked library DLL and other support for referencing external software or system services from a computer program. This makes it easier for a programmer to quickly and efficiently write software that uses a variety of different hardware components without having to learn or program common functions of the various hardware components.

Many of the settings and configuration options in an embedded system are stored in nonvolatile storage such as a hard disk drive or flash memory and are loaded upon program execution. Examples include the IP address of a network interface wireless network settings such as network ID and encryption settings interrupt or direct memory access DMA settings operating system configuration controller coefficients and other such settings. These settings affect operation of the embedded system and different settings can result in different program code being executed in a different way. Debugging program code on an embedded system is therefore somewhat difficult in that these settings cannot be easily controlled during execution except by using tools external to the Integrated Development Environment such as a telnet session to access the embedded system and change settings between debugging runs.

Tools to change such settings are therefore not usually available during a typical embedded controller software debug session and the programmer is therefore not able to fully control the embedded device during debug. In some debugging scenarios altering one or more of these settings to alter program operation would be useful to locate and fix a program bug. Although these settings can be changed in some examples by statically specifying settings such as the embedded device IP address some instructions will be bypassed or executed differently as a result potentially hiding bugs that remain in the production code. Also specifying settings in software code would not allow an end user the ability to configure these settings making the embedded system less useful or adaptable to different environments.

These and other problems are addressed in some embodiments of the invention by use of a command queue which is exposed to the Integrated Development Environment via the memory of the embedded controller while debugging an executing program on the remote embedded system. When the embedded system boots it acts on the commands that the Integrated Development Environment has placed in the queue using special code that is outside the normal executed code that is being debugged. Because the settings are configured in the embedded device during operation but external to the code being debugged the embedded system executes the same code path as would be executed during normal operation such as where the embedded system uses a particular configuration set stored in nonvolatile memory.

The programmer using the Integrated Development Environment therefore has the ability to modify the operation of the embedded system by changing the various settings via the command queue without modifying either the firmware or the program being debugged in the embedded system. The normal program execution path is followed and the developer does not have to leave the Integrated Development Environment such as to initiate a telnet session.

The command queue parses debug commands specifying various settings for the embedded system and enables the developer to pass the commands to an embedded system external to the Integrated Development Environment s system. The developer can therefore initiate board operation and program execution normally and can do normal setup break register and other functions during debug. There is no need for the developer to leave the Integrated Development Environment during debug to set or reconfigure the various settings enabling easier debugging of the embedded system. The Integrated Development Environment in a further embodiment is operable to store various settings and to use the stored configurations for reboots and retrys during debug as well as for board verification and test.

Command queue instructions include in various embodiments not only configuration or other settings but include other debugging commands such as rerouting an input output stream through the command queue so that a debug session can readily access the data stream. Any other commands that may help with the debugging process may be utilized in further embodiments.

This approach has the advantage that the Integrated Development Environment is more user friendly and the user does not need to leave the Integrated Development Environment to make configuration changes or choices while debugging software on the embedded system. The execution path of the software on the embedded system remains the same as it would during normal operation eliminating the risks involved with changing the behavior of the firmware or in hard coding configuration settings. Because the same firmware can be used during debugging and actual program execution risks associated with managing different versions of firmware are also reduced.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement that achieve the same purpose structure or function may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the example embodiments of the invention described herein. It is intended that this invention be limited only by the claims and the full scope of equivalents thereof.

