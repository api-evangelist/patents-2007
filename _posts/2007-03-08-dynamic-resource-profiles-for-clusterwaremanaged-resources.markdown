---

title: Dynamic resource profiles for clusterware-managed resources
abstract: Allowing for resource attributes that may change dynamically while the resource is in use, provides for dynamic changes to the manner in which such resources are managed. Management of dynamic resource attributes by clusterware involves new entry points to clusterware agent modules, through which resource-specific user-specified instructions for discovering new values for resource attributes, and for performing a user-specified action in response to the new attribute values, are invoked. A clusterware policy manager may know ahead of time that a particular resource has dynamic attributes or may be notified when a resource's dynamic attribute has changed and, periodically or in response to the notification, request that the agent invoke the particular resource-specific instructions for discovering new values for attributes for the particular resource and/or for performing a user-specified action in response to the new attribute values. During the majority of this process, the resource remains available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209417&OS=08209417&RS=08209417
owner: Oracle International Corporation
number: 08209417
owner_city: Redwood Shores
owner_country: US
publication_date: 20070308
---
The present invention relates generally to data management and more specifically to techniques for managing clusterware managed resources having dynamic attributes.

A clustered computing system is a collection of interconnected computing elements that provide processing to a set of client applications and to a large extent can be viewed as though the computing elements are a single computer. Each of the computing elements is referred to as a node. A node may be a computer interconnected to other computers or a server blade interconnected to other server blades in a grid. A group of nodes in a clustered computing system that have shared access to storage e.g. have shared disk access to a set of disk drives or other non volatile storage and that are connected via interconnects is referred to herein as a cluster.

A clustered computing system is used to host clustered servers. Resources from multiple nodes in a clustered computing system can be allocated to running a server s software. Each allocation of the resources of a particular node for the server is referred to herein as a server instance or simply an instance. A database server can be clustered where the server instances may be collectively referred to as a cluster. Each instance of a database server facilitates access to the same database in which the integrity of the data is managed by a global lock manager. The collection of server instances and the resources used by the servers are typically managed by a clusterware software application.

Resources managed by clusterware can have certain attributes that may need to be changed at any point in time and where values for such attributes may not be known at the time of configuration of the clusterware. If an attribute of an online resource needs to be modified the system administrator has to stop the resource modify the particular attribute and start the resource again. Thus this approach involves stopping the resource and all the other resources that may depend on the resource which may potentially lead to relatively long periods of outage time for numerous resources. Therefore this approach negates the objective of a high availability system to always provide availability of the cluster resources that the clusterware manages.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

Allowing for dynamic resource attributes i.e. resource attributes that may change dynamically while the resource is in use provides for dynamic changes to the manner in which such resources are managed. For example cluster resources having dynamic attributes when such attributes are dynamically changed may trigger clusterware that is managing such resources to begin managing the resources differently i.e. according to a different resource management behavior.

Management of dynamic resource attributes by clusterware involves a new entry point to clusterware agent modules through which resource specific user specified instructions for discovering new values for resource attributes are invoked. For example a clusterware policy manager may know ahead of time that a particular resource has dynamic attributes or may be notified when a resource s dynamic attribute has changed and periodically or in response to the notification the policy manager requests that the agent invoke the particular resource specific instructions for discovering new values for one or more resource attributes for the particular resource.

Management of dynamic resource attributes by clusterware involves a second new entry point to clusterware agent modules through which resource specific user specified instructions for performing a user specified action in response to the new attribute value are invoked. Hence in response to a particular resource attribute being changed to a new value a user can specify any type of action in response to the attribute value change.

These new clusterware agent entry points enable dynamic resource attributes discovery of attribute value changes and responsive user specified actions. During the majority of this process the resource does not need to be stopped and remains online.

The techniques described herein allow for greater flexibility in defining and configuring resources in that a resource can have dynamic attributes whose values can be changed and discovered at any time. Consequently a system administrator need not be burdened with monitoring and changing attribute values that are changing dynamically at run time so these techniques help save valuable manpower that may otherwise be needed to constantly monitor clusterware and the applications the clusterware monitors. Furthermore these techniques provide better fault tolerance and ensure continuous availability for resources that have dynamically changing attributes.

As discussed clusterware is software that allows clusters of networked computers to operate or be controlled as if they are one where one function of clusterware is to manage applications running on the cluster nodes including the cluster resources used by the various applications running on the cluster nodes and possibly including the applications themselves. Resources depict any number or type of manageable entities either hardware or software that are utilized by clusterware and or by applications being managed by clusterware . For non limiting examples resources may include a virtual IP address a network card a port a connection a physical disk a database server an application server an application a web server etc. Each resource or each type of resource is associated with a corresponding resource profile which defines and possibly maintains values for one or more resource specific attributes and one or more policy attributes . For non limiting examples a virtual IP address resource may have resource specific attributes such as a corresponding IP address an interface name and a subnet address and a database resource may have resource specific attributes such as resource name resource type database unique name and timeout value.

A non limiting example of a resource profile for a virtual IP address resource type VIP named ora.vip is as follows 

Resources discoverable dynamic attributes can have a time period associated with it indicating how long that particular attribute value is valid. Once that time expires the policy manager needs to rediscover the attribute value. For example consider the following attribute fooattribute foovalue 20D where identifies the fooattribute as a dynamic attribute. In this example attribute declaration the first parameter represents the default value for that attribute and the second parameter indicates how long an attribute value is valid once it has been initialized i.e. an expire time i.e. when the value of that attribute should be rediscovered. If a default value is absent the clusterware will discover the value of fooattribute upon creation of the resource. After that the clusterware can use the expire time as a heuristic for determining when to rediscover that particular attribute.

To assist the clusterware in managing resources the clusterware comprises a policy manager . For example policy manager may be implemented as a daemon process running in clusterware . However the policy manager architecture with which embodiments of the invention are implemented may vary from implementation to implementation. Policy manager manages each resource based on policy attributes specified in a corresponding resource profile . Stated otherwise policy manager makes decisions for the cluster regarding cluster resources such as what to do when a node crashes. For a non limiting example a resource policy attribute associated with a particular type of resource such as a database server may specify that at least one instance of the database server must always run in the cluster and that the database server instances are configured to operate in a failover manner in the event of a failure of node on which a server is executing.

Generally the policy attributes of resource profile provide a source of information for policy manager to use in making decisions about a corresponding resource in the context of resource management goals of clusterware e.g. a high availability goal of always having cluster resources available for certain numbers or types of applications to execute and operate correctly on the cluster. For example the policy attributes may characterize one or more rules that the policy manager evaluates in response to discovering a resource attribute change via discovery entry point in response to which the policy manager can cause performance of a certain action associated with clusterware management of resources . Any action associated with the clusterware management of resources is in addition to any user specified action performed via attribute changed entry point in response to discovering a resource attribute change via discovery entry point. The policy manager does not understand the different specific resources in depth so the policy manager makes decisions based on the policy attributes at a relatively abstract level. For example the policy manager does not know how to communicate with various applications running on the cluster and therefore using cluster resources such as a database server an application server and a web server.

Hence clusterware further comprises one or more agent . Each agent is specific to a particular type of resource managed by the clusterware i.e. is resource type specific. Thus each agent is configured to assist with managing a corresponding particular type of resource. For example each different type of resource from resources is associated with a different corresponding agent . Each agent generally comprises two different sets of instructions a instructions for clusterware management of resources generally and b user specified instructions for management of particular resources specifically. It is possible that each different type of resource is different and therefore has different operational behavior. Thus each agent includes some resource specific user specified code about how to manage the resource such as how to start the resource how to stop the resource and how to check the resource state. These types of actions are usually specific to the type of resource and vary from resource type to resource type.

Consequently agent comprises programmatic entry points which provide programmatic means e.g. application programming interfaces API s for invoking user specific code for managing and otherwise affecting the corresponding resource. For example each of the following actions a start the resource b stop the resource and c check the resource state are associated with corresponding entry points in agent at which the user specified instructions associated with the particular action can be invoked to cause performance of the particular action. In this context the user that specifies the user specified code for performing various actions associated with a particular resource may be for non limiting examples a developer who developed the particular resource or a system administrator who is familiar with how the particular resource operates and is to be managed. Agent has access to resource profile for accessing the resource specific attributes associated therewith for use in performing corresponding actions in managing corresponding resources .

As mentioned each agent manages the corresponding resources through user plugged in code called as entry points. For example if an entity decides to start a resource the entity tells the resource type specific agent to start the resource and then the agent invokes the START entry point which is implemented by users for that specific resource . To develop agents users simply have to implement their entry points and link with an AgentFramework library provided by clusterware .

For example if a user wants to manage an IP address using clusterware the user develops an agent which manages the IP address using a file similar to the following example which includes start stop monitor and discovery entry points 

Agents for different resource types are developed by writing the code for the entry points and linking the entry points with a certain clusterware library. Thus agents contains two parts clusterware library plus user code in form of entry points . The policy manager decides when to call these entry points. Thus whenever an attribute needs to be discovered policy manager calls the discovery entry point through an appropriate resource type specific agent .

According to an embodiment agent comprises a discovery entry point. Discovery is an entry point for invoking resource type specific code which when invoked executes to discover the current value for one or more attributes associated with a particular resource type. For a non limiting example a user develops a set of instructions which when executed cause performance of one or more operations for discovering a new IP address for a virtual IP address resource. Through a programmatic interface the user inserts or references the set of discovery instructions within the agent so that the instructions are invokable at the discovery programmatic entry point of agent . Because the nature and behavior of resources vary from resource type to resource type what operations need to be performed to discover a particular resource s new attribute value will also likely vary from resource type to resource type. Hence the discovery entry point effectively extends the agent functionality to include the capability to invoke resource type specific instructions for discovering a change to the value of a resource s attribute.

Dynamic resource attributes may change in multiple scenarios as follows. With a manual intervention for example a system administrator may change an attribute of a resource e.g. a database s uniqueName attribute . The agent can inform the policy manager about the change through the discovery entry point. With a semi automatic resource attribute change for example at the time of initial configuration of the clusterware certain attributes of a resource may not have values set. The policy manager notices that certain attribute values are not set and starts a process to request the agent to query the values of the particular attributes to determine if the values are now set and to return such values. With an automatic resource attribute change for example an attribute value may be invalidated after a certain time interval. Therefore the attribute value needs to be queried as a result of the invalidation. For example the agent may inform the policy manager of the expiration of a lease for a certain attribute and the policy manager in turn requests the agent query the new value of the certain attribute to ensure that the policy manager is aware of the most current attribute information. With scheduled resource attribute discovery discoverable attributes can have an associated schedule with which users can specify specific intervals of time when an attribute value needs to be discovered. For example a command such as or similar to the one that follows could be used to specify an attribute discovery schedule fooAttribute defaultValue 6 AM 7 PM . The foregoing ways in which a dynamic resource attribute may change i.e. manual semi automatic and automatic and or be scheduled for discovery are resource attribute discovery triggers because each could trigger directly or indirectly execution of a process for discovering the value of a dynamic attribute of a resource as described herein.

A dynamic resource refers to a resource having one or more attributes that are dynamic in the sense that the value for each of the one or more attributes may change. Such changes may occur at runtime when the resource is in use or otherwise. The techniques described herein enable a resource to be a dynamic resource. According to an embodiment syntactic means are provided to identify a particular resource as being a dynamic resource. For example the name of a dynamic resource may be preceded by a certain character i.e. a syntactic identifier such as a or in a corresponding resource profile thereby indicating that at least one dynamic attribute is associated with the particular resource. Based on the techniques described herein identifying a resource as a dynamic resource effectively identifies the resource as having one or more discoverable attributes whereby the agent can call the discovery entry point for that specific resource to discover the appropriate value for discoverable attributes by executing the corresponding user provided discovery entry point code.

Generally who or what needs to be notified when a resource attribute changes depends on the nature and type of attribute that changed. For example in addition to the agent the resource itself may need to know and or other resources may need to know such as resources that are dependent on the changed resource. According to an embodiment agent comprises an attribute changed entry point. Attribute changed is an entry point for invoking resource type specific code which when invoked executes to perform a user specified action in response to a change to a change in value for one or more attributes associated with a particular resource type. For a non limiting example a user develops a set of instructions which when executed cause performance of essentially any action in response to the change in resource attribute value. Through a programmatic interface the user inserts or references the set of resource attribute changed instructions within the agent so that the instructions are invokable at the attribute changed programmatic entry point of agent . Because the nature and behavior of resources vary from resource type to resource type and the type of action desired in response to a resource attribute change is relatively unlimited what operations need to be performed in response to a particular resource s changed attribute value will also likely vary from resource type to resource type and possibly from resource attribute to resource attribute. Hence the attribute changed entry point effectively extends the agent functionality to include the capability to invoke resource type specific instructions for performing one or more user defined action in response to discovering a change to the value of a resource s attribute.

Following is example pseudo code which shows usage of the discovery entry point i.e. Discovery and the attribute changed i.e. ResAttrModified entry point as well as Start Stop and Check entry points 

The foregoing example implementation of the discovery entry point utilizes a switch command to discover the values for the attributes Attr1 and Attr2 via functions discover attr1 and discover attr2 respectively. These functions comprise the resource type specific user defined instructions for discovering the values for the respective resource attributes however is necessary for the particular resource type. A call to the discovery entry point would need to include any input parameters and types that may be specified in the function definition and or switch command and the functions would return any return values and types that are specified if applicable.

The foregoing example implementation of the attribute changed entry point ResAttrModified utilizes a switch command to perform certain actions in response to a new attribute value attributeValue for a particular attribute attributeName . For attribute Attr1 the responsive action is to send a notification to clientx with a payload comprising the attributeName to notify the client that the particular named attribute has changed. For attribute Attr2 the responsive action is to tune the resource with a payload comprising the attributeName and the current corresponding attributeValue . The send notification to client and TuneResource functions comprise the resource type specific user defined instructions for performing certain actions in response to a new attribute value based on particular users desires for the particular resource type. Similarly to the discovery entry point a call to the ResAttrModified functions would need to include any input parameters and types that may be specified in the function definition and or switch command and the functions would return any return values and types that are specified if applicable.

At block cause a call to a first set of one or more instructions which when executed in response to the call cause performance of one or more operations for discovering a new value of a particular attribute of a particular resource managed by a clusterware application. For example policy manager of clusterware requests agent of clusterware invoke the resource type specific user specified instructions associated with discovery entry point which performs whatever operations are necessary to determine the current value of the particular attribute of the particular resource. Hence the discovery entry point provides for discoverable resource attribute values which can change at any time including at runtime.

Any number of events could trigger causing a call to the discovery entry point. For example if an attribute value is not be set at clusterware configuration time the policy manager is aware that a value is needed for that attribute e.g. via the resource profile so the policy manager periodically polls or periodically causes the agent to poll the discovery entry point to discover the attribute value. For another example a notification mechanism within the clustered computing system publishes or otherwise notifies the clusterware that a change has been made to an attribute value where such may be made externally and manually by a system administrator or internally and automatically by the cluster system and where such notification is passed to the policy manager of the clusterware . Thus in response to the notification the policy manager causes invocation of the discovery entry point of agent to discover the new attribute value. According to an embodiment certain events that are to trigger invocation of the discovery entry point are specified in the resource profile associated with a particular type of resource so that the policy manager and agent can respond to instances of such certain events to discover a resource attribute s current value.

In some scenarios a change to an attribute s value may be temporary whereby the attribute returns to its configured value for example upon completion of an operation using the resource upon inactivating the resource in response to a change to another interdependent resource and or resource attribute and the like. In such a scenario the new attribute value is not stored persistently in non volatile memory rather the new attribute value is maintained in volatile memory for some length of time and is flushed from this memory at some point in time. However according to an embodiment an attribute s new value is persistently stored in non volatile memory and therefore is made relatively permanent i.e. until the new value is overwritten in non volatile memory by another new value. For example in response to discovering a change to a resource attribute value via the discovery entry point mechanism policy manager may update the attribute value defined in resource specific attribute of resource profile and store the resource profile persistently in a cluster configuration data structure in non volatile storage repository. Thus attribute value changes are tolerant of node failures reboots and can survive across cluster transitions. For example when nodes in the cluster are rebooted such as in response to a failure clusterware should restore the discovered attribute value to the value being used just prior to the reboot.

At block one or more resource policies associated with the particular resource are evaluated based on the new value of the particular attribute and a responsive action is caused to be performed if required by the one or more resource policies. For example policy manager of clusterware evaluates policy attributes of resource profile to determine what to do in view of the newly changed value for the particular attribute. For example the policy attributes of resource profile for resource a database server may specify that an instance of the database server must always be running on at least one node in the cluster and that if a node fails then the database server executing on that node should failover to another node. Thus if an attribute of the database server indicates that the instance on Node A is down e.g. the attribute changes from active to inactive then the policy manager performs whatever operations are necessary to transfer sessions with the database server from Node A to Node B. For example database and virtual IP address resources of Node A may be transferred over to Node B so that sessions with the database do not experience down time in consideration of high availability goals of clusterware . Any number and type of resource management policies associated with clusterware may be implemented in response to changes in resource attribute values through use of at least policy attribute s specified in resource profile for a particular resource type with evaluation of such policy attributes by policy manager and performance of responsive action s thereto.

At block cause a call to a second set of one or more instructions which when executed in response to the call cause performance of a certain action in response to the new value of the particular attribute of the particular resource managed by the clusterware application where the new value was discovered via block . For example policy manager of clusterware requests agent of clusterware invoke the resource type specific user specified instructions associated with attribute changed entry point which performs whatever operations are necessary perform whatever action is represented by the user specified instructions in response to the change in value of the particular attribute of the particular resource. Hence the attribute changed entry point provides for any responsive actions to resource attribute values which change at any time including at runtime. Furthermore the attribute changed entry point may include numerous steps for non limiting examples executing a script issuing a UNIX command or publishing an event.

Assume each clusterware managed resource is configured with a resource profile with the attributes required to define the resource and the resource s high availability HA requirements. However the attributes need not be populated at clusterware configuration time. For example consider a Database Resource whose profile will consist of a list of attribute value pairs 

The attributes a b and d may be available at configuration time but the value of the attribute Database Unique Name is constantly changing or dynamic in nature. Thus the attributes a b and d are populated by the policy manager at clusterware configuration time.

The individual agent that is monitoring the particular Database Resource can invoke the discovery entry point to query the value of the Database Unique Name attribute. Once the policy manager has discovered the value of the Database Unique Name attribute through the discovery entry point the policy manager invokes the attribute changed entry point for the agent to inform the administrators users about the change to the Database Unique Name attribute. The attribute changed entry point may cause a script to be executed or an event to be published to let the users and interested parties know about the change for the Database Unique Name attribute. This approach and example allows the resource profile of a clusterware resource to be updated at any time without stopping the resource and also informs the interested parties about the change.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

