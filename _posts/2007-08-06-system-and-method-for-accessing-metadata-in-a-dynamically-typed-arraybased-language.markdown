---

title: System and method for accessing meta-data in a dynamically typed array-based language
abstract: A class definition syntax that leverages the array and math-oriented nature of a dynamically typed array-based programming language is discussed. Some embodiments of the present invention provides a mechanism for using meta-data to define a class implemented in the dynamically typed array-based programming language. The meta-data provide an easy way to provide class definitions and allow a user to access the class definitions from objects. The meta-data also support extension of class definitions without introducing backward incompatibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09395963&OS=09395963&RS=09395963
owner: The MathWorks, Inc.
number: 09395963
owner_city: Natick
owner_country: US
publication_date: 20070806
---
This application is a continuation of a pending application U.S. application Ser. No. 11 488 428 filed Jul. 17 2006 and accordingly claims priority to and the benefit of said applications. The disclosure of said applications is hereby incorporated by reference in its entirety.

The illustrative embodiment of the present invention relates generally to meta data for an array based language and more particularly to a mechanism for providing class definitions using meta data.

Many programming languages including graphical programming languages textual programming languages and dynamically typed array based languages such as MATLAB from The MathWorks Inc. of Natick Mass. provide support for classes and object oriented programming. Array based languages such as programming language used in Microsoft Excel or the MATLAB programming environment are a natural choice to solve many different mathematical and scientific computing problems. Object oriented programming languages support the concept of inheritance which allows new classes to be derived from existing classes. Providing object oriented support in a dynamically typed array based language supplies programmers with powerful tools for solving technical problems.

In existing programming languages such as the JAVA programming language meta data is used to describe a class created within the JAVA programming language. In JAVA and in other existing languages language syntax exists to create and manipulate instances of classes known as objects. The JAVA language processor can only have programs create and manipulate instances of classes defined in the JAVA language. The Microsoft.NET Common Language Runtime CLR language processor can define meta data that is used to describe classes defined in many different programming languages. However code in each language must be compiled by a specialized compiler that produces CLR meta data and the generated code by the specialized compiler has to create and manipulate objects according to very specific CLR requirements. Hence a JAVA program cannot directly create and manipulate a CLR defined class and vice versa. In the aforementioned language processors meta data classes are primarily used to describe a class to code that needs information about the class at runtime. For example a graphical user interface design tool may be able to examine meta data for many graphical component classes and allow a user to choose specific controls to place in a dialog box. The aforementioned language processors require that objects conform to a common memory management and memory layout model. Meta data are not used to describe how a class stores data because all classes must use essentially the same system for storing data. This means that it is not possible for objects belonging to different classes to use different systems and mechanisms for storing data. If a class needs to store data in a different way then it must provide a special programming interface to access that data instead of simply using a field or property in the class. Moreover the aforementioned JAVA programming language and CLR like many other existing programming languages do not provide a mechanism for extending the meta data classes and specifying that a particular class uses meta data classes different from the default meta data classes. For example all JAVA classes are represented by the JAVA meta data class called java.lang.Class. There is no way to extend this class add additional data or customized properties and then specify that a particular JAVA class should use this extended meta data class. Furthermore existing languages do not define a direct correspondence between class definition syntax and meta data that would enable a class definition to specify values for attributes defined in the extended meta data classes.

Some of the illustrative embodiments of the present invention provide a class definition syntax that leverages the array and math oriented nature of a dynamically typed array based programming language. The present invention provides a mechanism for using meta data to describe a class implemented in the dynamically typed array based programming language. The class definition syntax and meta data also support extension of class definitions without introducing backward incompatibility.

In one embodiment of the present invention a method of defining classes in a computing environment supporting a dynamically typed array based programming language is provided. The method includes obtaining first meta data for providing a class definition using the dynamically typed array based programming language and defining a class using the first meta data. In one aspect of the present invention the first meta data may be a user defined subclass of second meta data. The first meta data may describe an attribute for a class a method a property or an event. Moreover the first meta data may be a meta class. In another aspect of the present invention the class definition includes one or more attributes each of the one or more attributes has a name and corresponds to a property with the same name in the first meta class.

In another embodiment of the present invention a method of accessing data of an object is provided. The method includes obtaining an object that is instantiated from a class the class is associated with a plurality of meta data and accessing a data value of the object via one of the plurality of meta data. In one aspect of the present invention the class is defined in a dynamically typed array based programming environment.

In yet another embodiment of the present invention a method of processing a class created by a programming language is provided. The method includes obtaining a plurality of meta data associated with the class and creating a compiled version of the class wherein the compiled version is embedded with the plurality of meta data. In one aspect of the present invention the programming language is a dynamically typed array based programming language. In another embodiment of the present invention the method further includes creating an instance of the class and accessing a data value of the instance via at least one of the plurality of meta data.

In still another embodiment of the present invention a system for defining classes is provided. The system includes a programming language that is used to implement a class wherein the class is implemented using one or more attributes wherein each attribute corresponds to a property of a meta class that is associated with the class. In one aspect of the present invention the programming language is a dynamically typed array based programming language. In a further aspect of the present invention the system further includes a language processor that processes the programming language wherein the language processor allows the class to be defined using meta data.

In yet another embodiment of the present invention a medium holding computer executable instructions for defining classes in a computing environment supporting a programming language is provided where the instructions include instructions for obtaining first meta data for providing a class definition using the dynamically typed array based programming language and defining a class using the first meta data.

In still another embodiment of the present invention a medium holding computer executable instructions for accessing an object is provided where the instructions include instructions for obtaining an object that is instantiated from a class the class is associated with a plurality of meta data and accessing a data value of the object via one of the plurality of meta data.

In yet another embodiment of the present invention a medium holding computer executable instructions for processing a class created by a programming language is provided where the instructions include instructions for obtaining a plurality of meta data associated with the class and creating a compiled version of the class wherein the compiled version is embedded with the plurality of meta data.

In a further aspect of the present invention a method of defining classes in a distributed computing environment supporting a dynamically typed array based language is provided. The method includes providing a language processor for a dynamically typed array based language on a second computing device the language processor supporting the use of at least one meta data during class definitions establishing a communication channel between a first computing device and the second computing device over a network entering commands to define a class from the first computing device using said at least one meta data supported by the language processor and transmitting the commands over the communication channel to the second computing device.

Some embodiments of the present invention provide a method and system for providing meta data to define a class implemented in a dynamically typed array based programming language. A compiled class includes embedded meta data that is used to access objects instantiated from the class. The use of extensible meta data and extensible syntax for specifying class definition attributes can support extension of class definitions without introducing backward incompatibility.

For the purposes of illustration a number of the examples contained herein are discussed with reference to MATLAB a dynamically typed array based programming language from The MathWorks Inc. of Natick Mass. It should be appreciated that MATLAB has been chosen as a singular example of a dynamically typed array based programming language and the invention should not be interpreted as being restricted solely to MATLAB . Likewise references made herein to MATLAB should be understood to also include other dynamically typed array based languages. It should also be appreciated that the use of set notation in the present invention as discussed herein is applicable to other textual and graphical programming languages such as the Unified Modeling Language UML and the System Modeling Language SysML in addition to being applicable to dynamically typed array based programming languages.

The dynamically typed array based programming environment includes a language processor capable of processing program code written in a dynamically typed array based language. Language processor can be but is not limited to a compiler an interpreter a virtual machine or other types of execution engine or a combination of some or all of the above. The language processor supports the use of an element wise attribute for methods defined in a class that specifies operations to be carried out on all elements in an array and set notation in class definitions that facilitates class inheritance. The element wise attribute and set notation are discussed in further detail below. The dynamically typed array based programming environment may also include previously defined base classes and which may be referenced by a class designer using the set notation of the present invention to derive new classes. The class designer may interact with the dynamically typed array based programming environment via a display that is in communication with the computing device .

Those skilled in the art will recognize that the illustrative embodiment of the present invention may be implemented using other architectures than that shown in . For example one such alternate implementation of the illustrative embodiment may be implemented in a distributed architecture such as that shown in . A class designer accesses a first computing device and an associated display device . The first computing device communicates over a network with a second computing device . The second computing device hosts a dynamically typed array based programming environment . The dynamically typed array based programming environment includes a language processor . The class designer enters commands on the first computing device that are transmitted to the second computing device for execution. The results of the execution of the class designer s commands are then transmitted over the network to the first computing device where they are displayed for the user on the display device . The second computing device and other components in the distributed architecture may be virtual components. The network may be the Internet a local area network LAN a wide area network WAN a wireless network an intranet an extranet or some other type of network. It will be appreciated by those skilled in the art that other distributed and parallel architectures enabling the execution of the invention described herein are also within the scope of the invention.

Class designers frequently wish to define one class in terms of another because it is simpler to define a new class in terms of an existing class and simpler to learn how to use such a new class if there is already familiarity with the existing class. The illustrative embodiment of the present invention allows a class designer to use set notation to create a new class where the new class is referred to as a subclass of the first class and the first class is referred to as a superclass. The use of mathematical set notation allows the class designer to recognize that the subclass defines a set of class instances that represent a subset of the superset of class instances defined by the superclass.

Set notation may be used to create a new subclass from a single class or to indicate that a derived class multiply inherits from two or more base classes. In conventional systems supporting multiple inheritance such as C See for example Bjarne Stroustrup s The C Programming Language 3Edition a class A may inherit from a class B multiple times. This conventional model of inheritance is not based on sets because a member of the set defined by class B cannot be a member of the set defined by class A multiple times. The C model leads to confusion about how to refer to the properties and methods of each separate instance of class A that is embedded in class B. In contrast the illustrative embodiment of the present invention provides an inheritance model based on sets that defines multiple inheritance such that if a class C inherits from classes A and B then C defines a subset of the union of A and B. The use of set notation provides that if class B is defined as subclass of A and A this is equivalent to defining a subset of the set union of A and A which is A. There is no confusion created by a subclass having multiple copies of a base class because a subclass cannot have multiple copies of a base class.

While a class defines a set of objects or potential objects with certain common features such as method and property names a subclass defines a subset of objects sharing some additional features such as additional property names. The subclass is often a more specialized form of the superclass. For example consider a Rectangle class that is specified in terms of width and height dimensions. For a particular application it may be more convenient to specify rectangles using opposite corners rather than one corner and width height dimensions. With the use of the subclass a class designer does not have to redefine the entire class including the methods that don t deal with corners . Instead the class designer may create a subclass of the Rectangle class that supports four corners as follows 

The illustrative embodiment of the present invention also allows for mathematical set notation to be used to specify that a derived class multiply inherits from two or more base classes. Just as one can take the union and intersection of sets one can talk about the union and intersection of classes. A class definition can use an equivalence relationship to give a name to a union or intersection of other classes. For example suppose a number of functions require their inputs to be either single or double. Rather than having expressions like 

It will be appreciated that the examples mentioned above are illustrations of a small portion of the type of set operations that may be triggered through the use of set notation by the illustrative embodiment of the present invention. For example a sub class may be defined using set notation so that it inherits properties from a set made of multiple other sets. Likewise a class being defined using the set notation of the present invention may be a subclass that inherits only interface methods of a class without inheriting the implementation of the methods. Similarly the properties that are inherited by the subclass may be limited by constraints referenced by the set notation.

The illustrative embodiment of the present invention may also be extended to other textual and graphical programming languages in addition to dynamically typed array based programming languages. Other textual or graphical programming languages include UML SysML Modelica Dymola VHDL and VHDL AMS as well as SIMULINK from The MathWorks Inc. of Natick Mass. illustrate an example of the use of the set notation of the present invention in a graphical programming language.

The blocks in a graphical modeling library may be thought of as a class instances of which are instantiated when placed in a graphical model. A graphical modeling library may include a template block for a configurable subsystem template. The configurable subsystem template block may link to other blocks in the graphical modeling library. Upon selection of linked blocks the linked blocks will be used in place of the template block in the graphical model. The definition of the configurable subsystem template block in the library may include set notation indicating which blocks the configurable subsystem can be linked to by means of reference to other subsystem templates.

By way of example of the use of set notation for class definition in a graphical modeling language depicts a class electronic in the model library ClassElectronic that includes a battery block a PNP BJT block an NPN BJT block a MOSFET block and a Resistor Block . depicts a class electrical that includes a battery block a resistor block an inductor block and a capacitor block . The elements in the class electronic and class electrical may be instantiated from another class or directly imported. For example the Resistor Block may be an element defined elsewhere that is referenced by the class electronic and class electrical . When the intersection of the two classes is determined the resistor is identified to be one and the same element because the blocks in the different sets reference the same underlying element. Alternately a pure syntactic check can be done by considering an element to be the same if it has the same name in the two sets that are being intersected. Other methods may also be applied to identify identical elements such as checking whether the interface and or properties are identical. depicts a configurable subsystem template block that uses set notation and to reference the two classes depicted in . As a result of the use of the set notation the instantiated configurable subsystem block will include the blocks from the intersection of the two classes depicted in battery and resistor since the and indicates the blocks must be in the first class and the second class. Similarly depicts a configurable subsystem template block which uses set notation or to reference the two classes depicted in . As a result of the use of the set notation the instantiated configurable subsystem block will include the blocks from the union of the two classes depicted in all the blocks in both classes since the or indicates the blocks must be in either the first class or the second class.

The illustrative embodiment of the present invention also provides a syntax that leverages the array based capabilities of the dynamically typed array based language. In general in MATLAB and other array based languages all values may be arrays and support array indexing. User defined classes are also arrays unless array operations are explicitly overridden to prohibit array formation and indexing. Thus class methods must expect that input arguments may be object arrays. There are many methods where invocation on an array is the same as looping over each element and performing the operation on each element referred to as an element wise operation . Element wise operations include element wise binary operations such as plus and minus where the result of the operation is an array having the same dimensions as the array input parameters and where each element in the output array is the result of a scalar operation performed on corresponding elements of the input arrays. In general element wise methods perform an operation on one or more input parameters to produce one or more output parameters where each output parameter is a concatenation of results produced by applying the method to corresponding elements of each input parameter. Input parameters may be scalar in which case all such scalar values are passed to the method with each element of the non scalar parameters.

The illustrative embodiment of the present invention provides an element wise attribute which may be utilized by the class designer to automate the process of implementing element wise methods in the class. During the creation of a method for the class the class designer assigns the new method the element wise attribute. With the element wise attribute the method is written as if it always takes and returns scalar objects. If the method is passed object arrays the language processor notes the element wise attribute assigned to the method and performs an element wise operation on the array object. The separate results from the performance of the element wise operation are concatenated into a single array result. The element wise attribute can be used when the method follows the following rules 

In one aspect of the invention arrays of classes may be used. For example a model of the application windows on the graphical interface of a computing device may consist of an array of rectangles that indicate the window outlines. This could be modeled using a parameterized constructor that returns an array. In one example the command screen Rectangle 5 may be issued to instantiate a variable screen with 5 elements of type Rectangle.

In another aspect set list and array constructors such as set comprehension may be applied. For example 

In existing programming languages such as C a compiler takes a program commonly referred to as source code and produces executable code that can be read and executed by a computer. The C code may use C syntax to create various objects and invoke methods on those objects. Where standard C syntax is used the compiler must know the memory layout of every object created and the memory layout of every object used in a method invocation. It is possible for a C program to communicate with an external object defined perhaps in JAVA or as a Microsoft COM control but that communication is made possible through a special application programming interface API such as the JAVA Native Interface where JAVA methods are not invoked using the standard C syntax. Moreover some existing languages require the use of a virtual machine such as JAVA or any language operating in the Microsoft.NET framework or Common Language Runtime CLR . These native languages such as JAVA or C programming language that require the use of a virtual machine such as the JAVA Virtual Machine JVM or CLR can only operate on objects defined according to the requirements of the corresponding virtual machine. For example all JAVA objects must be managed by the JAVA Garbage Collector while all the CLR objects must be managed by the CLR garbage collector. Hence for these native languages communication with external objects that are created under different virtual machines or frameworks must be made through special APIs outside the standard native language syntax.

The illustrative embodiment of the present invention includes a language processor and a native language that operates in the language processor where the syntax for defining and interacting with objects implies no assumption about how object data is stored in the computer or even if the data is stored in the computer running the program . Instead this native language is defined such that creation of objects and all access to objects is controlled by meta data associated with the class of an object. illustrates a flowchart depicting steps taken for a language processor to construct and access an object in accordance with one embodiment of the present invention. When the language syntax instructs the language processor to construct an object from a given class step the meta data object for the given class is consulted to construct the object step . The class meta data object may allocate storage for the object in any way such as on a heap in a garbage collection system by creating and or opening a file and referencing a location within that file or by allocating space on another computer or by any combination of the above. The meta data return a value that can be used to identify the object in subsequent access operations step . Any subsequent call to methods or access to object data are also made through the meta data and using the value returned by the meta data after constructing the object steps and . This value may be a memory pointer file pointer object reference system resource handle or any other type of handle pointer or reference that identifies the constructed object. This value may also be a reference handle or pointer to an object that contains other references handle or pointers each of which is used to access a different part of the object as there is no requirement that the object be represented in contiguous memory or contiguous parts of a file or within a single computing device. Different parts of the object may be stored in any variety of different ways.

A program executed by the language processor may interact with native classes that are written in a language supported by the language processor . The language processor may also interact with non native classes written in a language that the language processor does not know how to interpret or compile via meta data described below .

Using meta data to construct and access objects may add run time overhead during execution. This potential overhead can be reduced or eliminated when the language processor acts on objects defined in the native language. A native language is a language that the language processor knows how to interpret or compile. illustrates a flowchart depicting steps taken to reduce the run time overhead during execution in accordance to one embodiment of the present invention. When the language processor obtains an instance of a class to access step the language processor can check if the meta data associated with the class is native step . The language processor can recognize native meta data through any number of means. For example if the language processor is written in C it can ask if the meta data is an instance of a native meta class implemented using the native language where the native meta class is used to describe native classes. Alternatively an API can be used to query the meta data and return true if the meta data defines a native class and false otherwise. When the language processor recognizes meta data for a native class the language processor can use an optional API defined for the native meta data to find out how object data is stored and manipulated. The same or a different API may be used to access meta data for a non native class step . It may not be possible to implement this API for all non native classes but where it is possible such an API can allow the language processor to access non native objects at the same speed as it can access native objects. The language processor can then use just in time compiler technology to generate native machine code that directly manipulates a native or non native object steps and based on the information provided by the optional meta data API.

In embodiments of the present invention data associated with a non native class instance may also be accessed by using non native meta data implementing an API that provides information about how the non native objects are stored and accessed. The information provided by the API can then be used by the just in time compiler of the language processor to produce native machine code that directly manipulates the non native object. In other words the present invention provides a language processing system that defines a meta data API that allows meta data to specify how to access objects in an external non native class system at compile time. There are existing APIs in the prior art that allow one system to access class instances in another system but these APIs add a layer of execution that costs time. One advantage of the present invention is that overhead is reduced by eliminating APIs that mediate between two different class systems at run time. The API in the present invention supplies information about the non native class at compile or just in time compile time and the compiled code is then used for all interactions with non native objects belonging to the same class. The compiled code may be in a machine language or a virtual machine language or a combination thereof. It is possible that some of the compiled code is in a machine or virtual machine language associated with the non native object system.

The illustrative embodiments of the present invention allows for object creation and access syntax to be interpreted or compiled differently depending on the meta data associated with the class of object being created or accessed. The illustrative embodiments allow the same syntax to be used to manipulate objects created from both native classes and non native classes by using the meta data to provide a level of indirection between the language processor and the objects.

The illustrative embodiments implement different type of meta data using different meta classes meta.class meta.property meta.method and meta.event. Meta data are used to describe the meanings aspects of class data and behaviors such as ones that are implemented in JAVA C C or MATLAB . One of ordinary skill in the art will appreciate that there are many different meta classes that can be used and the specific meta classes used are implementation dependent. illustrates how different components of a class are related to different types of meta data. Meta data of a compiled class A provides class description and access information of an instance of class A . shows that the instance of class A includes a property an optional property a method an optional method an event and an optional event . further shows that meta data includes a meta.class object that contains a meta.property object an optional meta.property object a meta.method object an optional meta.method object an meta.event object and an optional event . Each property method or event in the instance of class A corresponds to a meta object in the meta data of a compiled class A . Each different property method or event corresponds to a different meta object. When the native language processor requests access to data or information describing a property method or event from the instance of class A the corresponding meta object in the meta data in the compiled class A is consulted. The corresponding meta object then performs the request such as obtaining a description reading a data value or writing a data value and returns the results of the request.

A language such as MATLAB can have syntax for defining classes. In the present invention this syntax has a direct correspondence with meta data classes. When defining classes and their constituent parts such as methods it is common for language syntax to provide a means to specify various attributes of the class or its constituent parts such as methods. For example in the JAVA programming language the public keyword can be used to specify that a class or method can be accessed from methods belonging to outside code in unrelated classes. The JAVA.lang.Class meta class has a getModifiers method returning an int. This int can be decoded to determine if the class is public. In the present invention information equivalent to JAVA modifiers here referred to more generally as attributes is encoded in the class definition syntax so that attributes can be specified along with their values. Every attribute in the class definition syntax corresponds to a property in a meta data class. In a preferred embodiment of the invention for the MATLAB language attributes are specified using a parenthetical list of statements where each statement assigns an attribute to a value. An important aspect of embodiments of the present invention is that attributes are specified in such a way as to avoid using keywords like the public modifier in JAVA. Instead attribute names are interpreted relative to a meta data class. In a preferred embodiment the meta data class is either explicitly stated in the parenthetical list before the first attribute statement or else the meta data class is inferred to be the default meta data class given the context of the parenthetical list.

For example the following is a class definition using a preferred embodiment of the present invention 

In a preferred embodiment of the present invention each attribute in the class definition syntax corresponds to a property of a meta data class. The following is an exemplary description of the different meta data classes designed for use in the MATLAB programming language as the design environment.

There is a direct correspondence between this meta class property and its corresponding attribute in the class definition.

This method of defining classes in the present invention allows users to easily see how an attribute defined in the class definition is reflected in the meta data class. By avoiding the use of keywords for attributes new attributes can be added to meta data classes without introducing backward incompatibility. For example JAVA has an attribute similar in function to Sealed. This attribute is specified in the class definition using a keyword named final. When a new keyword is added to a language like JAVA the use of that word for any other purpose such as naming a class is forbidden. The class definition notation in the present invention does not require that each attribute name be a keyword because the meaning of the attribute name is interpreted based on its context. In the described embodiments the context is defined by the keyword to the right of the parenthetical list of attribute statements. In a preferred embodiment of the present invention keywords are only associated with each meta class classdef for meta.class properties for meta.property methods for meta.method and events for meta.event.

A class definition may specify a specific meta class in this case a subclass of meta.class to be used with a class. For example to define an interface class one can use syntax like the following 

Here the name of the meta class subclass is specified before the attribute statements in the parenthetical list. One of ordinary skill in the art will appreciate that the present invention is not limited to the specific syntax used herein and other different syntaxes can also be used to specify a specific meta class to use.

The meta.class meta class can also have methods that describe for example the different set operations that can be used on classes in accordance with one embodiment of the present invention.

Additional methods or static methods can also be included in a meta.class meta class. The following is an exemplary method that checks if an implementation of a class conforms to the definition given by a corresponding meta class.

A meta.class meta class can include meta data events that describe how an event handles the creation or destruction of an instance. The following are two exemplary events that can be included in a meta.class meta class.

In one aspect of the present invention a meta.interface meta class can be implemented as a subclass of the meta.class meta class to describe an abstract class. A user can also create a user defined class that is a sub class of the meta.class so that a user defined meta class can be implemented discussed later .

This meta data class provides the meta data for each property or state variable in a class. A user can create a user defined class that is a sub class of the meta.property meta data class to describe a user defined property or state variable. An instance of a meta.property meta data class or an instance of a subclass of meta.property is created for each property or state variable in a class. Each meta.property instance created is a meta data object that is contained in an instance of a meta.class or an instance of a subclass of meta.class . The following are exemplary properties and events that a meta.property meta data class can have.

This meta data class provides meta data for describing a method in a class. A user can create a subclass from the meta.method meta data class to create a customized method for a class. An instance of meta.method or a subclass of meta.method is created for each method in a class. Every instance is a meta data object that is contained in an instance of a meta.class or a subclass of meta.class .

This meta data class provides meta data for describing an event in a class. A user can create a subclass from the meta.event meta data class to create a customized event for a class. An instance of meta.event meta data class or an instance of a subclass of meta.event is created for each event in a class. Every instance is a meta data object that is contained in an instance of a meta.class meta data class or an instance of a subclass of meta.class . The following is a list of possible properties that a meta.event meta data class can have.

In a preferred embodiment of the present invention meta data are used to describe a class definition and access class data. Meta data allow introspection in a dynamically typed array based programming language.

In one embodiment of the present invention meta data is used to allow extension of class definitions. In other words one embodiment of the present invention provides a mechanism for a user to create customized meta data to support customized classes. New attributes can be created unlike many existing programming languages that do not allow such extension. To create a customized meta class meta property meta method or meta event one can create a subclass from meta.class meta.property meta.method or meta.event. illustrates a flowchart depicting steps taken to extend a class definition by subclassing. A pre defined meta data class is obtained in step . A user defined subclass is created from the pre defined meta data class in step . Once the user defined subclass is created it can be used in a class definition for defining an aspect of a class in step . Every meta data class property that that can be set publicly becomes an attribute that can be specified in the attribute statement list.

Subclassing can also be used as a convenience to change a default value for an attribute represented by a property in a meta data class. For example a PrivateProperty subclass can be created from meta.property as shown below.

As shown in the above example the illustrative embodiments of the present invention provides a language processor that supports the use of a meta data classes in a class definition. A meta data class can be used to describe attributes of a class a property state variable a method or an event.

Some embodiments of the present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM a RAM a ROM an MRAM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include MATLAB FORTRAN C C C JAVA PYTHON and UML. The software programs may be stored on or in one or more mediums as object code.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

