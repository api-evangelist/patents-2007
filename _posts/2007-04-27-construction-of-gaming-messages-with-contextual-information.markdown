---

title: Construction of gaming messages with contextual information
abstract: A message is received on a gaming device from a player. The message provides a message identifier and an identifier for the player. Using the message identifier and game state information related to an avatar that is displayed in a gaming environment and is associated with the player, a contextual message is constructed that includes more game state information than is present in the message. The contextual message is displayed on a display of the gaming device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08393967&OS=08393967&RS=08393967
owner: Microsoft Corporation
number: 08393967
owner_city: Redmond
owner_country: US
publication_date: 20070427
---
Multi player games utilize network connections between gaming consoles or personal computers to allow players to play a game within a single gaming environment. In many games players in distant locations from each other are grouped together on the same team or operating unit. In order for the players to work together the players should be able to communicate with one another. Gaming systems have been provided that allow for voice communications between players. However for many players especially new players it is difficult for the player to describe their current location or what they are observing to their other team members during the excitement of the game. Further relying on voice communications creates language barriers to game play between players in different countries.

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

A message is received on a gaming device from a player. The message provides a message identifier and an identifier for the player. Using the message identifier and game state information related to an avatar that is displayed in a gaming environment and is associated with the player a contextual message is constructed that includes more game state information than is present in the message. The contextual message is displayed on a display of the gaming device.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

As shown in gaming and media system includes a game and media console hereinafter console . Console is configured to accommodate one or more wireless controllers as represented by controllers and . A command button on console is used create a new wireless connection between on of the controllers and the console . Console is equipped with an internal hard disk drive not shown and a media drive that supports various forms of portable storage media as represented by optical storage disc . Examples of suitable portable storage media include DVD CD ROM game discs and so forth. Console also includes two memory unit card receptacles and for receiving removable flash type memory units .

Console also includes an optical port for communicating wirelessly with one or more devices and two USB Universal Serial Bus ports and to support a wired connection for additional controllers or other peripherals. In some implementations the number and arrangement of additional ports may be modified. A power button and an eject button are also positioned on the front face of game console . Power button is selected to apply power to the game console and can also provide access to other features and controls and eject button alternately opens and closes the tray of a portable media drive to enable insertion and extraction of a storage disc .

Console connects to a television or other display not shown via A V interfacing cables . In one implementation console is equipped with a dedicated A V port not shown configured for content secured digital communication using A V cables e.g. A V cables suitable for coupling to a High Definition Multimedia Interface HDMI port on a high definition monitor or other display device . A power cable provides power to the game console. Console may be further configured with broadband capabilities as represented by a cable or modem connector to facilitate access to a network such as the Internet.

Each controller is coupled to console via a wired or wireless interface. In the illustrated implementation the controllers are USB compatible and are coupled to console via a wireless or USB port . Console may be equipped with any of a wide variety of user interaction mechanisms. In an example illustrated in each controller is equipped with two thumbsticks and a D pad buttons User Guide button and two triggers . By pressing and holding User Guide button a user is able to power up or power down console . By pressing and releasing User Guide button a user is able to cause a User Guide Heads Up Display HUD user interface to appear over the current graphics displayed on monitor . The controllers described above are merely representative and other known gaming controllers may be substituted for or added to those shown in .

Controllers each provide a socket for a plug of a headset . Audio data is sent through the controller to a speaker in headset to allow sound to be played for a specific player wearing headset . Headset also includes a microphone that detects speech from the player and conveys an electrical signal to the controller representative of the speech. Controller then transmits a digital signal representative of the speech to console . Audio signals may also be provided to a speaker in monitor or to separate speakers connected to console .

In one implementation not shown a memory unit MU may also be inserted into one of controllers and to provide additional and portable storage. Portable MUs enable users to store game parameters and entire games for use when playing on other consoles. In this implementation each console is configured to accommodate two MUs although more or less than two MUs may also be employed.

Gaming and media system is generally configured for playing games stored on a memory medium as well as for downloading and playing games and reproducing pre recorded music and videos from both electronic and hard media sources. With the different storage offerings titles can be played from the hard disk drive from optical disk media e.g. from an online source from a peripheral storage device connected to USB connections or from MU .

CPU memory controller and various memory devices are interconnected via one or more buses not shown . The details of the bus that is used in this implementation are not particularly relevant to understanding the subject matter of interest being discussed herein. However it will be understood that such a bus might include one or more of serial and parallel buses a memory bus a peripheral bus and a processor or local bus using any of a variety of bus architectures. By way of example such architectures can include an Industry Standard Architecture ISA bus a Micro Channel Architecture MCA bus an Enhanced ISA EISA bus a Video Electronics Standards Association VESA local bus and a Peripheral Component Interconnects PCI bus also known as a Mezzanine bus.

In one implementation CPU memory controller ROM and RAM are integrated onto a common module . In this implementation ROM is configured as a flash ROM that is connected to memory controller via a Peripheral Component Interconnect PCI bus and a ROM bus neither of which are shown . RAM is configured as multiple Double Data Rate Synchronous Dynamic RAM DDR SDRAM modules that are independently controlled by memory controller via separate buses not shown . Hard disk drive and media drive are shown connected to the memory controller via the PCI bus and an AT Attachment ATA bus . However in other implementations dedicated data bus structures of different types can also be applied in the alternative.

In some embodiments ROM contains an operating system kernel that controls the basic operations of the console and that exposes a collection of Application Programming Interfaces that can be called by games and other applications to perform certain functions and to obtain certain data.

A three dimensional graphics processing unit and a video encoder form a video processing pipeline for high speed and high resolution e.g. High Definition graphics processing. Data are carried from graphics processing unit to video encoder via a digital video bus not shown . An audio processing unit and an audio codec coder decoder form a corresponding audio processing pipeline for multi channel audio processing of various digital audio formats. Audio data are carried between audio processing unit and audio codec via a communication link not shown . The video and audio processing pipelines output data to an A V audio video port for transmission to a television or other display containing one or more speakers. Some audio data formed by audio processing unit and audio codec is also directed to one or more headsets through controllers . In the illustrated implementation video and audio processing components are mounted on module .

In the implementation depicted in console includes a controller support subassembly for supporting up to four controllers . The controller support subassembly includes any hardware and software components needed to support wired and wireless operation with an external control device such as for example a media and game controller. A front panel I O subassembly supports the multiple functionalities of power button the eject button as well as any LEDs light emitting diodes or other indicators exposed on the outer surface of console . Subassemblies and are in communication with module via one or more cable assemblies . In other implementations console can include additional controller subassemblies. The illustrated implementation also shows an optical I O interface that is configured to send and receive signals that can be communicated to module .

MUs and are illustrated as being connectable to MU ports A and B respectively. Additional MUs e.g. MUs are illustrated as being connectable to controller i.e. two MUs for each controller. Each MU offers additional storage on which games game parameters and other data may be stored. In some implementations the other data can include any of a digital game component an executable gaming application an instruction set for expanding a gaming application and a media file. When inserted into console or a controller MU can be accessed by memory controller .

A system power supply module provides power to the components of gaming system . A fan cools the circuitry within console .

Under some embodiments an application comprising machine instructions is stored on hard disk drive . Application provides a collection of user interfaces that are associated with console instead of with an individual game. The user interfaces allow the user to select system settings for console access media attached to console view information about games and utilize services provided by a server that is connected to console through a network connection. When console is powered on various portions of application are loaded into RAM and or caches and for execution on CPU . Although application is shown as being stored on hard disk drive in alternative embodiments application is stored in ROM with the operating system kernel.

Gaming system may be operated as a standalone system by simply connecting the system to monitor a television a video projector or other display device. In this standalone mode gaming system enables one or more players to play games or enjoy digital media e.g. by watching movies or listening to music. However with the integration of broadband connectivity made available through network interface gaming system may further be operated as a participant in a larger network gaming community allowing among other things multi player gaming.

Server s provide a collection of services that users and applications running on console and may invoke and utilize. In order to restrict access to the services on server s and in order to provide custom services to individual users many embodiments require the user to login to the server s using user login services . During login login services obtain a Gamertag a unique identifier associated with the user and a password from the user as well as a console ID that uniquely identifies the console that the user is using and a network path to the console. The Gamertag and password are authenticated by comparing them to information stored in user records which may be located on the same server as user login services or may be distributed on a different server or a collection of different servers. Once authenticated user login services stores the console ID and the network path in user records so that messages and downloadable content may be sent to the console.

Once players on each of consoles and have logged into server they may participate in a multi player game. To start the game a player on one console denoted as host console installs and runs a game on the console and sends invitations through system server to the players on client consoles and to join the game. Players on client consoles and then install and run the game on their consoles to accept the invitation. When an invitation is accepted system server provides the consoles with network address information so that they can communicate directly with each other.

When the players have indicated that they are ready to play host console sends initial game state information to each of the other consoles indicating the position and status of every object and avatar in the three dimensional gaming environment of the game and an identifier for a map that describes the gaming environment being used for this particular instantiation of the game. An avatar is a graphical representation of a character or object such as a car representing a player in the gaming environment. Players can include human players and Artificial Intelligence Robots AI Bots that control the movement of their avatar. Typically the AI Bots are run within an Artificial Intelligence engine on host console . Each AI Bot has access to a set of knowledge about the game which is stored as knowledge state information. This information includes knowledge about locations in the map avatars and objects that were recently in the view of the avatar for the AI Bot the location of the AI Bots avatar and the objective of the game. An AI Bot controls their avatar by changing the state of the avatar in the game state information. Any change to the state of the avatar is broadcast to other consoles so that they may updated the position and actions of the AI Bot s avatar on their console.

Using their game controller each player may move their avatar and in some games cause their avatar to pick up or drop objects perform some other action such as casting spells or to engage in combat with other avatars in the graphical environment. Changes in the state of the avatar are made by the client console that the controller is connected to and are broadcast to other client consoles so that they may update their game state information accordingly. Typically the state of movable objects in the gaming environment is tracked by host console which receives messages from client consoles any time an object is moved and then rebroadcasts that object state information to the other client consoles. Having host console control the updates of state information for objects helps to avoid conflicts between two consoles that are attempting to update the object s state in different ways.

Even within the simplified map of a game player may have a difficult time describing where they are in the map and what they are able to see to their fellow players. This is especially true for new players who are unfamiliar with the map or the terminology of the game. As a result it is difficult for players to send voice messages to other players to communicate their position or what they can see. In addition because client consoles can be located in different countries and players can speak different languages relying on voice commands can be troublesome since other players may not understand the message that is being sent.

In the embodiments described below these difficulties are overcome by allowing the users to select a simple message using the controller such as come here go there and update . These simple messages are automatically augmented by the consoles to include contextual information such as a location name for the location of the avatar issuing the message the number kind and location of enemies that the sending avatar has seen recently important objects that the avatar is either holding or can see and a location where the avatar is currently looking.

In step a human player or an AI Bot selects a simple message. Under one embodiment a human player selects a simple message by activating a button or a trigger dedicated to the message on controller . Under one embodiment different messages are associated with different positions on the D pad of controller . When a user activates a button on the controller a control driver sends a message to a simple message generator indicating which button has been pressed. Simple message generator uses the button information to determine which message the user has selected. It then invokes a simple generation method associated with that message. AI Bot selects a message by directly invoking the proper simple message generation method in simple message generator .

At step simple message generator determines which client consoles and are to receive the simple message based on information in game state that indicates which players are on the same team as the human player or AI Bot and the consoles associated with those players.

At step simple message generator creates simple message and broadcasts the simple message to the identified clients including the client console . The simple message is broadcast along with an identifier of the player or AI Bot that selected the simple message.

Simple message does not include contextual information but instead typically includes a simple identifier of the message being issued such as come here go there and update . By limiting the amount of information sent in message the impact on network bandwidth between the consoles caused by the transmission of the message is limited and performance this thereby improved.

At step message is received by a message receptor on each of client consoles and . The message includes a message identifier such as a message name and an identifier of the player that sent the message. In the discussion below the handling of the message is discussed with reference to client however the same handling is to be understood to take place in each of client consoles and .

At step the message receptor determines if the player that sent message is on a muted list . In some gaming consoles players can choose to exclude communication from certain other players. This is typically done to exclude vocal communications from other players when those players use objectionable language or are otherwise unpleasant. In some embodiments muted list is based on user records on servers . If the sender of the simple message is on muted list the message is ignored at step .

If the sender is not on muted list at step message receptor invokes an appropriate contextual message construction method at step . Under one embodiment different construction methods are provided for each type of simple message. In other embodiments a single method is provided that can handle all types of simple messages. In two separate contextual construction messages are shown. Contextual construction method is provided for contextual messages that are constructed for human players and contextual construction method is provided for contextual messages that are constructed for AI Bots. However those skilled in the art will recognize that additional message construction methods may be provided.

At step the instantiated message construction method determines a contextual message and possible navigation point information based on the identifier for the simple message and game state information stored in game state . Game state includes information about the current state of the gaming world including the location of each avatar and object in the world the current conditions or states of those avatars and objects and any current actions involving those avatars or objects. Game state also contains information about the current view of each avatar and objects and other avatars that the avatar has seen recently. Under one embodiment this includes objects an avatar has seen within the last two seconds. Game state may take the form of a programming object or a database and is typically stored in memory.

The avatar associated with the player that sent the simple message is referred to as the sending avatar. Based on the location of the sending avatar the objects and other avatars that the sending avatar has recently seen the sending avatar s team the objects held by the sending avatar and the objective of the sending avatar the message construction method adds additional contextual information to construct a contextual message. In particular based on this information the message construction method will select a type of message from a collection of possible messages that each includes variables as to locations numbers enemy types and object types. The message construction method will then set the variables within the message based on the information from the game state. Note that game state provides locations in terms of map coordinates that are not particularly useful to players. To make the location information more useful to players the message construction method converts the coordinates into a location name using a coordinates to location name mapping .

The message constructed in step includes more game state information than was present in the simple message. In particular the contextual message can include game state information such as a location name for the position of the sending avatar in the gaming environment a count of other avatars recently viewed by the sending avatar location names for the position of other avatars recently viewed by the sending avatar an indication that an object was recently viewed by the sending avatar and a location of an object recently viewed by the sending avatar.

Message construction method also sends the location of an object enemy or the sending avatar to a navigation point engine . Navigation point engine uses the position of the object enemies or sending avatar and the location of the avatar associated with the player receiving the message to display navigation points in the gaming environment that assists the receiving player in locating the object enemy or sending avatar. In particular such navigation points will typically show a graphical icon with an arrow pointing in the direction that the player should follow in order to reach the object enemy or sending avatar. Such navigation aids in combination with the location name provided in the contextual message on the display helps human players to learn the position of certain location names in the graphical gaming world.

Under one embodiment at step a language setting for the console or the game is determined and is used to construct a localized version of the contextual message using localized text . Localized text contains textual components that can be used to convert each possible contextual message into a different language. For example if a Japanese version of the game is being played localized text would include components for converting the contextual messages into Japanese. Localized text may include other languages with the selection of the language being dependent upon a language setting in console or within the game.

Because of localized text players who speak different languages can still communicate to each other to convey information about the location of avatars and objects in the graphical environment as well as messages directing players to take certain actions. With this system a single command sent by one player will automatically be augmented with contextual information and the full contextual message can automatically be translated into multiple languages. This allows teams of players to cooperate with each other even though they all speak different languages.

At step the full contextual message is used to select a localized audio recording from audio storage . The localized audio recording is in the language set for the game or for the client console. The audio recording corresponds to the localized text for the message and typically includes the same information found in the localized version of the contextual message.

At step the localized text is displayed on a display screen as displayed text and the localized audio is produced through a speaker as audio . In one embodiment the displayed localized text is displayed in a corner of the display so as to limit obscuring the view of the graphical environment. In some embodiments the audio is played through a headset that the player wears and that is connected to controller .

At step the navigation point if any produced by navigation point engine is displayed in the graphical environment based on the information provided by the message construction method.

In the flow diagram of it was indicated that an AI Bot can select and send a simple message. provides a flow diagram of method for an AI Bot to select such a message.

In step the AI Bot s avatar experiences a major event. Examples of major events include movement of the avatar to a new location or objects or enemies appearing in the view of the avatar. At step the method determines if the major event is the movement of the avatar. If the avatar has moved the avatar will issue a simple come here message indicating that it has moved to a new position at step . When the come here message is received a message will be constructed that includes the location name of the current location of the avatar. If the avatar has not moved at step then the avatar has seen an important object or one or more enemy. As such the AI Bot will select an update message at step . When this update message is received by the client consoles a message will be constructed that includes information about what the avatar has seen recently and the avatar s current position.

Note that the AI Bot sends the same simple messages as other players. As such it is difficult for other players to determine if the message is being sent by a human player or by an AI Bot. This uniformity can increase the pleasure of playing the game by making it appear as if there are more active participants in the game.

In steps through for processing and augmenting a received message are steps performed for a human player. Under one embodiment such received messages are also processed for each AI Bot that has an avatar in the game. A flow diagram for processing such received messages for an AI Bot is shown in .

In step the simple message is received by message receptor . At step message construction method in artificial intelligence engine is instantiated. At step the instantiated message construction method determines the contextual message based on the simple message and game state information in game state . Formation of the contextual message is identical to the formation of the contextual message in step for human users except that location names are not included in the contextual message. Instead the coordinates from the game state are used since the AI Bot understands such coordinates. Like the contextual messages for the human players the contextual message for the AI Bots includes more game state information than is found in the simple message.

Based on the information in the contextual message the AI Bot such as AI Bot and AI Bot updates information known by the AI Bot at step . This is done by changing or adding to information stored in a knowledge state such as knowledge states and associated with AI Bots and . Thus if the contextual message indicates the location of another player s avatar or indicates the location of an important object or enemy seen by the other player s avatar the AI Bot will have its knowledge state changed to indicate that the AI Bot is aware of this information. At step the AI Bot invokes one or more decision making methods to make a decision about a course of action to take based on the updated information and any other information in the knowledge state. Examples of possible course of action include moving the AI Bot s avatar by changing the avatar s position changing the avatar s view or taking some other action. Based on its decision AI Bot changes the state of the AI Bot s avatar in game state and this change is broadcast to all of the consoles. If the view of an AI Bot s avatar changes for console that receives the change in state the display is changed to reflect the change in the AI Bot s avatar at step .

As shown in AI Bots are able to receive messages from human players and to act on those messages by incorporating the contextual information associated with those messages into the AI Bot s knowledge state. This allows players to share information with AI Bots and to ask the AI Bots to move their avatars to different locations in the graphical world or to take some other action in the graphical world. In one embodiment AI Bots are also able to receive messages from other AI Bots that control avatars in the game and to act on those messages. For example AI Bot can send a simple message to AI Bot that will be converted into a contextual message that includes information that AI Bot can use to make a decision and change the state of its avatar.

At step the message construction method identifies all objects and enemies seen recently by the sending avatar. Under one embodiment all objects or enemies seen within the last two seconds are identified. In addition to identifying the objects and enemies information describing the objects or enemies is also collected such as the type of objects the type of enemy the number of enemy the number of objects and the locations of those enemies and objects.

Based on the information collected the message construction method selects a message that conveys the information in a succinct manner. The messages selected in step are selected from a set of messages or message components that include text and variables. The variables can include numbers object names object types enemy types and location names for example.

Under some embodiments the message components are selected so as to limit the message to only the most important information so that the human player is not confused. For example if the avatar had seen three of a first type of enemy in one room and two of a second type of enemy in another room at step the message construction method may select a message that simply states I see enemies instead of a message such as There are in the and in the where the elements between . . . represent variables to be inserted into the message.

At step the variables for the selected message are set by the message construction method. Under one embodiment location variables are set by retrieving the location name from coordinate to location name map using the coordinates from game state . Once the variables of the message have been set at step the contextual message is complete. At step the method determines if an important object s location is in the message. If the important object s location is in the message that location along with an identification of the important object is sent to navigation point engine at step so that navigation point engine may generate a navigation point on the display for the important object. If an important object s location is not in the message at step the method determines if enemy locations are in the message at step . If enemy locations are in the message at step the locations of the enemy and an indication that these locations are for enemies is sent to navigation point engine at step . If an enemy location is not in the message at step the determination of the contextual message and the navigation point information is completed and ends at step .

At step the coordinates of the location of the center point of the sending avatar s view is sent to navigation point engine so that the navigation point engine can determine whether and where to add a navigation point in the graphical display to lead the player to the location set in the contextual message.

Although only three simple messages update come here and go there are discussed above other types of simple messages may be implemented under the present invention. In fact any simple message that can be expanded based on game state information may be sent between the players.

Although the embodiments discussed above have been described in connection with a dedicated gaming device the embodiments may be practiced with other types of computing devices that have been networked together to provide multi player gaming.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

