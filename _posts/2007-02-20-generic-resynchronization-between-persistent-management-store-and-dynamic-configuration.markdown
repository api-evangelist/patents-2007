---

title: Generic resynchronization between persistent management store and dynamic configuration
abstract: A cluster of nodes share configuration data that characterizes the cluster as an entity (virtualization) to a client. Management configuration data, VSC, is entered into a replicating database, RDB. That data is distributed and stored into replicating databases in each node, and then reconciled with the corresponding cluster configuration data in dynamic memory. The dynamic memory is accessed by clients. In a preferred embodiment, the nodes are storage servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332497&OS=08332497&RS=08332497
owner: NetApp, Inc.
number: 08332497
owner_city: Sunnyvale
owner_country: US
publication_date: 20070220
---
The present invention relates to a cluster of networked nodes comprising storage systems and more particularly to configuration data common to and shared by the cluster of storage systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures or storage servers including but not limited to a NAS network attached storage environment an SAN storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although not necessarily associated with its own file system. The data structures may also be viewed as objects and classes of objects tables address structures and other such structures that may be used in the configuration of the systems.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

An NAS system of nodes may be clustered to respond to a client request as a single entity. As used herein a node is a storage system embodied as a filer that may be configured to operate according to a client server model of information delivery to thereby allow many clients to access shared resources such as files stored on the filer. Sharing of files is a hallmark of an NAS system that is enabled because of its semantic level of access to files and file systems. Storage of information on a NAS system is typically deployed over a computer network comprising a geographically distributed collection of interconnected communication links such as Ethernet that allow clients to remotely access the information files on the filer. The clients typically communicate with the filer by exchanging discrete frames or packets of data according to pre defined protocols such as the TCP IP Transmission Control Protocol Internet Protocol . In addition each filer in the cluster may communicates exclusively with all the other clustered filers via a network such as the Internet.

In a client server model the client may comprise an application executing on a computer that communicates with the clustered filers over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. NAS systems generally utilize file based access protocols therefore each client may request the services of the clustered filers by issuing file system protocol messages in the form of packets to the file system over the network identifying one or more files to be accessed without regard to specific locations e.g. blocks in which the data are stored on disk.

The following descriptions are with respect to an NAS cluster of filers communicating via an Ethernet and a network switch but other networked filers may be clustered via FC Fibre Channel or an Ethernet adapted to operate as networks. Such protocols and systems are known to those skilled in the art.

In such a cluster there is a significant amount of configuration data associated with the cluster as a whole. This configuration data is owned by the cluster as a single entity or an SSI single entity image . For example the location of an operating system domain server of a DNS Domain Name Server is an example of cluster configuration data. Such data is referred to herein as VSC Virtual Server Configuration data. The terms VSC data configuration data and persistent configuration data may be used interchangeably herein.

There is a need to maintain a persistent set of VSC data in each of the clustered filers or nodes wherein each node has an up deto date common copy of the persistent VSC data. This persistent data represents data common to the cluster that generally does not change. For example the common data may be class data such as a name server class for a number of different servers. Such information may be arranged as a table class Name Server with row entries that represent cluster locations of specific name servers. Further that up to date persistent data must be reconciled with in core or dynamic memory data. The in core data is that data in memory that is accessed by for example a request from a client. The persistent data and the in core data are arranged so that any client interacting with the cluster receives information that is up to date and independent of which node or nodes in the cluster are active.

An issue is presented in such clustered systems where an administrator may make a change to VSC data in the persistent database. The change must be delivered to each node in the cluster and each node in the cluster must reconcile or route the changed data to the corresponding in core or dynamic memory. Note the change herein represent a wide definition to include at least modifying existing data adding new data and or deleting existing data.

The present invention provides a resynchronizing process for a network of clustered nodes. The resynchronizing process reconciles data in dynamic memory within each clustered node with management configuration data for the cluster that is held in a persistent RDB Replicating DataBase local to each of the clustered nodes. Management configuration data may be installed by an administrator into the local RDB in one of the clustered nodes whereupon it is distributed and stored into the RDBs in all the other nodes in the cluster. The dynamic memory data or contents in each node are reconciled or resynchronized with the corresponding management configuration data in the local RDB. That is the dynamic memory data are processed to match that of the management configuration data by adding removing or modifying the dynamic memory data in each node. These operations are illustratively accomplished with a resynchronizing algorithm.

The cluster of nodes for example filers preferably share a common network address so that clients interact with the cluster as if the cluster were a single node or storage server. The filers themselves communicate exclusively with each other using either a broadcast address or by having the addresses of the individual filers. The network is preferably Ethernet connected filers nodes sharing a network switch to other geographically separated nodes on the same cluster.

It will be appreciated by those skilled in the art that although the following Detailed Description will proceed with reference being made to illustrative embodiments the drawings and methods of use the present invention is not intended to be limited to these embodiments and methods of use. Rather the present invention is of broad scope and is intended to be defined as only set forth in the accompanying claims.

The present invention as detailed below includes a resynchronization process that reconciles data in dynamic memory within each node of a cluster with management configuration data for the cluster held in a persistent RDB within the management module in each node in the cluster.

The N module includes functionality that enables the nodes to connect to clients over a computer network while each D module connects to one or more storage devices such as disks of a disk array . The nodes are interconnected by a cluster switching fabric which in the illustrative embodiment may be embodied as a Gigabit Ethernet switch. An exemplary distributed file system architecture is generally described in U.S. Patent Application Publication No. US 2002 0116593 entitled METHOD AND SYSTEM FOR RESPONDING TO FILE SYSTEM REQUESTS by M. Kazar et al. published Aug. 22 2002. This application publication is incorporated herein by reference. It should be noted that while there is shown an equal number of N and D modules in the illustrative cluster there may be differing numbers of N and or D modules in accordance with various embodiments of the present invention. For example there may be a plurality of N modules and or D modules interconnected in a cluster configuration that does not reflect a one to one correspondence between the N and D modules. As such the description of a node comprising one N module and one D module should be taken as illustrative only. The management module and RDB Replicated DataBase described below exist in all nodes participating in the cluster. However a GUI and corresponding physical connection in one or more nodes allows an administrator access to the cluster

Clients may be general purpose computers configured to interact with the clustered nodes in accordance with a client server model of information delivery.

That is each client may request the services of the cluster and one or more nodes in the cluster may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Local I O adapter couples the system bus to external hardware may be used for direct input output to a particular node. In one case an administrator may use the GUI to input cluster configuration data into the node whereupon that data is then directed to the cluster itself as described below.

Each node is illustratively embodied as a dual processor storage system execs cuting a storage operating system that preferably implements a high level module such as a filer to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module . The functions of the management module may be implemented in a third processor or shared between two processors or within one of the two processors.

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS of the present invention. As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements the novel Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as minoring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Patent Application Publication No. US 2002 0116593.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

The following portion of this preferred embodiment is primarily directly to the management aspects of the systems discussed. More information or the N Module and D Module may be found in the above incorporated by reference document.

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. More detail on these storage components can be found in U.S. patent application Ser. No. 10 836 817 entitled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT to John K. Edward et al. and assigned to Network Appliance Inc. This application is hereby incorporated herein by reference. In the illustrative embodiment each node accesses a configuration table that maps the location of stored components used to service requests within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of these locations. The VLDB has a remote procedure call RPC interface e.g. a Sun RPC interface which allows for example the N module to query the VLDB .

Referring back to the management processes have interfaces to and are closely coupled to RDBs . The RDB may comprise a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDBs replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . The primary communication channel is RDB to RDB over TCP. At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

In an illustration of the invention the management configuration data accessible by all the nodes in a cluster is referred to a VSC Virtual Server Configuration . The VSC resides in the RDB and is maintained among all the clustered nodes or filers in order for a client to interface as if the cluster were a logical entity.

The recovery manager oversees a distributed recovery mechanism of the RDB and is responsible for synchronizing databases as nodes come into quorum. The recovery manager interfaces with the quorum manager and transaction manager . The quorum manager manages quorum voting by tracking participating nodes and responds to heartbeat signals for example to ensure that the cluster is in quorum. Should the cluster and or individual nodes fall in or out of quorum the quorum manager alerts the recover manager . The transaction manager processes all RDB transactions propagating them to remote in quorum nodes and ensuring that each is performed atomically all or none .

Assume that newly up dated persistent cluster configuration data such as VSC data is distributed to and stored in the RDB in a node in the cluster. Note this new data VSC has been distributed to all the RDB s in all the nodes in the cluster. That up dated data is then copied from the RDB to the appropriate final dynamic memory destination in the node a running application e.g. App or the location of a file App accessable by a client. For example if a name server s location has been changed by an administrator that new location is loaded into the RDB in each node. Then the application referencing the name server is updated with the new location. Referencing back to the communications channels and are used by the management module for updating dynamic memory that might exist in the N Module or the D Module or for that matter anywhere in a node.

The final dynamic memory destinations App through Appn may include a process s address space a local file on a file system an event sequence start the location of a server or other locations that may be used to store cluster configuration data.

A resynchronization process flow chart is illustrated in . the process accomplishes the task of updating the applications within each node. As noted the RDB stores persistent cluster configuration data VSC within each of the clustered nodes. That VSC data in the RDB must be reconciled via read writes removal by the resynchronization algorithm with the corresponding data in the in core or dynamic memory available to clients or other users. Typically the data is related in a hierarchy and the VSC refers to an entire database. A class within the VSC would be for example a table in that database and an instance would be for example a row in that table.

If there is a failure to the VSC data associated with a particular protocol that protocol is not enabled. In such an instance the algorithm tracks the operations at the sinks e.g. commands that modify remove or add instances to the dynamic memory locations. If any of these operations fail the client application or protocol using that failed configuration is disabled. The VSC may only enable those protocols that have not experienced a failed reconciliation.

When VSC is added to or changed the administrator or developer may make changes for example a new table may be created. When these changes are loaded into the RDB reads the data from the dynamic memory and the RDB and then operates on the data to add remove or modify the data in the dynamic memory so that the dynamic memory contents matches that in the RDB. The RDB provides a mechanism for the changed information in a node to be shared to all the nodes in the cluster whereupon eventually each of the nodes reconciles the data within their dynamic memories with respect to the newly entered VSC information.

The trigger for each node to reconcile its RDB contents with that in its dynamic memory may be any number of events such as but limited to RDB quorum change from offline to online database update callback an administrator request via a user interface a timer event and a software error that signals the reconciliation to run.

The flow chart of initiates the resynchronization process by retrieving the RDB version and the dynamic memory version . If the two versions are compared and if equal the dynamic memory version is left alone and the remaining dynamic memory is examined. When there is a difference the copy in dynamic memory is altered to be the same as the copy in the RDB. If there no version in dynamic memory the RDB instance is inserted into the dynamic memory and for each instance in the dynamic memory that does not have a corresponding RDB version that instance is removed .

It should be understood that above described embodiments are being presented herein as examples and that many variations and alternatives thereof are possible. Accordingly the present invention should be viewed broadly as being defined only as set forth in the hereinafter appended claims.

