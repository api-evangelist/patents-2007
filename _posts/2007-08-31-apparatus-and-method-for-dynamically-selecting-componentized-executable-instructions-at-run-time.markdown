---

title: Apparatus and method for dynamically selecting componentized executable instructions at run time
abstract: A computer readable storage medium includes executable instructions to receive a request for an action. An action context is received where the action context includes an application requesting the action. A set of metadata is searched for metadata corresponding to the action, where the search is limited by the action context. Selected metadata for the action is inserted into a collection. The selected metadata is a result of searching the set of metadata. The selected metadata includes a reference to the set of executable instructions that implements the action and a description of the action. The collection is then returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719287&OS=08719287&RS=08719287
owner: Business Objects Software Limited
number: 08719287
owner_city: Dublin
owner_country: IE
publication_date: 20070831
---
This invention relates generally to information processing. More particularly this invention relates to searching for and retrieving executable instructions and associated data.

Business Intelligence BI generally refers to software tools used to improve decision making. These tools are commonly applied to financial human resource marketing sales customer and supplier analyses. More specifically these tools can include reporting and analysis tools to present information content delivery infrastructure systems for delivery and management of reports and analytics data warehousing systems for cleansing and consolidating information from disparate sources and data management systems to collect store and manage raw data.

BI tools with modular architectures are common. The executable files built on modular designs scale in size as features are added. Also in a modular BI tool features may be added while the general interface is preserved. Because each feature is ideally independent of the other features the addition of multiple features to a BI tool may lead to redundant code in the tool. If left unchecked this can lead to unwieldy executable files that defeat an advantage of modular design.

Redundant code can be eliminated through componentization. Componentization is an approach in the field of software engineering which considers how executable instructions within programs are divided up and arranged. Componentized code was developed out of the desire to create portions of code that are reusable interchangeable better tested and the like. A set of executable instructions can be split up into components. A component can be an object a group of objects one or more subsystems a library and the like.

An optimal componentized system reduces the amount of redundant code. A challenge associated with reducing the amount of redundant code is to account for the presence or absence of a component.

In view of the above it is desirable to provide improved techniques for determining how portions of executable instructions are divided and arranged. It would also be desirable to enhance software frameworks with improved techniques to handle componentized software.

The invention includes a computer readable storage medium with executable instructions to receive a request for an action. An action context is received where the action context includes an application requesting the action. A set of metadata is searched for metadata corresponding to the action where the search is limited by the action context. Selected metadata for the action is inserted into a collection. The selected metadata is a result of searching the set of metadata. The selected metadata includes a reference to the set of executable instructions that implements the action and a description of the action. The collection is then returned.

The invention also includes a computer readable storage medium with executable instructions to receive a request for an action from a user at a client where the request is for an action that is suitable in an action context. A query to a metadata source is formed for the action. The query includes a first parameter based on the rights of the user and a second parameter based on a criterion in the request for the action. A set of results is received from the query where the set of results from the query includes metadata for a suitable action. The metadata for the suitable action is returned.

An action is a part of a workflow. An action may be a part of a workflow that a user initiates in a client application. For example view modify schedule and create are considered actions. An action can be defined by executable instructions divided into components and optionally associated with metadata in information objects. At a metadata level an action is a set of metadata e.g. an information object that contains a location for the executable instructions that implement the action and optionally the associated GUI elements. The GUI element may be executable instructions or markup languages that generate a webpage for a browser e.g. Java script XML HTML. In an embodiment an action is comprised of an information object a Java class and a JavaServer Pages JSP page. In this example the information object is metadata to executable instructions implementing the action in the Java class and JSP page while the JSP page is a GUI element used to invoke the Java class.

An action set is a group of actions. Action sets are used to combine actions together and to display them as a logical unit. Two types of action sets are single page and multi page action sets. The main difference between these two types is how they are presented to the user. For both types one or more actions may be included in a portion of a GUI such as a window pane icon button menu or the like. A multi page action set looks like a wizard with multiple sequentially presented pages. Each action is displayed on its own page. A single page action set looks like a single page with two or more actions present. In the context of action sets a page can be a portion of a GUI.

Context or action context is a set of conditions under which an action is requested or invoked. Context can be used to limit the selection from all actions to one or more suitable actions. Context may be determined by many factors including the target content e.g. BI content data the application requesting the target content the rights for a user the intended usage of the target content the situation of the target content past actions invoked the locale of the BI tool and the computer language used to create a GUI for a client.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multidimensional e.g. OLAP object oriented databases and the like. Further data sources may include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC and the like. Data sources may also include a data source where the data is not stored like data streams broadcast data and the like.

An information object is a collection of one or more pieces of metadata. The metadata describes one or more aspects of a component in a system. In a BI system the underlying component is one or more pieces of metadata e.g. another information object a collection of information objects defining a BI tool a file a resource e.g. data source report engine an entity e.g. user aspect of a BI system and the like. The information object can be implemented in binary or human readable format. In an embodiment the information objects are implemented in eXtensible Markup Language XML .

A memory is also connected to the bus . In an embodiment the memory stores one or more of the following modules an operating system module a business intelligence BI module a report module a BI Platform module a metadata repository an action module an action code repository an action sequence module a webserver module and a web browser module .

The operating system module may include instructions for handling various system services such as file services or for performing hardware dependant tasks.

The BI module includes executable instructions to perform BI related functions on computer or across a wider network. BI related functions include generating reports performing queries performing analyses and the like. The BI module can include one or more sub modules selected from the report module BI Platform module and metadata repository . The report module is optional. It includes instructions for generating reports viewing a report performing query and analysis and the like. The report module includes executable instructions to access a data source not shown . The report module includes instructions to accessed data locally or remotely.

The BI Platform module includes instructions for handling various services that are consumed by one or more BI applications. These services include metadata management scheduling alerting and the like. The metadata management includes the management of the metadata repository Metadata is data describing data or an aspect of a system. Metadata includes secondary information that describes or augments a primary set of data or an entity in a system such as a set of instructions a user and the like. The repository is a data source storing metadata for components of a BI system. The repository is a storage and processing resource for information about entities in a BI system. The executable instructions in other modules may access the repository to retrieve or add metadata. In some embodiments this metadata is stored as information objects. The metadata repository can be implemented in accordance with any number of techniques including those described in the following pending commonly owned patent application which is incorporated by reference herein in its entirety Apparatus and Method for Defining Relationships between Component Objects in a Business Intelligence System application Ser. No. 11 304 980 filed Dec. 14 2005.

The action module includes executable instructions to manage an action based BI system. The action module directs the flow of requests for content e.g. documents documents with saved data documents with live data and data . The module combines the content with GUI elements to create pages of content with embedded actions. The action module can include sub modules like the action code repository and the action sequence module . The action code repository stores the executable instructions that define actions and their associated GUI elements. The action sequence module includes executable instructions to handle the invocation of a set of actions the chaining of actions error handling and the like.

The optional webserver module includes executable instructions to accept content requests from clients and send the content to the clients. The web browser module is optional. When present it interacts with the action module through the webserver module . The action sequence module provides a graphical user interface to display content from the web browser module . The web browser module includes executable instructions to enable the user to interact with content request additional content and send commands to executable instructions in other modules.

The executable modules stored in memory are exemplary. Other modules could be added such as a graphical user interface module. It should be appreciated that the functions of the modules may be combined. In addition the functions of the modules need not be performed on a single machine. Instead the functions may be distributed across a network if desired. Indeed the invention is commonly implemented in a client server environment with various components being implemented at the client side and or the server side. It is the functions of the invention that are significant not where they are performed or the specific manner in which they are performed.

Included in BI System is a web browser defined by executable instructions in the web browser module . The web browser sends a request for one or more suitable actions via channel to web application server . The web application server is defined by executable instructions in the web server module . The web application server sends the request via channel to the action framework . The action framework is defined by the action module and the action sequence module . The action framework parses and if needed augments the request. The augmented request is sent to the BI platform in the platform layer .

The BI platform handles various services that are consumed by one or more BI applications. The platform will coordinate the servicing of the request . The BI platform is defined by the BI module and its sub modules. The BI platform includes a metadata repository frontend . The frontend may be an application programming interface. In an embodiment all applications and entities can query the metadata repository. The metadata repository frontend takes the request and queries the metadata repository . The queries incorporate the appropriate data from the request to search for a list of suitable actions.

The selected metadata for the suitable action s is returned from the BI platform . This metadata varies with embodiments but includes a list of the one or more suitable actions and information on how to invoke the actions. In an embodiment the metadata includes a reference e.g. URL to executable instructions implementing the action a reference to a GUI element a request ID an action ID action sequence information or the like. The action framework may use the metadata to access a code repository for GUI elements associated with the one or more suitable actions. The GUI elements may be a text and an icon or a reference to each. The retrieval of GUI elements is optional. In an embodiment the code repository is in the platform layer . In an embodiment there are multiple code repositories each corresponding to a different computer language such as Java .NET and the like. Each GUI element includes information on how to access a set of executable instructions that implements the corresponding action e.g. the location of the set of executable instructions. The action framework inserts the GUI elements for the action s into a collection i.e. assemblage or bundle . The collection may include the metadata for the suitable action s or GUI elements . The collection is returned to the client via the web application server and channel .

A user at web browser may invoke an action using the GUI elements or the metadata on the suitable action s . Either of these have sufficient information to invoke a set of executable instructions that implements the action. These executable instructions may reside in the code repository or elsewhere. The call is made from the web browser through appropriate channels e.g. channels and to the location of the executable instructions that implement the action. For example a suitable action in viewing a report i.e. target content is an action to export the report to a PDF file. The executable instructions for that could be implemented by the report engine or stored as a shared resource in the code repository . The code in repository would be executed by the action framework . The results of the action are returned to the web browser via channel .

In addition to requesting one or more suitable actions the web browser can send a request for target content and suitable action s to the web application server . The request is passed into the BI platform where the metadata repository is queried for metadata for both the target content e.g. permissions checking data source location and a list of suitable actions. The BI platform then retrieves the target content from one or more data sources for example by using report engine to query data source . The report engine can access one or more data sources only one shown through a semantic abstraction that overlies the data source s . This metadata layer includes a model that describes the underlying data. An example of a semantic abstraction is a BusinessObjects Universe . Alternatively the report can be retrieved from a document repository. In an embodiment the target content is data from data source .

The target content along with metadata for the suitable action s are returned from the BI platform . The action framework inserts the target content or a portion of the target content into a collection . Examples of a portion of target content include the first 100 records in a report 5 pages in a document a subset of a results set and the like. The collection may include one or more of target content the metadata for the suitable action s and GUI elements . The collection is returned to the client via the web application server via channel . In an embodiment the collection is dynamically generated GUI content such as a page suitable for viewing in a web browser.

Several other architectures for a BI system like system are associated with embodiments of the invention. The system is amenable to a client server architecture with a thin client i.e. web browser . In an embodiment two or more layers i.e. and may be combined. When layer and are combined the web browser is replaced by a GUI unit and the web application server is not present. Some embodiments of the present invention support a web based architecture in which each layer repository and data source may be hosted by a separate computer. The architecture may be that of a thick client including all shown components in one layer with permissible exceptions for the data source and or metadata repository . Another embodiment of the present invention includes a thick client in a client server architecture.

The function of system differs from system in how the web application servers are used. As with system the web browser sends a request for one or more suitable action via channel to a default web application server for example . This request is relayed per the description of system . The metadata for the suitable actions is returned from the BI platform . In an embodiment the action framework parses this metadata to select a web application server where the metadata will be sent. This web application server for example then returns the metadata to the web browser . In another embodiment the default web application server returns the metadata . The web application server can package the metadata into a portion of a GUI element for display by the web browser. This GUI element the requested data and the metadata can be included in a package which is returned to the web browser . The metadata can be segmented by action with the metadata for each action potential being returned to a different web application server.

In an embodiment the metadata contains a portion of text naming an action an icon for a GUI representing an action or a link to the same icon and the URL of the code that implements the action. This URL is on a web application server accessible to the web browser e.g. . In this way different actions can be implemented by different web application servers. The division of servers can be based on programming language application type of action proximity to needed resources and the like.

The BI platform retrieves target content from one or more sources. The target content can come from a document repository . The documents in the optional document repository maybe BI documents. The documents may be in many forms such as a static document e.g. a PDF document a dynamic document with saved data or a dynamic document with live data. The repository may also contain folders that can be target content.

The set of processing operations permit a request for content or target data e.g. target content to be processed concurrently with a request for one or more suitable actions. In operation a request is made for content and suitable actions. The two requests are jointly processed through operations to operation when both the content and the metadata for suitable actions are retrieved from the platform. The optionally requested content is inserted into the collection in operation . For example a JSP page is created that displays a report as target content and suitable actions that may be performed on the report.

The processing operations in support the invocation of actions. For example while viewing a report document e.g. previously requested target content target content retrieved from another system the user may select a print button i.e. a suitable action previously identified . The print button s logic is implemented as an action. The current context i.e. report document invocation of print and the like is forwarded to the executable instructions associated with the report printing action. Because the print action has sub actions further actions are requested based on the context of the report document and the invocation of the print action. Parameters such as the ID of the target report document are used to query the metadata repository for metadata for the print action and the report document per processing operations and . The metadata for the print action is used to retrieve the GUI element per processing operation . The GUI element for the action is combined with the report document to render a page e.g. JSP page showing the print action and the report. This page is displayed to the user. The user optionally inputs a parameter such as the number of copies and hits the OK button.

The action framework queries for the report document s information object. If needed the metadata for the report or action is updated. The executable instructions for the actual print operation are executed. The metadata to the action or report document is updated to reflect the execution of the print action.

Action module checks properties of any target content . The metadata source is checked for specific properties in the metadata for the target content. An example of checking specific properties is confirming the report document properties with the metadata associated with the report. If the report has prompts the framework knows these prompts need to be displayed to the user so they can set them. The prompts can be set in subsequent actions.

In processing operation the action module checks criteria stored in metadata as to how actions relate to data applications situations and the like. In an embodiment this criteria is stored as the relationships between action information objects and other information objects. The metadata repository stores information objects and relationships between them. These objects and relationships indicate which actions are suitable in the given context based on the type of target content the application consuming the target content the usage or genus of the actions and the situation of the target content.

Two further relationship types are depicted in set . The representative action information object is coupled via a third relationship to a representative usage information object in the group of usage information objects . The group of usage information objects includes a plurality of information objects defining different usages of actions. A usage is a genus to an action such as default list create new upload refresh schedule organize and the like. Usage can be used to group actions together in the user interface. There may be zero one or more usages related to one or more actions . The representative usage information object is coupled via a fourth relationship to a representative situation information object in the group of situation information objects . The situation information objects define different spatial or logical situations that an action can be invoked from. Examples of situations include the logical relation of an information object with another information object the logical location of the proposed action e.g. categories folders inboxes object package and the like. The situation information object can include further information such as temporal circumstance and the like. As shown in relationship there may be zero one or more usages related to zero one or more situations .

The set of entities and relationships is used to determine suitable actions on existing components in a BI system. For example editing or viewing an existing document. The metadata in is not relied upon when adding a component. Although adding a document type will include updating the group of document types . There are some actions that are not document focused. These do not use the set of information objects and relationships . For example the action that displays the version number of an application is not specific to a document type.

Alternative relationships to those shown in are possible. In an embodiment two or more relationships extend from an action information object to two or more information objects in a group of information objects. For example an action information object commonly is linked to a plurality of application information objects in the group of application information objects . This is because it is common for an action to be designed for a plurality of applications. Some actions have fewer than four relationships. For example if an action is unrestricted as to usage it needs no relationship with a usage information object in the group of usage information objects .

As shown in a set of suitable actions can be determined by examining relationships between information objects in a metadata repository. The set can be implemented in many different data sources. In an embodiment a relational database is used. In an alternative embodiment the information objects are replaced by records in tables in a data source with a relational schema. These records can be linked through the relational schema.

The specific GUI elements of interface are generated in accordance with embodiments of the present invention. In this case interface is associated with retrieving a set of suitable actions for creating a new object in a BI system. By clicking on the New button the interface displays a list of suitable actions . Each action in the set is selected because it is suitable for at least the New usage and the application embodied in interface . In this way the interface is scalable with the rights of a user. More actions are available depending on the user s rights. These rights are determined by querying the metadata in the system in accordance with the operation in . In an embodiment each action listed in the list of suitable actions is represented by a GUI element retrieved from a code repository. In an embodiment the list of suitable actions is a pre existing GUI element whose content is populated with action from a list of suitable actions. The incorporation of action metadata to alter a GUI includes enabling and disabling buttons and other controls changing the text associated with a control changing the executable instructions associated with a control and the like.

Each action in the action sets is selected because it is a suitable action given the context. In an embodiment each page in a multi page action set includes one or more actions. Each action shown in is schematic. In implementation each action includes the necessary GUI elements and controls needed for the action. That is in processing operation the GUI elements retrieved from a code repository e.g. code repository of .

Actions in an action set and actions in a chain are managed by the action sequence module in conjunction with the action module and the metadata repository . The action sequence module can be designed according to well known design patterns such as the Chain of Responsibility Strategy and Mediator patterns or variations thereof. All promote loose coupling of parts of the module and allow a request to be passed from object to object until serviced.

In an embodiment actions in an action set and actions in a chain use an information object to pass information between them. This delta information object is created by the action set or by the first action in the chain. Each action when invoked may query the metadata repository i.e. repository in for the delta object. Each action will use the delta object and when finished commit the object with any changes back to the repository.

Herein when introducing elements of embodiments of the invention the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and to mean that there may be additional elements other than the listed elements.

An embodiment of the present invention relates to a computer storage product with a computer readable medium having computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hardwired circuitry in place of or in combination with machine executable software instructions.

The foregoing description for purposes of explanation used specific nomenclature to provide a thorough understanding of the invention. However it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed obviously many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications they thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the following claims and their equivalents define the scope of the invention.

