---

title: Efficient knowledge representation in data synchronization systems
abstract: A variety of flexible conflict resolution policies are provided for loosely coupled devices to implement according to a variety of different synchronization scenarios. Choosing a conflict resolution policy, such as “Most Frequent Updater,” “Priority,” “PerCent Change,” “Arbiter Deadlock Resolution,” etc., enables devices to select how and when to resolve such synchronization conflicts. In addition, with reference to a conflict log, a user or synchronizing application can roll back synchronization state to a time before a conflict may have arisen, so that the user or application can undo a resolution of a conflict and/or the user or application can apply an alternative conflict resolution policy moving forward from that time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07620659&OS=07620659&RS=07620659
owner: Microsoft Corporation
number: 07620659
owner_city: Redmond
owner_country: US
publication_date: 20070209
---
The subject disclosure relates to conflict resolution for multi master synchronization of data among distributed devices.

There are a variety of distributed data systems that have devices and objects that share data with one another. For instance music sharing systems may synchronize music between a PC a cell phone a gaming console and an MP3 player. For instance email data may be synchronized among a work server a client PC and a portable email device. Today to the extent such devices synchronize to maintain common information wherever changes take place the synchronization takes place according to a static setup among the devices. However when these devices are loosely coupled such that they may become disconnected from communications with each other e.g. when a cell phone is in a tunnel or when the number of devices to be synchronized is dynamic it is desirable to have a way for the devices to determine what changes each other device needs when they re connect to one another or as they join the network. Moreover there is a need to determine what conflicts or ambiguities may exist with respect to what data to propagate or replicate to other devices such as when two different devices independently make changes to respective copies of the same data.

Today as shown in there are various examples where a master node synchronizes in a dedicated manner with a client node such as when an email server synchronizes with a dedicated email client. Due to the dedicated synchronization between the two devices the state of the necessary knowledge to synchronize between the two devices can be tracked by the master node . Such knowledge can also optionally be tracked by client node as well. However when the number of synchronizing devices increases and when the connection between master node and a client node may become disconnected at times not only does tracking the necessary knowledge across all of those devices become a difficult problem but the number of conflicts from a synchronization standpoint proliferate as well. This is because the opportunity for different devices to evolve a set of data being synchronized independently increases when the devices increase in number and when they can become easily disconnected.

A problem with current solutions is that they often base their synchronization semantics solely on clocks or logical watermarks for a specific node e.g. the email server as opposed to any node. These systems can work well in cases of a single connecting node or master. However these systems are problematic when the topology or pattern in which the nodes connect changes unpredictably. Moreover as the situations and circumstances under which a complex set of devices may wish to synchronize data in a loosely coupled network increase there is an even greater need for flexibility and control over the way that those devices handle conflicts.

With respect to the proliferation of conflicts in a multi master synchronization scenario a need for node independent synchronization knowledge and conflict handling according to a variety of resolution measures arises when computers in a topology can change the way they connect to each other or as the number of computers grows. For instance with a media player it might be desirable to synchronize among multiple computers and multiple websites. In most instances most applications can only synchronize data between a few well known endpoints e.g. home PC and media player in which case a static conflict resolution measure is enforced e.g. home PC always wins conflicts. As the device community evolves over time for a user of the media player application however the need for data synchronization flexibility for the music library utilized by the devices increases as does the flexibility with which the devices handle conflicts when synchronizing with one another in various orders.

Thus any distributed data system that wishes to share common information across multiple loosely coupled devices needs an efficient way to represent what changes to the common information of which they are aware and what changes of which they are unaware and needs a way to resolve conflicts for such changes when they conflict with one another. For a conceptual illustration of the problem imagine four friends who each go see a sneak preview of an upcoming movie. Unfortunately the movie studio has decided to limit distribution of the movie and each friend is limited to seeing only a thirty minute segment of the movie. When the friends get back together they have a meeting where each describes the beginning through the end of the segment they watched to attempt to collectively piece together as much of the movie as possible.

If by chance however the fourth friend cannot attend the meeting then the one of the first three friends e.g. the second friend who talks to the fourth friend next will attempt to add the collective knowledge of the movie by the first three friends to the knowledge of the movie by the fourth friend. At that time however the complete set of knowledge of the movie as between the four friends is understood only by the second and fourth friends. Then when either of the first friend or third friend encounters either of the second or fourth friend the first or the third friend will gain the collective knowledge of the movie as well. Synchronization is finally complete when each of the four friends understands the collective knowledge of the movie by the four friends.

However to show the opportunity for conflict suppose that the first friend prior to encountering either the second or fourth friend talked to a fifth friend who gave an account of some missing pieces from the movie that differed from what the second or fourth friend later tells the first friend. The first friend will not know which account of the movie to take as the true version of what happened. Often times the first friend will perform some sort of heuristic guess as to which is the best account. The first friend might take into account length of relationship history of trust with one friend or another or other like factors when considering which story to adopt and which to discard. In other cases the first friend might remember both accounts for a short while and wait for additional information prior to resolving the conflict. In a similar fashion it would thus also be desirable to allow devices to synchronize with one another and resolve conflicts as they arise among distributed devices synchronizing data in a loosely coupled system.

In the above example the movie is analogous to common information to be shared across devices and the friends are analogous to the loosely coupled devices. In this regard when the friends devices come back together what is needed is a mechanism for representing what each of the connected individuals devices know and do not know and for resolving conflicts among such knowledge i.e. for determining true knowledge so that the common information can be pieced together to the maximum extent permitted by the collective knowledge of the individuals devices. Loosely connected systems of device nodes thus need an efficient way to describe the data they have where they received and what data they need from another node involved in the conversation and how to resolve conflicts among the devices.

In short conflicts are an inevitable problem that arises with 2 way multi master sync topologies. Users or applications are free to make concurrent modifications to the same item on different endpoints leaving no way for a synchronization solution to be able to determine which change s to correctly accept. As discussed existing conflict resolution policies allow for the automatic resolution of conflicts through the application of some pre determined policy such as last writer wins. However given the proliferation of different end point types a single pre determined policy is not sufficient to address the myriad of conflict resolution policies that have been identified for a corresponding number of evolving device synchronization scenarios among loosely coupled devices. In this regard the challenge that is not addressed adequately today is the balancing act of making synchronization applications flexible enough to implement different conflict policies while at the same time making them robust enough to store apply and rollback these conflicts in a deferred or automated fashion.

Current solutions fall short in regards to flexibility and or robustness. First many solutions offer only a handful of popular conflict resolution policies such as last writer wins. This lack of flexibility will quickly become unacceptable as different end points become popular and users need to synchronize non traditional types of data. In addition many applications do not support the ability to apply conflict resolution policies or do not maintain enough conflict meta data to roll back forward the changes associated with conflicts in an automated or UI driven fashion.

In this regard complications arise when attempting to synchronize among loosely coupled devices when there is no mechanism for understanding the collective knowledge of the set of devices determining the conflicts in such knowledge and resolving those conflicts according to flexible policies for devices that become connected. Additional detail about these and other deficiencies in the current state of synchronization among loosely coupled devices may become apparent from the description of the various embodiments of the invention that follows.

In consideration of the foregoing the invention provides conflict resolution for two way multi master synchronization topologies. Where devices of a set of synchronizing devices independently evolve information being synchronized synchronization conflicts among the versions inevitably arise. The invention provides efficient and flexible ways for a set of devices to select how to resolve conflicts from a set of conflict resolution policies when exchanging knowledge among synchronizing nodes when synchronizing. Exemplary conflict resolution policies include A Most Frequent Updater B Priority C Change D Deadlock Resolution E Highest Degree and F Highest Centrality Closeness. 

Conflicts may also be logged in a conflict log to defer conflict resolution until later. In addition a user or application can roll back synchronization state to a time before a conflict may have arisen so that the user or application can undo the conflict and or the user or application can apply an alternative set of conflict resolution policies.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. Instead the sole purpose of this summary is to present some concepts related to some exemplary non limiting embodiments of the invention in a simplified form as a prelude to the more detailed description of the various embodiments of the invention that follows.

As discussed in the background there is no way to efficiently represent synchronization knowledge and also resolve conflicts according to a flexible set of circumstances for a set of loosely coupled devices that do not remain in dedicated contact with one another. Where dedicated contact can be presumed any changes can immediately or periodically be pushed out to the devices that should receive them and conflicts can be resolved in accordance with a static policy. Where dedicated contact cannot be presumed however with devices appearing and disappearing efficiently representing what those devices know and do not know from a synchronization standpoint and resolving conflicts when they arise between devices is desirable.

Accordingly the invention enables efficient and flexible conflict resolution for distributed devices in data synchronization systems. An efficient mechanism is provided to ensure whenever a device has access to other synchronizing device s in a loosely coupled network the device will exchange knowledge with the other device s in order to determine which changes should be retrieved by the device and conveyed to the other device s and what conflicts to resolve as part of the synchronization operation according to a flexible set of conflict resolution policies.

In this fashion while a first device and a third device may never communicate directly if each is able to connect to a second device and resolve conflicts vis vis the second device a collective conflict free share of knowledge can be achieved across all three devices determining what changes each of the devices should receive from each of the other devices in a manner that resolves any conflicts that are encountered. Considering the proliferation of devices that share data such as music email pictures videos advantageously the knowledge exchange and conflict resolution techniques of the invention are scalable to any number of devices and any number of independent knowledge bases i.e. different sets of common information simultaneously i.e. anywhere any evolving set of devices wish to share data. Various embodiments of representing such knowledge and resolving conflicts in a distributed system are described in more detail below.

In various exemplary non limiting embodiments described below knowledge is efficiently represented in data synchronization systems and where knowledge between devices conflicts from a synchronization standpoint the invention provides various methods for resolving conflicts among synchronizing devices for different synchronization contexts. Non limiting benefits that can be achieved with the invention include an efficient exchange of knowledge between connected devices that sends only the minimum data needed by a first node from a second node. The invention includes the ability to efficiently and correctly recognize disagreements over the state of data i.e. conflicts between a first node and a second node the ability to synchronize an arbitrary number of nodes and the ability to synchronize any node via any other node i.e. the ability to work in a peer to peer multi master synchronization environment.

Advantageously during the knowledge exchange conflict detection processes and or occur to handle conflicts with respect to the evolution of data across different devices. Once a conflict is detected the devices and may resolve the conflicts at once ensuring that devices and maintain the same data whether originating from device or device . Alternatively the conflicts may be logged in a conflict log for later resolution. Either way conflict resolution for any conflicts that are detected may be handled via any one or more of a flexible set of conflict policies described in more detail below.

Sync module may include a sync initiation module which may initiate synchronization with a second device if authorized e.g. via authorization module and connected to the second device. Sync module may also include an I O module responsive to the initiation of synchronization by sending knowledge about the set of objects to the second device not shown and for receiving back knowledge of the second device and changes to be made to the set of objects originating from the second device. In turn a sync analysis module operates to apply the changes to be made to the set of objects and to compare knowledge from the second device with the knowledge of the first device in order to determine changes to send to the second device to complete synchronization between the devices.

As shown sync analysis module of sync module may include a conflict detection and analysis module that operates to handle conflicts according to any one or more of a variety of conflict resolution policies defined for the synchronization context. The conflict detection and analysis module may automatically behave according to conflict settings defined by an administrator of the device or defined by a synchronizing application to perform conflict resolution satisfactorily for the synchronization context.

Alternatively module can operate to detect conflicts when synchronizing and then to store metadata associated with the conflicts in a conflict log . The conflicts may then be resolved at a later time e.g. periodically or in batch format or according to application or user input for how and when to resolve conflicts. For instance in a non limiting embodiment a user interface UI not shown may be presented to the user that presents the conflicts to a user so that the user may select how to resolve the conflicts resulting from synchronization.

Advantageously the invention operates to perform synchronization for a set of devices all interested in maintaining the latest versions of a set of objects but also allows such devices to come into connection and out of connection with the other objects of the set. Whenever a device comes back into connection with other device s of the set of devices via one or more networks the device regains collective knowledge that is as up to date as the other device s represent with their collective knowledge and automatically resolves or logs conflicts according to the techniques described herein. In this fashion even loosely connected devices may come into and out of contact with a set of devices and then relearn all the knowledge it has missed while resolving or recording any conflicts encountered by coming into contact with any set of devices that possesses the latest set of collective knowledge.

Similarly in accordance with the invention if there is a conflict between knowledge and knowledge through the same propagation of knowledge from device to device to device to device the conflict will be resolved among all of the devices when synchronization is complete. For instance suppose that devices and are all synchronizing an object KN. Where only one device makes a change to object KN and then that change is propagated to the rest of the devices as part of a synchronization operation there are no problems. However because devices are allowed to behave autonomously and independently evolve data even data being synchronized device might change object KN to form an updated object KN and device might change object KN to form an updated object KN different from KN. When synchronizing the object KN among all of the devices and a conflict arises as to which version of KN to propagate to all of the devices KN or KN The invention provides a flexible set of conflict resolution policies for handling such circumstances.

With more devices sharing knowledge about common information to be shared all of the devices benefit because the knowledge exchange of the invention is agnostic about from which device collective knowledge comes. Much like the scenario described in the background of the invention where three friends exchange movie knowledge and then any one of the three meet with a fourth friend to put the whole picture together the devices of the invention each independently operates to try to gain as much knowledge about information to be shared among the devices from any of the other devices to which it is connected. Moreover much like the friends exchanging movie knowledge if one of the friends appears to have incorrect or otherwise inconsistent information with the collective knowledge the friends will resolve such inconsistency in a way that is satisfactory to all. For instance if three friends think events occurred a first way and only one friend feels it happened differently the likely result is that the three friends will not adopt the sole account of the way the movie occurred against the weight of the greater evidence.

In turn much like the scenario described in the background where the second friend meets the fourth friend first and where only the second and fourth friend share the collective knowledge of all four as a result the first and third friend nonetheless benefit because it is unknown whether the first friend will see the second friend next or the fourth friend next but the first friend will learn the collective knowledge from either. The same applies to the third friend. Similarly connected devices of the invention exchanging common information benefit from any other knowledge accrued by any other connected devices because knowledge is collective per all of the other devices with which each of the exchanging devices has had prior contact. In the same way connected devices of the invention benefit from any conflict resolution already performed by other devices in that the conflict resolved data is propagated to the rest of the devices.

In exemplary non limiting detail a method is described in further detail for two nodes to engage in a conversation and at the end of the conversation to have equivalent knowledge for the concerned data set. As illustrated above in connection with B and the invention is scalable beyond two nodes by creating a knowledge exchange and conflict resolution capability for each new device entering the peer to peer network.

At time T 4 as shown in once any of devices or becomes connected again to either of devices or the conflict will present itself. It will not be clear during synchronization what the correct knowledge to propagate is KN or KN . Accordingly a conflict resolution mechanism must be provided to resolve the conflict. As mentioned the conflict once detected can be resolved immediately according to a conflict resolution policy adopted for the synchronization context or the conflict can be logged for later resolution e.g. batch conflict resolution manual resolution delayed resolution to wait for additional information to help decide etc. .

At t 2 however nodes and independently evolve object A. For simplicity of representation node creates the 6version of A and node creates the 7version of A or vice versa . At time t 3 as a result of a subsequent synchronization process it is unclear whether the 6or 7version should be kept as the common object between node and node . Thus a conflict resolution mechanism is desirable.

In addition for any knowledge exchange there is a transfer of node s knowledge Kto node and also a transfer of node s knowledge Kto node . However for conflict detection purposes as shown in the conflict can be detected after just one transfer of knowledge in one direction. Accordingly in one embodiment of the invention the entire knowledge exchange need not be completed prior to initiating conflict detection and resolution. As shown in if node sends knowledge Kto node node can detect that there is a conflict between object A originating from node and object A originating on node . If the conflict is then resolved by node this can save node from performing the same conflict detection since node can dictate to node what the correct version of object A is. Alternatively it may be desirable for each device to perform conflict resolution differently in which case both nodes and can carry out independent conflict detection and resolution.

Exemplary conflict resolution policies that may be implemented in connection with a knowledge exchange among nodes of a distributed multi master synchronization environment are shown in the flow diagrams of . In each of different policies are enumerated that reflect different synchronization contexts. When different devices are loosely coupled and different types of data are being synchronized among them one may consider that a variety of choices might make sense for a given context in order to resolve conflicts.

For instance as shown in devices and devices initially represent an object KN as part of knowledge and respectively. Then as shown by the evolutionary flow changes occur to the copy of object KN on device to evolve the object KN to KN then again to KN and again to KN . In parallel device evolves the object KN to Kn. Thus when device synchronizes with again there is a conflict between the version KN on device and the version Kn on device . In accordance with one policy that may be implemented for resolving conflicts in accordance with the invention the most frequent updater since the last synchronization time is selected to win the conflict. In this case node updated object KN three times to reach version KN in contrast to only one change that occurred at device to reach Kn. Thus where the most updates since a prior synchronization serves to resolve the conflict for a given context this is an apt policy to implement. For instance where a document collaboration is being handled via synchronization and one user has made many changes to a document at many different times whereas another collaborator has only made one change to the document it may make sense to have the changes made by the most frequent updater resolve the conflict.

Yet another policy for conflict resolution that can be applied in accordance with the invention is shown in . In this case there are four devices and with knowledge and . In this scenario conflicts are resolved according to the highest affinity synchronization nodes i.e. the nodes that are connected to the highest number of other nodes. Such a policy disfavors end points that synchronize with only one or a few different nodes as compared to nodes that synchronize with a higher number of nodes. For instance as shown in the two nodes and independent evolve copies of an object KN being synchronized to KFZ and Kn respectively. Since device synchronizes with three devices and whereas device synchronizes only with one other device according to this policy the conflict with respect to object KN is resolved in favor of device . Such a highest affinity measure may be used to gauge the importance associated with an end point.

Still another exemplary non limiting embodiment for resolving conflicts during a knowledge exchange in accordance with the invention is illustrated in with respect to a synchronizing network of nodes N N N N N N N N N and N. To resolve conflicts according to this scenario a principle of highest centrality closeness is applied wherein the degree to which an end point is close to all other end points across all sync relationships for a set of devices is measured. Highest centrality closeness identifies end points with larger information networks and can be calculated by taking the inverse of the sum of the shortest paths between an end point and all other endpoints. Overall the closer a device is to all other end points the greater the weight or priority applied to the device when resolving conflicts. For instance suppose node N and node N require conflict resolution. In this case N is connected directly to only two other nodes N and N whereas node N is connected to three nodes N N and N. Under the principles of highest affinity described in connection with node N would be selected as the conflict winner. However the result changes when highest centrality closeness is applied since without even performing the calculation one can observe that node N is closer to all other nodes than node N. An exemplary non limiting measurement of this may be performed as follows.

With respect to node N the distance to node N is 2 nodes away the distance to node N is 1 node away the distance to node N is 1 node away the distance to node N is 2 nodes away the distance to node N is 2 nodes away the distance to node N is 2 nodes away the distance to node N is 2 nodes away the distance to node N is 2 nodes away and the distance to node N is 3 nodes away. Adding up these distances yields a total distance of 18 nodes to all other nodes. Performing the same calculation for node N the distance to node N is 4 nodes away the distance to node N is 3 nodes away the distance to node N is 2 nodes away the distance to node N is 1 node away the distance to node N is 1 node away the distance to node N is 4 nodes away the distance to node N is 2 nodes away the distance to node N is 2 nodes away and the distance to node N is 1 node away. Adding up these distance yields a total distance of 20 nodes. Accordingly N wins the conflict over N. Other measurements or proxies for highest centrality closeness may also be applied. For instance to save measurement time only the nodes at the edge of the network may be considered which in includes N N N N and N i.e. the devices connected to only one other node.

Thus in accordance with the invention a variety of conflict resolution policies may be applied alone or in combination to determine which node trumps the other node in the event of a conflict. If independent versioning is OK or desirable no conflict resolution is another option.

In sum the proliferation of new end points and data types being synchronized beyond email are going to require new conflict resolution policies that are flexible enough for ever evolving synchronization scenarios. Some conflict resolution policies identified herein include A Most Frequent Updater wherein the end point that has performed the most updates since the last synchronization wins B Priority wherein end points are assigned priorities and those priorities are used to determine a winner C Change wherein replicas with the highest percentage of change win D Deadlock Resolution wherein an arbiter is chosen to determine a winner for conflicts that cannot be resolved E Highest Degree wherein end points participating in the largest number of sync relationships wins and F Highest Centrality Closeness wherein the degree an end point is close to all other end points across all sync relationships is measured.

Some of the resolution policies mentioned above are non traditional and assuming that an application using the synchronization capabilities of the present invention adheres to a set of patterns any of these policies can be applied without losing the ability to leverage the conflict resolution features provided by the invention. Specifically applications are allowed to defer conflict resolution or automatically resolve conflicts using the policy provided. In the case of deferral a client will be given conflict information to store which in one exemplary non limiting embodiment includes the item version data and knowledge vector that would be learned if the change were to be applied. Then clients can at a later time enumerate through these conflicts. Thus advantageously the invention enables the enumeration of stored conflicts per item knowledge stored with a conflict and the ability to apply custom conflict resolution policies.

The systems and methods for resolving conflicts of the invention may also be applied to the context of resolving in memory data on the same provider. In such context the in memory data may not be backed by a physical store e.g. it might be used in a graph solver on the CPU to synchronize nodes. The invention may also be applied in the context of scene graphs especially as they become more distributed on multi core architectures and calculations are written directly to an in memory data structure such as a volumetric texture.

One of ordinary skill in the art can appreciate that the invention can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment connected to any kind of data store. In this regard the present invention pertains to any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes which may be used in connection with detecting and resolving synchronization conflicts in accordance with the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage. The present invention may also be applied to standalone computing devices having programming language functionality interpretation and execution capabilities for generating receiving and transmitting information in connection with remote or local services and processes.

Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for objects such as files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may implicate the systems and methods for detecting and resolving synchronization conflicts in accordance with the invention.

It can also be appreciated that an object such as may be hosted on another computing device etc. or etc. Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. any of which may employ a variety of wired and wireless services software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks. Any of the infrastructures may be used for exemplary communications made incident to the detecting and resolving of synchronization conflicts according to the present invention.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power lines for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11B or wired e.g. Home PNA Cat 5 Ethernet even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media or other graphical data may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also digital interconnects for clusters of media devices. All of these network environments and others that may emerge or already have emerged as protocol standards may be interconnected to form a network such as an intranet that may be connected to the outside world by way of a wide area network such as the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently any of the computing devices of the present invention may share and communicate data in any existing manner and no one way described in the embodiments herein is intended to be limiting.

The Internet commonly refers to the collection of networks and gateways that utilize the Transmission Control Protocol Internet Protocol TCP IP suite of protocols which are well known in the art of computer networking. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over network s . Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system with which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. In this regard in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as an example computers etc. can be thought of as clients and computers etc. can be thought of as servers where servers etc. maintain the data that is then replicated to client computers etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting services or tasks that may implicate the detection and resolution of synchronization conflicts in accordance with the invention.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over any of a variety of communications media thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects utilized pursuant to the techniques for detecting and resolving synchronization conflicts in accordance with the invention may be distributed across multiple computing devices or objects.

Client s and server s communicate with one another utilizing the functionality provided by protocol layer s . For example HyperText Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW or the Web. Typically a computer network address such as an Internet Protocol IP address or other reference such as a Universal Resource Locator URL can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium e.g. client s and server s may be coupled to one another via TCP IP connection s for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with server s in communication with client computer s via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet GSM network the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to synchronize data with one or more devices of a set of networked devices.

In a network environment in which the communications network bus is the Internet for example the servers etc. can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc. as may be characteristic of a distributed computing environment.

Also communications may be wired or wireless or a combination where appropriate. Client devices etc. may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects etc. and with connections or access to various types of storage elements or objects across which files or data streams may be stored or to which portion s of files or data streams may be downloaded transmitted or migrated. Any one or more of computers etc. may be responsible for the maintenance and updating of a database or other storage element such as a database or memory for storing data processed or saved according to the invention. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other like devices and databases .

As mentioned the invention applies to any device wherein it may be desirable to synchronize data across a set of devices. It should be understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the present invention i.e. anywhere that a device may synchronize or otherwise receive process or store synchronization data. Accordingly the below general purpose remote computer described below in is but one example and the present invention may be implemented with any client having network bus interoperability and interaction. Thus the present invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as an interface to the network bus such as an object placed in an appliance.

Although not required the invention can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates in connection with the component s of the invention. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that the invention may be practiced with other computer system configurations and protocols.

With reference to an exemplary remote device for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up may be stored in memory . Memory typically also contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example computer could include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and or an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. A hard disk drive is typically connected to the system bus through a non removable memory interface such as an interface and a magnetic disk drive or optical disk drive is typically connected to the system bus by a removable memory interface such as an interface.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through user input and associated interface s that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics subsystem may also be connected to the system bus . A monitor or other type of display device is also connected to the system bus via an interface such as output interface which may in turn communicate with video memory. In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer which may in turn have media capabilities different from device . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter. When used in a WAN networking environment the computer typically includes a communications component such as a modem or other means for establishing communications over the WAN such as the Internet. A communications component such as a modem which may be internal or external may be connected to the system bus via the user input interface of input or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s managed code platform i.e. .NET includes servers building block services such as Web based data storage and downloadable device software. Generally speaking the .NET platform provides 1 the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them 2 increased interactive capability for Web pages enabled by greater use of XML rather than HTML 3 online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications such as e mail for example or software such as Office .NET 4 centralized data storage which increases efficiency and ease of access to information as well as synchronization of information among users and devices 5 the ability to integrate various communications media such as e mail faxes and telephones 6 for developers the ability to create reusable modules thereby increasing productivity and reducing the number of programming errors and 7 many other cross platform and language integration features as well.

While some exemplary embodiments herein are described in connection with software such as an application programming interface API residing on a computing device one or more portions of the invention may also be implemented via an operating system or a middle man object a control object hardware firmware intermediate language instructions or objects etc. such that the methods for detecting and resolving synchronization conflicts in accordance with the invention may be included in supported in or accessed via all of the languages and services enabled by managed code such as .NET code and in other distributed computing frameworks as well.

There are multiple ways of implementing the present invention e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the systems and methods for detection and resolution of synchronization conflicts in accordance with the invention. The invention contemplates the use of the invention from the standpoint of an API or other software object as well as from a software or hardware object that performs synchronization operations in accordance with the invention. Thus various implementations of the invention described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the subject matter disclosed herein is not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

As mentioned above while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to synchronize among a set of loosely coupled devices. For instance the detection and resolution of synchronization conflicts in accordance with the invention may be applied to the operating system of a computing device provided as a separate object on the device as part of another object as a reusable control as a downloadable object from a server as a middle man between a device or object and the network as a distributed object as hardware in memory a combination of any of the foregoing etc. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code and nomenclature that achieves the same similar or equivalent functionality achieved by the various embodiments of the invention.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the synchronization and conflict resolution capabilities of the present invention e.g. through the use of a data processing API reusable controls or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer etc. the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.

Furthermore the disclosed subject matter may be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer or processor based device to implement aspects detailed herein. The term article of manufacture or alternatively computer program product where used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick . Additionally it is known that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN .

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flowcharts of A B C D A B C D A B C D E F and . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example while exemplary network environments of the invention are described in the context of a networked environment such as a peer to peer networked environment one skilled in the art will recognize that the present invention is not limited thereto and that the methods as described in the present application may apply to any computing device or environment such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate.

While exemplary embodiments refer to utilizing the present invention in the context of particular programming language constructs the invention is not so limited but rather may be implemented in any language to provide methods for detecting and resolving conflicts in accordance with the invention. Still further the present invention may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

