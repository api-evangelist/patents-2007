---

title: Automatically adjusting scheduled inventory of switched fabrics
abstract: A mechanism is provided in a storage management application that automatically reconfigures agents and scheduled probes of agents in cases where the agents do not automatically reconfigure themselves to manage a newly formed fabric after fragment segmentation. The solution does not burden the storage administrator to reconfigure agents or to reconfigure regularly scheduled inventory probes through storage management applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08655999&OS=08655999&RS=08655999
owner: International Business Machines Corporation
number: 08655999
owner_city: Armonk
owner_country: US
publication_date: 20070719
---
The present application relates generally to an improved data processing system and method. More specifically the present application is directed to a feature for automatically adjusting scheduled inventory of fabrics following fabric merges and segmentations.

Fibre channel FC storage area networks SANs or fabrics are comprised of one or more fibre channel switches. The fibre channel switches are connected to each other through inter switch links ISLs which are active fibre channel cable connections from a port on one switch to a port on another switch. An ISL can break if the cable is unplugged or if a port on one of the switches is disabled or goes into a faulty state. This breakage may be planned by a storage administrator or unplanned if for instance a cable is accidentally unplugged. If all ISLs between one set of switches and another set of switches in the fabric are broken this results in fabric segmentation. A segmentation of one fabric means that the fabric splits into two fabrics two sets of interconnected fibre channel switches that have no connectivity from one set to the other.

Storage management software is used by storage administrators for multiple tasks including understanding the connectivity topology of a SAN and knowing the properties and states of fibre channel switches and storage devices connected to the SAN. A storage management software application may use agents also referred to as data sources to collect the latest available information about the topology and the switches and devices on the SAN. The agents are responsible for providing such information to client applications through standard or proprietary interfaces. Examples of agents are storage management initiative specification SMIS agents common information model CIM object manager OM CIMOM agents Brocade switches that are Brocade application program interface API servers simple network management protocol SNMP agents and host in band fabric agents that collect fabric information in band.

Certain types of agents communicate to only one switch in each fabric and can be configured programmatically to manage more than one fabric. In order to manage more than one fabric one switch for each fabric must be configured with the agent. In one example the agent may communicate with the one proxy switch for the fabric in order to gather information about all devices for the fabric. If fabric segmentation occurs the switches and devices on the fabric that does not contain the proxy switch become no longer visible to the agent. Note that for this type of agent there is no point in configuring the agent with all switches in a fabric in advance in anticipation of an accidental segmentation. The agent only communicates to the first proxy switch even after fabric segmentation.

Thus fabric segmentation presents a problem for storage management applications. A user of a storage management application may have set up a regularly scheduled inventory collection also referred to as a probe of the fabric through the agent. If the fabric segments the agent no longer provides information on a set of the switches and devices because these are now on a separate fabric for which the agent is not configured. The new fabric is not visible to the agent because the agent is only configured with one switch from the original fabric.

A user may be aware of the fabric segmentation either because it was planned or because the storage management application has detected the segmentation and alerted the user but the user may not be aware that the scheduled fabric probe no longer collects information on devices for which it had formerly collected information. The storage management application has completely lost communication with a set of fibre channel switches and the user cannot manually add the newly formed fabric to the scheduled probe job because no agent knows any properties including the world wide name WWN of the fabric or other information for the new fabric.

Furthermore a switch may move from one fabric to another or two fabrics may merge to form one fabric even though the sets of switches are unchanged. In addition a new switch may be added to a fabric which may change the WWN of the fabric. The WWN is a unique identifier for an entity such as a port switch or the fabric itself. The fabric may get its WWN from a switch however when a new switch joins the fabric it may change the WWN of the fabric.

One known solution is to redesign the behavior of the fabric agent so that the agent automatically reconfigures itself to manage both fabrics after fabric segmentation. However there are existing agents such as the Brocade SMIS agent which do not automatically reconfigure themselves. Thus this solution does not work for many existing fabrics today.

Another solution is for the storage administrator to use multiple agents for redundancy. Each agent can be configured with a switch in the fabric and all agents can manage the same fabric. For proxy agents such as the Brocade SMIS agent this requires a server to be used to host each agent. Having many servers to host separate agents for the same fabric is unfavorable with storage administrators.

In one illustrative embodiment a computer program product comprises a computer readable storage medium having a computer readable program embodied thereon. The computer readable program when executed on a computing device causes the computing device to responsive to a physical change in a first fabric comprising a first plurality of switches automatically detect by a monitor in a storage management application the change in the first fabric. The change results in a new fabric. The computer readable program further causes the computing device to responsive to the monitor detecting the change in the first fabric automatically update by a scheduler in the storage management application a scheduled probe job definition to manage the new fabric and configure by the monitor a fabric agent to manage the new fabric. The computer readable program further causes the computing device to trigger by the scheduler the fabric agent to run a probe job according to the updated probe job definition.

In another illustrative embodiment a storage management apparatus in a storage area network comprises a fabric agent a user interface that is configured to allow a user to schedule a regular probe of a first fabric comprising a first plurality of switches through the fabric agent a discover mechanism that is configured to access the fabric agent to discover managed fabrics and their switches a monitor that is configured to automatically detect when a physical change to the first fabric occurs wherein the change results in a new fabric an agent configuration component that is configured to configure the fabric agent to manage the new fabric responsive to the monitor detecting the change to the first fabric a probe mechanism that is configured to probe the first fabric through the fabric agent on schedule and a scheduler that is configured to trigger the probe mechanism to probe the fabric through the fabric agent according to a scheduled probe job. The scheduler is configured to automatically update the scheduled probe job responsive to the monitor detecting the change in the first fabric. The scheduler is further configured to trigger the fabric agent to run a probe job according to the updated probe job definition.

In a further illustrative embodiment a method for automatically adjusting scheduled probes of fabrics comprises monitoring by a fabric agent a first fabric comprising a first plurality of switches and responsive to a physical change in the first fabric automatically detecting by a monitor in a storage management application the change in the fabric. The change results in a new fabric. The method further comprises responsive to the monitor detecting the change in the first fabric automatically updating by a scheduler in the storage management application a scheduled probe job definition to manage the new fabric and configuring by the monitor the fabric agent to manage the new fabric. The method further comprises triggering by the scheduler the fabric agent to run a probe job according to the updated probe job definition.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the exemplary embodiments of the present invention.

With reference now to the figures and in particular with reference to B C and exemplary diagrams of storage area networks are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that B C and are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the figures depict pictorial representations of an exemplary storage area network in which aspects of the illustrative embodiments may be implemented. With reference to storage area network SAN may include a network of computers in which aspects of the illustrative embodiments may be implemented. SAN contains hosts and which are connected to switch and host which is connected to switch . Switch is connected to switch via inter switch link ISL . Switch is also connected to switch via ISL switch is connected to switch via ISL and switch is connected to switch via ISL . Switches and form a fabric.

Storage subsystem is connected to switch . Storage subsystem is connected to switch . Storage subsystems and are connected to switch . Storage subsystems and are connected to switch . Switches and may be for example fibre channel switches. Alternatively switches and may be other types of switches such as serial attached SCSI SAS switches or the like. Storage subsystems may be for example fibre channel storage enclosures SAS storage enclosures single storage devices or any combination of storage devices and enclosures.

Each of hosts and can see each of storage subsystems . That is each of the hosts has a communications path through the fabric to each of the storage subsystems. In addition switches and form a mesh which is a configuration in which one ISL break does not cause fabric segmentation. An ISL can break if the cable is unplugged or if a port on one of the switches is disabled or goes into a faulty state. This breakage may be planned by a storage administrator or unplanned if for instance a cable is accidentally unplugged. If all ISLs between one set of switches and another set of switches in the fabric are broken this results in fabric segmentation. A segmentation of one fabric means that the fabric splits into two fabrics two sets of interconnected fibre channel switches that have no connectivity from one set to the other.

Fabric segmentation occurs when ISL breaks result in two separate fabrics. In ISLs and are broken segmenting the fabric. Hosts and can see storage subsystems and through switches and . Host can see storage subsystems and through switches and . In ISLs and are broken. Hosts and can see storage subsystems and through switches and . Host can see storage subsystem via switch .

In accordance with an illustrative embodiment a mechanism is provided that automatically reconfigures agents and scheduled probes of agents in cases where the agents do not automatically reconfigure themselves to manage a newly formed fabric after fragment segmentation. The solution does not burden the storage administrator to reconfigure agents or to reconfigure regularly scheduled inventory probes through storage management applications.

Storage management initiative specification SMIS is a guide to building systems using modules that plug together. SMIS compliant storage modules interoperate in a system and function in consistent predictable ways regardless of which vendor built them provided that the modules use CIM language and adhere to sets of specifications called CIM schema. Simple network management protocol SNMP is a widely used network monitoring and control protocol. Data are passed from SNMP agents which are hardware and or software processes reporting activity in each network device hub router bridge etc. to the workstation console used to oversee the network. The agents return information contained in a management information base which is a data structure that defines what is obtainable from the device and what can be controlled turned off on etc. .

Both SMIS and SNMP are out of band. SNMP is out of band communication directly between a storage management application and a switch that supports SNMP over an Internet Protocol IP network. For proxy SMIS Agents the communication between the storage management application and the SMIS Agent is always out of band over an IP network. The communication between the proxy SMIS Agent and a switch may be in band or out of band although all known implementations of proxy SMIS Agents for switches use out of band communication with the switch es . The case where communication between the SMIS Agent and the switches is out of band is relevant for this invention.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as hosts and in in which computer usable code or instructions implementing the processes for illustrative embodiments of the present invention may be located.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in and may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in and . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

User interface allows a user to schedule a regular probe of a fabric through fabric agent . For instance the user may schedule a nightly probe. The schedule is persisted in repository . Scheduler triggers probe mechanism to probe the fabric through fabric agent on schedule. The results of the probe including the details of the fabric topology are persisted in repository .

Monitor detects when fabric segmentation or other changes to the fabric s occur. Monitor may detect fabric segmentation either through an event notification from fabric agent or from analysis of the most recent probe results compared to the previous probe results for example. Monitor may access repository to retrieve a list of switches that are no longer visible by fabric agent . Monitor then passes a list to agent configuration mechanism which configures fabric agent to manage the identified switches. Agent configuration mechanism may configure fabric agent using an application programming interface API call for example.

Monitor then triggers discover mechanism to access fabric agent to discover managed fabrics and their switches. Discover mechanism retrieves data about the fabrics switches and relationships between them from fabric agent and discover mechanism persists them in repository . Scheduler then updates the scheduled probe of the original fabric in repository to include the new fabric as well. User interface or another mechanism like a CLI updates repository for the scheduled probe job and entities to be probed. Discover mechanism or probe mechanism updates repository with entities discovered re discovered such as switches fabrics et cetera. Scheduler automatically triggers probe mechanism to run the updated probe. Probe mechanism gathers the information from fabric agent and then persists the information in repository . The user can then see in user interface that the scheduled probe job now includes the original fabric and the new fabric that resulted from segmentation.

Furthermore monitor may detect when a switch is removed from one fabric and added to another fabric. Monitor triggers discover mechanism which retrieves data about the fabrics switches and relationships between them from fabric agent and discover mechanism persists them in repository including the fabric to which the switch was moved. Monitor automatically triggers probe mechanism to run the updated probe. Probe mechanism persists the results of the updated probe in repository . The user can then see in user interface that the scheduled probe job now includes the fabric that includes the switch that was moved.

Still further monitor may detect when two fabrics merge. Repository may store a schedule of a probe job for two fabrics. When monitor detects that the two fabrics have merged monitor automatically triggers probe mechanism to run the updated probe. Probe mechanism gathers the information from fabric agent and then persists the information in repository including updating the scheduled probe to include only the remaining fabric. The user can then see in user interface that the scheduled probe job now includes the merged fabric.

In addition monitor may detect when a new switch is added to a fabric and changes the fabric world wide name WWN . Probe mechanism gathers the information from fabric agent and then persists the information in repository with the new WWN.

In accordance with one illustrative embodiment a scheduled probe is associated with a set of switches in repository rather than the probe being associated with a set of fabrics. Thus the set of switches associated with a probe is never changed unless a user changes the set of fabrics probed. However the user sees the probe as being associated with a set of fabrics that may be automatically changed due to fabric segmentations merges and so forth.

Accordingly blocks of the flowchart illustration support combinations of means for performing the specified functions combinations of steps for performing the specified functions and program instruction means for performing the specified functions. It will also be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by special purpose hardware based computer systems which perform the specified functions or steps or by combinations of special purpose hardware and computer instructions.

Furthermore the flowchart is provided to demonstrate the operations performed within the illustrative embodiments. The flowchart is not meant to state or imply limitations with regard to the specific operations or more particularly the order of the operations. The operations of the flowchart may be modified to suit a particular implementation without departing from the spirit and scope of the present invention.

With reference now to operation begins and a storage administrator sets up an agent with a proxy switch for a fabric block . The storage administrator sets up the storage management application with a regularly scheduled probe on the fabric block . Then the storage management application determines whether fabric segmentation occurs block . The storage management application may be notified by an asynchronous event of a change to the topology of the fabric. The asynchronous event may come from a fabric agent. This may occur between block and block . Alternatively the storage management application may determine after processing results from a scheduled inventory collection that the topology of a fabric has changed. Again this may happen between block and block . If fabric segmentation occurs the storage management application detects the type of agent that is managing the segmented fabric block and determines whether the agent is a type that is capable of automatically reconfiguring itself to manage the segmented fabric block . Some fabric agents are embedded on the switch. The storage management application may determine whether the agent is on a proxy host and if so then determine whether the agent is capable of automatically reconfiguring itself.

If the agent is not capable of automatic reconfiguration in block the storage management application checks the database repository of the original fabric topology block . The storage management application determines which switches are on the newly formed fabric that is not visible from the agent block . The storage management application then calls the agent s interface to configure the agent to manage one of the switches in the new fabric block . The storage management application then modifies the regularly scheduled probe to include the new fabric block . If the agent is capable of automatic reconfiguration in block operation proceeds directly to block to modify the regularly scheduled probe to include the new fabric.

Thereafter or if the storage management application determines that fabric segmentation has not occurred in block the storage management application determines whether a switch moved to another fabric block . If a switch moved to another fabric the storage management application updates the scheduled probe job definition to include the fabric to which the switch moved block .

Thereafter or if the storage management application determines that a switch has not moved to another fabric in block the storage management application determines whether two fabrics merge block . If two fabrics merge the storage management application updates the scheduled probe job definition to include only the remaining fabric block .

Thereafter or if the storage management application determines that a fabric merge has not occurred in block the storage management application determines whether a new switch is added to the fabric that changes the WWN of the fabric block . If a new switch is added changing the WWN of the fabric the storage management application updates the scheduled probe job definition with the new WWN block .

Thereafter or if the storage management application determines that a new switch is not added changing the WWN of the fabric in block the storage management application determines whether an exit condition exists block . If an exit condition exists operation ends. If an exit condition does not exist in block operation returns to block to determine whether fabric segmentation occurs.

Thus the illustrative embodiments solve the disadvantages of the prior art by providing a mechanism in a storage management application that automatically reconfigures agents and scheduled probes of agents in cases where the agents do not automatically reconfigure themselves to manage a newly formed fabric after fragment segmentation. The solution does not burden the storage administrator to reconfigure agents or to reconfigure regularly scheduled inventory probes through storage management applications.

It should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one exemplary embodiment the mechanisms of the illustrative embodiments are implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the illustrative embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

