---

title: Firmware processing for operating system panic data
abstract: A processor includes firmware and at least one instance of an operating system (OS). When the OS encounters an unrecoverable error (a “panic”), data regarding the error is pushed to the firmware via capsule services, rather than immediately being displayed to the screen via legacy video INT10h services. The panic data may be provided to the OS and displayed by the OS after a reset. Other embodiments are also described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07900033&OS=07900033&RS=07900033
owner: Intel Corporation
number: 07900033
owner_city: Santa Clara
owner_country: US
publication_date: 20070626
---
The present disclosure relates generally to information processing systems and more specifically to post reset firmware processing for runtime data.

Before a computer system can operate it must have an operating system OS in its memory that allows the computer s resources to be reached and controlled by the other software such as the various application programs. Loading of this operating system is performed during initialization processing referred to as boot or re boot processing that is performed when a system experiences a power cycle or warm start event.

Traditionally a computer system includes a basic input output system BIOS memory that stores the code for the boot sequence that the central processing unit CPU executes to detect apply power to and initialize the computer components. The BIOS performs a power on self test POST when the system is turned on. This test is used to ensure that the system is functioning properly and to gather information about what the system contains. When a problem is identified with the system during the POST the BIOS may produce an error message. The message is displayed to the user screen as a result of the BIOS accessing the video card to print the message. The mechanism that the BIOS uses to print the boot message to the screen is a BIOS interrupt call facility. Specifically Int 10h is called by the BIOS in order to utilize video services to print error information to the screen.

The Int 10h facility may also sometimes be used by the operating system. For example the Int 10h video services interrupt facility may be utilized to provide error information to the screen when an OS panic or screen of death occurs. Such a panic occurs when the OS detects an internal system error from which it cannot recover. Attempts by the operating system to read an invalid or non permitted memory address are a common source of kernel panics. A panic may also occur as a result of a hardware failure or a bug in the operating system.

In contrast to the traditional boot method described above various mechanisms also exist for secure booting. The Unified Extensible Firmware Interface UEFI specification defines a model for the interface between operating systems and platform firmware. The interface consists of data tables that contain platform related information plus boot and runtime service calls that are available to the operating system and its loader. Together these provide a standard environment for booting an operating system and running pre boot applications. More information about UEFI may be found on the public Internet at URL www uefi org home. Please note that periods have been replaced with asterisks in this document to prevent inadvertent hyperlinks. The UEFI standard describes an application programmer interface API that allows the operating system to pass data to the firmware. The mechanism for passing information from the OS to the firmware in the UEFI standard may be referred to as a capsule . By passing runtime OS panic data to firmware using the capsule mechanism reliance on the legacy Int 10h facility may be avoided.

The following discussion describes selected embodiments of methods systems and mechanisms to push data regarding an unrecoverable OS error to the firmware via capsule services rather than displaying the data to the screen via legacy video INT10h services. The apparatus system and method embodiments described herein may be utilized with single core or multi core systems that may be either stand along systems or part of a network. In the following description numerous specific details such as interconnect and system topologies system configurations and particular order of operations for method processing have been set forth to provide a more thorough understanding of embodiments of the present invention. It will be appreciated however by one skilled in the art that the invention may be practiced without such specific details. Additionally some well known structures circuits and the like have not been shown in detail to avoid unnecessarily obscuring the present invention.

The UEFI specification describes an API application programming interface that allows the OS to pass run time data e.g. data this is available only after OS boot to the firmware. In particular the UEFI specification describes a class of runtime services that are sometimes referred to as capsule services. The capsule services include the UpdateCapsule service. The UpdateCapsule runtime service is a runtime function that allows a caller to pass information to the firmware. UpdateCapsule may be used for example to update the firmware flash or to enable an operating system to pass to the firmware information that is intended to persist across a system reset.

The firmware may process the capsules immediately. Alternatively the firmware may return a value to be passed into another runtime service ResetSystem which resets the entire platform. Passing this value to ResetSystem will cause the capsule to be processed by the firmware as part of the reset process.

The reset function typically resets hardware to a known state and generates a reset interrupt which vectors the system to a program in non volatile memory and begins execution from that point.

At block the BIOS code performs typical start up functions such as detecting memory detecting all system CPU s and detecting I O apertures as well as initializing such hardware components. Other additional initialization processing may be performed by the BIOS at block such as loading any microcode patches that have been incorporated into the BIOS code. From Block processing may optionally proceed to block . Otherwise processing proceeds directly to block .

At block the firmware may perform processing for panic data that was received before the reset . Such data may have been received for example via an UpdateCapsule call before the reset see e.g. discussion of block of below . If such capsule data was not previously received then such optional processing is not performed and processing instead proceeds to block .

If however previous panic data was received before the current reset then the data may be processed at block . Here again such processing is optional. That is even if a previous capsule with panic data was received before the current reset the processing of block may be skipped if it was intended that the processing for the panic data be performed solely by the operating system after re boot see e.g. block and block of .

For instance in some embodiments it may be desired that panic data received by the firmware via a capsule is to be processed only by the firmware and is not to be serviced at all by the OS. In such case the data is processed solely at block . For other embodiments it may be desired that at least some of the data be processed by the firmware at block during pre boot but that some processing of the data is also performed by the OS after the OS has been booted at block . For still other embodiments it may be desired that the panic data be serviced only by the OS after booting and that the data not be serviced by the firmware at all during pre boot. In this latter case block is not performed. Note that in the latter case the firmware still for at least some embodiments minimally handles the capsule data as indicated in the discussion of block below so that it will be available to the OS after re boot .

Accordingly for various embodiments various types of processing may be performed by the firmware at block . For purposes of illustration various embodiments of such processing are discussed below. However such discussion should not be taken to be limiting. One of skill in the art will recognize that various other actions as well as various combinations of the actions described below may be implemented in embodiments of a method for processing run time OS panic data that has been passed to the firmware via capsule services.

For at least one embodiment the firmware may pass at least a portion of the panic data to an error log at block .

For at least one other embodiment the firmware may send at block at least a portion of the panic data to another processor. For example the data may be provided to an out of band microcontroller as discussed below in connection with . Such embodiment may be employed for example for a processing system that includes several processors such as e.g. servers in a rack that are not individually associated with dedicated display screens. For such an embodiment the panic data may instead be sent at block to an out of band controller that may in turn display the information to a display screen for a remote administrator.

For at least one other embodiment the firmware may send at block at least a portion of the panic data to a diagnostic script that is to analyze the processor that incurred the unrecoverable error. The script may for at least one embodiment run on different processor than the faulting processor. For example the diagnostic script for an embodiment of a multiprocessor system A as illustrated in may run on the second processor if the first processor encounters the unrecoverable error. For such embodiment the healthy processor may run the script and thus access the capsule payload during the BIOS flow after the warm CPU only non destructive to memory reset. Such embodiment is based on the observation that in a multicore embodiment it is unlikely that all CPU s will experience a panic at the same time.

As another example the script may run on an out of band microcontroller such as that described below in connection with . For such embodiment the capsule payload may be parsed by an out of band microcontroller that has access to host memory. Such embodiment may allow for example the out of band microcontroller to post an indicia of the error to a local console.

The script may for at least one embodiment access a portion of the panic data that identifies the name of the software module that encountered the error. The script may check to determine whether an updated or patched version of the faulting application is available. If so during the next iteration of pre boot processing after the reset see block the firmware can invoke an upload of the patch to the processor if such a patch is available .

For at least one other embodiment the firmware may display at least a portion of the panic data to a display screen during block . Printing of the panic data to the screen may be effected via a native driver that can communicate with the video device and allows the firmware to initiate at block rudimentary print to screen services. For at least one embodiment the native driver is a UEFI compliant driver that either resides in the firmware or is provided by the video card itself. Regardless of the specific manner in which the display of panic data is accomplished at block it will be understood by one of skill in the art that the display of data at block is performed without reliance on INT10h services.

As stated above the actions taken at block may be a combination of actions either a combination of those actions described above a combination of additional actions that would be implemented by one of skill in the art or a combination of described and nondescribed actions.

At block the target operating system is booted. For at least one embodiment at block the BIOS program loads the OS into main memory from a disk. From block processing proceeds to block .

At block system processing is continued until a capsule service is invoked. If no capsule services are invoked system processing continues as normal and ends at block .

If however capsule services are invoked during system processing by the firmware illustrate that processing then proceeds to block . That is block is executed if the operating system has invoked capsule services.

For at least one embodiment capsule services are invoked when the OS sends a capsule to the firmware by calling the UpdateCapsule runtime service.

At block it is determined whether the detected invocation of capsule services involves a panic payload. If so processing proceeds to block . Otherwise the capsule is processed normally at block .

Depending on the intended consumption the firmware may process the capsule immediately. Alternatively according to the UEFI specification a capsule may specify that the capsule payload is to persist across a system reset. At block it is determined whether the capsule detected at block is intended to persist across a system reset. If not the firmware stores the capsule data so that it may processed during pre boot after the reset see block and reset processing is then performed.

If alternatively it is determined at block that it is intended that at least a portion of the capsule data is to be processed by the OS after the impending reset then processing proceeds to block . In such cases the panic capsule data may be recorded in a non volatile persistent system table e.g. see of so that the panic data is retained and is available to the OS after the system re boots. After the panic data is recorded in the system table at block reset processing is then performed.

At block the operating system determines whether previous panic data is available to it. For at least one embodiment the operating system makes the determination at block by inspecting the system table e.g. see block of to determine whether any persistent panic data is available to it. If so processing proceeds to block otherwise processing proceeds to block where normal OS processing continues.

At block the OS reads the previous panic data from the system table and processes it accordingly. Such processing may involve for example displaying at least a portion of data to the display screen. For other embodiments other or additional actions may be performed by the OS at block . At least some examples of the types of actions that may be taken at block by the operating system are along the same lines as those firmware actions described above in connection with block . After the appropriate action has been taken at block normal OS processing proceeds at block .

If no unrecoverable errors are encountered during OS processing the method proceeds from block to block where OS processing ends.

Alternatively if an unrecoverable error a panic is encountered by the operating system during normal OS processing processing proceeds from block to block .

At block the OS constructs a capsule with the panic payload and sends the capsule to the platform firmware. For at least one embodiment this capsule is sent to the firmware via capsule services such as an UpdateCapsule call. From block processing proceeds to block .

Discussed immediately below are various embodiments of systems on which embodiments of the methods of may be performed. When utilized together the methods provide a means that allows the operating system to avoid calling INT 10h services to display runtime panic data to a display screen when an OS panic occurs.

The system illustrated in may include one or more processors which are coupled to a north bridge . The optional nature of additional processors is denoted in with broken lines.

The north bridge may be a chipset or a portion of a chipset. The north bridge may communicate with the processor s and control interaction between the processor s and memory . The north bridge may also control interaction between the processor s and Accelerated Graphics Port AGP activities. For at least one embodiment the north bridge communicates with the processor s via a multi drop bus such as a frontside bus FSB .

Further flash memory may be coupled to the south bridge . The flash memory may include code BIOS code in one embodiment. The flash memory which is non volatile memory may also include for at least one embodiment the firmware instructions for a capsule logic module e.g. UpdateCapsule as discussed above with reference to . Other logic as discussed herein with relation to embodiments of the methods discussed above may also reside in the firmware logic modules . In addition the flash memory may also include for at least one embodiment a persistent storage location to store data such as a system table that is accessible to the operating system after a reset.

The system B may optionally include a secondary processor . The optional nature of additional processors is denoted in with broken lines.

For at least one embodiment the secondary processor may be a processor utilized to execute firmware that implements an Intel Management Engine. As such the processor may part of a system B that implements the functionality of Intel Active Management Technology Intel AMT . For such embodiment the communication devices of the system B may include a network connection such as the Intel 82566DM Gigabit Network Connection. This network connection identifies out of band network traffic traffic targeted to Intel AMT and routes it to the secondary processor rather than to the main processor s . Thus the network connection may be coupled to the secondary processor .

Embodiments of the claimed subject matter may be implemented in many different system types. Referring now to shown is a block diagram of a point to point multiprocessor system in accordance with an embodiment of the present invention. As shown in the multiprocessor system is a point to point interconnect system and includes a first processor and a second processor coupled via a point to point interconnect . As shown in each of processors and may be multicore processors including first and second processor cores i.e. processor cores and and processor cores and .

Rather having a north bridge and south bridge as shown above in connection with the system A shown in may instead have a hub architecture. The hub architecture may include an integrated memory controller hub Memory Controller Hub MCH integrated into each processor . A chipset also sometimes referred to as an Interface Controller Hub ICH may provide control of Graphics and AGP.

Thus the first processor further includes a memory controller hub MCH and point to point P P interfaces and . Similarly second processor includes a MCH and P P interfaces and . As shown in MCH s and couple the processors to respective memories namely a memory and a memory which may be portions of main memory locally attached to the respective processors.

While shown in as being integrated into the processors the memory controller hubs need not necessarily be so integrated. For at least one alternative embodiment the logic of the MCH s and may be external to the processors respectively. For such embodiment one or more memory controllers embodying the logic of the MCH s and may be coupled between the processors and the memories respectively. For such embodiment for example the memory controller s may be stand alone logic or may be incorporated into the chipset .

First processor and second processor may be coupled to the chipset or ICH via P P interconnects and respectively. As shown in chipset includes P P interfaces and . Furthermore chipset includes an interface to couple chipset with a high performance graphics engine . In one embodiment an Advanced Graphics Port AGP bus may be used to couple graphics engine to chipset . AGP bus may conform to the 2.0 published May 4 1998 by Intel Corporation Santa Clara Calif. Alternately a point to point interconnect may couple these components.

In turn chipset may be coupled to a first bus via an interface . In one embodiment first bus may be a Peripheral Component Interconnect PCI bus as defined by the 2.1 dated June 1995 or a bus such as the PCI Express bus or another third generation input output I O interconnect bus although the scope of the present invention is not so limited.

As shown in various I O devices may be coupled to first bus . The I.O devices may include a display terminal or screen not shown . In addition a non volatile store such as a flash memory may be coupled to the first bus . The memory may include firmware instructions for one or more capsule services modules.

A bus bridge may couple first bus to a second bus . In one embodiment second bus may be a low pin count LPC bus.

Various devices may be coupled to second bus including for example a keyboard mouse communication devices and a data storage unit which may include code in one embodiment. For at least one embodiment code may include an operating system. Further an audio I O may be coupled to second bus . Note that other architectures are possible. For example instead of the point to point architecture of a system may implement a multi drop bus or another such architecture.

For at least one embodiment the chipset may include a secondary processor that may be utilized to receive and process panic data from the firmware in accordance with at least one embodiment of the method illustrated in . For at least one embodiment for example the secondary processor may be a processor utilized to execute firmware that implements an Intel Management Engine. As such the processor may part of a system that implements the functionality of Intel Active Management Technology Intel AMT . For such embodiment the communication devices of the system may include a network connection such as the Intel 82566DM Gigabit Network Connection. This network connection identifies out of band network traffic traffic targeted to Intel AMT and routes it to the secondary processor rather than to the main processor s . One of skill in the art will recognize that in alternative embodiments the secondary processor may be a stand alone processor see alternative position of processor denoted with broken lines or may be incorporated into some other component of the system B instead of in the chipset .

As is stated above although illustrated in as being part of the north bridge and illustrated in as being part of the chipset the secondary processor may instead reside in other portions of the systems without departing from the scope of the appended claims. For example the secondary processor may instead be a standalone processor see alternative placement of in FIG. B may reside in the south bridge or may reside in any other location of the system either incorporated into another portion of the system or as a standalone processor.

Embodiments of this system topology include a network connection such as a network interface card NIC . NIC may be used for OOB platform manageability and communication. For example the NIC may be utilized to send runtime panic data from the firmware to the OOB microcontroller in accordance with the discussion of block of above.

For at least one embodiment the OOB microcontroller support may enable managing of the system without perturbing the performance of the system.

A platform includes one more processors . Each processor may be connected to random access memory such as e.g. a dynamic random access memory via a memory controller hub . Processor may be any type of processor capable of executing software such as a microprocessor digital signal processor microcontroller or the like. Though shows only one such processor there may be one or more processors in the platform and one or more of the processors may include multiple threads multiple cores or the like.

The processor may be further connected to I O devices via an input output controller hub ICH . The ICH may be coupled to various devices such as a super I O controller SIO keyboard controller KBC or trusted platform module TPM via a low pin count LPC bus . The SIO for instance may have access to floppy drives or industry standard architecture ISA devices not shown . In an embodiment the ICH is coupled to non volatile memory via a serial peripheral interface SPI bus . The non volatile memory may be flash memory or static random access memory SRAM or the like.

The OOB microcontroller may connect to the ICH via a communication pathway which may be a bus such as a peripheral component interconnect PCI or PCI express PCIe bus or may alternatively be a point to point interconnect. The OOB microcontroller may also be coupled with the non volatile memory store NV store via the SPI bus . The NV store may be flash memory or static RAM SRAM or the like. In many existing systems the NV store is flash memory.

The OOB microcontroller may be likened to a miniature processor. Like a full capability processor the OOB microcontroller has a processor unit which may be operatively coupled to a cache memory as well as RAM and ROM memory . The OOB microcontroller may have a built in network interface and independent connection to a power supply to enable out of band communication even when the in band processor is not active or fully booted.

In embodiments the processor has a basic input output system BIOS in the NV store . In other embodiments the processor boots from a remote device not shown and the boot vector pointer resides in the BIOS portion of the NV store . The OOB microcontroller may have access to all of the contents of the NV store including the BIOS portion as well as firmware instructions to implement a logic module for the UpdateCapsule service and also a protected portion of the non volatile memory. For some embodiments the protected portion of memory may be secured with Intel Active Management Technology iAMT .

The OOB microcontroller may be coupled to the platform to enable SMBUS commands. The OOB microcontroller may also be active on the PCIe bus. An integrated device electronics IDE bus may connect to the PCIe bus. In an embodiment the SPI is a serial interface used for the ICH to communicate with the flash . The OOB microcontroller may also communicate to the flash via the SPI bus. In some embodiments the OOB microcontroller may not have access to one of the SPI bus or other bus.

The portion of NV memory that is available only to the OOB microcontroller may be used to securely store certificates keys and signatures that are inaccessible by the BIOS firmware or operating system. The NIC may be used to access the Internet bulletin board or other remote system to validate keys and certificates stored in the NV memory . Without the use of the out of band communication revocation and validation are not possible using the system firmware at boot time because no network connectivity exists until the host processor s drivers have been initialized. The OOB microcontroller can access the remote system early during boot of the host processor on the platform to validate drivers and loaders to be used to fully boot the platform. The remote system may identify a specific certificate as being out of date or revoked. Without the ability to revoke the certificate prior to boot the platform is vulnerable to counterfeit loaders etc. The OOB microcontroller may identify revoked certificates from the remote system for instance on a certificate revocation list CRL and mark them accordingly in the NV storage . Thus upon boot a revoked certificate will not authenticate a counterfeit or out of date module in error.

For at least some embodiments the OOB microcontroller is a manageability engine ME controller. The ME controller also known simply as the manageability engine ME may be integrated into the platform. In some embodiments the ME may perform other manageability functions also known as iAMT capabilities. However this functionality is not required to practice embodiments of the invention as described herein. The ME can typically access the chipset registers through internal data paths or system bus SMBUS or PECI accessors.

For an embodiment that utilizes a system topology such as that shown in in order to perform the methods shown in certain performance goals may be met. Specifically the OOB microcontroller manageability engine may cooperatively assist in the manageability of the platform when panic data is pushed to a remote administrator through the manageability engine.

Embodiments of the mechanisms disclosed herein may be implemented in hardware software firmware or a combination of such implementation approaches. Embodiments of the invention may be implemented as computer programs executing on programmable systems comprising at least one processor a data storage system including volatile and non volatile memory and or storage elements at least one input device and at least one output device.

Program code may be applied to input data to perform the functions described herein and generate output information. Accordingly alternative embodiments of the invention also include machine accessible media containing instructions for performing the operations of the invention or containing design data such as HDL that defines structures circuits apparatuses processors and or system features described herein. Such embodiments may also be referred to as program products.

Such machine accessible media may include without limitation tangible arrangements of particles manufactured or formed by a machine or device including storage media such as hard disks any other type of disk including floppy disks optical disks compact disk read only memories CD ROMs compact disk rewritable s CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

The output information may be applied to one or more output devices in known fashion. For purposes of this application a processing system includes any system that has a processor such as for example a digital signal processor DSP a microcontroller an application specific integrated circuit ASIC or a microprocessor.

The programs may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. The programs may also be implemented in assembly or machine language if desired. In fact the mechanisms described herein are not limited in scope to any particular programming language. In any case the language may be a compiled or interpreted language

While particular embodiments of the present invention have been shown and described it will be obvious to those skilled in the art that changes and modifications can be made without departing from the scope of the appended claims. For example the foregoing mechanisms for using capsule services to push runtime panic data from the OS to the firmware may be equally applicable in other embodiments to other types of code rather than being limited to panic data.

Accordingly one of skill in the art will recognize that changes and modifications can be made without departing from the present invention in its broader aspects. The appended claims are to encompass within their scope all such changes and modifications that fall within the true scope of the present invention.

