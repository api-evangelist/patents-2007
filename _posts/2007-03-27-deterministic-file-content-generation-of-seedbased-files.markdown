---

title: Deterministic file content generation of seed-based files
abstract: A method for deterministic file content generation of seed based files is comprised of extracting a seed value from a seeded file signature, passing the seed value to a seeded content generating function to produce a set of generated content, and appending the set of generated content to the seed file signature to produce a seed-based file. A delta offset may also be included in the seeded file signature, the delta offset indicating where modified content is to be substituted within the generated content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685211&OS=07685211&RS=07685211
owner: Microsoft Corporation
number: 07685211
owner_city: Redmond
owner_country: US
publication_date: 20070327
---
The testing of network servers under load often requires the server to receive and store large amounts of test data in physical storage such as a hard drive. Clients creating the large amounts of test data must also create and store large amounts of data. Due to the finite amount of physical storage each of the client and server may eventually run out of disk space and testing may not continue.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

The present example provides a data structure and methods for deterministic seeded file content generation of seed based files. A seeded file may include a seed value a file length value indicating the length of the content to be generated a delta offset value indicating an area within the generated content to begin inserting modified content and a delta length indicating the length of the modified content. Content is generated by passing the seed value to a deterministic function that produces a reproducible set of generated data using the seed value. The modified data is produced by passing the corresponding value from the set of generated data to a second deterministic function to produce the modified value. The modified value replaces the corresponding value in the set of generated data.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However the same or equivalent functions and sequences may be accomplished by different examples.

Although the present examples are described and illustrated herein as being implemented in a deterministic file content generation system the system described is provided as an example and not a limitation. As those skilled in the art will appreciate the present examples are suitable for application in a variety of different types of deterministic file content generation systems.

Although not required embodiments of the invention will be described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement embodiments of the invention may be stored in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allow device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term computer readable media may include communication media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infra red cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments of the invention. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device . Those skilled in the art will also realize that all or a portion of the computer readable instructions may be carried out by a dedicated circuit such as a Digital Signal Processor DSP programmable logic array and the like.

Turning now to shows a block diagram of an example system for testing network usage load . A system for testing network usage load typically includes a first client communicatively coupled to a server and second client also communicatively coupled to a server . Note that the first client and the second client are also communicatively coupled by virtue of the common communicative coupling to server .

The process of load testing a server system such as the server typically involves creating a predetermined demand on a server system and monitoring the functioning of the server system in response to the predetermined demand. For example a load test may involve a large number of clients connecting to a server. Each client may send a large amount of information to the server for the server to process. The ability of the server to respond to the large number of clients and process large amounts of information may be measured to determine the performance of the server when deployed.

If a load test is intended to test the response of a server to network traffic it may not be necessary for any or all of the clients or the server to actually store the received network traffic. However in order to verify that the data was received at the server correctly the server may store the network traffic to examine the received data. In this case the received data must either be stored on disk or stored in memory.

In the case where file system access is to be a part of the load test a system for testing network usage load may be used to load test a server . In the system for testing network usage load the first client may include an example seeded file signature that will be described more fully in the discussion of . The server first client and second client also include an example seeded file expansion method that will be described more fully in the discussion of .

However for the purposes of discussion the seeded file signature may be comprised of numerical data including a seed value a file length a delta start block and a delta length. The seed file expansion method is configured to expand the seeded file signature to an expanded file. The contents of the expanded file are determined by passing the seed value to a function configured to deterministically generate random data using the seed value. The seed file expansion method uses the file length included in the seed file signature to determine the size of the expanded file. The contents of the expanded file are then appended to the seeded file signature to create the complete expanded file.

In this way the first client may store the smaller seeded file signature then expand the seeded file signature to create a network stream representing the expanded file that may be comprised of the. The first client may then send the stream representing the expanded file over the network connection to the server . The server may then strip off the appended file contents and store only the seeded file signature because the server may reproduce the expanded file using the seed file expansion method . Additionally or alternatively the server may store the streamed expanded file on disk and or in memory. The server may then send a stream representing the expanded file to the second client and the second client may also strip off the appended file and store only the seeded file signature . Additionally or alternatively the second client may store the stream representing the expanded file.

The delta start block and the delta length of the seeded file signature provide a method for deterministically modifying an expanded file. The delta length may correspond to an offset in the expanded file and the delta length may correspond to the length of the section to be modified. The method for determining the content of the delta section will be discussed in more detail in the discussion of .

Turning now to shows an example of a seeded file signature . The seeded file signature is illustrated as part of an expanded seeded file including generated content and modified content . The seed file signature is a data structure comprised of four data fields. The first data field includes a seed value . The second data field includes a file length value . The third data field includes a delta region offset value . The fourth data field includes a delta region length value .

In an exemplary implementation each of the four data fields and are stored in computer readable media as a file. Each of the four data fields and are 8 bytes in size for a total of 32 bytes. Alternatively each of the four data fields and may be of any size and may be stored in any order.

The seed value may be any value and of any type. In an exemplary implementation the seed value is used to seed a pseudorandom number generating function to produce a series of random values to act as the generated content for the expanded seeded file . To that end the file length value may also be of any value of any type. In an exemplary implementation the file length value acts to determine the number of iterations to run the pseudorandom number generating function and thus determine the length of the generated content for an expanded seeded file . In an alternative implementation the file length value acts to determine the size of the data set that will be generated by the pseudorandom number generating function.

The delta region offset value may be of any value and of any type. In an exemplary implementation the delta region offset value in an integer representing the address or offset into the generated content of an expanded seeded file . Such a delta region offset value indicates that a separate deterministic function is to be applied to the result of subsequent iterations of the pseudorandom number generating function to produce modified content within the generated content .

To that end the delta region length value may be of any value of any type. In an exemplary implementation the delta region length value acts to determine the number of iterations to run the separate deterministic function to determine modified content for the expanded seeded file . Note that the delta region offset may not be smaller than the data representing the beginning of the generated content . Accordingly the length represented by summing the delta region offset value and the delta region length value may not exceed the file length .

Turning now to shows an example seed file expansion method . Block refers to an operation in which the signature is extracted from a seeded file. Such a signature may be implemented in accordance with the seeded file signature from . In an exemplary implementation the signature includes a seed value a file length a delta region offset and a delta region length.

Block refers to an operation in which a pseudorandom number generator is seeded with the seed value. Such a pseudorandom number generator may be implemented such that when seeded with the seed value the pseudorandom number generator produces a reproducible set of random numbers. In an alternative implementation any seeded content generating function that accepts a seed value and deterministically produces a set of reproducible data may be used.

Block refers to an operation in which a counter is initialized at zero and iteratively runs for a number of times equivalent to the file length value.

Block refers to an operation in which it is determined whether or not the current value of the counter is greater than the delta region offset value. In response to a positive determination it has been determined that the counter is in the delta region of the generated contents and flow continues to Block . In response to a negative determination it has been determined that the counter is not in the delta region of the generated contents and flow continues to Block .

Block refers to an operation in which the current output of the pseudorandom number generator is appended to the generated content. If there are more iterations remaining in the counter flow returns to Block . If there are no more iterations remaining in the counter the generated content has been created and flow ends.

Block refers to an operation in which the current output of the pseudorandom number generator is passed to a deterministic integer function to produce a modified value. An example of a deterministic integer function may be a function that accepts an integer parameter and adds another predetermined value to it. It is to be appreciated however that any deterministic integer function may be used. Once calculated the modified value is appended to the generated content. If there are more iterations remaining in the counter flow returns to Block . If there are no more iterations remaining in the counter the generated content has been created and flow ends.

