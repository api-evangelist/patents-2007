---

title: Method and system for enabling an application in a virtualized environment to communicate with multiple types of virtual servers
abstract: A method and system are introduced to enable an application in a virtualized environment to communicate with multiple types of virtual servers (e.g., VMware ESX server, Microsoft Virtual Server, etc.), yet without making any source code change to the application. An interface is provided so that an application (e.g., a storage management application) running in a virtual machine is able to communicate with the underlying virtual server to receive information regarding some physical hardware that are not virtualized by the virtual server. For example, such physical hardware may be an iSCSI Host Bus Adapter (iSCSI HBA) or a Fiber Channel Protocol Host Bus Adapter (Fcp HBA). After receiving such information, the application can access the physical hardware to provide services to other applications, such as storage management services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555275&OS=08555275&RS=08555275
owner: NetApp, Inc.
number: 08555275
owner_city: Suunyvale
owner_country: US
publication_date: 20070426
---
At least one embodiment of the present invention pertains to virtualization systems and more particularly to enabling an application in a virtualized environment to communicate with multiple types of virtual server.

Virtualization is an abstraction that decouples the physical hardware from the operating system in a data processing system to deliver greater resource utilization and flexibility. Virtualization allows multiple virtual machines with heterogeneous operating systems e.g. Windows Linux UNIX etc. and applications to run in isolation side by side on the same physical machine. A virtual machine is the representation of a physical machine by software. A virtual machine has its own set of virtual hardware e.g. RAM CPU NIC hard disks etc. upon which an operating system and applications are loaded. The operating system sees a consistent normalized set of hardware regardless of the actual physical hardware components.

A guest operating system e.g. Windows Linux UNIX etc. is installed on each of the virtual machines . The virtual server presents the physical hardware as virtual hardware to the guest operating system and applications running in the guest operating system . However some physical hardware may not be virtualized by the virtual server . Thus the applications will not be able to access the un virtualized hardware for services. To solve this problem an Application Programming Interface API for the virtual server is provided. Through the API the applications can obtain information regarding the un virtualized hardware from the virtual server . APIs for virtual servers are vendor specific. Currently there is not a unified common interface for different types of virtual server. Thus the source code for the applications needs to be changed to be compatible with APIs of different types of virtual server. Changing the source code for applications incurs more design and implementation effort and may introduce errors in the application software.

The present invention includes a method and system for enabling an application in a virtualized environment to communicate with multiple types of virtual servers e.g. VMware ESX Server Microsoft Virtual Server Xen Virtual Server etc. yet without making any source code change to the application. An interface is provided so that an application e.g. a storage management application running in a virtual machine is able to communicate with the underlying virtual server to receive information regarding some physical hardware that are not virtualized by the virtual server. For example such physical hardware may be an iSCSI Host Bus Adapter iSCSI HBA or a Fiber Channel Protocol Host Bus Adapter Fcp HBA . After receiving such information the application can access the physical hardware to provide services to other applications such as storage management services.

In one embodiment the method includes executing an application in a virtual machine installed on a virtual server. The method further includes enabling communication between the application and the virtual server through a software module the software module being configured to allow the application to communicate with a plurality of types of virtual servers.

Other aspects of the invention will be apparent from the accompanying figures and from the detailed description which follows.

A method and system for enabling an application in a virtualized environment to communicate with multiple types of virtual server are described. References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment.

The present invention includes a technique to enable an application in a virtualized environment to communicate with multiple types of virtual server e.g. VMware ESX server Microsoft Virtual Server etc. yet without making any source code change to the application. According to the technique that will be introduced in detail below an interface is provided so that an application e.g. a storage management application running in a virtual machine such as shown in is able to communicate with the underlying virtual server to receive information regarding some physical hardware that is not virtualized by the virtual server. In one embodiment such physical hardware is an Internet Simple Computer Storage Interface iSCSI Host Bus Adapter HBA or a Fiber Channel Protocol FCP HBA. After receiving such information the application can access the physical hardware to provide services to other applications such as storage management services.

As shown in the SAN or sometimes referred to as NAS includes a storage server and a storage subsystem . The storage server is a processing system configured to provide clients e.g. the virtualized processing system with block level and or file level access to stored data e.g. a Logical Unit Number LUN . The storage server can be a computing device configured to provide storage services e.g. a network routing device a personal computer etc.

The virtualized processing system includes a virtual server . An example of such a virtual server is VMware ESX server. The virtual server provides a virtual machine on which a guest operating system is installed. The virtualized processing system also includes a number of physical hardware devices such as a storage adapter an iSCSI HBA an FCP HBA a Network Interface Controller NIC and a disk . The virtualized processing system can access storage via such physical hardware. For example the virtualized processing system can access a local disk via the storage adapter . The virtualized processing system can also access the LUN via the iSCSI HBA the FCP HBA or the combination of a software initiator with the NIC through the network . The virtual server presents these storage adapters how and HBAs as virtual storage adapters to the virtual machine . The guest operating system and its applications perform read write operations via these virtual storage adapters .

Raw Device Mapping RDM is a well known technique that provides a mechanism for a virtual machine to have direct access to a LUN on a physical storage subsystem. For example a mapping file can be created for the virtual machine . The mapping file contains information that can be used to locate the LUN . Such information can be the identifier of the LUN . When the LUN is opened for access a virtual machine file system not shown in figure of the virtual server resolves the mapping file to the correct physical device and performs appropriate access checks and locking. Thereafter reads and writes go directly to the LUN rather than going through the mapping file . RDM is useful for supporting LUN provisioning and Persistent Point in time Image PPI management applications. An example of such an application is NetApp SnapDrive developed by Network Appliance Inc. of Sunnyvale Calif.

In the virtual machine applications such as LUN provisioning and PPI management applications access the LUN through virtual storage adapters that are virtualized from the underlying iSCSI and FCP HBAs. Examples of LUN provisioning and PPI management applications include NetApp SnapManager and NetApp SnapDrive both developed by Network Appliance Inc. of Sunnyvale Calif. However as discussed in the Background section of the present application it is possible that the virtual server does not virtualize the iSCSI HBA and the FCP HBA . As a result the applications do not see these hardware initiators and therefore cannot access the LUN .

One way to solve the problem is to permit the applications to call an API provided for the virtual server to get the iSCSI FCP HBA information. Such information includes the HBA s name speed status etc. However because different virtualization software vendors have different APIs for virtual servers the source code for the applications need to be changed to be compatible with different types of virtual server. For example if a SnapDrive application is designed and developed to make VMware ESX server specific API calls the SnapDrive application would not be able to make Microsoft Virtual server specific API calls because Microsoft Virtual server s API is different from VMware ESX server s API. Therefore a different version of SnapDrive application needs to be designed and developed for Microsoft Virtual server.

The present invention provides an interface through which the applications without any source code change can communicate with various types of virtual servers. In one embodiment such an interface is packaged as a software module installed on the virtual machine . When the software module is installed and initialized on the virtual machine the software module detects the type of the underlying virtual server and loads a corresponding sub module e.g. a set of classes that is implemented particularly for the virtual server. Therefore applications would be able to communicate with the underlying virtual server via the corresponding sub module. Here load a software module or sub module means creating an instance of the software module or sub module in the main memory of a processing system.

In one embodiment when the virtual server adapting module is being installed and initialized by the initialization module on a virtual machine the virtual server type detector determines the type of the underlying virtual server. One way to detect the type of the virtual server is to locate a Dynamic Link Library DLL that is particular to a type of virtual server. For example if the guest operating system is Windows the virtual server type detector searches the System32 directory to find the DLL. In one embodiment vmGuestlib.dll exists under System32 directory if the virtual server is VMWare virtual server. In another embodiment of the present invention if the guest operating system is Windows the virtual server type detector can retrieve Windows Registry to find out the type of the underlying virtual server. Windows registry is a database which stores settings and options for the operating system. It contains information and settings for all the hardware operating system software etc. For example if the underlying virtual server is VMWare virtual server the Windows Registry will contain a key 

Depending on the type of the virtual server determined by the virtual server type detector the initialization module selects an implementation module developed for the particular type of virtual server from the pool . In one embodiment the pool maintains a list not shown in of a number of implementation modules . Each entry of the list contains a pointer pointing to a corresponding implementation module and a descriptor of the implementation module . The descriptor may contain the name of the virtual server to which the corresponding implementation module corresponds. Any API call or request received from any application by the interface will be forwarded to the loaded implementation module and the implementation module will forward the call or request to the underlying virtual server.

Note that virtual server adapting modules and may be implemented by any programming language such as Java C etc. Each of the implementation modules further illustratively may be a set of classes in an Object Oriented Programming Language e.g. Java classes C classes etc. 

At block the initialization module selects the particular implementation module for the particular type of virtual server determined at block from the implementation pool .

At block the initialization module initiates the selected implementation module. Here the term initiate means creating an instance of the selected implementation module. The initiated implementation module will be used for handling API calls or requests received by the interface which is implemented by the initiated implementation module.

The bus system in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USB or an Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processors are the central processing units CPUs of the processing system and thus control the overall operation of processing system. In certain embodiments the processors accomplish this by executing software stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs field programmable gate arrays FPGAs programmable logic devices PLDs or the like or a combination of such devices.

The processing system also includes memory coupled to the bus system . The memory represents any form of random access memory RAM read only memory ROM flash memory or a combination thereof. Memory stores among other things the operating system of the processing system.

Also connected to the processors through the bus system are a mass storage device a storage adapter and a network adapter . Mass storage device may be or include any conventional medium for storing large quantities of data in a non volatile manner such as one or more disks. The storage adapter allows the processing system to access external storage systems. The network adapter provides the processing system with the ability to communicate with remote devices and may be for example an Ethernet adapter or a Fibre Channel adapter.

Memory and mass storage device store software instructions and or data which may include instructions and or data used to implement the techniques introduced here.

Thus a method and system for enabling an application in a virtualized environment to communicate with multiple types of virtual servers have been described.

Software to implement the technique introduced here may be stored on a machine readable medium. A machine accessible medium as the term is used herein includes any mechanism that provides i.e. stores and or transmits information in a form accessible by a machine e.g. a computer network device personal digital assistant PDA manufacturing tool any device with a set of one or more processors etc. . For example a machine accessible medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

 Logic as is used herein may include for example software hardware and or combinations of hardware and software.

Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

