---

title: Malicious software detection
abstract: A method, system, computer program product and/or a computer readable medium of instructions for detecting one or more entities which are able to reinfect a processing system with malicious software. The method includes: monitoring, in the processing system, activity indicative of the malicious software reinfecting the processing system; in response to detecting the activity, storing a record of the activity and one or more entities associated with the activity; determining if the malicious software has reinfected the processing system; and in response to determining that the malicious software has reinfected the processing system, analysing the record to detect the one or more entities which were associated with the activity that caused and/or assisted in reinfecting the processing system with the malicious software. There is also disclosed a method, system, computer program product and/or a computer readable medium of instructions for detecting a variant of malicious software in a processing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392996&OS=08392996&RS=08392996
owner: Symantec Corporation
number: 08392996
owner_city: Mountain View
owner_country: US
publication_date: 20070808
---
This application claims the benefit of priority from Provisional Patent Application Ser. No. 60 836 222 filed on Aug. 8 2006 which is hereby incorporated by reference in its entirety.

The present invention generally relates to a method system computer readable medium of instructions and or computer program product for detecting one or more entities which reinfect a processing system with malicious software. The present invention also relates to a method system computer readable medium of instructions and or computer program product for detecting a variant of malicious software.

As used herein a threat comprises malicious software also known as malicious software or pestware which comprises software that is included or inserted in a part of a processing system for a harmful purpose. The term threat should be read to comprise both possible potential and actual threats. Types of malicious software can comprise but are not limited to malicious libraries viruses worms Trojans adware malicious active content and denial of service attacks. In the case of invasion of privacy for the purposes of fraud or theft of identity malicious software that passively observes the use of a computer is known as spyware .

A hook also known as a hook procedure or hook function as used herein generally refers to a callback function provided by a software application that receives certain data before the normal or intended recipient of the data. A hook function can thus examine or modify certain data before passing on the data. Therefore a hook function allows a software application to examine data before the data is passed to the intended recipient.

An API Application Programming Interface hook also known as an API interception as used herein as a type of hook refers to a callback function provided by an application that replaces functionality provided by an operating system s API. An API generally refers to an interface that is defined in terms of a set of functions and procedures and enables a program to gain access to facilities within an application. An API hook can be inserted between an API call and an API procedure to examine or modify function parameters before passing parameters on to an actual or intended function. An API hook may also choose not to pass on certain types of requests to an actual or intended function.

A process as used herein is at least one of a running software program or other computing operation or a part of a running software program or other computing operation that performs a task.

An entity can comprise but is not limited to a file an object a class a collection of grouped data a library a variable a process and or a device.

A hook chain as used herein is a list of pointers to special application defined callback functions called hook procedures. When a message occurs that is associated with a particular type of hook the operating system passes the message to each hook procedure referenced in the hook chain one after the other. The action of a hook procedure can depend on the type of hook involved. For example the hook procedures for some types of hooks can only monitor messages others can modify messages or stop their progress through the chain restricting them from reaching the next hook procedure or a destination window.

In a networked information or data communications system a user has access to one or more terminals which are capable of requesting and or receiving information or data from local or remote information sources. In such a communications system a terminal may be a type of processing system computer or computerised device personal computer PC mobile cellular or satellite telephone mobile data terminal portable computer Personal Digital Assistant PDA pager thin client or any other similar type of digital electronic device. The capability of such a terminal to request and or receive information or data can be provided by software hardware and or firmware. A terminal may comprise or be associated with other devices for example a local data storage device such as a hard disk drive or solid state drive.

An information source can comprise a server or any type of terminal that may be associated with one or more storage devices that are able to store information or data for example in one or more databases residing on a storage device. The exchange of information ie. the request and or receipt of information or data between a terminal and an information source or other terminal s is facilitated by a communication means. The communication means can be realised by physical cables for example a metallic cable such as a telephone line semi conducting cables electromagnetic signals for example radio frequency signals or infra red signals optical fibre cables satellite links or any other such medium or combination thereof connected to a network infrastructure.

A system registry is a database used by operating systems for example Windows platforms. The system registry comprises information needed to configure the operating system. The operating system refers to the registry for information ranging from user profiles to which applications are installed on the machine to what hardware is installed and which ports are registered.

One problem faced when restricting malicious activity by malicious software in a processing system is that there is a risk that the malicious software may reinfect the processing system. Entities which were not necessarily performing malicious activity may not be restricted and thus may attempt to reinfect the processing system with one or more malicious entities such as to reinfect the processing system with the malicious software.

Another problem faced when detecting malicious software is that variants of the malicious software may also attempt to infect a processing system wherein the processing system may be configured to detect an earlier version of the malicious software. A variant of malicious software may be a modification to an earlier version of the malicious software in an attempt to increase the maliciousness of the earlier malicious software or an attempt to prevent detection although there may be other reasons why variants of malicious software are created and released.

In order to protect a client s processing system it is important that vendors of malicious software detection products detect the variant as quickly as possible such that a method of restricting the variant malicious software can be determined. Using methods of restricting the earlier version of the malicious software may not necessarily restrict the variant malicious software and as such leave the processing system compromised. Due to the complexity of malicious software a variant of malicious software can be difficult to identify and can be a time consuming exercise. As this process of identifying a variant is generally performed manually there is a significant problem in attempting to accurately and quickly identify variant malicious software. Also these problems impact on accurately and quickly generating a method of restricting the variant malicious software.

The reference in this specification to any prior publication or information derived from it or to any matter which is known is not and should not be taken as an acknowledgment or admission or any form of suggestion that that prior publication or information derived from it or known matter forms part of the common general knowledge in the field of endeavour to which this specification relates.

In a first broad form there is provided a method of detecting one or more entities which are able to reinfect a processing system with malicious software wherein the method comprises 

monitoring in the processing system activity indicative of the malicious software reinfecting the processing system 

in response to detecting the activity storing a record of the activity and one or more entities associated with the activity 

in response to determining that the malicious software has reinfected the processing system analysing the record to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

In one form determining if the malicious software has reinfected the processing system comprises at least one of 

applying a signature associated with the malicious software wherein the signature is satisfied indicating that the malicious software has reinfected the processing system and

 c determining one or more related entities to the base entity which are related by the entity property and

 d performing an analysis of the related entities to determine if one or more of the related entities caused and or assisted in reinfecting the processing system with the malicious software.

In another broad form there is provided a system to detect one or more entities which are able to reinfect a processing system with malicious software wherein the system is configured to 

monitor in the processing system activity indicative of the malicious software reinfecting the processing system 

in response to detecting the activity store a record of the activity and one or more entities associated with the activity 

in response to determining that the malicious software has reinfected the processing system analyse the record to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

In another broad form there is provided a computer program product comprising a computer readable medium having a computer program recorded therein or thereon the computer program enabling detection of one or more entities which are able to reinfect a processing system with malicious software wherein the computer program product configures the processing system to 

monitor in the processing system activity indicative of the malicious software reinfecting the processing system 

in response to detecting the activity store a record of the activity and one or more entities associated with the activity 

in response to determining that the malicious software has reinfected the processing system analyse the record to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

In another broad form there is provided a method of detecting a variant of malicious software in a processing system wherein the method comprises 

applying a signature for the malicious software in the processing system wherein the signature is associated with a first group of related malicious entities 

in response to detecting an entity which satisfies the signature determining a second group of related malicious entities and

comparing the first group of related malicious entities to the second group of malicious entities wherein in response to a partial match a discrepant portion of the second group of related entities is detected as the variant of the malicious software.

 c determining one or more related entities to the base entity which are related by the entity property and

 d performing an analysis of the related entities to determine if one or more of the related entities caused and or assisted in reinfecting the processing system with the malicious software.

In another broad form there is provided a system to detect a variant of malicious software in a processing system wherein the system in configured to 

apply a signature for the malicious software in the processing system wherein the signature is associated with a first group of related malicious entities 

in response to detecting an entity which satisfies the signature determine a second group of related malicious entities relative to the entity and

compare the first group of related malicious entities to the second group of related malicious entities wherein in response to a partial match a discrepant portion of the second group of related entities is detected as the variant of the malicious software.

In one embodiment there is provided a server processing system in data communication with the processing system of the above system wherein the server processing system is configured to 

receive from the processing system variant data indicative of the discrepant portion of the second group of related entities wherein the processing system generates the variant data 

modifying the signature associated with the first group of related malicious entities so as to detect the discrepant portion of the second group of related entities and

distributing the modified signature to one or more processing systems in data communication with the server processing system.

In one aspect there is provided a computer readable medium having a computer program recorded therein or thereon the computer program enabling detection of a variant of malicious software in a processing system wherein the computer program product configures the processing system to 

apply a signature for the malicious software in the processing system wherein the signature is associated with a first group of related malicious entities 

in response to detecting an entity which satisfies the signature determine a second group of related malicious entities relative to the entity and

compare the first group of related malicious entities to the second group of related malicious entities wherein in response to a partial match a discrepant portion of the second group of related entities is detected as the variant of the malicious software.

According to another broad form the present invention provides a computer readable medium of instructions for giving effect to any of the aforementioned methods or systems. In one particular but non limiting form the computer readable medium of instructions are embodied as a software program.

The following modes given by way of example only are described in order to provide a more precise understanding of the subject matter of a preferred embodiment or embodiments.

In the figures incorporated to illustrate features of an example embodiment like reference numerals are used to identify like parts throughout the figures.

A particular embodiment of the present invention can be realised using a processing system an example of which is shown in . The processing system illustrated in relation to can be used as a client processing system and or a server processing system .

In particular the processing system generally comprises at least one processor or processing unit or plurality of processors memory at least one input device and at least one output device coupled together via a bus or group of buses . In certain embodiments input device and output device could be the same device. An interface can also be provided for coupling the processing system to one or more peripheral devices for example interface could be a PCI card or PC card. At least one storage device which houses at least one database can also be provided. The memory can be any form of memory device for example volatile or non volatile memory solid state storage devices magnetic devices etc. The processor could comprise more than one distinct processing device for example to handle different functions within the processing system . Input device receives input data and can comprise for example a keyboard a pointer device such as a pen like device or a mouse audio receiving device for voice controlled activation such as a microphone data receiver or antenna such as a modem or wireless data adaptor data acquisition card etc. Input data could come from different sources for example keyboard instructions in conjunction with data received via a network. Output device produces or generates output data and can comprise for example a display device or monitor in which case output data is visual a printer in which case output data is printed a port for example a USB port a peripheral component adaptor a data transmitter or antenna such as a modem or wireless network adaptor etc. Output data could be distinct and derived from different output devices for example a visual display on a monitor in conjunction with data transmitted to a network A user could view data output or an interpretation of the data output on for example a monitor or using a printer. The storage device can be any form of data or information storage means for example volatile or non volatile memory solid state storage devices magnetic devices etc.

In use the processing system can be adapted to allow data or information to be stored in and or retrieved from via wired or wireless communication means the at least one database . The interface may allow wired and or wireless communication between the processing unit and peripheral components that may serve a specialised purpose. The processor receives instructions as input data via input device and can display processed results or other output to a user by utilising output device . More than one input device and or output device can be provided. It should be appreciated that the processing system may be any form of terminal server processing system specialised hardware or the like.

The processing system may be a part of a networked communications system. The processing system could connect to a network for example the Internet or a WAN. The network can comprise one or more client processing systems and one or more server processing systems wherein the one or more client processing systems and the one or more server processing systems are forms of processing system . Input data and output data could be communicated to other devices via the network. The transfer of information and or data over the network can be achieved using wired communications means or wireless communications means. The server processing system can facilitate the transfer of data between the network and one or more databases. The server processing system and one or more databases provide an example of an information source.

Referring to there is shown a block diagram illustrating a request . Generally the request comprises an activity and a target entity and a requesting entity . In particular the requesting entity causes the activity to be performed in relation to the target entity .

For example an executable object in a processing system may request to download data from a website on the Internet. In this example the executable object would be considered as the requesting entity the activity would be considered as the act of downloading data and the target entity would be the web site on the Internet. The requesting entity is a starting point in the processing system or network of processing systems which requests the action to be performed and the target entity is an end point in the processing system or network of processing systems in relation to which the action is performed.

As will be described in more detail a request is analysed to determine at least one of the requesting entity and the target entity . By determining at least one of the requesting entity and the target entity an accurate and efficient process of detecting malicious software in a processing system can be performed.

Referring to there is shown an example of a method of intercepting an activity in a processing system .

At step an event occurs in the processing system . The event can be a request by a requesting entity to perform an action in relation to a target entity . At step an operating system running in the processing system registers the occurrence of the event. At step the operating system passes the registered event to the hook chain. At step the event is passed to each hook in the hook chain such that different applications processes and devices may be notified of the registered event. Once the event has propagated throughout the hook chain the method comprises at step an application receiving notification of the event being registered by the processing system .

At step the method comprises the application initiating an API call to an API procedure so as to carry out a response to the registered event wherein the response may be the execution of the action in relation to the target entity . If an API hook has been established between the API call and the API procedure the API call is intercepted before it reaches the API procedure at step . Processing can be performed by an API hook function once the API call has been intercepted prior to the API procedure being called. The API call may be allowed to continue calling the API procedure at step such that the action is performed in relation to the target entity .

Referring to there is shown a flow diagram representing an example method of detecting one or more entities which are able to reinfect a processing system with malicious software. At step the method comprises monitoring in the processing system activity indicative of the malicious software reinfecting the processing system . At step in response to detecting the activity the method comprises storing a record of the activity and one or more entities associated with the activity . At step the method comprises determining if the malicious software has reinfected the processing system . At step in response to determining that the malicious software has reinfected the processing system the method comprises analysing the record to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

A system can be provided which detects the one or more entities which are able to reinfect the processing system . In particular the system is configured to monitor in the processing system activity indicative of the malicious software reinfecting the processing system in response to detecting the activity store a record of the activity and one or more entities associated with the activity determine if the malicious software has reinfected the processing system and in response to determining that the malicious software has reinfected the processing system analyse the record to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

By monitoring and storing activities that are associated with reinfecting the processing system with the malicious software the one or more entities which cause or facilitate the reinfection can be determined quickly and accurately using the stored records. By detecting the one or more reinfecting entities vendors are able to detect and restrict the reinfecting entities in future applications of the system such that the malicious software is restricted from reinfecting the processing system .

Referring to there is shown a block diagram representing an example of the system to detect the one or more entities which are able to reinfect the processing system with malicious software.

In particular the system comprises a monitoring module to monitor in the processing system activity indicative of the malicious software reinfecting the processing system . The system also comprises storage module for storing a record of the activity and one or more entities associated with the activity . The storage module can be provided in the form of the storage device . In one embodiment the storage module can be provided in the form of a database.

The system also comprises an analysis module to determine if the malicious software has reinfected the processing system . The system also comprises a reinfection detector module which in response to detecting that the malicious software has reinfected the processing system analyses the record or records of the storage module to detect the one or more entities which were associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software.

In particular at step the method comprises detecting malicious software in the processing system using the analysis module . The functionality of the analysis module will be described in more detail below. At step the method comprises restricting the detected malicious software from performing malicious activity in the processing system . This may comprise removing the malicious software from the processing system . Alternatively this may comprise modifying the malicious software such that the malicious software does not function maliciously.

At step the method comprises intercepting a request to perform a monitored activity indicative of behaviour associated with the processing system being reinfected with the malicious software. The monitoring module can be configured to intercept particular requests to perform activities in the processing system which are associated with the malicious software reinfecting the processing system . The monitoring module can be configured to intercept activities as discussed in relation to . For example the following non exhaustive list of activities may be monitored by the monitoring module an executable entity creating new executable entities entities being downloaded from a remote network address such as the Internet and entities which create registry entries in the system registry.

At step the method comprises recording the activity and the one or more entities associated with the activity in the storage module . A hook function can be used to determine the requesting entity and or the target entity which are associated with the intercepted activity . As previously indicated the storage module may be in the form of a database wherein a record of the activity the requesting entity and or the target entity can be stored. Other information may also be stored in the record such as a time stamp when the activity occurred in the processing system .

At step the method comprises detecting using the analysis module if the malicious software has reinfected the processing system . In response to a positive detection ie. the malicious software has reinfected the processing system the method proceeds to step . In response to a negative detection ie. the processing system has not been reinfected by the malicious software the method proceeds back to step by continuing to monitor the activities in the processing system .

At step the method comprises using the reinfection detector module to analyse the storage module to determine the one or more entities which are associated with the activity that caused and or assisted in reinfecting the processing system with the malicious software. The reinfection detector can analyse particular sequences of recorded activity in the storage module to determine the activities associated with the particular reinfection of the malicious software.

Preferably the malicious software is again restricted in the processing system . The method can comprise restricting the one or more entities which cause and or assist in reinfecting the processing system with the malicious software. This can comprise removing the one or more reinfecting entities . Alternatively the one or more entities may be modified to restrict reinfection of the processing system with the malicious software. In another option the method can comprise reporting the one or more reinfection entities to a server processing system for review prior to restricting the one or more entities.

Optionally a user of the processing system can be displayed using the processing system a list of the one or more entities which cause the reinfection of the processing system . In one form the user is provided the option of indicating whether the one or more entities causing the reinfection should be restricted. In another form the user can specify that the system automatically restrict the one or more entities causing the reinfection.

In one form if one of the entities causing the reinfection is a website on the Internet then the network address of the website can be added to a website blocking list to restrict the malicious software reinfecting the processing system .

In one form as will be apparent from below the analysis module can use a relationship analysis module to determine a group of entities which are related to the one or more reinfection entities . By using the relationship analysis module one of the reinfection entities is treated as a starting entity such as to determine the group of related malicious entities relative to the reinfection entity in the processing system . The group of related malicious entities can then be restricted in the processing system .

As shown in the system can be implemented as a distributed system comprising a plurality of client processing systems and one or more server processing systems . As shown in the client processing systems are in data communication with the server processing system . On detection of the one or more reinfection entities in one of the client processing systems the respective client processing system generates reinfection data indicative of the one or more reinfection entities and transfers the reinfection data to one of the server processing systems . The respective server processing system can modify a signature related to the reinfecting malicious software such as to identify the one or more reinfecting entities in future applications of the signature. The modified signature can be transferred from the server processing system to at least some of the client processing systems which are in data communication. The modified signature can be assessed at the server processing system for false positives prior to distribution to determine if the modified signature is accurate in identifying the malicious software and reinfecting entities 

Referring to there is shown a flow diagram representing an example method of detecting a variant of malicious software in a processing system . In particular at step the method comprises applying a signature for the malicious software in the processing system wherein the signature is associated with a first group of related malicious entities . At step in response to detecting an entity which satisfies the signature the method comprises determining a second group of related malicious entities relative to the malicious entity . At step the method comprises comparing the first group of related malicious entities to the second group of malicious entities wherein in response to a partial match a discrepant portion of the second group of related entities is detected as the variant of the malicious software. The discrepant portion of the second group of entities is the one or more entities which are not in common with the first group of related entities.

A system can be provided which detects the variant of the malicious software. In particular the system is configured to apply a signature for the malicious software in the processing system wherein the signature is associated with a first group of related malicious entities in response to detecting an entity which satisfies the signature determine a second group of related malicious entities relative to the entity and compare the first group of related malicious entities to the second group of related malicious entities wherein in response to a partial match a discrepant portion of the second group of related entities is detected as the variant of the malicious software.

Referring now to there is shown a block diagram representing an example system to detect a variant of malicious software. In particular the system comprises a signature module which is configured to apply a number of signatures for detecting different types and portions of malicious software in the processing system . Each signature is associated with a first group of related malicious entities which the respective signature can be used to detect in the processing system .

The system also comprises a relationship analysis module . When the signature module detects a malicious entity which satisfies one of the signatures the relationship analysis module is applied to the processing system to determine a second group of related malicious entities relative to the malicious entity . The system also comprises a comparison module which compares the first group of related entities associated with the satisfied signature with the second group of related entities relative to the detected malicious entity . In the event that there is a partial match between the related entities in the first group of related malicious entities and the second group of related malicious entities a discrepant portion of the second group of related entities is detected as being the variant of the malicious software.

Referring now to there is shown a block diagram illustrating another example system to detect a variant of malicious software. In particular the system is a distributed system comprising one or more client processing systems in data communication with one or more of server processing systems . As shown in FIG. variant data indicative of the variant of the malicious software is transferred from one of the client processing systems to one of the server processing systems . The server processing system modifies the satisfied signature and distributes the modified signature such that the variant malicious software is detected and restricted in future applications of the modified signature .

Referring now to there is shown a more detailed flow diagram representing the method described with relation to .

In particular at step the method comprises detecting one or more malicious entities in the processing system using one of the signatures of the signature module . At step the method comprises determining a second group of related malicious entities for the one or more malicious entities detected in step . This can be performed using the relationship analysis module to determine the group of related malicious entities as will be explained in more detail below. This process can also involve determining a group of related suspicious entities relative to the malicious entity and using a set of malicious assessment rules to determine the group of related malicious entities relative to the malicious entity . This can be performed in the distributed system as will be explained in more detail below.

At step the method comprises comparing a first group of related malicious entities for the satisfied signature of the signature module to the second group of related malicious entities . In response to a partial match between the first group of related malicious entities and the second group of related malicious entities a variant of the malicious software has been detected in the discrepant portion of the second group of related malicious entities .

At step the method can comprise generating variant data indicative of the difference between the first group of related entities and the second group of related entities . At step the method comprises using the variant data to modify the signature satisfied at step such that the modified signature can detect the entities of the variant malicious software in future applications.

In one form the variant data may be generated in a client processing system and transferred to a server processing system . The variant data is also indicative of the satisfied signature . The server processing system modifies the satisfied signature using the variant data and distributes to one or more of the client processing systems the updated signature such the entities of the variant malicious software can be detected and restricted. The modified signature can be assessed at the server processing system for false positives to determine if the modified signature is accurate in detecting the variant malicious software prior to distribution to client processing systems . Additionally the data indicative of the discrepant portion of the second group of related malicious entities can be stored with the modified signature .

Optionally a user of the processing system can be displayed using the processing system an indication of the detection of the variant of the malicious software. Information can be displayed to the user indicative of the entities which are different between the original version of the malicious software and the new variant. In one form the user is provided the option of indicating whether the variant should be restricted. In another form the user can specify that the system automatically restrict the entities of the variant of the malicious software.

Referring now to there is shown the analysis module which can comprise a number of sub modules to determine if the processing system is performing or is going to perform an activity associated with malicious software.

In particular the analysis module can comprise the sub modules of a cryptographic hash module a checksum module a disassembly module a black list white list module a relationship analysis module and a pattern matching module . The analysis module can be used to determine if the activity associated with one of more entities is related to malicious software.

The analysis module can be configured to use one or more of these sub modules exclusively or in combination to detect activity associated with malicious software in the processing system . The analysis module can be used to analyse at least one of the target entity the requesting entity and the activity to determine if the processing system is compromised with malicious software.

The cryptographic hash module of the analysis module is configured to generate a cryptographic hash value of an entity. As the cryptographic hash value can be used an identity the cryptographic hash value can be used in comparisons with the blacklist whitelist module to determine whether the entity is malicious.

The checksum module of the analysis module is configured to determine a checksum of an entity of the processing system . The checksum can be compared to a database blacklist whitelist module to determine whether the entity is malicious.

The pattern matching module of the analysis module is configured to search an entity for particular patterns of strings or instructions which are indicative of malicious activity. The pattern matching module may operate in combination with the disassembly module of the analysis module .

The disassembly module is configured to disassemble binary code of an entity such that the disassembly module determines processing system instructions for the entity. The processing system instructions of the entity can then be used by the pattern matching module to determine whether entity is malicious. Although strings of instructions can be compared by the pattern matching module the pattern matching module may be configured to perform functional comparisons of groups of instructions to determine whether the functionality of the entity is indicative of malicious software.

The blacklist whitelist module of the analysis module comprises a list of malicious and or non malicious entities. The blacklist whitelist module may be provided in the form of a table or database which comprises data indicative of malicious and non malicious entities. The table may comprise checksums and cryptographic hash values for malicious and non malicious entities. The data stored in the blacklist whitelist module can be used to determine whether an entity in the processing system is malicious or non malicious

The relationship analysis module can be used to detect related entities based on a starting entity . As shown by example in once a malicious entity has been detected the malicious entity is treated as the starting entity and then using the relationship analysis module a web of entities related to the starting entity can be determined. At least a portion of the web of entities is determined to be the group of related malicious entities A detailed explanation of detecting related one or more related entities is described in the Applicant s co pending U.S. patent application Ser. No. 11 707 425 and co pending Australian Patent application AU2007200605 entitled Determination of related entities the content of which is herein incorporated by cross reference.

Generally malicious software comprises a bundle of entities. By only considering a single entity by itself it may not be accurately possible to determine all the entities of the malicious software. However by determining related entities relative to the starting entity representing the malicious entity a more accurate assessment can be made. Furthermore removing a single malicious entity may not necessarily disable the malicious software from performing some malicious activity. Some particular forms of malicious software can perform repairs in relation to a single malicious entity being removed or disabled. Therefore detecting a group of related entities can be beneficial for disabling malicious software.

Referring now to there is illustrated a flow diagram illustrating an example method of determining a group of related entities in a processing system . The method represents the operation of the relationship analysis module . The method can be used to determine a group of related malicious entities.

In particular at step the method comprises recording a malicious entity as the starting entity . At step the method comprises determining using a related entity rule at least one related entity relative to the starting entity .

A more detailed example of a method illustrated in will now be described with reference to which are directed towards determining a group of related malicious entities.

In particular at step the method comprises recording the malicious entity which can comprise one of the reinfecting entities as the starting entity . This can comprise the client processing system recording the starting entity in the client processing system memory such as storage device . The starting entity may be stored in the form of a table or list.

At step the method comprises determining an entity property associated with the starting entity . The entity property may be an entity type of the entity such as whether the starting entity is an executable entity a run key entity or a dynamic linked library entity. The entity property may also be a time that the entity was created or modified. The entity property may comprise the directory which the entity is contained within. The entity property may also be a vendor name associated with the entity. The entity property may also be a particular network address from which the entity was downloaded.

It will be appreciated that more than one entity property may be determined for the starting entity . However for the purposes of simplicity for this example it will be assumed that one entity property has been determined for the starting entity .

At step the method comprises obtaining based on the entity property of the starting entity one or more related entity rules. In this particular example the one or more related entity rules take the form of one or more rules for determining suspicious entities related to the starting entity . Step may comprise selecting based on the entity property the one or more related entity rules from a larger set of related entity rules. Each related entity rule is associated with a particular entity property and as such a selection of a related entity rules can be performed based on the entity property of the starting entity . An example list of entity properties and corresponding related entity rules is shown below in List 1.

It will be appreciated that a more detailed list of entity properties and corresponding related entity rules can be obtained using the above general rules. An example of a more detailed list of entity properties and corresponding related entity rules are provided below.

It will be appreciated that a starting entity having a trigger entity property could be any one of the following entities run keys Appinit Uninstall Key Service Hooks protocol filter and a startup list. It will further be appreciated that a starting entity having an executable entity property could be any one of the following entities executables dynamic linked libraries and other modules.

It will be appreciated from List 1 that the general entity properties and related entity rules can be extended to specific entity types such as the entity types shown in Table 1 for example INF entities Cookies entity windows instance entity and the like shown above. The more specific rules in Table 1 allow for a more specific selection of rules based on the more specific entity property which can therefore result in accurately determining the relevant related entity rules.

It will also be appreciated from Table 1 that more than one related entity rule can be obtained based on the one or more entity properties of the starting entity . As shown above in Table 1 if the entity property indicates that the starting entity is an executable entity then nine separate types of related entity rules can be applicable for determining the suspicious related entities relative to the starting entity .

Additionally or alternatively the client processing system may transfer to a server processing system the entity property of the starting entity and receive from the server processing system the one or more related entity rules. In this step the server processing system may select the one or more related entity rules using the entity property from a server set of related entity rules and then transfer the one or more related entity rules to the client processing system .

At step the method comprises determining using the one or more related entity rules the at least one related entity. In this particular example the related entity rules determine related suspicious entities in relation to the starting entity . For simplicity purposes the following example is presented using one related entity rule however it will be appreciated that more than one related entity rule can be used. In this example the starting entity may be Spywarz.exe which comprises a vendor name of Spywarz Software Enterprises . The entity property of the vendor name is used to obtain a related entity rule such as 

This related entity rule is then used to determine any entities in the client processing system which satisfy this rule. When a scan has been performed using the related entity rule it was determined that Spywarz.dll comprises a vendor name of Spywarz Software Enterprises . As the related entity rule has been satisfied Spywarz.dll is considered a related entity to the starting entity Spywarz.exe As such a group of related suspicious entities has been determined which comprises Spywarz.exe and Spywarz.dll .

Steps to represent a single iteration to determine a group of related suspicious entities. However if a more detailed group of related entities is required it is possible to perform multiple iterations of steps to as will now be discussed

At step the at least one related entity is recorded. This may involve adding the at least one related entity to the list or a table which comprises the starting entity recorded at step . Furthermore the list or table may comprise data indicative of the relationship between the at least one related entity and other entities which have been previously recorded.

At step the method comprises determining if an end condition has been met. For example the end condition may be satisfied when no other related entities are determined when no new related entities are determined when no other related entities are determined in a period of time when the starting entity has an entity type which is indicative of the end condition and or when a selected number of repetitions have been performed. If the end condition has not been met the method continues to step .

At step the method comprises setting the at least one related entity as the starting entity . This may be performed in memory by reassigning the value of the starting entity . By setting the at least one related entity as the starting entity steps to can be repeated until the end condition is met. Upon completion of step the method returns to step thereby determining the related entities for the newly set starting entity . As such a web or network of related entities is determined until the end condition is met.

Once the end condition is satisfied the determination of the group of related entities has been completed and thus the other sub modules of the analysis module and or a server side analysis module can be used to determine whether the group of related entities or at least some of the related entities are associated with malicious activity.

An example method of determining entities which are associated with malicious activity using a server side analysis module will now be described with reference to .

At step the method comprises receiving in the server processing system related entity data indicative of the group of related entities from the client processing system . The related entity data may comprise measurements and or properties associated with each related entity in the group . Additionally or alternatively the related entity data may be the actual entities detected in the client processing system . The server processing system may also receive a suspicion identifier indicative of a suspected behaviour associated with the suspicious entities. For example the suspicious identifier may be indicative of the suspicious entities being associated with a pop up window being displayed on the client processing system at regular intervals. The related entity data may also comprise data indicating the starting entity in the group .

At step the server processing system determines using the related entity data one or more common entities in relation to records from other client processing systems . This step comprises determining if the related entity data received from one of the client processing systems comprises one or more entities in common with other records of related entity data received from other client processing systems . If suspicion identifiers were received from the other client processing systems in relation to the related entity data the server processing system may use the suspicion identifier to determine the common entities. By determining the common entities the group of entities which may be malicious can be reduced. Furthermore this step provides an additional filter by reducing the number of false positives that need to be analysed.

At step the method comprises the server processing system determining using the one or more common entities and the server side analysis module one or more entities associated with malicious activity. The server side analysis module can comprise one or more of the sub modules of the client processing system analysis module . Furthermore the server side analysis module can comprise a set of malicious assessment rules.

The malicious assessment rules can be used to determine a level of maliciousness for the common related entities. If the level of maliciousness is determined to be more than a maximum limit then at least some of the common related entities are identified as being associated with malicious activity.

In one form if a common entity satisfies a particular malicious assessment rule the common entity is associated with a value or weight indicating how malicious the entity is considered. If the same common entity satisfies a number of particular malicious assessment rules the values or weights associated with the entity are totalled. The total value or weight can be compared to a maximum limit to determine whether the common related entity is associated with malicious activity.

The malicious assessment rules are generally considered to be a stricter set of rules in order to filter the common related entities. As the malicious assessment rules are generally more complex and considered more complete than the related entity rules a number of the entities which were considered suspicious may not necessarily satisfy the malicious assessment rules and are therefore not identified as being associated with malicious activity. For example a legitimate printer driver may have been identified as related to an entity of interest and was also identified as a common entity due to a particular type of malicious software using the printer driver to perform malicious activities. However after the malicious assessment rules have been applied the printer driver is determined to not be part of the malicious activity. The remaining common entities which satisfy the malicious assessment rules are identified as the group of related malicious entities . In some instances data indicative of the group of malicious entities can be transferred back to the relevant client processing system such that at least one of the variant of the malicious software can be determined and the one or more reinfecting entities can be detected.

In regard to detecting a group of related malicious entities using the reinfecting entity as the starting entity the client processing system determines a group of related suspicious entities relative to the starting entity and transfers data indicative of the group of related suspicious entities to the server processing system . The server processing system then determines using method outlined in the group of related malicious entities based on the group of related suspicious entities . The server processing system then modifies the relevant signature for the reinfecting malicious software based on the identified group of related malicious entities and transfers the modified signature to at least some of the client processing systems in the distributed system .

In regard to detecting a variant of the malicious software using a detected malicious entity as a starting entity one of the client processing systems determines a group of related suspicious entities relative to the starting entity . The client processing system then transfers data indicative of the group of related suspicious entities to the server processing system . The server processing system then applies the method described with reference to to determine the group of related malicious entities . In some forms data indicative of the group of related malicious entities can be transferred back to the client processing system such that the comparison module can determine the variant of the malicious software. However in other embodiments the server processing system can perform the comparison between the first group of related malicious entities and the second group of related malicious entities to determine the variant of the malicious software.

In optional forms the server processing system may transfer to at least one of the client processing systems instructions to restrict the malicious activity. In one form this may comprise quarantining the identified entities associated with the malicious activity in one of the client processing systems . The instructions may be computer executable instructions which can be transferred from the server processing system to one of the client processing systems which can be executed to quarantine the one or more entities identified as being associated with malicious activity. In one embodiment quarantining the one or more entities identified as being associated with the malicious activity may comprise removing the one or more identified entities from the client processing system . In another embodiment quarantining the one or more identified entities may comprise modifying the one or more entities in the one or more client processing systems.

Optionally the one or more client processing systems may receive one or more updated related entity rules. The one or more client processing systems may receive updated rules from the server processing system or via a storage device such as a compact disk or the like. The one or more client processing systems can then update the existing rules with the updated rules.

In one form statistical processes fuzzy logic processes and or heuristical processes can be used in combination with related entity rules and or malicious assessment rules to determine whether a rule has been satisfied.

Optionally the related entities can be presented to a user of one of the client processing systems . The group of related entities may be presented in a tabular form or may be presented in a graphical representation. Additionally the group of related entities may presented indicating direct or indirect links between entities in the group . For example Spywarz.exe and Spywarz.dll for the above example would have a direct link. However if a subsequent related entity to Spywarz.dll was determined to be a system variable SPYWARZ VARIABLE then there would be an indirect link between Spywarz.exe and SPYWARZ VARIABLE .

It will be appreciated that although in some of the above examples the server processing system generates the instructions to quarantine the entities associated with the malicious activity the one or more client processing systems may alternatively generate the instructions.

Additionally or alternatively different weighting values may be assigned to different malicious assessment rules. The weighting values may be summed or used in a calculation and if the result is above a maximum limit then at least some of the group is determined to be associated with malicious activity.

It is noted that an activity or an entity which is identified as being suspicious is not always identified as being associated with malicious activity.

The related entity rules are generally less complex such as a reduced number of rules compared to the malicious assessment rules in order to reduce the processing performed by the client processing systems . The malicious assessment rules can be used by the server processing system to determine which related entities are associated with malicious activity. By using this configuration the server processing system preferably performs the processing related to determining the entities associated with the malicious activity and thus the client processing systems can utilise the processing system resources more effectively.

The embodiments discussed may be implemented separately or in any combination as a software package or component. Such software can then be used to pro actively notify restrict and or prevent malicious activity being performed. Various embodiments can be implemented for use with the Microsoft Windows operating system or any other modem operating system.

It will be appreciated that the term malware can been used in an abbreviated sense for malicious software which comprises many types of processing system threats such as pestware spyware and other forms of threats as discussed above.

Optional embodiments of the present invention may also be said to broadly consist in the parts elements and features referred to or indicated herein individually or collectively in any or all combinations of two or more of the parts elements or features and wherein specific integers are mentioned herein which have known equivalents in the art to which the invention relates such known equivalents are deemed to be incorporated herein as if individually set forth.

Although a preferred embodiment has been described in detail it should be understood that various changes substitutions and alterations can be made by one of ordinary skill in the art without departing from the scope of the present invention.

