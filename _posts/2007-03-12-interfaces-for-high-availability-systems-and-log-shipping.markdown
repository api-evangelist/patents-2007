---

title: Interfaces for high availability systems and log shipping
abstract: Architecture for replicating a database through log shipping. A replication service replicates data using one or more new internal application program interfaces (APIs), a replay configuration API which abstracts configuration information for each destination (or target) instance. APIs for log file management as part of the replication process are provided for opening communications for log shipping, tracking success of log shipping and closing out log shipping communications. Log shipping APIs are also provided for log truncation control. A ship control object is provided as a base class which includes an API for other components of the replication service to operate on log files when the log files are placed into a log directory. The ship control API is utilized by the replication service and for interaction with storage system log files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08069141&OS=08069141&RS=08069141
owner: Microsoft Corporation
number: 08069141
owner_city: Redmond
owner_country: US
publication_date: 20070312
---
Corporations have long ago realized the importance of effective and efficient communications to customers and among employees. As communications technology continues to evolve in conjunction with wired and wireless communications more companies are buying into systems that facilitate not only communications e.g. message email . . . from many different locations but also from the myriad of different devices such as cell phones and portable computers. As companies become more technology dependent reduced performance and or failure in these systems can introduce a significant cost in both sales resources and lost time just to name a few. Accordingly more reliable systems e.g. high availability are desired to not only provide service at all times but also to maintain the latest versions of information.

One technique for providing the latest up to date information for all users of a server or system is data replication among multiple similar systems or to specifically designated backup systems. Log shipping is a replication technique for maintaining a continuous database copy. A transaction log is a file that contains a record of the changes that were made to a database. All changes to the database are recorded in the transaction log files before the changes are written into the database files. If a database shuts down unexpectedly unfinished transactions can be restored by replaying the transaction log files into the database.

By being able to maintain the latest version of information on another or alternative system businesses can potentially provide high availability services to customers and enterprise systems. However in order to support high availability services methods are desired that provide fast and efficient data access for replication purposes and for reliable management of log files. In enterprise deployments for example there can be multiple communications and collaboration systems and databases that require information updates. Accordingly it is desirable to employ means for improving and or optimizing data lookups and replication services.

The following presents a simplified summary in order to provide a basic understanding of novel embodiments described herein. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The disclosed architecture includes a novel replication service which replicates database through log shipping. The replication service can replicate data at the storage group level and uses one or more new internal application program interfaces APIs for example a replay configuration API which abstracts configuration information for each destination or target instance. The replay configuration API provides the configuration information necessary to replicate at least a single storage database. Encapsulating the configuration information in an API allows for optimization to the database for lookups and for building test instances for example of the replay service which can then use configuration information associated different data storage architectures e.g. SQL structured query language .

Additionally disclosed and described are APIs for log file management as part of the replication process. For example a source storage system involved in replication should not delete log files until the files have been replayed by the replication target. Moreover neither the source nor the target should delete log files until the desired storage system group has been backed up. APIs are described for use by the replication target to communicate to the replication source that a log file has been replayed and replayed successfully. An API is also provided that communicates to the replication target which log files are now safe to delete.

A ship control object is provided as a base class which includes an API for other components of the replication service to operate on log files when the log files are placed into a log directory. The ship control API is utilized by the replication service and for interaction with storage system log files. A log ship open API can be called by the replication service when initializing replication for a storage system e.g. a storage group . This API opens a connection to the store and returns a handle used for the remaining communications. A log ship successful API can be called by the replication service whenever a log file or group of log files have been successfully replayed on the target system or replica . This API tells the server store the generation of the log which has most recently been replayed for example. The store then truncates logs if there are any logs to truncate and tells the replication service which logs may be truncated on the replica. A log ship close API is used to close the log shipping part of replication when replication for a storage system is shutting down.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

The disclosed architecture includes several application program interfaces APIs in support of replication services for high availability of one or more network services using replication by log shipping. The replication service can include an API for accessing configuration data for processing at the target. Additionally APIs are provided for managing log file shipping by opening and closing transport operations indicating success of replication and replay and truncation of log files at the source and the target for example.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

Referring initially to the drawings illustrates a computer implemented system for managing data. The system includes a replication component for replicating a source database e.g. optionally of a source storage group to a destination or target database e.g. optionally of a destination or target storage group via a source transaction log denoted S LOG also referred to as log shipping. In other words the source log is communicated to a directory associated with the destination database thereby becoming a destination log denoted D LOG .

The system also includes a configuration component for providing access to configuration information for replication of the source database to the destination database . A transport component provides an interface for processing of the transaction log . For example the transport component manages deletion of the transaction log at the source subsequent to replay of the log at the destination.

The configuration component can employ an internal replay API for replay processing of the source log at the destination. Additionally the transport component can include one or more ship or shipping APIs for log management including transport and truncation. For example one of the shipping APIs functions to inform the replication component that the source transaction log can be deleted at the source.

The system includes a replication service as part of the replication component which replicates the source database through log shipping at for example a storage group level e.g. storage groups and .

The configuration component can employ the internal replay API referred to herein as IReplayConfiguration which abstracts the configuration data for each replica instance. Encapsulating some or all of the configuration information in the replay API allows for optimization of lookups in the data base system e.g. Active Directory by Microsoft Corporation and for building test instances of the replay service which can use configuration data outside of the database system.

In one exemplary implementation the system can be employed as part of a communications and collaboration system e.g. Exchange Server by Microsoft Corporation . More specific descriptions of the APIs are provided infra.

In support of maintaining continuous connectivity for employees for example log shipping replication is employed to replicate the source database of the source storage group by shipping the source log file to a destination system log directory not shown in the target storage group for replay at the target storage group . Eventually after proper controls have been executed the source log file will become the destination log file which will then be replayed.

In support thereof the replication service calls the replay API to provide the configuration information necessary to replicate a single storage group e.g. group or group . The replay API can be a C interface that obtains the configuration data from the destination database system e.g. Active Directory . Examples of data that can be accessed by the replay API include the location of the source and destination databases location and names of the log files and storage group name and GUID globally unique identifier for the storage group. Other API member properties will be provided hereinbelow with respect to the exemplary IReplayConfiguration API employed.

In one implementation a storage engine e.g. ESE is an API built on top of RPC remote procedure call which is used to communicate between a replication service and the server store for replaying log files. In an alternative implementation or in combination therewith RPC is used to the store for log truncation. The storage engine can determine the structure of the underlying database s and can manage memory for fast replication and log file processing. Storage engine log shipping APIs can be implemented by the server store and are employed by the server replication service . In one implementation the log APIs provide a mechanism for the server replication service and server store to determine when it is safe for log files to be deleted or truncated . More extensively the log ship APIs facilitate at least the transport open close and successful state of log replication.

The ship APIs can include a base ship control API e.g. named ShipControl a ship open API e.g. named HrESELogShipOpen a ship successful API e.g. named HrESELogShipSuccessful and a ship close API e.g. named HrESELogShipClose examples of which will be provided infra. Although indicated as potentially operating with ESE this is not a requirement. ESE is a method that defines a low level API to the underlying database structures. The storage engine can also utilize log buffers to hold information in RAM before writing to the transaction logs and .

The source storage group should not delete log files until the files have been replayed by the replication target storage group . Moreover neither the source storage group nor the target storage group should delete log files until the source storage group has been successfully backed up. Note that the target storage group can also or alternatively be backed up. The ship successful API is used by the replication target group to communicate to the replication source group that the log file at the target has been replayed. The ship successful API also tells the replication target group which of the log files are now safe to delete.

The ship control API is the base class which provides an API for other components of the replication service to operate on log files and when placed into a log directory. The ship control API is utilized by the replication service and provides service interaction with storage engine log files.

The ship open API is called by the replication service when initializing replication for a storage group or . The ship open API opens a connection to the store and returns a handle used for the remaining communications. The ship successful API is called by the replication service whenever a log file or group of log files has been successfully replayed at the destination target storage group . The ship successful API can tell the server store the generation or version of the log which has most recently been replayed.

In support of maintaining continuous connectivity for employees for example log shipping replication is employed to replicate source database associated with the source log file of the source storage group to a destination system log directory not shown in the target storage group for replay at the target storage group . Eventually after proper controls have been executed the replicated source log file will become the destination log file which will be replayed to update the destination database system .

In support thereof the replay API provides the configuration information necessary to replicate a single storage group e.g. group or group . The replay API can be a C interface that obtains the configuration data from the destination database system e.g. Active Directory . Examples of data provided by the replay API include the location of the source and destination databases location of the log files and storage group name and GUID globally unique identifier for the storage group. Other API member properties will be provided hereinbelow with respect to the exemplary IReplayConfiguration API employed. The replay API is extensible in that variables can be changed and or added.

A storage engine e.g. ESE is an API in communication with RPC remote procedure call which is used to communicate between the replication service and the server store . The storage engine can determine the structure of the underlying database and can manage memory for fast replication and log file processing. Storage engine log shipping APIs can be implemented by the server and are employed by the server replication service . In one implementation the log APIs provide a mechanism for the server replication service and server store to determine when it is safe for log files to be deleted or truncated . More extensively the log ship APIs facilitate at least the transport open close and successful state of log replication.

The ship APIs can include the base ship control API e.g. named ShipControl the ship open API e.g. named HrESELogShipOpen the ship successful API e.g. named HrESELogShipSuccessful and the ship close API e.g. named HrESELogShipClose examples of which will be provided infra. Although indicated as potentially operating with ESE this is not a requirement. ESE is a method that defines a low level API to the underlying database structures. The storage engine can utilize log buffers to hold information in RAM before writing to the transaction logs.

The source storage group should not delete log files until the files have been replayed by the replication target group . Moreover neither the source storage group nor the target storage group should delete log files until the source storage group has been successfully backed up. The ship successful API is used by the replication target group to communicate to the replication source group that the log file has been replayed. The ship successful API also tells the replication target group which of the log files are now safe to delete.

The ship control API is the base class which provides an API for other components of the replication service to operate on log files when placed into a log directory. The ship control API is utilized by the replication service and the service interaction with storage engine log files.

The ship open API is called by the replication service when initializing replication for a storage group. The ship open API opens a connection to the store and returns a handle used for the remaining communication. The ship successful API is called by the replication service whenever a log file or group of log files has been successfully replayed at the destination target storage group . The ship successful API tells the server store the generation or version of the log which has most recently been replayed.

Similarly a destination communications server denoted COMMUNICATIONS SERVER includes a destination or target storage system for data replication. Changes to a destination database e.g. a file of the destination storage system are tracked and logged in a destination log file . In support thereof the destination server includes a destination replication system which further employs a destination replication service denoted REPLICATION SERVICE and a destination interface component denoted INTERFACE COMPONENT including one or more APIs for configuration data access and log shipping management.

In one exemplary operation when the source log file is placed in a source log directory not shown the replication service alone or in combination with the source interface component initiates the replication process. Here replication is not between local database files for example but to the remote destination database . The source replication service can communicate with the destination replication service to perform at least log shipping using the APIs provided by the source interface component and or by the destination interface component . When the source log file appears in the destination log directory not shown the destination replication service initiates replay of the log file to the destination database. API functionality as described herein applies for both the source and destination servers and . In the reverse scenario replication can occur from the labeled destination server to the source server by employing the destination replication service and based on interaction between the destination interface component and or by the source interface component .

In one implementation either or both of the communications servers or and can be mid tier systems. Alternatively the communications servers and can be distributed between mid tier and backend systems.

At log directories are monitored for processing of log file s for data replication. At data replication of data from source to destination storage systems is initiated using replication service. At configuration information of the destination storage system is accessed via a configuration API for replay processing at the destination. At a log transport session is opened via a ship open API. At the log file is transported to a destination storage system. At the log file is replayed at the destination to update the destination storage system database. At the source is signaled that the replay at the destination was successful. At the log files remaining after successful replay at the destination are managed for truncation. At the transport session is closed.

The log shipping APIs are implemented by the server store e.g. Exchange Server by Microsoft Corporation and are used by the server replication service as a mechanism for the replication service and server store to determine when it is safe for log files to be deleted. As described supra the shipping APIs include three APIs the ship open API ship successful API and the ship close API .

The ship open API is called by the replication service when initializing replication for a storage group. This API opens a connection to the store and returns a handle used for the remaining communication. illustrates a diagram of information accessible by the ship open API of the log shipping APIs . The ship open API can include properties related to server name storage group GUID annotation information storage group base name storage group log file path and log ship context . Other configuration can also be accessed via the ship open API as well.

The ship successful API is called by the replication service whenever a log file or group of log files has been successfully replayed on the replica. illustrates a diagram of information accessible by the ship successful API of the log shipping APIs . The ship successful API can include properties related to log ship context replay state and truncation state . Other configuration can also be accessed via the ship open API as well.

The ship close API is used to close the shipping mechanism when replication for a storage group is shutting down. illustrates a diagram of information accessible by the ship close API of the log shipping APIs . The ship close API can include log ship context information as well as other information as desired.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers.

Referring now to there is illustrated a block diagram of a computing system operable to execute the disclosed replication and log shipping architecture. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing system in which the various aspects can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that a novel embodiment also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects described herein may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

With reference again to the exemplary computing system for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus provides an interface for system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1494 interface technologies. Other external drive connection technologies are within contemplation of the subject architecture.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the exemplary operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed architecture.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the disclosed architecture can be implemented with various commercially available operating systems or combinations of operating systems. The applications and or modules can include functionality associated with the components described herein as well as the APIs and and services e.g. replication .

A user can enter commands and information into the computer through one or more wired wireless input devices for example a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks for example a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network for example the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication for example a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

Wi Fi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. Wi Fi is a wireless technology similar to that used in a cell phone that enables such devices for example computers to send and receive data indoors and out anywhere within the range of a base station. Wi Fi networks use radio technologies called IEEE 802.11x a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet .

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment for the disclosed replication and log shipping architecture. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information for example.

The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the architecture for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers . The servers and associated data stores can be included as part of the systems used for replication.

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

