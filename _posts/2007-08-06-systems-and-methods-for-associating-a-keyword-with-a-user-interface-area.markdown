---

title: Systems and methods for associating a keyword with a user interface area
abstract: Systems and methods for associating a keyword with a window are described. In one described system, a computer program, such as an indexer, captures processor, or query system, associates a keyword with a first user interface area. The query system or other computer program receives a signal that the first user interface is inactive and that a second user interface area is active and, in response, generates an implicit search query that includes the keyword associated with the first user interface area.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873632&OS=07873632&RS=07873632
owner: Google Inc.
number: 07873632
owner_city: Mountain View
owner_country: US
publication_date: 20070806
---
This application is a continuation of prior U.S. application Ser. No. 10 814 053 filed on Mar. 31 2004 which is incorporated by reference herein in its entirety. This application also relates to 

U.S. application Ser. No. 10 814 908 filed on Mar. 31 2004 entitled Systems and Methods for Generating Multiple Implicit Search Queries 

U.S. application Ser. No. 10 814 871 filed on Mar. 31 2004 entitled Systems and Methods for Extracting a Keyword from an Event 

U.S. application Ser. No. 10 815 074 filed on Mar. 31 2004 entitled Systems and Methods for Weighting a Search Query Result 

U.S. application Ser. No. 10 814 056 filed on Mar. 31 2004 entitled Systems and Methods for Refreshing a Content Display 

U.S. application Ser. No. 10 814 368 filed on Mar. 31 2004 entitled Systems and Methods for Constructing and Using a User Profile 

U.S. application Ser. No. 10 814 365 filed on Mar. 31 2004 entitled Systems and Methods for Identifying a Named Entity 

U.S. application Ser. No. 10 815 150 filed on Mar. 31 2004 entitled Systems and Methods for Analyzing Boilerplate 

U.S. application Ser. No. 10 813 875 filed on Mar. 31 2004 entitled Systems and Methods for Ranking Implicit Search Results 

U.S. application Ser. No. 10 814 052 filed on Mar. 31 2004 entitled Systems and Methods for Generating a User Interface and

U.S. application Ser. No. 10 814 924 filed on Mar. 31 2004 entitled Systems and Methods for Providing Search Results the entirety of all of which are incorporated herein by reference.

The present invention relates generally to methods and systems for information retrieval. The present invention relates particularly to systems and methods for associating a keyword with a user interface area.

Conventional search engines receive a search query from a user and execute a search against a global index. Such conventional search engines typically use one or more conventional methods for performing a search. For example one known method described in an article entitled The Anatomy of a Large Scale Hypertextual Search Engine by Sergey Brin and Lawrence Page assigns a degree of importance to a document such as a web page based on the link structure of the web. The search results are often presented in a list format including article identifiers and brief snippets about the documents in a web page that can be resized.

A user may also have access to other information stored on the user s local machine or on other storage media accessible via a network that is relevant to a user. Typically a user enters an explicit search that includes keywords and that is executed against a global or local index As used herein a keyword or keywords is defined broadly to mean words sequences of words acronyms or other characters including spaces based upon which a search may be performed .

Embodiments of the present invention provide systems and methods for associating a keyword with a user interface area. In one embodiment of the present invention a search system which may be implemented in hardware software or a combination thereof associates a keyword with a first user interface area. The system receives a signal that the first user interface area is inactive and that a second user interface area is active. In response the system generates an implicit search query that includes the keyword. In one embodiment a computer readable medium such as for example random access memory or a computer disk comprises code from carrying out such a method.

These exemplary embodiments are mentioned not to limit or define the invention but to provide examples of embodiments of the invention to aid understanding thereof. Exemplary embodiments are discussed in the Detailed Description and further description of the invention is provided there. Advantages offered by the various embodiments of the present invention may be further understood by examining this specification.

Embodiments of the present invention provide systems and methods for associating a keyword with a user interface area. Exemplary embodiments are described below.

Referring now to the drawings in which like numerals indicate like elements throughout the several figures is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown reflects a client side search engine architecture embodiment other embodiments are possible.

The system shown in includes multiple client devices n in communication with a server device over a wired or wireless network . The network shown comprises the Internet. In other embodiments other networks such as an intranet may be used instead. Moreover methods according to the present invention may operate within a single client device.

The client devices n shown each includes a computer readable medium . The embodiment shown includes a random access memory RAM coupled to a processor . The processor executes computer executable program instructions stored in memory . Such processors may include a microprocessor an ASIC a state machine or other processor and can be any of a number of computer processors such as processors from Intel Corporation of Santa Clara Calif. and Motorola Corporation of Schaumburg Ill. Such processors include or may be in communication with media for example computer readable media which stores instructions that when executed by the processor cause the processor to perform the steps described herein.

Embodiments of computer readable media include but are not limited to an electronic optical magnetic or other storage or transmission device capable of providing a processor such as the processor of client with computer readable instructions. Other examples of suitable media include but are not limited to a floppy disk CD ROM DVD magnetic disk memory chip ROM RAM an ASIC a configured processor all optical media all magnetic tape or other magnetic media or any other medium from which a computer processor can read instructions. Also various other forms of computer readable media may transmit or carry instructions to a computer including a router private or public network or other transmission device or channel both wired and wireless. The instructions may comprise code from any suitable computer programming language including for example C C C Visual Basic Java Python Perl and JavaScript.

Client devices n can be connected to a network as shown or can be stand alone machines. Client devices n may also include a number of external or internal devices such as a mouse a CD ROM DVD a keyboard a display or other input or output devices. Examples of client devices n are personal computers digital assistants personal digital assistants cellular phones mobile phones smart phones pagers digital tablets laptop computers Internet appliances and other processor based devices. In general the client devices n may be any type of processor based platform that operates on any operating system such as Microsoft Windows or Linux capable of supporting one or more client application programs. For example the client device shown comprises a personal computer executing client application programs also known as client applications . The client applications can be contained in memory and can include for example a word processing application a spreadsheet application an email application an instant messenger application a presentation application an Internet browser application a calendar organizer application and any other application or computer program capable of being executed by a client device.

The user can interact with the various client applications and articles associated with the client applications via various input and output devices of the client device . Articles include for example word processor spreadsheet presentation email instant messenger database and other client application program content files or groups of files web pages of various formats such as HTML XML XHTML Portable Document Format PDF files and audio files video files or any other documents or groups of documents or information of any type whatsoever.

The memory of the client device shown also contains a capture processor a queue and a search engine . The client device shown also contains or is in communication with a data store . The search engine can receive an explicit query from the user or generate an implicit query and retrieve information from the data store in response to the query.

The search engine shown contains an indexer a query system and a formatter . Events real time and historical contextual and indexable and performance data can be sent by the queue to the query system to provide the query system with information concerning current user context. The query system can use this information to generate an implicit query. The query system can also receive and process explicit queries from the user

The data store can be any type of computer readable media and can be integrated with the client device such as a hard drive or external to the client device such as an external hard drive or on another data storage device accessed through the network . The data store may include any one or combination of methods for storing data including without limitation arrays hash tables lists and pairs.

The data store comprises a local index. The local index in the embodiment shown in may comprise information such as articles which are associated with the client device a user of the client device or a group of users of the client device . For example the local index in the data store shown in may comprise an index of articles created edited received or stored by the client user using the client machine or articles otherwise associated with the client user or the client machine . The local index may be stored in a client machine such as in data store in a data store on a local network in a manner accessible by the client machine on a server accessible to the client machine through the Internet or in another accessible location.

In contrast a global index may comprise information relevant to many users or many servers such as for example an index of web pages located on multiple servers in communication with the World Wide Web. One example of a global index is an index used by the Google search engine to provide search results in response to a search query.

A single index may comprise both a local and a global index. For example in one embodiment an index may comprise both local and global information and include a user or client identifier with the local information so that it may be identified with the user s or client s to which it pertains. Moreover an index local or global may be present in one or multiple logical or physical locations.

In the embodiment shown in a user can input an explicit query into a search engine interface displayed on the client device which is received by the search engine . The search engine can also generate an implicit query based on a current user context or state which can be determined by the query system from contextual real time events or other means. Based on the query the query system can locate relevant information in the data store or other index and provide a result set. In one embodiment the result set comprises article identifiers identifying articles associated with the client applications or client articles. Client articles stored in the data store include articles associated with the user or client device such as the word processing documents previously viewed web pages and any other article associated with the client device or user . In another embodiment the result set also comprises identifiers identifying articles located on the network or network articles located by a search engine on a server device. Network articles include articles located on the network not previously viewed or otherwise referenced by the user such as web pages not previously viewed by the user

The result sets comprise one or more article identifiers. An article identifier may be for example a Uniform Resource Locator URL a file name a link an icon a path for a local file or anything else that identifies an article. In the embodiment shown an article identifier comprises a URL associated with an article.

Messaging articles stored in the data store include user s emails chat messages and instant messaging messages. Each time a message is received sent modified printed or otherwise accessed a record is stored in the data store . This information can later be searched to identify messages that should be displayed in the user interface.

An embodiment of the present invention may also store message threads in the data store . In such an embodiment messages are related together by various attributes including for example the sender recipient date time sent and received the subject the content or any other attribute of the message. The related messages can then be retrieved as a thread which may be treated as a document by the display processor .

The formatter can receive the search result set from the query system of the search engine and can format the results for output to a display processor . In one embodiment the formatter formats the results in XML or HTML. The display processor can be contained in memory and can control the display of the result set on a display device associated with the client device . The display processor may comprise various components. For example in one embodiment the display processor comprises a Hypertext Transfer Protocol HTTP server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language HTML pages. In one such embodiment the HTTP server comprises a scaled down version of the Apache Web server. In various embodiments the functions described herein may be performed by various other components and devices.

Through the client devices n users n can communicate over the network with each other and with other systems and devices coupled to the network . As shown in a server device is also coupled to the network . In the embodiment shown the search engine can transmit a search query comprised of an explicit or implicit query or both to the server device . The user can also enter a search query in a search engine interface which can be transmitted to the server device . In another embodiment the query signal may instead be sent to a proxy server not shown which then transmits the query signal to server device . Other configurations are also possible.

The server device shown includes a server executing a search engine application program such as the Google search engine. Similar to the client devices n the server device shown includes a processor coupled to a computer readable memory . Server device depicted as a single computer system may be implemented as a network of computer processors. Examples of a server device are servers mainframe computers networked computers a processor based device and similar types of systems and devices. The server processor can be any of a number of or combination of computer processors such as processors from Intel Corporation of Santa Clara Calif. and Motorola Corporation of Schaumburg Ill.

Memory contains the search engine application program also known as a search engine . The search engine locates relevant information in response to a search query from a client device . The search engine then provides the result set to the client device via the network . The result set comprises one or more article identifiers. An article identifier may be for example a URL a file name a link an icon a path for a local file or anything else that identifies an article. In the embodiment shown an article identifier comprises a URL associated with an article. The result set may include text audio video or any other type of content.

In the embodiment shown the server device or related device has previously performed a crawl of the network to locate articles such as web pages stored at other devices or systems connected to the network and indexed the articles in memory or on another data storage device. In other embodiments a crawl is not performed. For example in one embodiment an index of articles is created manually.

It should be noted that embodiments of the present invention may comprise systems having different architecture than that which is shown in . For example in some systems according to the present invention server device may comprise a single physical or logical server. The system shown in is merely exemplary and is used to explain the exemplary methods shown in .

Various methods may be implemented in the environment shown in and other environments according to the present invention. Methods according to the present invention may be implemented by for example a processor executable program code stored on a computer readable medium.

In one embodiment of the present invention a system such as indexer captures processor or query system associates a keyword with a first user interface area. The query system receives a signal that the first user interface area is inactive and that a second user interface area is active. For example in a Microsoft Windows operating environment the query system may intercept an application programming interface API call directed to the operating system that instructs the operating system to maximize a window or other user interface area in which an application is executing. The query system interprets this call as activating the window that is the subject of the call and as inactivating all of the other windows in the user interface. The query system may respond to receiving the call by executing a separate API call to determine all of the windows that are currently executing in the operating system and are inactive i.e. all of the windows other than the active window .

In response to receiving the signal that the first user interface area is inactive and the second is active the query system generates an implicit search query that includes the keyword. The keyword may be a single keyword or a plurality of keywords.

In one embodiment a computer program also identifies the keyword to be associated with the user interface area. For example the user interface area may include a document such as a word processing document. In one embodiment a computer program is able to retrieve or receive a keyword associated with the document.

The query system receives a second signal indicating that a second user interface area is active and generates an implicit query that includes the keyword from the first user interface area. In such an embodiment use of the keyword in the implicit query may be discontinued after a period of time has elapsed e.g. ten seconds in an exemplary embodiment of the present invention. In another such embodiment the keyword or results associated with the keyword are downweighted after a period of time has elapsed. For example after ten seconds the results associated with the keyword are downweighted by fifty percent after 20 seconds the results are downweighted by seventy five percent and after thirty seconds use of the keyword is discontinued. In another embodiment the amount of downweighting is a function of the time since the keyword was extracted and or the corresponding user interface area was active.

The association between the keyword and the user interface area may persist. For example the keyword and a user interface area identifier may be stored in memory. In one embodiment the keyword is an attribute of an event as described in relation to . The event may include other attributes such as an identifier of the user interface area.

In one embodiment of the present invention the query system submits the search query to a local or global index. In response the query system receives a result set and causes the result set to be output.

In one embodiment the query system weights the keywords for the active user interface area e.g. window more heavily than keywords for inactive user interface areas. The weight may decrease proportionally to the time since the particular user interface area with which a keyword is associated was last active. If the user switches back to an inactive user interface area then the keywords for that user interface area become weighted more heavily again. This is facilitated by keeping track of keywords for each active and inactive user interface area. In such an embodiment sets of one or more keywords e.g. from events each of which has a corresponding user interface area identifier and a corresponding time. The weight at which the keywords are used varies depending on the active user interface area the time since the keywords were created and the time since the user interface area was last active if it is not currently active. Older keywords have lower weight and keywords associated with an inactive application have lower weight. If the user interface area becomes active again the weight increases. In another embodiment the time since an application was last inactive is used in the weighting scheme with lower weight going to keywords associated with user interface areas that have been inactive for a longer period.

In another embodiment the system tracks the frequency and total amount of time that a user interface area is active. For example if a user continually switches back and forth between an IM user interface area and several other applications the system may recognize the repeated accesses to the IM user interface area and adjust the weight for keywords associated with that user interface area accordingly.

In one embodiment adjustment of the weighting is performed using a step function that changes at certain predefined thresholds. In another embodiment the adjustment is performed using a smooth function based on the age of the keyword.

The event includes attributes. For example in the embodiment shown the event includes an identifier of the user interface area containing the application that caused the event to be generated. For example the user interface area may include a word processing application. When the user completes a section of text which is signaled when the user enters a punctuation mark for example an event is generated. The event includes an identifier of the word processing application. The event may also include one or more keywords. The query system associates the keyword s with the user interface area . The association may be stored in memory or otherwise persist. For instance in one embodiment a word processing application executes within a user interface area. When the user completes the typing of a sentence by for example entering a period an event is generated. The event may comprise an identifier of the user interface area as well as a keyword or keywords from the sentence that the user just completed. The query system saves the association between the keyword and the user interface area.

Subsequently the query system receives a signal indicating that the user interface area with which the keyword or keywords is associated is active . For instance the user may receive an email message and click on the email program to access the message. The query system receives a signal indicating the user interface area associated with the email program is now active. Subsequently the user clicks on the user interface area in which the word processing application is executing. The query system receives a signal indicating that the user interface area associated with the email program is now inactive and that the user interface area associated with the word processing program is now active.

After receiving the signal or in response to receiving the signal the query system generates an implicit query . Since the user interface area is active the embodiment shown in includes the keywords associated with the user interface area in the implicit query. If the user interface area is not currently active the keywords may or may not be included within the implicit query. In one embodiment when keywords associated with non active user interface areas are used they are associated with lower weight than keywords corresponding to the active user interface area.

The query system causes the search result to be executed against a global or local index . In the embodiment shown the query system receives the search result or results and causes them to be output to a user . For example the query system may receive or generate an HTML page including the search results and transmit the HTML page to the client

Subsequently the query system receives a signal indicating that the application user interface area is inactive . For instance if the user clicks on another application in a different user interface area the user interface area that is the source of the signal becomes inactive. In the embodiment shown in once a user interface area is inactive implicit queries may rely relatively less on keywords associated with the inactive user interface area than they would when the user interface area is active.

The query system next determines whether the amount of time that the user interface area has been inactive exceeds a threshold . The threshold may be predetermined or may be based on user or client specific attributes. For example the user may explicitly set a limit for the amount of time keywords associated with an inactive user interface area are utilized to perform implicit queries. In an embodiment of the present invention one or more thresholds may be used. In the embodiment shown if the inactive time period exceeds the threshold the keyword is either excluded from implicit queries or the results based on the keywords associated with the inactive user interface area are downweighted in comparison to a keyword associated with an active user interface area . In another embodiment the amount of downweighting is a function of the time since the keyword was extracted and or the corresponding interface area was active.

The query system executes the implicit query or causes the implicit query to be executed on a global or local index . In response the query system receives search results . The query system then causes the query results to be output .

In a method according to one embodiment of the present invention the user enters data into the application executing within the first window . As the user enters data one or more keywords in the data are associated with that window and implicit queries are generated based on the keywords. The results of the implicit queries are displayed in the content display .

The user then clicks on the window in which the second application is executing . In the embodiment shown implicit queries continue to be generated periodically e.g. once per second . Initially after the first window becomes inactive the implicit queries include keywords from both the first window and the second window . After a specified period of time the keywords associated with the inactive window are either downweighted in the query or result set or the keywords are excluded from implicit queries. The time period may be equal to zero i.e. those keywords are downweighted or excluded immediately when the window becomes inactive. The association of the keyword and the window may persist even though the keyword is not currently used in implicit queries.

In one embodiment when the user clicks on the window in which Application is executing the keywords that were previously associated with the window are used to form implicit queries. In this way the content display provides search results to the user that are relevant to the application on which the user is focused or at least are relevant to the currently active application.

The foregoing description of embodiments of the invention has been presented only for the purpose of illustration and description and is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Numerous modifications and adaptations thereof will be apparent to those skilled in the art without departing from the spirit and scope of the present invention.

