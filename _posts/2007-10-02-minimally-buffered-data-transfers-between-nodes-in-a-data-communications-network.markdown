---

title: Minimally buffered data transfers between nodes in a data communications network
abstract: Methods, apparatus, and products for minimally buffered data transfers between nodes in a data communications network are disclosed that include: receiving, by a messaging module on an origin node, a storage identifier, a origin data type, and a target data type, the storage identifier specifying application storage containing data, the origin data type describing a data subset contained in the origin application storage, the target data type describing an arrangement of the data subset in application storage on a target node; creating, by the messaging module, origin metadata describing the origin data type; selecting, by the messaging module from the origin application storage in dependence upon the origin metadata and the storage identifier, the data subset; and transmitting, by the messaging module to the target node, the selected data subset for storing in the target application storage in dependence upon the target data type without temporarily buffering the data subset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09065839&OS=09065839&RS=09065839
owner: International Business Machines Corporation
number: 09065839
owner_city: Armonk
owner_country: US
publication_date: 20071002
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for minimally buffered data transfers between nodes in a data communications network.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . Although a tree network typically is inefficient in point to point communication a tree network does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an all gather operation. In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

In systems that utilize such high speed data communications networks to effect message passing operations processor speed of the individual compute nodes is not significantly faster than the network transmission speed. The overhead required to copy data to and from temporary buffers before and after each transmission therefore significantly affects the overall time required to pass a message from an origin node to a target node. Often the data being passed from an application on the origin node to an application on the target node is interpreted using different complex data types by the origin node application and the target node application. In such cases a temporary buffer on the target node is typically used to store the data while the target node reconstitutes the data in application storage according to the complex data type that is used by the target node application. As mentioned above however additional buffering of the data decreases the overall transmission speed between the origin node application and the target node application. Readers will therefore recognize that the need exists for minimally buffered data transfers between nodes in a data communications network.

Methods apparatus and products for minimally buffered data transfers between nodes in a data communications network are disclosed that include receiving by an origin messaging module on an origin node from an application on the origin node a storage identifier a complex origin data type and a complex target data type the storage identifier specifying origin application storage containing data on the origin node the complex origin data type describing a subset of the data contained in the origin application storage the complex target data type describing an arrangement of the subset of the data in target application storage on a target node creating by the origin messaging module origin metadata describing the complex origin data type selecting by the origin messaging module from the origin application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node and transmitting by the origin messaging module to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following predefined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The system of operates generally for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention as follows receiving by a origin messaging module on an origin node from an application on the origin node a storage identifier a complex origin data type and a complex target data type the storage identifier specifying origin application storage containing data on the origin node the complex origin data type describing a subset of the data contained in the application storage the complex target data type describing an arrangement of the subset of the data in target application storage on a target node creating by the origin messaging module origin metadata describing the complex origin data type selecting by the origin messaging module from the application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node transmitting by the origin messaging module to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node. Readers will note that the origin node is a node that initiates a data transfer with another node. The target node is a node that participates in the data transfer initiated by the origin node.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Readers will note that the description above of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention using a parallel computer is for explanation and not for limitation. In fact minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may be carried out in any system of nodes connected for data communications through a data communications network as will occur to those of skill in the art. Such systems may include distributed computing systems cluster computing systems grid computing systems and so on.

Minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors or processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The compute node of includes one or more processing cores as well as random access memory RAM . The processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

The messaging module of includes a set of computer program instructions for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The messaging module of operates generally for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention by receiving from the application a storage identifier a complex origin data type and a complex target data type the storage identifier specifying origin application storage containing data on the origin node the complex origin data type describing a subset of the data contained in the application storage the complex target data type describing an arrangement of the subset of the data in target application storage on a target node creating origin metadata describing the complex origin data type selecting from the application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node and transmitting to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node.

In some embodiments the complex target data type received from the application is the same as the complex origin data type. In such embodiments the messaging module of may transmit to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in a single data transfer operation the subset of the data along with the origin metadata describing the complex origin data type.

In some embodiments the message module of may also operate generally for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention by creating target metadata describing the complex target data type. In such embodiments the messaging module of may transmit to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in multiple data transfer operations the selected subset of the data according to the target metadata. In other embodiments where the messaging module of creates target metadata describing the complex target data type the messaging module may transmit to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by transmitting from the application storage in multiple data transfer operations the selected subset of the data according to both the origin metadata and the target metadata.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as Universal Serial Bus USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of each processing core and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. The DMA engine of is typically stored in computer memory of the DMA controller . Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute it.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of minimally buffered data transfers between nodes in a data communications network in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in minimally buffered data transfers between nodes in a data communications network in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of minimally buffered data transfers between nodes in a data communications network in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for minimally buffered data transfers between nodes in a data communications network accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network.

The ranks in this example are assigned as integers beginning with 0 assigned to the root node assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The exemplary communications architecture of sets forth two nodes an origin node and a target node . Only two nodes are illustrated in the example of for ease of explanation and not for limitation. In fact minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may be implemented using many nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the origin node and an application installed on the target node . In the example of the applications typically communicate by passing messages. Data communications between applications are effected using messaging modules installed on each of the nodes . Applications may communicate by invoking function of an application programming interfaces API exposed by the application messaging modules . For the application to transmit an application message to the application the application of may invoke a function of an API for messaging module that passes a buffer identifier of an application buffer containing the application message to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin node and messaging module installed on the target node .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin node communications hardware of the target node and the data communications network connecting the origin node to the target node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes a transmission stack for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stack for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin node and a DMA engine for the target node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes an injection first in first out FIFO buffer for storing data descriptors that specify DMA transfer operations for transferring data. The exemplary DMA engine of also includes a reception FIFO buffer used to receive network packets from other DMA engines on other nodes. Although only illustrates a single injection FIFO buffer and a single reception FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers.

The exemplary communications architecture of supports minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention as follows In the example of the origin messaging module receives a storage identifier a complex origin data type and a complex target data type from the application on the origin node . The storage identifier specifies origin application storage containing data on the origin node . The complex origin data type describes a subset of the data contained in the application storage . In the example of the data is illustrated as a set of eight blocks and the data subset is illustrated as a set of four grey blocks among the data . The complex target data type describes an arrangement of the subset of the data in target application storage on a target node . The origin messaging module of then creates origin metadata describing the complex origin data type. The origin messaging module selects the subset of the data for transmission to the target node from the origin application storage in dependence upon the origin metadata and the storage identifier . The origin messaging module then transmits to the target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node .

A data type describes the representation interpretation and structure of a data set stored in computer memory. A complex data type is a data type composed of a set of primitive data types such as for example integer numbers Booleans floating point numbers and so on. A complex data type may be implemented as for example a vector a matrix a particular set of elements in a vector a particular set of elements or rows or columns of a matrix and so on. A complex data type is often specified in terms of the primitive data types of which it is composed. For example a complex data type may specify each primitive data type included in the complex data type and the offset for each primitive data type. Consider for further explanation that the four elements of the data subset in each represent an integer number. The complex origin data type describing the data subset in the origin application storage may be implemented as the following exemplary complex data type 

The exemplary complex data type above describes a data set in which two integers are stored adjacently in computer memory at offsets of 1 byte and 2 bytes one integer is stored in computer memory at an offset of five bytes and one integer is stored in computer memory at an offset of seven bytes. Readers will note that the exemplary complex data type above is for explanation and not for limitation.

Whereas primitive data types typically describe data that is stored contiguously in computer memory complex data types may describe data that is stored contiguously or non contiguously in computer memory. Consider the data in . The entire set of the data is stored contiguously in origin application storage but the subset of the data is stored non contiguously in the origin application storage because the subset of the data is stored in three non adjacent chunks in the origin application storage .

As mentioned above the origin metadata of describes the complex origin data type . Metadata may describe a complex data type by specifying for each contiguous chunk of data described by the complex data type an offset describing a location of the contiguous chunk in computer memory and a length describing the size of the contiguous chunk. For further explanation consider again the exemplary complex data type in Table 1 above. Also consider that each of the four elements in the data subset in represent a one byte integer number. The origin metadata describing the complex origin data type may be implemented as the following exemplary metadata 

The exemplary metadata in Table 2 above describes the exemplary complex data type in Table 1. The exemplary metadata in Table 2 above specifies that two bytes of data exists at an offset of one byte one byte of data exists at an offset of five bytes and one byte of data exists at an offset of seven bytes. Readers will note that the exemplary metadata above is for explanation and not for limitation. Readers will also note that such metadata may used by nodes for storing or retrieving data in computer memory without actually having to recognize or interpret the complex data type on which the metadata is based. For example when a node attempts to access computer memory according to the exemplary complex data type in Table 1 such a node must also recognize that the primitive integer data type used in the exemplary complex data type is a one byte integer as opposed to a two byte or four byte integer. Because the exemplary metadata in Table 1 does not refer to any primitive data types such as integer floating point and so on the exemplary metadata may be used by any node to retrieve or store the data subset regardless of whether the node recognizes the primitive data types on which the metadata is based.

As mentioned above the messaging module of receives both a complex origin data type and a complex target data type. In some embodiments of minimally buffered data transfers between nodes in a data communications network the complex target data type is the same as the complex origin data type. In such embodiments the origin messaging module may transmit to the target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in a single data transfer operation the subset of the data along with the origin metadata describing the complex origin data type . In this manner the target node may store the subset of the data in the target application storage without having to recognize the complex origin target data type .

In some embodiments where the complex target data type is not the same as the complex origin data type the origin messaging module may create target metadata describing the complex target data type . The origin messaging module may then transmit to the target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in multiple data transfer operations the selected subset of the data according to the target metadata .

In other embodiments where the complex target data type is not the same as the complex origin data type the origin messaging module may transmit to the target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node by transmitting directly from the origin application storage in multiple data transfer operations the selected subset of the data according to both the origin metadata and the target metadata .

For further explanation sets forth a flow chart illustrating an exemplary method for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention. The method of includes receiving by an origin messaging module on an origin node from an application on the origin node a storage identifier a complex origin data type and a complex target data type. The origin messaging module may receive a storage identifier a complex origin data type and a complex target data type from the application according to the method of as parameters to a call made by the application to a function of an application programming interface API exposed by the messaging module .

The storage identifier of specifies origin application storage containing data on the origin node . The origin application storage represents computer memory on the origin node allocated to the application for use in data processing. In the example of the data contained in the origin application storage illustrated as eight blocks each block representing a chunk of the data .

In the example of the complex origin data type describes a subset of the data contained in the origin application storage . The subset of the data is illustrated in as a set of grey blocks. As mentioned above a data type describes the representation interpretation and structure of a data set stored in computer memory. A complex data type is a data type composed of a set of primitive data types such as for example integer numbers Booleans floating point numbers and so on. A complex data type may be implemented as for example a vector a matrix a particular set of elements in a vector a particular set of elements or rows or columns of a matrix and so on. A complex data type is often specified in terms of the primitive data types of which it is composed. For example a complex data type may specify each primitive data type included in the complex data type and the offset for each primitive data type as illustrated in exemplary Table 1 above.

A complex target data type not shown describes an arrangement of the subset of the data in target application storage on a target node . Readers will note that the complex target data type is omitted from because in the example of the complex target data type is the same as the complex origin data type . That is the complex target data type specifies arranging the data subset in target application storage in the same manner as the complex origin data type specifies the arrangement of the data subset in the origin application storage .

The method of also includes creating by the origin messaging module origin metadata describing the complex origin data type . As mentioned above metadata may describe a complex data type by specifying for each contiguous chunk of data described by the complex data type an offset describing a location of the contiguous chunk in computer memory and a length describing the size of the contiguous chunk. The origin messaging module may create origin metadata describing the complex origin data type according to the method of by identifying the offset and length of each chunk of adjacent primitive data types described by the complex origin data type and storing the offset and length in a table. Consider for example that the exemplary complex origin data type in Table 1 above describes the data subset in . Such an exemplary complex origin data type specifies three chunks of adjacent primitive data types. The first chunk has an offset of one byte from the beginning of origin application storage and has a length of two bytes one byte for each adjacent integer. The second chunk has an offset of five bytes from the beginning of origin application storage and has a length of one byte. The third chunk has an offset of seven bytes from the beginning of origin application storage and has a length of one byte. The result of identifying the offset and length of each chunk of adjacent primitive data types described by the exemplary complex origin data type in Table 1 and storing the offset and length in a table are illustrated in Table 2 above.

The method of includes selecting by the origin messaging module from the origin application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node . The origin messaging module may select the data subset from the origin application storage according to the method of by identifying beginning of the origin application storage using the storage identifier and locating the data subset using the offsets and lengths specified in the origin metadata.

The method of also includes transmitting by the origin messaging module to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node . The origin messaging module may transmit the selected subset of the data for storing in the target application storage according to the method of by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in a single data transfer operation the subset of the data along with the origin metadata describing the complex origin data type . Transmitting the subset of the data along with the origin metadata describing the complex origin data type according to the method of may be carried out by pre pending the origin metadata to the contiguous data subset packetizing the metadata and the data subset and injecting the packets into the network for transmission to the target node . Readers will note that the origin metadata need only be transmitted to the target node once in environments where the data subset is repeatedly transmitted to the target node . The target node may then cache the origin metadata for using in storing the data subset received in subsequent data transfers.

The method of also includes storing by the target messaging module the data subset in target application storage in dependence upon the complex target data type which in the example of is the same as the complex origin data type . The target messaging module may store the data subset in target application storage according to the method of by storing the data subset in the target application storage directly from the network packets received from the origin node using the offsets and lengths specified in the origin metadata . In such a manner the target node is able to reconstitute the data subset in the target application storage in the same arrangement as the data subset was arranged in the origin application storage without the target messaging module having to recognize the complex origin data type or temporarily store the data subset in a temporary buffer on the target node .

The description above with reference to explains minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention in which the complex target data type and the complex origin data type are the same. Readers will note however that in other embodiments the complex target data type and the complex origin data type are not the same. For further explanation sets forth a flow chart illustrating a further exemplary method for minimally buffered data transfers between nodes in a data communications network according to embodiments of the present invention.

The method of is similar to the method of . That is the method of includes receiving by an origin messaging module on an origin node from an application on the origin node a storage identifier a complex origin data type and a complex target data type the storage identifier specifying origin application storage containing data on the origin node the complex origin data type describing a subset of the data contained in the origin application storage the complex target data type describing an arrangement of the subset of the data in target application storage on a target node creating by the origin messaging module origin metadata describing the complex origin data type selecting by the origin messaging module from the origin application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node and transmitting by the origin messaging module to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node .

The method of differs from the method of in that the method of includes creating by the origin messaging module target metadata describing the complex target data type . The origin messaging module may create the target metadata describing the complex target data type according to the method of by identifying the offset and length of each chunk of adjacent primitive data types described by the complex target data type and storing the offset and length in a table. For example consider the following exemplary complex data type that describes the arrangement of the data subset in the target application storage 

The exemplary complex data type above describes a data set in which an integer is stored at an offset of 0 bytes from the beginning of the target application storage an integer is stored at an offset of 3 bytes from the beginning of the target application storage and two integers are stored at offsets of 5 bytes and 6 bytes from the beginning of the target application storage .

Identifying the offset and length of each chunk of adjacent primitive data types described by the exemplary complex target data type illustrated in Table 3 and storing the offset and length in a table may yield the following exemplary target metadata 

The exemplary metadata in Table 4 above describes the exemplary complex data type in Table 3. The exemplary metadata in Table 4 above specifies that one byte of data exists at an offset of zero bytes one byte of data exists at an offset of three bytes and two bytes of data exists at an offset of five bytes. Readers will note that the exemplary complex target data type and exemplary target metadata above are for explanation and not for limitation.

In the method of the origin messaging module may transmit the selected subset of the data for storing in the target application storage by contiguously storing the selected subset of the data in a temporary buffer on the origin node and transmitting from the temporary buffer on the origin node in multiple data transfer operations the selected subset of the data according to the target metadata . Transmitting from the temporary buffer on the origin node in multiple data transfer operations the selected subset of the data according to the target metadata according to the method of may be carried out by selecting for each contiguous chunk of data specified in the target metadata a portion of the data subset having a length that matches the length specified in the target metadata packetizing the selected portion and injecting the packets into a network for transmission to the target node . For further explanation consider again the exemplary target metadata in Table 4 above. Because the first chunk of data specified in the exemplary target metadata has a length of one byte one byte of the data subset in the temporary buffer is transmitted to the target node in a first data transfer operation. Because the second chunk of data specified in the exemplary target metadata has a length of one byte one byte of the data subset in the temporary buffer is transmitted to the target node in a second data transfer operation. Because the third chunk of data specified in the exemplary target metadata has a length of two bytes the last two bytes of the data subset in the temporary buffer is transmitted to the target node in a third data transfer operation.

The method of also includes storing by the target messaging module the data subset in target application storage in dependence upon the complex target data type . The target messaging module may store the data subset in target application storage in dependence upon the complex target data type according to the method of by storing the data subset in the target application storage directly from the network packets received from the origin node . Each chunk of the data subset partitioned according to the target metadata which in turn is created from the complex target data type specifies the memory location on target node where the target node should store that particular chunk of the data subset . In such a manner the target node is able to reconstitute the data subset in the target application storage in arrangement recognizable to the target application without the target messaging module having to store the data subset in a temporary buffer on the target node .

In some embodiments of minimally buffered data transfers between nodes in a data communications network the messaging module may combine both the origin metadata and the target metadata for use in transmitting the data subset to the target node. For further explanation sets forth a flow chart illustrating a further exemplary method for minimally buffered data transfers between nodes in a data communications network according to the present invention.

The method of is similar to the method of . That is the method of includes receiving by an origin messaging module on an origin node from an application on the origin node a storage identifier a complex origin data type and a complex target data type the storage identifier specifying origin application storage containing data on the origin node the complex origin data type describing a subset of the data contained in the origin application storage the complex target data type describing an arrangement of the subset of the data in target application storage on a target node creating by the origin messaging module origin metadata describing the complex origin data type creating by the origin messaging module target metadata describing the complex target data type selecting by the origin messaging module from the origin application storage in dependence upon the origin metadata and the storage identifier the subset of the data for transmission to the target node and transmitting by the origin messaging module to a target messaging module on the target node the selected subset of the data for storing in the target application storage in dependence upon the complex target data type without buffering the subset of the data in a temporary buffer on the target node .

In the method of the origin messaging module may transmit the selected subset of the data for storing in the target application storage by transmitting from the origin application storage in multiple data transfer operations the selected subset of the data according to both the origin metadata and the target metadata . Transmitting from the origin application storage in multiple data transfer operations the selected subset of the data according to both the origin metadata and the target metadata according to the method of may be carried out by selecting for each common contiguous chunks of data specified in both the origin metadata and the target metadata a portion of the data subset having a length that matches the length of the common contiguous chunk packetizing the selected portion and injecting the packets into a network for transmission to the target node .

For further explanation of the common continuous chunks of data specified in both the origin metadata and the target metadata illustrates a graphical representation of the target metadata and a graphical representation of the origin metadata . The graphical representations are based on the exemplary origin metadata and the exemplary target metadata in Tables 2 and 4 respectively. The graphical representation of the target metadata illustrates a first contiguous chuck of one byte a second contiguous chunk of one byte and a third contiguous chunk of two bytes. The graphical representation of the origin metadata illustrates a first contiguous chuck of two bytes a second contiguous chunk of one byte and a third contiguous chunk of one byte. The graphical representation depicts the common contiguous chunks of data specified in both the origin metadata and the target metadata . The graphical representation illustrates a first common contiguous chunk of one byte a second common contiguous chunk of one byte a third common contiguous chunk of one byte and a fourth common contiguous chunk of one byte.

In the example of because the first common contiguous chunk of data specified in both the exemplary target metadata and exemplary origin metadata has a length of one byte one byte of the data subset in the temporary buffer is transmitted to the target node in a first data transfer operation. Because the second common contiguous chunk of data specified in both the exemplary target metadata and exemplary origin metadata has a length of one byte the next one byte of the data subset in the temporary buffer is transmitted to the target node in a second data transfer operation. Because the third common contiguous chunk of data specified in both the exemplary target metadata and exemplary origin metadata has a length of one byte the next one byte of the data subset in the temporary buffer is transmitted to the target node in a third data transfer operation. Because the fourth common contiguous chunk of data specified in both the exemplary target metadata and exemplary origin metadata has a length of one byte the next one byte of the data subset in the temporary buffer is transmitted to the target node in a fourth data transfer operation.

The method of also includes storing by the target messaging module the data subset in target application storage in dependence upon the complex target data type . The target messaging module may store the data subset in target application storage in dependence upon the complex target data type according to the method of by storing the data subset in the target application storage directly from the network packets received from the origin node . Each chunk of the data subset partitioned according to the target metadata which in turn is created from the complex target data type specifies the memory location on target node where the target node should store that particular chunk of the data subset . In such a manner the target node is able to reconstitute the data subset in the target application storage in arrangement recognizable to the target application without the target messaging module having to store the data subset in a temporary buffer on the target node .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for minimally buffered data transfers between nodes in a data communications network. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

