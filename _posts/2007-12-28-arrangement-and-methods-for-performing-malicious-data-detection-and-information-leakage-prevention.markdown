---

title: Arrangement and methods for performing malicious data detection and information leakage prevention
abstract: An integrated secured open database connectivity (ODBC) application programming interface (API) arrangement is provided. The arrangement includes a driver manager, which is configured for at least handling a function call from an application program. The arrangement also includes a set of drivers, which is configured for at least accessing a data source and applying the function call to the data source. The arrangement further includes a security module, which is configured for performing at least one of scanning the function call for malicious content and preventing an unauthorized user from accessing the data source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08844028&OS=08844028&RS=08844028
owner: Trend Micro Inc.
number: 08844028
owner_city: Tokyo
owner_country: JP
publication_date: 20071228
---
On an annual basis million of dollars are spent on the process of collecting storing securing and retrieving data. With modern computer system data may be electronically stored in an easily retrievable medium such as a database which is a structured collection of data. To manage the database a database management system e.g. Oracle Microsoft Access Microsoft SQL Server MySQL FileMaker and the like may be employed to organize store and retrieve the data.

Although a database may be manually updated most database management systems do not provide friendly user interfaces. Instead independent applications have been developed to enable users to interact with the database management systems. In an example a company may have a Microsoft Access database storing information about its employees. The human resource department may interact with the database through a human resource management program that has been specifically tailored to enable the human resource representatives to update and retrieve data about employees.

Since each database management system may have a unique structure an open database connectivity ODBC application programming interface API may be provided in order to enable an application to interact with any database management system. The ODBC API may include but are not limited to a driver manager and a set of drivers. With the ODBC API each application does not have to be modified in order to interact with a specific database management system. Instead the ODBC API is configured to accept function calls e.g. application requests from applications and translate the function calls into a format that the database can accept and or understand. Thus regardless if one company has a Microsoft Access database while another one has an Oracle database the same application may be employed since the ODBC API includes a set of drivers that may be configured to handle the interaction between an application and a database.

Unfortunately the current ODBC API arrangement provides little or no protection against unauthorized users accessing the database. In the example above an unauthorized user may employ the human resource management program to access data stored on the employee database. For many database management systems once a user is able to log onto an application that allows a user access to a database little or no security measure has been implemented to prevent the user from accessing the data. Thus confidential data leakage may occur. In many instances no record is kept of the user who is trying to access the data thereby providing the information technology IT department with insufficient data to track the unauthorized user.

In another example an unauthorized user may employ the human resource management program to insert malicious data into the database. The current ODBC API arrangement may not provide a method for preventing malicious data to be added to the database. In addition the current ODBC API arrangement provides little or no protection for a user s computer system when the computer system is inadvertently exposed to malicious content stored on a database when data with malicious content is retrieved from the database.

The invention relates in an embodiment to an integrated secured open database connectivity ODBC application programming interface API arrangement. The arrangement includes a driver manager which is configured for at least handling a function call from an application program. The arrangement also includes a set of drivers which is configured for at least accessing a data source and applying the function call to the data source. The arrangement further includes a security module which is configured for performing at least one of scanning the function call for malicious content and preventing an unauthorized user from accessing the data source.

The above summary relates to only one of the many embodiments of the invention disclosed herein and is not intended to limit the scope of the invention which is set forth in the claims herein. These and other features of the present invention will be described in more detail below in the detailed description of the invention and in conjunction with the following figures.

The present invention will now be described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order to not unnecessarily obscure the present invention.

Various embodiments are described hereinbelow including methods and techniques. It should be kept in mind that the invention might also cover articles of manufacture that includes a computer readable medium on which computer readable instructions for carrying out embodiments of the inventive technique are stored. The computer readable medium may include for example semiconductor magnetic opto magnetic optical or other forms of computer readable medium for storing computer readable code. Further the invention may also cover apparatuses for practicing embodiments of the invention. Such apparatus may include circuits dedicated and or programmable to carry out tasks pertaining to embodiments of the invention. Examples of such apparatus include a general purpose computer and or a dedicated computing device when appropriately programmed and may include a combination of a computer computing device and dedicated programmable circuits adapted for the various tasks pertaining to embodiments of the invention.

As aforementioned the prior art ODBC API arrangement may not provide an integrated solution for protecting a database from malicious attack and or preventing unauthorized users from accessing data stored within a database. To facilitate discussion shows a simple block diagram of an arrangement for enabling an application to interact with a data source. A system may include an application which is an example of a typical front end application program that a user may employ to interact with a data source e.g. data source data source and data source . An example of an application may be a human resource management application program that may be employed in order to enter data and or to retrieve data about employees of a company. Consider the situation wherein for example a company may have a plurality of databases that may store data about employees of a company. In an example a company may have a salary database represented by data source an address database represented by data source and a job description database represented by data source . The company may employ the human resource management application program to manage the personnel information e.g. name salary addresses job description and the like .

Since each data source may be of different format an ODBC API arrangement is provided to act as a mediator between application and the data sources and . As discussed herein a data source refers to a database and the database management system associated with the database. As a mediator ODBC API arrangement may provide the translation to enable the SQL statement query sent by application to be understood by the data sources. To perform the task ODBC API arrangement may include a driver manager and a plurality of drivers and .

In the example above the SQL statement query may be submitted as a function call. When ODBC API arrangement is employed to submit the function call driver manager is configured to intercept the function call in order to process the query. One of the functions of processing the query includes determining which driver needs to be loaded in order to handle the query. In an example a human resource representative needs to update the salary of John Smith from 1000 a month to 1500 a month. The human resource representative may have employed the human resource management application program to update the salary. A typical method for updating a data source includes submitting an SQL structured query language statement query. When application submit the SQL statement query as an ODBC function call the SQL statement query is intercepted by driver manager . Upon receiving the SQL statement query driver manager may determine that the SQL statement query is intended to update data source . Since driver is associated with data source driver manager may forward the function call to driver .

Upon receiving the function call driver is configured to access data source to access the data related to John Smith. If the SQL statement query is not in a syntax format that is supported by data source driver is configured to translate and modified the SQL statement query into a format that is supported by data source . Once the data has been updated driver manager may be configured to unload driver .

In another example if the human resource representative needs to retrieve the address of John Smith the human resource representative may employ application to query the data source such as data source . Driver manager may be configured to intercept and process the function call with the SQL statement query. Upon analyzing the SQL statement query driver manager may determine that driver may have to be loaded since driver is associated with data source . Upon receiving the function call driver may retrieve the requested data and send the data back to driver manager which may then forward the data to application .

As can be appreciated from the foregoing ODBC API arrangement enables an application program to interact with data sources regardless of the data source format. In other words ODBC API arrangement facilitates interaction between application and the data sources by performing syntax translation. Thus the data source may be in a proprietary format however as long as ODBC API arrangement includes the required drivers application may send the SQL statements queries in any format as long as the SQL statements queries have been properly formed.

Unfortunately ODBC API arrangement does not provide an integrated security solution for protecting the data sources. Accordingly a user with evil intent may be able to insert malicious data into a data source once the user is able to access the data source. In an example a disgruntled human resource representative who has access to application may purposely insert malicious data into the data sources. The malicious data is damaging in that the malicious data may wreck havoc to the data source and even may cause the hardware to crash. Even if the malicious data may be dormant while being stored within the database the malicious code may cause damage to a requester s computer system when the requester retrieves the data from the data source.

Although filtering programs may exist enabling some security measures to be implemented most filtering programs are non integrated programs that are usually implemented on each computer system. Thus if a user has not installed a filtering program or if the filtering program is not updated the user may not be able to prevent malicious code from infiltrating his computer system. In addition a filtering program is rarely implemented as a preventive measure to protect data sources from malicious code.

In addition ODBC API arrangement may not provide adequate measures to prevent unauthorized users from accessing confidential data. Similar to the example above a user that is able to access a data source is usually able to view the data within a data source. In an example a user may view and or write to all data within a data source as long as the user is able to access the data source. Thus confidential data such as the salary package for the president of a company may be viewed by all who is able to access the data source.

Furthermore the prior art arrangement may not provide a tracking system for identifying users who may be trying to attack the data source or who may be trying to access confidential data. In an example if a human resource department has fifty representatives the prior art ODBC API arrangement may not provide a method for identifying the culprit. Thus information technology IT personnel and or managers may not be aware of the transgression and may be unable to address the issue to prevent a future occurrence. In addition when the data source is compromised the task of identifying the perpetrator among the fifty representatives becomes a difficult task since the prior art ODBC API arrangement lacks a tracking system.

Since the prior art ODBC API arrangement provides data sources with little or no protection against malicious attack and or unauthorized viewing the inventor herein realized in one aspect of the invention that a security feature implemented as part of the ODBC API arrangement is needed in order to provide an integrated secured solution for protecting the data sources. In accordance with embodiments of the present invention a security module is provided for creating an integrated secured ODBC API arrangement. Embodiments of the invention include a secured driver manager for intercepting requests and or responses between an application program and a data source. Also embodiments of the invention include methods for preventing attacks from malicious content. Further embodiments of the invention include methods for preventing data leakage especially confidential data leakage.

In an embodiment of the invention an integrated secured ODBC API arrangement is provided. Besides the driver manager and the set of drivers that have previously existed in the prior art the integrated secured ODBC API arrangement is configured to also include a security module in an embodiment. Unlike the prior art the security module is an integrated security solution embedded between an application program and the driver manager. The security module is configured to perform at least one of preventing malicious content from populating a data source preventing malicious data content from damaging a user s computer system and preventing unauthorized user from accessing confidential data.

In an embodiment the security module may include a secured driver manager. The secured driver manage may be configured to intercept all ODBC API function calls. The ODBC API function calls may be requests for access to a database e.g. SQL statement query from an application program for example. Also the ODBC API function calls may be responses to data retrieval requests from an application program.

The security module may also be configured to include a scanning engine. In an embodiment the secured driver manager may activate a scanning engine such as Trend Micro VSAPI virus scan application program interface scanning engine to detect malicious content e.g. data code etc. . In the prior art the function call is usually handled without the benefit of scanning. Hence malicious code may go undetected resulting in damages to the data source and or the computer system storing the data source.

Unlike the prior art the function call is scanned for malicious content before being processed by the driver manager. If malicious content is identified the secured driver manager may be configured to discard the function call. In an embodiment the secured driver manager may also perform operation roll back to remove the malicious content if the malicious content has already populated the data source. In yet another embodiment the secured driver manager may also terminate the application program that has sent the function call.

In the prior art little or no security measure is implemented to prevent unauthorized users from accessing sensitive data. In an embodiment the security module may also be configured to include a security policy component. The security policy component may be configured to include a set of rules for accessing a data source. The set of rules may be based on a plurality of factors including but are not limited to the access point and a user account. In an example a user may have access to different type of data depending upon a user s security level designation. For example a business analyst may have a lower security level designation than a director of a department. In another example a user s access to the data sources may be limited based on the access point. In an example a user who is usually allow to perform update to a data source may be limited to viewing data only when the user is accessing the data source from a non secured terminal.

In addition to a security policy component the security module may also include a content filtering component which may be configured to prevent data leakage e.g. confidential data leakage . Data prevention leakage may occur through a plurality of known techniques including but are not limited to SQL injection detection keyword matching and the like. In an example the content filtering component may be configured to include a set of words that may restrict access to specific content. In other words if one or more of the set of words is in the function call the data content is not accessible unless the user is part of the restricted group.

As can be appreciated from the foregoing the security module may be implemented without requiring modification to the application program the driver manager and or the set of drivers. The ability to provide the integrated security solution with little or no modification provides a great advantage to the implementation of the security module since most companies do not have access to the source code of the appliances programs thereby making modification difficult if not near impossible. In addition since the security module is being integrated into the ODBC API arrangement the scanning engine may provide protection for the data source even if the server housing the data source has not implemented an up to date anti virus program. Also each individual computer system is similarly protected thereby removing the burden of maintaining an up to date anti virus program in order to prevent malicious content which has been retrieved from a data source from infecting a user s computer system.

The features and advantages of the present invention may be better understood with reference to the figures and discussions that follow.

Driver manager is similar to the prior art driver manager in that driver manager is configured to process the SQL statements queries received from application . Also driver manager is configured to determine which driver to load in order to enable the successful handling of the SQL statements queries. Further driver manager is configured to unload the driver when the driver has completed its task.

The set of drivers is also similar to the prior art in that the set of drivers is configured to perform translation. As aforementioned the format of a data source may vary. However instead of manipulating the application program in order to enable the application program to interact with the data source a driver is available for performing the translation. Usually each driver is dedicated to a specific database management system and is configured to perform translation between the application and the specific data source.

Unlike the prior art integrated secured ODBC API arrangement includes a security module which is configured to provide the ODBC API arrangement with an integrated security solution. In an embodiment security module is configured to be implemented as a program between application and driver manager . Security module may include a secured driver manager a security policy component a scanning engine and a content filtering component .

In an embodiment secured driver manager is configured to intercept the SQL statements queries sent by application . In other words the SQL statements queries are analyzed by secured driver manager before forwarding the SQL statements queries to driver manager . In an embodiment if malicious content is identified or if the user is determined to be an unauthorized user the SQL statements queries may be discarded. In an embodiment secured driver manager may also be configured to terminate application in order to prevent the user from sending further SQL statements queries.

In yet another embodiment secured driver manager is configured to intercept data being sent from one of the data sources via driver manager to application . In an example salary information about John Smith may be sent in response to a request from application . However before application can receive the salary data from driver manager secured driver manager is configured to intercept the data content.

Once secured driver manager has intercepted the SQL statements queries for example the SQL statements queries may be scanned for malicious content. In an embodiment secured driver manager may activate scanning engine . As can be appreciated from the foregoing the number of scanning engines implemented may vary depending upon a company s preference. By placing scanning engine within the ODBC API arrangement malicious content may be identified before the malicious content can cause harm to the data source. As can be appreciated from the foregoing if data content from a data source is intercepted while it is being routed to application scanning engine is configured to scan the data content to determine if malicious content exists. With scanning engine being centralized as part of the integrated secured ODBC API arrangement users may benefit from the scanning features without incurring the cost of implementing and maintaining the scanning engine.

In an embodiment secured driver manager is also configured to include security policy component which may be configured to include a set of rules for determining user access. In an example an access rule may include data content accessibility based on security level designation. In another example an access rule may include security level designation based on access point. In other words the type of data content that may be accessed at a public computer such as a library computer may be limited to low security level designation whereas the computer system of the president of the company may have a high security level designation and may be able to access sensitive data.

In yet another embodiment access to data may be determined based on content request. In an example a new human resource representative may try to access confidential data about executives of the company. Secured driver manager may activate content filtering component to determine if the data content being requested is restricted. In an embodiment content filtering component may be configured to include a set of words that may be considered as confidential. In addition the set of words may be divided into different confidential levels depending upon the sensitivity of the data. In an example data about senior level executives may be considered as more sensitive than junior level executives. Thus the access restriction to the data about senior level executives may be restricted and not available for viewing by the new human resource representative.

In an embodiment content filtering component may apply an exact word match to determine if the SQL statements queries include any of the words that may restrict access. In another embodiment matching may be performed by content filtering component through regular expressions. As can be appreciated from the foregoing different matching techniques may be implemented to perform the matching and is not limited by the examples provided above.

As can be appreciated from security module may be implemented without modification to the prior art arrangement. In other words the implementation of security module does not require application driver manager and the drivers and to be modified. Thus security module may be easily integrated into the ODBC API arrangement to provide a centralized security solution without having to individually modify each application program and or drivers.

To illustrate how integrated secured ODBC API arrangement may be implemented two flow charts and may be discussed in relation to . To facilitate discussion shows in an embodiment of the invention a simple flow chart illustrating an example of how a security module may be employed to prevent malicious content from populating a data source.

At a first step a user may employ an application program to send a SQL statement query as a function call in order to update an employee record. Consider the situation wherein for example a human resource representative wants to update the personnel data of Thomas Brown. The employee records are stored in a plurality of data sources including a salary database data source an address database data source a job description database data source and the like. To update the salary from 1200 to 1500 for example the human resource representative may employ application which may be a human resource management program.

At a next step the SQL statement query may be intercepted by a secured driver manager. In an embodiment secured driver manager is positioned between application and driver manager and is configured to intercept ODBC function calls i.e. SQL statements queries .

At a next step the secured driver manager may activate a security policy component to determine if the requester has sufficient access authorization. In an embodiment the secured driver manager may apply the rules as defined in the security policy module. In an example security policy component may include rules defining what type of security level designation is required to be granted the right to update the salary database data source .

At a next step the secured driver manager may make a determination on whether or not the user has the proper authorization to access the data.

If the user is not authorized to access the data the SQL statement query may be discarded at a next step . In an embodiment an alert may be sent to an authority such as an administrator or the user s manager. The alert enables the authority to handle the unauthorized access to confidential data.

However if the user is authorized to access the data a scanning engine may be activated to scan the SQL statement query for potential malicious code at a next step . In this example the human resource representative may have the required security level designation to perform updates.

At a next step the SQL statement query is analyzed to determine the existence of malicious content. In an example secured driver manager may activate scanning engine to scan the SQL statement query to determine if the SQL statement query includes malicious data and or code. Accordingly scanning engine may include one or more anti virus programs.

At a next step security module may make a determination on the existence of malicious content within the SQL statement query.

If malicious data has been identified then at a next step the SQL statement query may be discarded. In an embodiment an alert message may be sent to the administrator to inform the administrator of the attempt to upload malicious code to the data source.

However if the SQL statement query is free of malicious content then at a next step the secured driver manager may forward the function call with the SQL statement query to the driver manager. In an example since the request to update the salary of Thomas Brown is free of malicious content secured driver manager may forward the SQL statement query to driver manager for processing.

At a next step upon receiving the function call the driver manager may process the request by determining which driver is needed in order to handle the request. In an example driver manager may determine that the SQL statement query is intended to update the salary information for Thomas Brown in data source .

At a next step the driver may handle the request within the SQL statement query. In an example driver may make a determination on whether an update request or a retrieval request has been sent.

If an update request has been sent at a next step the driver may update the data. In an example driver may access and update the salary data for Thomas Brown.

In an embodiment security module may also provide protection for a user when data from a data source is retrieved. shows in an embodiment of the invention a simple flow chart illustrating an implementation of the integrated secured ODBC API arrangement to prevent confidential information leakage.

Consider the situation wherein for example a user wants to retrieve salary data of Peter Graham a senior vice president of the company. The steps for sending the request for data may be similar to steps described in .

As aforementioned if the SQL statement query is a retrieval request at step then at a next step the data requested may be retrieved by the driver and forwarded to the driver manager.

Upon receiving the data content at a next step the driver manager may send the content to the requesting application.

However before the requesting application may receive the requested data the secured driver manager may intercept the data content at a next step .

Since the security module has already determined a user s authorization the secured driver manager may not re assess the user s authorization access. Instead the secured driver manager may activate the scanning engine at a next step to scan the data content for potential malicious code. In an example secured driver manager may activate scanning engine to scan the data content to determine if the requested data includes malicious data and or code.

If malicious code is identified at a next step the data content may be discarded. In an embodiment since the malicious content is already stored on the database the malicious content may be automatically removed from the database. Alternatively an alert message may be sent to the administrator to inform the administrator of the malicious code thereby enabling the administrator to perform further analysis on the malicious code.

However if the SQL statement query is free or malicious content then at a next step the secured driver manager may activate a content filtering component to prevent data leakage e.g. confidential data leakage . As aforementioned techniques for determining data leakage are common in the art and may include SQL injection detection and keyword matching. In an example content filtering component may perform keyword matching by employing at least one of exact matching and or regular expressions. In an embodiment content filtering component may include a set of words from which keyword matching may be performed. For example if data content includes one or more of these words the content filtering component may prevent access to the data content if the user is not a member of the restricted group of users.

At a next step the secured driver manager may determine if the user is allowed access to the data content.

If the user is not authorized to access the data the data content may not be forwarded to the requesting application at a next step . In an example the user may be trying to access confidential information that only a limited number of people may be granted access. In an embodiment an alert may be sent to an authority such as an administrator or the user s manager. The alert enables the authority to handle the unauthorized access to confidential data.

However if the user is authorized to access the data or if the data content does not include restricted content then at a next step the secured driver manager may forward the data to the requesting application.

As can be appreciated from the forgoing one or more embodiments of the present invention provide a security module for effectively transforming the prior art ODBC API arrangement into an integrated secured solution for enabling interaction between an application and a data source. With the security module a company does not have to discard the appliances programs e.g. application programs driver manages and drivers that the company may have already spent considerable investment on. Instead the security module may be added with little or no modification to the company s current computer system infrastructure. Thus the security module provides protection to a company s data sources with minimal cost to the company.

While this invention has been described in terms or several preferred embodiments there are alterations permutations and equivalents which fall within the scope of this invention. Although various examples are provided herein it is intended that these examples be illustrative and not limiting with respect to the invention.

Also the title and summary are provided herein for convenience and should not be used to construe the scope of the claims herein. Further the abstract is written in a highly abbreviated form and is provided herein for convenience and thus should not be employed to construe or limit the overall invention which is expressed in the claims. If the term set is employed herein such term is intended to have its commonly understood mathematical meaning to cover zero one or more than one member. It should also be noted that there are many alternative ways of implementing the methods and apparatuses of the present invention. It is therefore intended that the following appended claims be interpreted as including all such alterations permutations and equivalents as fall within the true spirit and scope of the present invention.

