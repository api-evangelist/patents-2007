---

title: Anti-debugger comprising spatially and temporally separate detection and response portions
abstract: An anti-debugger comprises spatially and temporally separate detection and response portions. In an example configuration, the anti-debugger is implemented into a game system for detecting and responding to a debugger attached to a game application. The detection portion is implemented on one thread of the system and the response portion is implemented on another thread of the system. When a debugger is detected, a message indicative of the detection is provided to a thread interface. The thread interface provides the message to the response portion. After a period of time has elapsed, the response portion disables the functionality of the game application, such as by halting the game execution and/or obfuscating game performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08356356&OS=08356356&RS=08356356
owner: Microsoft Corporation
number: 08356356
owner_city: Redmond
owner_country: US
publication_date: 20070130
---
It is not uncommon for game players to cheat in order to appear to be better players than they truly are. Cheating can be especially exacerbating in the online gaming community in which players compete with each other. Often cheating is in the form of modifications to a game application such as for example changes to game data constants and or characteristics including the amount of ammunition the strength of an item the health of a player the position of walls deleting of walls from a map to enable a player to shoot through walls in the game or the like.

To make modifications to a game a user typically hacks into her own version of the game application. In many cases the first step towards hacking the game application is to determine exactly what the game software is doing. One relatively simple way to determine what the game software is doing is to attach a debugger to the game software while it is executing and observing the instructions and contents of memory. Through debugging a hacker can discern appropriate places and means for tampering with the game code. Accordingly game developers are known to install debugger checkers in game code to prevent users from attaching a debugger to the game application. Typically however debugger checkers are simple to detect and to circumvent.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description Of Illustrative Embodiments. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Debugger protection is incorporated into a game system such that the debugger detection mechanism and the mechanism for responding to detection of a debugger are difficult to detect difficult to bypass and difficult to remove. In an example embodiment the debugger detection mechanism is implemented on one thread and the debugger detection response mechanism is implemented on another thread. When a debugger is detected on a first thread a message indicative of the detection is provided to a thread interface. The thread interface provides the message to a response mechanism implemented on a second thread. From the second thread the response mechanism disables the functionality of the game application. The response mechanism can disable game functionality by halting the game execution and or obfuscating game performance. Further the response mechanism can disable game functionality immediately or wait a period of time before disabling game functionality.

An anti debugger having a detection portion and a response portion is implemented in a game system such that the detection portion and a the response portion are spatially and temporally separate. The detection portion of the anti debugger detects a debugger attached to a game application one thread of a game system and the response portion of the anti debugger responds to the detection on another thread of the game system. In an example embodiment a period of time is allowed to elapse between detecting the debugger and initiating the response.

As depicted in thread boundary indicates that the detection portion of an anti debugger executes on a different thread or threads of a system e.g. XBOX console than the thread on which the response portion executes. The debugger checker component is executed on a first thread . The debugger checker component determines if a debugger is attached to a game application e.g. XBOX XBOX LIVE. . If the debugger checker component detects a debugger attached to the game application control passes to message sending component . The message sending component generates a message indicative of the detection and provides the message to the thread interface . The thread interface provides communication between threads of a system. The thread interface can comprise any appropriate means for providing communication between threads. For example the thread interface can comprise an application programming interface API for providing communication between threads. APIs are known in the art. APIs support requests made by computer programs. Typically an API is a source code interface that can be compiled when an application is generated. On the second thread the message is received by the receive message component . In response to receiving the message by the receive message component control passes to the response component . The response component initiates a response to the detection of the debugger. In an example embodiment the game application functionality is disabled in response to the detection. Disabling the functionality can comprise halting game application execution and or obfuscating operation of the game application. If no debugger is detected by the debugger checker component control passes to normal processing component . During normal processing the debugger checker is initiated to check for debuggers.

The detection portion of the anti debugger is activated at step . The detection portion is activated to detect debuggers attached to the game application. The detection portion can be activated at any appropriate time. For example the detection portion can be activated when the execution of the game application commences and or at boot up. The detection portion can be activated in any appropriate manner. The detection portion can be activated periodically randomly quasi randomly at the occurrence of specific events when resources of the game system are available or a combination thereof. The detection portion can be activated periodically during execution of the game application. The detection portion could be activated periodically within any appropriate time period. For example the detection portion could be activated at least once every 25 seconds at least once every minute at least once every 4 minutes or a combination thereof.

The detection portion can be activated randomly. For example the detection portion can be activated at random times within a time period or time periods. The detection portion can be event driven. For example the detection portion can be activated when events occur in the game such as when the game is about to perform a sensitive or interesting task such as granting a new item or object. The detection portion can be activated whenever resources in the system in which the game and detection portion are running are available. For example the detection portion could be implemented on a low priority thread of the game system e.g. game device such as an XBOX console . Thus when system resources are available the thread having the detection portion will activate the detection portion.

At step it is determined if a debugger is detected. That is it is determined if a debugger is attached to the game application. If no debugger is detected at step the process proceeds to step after an amount of time is elapsed at step . The amount of elapsed time can be any appropriate amount of time as described above with respect to activation of the detection portion. If a debugger is detected at step a message is generated at step . The message is indicative of the detection. The message is provided at step to a thread interface. In an example embodiment an amount of time elapses at step . The amount of time that can elapse at step can be any appropriate amount of time. For example the amount of time can be a predetermined fixed amount of time the amount of time can be in accordance with a predetermined calculation the amount of time can be random within a fixed period of time or a combination thereof. In an example embodiment time is allowed to elapse by putting the thread to sleep e.g. allowing the thread to become temporarily inactive and utilizing the operating system to wake the thread after the determined period of time.

The message is received on the second thread at step by the response portion of the anti debugger. The response is invoked at step . In an example embodiment the response comprises disabling the functionality of the game application. For example the game application can be halted and or obfuscated. Thus in response to detection of a debugger the game software is shut down on a randomly or quasi randomly selected thread. In another embodiment in response to detection of a debugger the game is slowed down modified or generally obfuscated rather than being shut down.

The processing portion is capable of implementing an anti debugger comprising spatially and temporally separate detection and response portions as described above. For example the processing portion is capable of implementing a detection portion of an anti debugger on a first thread and a response portion of the anti debugger on a second thread of a game system activating a detection portion of an anti debugger determining an amount of elapsed time selecting threads halting the game application obfuscating the game application providing a message to a thread interface receiving a message from a thread interface or a combination thereof.

The processor can be implemented as a client processor and or a server processor. In a basic configuration the processor can include at least one processing portion and memory portion . The memory portion can store any information utilized in conjunction with an anti debugger comprising spatially and temporally separate detection and response portions. Depending upon the exact configuration and type of processor the memory portion can be volatile such as RAM non volatile such as ROM flash memory etc. or a combination thereof. The processor can have additional features functionality. For example the processor can include additional storage removable storage and or non removable storage including but not limited to magnetic or optical disks tape flash smart cards or a combination thereof. Computer storage media such as memory portion and include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices universal serial bus USB compatible memory smart cards or any other medium which can be used to store the desired information and which can be accessed by the processor . Any such computer storage media can be part of the processor .

The processor can also contain communications connection s that allow the processor to communicate with other devices such as other devices in an online gaming scenario for example. Communications connection s is an example of communication media. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media. The processor also can have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. also can be included.

A graphics processing unit GPU and a video encoder video codec coder decoder form a video processing pipeline for high speed and high resolution graphics processing. Data is carried from the graphics processing unit to the video encoder video codec via a bus. The video processing pipeline outputs data to an A V audio video port for transmission to a television or other display. A memory controller is connected to the GPU to facilitate processor access to various types of memory such as but not limited to a RAM Random Access Memory .

In an exemplary embodiment the multimedia console includes an input output I O controller a system management controller an audio processing unit a network interface controller a first USB host controller a second USB controller and a front panel I O subassembly that can be implemented on a module . The USB controllers and serve as hosts for peripheral controllers a wireless adapter and an external memory device e.g. flash memory external CD DVD ROM drive removable media etc. . The network interface and or wireless adapter provide access to a network e.g. the Internet home network etc. and can be any of a wide variety of various wired or wireless adapter components including an Ethernet card a modem a Bluetooth module a cable modem and the like.

System memory is provided to store application data that is loaded during the boot process. A media drive is provided and can comprise a DVD CD drive hard drive or other removable media drive etc. The media drive can be internal or external to the multimedia console . Application data can be accessed via the media drive for execution playback etc. by the multimedia console . The media drive is connected to the I O controller via a bus such as a Serial ATA bus or other high speed connection e.g. IEEE 3394 .

The system management controller provides a variety of service functions related to assuring availability of the multimedia console . The audio processing unit and an audio codec form a corresponding audio processing pipeline with high fidelity and stereo processing. Audio data is carried between the audio processing unit and the audio codec via a communication link. The audio processing pipeline outputs data to the A V port for reproduction by an external audio player or device having audio capabilities.

The front panel I O subassembly supports the functionality of the power button and the eject button as well as any LEDs light emitting diodes or other indicators exposed on the outer surface of the multimedia console . A system power supply module provides power to the components of the multimedia console . A fan cools the circuitry within the multimedia console .

The CPU GPU memory controller and various other components within the multimedia console are interconnected via one or more buses including serial and parallel buses a memory bus a peripheral bus and a processor or local bus using any of a variety of bus architectures. By way of example such architectures can include a Peripheral Component Interconnects PCI bus PCI Express bus etc.

When the multimedia console is powered ON application data can be loaded from the system memory into memory and or caches and executed on the CPU . The application can present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . In operation applications and or other media contained within the media drive can be launched or played from the media drive to provide additional functionalities to the multimedia console .

The multimedia console can be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode the multimedia console allows one or more users to interact with the system watch movies or listen to music. However with the integration of broadband connectivity made available through the network interface or the wireless adapter the multimedia console can further be operated as a participant in the larger network community such as an online gaming community for example.

A computer system can be roughly divided into three component groups the hardware component the hardware software interface system component and the applications programs component also referred to as the user component or software component . In various embodiments of a computer system the hardware component may comprise the central processing unit CPU the memory both ROM and RAM the basic input output system BIOS and various input output I O devices such as a keyboard a mouse a monitor and or a printer not shown among other things. The hardware component comprises the basic physical infrastructure for the computer system.

The applications programs component comprises various software programs including but not limited to compilers database systems word processors business programs videogames and so forth. Application programs provide the means by which computer resources are utilized to solve problems provide solutions and process data for various users machines other computer systems and or end users . In an example embodiment application programs perform the functions associated with an anti debugger comprising spatially and temporally separate detection and response portions as described above.

The hardware software interface system component comprises and in some embodiments may solely consist of an operating system that itself comprises in most cases a shell and a kernel. An operating system OS is a special program that acts as an intermediary between application programs and computer hardware. The hardware software interface system component may also comprise a virtual machine manager VMM a Common Language Runtime CLR or its functional equivalent a Java Virtual Machine JVM or its functional equivalent or other such software components in the place of or in addition to the operating system in a computer system. A purpose of a hardware software interface system is to provide an environment in which a user can execute application programs.

The hardware software interface system is generally loaded into a computer system at startup and thereafter manages all of the application programs in the computer system. The application programs interact with the hardware software interface system by requesting services via an application program interface API . Some application programs enable end users to interact with the hardware software interface system via a user interface such as a command language or a graphical user interface GUI .

A hardware software interface system traditionally performs a variety of services for applications. In a multitasking hardware software interface system where multiple programs may be running at the same time the hardware software interface system determines which applications should run in what order and how much time should be allowed for each application before switching to another application for a turn. The hardware software interface system also manages the sharing of internal memory among multiple applications and handles input and output to and from attached hardware devices such as hard disks printers and dial up ports. The hardware software interface system also sends messages to each application and in certain case to the end user regarding the status of operations and any errors that may have occurred. The hardware software interface system can also offload the management of batch jobs e.g. printing so that the initiating application is freed from this work and can resume other processing and or operations. On computers that can provide parallel processing a hardware software interface system also manages dividing a program so that it runs on more than one processor at a time.

A hardware software interface system shell referred to as a shell is an interactive end user interface to a hardware software interface system. A shell may also be referred to as a command interpreter or in an operating system as an operating system shell . A shell is the outer layer of a hardware software interface system that is directly accessible by application programs and or end users. In contrast to a shell a kernel is a hardware software interface system s innermost layer that interacts directly with the hardware components.

As shown in an exemplary general purpose computing system includes a conventional computing device or the like including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing basic routines that help to transfer information between elements within the computing device such as during start up is stored in ROM . The computing device may further include a hard disk drive for reading from and writing to a hard disk hard disk not shown a magnetic disk drive e.g. floppy drive for reading from or writing to a removable magnetic disk e.g. floppy disk removal storage and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the computing device . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment. Likewise the exemplary environment may also include many types of monitoring devices such as heat sensors and security or fire alarm systems and other sources of information.

A number of program modules can be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computing device through input devices such as a keyboard and pointing device e.g. mouse . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor computing devices typically include other peripheral output devices not shown such as speakers and printers. The exemplary environment of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computing device may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computing device e.g. personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computing device although only a memory storage device floppy drive has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computing device is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computing device can include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing device or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

While it is envisioned that numerous embodiments of an anti debugger comprising spatially and temporally separate detection and response portions are particularly well suited for computerized systems nothing in this document is intended to limit the invention to such embodiments. On the contrary as used herein the term computer system is intended to encompass any and all devices capable of storing and processing information and or capable of using the stored information to control the behavior or execution of the device itself regardless of whether such devices are electronic mechanical logical or virtual in nature.

The various techniques described herein can be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatuses for implementing an anti debugger comprising spatially and temporally separate detection and response portions or certain aspects or portions thereof can take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for implementing an anti debugger comprising spatially and temporally separate detection and response portions.

The program s can be implemented in assembly or machine language if desired. In any case the language can be a compiled or interpreted language and combined with hardware implementations. The methods and apparatuses for implementing an anti debugger comprising spatially and temporally separate detection and response portions also can be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer or the like. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of an anti debugger comprising spatially and temporally separate detection and response portions. Additionally any storage techniques used in connection with an anti debugger comprising spatially and temporally separate detection and response portions can invariably be a combination of hardware and software.

While an anti debugger comprising spatially and temporally separate detection and response portions has been described in connection with the example embodiments of the various figures it is to be understood that other similar embodiments can be used or modifications and additions can be made to the described embodiments for performing the same functions of an anti debugger comprising spatially and temporally separate detection and response portions without deviating therefrom. Therefore an anti debugger comprising spatially and temporally separate detection and response portions as described herein should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

