---

title: Server-based code compilation
abstract: A server is disclosed that includes an interface to a data communication network, a compiler library that stores a plurality of different compilers, and compiler selection logic responsive to data received at the interface and including logic. The compiler selection logic is configured to select one of the plurality of different compilers based on an evaluation of the received data. The selected compiler generates compiled output data and the compiled output data is communicated over the data communication network to a client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08365153&OS=08365153&RS=08365153
owner: QUALCOMM Incorporated
number: 08365153
owner_city: San Diego
owner_country: US
publication_date: 20071026
---
Advances in technology have resulted in smaller and more powerful personal computing devices. For example there currently exist a variety of portable personal computing devices including wireless computing devices such as portable wireless telephones personal digital assistants PDAs and paging devices that are small lightweight and easily carried by users. More specifically portable wireless telephones such as cellular telephones and Internet Protocol IP telephones can communicate voice and data packets over wireless networks. Further many such wireless telephones include other types of devices that are incorporated therein. For example a wireless telephone can also include a portable gaming console a digital still camera a digital video camera a digital recorder and an audio file player. Also such wireless telephones can include applications such as web browser applications that can be used to access the Internet. As such these wireless telephones include significant computing capabilities.

Typically as these devices become smaller and more powerful they become increasingly resource constrained. For example the screen size the amount of available memory and file system space and the amount of input and output capabilities may be limited by the small size of the device. Further the battery size the amount of power provided by the battery and the life of the battery may also be limited.

Additionally computing resources on a portable device are limited. For example processor capability on a cellular phone is limited by size and power consumption constraints. As such the compilation of programs involving the conversion of software from source code to object code is typically not performed on such portable devices. However since portable devices have different processors and execution platforms the compilation needs of each type of device having a different platform is different. This platform variation leads to complexity and increased costs for application developers that would prefer to develop software applications for a single target execution environment instead of creating different versions of applications to accommodate multiple platforms. In addition the issues related to applications for different target platforms have become more significant with the proliferation of various portable devices having increased functionality such as video and multimedia application processing capability.

A server based compilation method and a server for implementing the method are disclosed. The server based compilation method includes receiving a code compilation request at a server having a plurality of compilers. The method also includes comparing information in the code compilation request to a list of the plurality of compilers stored at the server to determine if the server has a compiler suitable to compile source code associated with the code compilation request and communicating a response to the code compilation request from the server to a client over a network. The response includes an indication of an acceptance or a denial of the code compilation request. When the response includes an indication of an acceptance of the code compilation request the method includes receiving source code to be compiled at the server compiling the received source code at the server using the selected compiler that is suitable to compile the source code to generate compiled code and communicating the compiled code from the server to the client via the network.

In a particular embodiment the server includes an interface to a data communication network a compiler library that stores a plurality of different compilers and compiler selection logic responsive to data received at the interface. The compiler selection logic includes logic to select one of the plurality of different compilers based on an evaluation of the received data. The selected compiler is used to generate compiled output data and the compiled output data is communicated via the data communication network to a client.

In still another embodiment a method of requesting server based code compilation from a client is disclosed. The method includes sending a code compilation request to a server having a plurality of compilers receiving a response to the code compilation request from the server the response indicating either an acceptance or a denial of the code compilation request upon detecting an acceptance of the code compilation request sending source code to the server the source code to be compiled at the server receiving compiled code from the server after the server has compiled the source code.

In yet another embodiment a computing device is disclosed. The computing device includes a processor a memory accessible to the processor and a communication interface. The communication interface is configured to send a code compilation request to a server having a plurality of compilers and to receive a response to the code compilation request from the server. The response indicates either an acceptance or a denial of the code compilation request. The communication interface is further configured to send source code to the server to be compiled at the server and to receive compiled code from the server.

An advantage of one or more of the embodiments disclosed herein can include conservation of device resources by shifting the compilation of software application code to a server that may have greater processing resources. Another advantage of one or more embodiments disclosed herein can include the distribution of software for execution at an application processing unit such as a graphics processing unit video processing unit or camera image processing unit of a client device without requiring user interaction or user selection of the software based on compatibility with the application processing unit.

Another particular advantage of the one or more embodiments can include simplification of the software coding process by allowing an application developer to write code addressed to a desired platform and by providing a server based code compilation system that can compile the code to one or more specific device platforms in response to receiving a request from a portable device. In this manner code written to a single platform may be compiled for use on multiple devices that operate on different platforms without increasing complexity for the software developer and without consuming processing resources at the portable device.

Other aspects advantages and features of the present disclosure will become apparent after review of the entire application including the following sections Brief Description of the Drawings Detailed Description and the Claims.

The compiler selection logic is responsive to data received at the network interface such as the code compilation request received from one of the clients . The compiler selection logic includes logic to select one of the plurality of different compilers or based on an evaluation of the received data such as an evaluation of information communicated in the code compilation request message . In a particular embodiment the compiler selection logic may be implemented as a logic circuit. During operation the compiler selection logic determines a selected compiler e.g. compiler from the compiler library and communicates a message to the requesting client e.g. the first client . The message to the requesting client indicates either an acceptance or a denial to the code compilation request message .

When a suitable compiler is available at the server the server communicates an acceptance to the code compilation request message . In response the requesting client or can send source code to be compiled to the server and the compiler selection logic at the server routes the received source code to the selected compiler or . The selected compiler or compiles the source code and generates compiled code . The compiled code also referred to as object code is communicated to the requesting client or via the network interface and the network .

In a particular embodiment the requesting client or may be a personal computer a portable computer a hand held computing device such as wireless phone a personal digital assistant a media playback device or a similar device. The requesting client device may include a target application processing unit such as a graphics processing unit GPU to execute the compiled code sent from the server . The requesting client or may also be a software application a driver an installation program other processor executable instructions or any combination thereof. The code compilation request may include information about the target application processing unit so that the server can select an appropriate compiler. In a particular embodiment the information includes a source code language name a source code language version a processing unit name a processing unit version or any combination thereof.

In a wireless application the server may be disposed within or co located at a wireless base station of a wireless communication network. In another particular embodiment the server may communicate with a wireless base station of a wireless communication network. In an application where the server includes shader compilers for various GPU platforms a typical source code file size or compiled file size to be transmitted may be small such as less than 2 000 bytes. Thus transmission of source code via a wireless communication network compilation at the server and receipt by the requesting client or may occur at runtime without introducing unacceptable delays.

In a particular embodiment a client or may include a general central processing unit CPU digital signal processor DSP one or more application processing units or any combinations thereof. The application processing units may include a graphics processing unit a video processing unit a camera image processing unit other application processing units or any combination thereof. An application program may include multiple layers such as an application layer having code based on one or more application programming interfaces such as Open GL DirectX etc a driver layer under the programming interfaces and an application processing layer that may be executed on one or more dedicated application processing units on a DSP or on a CPU. In a particular embodiment according to a specific configuration some components of application processing layer may be executed on dedicated application processing units other components may be executed on a DSP and still other components may be executed on a CPU. In a particular embodiment a client such as an installer application or driver running on a CPU of the client or may issue different compilation requests to the server for different components for a single application program. For example the client or may generate requests to compile code into CPU executable code for some components requests to compile source code into DSP executable code for other components and requests to compile source code into machine code executable by specific application processing units for specific components. The client may distribute compiled codes received from the server for execution on a corresponding application processing unit DSP CPU or any combination thereof. In a particular embodiment a CPU or DSP may function as one or more application processing units when such application processing units are not dedicated and availably configured in the client device.

In a particular embodiment the server may receive shading language source code and may compile the source code for execution at a GPU. In other embodiments the server may be adapted to compile other types of source code for other processing platforms. For example the server may compile digital signal processor DSP code written in C or another programming language and may output DSP executable code. As another example the server may receive shading language code and may output DSP executable code in a case where at least a portion of a computing task is moved from a GPU to a DSP. As another example the server may receive shading language code and may output Advanced Reduced Instruction Set Computing RISC Machine e.g. ARM code. In another example the server may receive C language source code and may output GPU executable code such as for general purpose computation at a GPU. For example the GPU may be used to perform general purpose audio or video processing that is moved from a CPU or DSP to the GPU. Other embodiments may include the server receiving C code and outputting either CPU executable code or DSP executable code according to specific hardware configurations.

In a particular illustrative embodiment the client device may execute at least one of the one or more applications to retrieve source code or intermediate representation bytecode stored in the memory via the file system . A processor such as a central processing unit CPU may execute the one or more applications and may generate a code compilation request that is related to the source code. The code compilation request can include a code language identifier such as shader programming language name e.g. OpenGL Shading Language GLSL High Level Shading Language HLSL Cg etc. a high level programming language name e.g. JAVA C or other programming language identifiers a version identifier a target name e.g. a GPU name or a CPU name a target version a supported binary code name and a version identifier. The client device attempts to establish a connection to the server via the network . If the connection is established the client device can send the code compilation request to the server via the network to determine whether the server has the ability to compile the code. The client device receives a response from the server . The response may be an acceptance indicating that the server can compile the code. Alternatively the response may include a denial of the request. If the response indicates an acceptance by the server the client device sends the code to the server via the network and waits for a compiled result. When the client device receives the compiled result the client device may execute the compiled result.

In a particular example a particular application executed at the client device i.e. a client may initiate communication with the server . For example at a particular point in the execution the application may require execution of the source code or intermediate representation bytecode. The application may initiate a request for compilation of the code to the server . In response to receiving a response indicating an acceptance the application may send the code to the server for compiling. The application may receive the compiled code. After the application receives the compiled result the application either stores the result at the local file system i.e. at the memory provides the compiled result to the driver to the application processing unit or any combination thereof. In a particular illustrative embodiment the application may check the compiled result and load the compiled result the next time the application is executed. In another particular illustrative embodiment the application may pause execution request compilation of the code on the fly receive the compiled code and resume execution using the compiled code. In still another particular illustrative embodiment a client may request a particular application from the server which compiles the requested application according to the request and provides the compiled code to the client for storage execution or any combination thereof.

In a particular illustrative embodiment the installer may initiate communication with the server . When installing software the installer collects data on behalf of an application of the one or more applications and sends a request for compilation services to the server . The installer receives compiled code from the server and stores the compiled code at the local file system . One of the one or more applications may read the compiled binary code and format from the local file system and can send the compiled code directly to the driver . In another particular embodiment when an application is downloaded from another server not shown the installer downloader may instruct the server from which the application is downloaded to send a compilation request to the server to send compiled code directly to the client device . In another particular embodiment when an application is downloaded from an application server not shown the installer downloader may provide compilation information to the application server and the application server may send a compilation request to the server . The server may return compiled binary code to the application server which may pack the application and the binary code together to send to the client device . By routing the request to the server via the application server the compilation and the installation may be transparent to the client device .

In a particular embodiment the client device may be an online gaming device and the application downloading may occur while the application is running at the client device and advancing in relation to player interaction. The downloading may demand compilation services of the server via the network when corresponding program portions of the application being downloaded require compiling from source code to machine code that is executable by one or more processing units at the client device . In this case the downloading server or application server may directly initiate compilation requests to the server and receive compiled codes from the server at the application server. The application server may send the compiled codes to the client device for execution. The compiled codes downloaded from application server may be downloaded together with associated other application codes and data or files that the application may require for execution. In a particular illustrative embodiment the server allows a software developer to code a particular application without concern for the platform on which the application will be executed because the server is configured to determine a platform of a requesting client and to select a compiler that is suitable to compile the source code into object code that is executable by a platform associated with the requesting client.

In a particular illustrative embodiment the driver initiates communication with the server when an application requests compiled source code. The server may be a shader compiling server that is configured to compile shader programs to render graphics effects and to calculate a color associated with a graphical element.

In a particular illustrative embodiment the driver may receive compiled code from the server and may expose the compiled code to the application . The application may read the compiled result and store the compiled result in the local file system . The application may then load the compiled code from the local file system during subsequent executions of the application . In an illustrative embodiment the source code may only be compiled at the server during a first execution of the application at the client device .

In another particular illustrative embodiment the driver may not expose the compiled code to the application . The application may request compilation of the source code from the driver each time the application is executed. The application may request the compiled code at runtime as if the driver was adapted to perform runtime compilation without the application having any knowledge of the server . In a particular illustrative embodiment the driver may send compiling requests directly to the server on the fly and may cache the compiled code as needed. The server can thus function as an extension of the driver . While waiting to receive compiled code from the server the driver can continue to perform operations that may be executed in parallel with the compilation.

In a particular embodiment the application processing unit may include a GPU that loads vertex and texture shading data while waiting for compiled code from the server . One particular advantage provided by this implementation may be realized in that by using the driver to request and receive compiled code from the server transparently loading speed of the graphics for an application may be improved as compared to a system where the compiling and the loading of vertex texture data are performed sequentially. Additionally the server may be used to provide on demand compiling for example when game play levels are advanced. The client device may send compilation requests to the server via the network only for specific gaming levels or specific details. Thus time and storage may be saved.

In a particular embodiment the digital signal processor utilizes interleaved multithreading to process instructions associated with program threads necessary to perform the functionality and operations needed by the various components of the portable communication device . For example when a wireless communication session is established via the wireless antenna a user can speak into the microphone . Electronic signals representing the user s voice can be sent to the CODEC to be encoded. The digital signal processor can perform data processing for the CODEC to encode the electronic signals from the microphone. Further incoming signals received via the wireless antenna can be sent to the CODEC by the wireless controller to be decoded and sent to the speaker . The digital signal processor can also perform the data processing for the CODEC when decoding the signal received via the wireless antenna .

Further before during or after the wireless communication session the digital signal processor can process inputs that are received from the input device . For example during the wireless communication session a user may be using the input device and the display to surf the Internet via a web browser that is embedded within the memory of the portable communication device . The digital signal processor can interleave various program threads that are used by the input device the GPU the display the CODEC and the wireless controller as described herein to efficiently control the operation of the portable communication device and the various components therein. Many of the instructions associated with the various program threads are executed concurrently during one or more clock cycles. As such the power and energy consumption due to wasted clock cycles is substantially decreased.

Referring to an exemplary non limiting embodiment of a cellular telephone is shown and is generally designated . As shown the cellular telephone includes an on chip system that includes a digital baseband processor and an analog baseband processor that are coupled together. The cellular telephone also includes a CPU not shown and a graphics processing unit GPU . In a particular illustrative embodiment the CPU may be configured to initiate an interaction with a compiler server such as the server illustrated in and described herein to receive compiled code for execution. In a particular embodiment the digital baseband processor is a digital signal processor. As indicated in a GPU and a touchscreen controller are coupled to the digital baseband processor . In turn a touchscreen display external to the on chip system is coupled to the GPU and the touchscreen controller .

As further illustrated in a stereo audio CODEC can be coupled to the analog baseband processor . Moreover an audio amplifier can coupled to the stereo audio CODEC . In an exemplary embodiment a first stereo speaker and a second stereo speaker are coupled to the audio amplifier . shows that a microphone amplifier can be also coupled to the stereo audio CODEC . Additionally a microphone can be coupled to the microphone amplifier . In a particular embodiment a frequency modulation FM radio tuner can be coupled to the stereo audio CODEC . Also an FM antenna is coupled to the FM radio tuner . Further stereo headphones can be coupled to the stereo audio CODEC .

In a particular embodiment as depicted in the touchscreen display the video port the USB port the camera the first stereo speaker the second stereo speaker the microphone the FM antenna the stereo headphones the RF switch the RF antenna the keypad the mono headset the vibrator and the power supply are external to the on chip system . Moreover in a particular embodiment the digital baseband processor can use interleaved multithreading described herein in order to process the various program threads associated with one or more of the different components associated with the cellular telephone .

In a particular embodiment the cellular telephone may be configured to initiate different compilation requests to a compiler server via a network to request different compilations for different program components of applications running on the device. For example for computing tasks of program components that are assigned to be executed at the GPU a shader compiler may be selected at the compiler server. As another example for computing tasks of program components that are assigned to a video CODEC encoder or decoder not shown a corresponding video compiler may be selected at the compiler server. As still another example for computing tasks of program components that are assigned to the audio CODEC a corresponding audio compiler may be selected at the compiler server. As yet another example for computing tasks of program components that are assigned to be executed at the DSP a DSP compiler may be selected at the compiler server. The compiled codes may be received at the cellular telephone and distributed to one or more corresponding processing units for execution.

Advancing to decision node when the response indicates a denial the method terminates at . Returning to when the response indicates an acceptance of the code compilation request the method continues to and includes receiving source code to be compiled at the server. Proceeding to the method also includes compiling the received source code at the server using the selected compiler that is suitable to compile the source code to generate compiled code. The method further includes communicating the compiled code from the server to the client via the network at . The method ends at .

At decision node when the response indicates an acceptance the method advances to and the source code to be compiled is received at the server. Continuing to the method includes compiling the received source code at the server to generate compiled code using the selected compiler that is suitable to compile the source code. Advancing to the method includes communicating the compiled code from the server to the requesting client via the network. Continuing to decision node if there is another source compilation request the method proceeds to and selects another code compilation request i.e. a second code compilation request from the one or more code compilation requests. The method proceeds to and compares information in the selected code compilation request to a list of the plurality of compilers stored at the server to determine if the server has a compiler suitable to compile source code associated with the selected code compilation request.

Returning to if the response indicates a denial the method advances to the decision node where the method determines whether there is another source compilation request. If there is another source compilation request the method proceeds to . At if there is no other source compilation request the method terminates at .

In a particular embodiment the information in the code compilation request includes a source code language name a source code language version a processing device name a processing device version a driver name a driver version an operating system name an operating system version or any combination thereof. The information in the code compilation request includes information that may be used by the server to identify and select a particular compiler from the compiler library where the selected compiler is suitable and matches the code to be executed on the client. Such information may include information about a particular processing device such as a particular graphics processing device that is made available by a processing device vendor. In addition the vendor of the processing device may provide the compiler that is stored on the server such that the server can receive the vendor provided information from the client and can match the received information to previously stored information in the compiler library to select the appropriate compiler for use. The method may be used for multiple clients from multiple devices and the use of first and second clients is for illustrative purposes.

In a particular embodiment the client is an application program an installer program or a device driver. In addition the client may be loaded or otherwise disposed on a client device that includes a processor. In another particular embodiment the source code may include a shading language such as OpenGL shading language OpenGL vertex program OpenGL fragment program OpenGL ES shading language nVidia Cg programming language Microsoft DirectX High Level Shading Language or another shading language and the server based compiler that is selected for use is a shader compiler. The source code may include a shading program such as Open GL glFx Microsoft Effect or nVidia Effect CgFX that may be used in conjunction with a gaming application. The shader compiler at the server may be used to compile the source code for the shading program to generate compiled code that may be communicated and then executed at a client such as a target portable device or an end user computer that includes a graphics processing unit.

In a particular embodiment the server includes sufficient computing power and the communication interface has sufficient bandwidth such that the compilation of the source code is performed on a real time or near real time basis in response to the compilation code request.

Those of skill would further appreciate that the various illustrative logical blocks configurations modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks configurations modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present disclosure.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory PROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a computing device or a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a computing device or user terminal.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present disclosure. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features as defined by the following claims.

