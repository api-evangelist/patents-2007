---

title: Content data indexing with content associations
abstract: A full text indexing system is provided for processing content associated with data applications such as encyclopedia and dictionary applications. A build process collects data from various sources, processes the data into constituent parts, including alternative word sets, and stores the constituent parts in structured database tables. A run-time process is used to query the database tables and the results in order to provide effective matches in an efficient manner. Run-time processing is optimized by preprocessing all steps that are query-independent during the build process. A double word table representing all possible word pair combinations for each index entry and an alternative word table are used to further optimize runtime processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970768&OS=07970768&RS=07970768
owner: Microsoft Corporation
number: 07970768
owner_city: Redmond
owner_country: US
publication_date: 20070820
---
This patent application is a continuation of non provisional U.S. patent application Ser. No. 10 187 859 filed Jul. 1 2002 entitled CONTENT DATA INDEXING which issued as U.S. Pat. No. 7 266 553 on Sep. 4 2007. This patent application is also related to non provisional U.S. application Ser. No. 11 841 332 entitled CONTENT DATA INDEXING AND RESULT RANKING filed on Aug. 20 2007 to U.S. application Ser. No. 09 867 228 entitled METHOD AND SYSTEM FOR SEARCHING INDEX DATABASES which issued as U.S. Pat. No. 6 775 666 on Aug. 10 2004 and to U.S. application Ser. No. 10 355 654 entitled DATABASE BUILD FOR WEB DELIVERY which issued as U.S. Pat. No. 6 983 287 on Jan. 3 2006. Each of the above are also assigned to Microsoft Corporation and are expressly hereby incorporated by reference in their entireties.

The present invention relates to searching content data and more specifically relates to the indexing of content data in a build process to optimize search speed and efficacy during a run time process.

In response to the development of computers that can process increasingly larger amounts of data encyclopedias dictionaries and other content data applications have been implemented in electronic form. Such content data applications make it possible to compile and make available vast amounts of information. However to be useful the data must be searchable. More recent developments include the implementation of such data applications in a network environment such as over the Internet. Typically network implementations can require significant system resources e.g. computer memory and processor time to effectively process search queries.

One example of a data content application is the ENCARTA brand Multimedia Encyclopedia Application developed and marketed by Microsoft Corporation of Redmond Wash. The ENCARTA brand Multimedia Encyclopedia Application can be run as a stand alone application on an individual computer or can be operated over a network such as the Internet. Electronic encyclopedias typically have a massive content data volume that includes all of the articles and other media necessary to render an electronic version of an encyclopedia.

However to be efficiently used data content applications must be able to process search queries effectively and quickly. As the amount of content increases the need for more speed increases. Various prior art systems have been developed to speed up content data searching. One of the most common methods of speeding data searching is to use partial data searching. This method speeds data searching by designating only a subset of the entire body of data as searchable. Another known method is to associate searchable key words with an un searchable body of text data whereby a search query is processed only against the key words and a match results in returning a reference to the un searchable body of text data. Neither of these methods is completely satisfactory because it is impossible to fully predict what search terms a user will select to query a particular body of text data. Consequently match results are likely to be less than comprehensive.

Obviously full content data searching is better but it is typically cost prohibitive in prior art systems because of the demands on system resources. Therefore there is a need in the art for an efficient full content data searching technique. The technique should work with disparate content data sources and disparate content data types. The technique also should minimize search times by utilizing a build process to pre process the full content data to streamline searching during run time operation. The technique also should support natural word search queries and should use alternative search words and word pairs to increase the accuracy of search results and search process speed.

The present invention provides a full content data indexing system for processing content data associated with data applications such as electronic encyclopedia and dictionary applications. A build process collects content data from various sources processes the content data into constituent parts including alternative word sets and stores the constituent parts in structured database tables. A nm time process is used to query the database tables and the results in order to provide effective matches in an efficient manner. Run time processing is optimized by preprocessing all query independent steps during the build process. A double word table representing all possible word pair combinations for each index entry and an alternative word table are used to further optimize run time processing.

The build process can break the content data down into words and tokens with a Natural Language Parser NLP and apply an alternative word set to identify likely alternative search terms corresponding to the words and tokens. The build process stores the words and relationships in a set of database tables. The run time process queries the database tables ranks the results and returns the best matches.

The present invention can solve the above problems by providing a search engine to better match user requests for information. The search engine allows users to search and retrieve information from a body of content data. It can provide users with general or specific queries to general or specific content in the body of information. For example users can be directed to general information such as the start of a long article or to specific content within that article. An article outline and related articles also can be navigated. Queries can also be processed in a way that allows for quick results and an efficient use of system resources.

In one aspect of the invention a computer system is provided for searching and retrieving information from at least one content source containing at least one content entity. The system includes a build process for storing content information associated with the content entity in an index stored in the searchable content database. The system also includes a run time process that can receive at least one search term and processes the search term against the index in the searchable content database. The build process also can create an alt word table including at least one alternate word associated with the search term so that the run time process can identify a second match between the alternate word and the index and to return at least one search result corresponding to the second match.

In another aspect of the present invention a method is provided for searching and retrieving content from at least one content source. The method includes a step of building a search index table having index entries corresponding to content information contained in the content source. The search index includes a double word table having at least one word pair corresponding to the index entries. When a search term is received the search term is processed against a portion of the search index table including a word pair corresponding to the search term to determine whether a match is available. If a match is available a search result is returned identifying a content entity.

The various aspects of the present invention may be more clearly understood and appreciated from a review of the following detailed description of the disclosed embodiments and by reference to the drawings and claims.

Exemplary embodiments of the present invention provide a full text indexing system for processing content associated with data applications such as encyclopedia and dictionary applications. A build process collects data from various sources processes the data into constituent parts including alternative word sets and stores the constituent parts in structured database tables. A run time process is used to query the database tables and the results in order to provide effective matches in an efficient manner. Run time processing is optimized by preprocessing all query independent steps during the build process. A double word table representing all possible word pair combinations for each index entry and an alternative word table are used to further optimize run time processing.

Exemplary embodiments of the present invention will hereinafter be described with reference to the drawings in which like numerals represent like elements throughout the several figures. illustrates an exemplary operating environment for implementation of the present invention. The exemplary operating environment includes a general purpose computing device in the form of a conventional personal computer . Generally the personal computer includes a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes a read only memory ROM and a random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within personal computer such as during start up is stored in ROM .

Personal computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive arc connected to system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. Although the exemplary environment described herein employs hard disk removable magnetic disk and removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges RAMs ROMs and the like may also be used in the exemplary operating environment. The drives and their associated computer readable media provide nonvolatile storage of computer executable instructions data structures program modules and other data for personal computer .

A number of program modules may be stored on hard disk magnetic disk optical disk ROM or RAM including an operating system a data application a search engine and a database . Program modules include routines sub routines programs objects components data structures etc. which perform particular tasks or implement particular abstract data types. Aspects of the present invention may be implemented in the form of a search engine that can operate in concert with the data application and the database . The search engine generally comprises computer executable instructions for binding and searching index tables. The database is generally accessible to the search engine but also can be implemented as an integral part of the search engine.

A user may enter commands and information into personal computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port a universal serial bus USB or the like. A display device may also be connected to system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers . Remote computer may be another personal computer a server a client a router a network PC a peer device or other common network node. While a remote computer typically includes many or all of the elements described above relative to the personal computer only a memory storage device has been illustrated in the figure. The logical connections depicted in the figure include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is often connected to the local area network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over WAN such as the Internet. Modem which may be internal or external is connected to system bus via serial port interface . In a networked environment program modules depicted relative to personal computer or portions thereof may be stored in the remote memory storage device . It will he appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Moreover those skilled in the art will appreciate that the present invention may be implemented in other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network person computers minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

For the purposes of a data application such as an encyclopedia the database may contain various kinds of entities such as articles media archive articles audio files video files and index entries. In addition the database may include data associating one or more entries with one another. For example the database may include data linking an article with a side bar or with a related archive article. These associations may be represented by for example pointers which are a well known means for representing relationships between data.

In one embodiment of the present invention the entities that populate the database may be managed by a content management system . Content management systems are known in the art and are typically used to manage the content of a website and other content based applications. In an exemplary environment of the present invention the search engine builds the database during a build process. The search engine acquires content from the content management system and builds a search index in the database . The content from the content management system is processed and organized by the search engine in accordance with rules that are stored in a rules table . Accordingly the build process can be tailored to a particular application through the creation and modification of rules in the rules table .

In addition to the build process a run time process is also supported by an exemplary embodiment of the present invention. During run time the search engine receives a query from the data application and processes the query against the database . The search engine may use a natural language parser to process queries to optimize the search process. For example if a query is entered as a natural language sentence or phrase the natural language parser may reduce it to a set of key words by eliminating unnecessary words from the query.

As stated above the data client application may be run on a stand alone computer or may be nm over a network such as the internet. In either case the runtime process should be optimized to return the best search results in the least amount of time. This is especially true for the on line operation of the data application . On line users of data client applications tend to be very sensitive to delays in the runtime process. Accordingly the exemplary embodiments of the present invention are directed to optimizing run time processing by implementing a novel build process that reduces the search time required to return acceptable search results in response to a search query.

As stated above the search engine applies rules from a rules table to create the search index within the database . is a block diagram depicting the primary components of an exemplary rules table . The exemplary rules table includes three sub tables. A class table includes entries corresponding to all of the entities in the content management system that will be affected by the build process. The rules table also includes an entity table which includes all of the metadata associated with the entities in the content management system that are affected by the build process. A class entity table represents the intersection between the class table and the entity table . In an exemplary embodiment a search source table not shown may be used to group index entries into an appropriate rank based on the search source with which the index entry is associated.

The rules tables can be used to determine the structure of the search index . The rules tables determine for example which data is indexed in the search index table which data is available following the build process and which data is processed by the build process. Advantageously the rules table can be used by the search engine to create tables within the search index table that represent associations between content data so that at run time queries can be processed more effectively and more efficiently. Specifically exemplary embodiments of the present invention perform substantially all non query specific search operations during the build process. Accordingly the run time process i.e. the search process is optimized by the elimination of run time operations.

One purpose of the build process is to process all content data into tables that can be more easily and efficiently queried during run time. is a block diagram depicting an exemplary search index table . As stated above the search index table is created as part of the build process to enable a more effective and efficient search operation during the run time process. In order to optimize the runtime process the build process creates four tables within the search index table . The four tables are the search word table the search content word table the search content table and the search content double word table .

The purpose of the build process is to populate these four tables for use in processing search queries during subsequent run time operation. The search content double word table serves the purpose of storing word or token pairs that have been identified in the content data. By storing the double words unnecessary search operations can be avoided. For example where a search query includes the search terms Russian and History the double word table can be used to identify index entries that include this word pair thereby reducing the number of entries that must be processed.

The search content table contains a complete list of anything that is indexed and or searched on including but not limited to index entries titles sentences and section titles. The search word table contains a list of unique words but does not include any stop words. The search content word table includes words that are attached to each entry in the search content table in a predefined order but contains no duplicates. The search content double word table is substantially identical to the search content word table except that it includes unordered unique pairs within a single search content table entry.

Once the data source has been identified the method proceeds to step . At step the text data is divided into words and tokens. As described above tokens are representations of words that are commonly found together and can include one or more words. Step can be performed by a word parsing module such as a natural language parser or natural language system.

Once the text data has been divided into words and tokens the method proceeds to step . At step all duplicates are removed and the method proceeds to step wherein an alternative word set is applied. In step alternative words associated with a word or token found in the data can be identified. Typically alternative words consist of synonyms common misspellings and common related phrases. When alternative words are associated with a particular word or token a subsequent search for that particular word or token can be made more efficient. In short alternative words are words that are expected to be found in a query directed to a target word which the alternative words are associated.

Once the alternative word sets have been applied the target words and any relationships with alternative words are stored in a database at step . This database can be implemented as the search index table described above. Once this database has been created the build method terminates by proceeding to end block . Accordingly the build process is terminated and the database has been prepared for searching during a run time process.

The method proceeds from step to step . At step a database query is composed. As described above the original query received may contain natural word sentences or phrases or may contain other items that can hamper the search process. At step the query is processed to make the query conducive to the known architecture of the database.

Once the database query has been composed in step the method proceeds to step . At step the database is queried. In short the database query is compared to the database to generate a list of potential matches or results. As stated above the database that is queried in step could be a search index table.

The method proceeds from step to step and the results are ranked. The purpose of ranking the results is to provide the search results in descending order based on a calculated likelihood that a particular result entry is a target of the search query.

The method proceeds from step to step and any duplicates are removed. The method proceeds from step to step and the best matches i.e. those with the highest ranking are returned. Those skilled in the art will appreciate that various threshold levels could be set to determine which results are returned. The method proceeds from step to end block and terminates.

The method proceeds from step to step . At step index data is inserted into the empty tables in the database. Index data include index entries that are essentially pointers to content. After the index entries have been inserted the method proceeds from step to step . At step the encyclopedia entities are processed. In step entities associated with the content of the encyclopedia data application are inserted in the search index. As stated above these entities include metadata associated with specific content. Such metadata can include article titles word counts and article categories. After the encyclopedia entities have been processed the method proceeds from step to step .

At step the encyclopedia text is processed. In short this step involves adding to the database text that corresponds to the entities processed in step . The method proceeds from step to step . At step forward associations are processed to associate entities in the database. For example an encyclopedia article may be associated with media a web link or an archived article. These associations are established within the database so that the content will be properly associated at run time.

The method proceeds from step to step . At step reverse associations are processed for the encyclopedia content. Reverse associations are helpful in cases where for example a search result may include a narrow content entity but should also include the broader content entity that contains the narrow content entity. The reverse association process will establish a link that enables the search for include such flexibility. Those skilled in the art will appreciate that while there may be some overlap between forward associations and reverse associations they are not necessarily mutually inclusive.

The method proceeds from step to step . At step compound and composite media are processed. Compound media are content entities that include more than one content entity such as a picture and an associated audio file. Composite media are content entities that may include simple and compound content entities. The method proceeds from step to step .

At step dictionary data as opposed to encyclopedia data is processed in the same manner as described in connection with steps . In this embodiment of the present invention processing is provided for an encyclopedia data application as well as for a dictionary data application. Those skilled in the art will appreciate that exemplary embodiments of the present invention may be used in conjunction with one or more data applications. The method proceeds from step to step . At step related articles are processed. Related articles are hierarchical lists of content related to a particular article.

The method of proceeds from step to step . At step index data is processed. In this step the index data inserted in step is stored in the database. In one embodiment of the present invention the index key words are stored in one or more of the four tables described in more detail in connection with . The method proceeds from step to step . At step content browse data is processed. This step essentially sorts content that belong to identified categories. At run time a user may browse the sorted articles based on an identified area of interest and or category.

The method proceeds from step to step . At step the method prepares for run time operation. In this step the populated tables can be cleaned up so that unnecessary entries in the tables are removed. The method proceeds from step to step . At step the output file including the search index table and all other populated tables can be detached from the build server. The method proceeds from step to end block and terminates.

The method proceeds from step to step . At step the query is converted to tokens. The method proceeds from step to step and the original user query and the tokenized query are sent to a database. The method proceeds to step wherein an exact match is conducted on the user query. The method proceeds from step to step and an exact match is conducted on the first token.

The method proceeds from step to step . At step each word in the query is looked up in the search word table and all valid words are identified. The method then proceeds to step and word pairs are created from identified valid words. The method proceeds from step to step . At step the search content double word table is searched using the word pairs created in step . The method then proceeds to step and the search content word table is searched using the original words. The method then proceeds to step and all result sets produced by steps and are returned. In the embodiment of these result sets are returned to the web service.

The method proceeds from step to step wherein the results are merged into a single list and duplicates are removed. The method then proceeds to step where the results list is converted to XML. The method proceeds from step to step and the XML based results list is returned. The method then proceeds to end block and terminates.

Although the present invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

