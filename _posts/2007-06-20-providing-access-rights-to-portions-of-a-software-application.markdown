---

title: Providing access rights to portions of a software application
abstract: Techniques for providing access rights to different portions of a software application to one or more authorized users are described herein. An issuance license may be inserted into the software application that divides the software application into one or more portions and identifies, for each portion, one or more users that are authorized access to the portion. Each portion of the software application may then be encrypted using, for example, a different cryptographic key. When the software is executed, an end user license may then be requested that corresponds to a particular user and that entitles the particular user access to each portion of the software application that the issuance license identifies the particular user as being authorized to access. The end user license may then be used to decrypt each portion of the software application that the issuance license identifies the particular end user as being authorized to access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08776258&OS=08776258&RS=08776258
owner: 
number: 08776258
owner_city: 
owner_country: 
publication_date: 20070620
---
It is common to use cryptography to protect or hide sensitive data found in software from being seen or used by third parties. For example Information Rights Management IRM is a feature found in the Office software package from Microsoft Corp. of Redmond Wash. IRM can help prevent sensitive information from being distributed to or read by persons who do not have permission rights to access the content of the sensitive information. As another example the Outlook application included in aforementioned Office software package enables users to create and send e mail messages with restricted permission to help prevent messages from being forwarded printed or copied and pasted. Documents workbooks and presentations that are attached to messages with restricted permission are automatically restricted as well.

Sometimes in addition to data that is found in software the actual software product itself can be highly sensitive such as for example in the case of software tools for Digital Rights Management DRM software systems. With the increased complexity of software products it is becoming more difficult to control access to software products which may have many portions sections some of which are very sensitive to some users and some which may not be sensitive at all to other users.

Techniques for providing access rights to different portions of a software application to one or more authorized users are described herein. An issuance license may be inserted into the software application that divides the software application into one or more portions and identifies for each portion one or more users that are authorized access to the portion. Each portion of the software application may then be encrypted using for example a different cryptographic key.

When the software is executed the issuance license may be located. An end user license may then be requested that corresponds to a particular user and that entitles the particular user access to each portion of the software application that the issuance license identifies the particular user as being authorized to access. The end user license may then be used to decrypt each portion of the software application that the issuance license identifies the particular end user as being authorized to access.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The inventive subject matter is described with specificity to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather it is contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies.

With reference to computing system environment includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media include both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD RW DVD RW or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics interface may also be connected to the system bus . One or more graphics processing units GPUs may communicate with graphics interface . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Rights privileged software may be generated by taking as an input a configuration file including rights management settings or display a user interface for an operator to enter rights management settings. The rights management settings may contain information regarding how the rights privileged software is to be processed and a list of principals who have rights to use particular portions of the software product. This can range from all of the software product down to particular portions such as particular functions or features within the software product all with different principals if required.

In accordance with an illustrative embodiment existing technologies that encrypt executable software code and decrypt on runtime may be used. Such technologies may employ various existing cryptographic key or any other appropriate encryption mechanisms. Before the software is distributed an issuance license IL is generated that states which specific authorized principals or all members of a distribution list as examples may use the software or portions of the software and what the cryptographic key is to decrypt the software that is ready for execution.

The executable is then processed such that it is encrypted the IL is inserted and the logic to perform the rights check and decrypt the software is injected. Upon execution the software takes out the issuance license and requests the End User License EUL from a rights management system. The rights management system may be remote or may be cached locally for performance gains on future runs. The EUL may then be bound to the software and one or more cryptographic keys in the EUL may be used to decrypt one or more encrypted portions of the executable. Although an EUL is used in this embodiment other types of access documents may be employed alternatively or in addition to an EUL depending on the specific design requirements. After decrypting one or more accessible portions of the software control is passed to the decrypted software. Once execution of the decrypted software has completed it may be re encrypted and then control is returned to the software.

Referring now to there is shown flow diagram representing an exemplary method for generating a rights privileged application in accordance with an exemplary embodiment. At act an issuance license is generated from the configuration settings . As previously mentioned the configuration settings may be entered via a pop up screen or other entry tool which may be controlled by an authorized software administrator or other such person. Access to the configuration settings may be secured i.e. encrypted password protected etc. such that only authorized personnel can have access to the settings and be able to modify add or delete the settings given their secure nature.

A cryptographic key is chosen to encrypt the software to be processed . Depending on the specific application the cryptographic key can be per software function or the same key for all of the software product or anywhere in between. The number of cryptographic keys that are used may depend on the number of portions of the software that need to be secured and the number of users that the portions need to be secured from. This of course may differ depending on the particular security features that need to be implemented in the software product. At act the software is then encrypted using the one or more cryptographic keys. The software is analyzed based on the configuration settings to find each area that needs to be protected and those areas of the software are encrypted using the appropriate cryptographic key.

At act logic to check rights and decrypt encrypted portions is injected into the software. The logic provides access to software code to handle a request for a new End User License EUL decryption of the software and or the transfer of control to the decrypted software once authorization and decryption is complete. The injected logic may be referred to as non encrypted because the portion of the software that performs the above listed functions will not always be encrypted. In one embodiment the software code that implemented this logic may expose an application programming interface API for the software to further request whether particular principals also have rights to use a particular function or feature in the software and to enquire whether that function is actually decrypted or still encrypted. At act the issuance license is then added to the processed software. The software is ready for distribution in . Once the software has been distributed executing the software can be attempted by the end user.

A flow diagram representing an exemplary method for executing a rights privileged software application is shown in . When the software is loaded by the computer system s operating system OS execution of the software initiates at act from the main loop of the original software. At act it is determined whether the software is bound to an End User License EUL . If the software is not yet bound then injected logic is called during execution and the issuance license is located at act . At act the issuance license is used to request an End User License EUL for a rights management system and the EUL is then bound to the software application and the current end user or principal at act .

In certain circumstances the EUL may not to able to be obtained from the rights management system. This may occur for example if the end user is not authorized to use any portions of the software application. In decision act if the EUL cannot be obtained then the user would be informed of the error failure condition in act . The user can be informed of the error condition in by an error window appearing on the computer monitor or some other form of message such as for example an audio message through speakers .

At act it is determined whether the user has rights to access particular functions within the executable. If the user does not have rights then the user would be informed of the error failure condition in act . If the user does have rights then at act the functions are decrypted and at act the functions are executed. If an application programming interface API was exposed by the injected logic the software can call it at act to verify whether a particular function can be decrypted and executed or not. At act it is determined whether or not the decrypted functions are to be re encrypted and if so then the functions are re encrypted at act .

In some embodiments the software may be tied to one or more principals. Software processed with the system above can be passed on to other users to run but only those users who are authorized may execute the encrypted portions of the software. In another embodiment authorization of who can use the software can be centrally managed. For example a distribution list for use of the software can be authorized and users can be added and removed from the distribution list as needed. Another feature that can be added is a revocation feature whereby the software fails to operate once a user is no longer authorized to use the software. This feature differs from previous techniques in which the software continues to operate as long as a user has a token i.e. CD DVD dongle etc. to use the software.

In still another embodiment different parts of the software product can be licensed to different users. In an illustrative example of this embodiment every user with license A can use everything in the software product except features X and Y and only users with licenses to features X and Y can use those features within the software product. This solution differs from previous all or nothing approaches in which users could only enable the entire executable or no portion of the executable.

Although the subject matter has been described in language specific to the structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features or acts described above are disclosed as example forms of implementing the claims.

