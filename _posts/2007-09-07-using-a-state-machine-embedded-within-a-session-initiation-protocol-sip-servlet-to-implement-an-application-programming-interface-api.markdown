---

title: Using a state machine embedded within a session initiation protocol (SIP) servlet to implement an application programming interface (API)
abstract: The present invention discloses a system for implementing a software application programming interface (API) within a session initiation protocol (SIP) servlet. Such a system can utilize a state machine, a SIP servlet configured to execute the state machine, and an enterprise service bus (ESB). The state machine can be configured to send and receive a series of communications and can be defined in a definition document. The series of communications can represent the execution of a software function defined within an API. The SIP servlet can select a state machine based upon an indicator contained within a received SIP message. The ESB can be configured to execute a system function in response to communications with the state machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08260944&OS=08260944&RS=08260944
owner: International Business Machines Corporation
number: 08260944
owner_city: Armonk
owner_country: US
publication_date: 20070907
---
The present invention relates to the field of Application Programming Interface API implementation and more particularly to implementing an API utilizing a state machine embedded within a session initiation protocol SIP servlet.

Application programming interfaces APIs exist as an abstraction that provides software programmers with a simple and standardized means of utilizing the functions or services of another software application such as an operating system. An API specification represents a high level definition of the interface or calling conventions without concern for the details of the actual implementation within the software system. Typically an API is implemented as a software program or an additional code file such as a dynamically linked library .DLL file that translates a programmer s use of the conventions defined in the API into the lower level code necessary to perform the selected functionality.

For example in a WINDOWS environment a programmer can access system functions such as an error beep by including the appropriate .DLL file and function call within the application s source code. A software programming environment such as an integrated development environment IDE often provides a programmer with the syntax required for the inclusion of the .DLL file and function call and can make the implementation of the API transparent.

However the complexity of the API and its implementation increases with the complexity of the computing system and the number of additional protocols used. In a service oriented architecture SOA the use of the Session Initiation Protocol SIP relies upon timed messaging between distributed computing components in order to execute system functions. This added complexity often requires a programmer to have in depth knowledge of how a specific API implementation behaves in order to ensure that applications perform as desired. Further a programmer may also need to understand the functional capabilities of the underlying system components and the communication requirements between the components. Such a situation nullifies the simplicity provided by the API.

What is needed is a solution that provides a programmer with a higher level abstraction for API implementation within a complex computing system that uses SIP. That is the solution would use an automated process to manage the SIP messaging necessary to implement an API specification. Ideally such a solution would utilize a state machine within a SIP servlet to implement the functionality of the API and communicate with an enterprise service bus ESB to perform the requested operation.

The present invention discloses a system for implementing an application programming interface API specification as a state machine embedded within a session initiation protocol SIP servlet. That is the functions defined within the API specification can be expressed as the states and state transitions of a state machine instead of more conventional approaches. The state machine can initiate a series of communications with an enterprise service bus ESB to accomplish the functionality requested in a SIP message received by the SIP servlet. The SIP servlet can utilize message template processing documents and Web services definition documents to handle the series of communications for the state machine.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a system for implementing a software application programming interface API within a session initiation protocol SIP servlet. Such a system can utilize a state machine a SIP servlet configured to execute the state machine and an enterprise service bus ESB . The state machine can be configured to send and receive a series of communications and can be defined within a definition document. The series of communications can represent the translation of a SIP message into functions defined by an application programming interface API . The SIP servlet can select a state machine based upon the received SIP message. The ESB can be configured to execute one or more system functions in response to communications with the state machine.

Another aspect of the present invention can include a method for utilizing a state machine implementation of an application programming interface API embedded within a session initiation protocol SIP servlet. Such a method can begin with a SIP servlet receiving a SIP message that requires API functions for successful processing. The SIP servlet can then select a state machine definition document that corresponds to the received SIP message. Next the SIP servlet can invoke the state machine using the state machine definition document. The state machine can then initiate a series of communications between the SIP servlet and an enterprise service bus ESB . The series of communications can represent the successful processing of the SIP message by the API causing the ESB to execute a corresponding series of system functions.

Still another aspect of the present invention can include an application programming interface API . The API can include at least one state machine definition document and at least one message template processing document. A state machine definition document can be configured for execution by a Session Initiation Protocol SIP servlet. Further the definition document can define a series of communications and a state flow for implementing an API specification. A message template processing document can be configured to provide the SIP servlet with a predefined template for messages sent by the servlet.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or as a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory any other recording medium or can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

The SOA infrastructure can be a computing system utilizing computing components typical in conventional SOA implementations including components that can support SIP communications. One or more networks not shown can convey communications between components of the SOA infrastructure .

In this example the SIP capable application server can receive a SIP message . The SIP message can contain data in a format already defined within a SIP specification and can be sent from any component within the SOA that can act as a user agent client UAC . An indicator not shown can be included within the message indicating which supported API to use when processing the message . For example the SIP message can indicate that the JSR API specification should be used for processing.

Upon receipt of the SIP message the SIP capable application server can execute internal rules for the selection of a SIP servlet to handle the message . The SIP servlet can be a software application designed to handle specific SIP tasks for the application server . The selected servlet can invoke a state machine that corresponds to the appropriate API to process the SIP message .

It should be noted that the use of a state machine to implement an API within a servlet is currently not done within conventional SOA infrastructures . Use of a state machine is of particular note because the complexities of the API implementation can be hidden from a programmer utilizing the system. That is a state machine implementation allows for a simpler interface between a programmer and the system as well as between the SIP servlet and ESB .

The state machine can generate a series of communications with the ESB . The series of communications can comprise a sequence of messages sent by the SIP servlet to the ESB and responses from the ESB back to the SIP servlet . The successful series of communications can represent the execution of one or more API functions necessary to handle the SIP message . The status of the state machine can change based on the contents of messages within the series of communications . For example the status of the state machine can change from Waiting to Sending if a response is not received from the ESB within an allotted time frame.

The ESB can represent the communications infrastructure between the additional and or distributed components of the SOA infrastructure . The ESB can execute lower level and or system level functions in response to communications received from the SIP servlet .

In system a SIP message can be received by a SIP capable application server . As in system the SIP message can represent a typical SIP transmission. The SIP capable application server can route the SIP message to an appropriate SIP servlet for handling.

The SIP servlet can invoke a state machine by selecting and executing a state machine definition document . The state machine definition document can define the states and actions of the state machine . Selection of a state machine definition document by the SIP servlet can be based upon the type of SIP message received and or an indicator not shown contained within the SIP message . Thus multiple definition documents can exist each for a different type of SIP message and or API function being implemented.

When the state machine requires the servlet to transmit a message to the enterprise service bus ESB a message template processing document can be used as a guideline. Multiple message template processing documents can exist to accommodate the different messages required. In the case where the SIP message requires interaction with a Web service the SIP servlet can further modify the outgoing servlet message by applying a Web services definition language WSDL document .

The state machine definition documents message template processing documents and the WSDL documents can be contained within a data store accessible by the SIP servlet . In this example the data store is a component of the application server . In an alternate embodiment the data store can be remotely located from the application server and accessed via a network not shown .

It should be noted that the use of specialized documents to define the state machine and communications with the ESB imparts a new flexibility and simplicity for maintaining the API implementation. Conventional API implementations require base code changes when the API specification changes. A state machine implementation of an API specification allows changes to be easily integrated into the existing system only the documents affected by the specification change need be modified.

Additionally a state machine definition document can express the meaning of the API using plain language terms that better describe behavior and improve readability and understanding. Therefore a state machine implementation can alleviate many of the complexities and ambiguities encountered by programmers utilizing conventional API implementations.

In response to the servlet message the ESB can perform specified actions and transmit an ESB response . The ESB response can contain information that can cause a state transition within the state machine and additional messages and responses .

As used herein presented data stores including store can be a physical or virtual storage space configured to store digital information. Data store can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Data store can be a stand alone storage unit as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within data store in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further data store can utilize one or more encryption mechanisms to protect stored information from unauthorized access.

A WebSphere application server can receive a SIP message which is optionally processed by a set of WebSphere interceptors for security transaction and so forth. The optionally processed message can be routed to an appropriate SIP servlet . In this example handling of the SIP message requires utilizing the JSR API. Therefore the SIP servlet retrieves the state chart extensible markup language SCXML document that expresses the requested JSR API function s from a data store and executes the SCXML document to handle the message .

The JSR API based state machine can initiate a series of JSR API communications with the WebSphere enterprise service bus ESB to execute API functions. To formulate outgoing messages the servlet can utilize various extensible stylesheet language transformations XSLT documents and Web services definition language WSDL documents also contained in data store .

Method can begin with step where a SIP servlet can receive a SIP message for processing. The SIP servlet can determine the state machine definition to use to process the message in step . In step the state machine can be invoked.

The servlet can create a message based on the current status of the state machine and a message template processing document in step . In step the servlet can convey the message of step to the enterprise service bus ESB .

The ESB can perform one or more system functions in response to the conveyed message in step . Upon completion of the system function s the ESB can send a response message back to the servlet in step . In step the state machine can determine if the response received from the ESB necessitates a state transition.

When a state transition is not necessary flow returns to step . This branch can represent the case where a communications failure has occurred and a message must be resent. When a state transition is required step can execute where the state machine transitions to the new state as defined in the state machine definition document and in accordance with the ESB response. For example a current state can be defined as branching to multiple states based upon the contents of the ESB response e.g. response Good transition to state Invite response Bad transition to state Retry .

Once state transitioning is complete it can be determined if the current state which is the new state transitioned to in step is a terminating state for the state machine in step . When the current state is a terminating state then the state machine can be terminated in step . Otherwise flow can return to step for continued processing until a termination state is reached.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention may also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

