---

title: Techniques for determining logical data objects corresponding to physical storage locations
abstract: Described are techniques for determining one or more logical data objects for a storage location. The storage location indicating a location on a device of a data storage system is provided. A list of one or more logical data objects is received. For each of the one or more logical data objects, one or more related data storage system locations associated with each logical data object are determined. It is determined whether the storage location is included in any of the one or more logical data objects. It is also identified whether, for each of the one or more logical data objects, the storage location is one of the one or more related data storage system locations associated with each logical data object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832163&OS=08832163&RS=08832163
owner: EMC Corporation
number: 08832163
owner_city: Hopkinton
owner_country: US
publication_date: 20070914
---
This application generally relates to data storage and more particularly to techniques used in connection with logical data objects and corresponding physical storage locations.

Computer systems may include different resources used by one or more host processors. Resources and host processors in a computer system may be interconnected by one or more communication connections. These resources may include for example data storage devices such as those included in the data storage systems manufactured by EMC Corporation. These data storage systems may be coupled to one or more host processors and provide storage services to each host processor. Multiple data storage systems from one or more different vendors may be connected and may provide common data storage for one or more host processors in a computer system.

A host processor may perform a variety of data processing tasks and operations using the data storage system. For example a host processor may perform basic system I O operations in connection with data requests such as data read and write operations.

Host processor systems may store and retrieve data using a storage device containing a plurality of host interface units disk drives and disk interface units. Such storage devices are provided for example by EMC Corporation of Hopkinton Mass. and disclosed in U.S. Pat. No. 5 206 939 to Yanai et al. 5 778 394 to Galtzur et al. U.S. Pat. No. 5 845 147 to Vishlitzky et al. and U.S. Pat. No. 5 857 208 to Ofek. The host systems access the storage device through a plurality of channels provided therewith. Host systems provide data and access control information through the channels to the storage device and storage device provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage device directly but rather access what appears to the host systems as a plurality of logical disk units. The logical disk units may or may not correspond to the actual disk drives. Allowing multiple host systems to access the single storage device unit allows the host systems to share data stored therein.

A host may utilize logical data objects to represent one or more locations of a data storage system. Logical data objects may correspond for example to files or other entities as referenced and used on the host. Each logical data object may be mapped to one or more related storage locations of the data storage system. Different techniques may be used in connection with logical data objects used by a host system. One technique provides for determining the corresponding physical storage locations for a given logical data object. For example a file may be specified and the disk and disk locations associated with the file may be determined.

It may be desirable to perform a mapping process which can be characterized as the reverse of the foregoing. In such a mapping process one or more storage locations may be specified and one or more corresponding host side logical data objects determined.

In accordance with one aspect of the invention is a method for determining one or more logical data objects for a storage location comprising providing the storage location indicating a location on a device of a data storage system receiving a list of one or more logical data objects determining for each of the one or more logical data objects one or more related data storage system locations associated with said each logical data object and determining whether the storage location is included in any of the one or more logical data objects said determining identifying whether for each of the one or more logical data objects the storage location is one of the one or more related data storage system locations associated with said each logical data object. The one or more logical data objects may be used by a host connected to the data storage system when performing I O operations. One of the logical data objects may be a file system of the host. One of the logical data objects may be a file in the file system. One of the logical data objects may be one of a logical volume or a host device. The storage location may be specified using a first identifier for the device and a second identifier representing one or more blocks on the device. The storage location may be specified using a third identifier for the data storage system. The storage location may identify a block on the device including corrupted data. The storage location may identify a block on the device being monitored to detect when the block has been modified.

In accordance with another aspect of the invention is a method for determining one or more logical data objects for a storage location comprising providing the storage location indicating a location on a device of a data storage system receiving a list of one or more file systems on a host each of the one or more file systems being one of the logical data objects determining for each of the one or more file systems one or more related data storage system locations associated with said each file system and determining whether the storage location is included in any of the one or more file systems said determining identifying whether for each of the one or more file systems the storage location is one of the one or more related data storage system locations associated with said each file system. The method may also include identifying a first file system of said one or more file systems including the storage location and determining a list of one or more files included in the first file system. The method may also include determining for each of the one or more files in the list one or more related data storage system locations associated with said each file. The method may also include determining whether the storage location is included in any of the one or more files of the first file system said determining identifying whether for each of the one or more files of the first file system the storage location is one of the one or more related data storage system locations associated with said each file. If the storage location is not included in any of the files of the first file system it may be determined that the storage location is included in either metadata or free space of the first file system and otherwise determining that the storage location is included in user data of the first file system. The method may also include identifying a first file system of said one or more file systems including the storage location and mapping the storage location to a logical representation of the storage location as used by the host. The method may include determining using the logical representation of the storage location whether the storage location is included in metadata of the first file system. If it is determined that the storage location is not included in the metadata of the first file system the method may further comprise determining using the logical representation of the storage location whether the storage location is included in a file of the first file system and wherein if the file is not included in a file of the first file system the storage location is determined as being included in a free space portion of the first file system.

In accordance with another aspect of the invention is a system comprising one or more data storage systems each of the one or more data storage systems including one or more data storage devices a host connected to the one or more data storage systems the host including executable code stored on a computer readable medium for determining one or more logical data objects for a storage location on a device of one of the data storage systems the computer readable medium comprising executable code for providing the storage location indicating a location on a data storage device of one of the data storage systems providing at least one mapping layer on the host connected to the data storage system said at least one mapping layer including information used by the host to map logical data objects to corresponding storage locations in the data storage systems and using the information to determine whether any of the logical data objects includes the storage location. The computer readable medium of the host may further comprise executable code for receiving a list of the one or more logical data objects determining for each of the one or more logical data objects one or more related data storage system locations associated with said each logical data object and determining whether the storage location is included in any of the one or more logical data objects said determining identifying whether for each of the one or more logical data objects the storage location is one of the one or more related data storage system locations associated with said each logical data object. The one or more logical data objects may include at least one of a file system a file a logical volume and a logical device.

Referring to shown is an example of an embodiment of a computer system that may be used in connection with performing the techniques described herein. The computer system includes a data storage system connected to host systems through communication medium . In this embodiment of the computer system and the n hosts may access the data storage system for example in performing input output I O operations or data requests. The communication medium may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. The communication medium may be a network connection bus and or other type of data link such as a hardwire or other connections known in the art. For example the communication medium may be the Internet an intranet network or other wireless or other hardwired connection s by which the host systems may access and communicate with the data storage system and may also communicate with others included in the computer system .

Each of the host systems and the data storage system included in the computer system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . The processors included in the host computer systems may be any one of a variety of proprietary or commercially available single or multi processor system such as an Intel based processor or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.

It should be noted that the particular examples of the hardware and software that may be included in the data storage system are described herein in more detail and may vary with each particular embodiment. Each of the host computers and data storage system may all be located at the same physical site or alternatively may also be located in different physical locations. Examples of the communication medium that may be used to provide the different types of connections between the host computer systems and the data storage system of the computer system may use a variety of different communication protocols such as SCSI Fibre Channel iSCSI and the like. Some or all of the connections by which the hosts management component s and data storage system may be connected to the communication medium may pass through other communication devices such as a Connectrix or other switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite.

Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of any one of the host computers may issue a data request to the data storage system to perform a data operation. For example an application executing on one of the host computers may perform a read or write operation resulting in one or more data requests to the data storage system .

Referring to shown is an example of an embodiment of the data storage system that may be included in the computer system of . Included in the data storage system of are one or more data storage systems as may be manufactured by one or more different vendors. Each of the data storage systems may be inter connected not shown . Additionally the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements such as those related to bandwidth and throughput required in accordance with a rate of I O requests as may be issued by the host computer systems for example to the data storage system . In this example as described in more detail in following paragraphs reference is made to the more detailed view of element . It should be noted that a similar more detailed description may also apply to any one or more of the other elements such as but have been omitted for simplicity of explanation. It should also be noted that an embodiment may include data storage systems from one or more vendors. Each of may be resources included in an embodiment of the computer system of to provide storage services to for example host computer systems. It should be noted that the data storage system may operate stand alone or may also included as part of a storage area network SAN that includes for example other components.

Each of the data storage systems such as may include a plurality of disk devices or volumes such as the arrangement consisting of n rows of disks or volumes . In this arrangement each row of disks or volumes may be connected to a disk adapter DA or director responsible for the backend management of operations to and from a portion of the disks or volumes . In the system a single DA such as may be responsible for the management of a row of disks or volumes such as row

The system may also include one or more host adapters HAs or directors . Each of these HAs may be used to manage communications and data operations between one or more host systems and the global memory. In an embodiment the HA may be a Fibre Channel Adapter or other adapter which facilitates host communication.

One or more internal logical communication paths may exist between the DA s the remote adapters RA s the HA s and the memory . An embodiment for example may use one or more internal busses and or communication modules. For example the global memory portion may be used to facilitate data transfers and other communications between the DA s HA s and RA s in a data storage system. In one embodiment the DAs may perform data operations using a cache that may be included in the global memory for example in communications with other disk adapters or directors and other components of the system . The other portion is that portion of memory that may be used in connection with other designations that may vary in accordance with each embodiment.

The particular data storage system as described in this embodiment or a particular device thereof such as a disk should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

Also shown in the storage system is an RA . The RA may be hardware including a processor used to facilitate communication between data storage systems such as between two of the same or different types of data storage systems.

Host systems provide data and access control information through channels to the storage systems and the storage systems may also provide data to the host systems also through the channels. The host systems do not address the disk drives of the storage systems directly but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes LVs . The LVs may or may not correspond to the actual disk drives. For example one or more LVs may reside on a single physical disk drive or multiple drives. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. The HAs may be used in connection with communications between a data storage system and a host system. The RAs may be used in facilitating communications between two data storage systems. The DAs may be used in connection with facilitating communications to the associated disk drive s and LV s residing thereon.

The DA performs I O operations on a disk drive. In the following description data residing on a LV may be accessed by the DA following a data request in connection with I O operations that other directors originate.

Referring to shown is a representation of the logical internal communications between the directors and memory included in a data storage system. Included in is a plurality of directors coupled to the memory . Each of the directors represents one of the HA s RA s or DA s that may be included in a data storage system. In an embodiment disclosed herein there may be up to sixteen directors coupled to the memory . Other embodiments may use a higher or lower maximum number of directors that may vary.

The representation of also includes an optional communication module CM that provides an alternative communication path between the directors . Each of the directors may be coupled to the CM so that any one of the directors may send a message and or data to any other one of the directors without needing to go through the memory . The CM may be implemented using conventional MUX router technology where a sending one of the directors provides an appropriate address to cause a message and or data to be received by an intended receiving one of the directors . In addition a sending one of the directors may be able to broadcast a message to all of the other directors at the same time.

Referring to shown is an example representation of a host and data storage system that may be used in connection with the techniques herein. The host may include one or more applications and one or more mapping layers . As described in following paragraphs the mapping layers may be used to facilitate data storage requests for data included in data storage system by the application .

Data stored on storage devices of the data storage system may be organized into units referred to as blocks of the physical device . Each block has an associated size such as 512 bytes. Data requests and operations on the host side may use logical data objects including groups of related blocks which may or may not be contiguous. Logical data objects on the host may be used by one or more applications as well as the one or more mapping layers .

Files are examples of logical data objects on the host side which refer to collections of data storage blocks. For example an application may perform I O operations on a file. File systems and logical volumes LVs are other examples of logical data objects on the host side which refer to collections of data storage blocks on physical devices of the data storage system. For example a system manager may perform operations related to a file system including one or more files. Different logical data objects may be used by the application as well as one or more of the mapping layers . For example as will be described in following paragraphs the mapping layers may include a Logical Volume Manager LVM which uses LVs. The mapping layers may be used to map storage locations associated with a first higher level logical data object such as the file to corresponding storage locations expressed using other logical data objects such as LVs as may be used by the different mapping layers .

Referring to shown is an example illustrating the different mapping layers that may be included in an embodiment. The mapping layers in the example include a file system LVM and host device layer . Although 3 layers are illustrated it should be noted that an embodiment may include any number of layers for use with the techniques herein. The layers form a stack with the highest layer or level in this example being the file system and the lowest mapping layer or level being the host device layer . Each layer performs a mapping of a data storage location having a first logical representation to a second logical representation at the next lowest level. Each layer may use different logical data objects to express a data storage location. Furthermore as described above an embodiment may have one or more different logical data objects used by the different mapping layers. For example an application may perform a request to read or write data to a location in a file. The location as used by the application and file system may be expressed as a first representation of a file and offset e.g. block offset within the file. The file system maps the first representation to a second representation understood by the LVM . More specifically the file and offset within the file are mapped to an LV and offset as understood by the LVM . The LVM maps the second representation to a third representation understood by the host device layer . More specifically the LV and offset are mapped to a host device and offset as understood by the host device layer . The representation at each layer may be characterized as a logical representation of a data storage location as used by the host. The logical representation of a data storage location of the bottom most or lowest layer e.g. in this example may then be mapped to a physical location on the data storage system such as a location on the physical device of .

With reference back to the mapping layers may be used to identify the physical locations e.g. data storage system device and blocks thereon included in the data storage system which make up a logical data object as used by the host such as a file file system LV host device and the like. In other words given a host side logical data object the physical storage locations on a device of the data storage system are identified. The foregoing may be characterized as a forward mapping process as described for example in U.S. Pat. No. 6 542 909 Apr. 1 2003 SYSTEM FOR DETERMINING MAPPING OF LOGICAL OBJECTS IN A COMPUTER SYSTEM Tamer et al. assigned to EMC Corporation of Hopkinton Mass. which is incorporated by reference herein.

In connection with data storage systems it may be desirable to perform a mapping process which can be characterized as the reverse of the foregoing. In such a mapping process one or more storage locations may be specified in terms understood by the data storage system for which one or more corresponding host side logical data objects are determined. As an example a storage location may be specified using a particular data storage system identifier a physical device on the data storage system and block number on the physical device. Using techniques that are described herein for reverse mapping one or more corresponding host side logical data objects e.g. file file system LV and or host device including that storage location may then be determined.

The foregoing reverse mapping process of determining the host side logical data objects given one or more data storage system storage locations has a variety of different uses. For example a block on a physical device of the data storage system may be identified as a bad block including corrupted data. The techniques herein may be used to determine the particular file system including the bad block. Furthermore the techniques herein may be used to determine the particular type of data user data metadata or free space associated with the file system that includes the bad block. As known in the art a file system may include different types of data such as user data e.g. user data included in the file metadata and free space. Metadata may be defined as data about data. In connection with file systems metadata may include data describing the files of the file system. Metadata about a file system may include for example a list of all files in the file system. Metadata about one of the files may include for example the file name current file size creation and or modification date and the like. The user data is included in a file. Free space includes blocks of free space which may be allocated by the file system for use in connection with performing operations. If the bad block is included in user data the particular file including the block may be identified.

Information regarding the logical data object s including the bad block may be used to take further action. For example if the bad block is included in a file a restoration of the file from a previously saved and valid copy of the file data may be performed rather than restoring a larger amount of data such as an entire file system including the bad block. If the bad block is included in free space the bad block may be marked so that it is not allocated. If the bad block is included in metadata the file system including the bad block may be restored from a previously saved and valid set of data.

The foregoing is just one use of the techniques described herein in following paragraphs along with additional exemplary uses.

Referring to shown is an illustration of the different logical data entities and storage location representations. The example illustrates the different representations of the storage locations of file A as used by the host columns and and data storage system column . File A has data blocks as indicated in column . For simplification of illustration file A has 3 blocks 0 1 and 2 each having a corresponding row in the table respectively and . Columns and indicate logical representations of the storage locations for file A respectively by the file system LVM and host device mapping layers. Column indicates the location on a physical device of the data storage system. As illustrated by row block 0 of file A has a corresponding first logical representation as used by the file system at LV1 block 0 a second logical representation as used by the LVM at LV1 block 0 and a third logical representation as used by the host device layer at host device 1 block 0. Block 0 of file A has a corresponding physical device location on the data storage system at device D1 block 0.

Referring to shown is a graphical illustration of the mapping between physical locations on the data storage system and corresponding host side logical representations for the storage locations. The example graphically illustrates the information included in the table of . The example includes the host side logical representations of storage locations as used by the different mapping layers and the corresponding physical storage locations of the physical devices in the data storage system.

In connection with the techniques herein a bad block may be located at block 0 of the data storage system device D1 as illustrated by the row . By mapping the physical data storage system location in up the mapping layer stack used by the host from the lowest level representation the corresponding logical representations of storage locations as used by the host for the physical storage location may be determined for each layer. From the corresponding logical representations of the host logical data objects such as the host device or LV including the bad block may be determined. Furthermore from the logical representations of storage locations as expressed using the logical data objects e.g. LVs host devices higher level logical data objects such as the file and file system including the bad block may be determined. The particular type of file system data e.g. user data metadata free space may be determined using metadata. If the block is in user data the file including the block may also be determined using metadata.

In the example illustrated by the table of the file system is mounted on an LV of the LVM. As an alternative in an embodiment not utilizing an LVM the host may not include an LVM mapping layer and the file system may be mounted on a host device as used by the host device layer. In this latter instance with reference to column may be omitted and the data included in column would then match the data included in column .

With reference to exemplary logical data objects used by the host include an LV e.g. LV1 and host device e.g. host devices 1 2 and 3 . Higher level logical data objects such as the file A and the file system including file A may be described using one or more lower level logical data objects or portions thereof.

Referring to shown is an example representation of the different types of data that may be included in a file system. A host may include one or more file systems. In the example a host may include a first file system having metadata portion user data portion and free space portion . The host may include a second file system having metadata portion user data portion and free space portion . The file system may be configured to have each of the different types of data for as represented in and on the host side with physical data storage devices as indicated by . The file system may be configured to have each of the different types of data for as represented in and on the host side with physical data storage devices as indicated by

With reference to file A as illustrated in file A may be included in file system 1 . The user data of file A is included in user data portion . The metadata for the file A is included in metadata portion . User data of file system is configured to reside on LV1 host devices 1 2 and 3 or portions thereof and data storage system devices D1 and D2. Similarly the metadata portion and free space portion reside at other locations on LVs and host devices. For example portion may reside in LV1 and host device 4 blocks 0 100 on the host side and device D3 of the data storage system. Portion may reside in LV1 and host device 4 blocks 101 200 on the host side and device D4 of the data storage system. Given a physical data storage location the particular LV or host device including the physical data storage location may be determined. Furthermore based on the particular LV or host device and location thereon a determination may be made as to which file system includes the physical data storage location and whether the physical data storage location resides in metadata user data or free space of the file system.

Each of the different mapping layers may include information necessary to map a logical representation of a storage location to a next lowest level. Such information may also be used in connection with the techniques herein to perform a reverse mapping and determine the host logical data objects for a corresponding physical data storage location on a data storage system device.

Referring to shown is a representation of data as may be associated with a file system and the different types of data. The example includes metadata user data and free space as may be included in a file system such as file system of . The user data portion may include data for various files such as file A. The metadata portion may include metadata for the file system as well as each file in the file system. Metadata for the file system may include a list of all files in the file system the locations associated with storage allocated for the file system and each file and the like. For example the metadata may indicate which LV is used for storing the user data and free space of the file system mounted on an LV. Such information is represented by elements and of . With reference to file A the metadata portion may include metadata information for the file including the name of the file when the file was created the size of the file and the location of the file expressed in terms of the logical representation of the location in the file system. Such information regarding file A is represented in column and of and graphically represented in .

As described elsewhere herein the user data may include the user data for the one or more files of the file system and the free space may include blocks of storage for use by the file system. In the example those blocks of the free space pool which are unused are indicated with a circle around a number representing a block number in the free space portion .

Referring to shown are flowcharts of processing steps that may be performed in an embodiment for reverse mapping. Given as an input a physical location on a device of the data storage system the processing steps use a forward mapping technique to determine the file system and file including the physical location. It should be noted that although the processing steps of determine particular logical data objects of the file system and file the techniques described herein may be used to perform a reverse mapping for determining other host side logical data objects such as LVs host devices and the like for a particular physical storage location on a device of the data storage system. Furthermore it will be appreciated by those skilled in the art that there are other ways of performing the reverse mapping in addition to the particular technique of using forward mapping operations and processing steps of .

As an input to the processing of flowchart a physical location on a device of a data storage system a current data storage block of interest is provided. In one embodiment this physical location may be represented by specifying a data storage system device on the data storage system and location e.g. a block on the device. At step a list of the file systems on the host is determined. The particular file system on a host may be determined by examining the appropriate configuration information for the host and may vary with operating system and other particulars of an embodiment. For example a Windows NT operating system supports multiple file systems including the File Allocation Table FAT file system the NT file system NTFS and the high performance file system HPFS . At step the physical blocks on the data storage system associated with each file system are determined. With reference to the physical locations on devices of the data storage system as configured for each file system may be determined by performing forward mapping using data such as metadata regarding each file system to determine the information represented by and respectively for file systems and . At step the range of physical data storage system blocks for each file system are examined to determine which file system if any includes the current data storage block of interest as input to the flowchart processing. At step a determination is made as to whether the current data storage block of interest is included in any of the file systems. If not control proceeds to step where appropriate processing is performed for no file system including the block of interest. For example a message may be output indicating that no file system was determined. If step evaluates to yes control proceeds to step where a determination is made as to whether only the file system is to be determined. In one embodiment the file system alone or the file system in combination with additional logical data objects and or other information may be determined. If step evaluates to yes control proceeds to step where the file system determined at step is returned. If step evaluates to yes additional processing is performed to determine which file if any includes the current data storage block of interest. At step some initialization is performed. FS refers to the file system determined at step as including the current data storage block of interest. Found is initialized to false. File list is initialized as a list of all the files in FS as may be determined using the metadata for the file system FS.

In connection with processing performed by the loop beginning at step each file included in the file system FS is examined. The physical data storage system locations associated with each file are obtained and a determination is made as to whether the current data storage block of interest is included in the physical data storage system locations for the file. Processing of the loop stops when either all files in the FS have been examined and none found to include the current data storage block of interest or the file including the current data storage block of interest has been located. If the first foregoing condition e.g. all files in FS have been examined causes termination of the loop at step the current data storage block of interest is not included in user data and therefore is included in either free space or metadata for the file system determined at step .

At step a determination is made as whether all files in FS have been processed or whether a file including the current data storage block of interest has been found. If step evaluates to no control proceeds to step where the physical data storage system locations for the next file in the list of files for FS are obtained. A determination is made at step as to whether the current data storage block of interest is included in the current file having physical locations obtained at step . If so control proceeds to step where found is assigned true to indicate that the file including the current data storage block of interest has been located and the file name may be saved for later processing such as to be output to a user. Control then proceeds from step to step . If step evaluates to no control proceeds directly to step .

If step evaluates to yes control proceeds to step where a determination is made as to whether a file including the current data storage block of interest has been located. If step evaluates to yes control proceeds to step where it is determined that the current data storage block of interest is included in user data portion of the file system FS in the located file. Processing may be performed as part of step for example to output the file and file system determined from previous processing steps. If step evaluates to no control proceeds to step where a determination is made that the current data storage block of interest is located in either free space or metadata for the current file system FS. Appropriate processing may be performed to output a message indicating the foregoing.

In one implementation of the processing of an API application programming interface may be defined which takes as an input one or more physical storage locations on a data storage system and returns as an output one or more host side logical data objects containing the one or more physical storage locations provided as the API input. The one or more storage locations may be identified by specifying a data storage system device on the data storage system and one or more locations such as blocks of the device. The API may include one or more input parameters used to specify the particular host side logical data object s to be identified. For example with reference to the API may include a parameter specifying whether processing is performed to determine the file system or file system and additional logical objects e.g. file and other information e.g. location or offset in the file file attributes and the like . As part of processing to determine whether the one or more physical storage locations specified as input parameters are included in a file the particular type of file system data e.g. user data metadata free space may be determined. With an API implementing the processing logic of a determination is made as to whether or not the physical storage location of the input parameter is in user data. For locations determined not to be included in user data an embodiment can also perform additional processing to determine whether the physical storage location is in metadata or free space of the file system. It should be noted that an implementation of the API may also return other types of host side logical data object s for one or more physical storage locations on a data storage system as described herein. For example the API may identify the particular LV host device and the like as may vary with each embodiment of the API and host.

One embodiment of may use an existing library of routines residing on the host. For example the library may include a different routine for performing each of steps and . In such an embodiment the runtime call stack includes a separate call at step for each file in the file system and may introduce a large overhead in terms of processing time prior to completing processing for a large number of files in the file system.

Referring to shown are flowcharts of processing steps of a second technique that may be performed in an embodiment for reverse mapping. The processing steps of may be performed as an alternative to using the technique of in an embodiment. Steps and are respectively analogous to steps and of . At step FS is assigned the file system determined at step . At step the physical data storage system location specified as an input parameter is mapped to a corresponding host side logical representation. For example the data storage system device and block number are mapped to the corresponding LV and block number or host device and block number. For purposes of illustration in an embodiment including a file system and LVM the LV and block number may be determined at step . Control proceeds to step where a determination is made as to whether the LV and block number determined at step are located in the metadata portion of FS. As described elsewhere herein processing of steps and may be performed using metadata of the FS. If step evaluates to yes control proceeds to step to perform processing in accordance with a determination that the physical data storage system location input to processing is located in metadata of the file system FS. If step evaluates to no control proceeds to step where the file system metadata is searched to determine if the LV and block number from step are included in any file. As described elsewhere herein the metadata for each file may specify the LV and block s associated with each file in the file system. The particular structure and organization of the metadata may vary with embodiment. At step a determination is made as to whether a file has been located in FS which includes the LV and block determined at step . If not control proceeds to step where a determination is made that the block is in free space of the file system FS. If step evaluates to yes control proceeds to step where a determination is made that the block is in the file system FS in the file determined in step .

It should be noted that a different host side logical representation for the physical data storage location of interest may be determined in step depending on the mapping layers included in an embodiment. For example in an embodiment which includes the file system and host device layers step may determine a host device and block number or location on the host device.

As described above in connection with an API may be implemented using the technique of . One embodiment of may use an existing library of routines residing on the host. For example the library may include a different routine for performing each of steps and . Subsequent processing steps may be performed within the API by direct examination of the metadata for the file system determined at step .

An embodiment may implement both the techniques of and using a single API with an additional input parameter indicating which technique to use for a particular invocation. It will be appreciated by those skilled in the art that an embodiment of the API implementing one or more of the techniques herein may also output additional data attributes associated with a host side logical data object included as an output or return value. For example other file and or file system attributes may be returned. In one embodiment code executed in connection with the techniques herein may be stored on a computer readable medium on the host. Different types of computer readable medium are well known in the art and may include for example different types of non volatile storage such as disks as well as volatile storage devices. As also known in the art the host may determine the one or more data storage systems and devices which can be accessed by the host by performing discovery processing prior to performing the techniques described herein.

The techniques herein have a wide variety of applications and uses. As described above the techniques herein may be used to identify the host side logical data objects such as a file and file system including a physical data storage system location. Such information may be used to take an appropriate action in response to the detected bad block determined to include corrupted data. Other exemplary uses of the techniques herein will now be described.

A physical device on the data storage system can be configured as two LVs and may include multiple host devices. Each LV and host device may have stored thereon a different file system so that multiple different file systems reside on the same drive or physical data storage system device. The storage administrator may want to know which file system s or file s use a given portion of the data storage system device. Such a determination may be made using the techniques herein.

As another example use a data storage administrator may observe that a particular device or portion of the device of the data storage system has a large amount of I O operations. The administrator may use the techniques herein to determine what file system s and or file s are stored on the device. For example if it is determined that 2 particular files or two file systems are located on the foregoing active data storage system device the administrator may reconfigure the data storage system so that each file or file system is located on a different physical device of the data storage system to increase performance decrease response time and I O processing time.

The techniques herein may be used in connection with auditing a portion of a physical data storage system device. For example a data storage system may record when blocks of user data or metadata associated with read only data sets are modified. The data storage system may have a bitmap and associate one bit with each block of the portion being monitored to record any modification. Each time a block is changed in the metadata and or user data portion being monitored the block s corresponding bit is turned on. The bitmap may be checked at various points in time and the techniques herein may be used to determine for each modified block if the block that is modified is in user data metadata or free space. If the block that has been modified is included in user data the host may determine that a data modification has occurred to the read only data and perform appropriate processing for the data compromised.

The techniques herein may also be used to more generally monitor other portions of data on a data storage system besides read only data. For example a data storage system may be configured to monitor those data portions associated with a critical data file a file which is not typically modified and the like. Modification to such data may indicate a security problem such as a virus compromising system data.

The foregoing are some exemplary uses of the techniques herein. It will be appreciated by those skilled in the art that the techniques herein may be used in connection with other applications and uses besides those set forth above.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

