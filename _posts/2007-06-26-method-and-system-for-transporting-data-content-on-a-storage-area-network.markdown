---

title: Method and system for transporting data content on a storage area network
abstract: A system and method of transporting volumes of information from one host computer system to another using point-in-time copies of LUNs but wherein the hardware provider does not necessarily understand the volume configuration of the data. The system and method involves an intermediate layer, i.e., a point-in-time copy interface layer that communicates with both a requesting host computer system and a hardware provider to enable the transfer of volumes of information without requiring that the hardware provider understand the volume information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07721057&OS=07721057&RS=07721057
owner: Microsoft Corporation
number: 07721057
owner_city: Redmond
owner_country: US
publication_date: 20070626
---
This application is a continuation of prior U.S. patent application Ser. No. 10 903 278 entitled Method and System for Transporting Data Content on a Storage Area Network filed Jul. 30 2004 which is a continuation of prior U.S. patent application Ser. No. 10 072 126 entitled Method and System for Transporting Data Content on a Storage Area Network filed Feb. 7 2002 which are both hereby incorporated herein by reference in their entirety.

The present invention relates to storage area networks SANs and more specifically to the transfer of information from one host computer system to another host computer system in a SAN.

System Area Networks SANs provide significant benefits as compared to other network configurations. Typical SANs are highly localized having multiple server or host computer systems communicating with each other and sharing one or more storage subsystems and possibly tape optical or other backup media changers. Additionally many SANs have multiple host computer systems that may be used to perform several different but complimentary functions. For example one host computer system may be used for end user applications while a second host computer system may be used to perform background administration type functions such as backing up end user application data or other system data or for performing extended query resolution on large databases of information. Using two host computer systems in such a manner significantly improves the performance of the system since the two may operate substantially in parallel.

One issue that arises when configuring a SAN to utilize two or more host computer systems to operate in parallel relates to the sharing of the data used by each host computer system. That is the end user host computer system may require access to a specific volume of information stored either locally on its own computer system or on a storage subsystem that is connected to the SAN. The storage subsystem may have an extensive amount of storage capabilities and may in fact provide storage for many other host computer systems in the SAN. Additionally however the specific volume requested by the first host computer system may also be needed by the second host computer system in order to perform its functions. Such conflicts typically need to be resolved in order for both host computer systems to access the information and to operate in a more optimal manner.

Of particular concern is the case where the second computer system requires a relatively exact read only copy of all the data on a volume of information. A volume relates to portions of memory that have been logically combined and presented to a host computer system such that the host computer system views the volume as one portion of memory e.g. a single disk or a single drive of information.

One solution to this problem involves the first computer system sending all the information over the network to the second computer system. Unfortunately however this method significantly saturates the network and reduces the performance of the network and is therefore unsatisfactory.

A second solution to transferring information relates to the use of a point in time copy of the data also referred to as shadow copies or snapshots. Point in time copies are physical copies of data that are created by a storage subsystem. In essence there are quite of few storage systems that have the capability of quickly and efficiently creating a mirror or a point in time copy of a portion of the physical storage in their respective systems. The point in time copy therefore relates to a full physical copy of information stored in another portion of the storage subsystem. Since the point in time copy is stored in another portion of the storage subsystem the second computer system may be provided direct access without conflict to the point in time copy. Providing access of the point in time copy to the second computer system is referred to as transferring ownership of the data from the first computer system to the other computer system i.e. transporting the content to the second machine.

Creation of a point in time copy is done by a storage subsystem which is typically controlled by a hardware provider. Unfortunately however hardware providers generally operate at the LUN level. A LUN is a Logical Unit Number and relates to a virtual device that is surfaced by the storage subsystem. A LUN may correspond to a spindle in the storage subsystem or a set of spindles. From the perspective of the host or host computer system accessing a LUN the LUN looks like a disk which can be used to construct volumes. Hence volumes are typically a subset of a LUN but often a volume may be spread over various LUNs.

Hardware surfaced point in time copies i.e. copies created with the help of a hardware subsystem results in the creation of a new LUN for each original LUN of the volume. The new LUN may be a new full physical copy or may be an existing copy created using copy on write technology. Unfortunately however transportation of data content typically occurs at the LUN level not at the volume level. That is although a LUN may be transported separately from the original LUN to a different machine there is a considerable amount of work that must be done by a receiving computer system to understand what portions of the LUN are relevant where those items are located etc.

A common requirement for both these scenarios is to capture what the application data is i.e. the databases files etc. as well as capture the physical representation of the volumes on which that data resides i.e. the LUNs . The LUNs and the application data i.e. how the data is mapped onto the LUNs need to be surfaced on the machine to which the data is transported. Unfortunately however hardware mechanisms for creating point in time copies operate on the LUN level and therefore there is no way to access data based on volumes that may be spread across several LUNs. Additionally within a SAN environment there may be multiple storage subsystems that may be capable of creating point in time copies wherein each subsystem is made by different vendors. Unfortunately in such an environment each requestor or importer must be aware of specific hardware components for these subsystems in order to import a point in time copy.

The present invention relates to a system and method of transporting volumes of information from one host computer system to another using point in time copies of LUNs but wherein the hardware provider does not necessarily understand the volume configuration of the data. Indeed the present invention relates to an intermediate layer i.e. a point in time copy interface layer that communicates with both a requesting host computer system and a hardware provider to enable the transfer of volumes of information without requiring that the hardware provider understand the volume information.

In accordance with particular aspects the present invention relates to a system having a storage subsystem module that stores data for at least one host computer system and wherein the data is generally stored in one or more LUNs. Additionally the system has a requestor module such a host computer system for requesting the transportation of data stored in the storage subsystem the transportation involving the transfer of information from a first host computer system to a second host computer system. The requesting module requests the transportation of volume of information stored on a portion of one or more LUNs. The system also has a point in time copy interface module for receiving the request and generating an instruction to create a point in time copy wherein the instruction comprises identification information related to LUNs having portions of the volume to be copied. A provider module is also part of the system and it receives the instruction to create a point in time copy of the LUNs and creates the point in time copy of those LUNs. The provider module also provides mapping information to the point in time copy interface relating to location information for the point in time copy. Moreover the point in time copy interface may further generate a backup components document describing the volume to be transported such that an importer module for importing the backup components document and using the information in the backup components document can then access the point in time copy of the volume to be transported.

In accordance with other aspects the present invention relates to a method of transporting data from a sending host computer system to a receiving host computer system wherein the data is stored on volume of information. The method involves creating a point in time copy of the volume generating a backup components document wherein the document includes location information for point in time copy importing the backup components document to the receiving host computer system and accessing the point in time copy using information in the backup components document.

In another embodiment the method relates to creating a point in time copy of each LUN having a portion of the volume to transported marking portions of the LUN to identify the portions as being associated with the volume to be transported and then hiding portions of the LUN not associated with the volume to be transported. In accordance with other aspects the marking act marks the portions of the LUN associated with the volume and in other embodiment the marking act marks portions of the LUN that are not associated with the volume. In yet another embodiment the method relates to transporting data in a plurality of volumes and the backup component document includes information to describe the plurality of volumes. The backup components document may be an XML document.

The invention may be implemented as a computer process a computing system or as an article of manufacture such as a computer program product. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.

A more complete appreciation of the present invention and its improvements can be obtained by reference to the accompanying drawings which are briefly summarized below to the following detail description of presently preferred embodiments of the invention and to the appended claims.

A distributed environment incorporating aspects of the present invention is shown in . The environment has at least one host computer system and potentially other host computer systems such as . The environment may further include an archival backup system for backing up data from either the host computer system or as described below. Additionally the environment may include a memory or storage subsystem such as RAID Redundant Array of Independent Disks system . The host computer systems such as and communicate with the memory system and each other over a network configuration such as SAN . SAN may be a system area network such as FiberChannel InfiniBand among others that provides communication capabilities to the various components such as host systems and . Additionally the SAN may provide communication support with the memory system through a hardware interface shown in . In other embodiments environment may further include many other components such as other host computer systems other memory subsystems an I O controller to provide an interface connection to other networks such as the Internet among others.

As stated the memory system stores information for use by one of the host computer systems and . The memory system may be any of a number of different types of memory systems. The hardware interface is typically part of the memory system but may be separate. The hardware interface typically includes the controls for creating and maintaining a point in time copy of a logical unit of memory i.e. a LUN such as LUNs . Additionally the hardware interface typically communicates with the host computer systems and over network and is able to provide mapping information for stored data on the various LUNs. Importantly the subsystem provides the capability to create a point in time copy of information at the LUN level i.e. the system can create a point in time copy of a LUN. The subsystem may use mirror technology to create and or maintain a point in time copy or the system may work in conjunction with the hardware interface and or the host computer systems and to create the point in time copy upon request using other technology.

In an embodiment at least one of the host computers or communicates with the hardware interface and provides the ability to combine portions or extents of separate LUNs into volumes. Additionally the computer system may map more than one complete volume to a single LUN. Therefore applications running on the host computer systems may operate based on volumes of information which may be larger or smaller than the particular LUN for the given memory system .

In essence one of the host computer systems such as system requests the creation and or transportation of one or more volumes of information. Once requested another process within the same computer system or potentially a process within another host computer system determines which LUNs need to be copied and which portions of those LUNs need to be transported or surfaced on the receiving system such as system . Using this information the memory system is instructed as to which LUN s to copy. Upon receiving the copies of the LUN s the necessary portions of the various LUN s are combined with reconstruction mapping information as well as any other information that the receiving system requires in order to use the copy of the volume. Once surfaced on the second computer system system can use the point in time copy to perform backups query resolution or substantially any other function that requires a copy of a volume of information.

As an example an application operating on a first host computer system may request the transfer of its data to another system to be backed up onto archival media . Upon receiving the request the system creates a point in time copy of two LUNs. The volume of information actually required in this example however only needs portions of each of the two LUNs. The system only operating at the LUN level provides copies of both LUNs to the requesting system. The requesting system packages the two LUNs for transport by creating a self contained description of the application data including where that data resides how that data is to be restored and the description of what physical resources need to be brought on line to get to the application data.

The receiving system receives the self contained description and is able to reconstruct all the elements of the volume including the mapping from the original volume to the copied volume even after the copied volume is transported to another machine. Additionally only those volume s that were requested for transport are surfaced on the receiving machine. For example suppose several volumes are created on a single LUN and only one of them is requested for copy and transport. Since the entire LUN is copied the portions that are not part of the volume are marked as hidden such that when the point in time copy is imported on the receiving system only the requested volume is surfaced. The other volumes although they appear on the LUN remain hidden.

A computer system that may represent one of the host computer systems such as shown in which communicates with other host computer systems such as system through the network fabric in accordance with the present invention is shown in . In its most basic configuration computing system is illustrated in by dashed line . The system has at least one processor and a system memory . In other embodiments the system may have more than one processor.

In addition to the components illustrated as the system may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by system . Any such computer storage media may be part of system . Depending on the configuration and type of computing device memory may be volatile non volatile or some combination of the two.

System may also contain communications connection s that allow the device to communicate with other devices such as other the other host computer system or the RAID System shown in . Additionally system may have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

Computer system typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by system . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media as described above includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

In an embodiment the requestor module relates to a computer application or process that requests that one or more point in time copies to be made of one or more original volumes. In one particular embodiment the requestor is a backup application program that is used to store a copy of original volumes onto another disk or medium. As shown in the requestor module communicates a request to the point in time copy interface . The request may include one volume to copy or the request may include multiple volumes. In one embodiment the requestor also requests that the copy be made available for transport across the network yet in other embodiments the network may automatically prepare the copy for transport.

Although described as single request in a particular embodiment the requester module may make a first request to establish a set of volumes to be copied. In return the point in time copy interface may return a unique identifier such as a GUID global unique identifier . The requestor module may then send multiple messages indicating which volumes should be added to the set identified by the GUID. Following the addition of volumes to the set the requester module initiates the copy process. Typically the set is fixed at the invocation of copy process such that new volumes cannot be added later. In a particular embodiment only 64 volumes may be included in the point in time copy set. However in other embodiments there are no limits on the number of volumes that may be included in a particular set or the number of copies of an original volume that may be requested.

Additionally the requestor application may include one or more writer modules such as writer modules . In such an embodiment the writer module actually interacts with the point in time copy interface in order to create a snapshot. The writer is responsible for quiecing writes to a data store used by the requestor for the period of time that the point in time copy is actually materialized. In addition the writer interacts with other requestor modules not shown to describe what is to be copied e.g. backed up as well as annotate a backup components document to facilitate the restoration of data that is copied. Exemplary writer modules may include a SQL Server Writer. With respect to the SQL Server Writer module it will cause the storage system to quiesce writes for the period between freeze and thaw i.e. the time periods before a point in time copy is created and after the point in time copy is created respectively.

The request made by requester is conducted to point in time copy interface module . In an embodiment the interface module is on a host computer system such as system or or distributed throughout the system shown in . The point in time copy interface module receives the request parses the request and then instructs a provider to create a point in time copy. The interface module in an embodiment provides a layer of abstraction between the provider and requester such that the provider is not required to understand volumes or other concepts used by the requester . In essence the point in time copy interface intercepts requests from the requestor and instructs the provider accordingly.

The point in time copy interface layer also constructs a backup metadata document based on information provided by the requestor and potentially by the writer . As part of the document the layer includes a point in time copy description based on the original set of volumes and information received from a provider as to the set of LUN copies created for each point in time volume copy.

The provider receives instructions from the point in time copy interface to create a point in time copy. Upon receipt the provider communicates with a storage subsystem to actually create a point in time copy of at least one LUN. In essence the storage subsystem may have several physical disks that may be logically divided into separate units each having a unique number such as LUNs and . The provider causes the system to create at least one copy of one or more particular LUNs such as copies and . The provider may describe the mapping between the set of LUNs for each original volume in a point in time copy set as well as the copies of the LUNs created for each point in time volume copy. Additionally the provider may further assist in surfacing LUN copies when those copies are transported to another computer system.

In a particular embodiment the provider is a hardware provider consisting of a user mode component that works in conjunction with a hardware storage adapter or external storage subsystem and intercepts access requests e.g. I O requests in hardware. Importantly the provider controls the subsystem to generate the point in time copy of a LUN. Typically hardware providers implement the at least two interfaces such as IVssProviderCreateSnapshotSet and IVssHardwareSnapshotProvider interfaces. The first interface is common to all providers and implements the snapshot state sequencing. The second interface is specific to hardware providers and operates on a LUN abstraction. More details of these and other interfaces that may be implemented along with methods that may be used in accordance with one embodiment are detailed in the attached Appendix A.

Additionally providers may be implemented as COM components and called out of process by the layer . Providers use provider specific mechanisms to communicate with the host adapter or external RAID storage subsystem that instantiates the snapshot LUNs. In using the providers there may be no need for any extra kernel mode components to perform the control of the storage subsystem .

Hardware providers may support copy on write or plex full mirror copy copy techniques. Hardware providers support transportable point in time copies to allow movement between different computer systems on the SAN.

Prior to the actual copy process the original LUNs may be accessed by a number of different modules such as writers which can read and write information from and to the different LUNs. Writers correspond to other processing modules that may be connected to the network apart from the requestor . In one embodiment during the actual copy process the original LUNs and cannot be accessed by the writers . In other embodiments however the original volumes are always visible to the system and can be written to yet most writers quiesce writes during the freeze and thaw periods to ensure consistency although this is not required. The process of synchronizing various read and write access requests is discussed in more detail in the U.S. patent application Ser. No. 09 912 615 filed Jul. 24 2001 entitled SYSTEM AND METHOD FOR BACKING UP AND RESTORING DATA docket number MS154762.1 40062.0093 US 01 incorporated herein by reference for all that it discloses and teaches filed concurrently herewith and assigned to the Assignee of the present application.

Once the copy of the required LUN or LUNs is made information is provided to the point in time copy interface module indicating that the copy has been made as well as other information such as the location or access information for the copies. The module combines the received information with mapping and other application data prior to transporting the information to a second computer system. In essence the module combines LUN information along with any mapping information to create a volume such as volume which represents a copy of the requested volume . The volume is then surfaced on an importer module .

The importer module relates to computer process or application that resides at least in part on a computer system apart from the computer system housing the requester module . Thus the information has been effectively transported from one machine housing the requestor to a different machine housing the importer module . Once imported the importer may reconstruct the volume and perform backup or other functions using the imported volume . Although the volume is considered to be transported the actual physical information may remain on the storage subsystem such that the transportation process merely involves passing location access and ownership information and capabilities from one computer system to another. Once transported the importer module may access and use the information in the transported volume to perform required functions such as backup or query process functions.

In one embodiment the point in time copy interface uses separate modules to perform various tasks. For instance a receive module may be used to receive the request from the requester . Additionally the receive module may perform other functions such as general communication between the interface and the requestor or the importer module or the various writers .

The interface layer may further include an import parse module for parsing a request. The act of parsing a request may determine whether the request is for creating a point in time copy importing a point in time copy among others. The parse module in an embodiment works in conjunction with a mapping module to determine and maintain information related to volumes and how the volumes are mapped to separate LUNs located on the storage subsystem. The mapping module provides the level of abstraction between a requestor and a provider such that the requestor can supply requests with respect to volumes without knowledge of how that information is mapped into the LUNs. Similarly the mapping module allows the provider to send and receive information based on the LUNs without knowledge of volumes or how the volumes are mapped into the LUNs.

The interface layer may further include a control module . The control module in an embodiment controls the interaction between various modules and may further control timing and sequencing of events. For instance the control module may operate in conjunction with a synchronization module to synchronize memory access requests originating from multiple processes such as writers requestor and importer . Synchronizing these requests and potentially pausing various requests allows the providers to create point in time copies without conflicts or missed updates.

An import module may be incorporated into the point in time interface . The import module packages information received from the providers relating to the location of a physical copy on storage subsystem . Using this information the import module generates a self contained description of the information to be surfaced on the importer as well as any other information such as where the information resides what other processes should be activated in order to access the information etc. Typically the import module may be located on a separate computer system from the requestor module e.g. the requestor module may be located on the host computer system and the import module may be located on the host computer system . However in alternative embodiments the import module may be located on the same computer system as the requestor module e.g. both modules and may be located on system or system .

Using these modules essentially two primary functions are performed by layer . First the function of constructing the point in time copy and mapping LUN information needed for importing the point in time to another machine is performed. Typically this is done on the host machine where the original volumes reside since the mapping is created when the original volumes are snapshotted. Second the import module takes in this description and interacts with the provider to expose the point in time copy LUNS that correspond to the volumes on the original LUNS.

In alternative embodiments the interface has many other modules such as a module not shown that specifically provides communication control between the providers and the other modules of the interface for example.

As described above a volume may be wholly located on a single LUN or on a portion of LUN or on portions of several LUNs. illustrates the concept of spreading an original volume across several LUNs and . In the example shown in original volume relates to a logical unit of memory as viewed by a host computer system such as system shown in . The host computer system may or may not understand the mapping of original volume across the several LUNs. In many cases the host computer system understands LUNs and volumes but the applications running on the host computer system typically do not understand or operate in terms of LUNs. Instead the applications operate on files in a file system that is implemented on top of a volume which may be composed of portions of one or more LUNS i.e. a portion of continuous memory space known as volume . The interface layer respectively provides mapping functions to spread the volume across the various LUNs.

The LUNs such as LUN LUN and LUN N exemplify the numerous LUNs present on a storage subsystem. Each LUN comprises multiple portions or extents such as portions and . Of course there may be many other portions included in a particular LUN. When copies of the LUNs and are created all the portions of the LUN are copied into the point in time copy. Sometimes portions of a LUN are copied but are not necessarily part of the original volume and are therefore not part of the copy of the original volume .

As an example assume that volume is mapped to the three volumes and . However in this example volume does not include portions on LUN or portion on LUN N . When a point in time copy is created all portions of each LUN is copied including portions and which correspond to portions and on copies and respectively. However prior to creating the point in time copy the portions and are marked to indicate that these portions should be excluded from the copy of the original volume . The actual markings on and are represented by marks and . Following the actual point in time copy process since the process copies the LUNs relatively exactly the markings and appear on the extents and of LUN copies and . The actual markings on and are represented by marks and . The markings and provide the necessary information to indicate that these extents and should be hidden or removed from the copy of the original volume . The types of markings may vary but the interface layer such as layer shown in recognizes the markings so as to exclude the portions.

In an embodiment the provider in conjunction with the subsystem provides the state necessary to support not only the access to volumes on point in time copy but also the tagging or marking of a portion of a LUN as read only and or hidden. The state is on the hardware LUN and travels with the LUN. Moreover the state is preserved across boot epochs and or device discovery. In a particular embodiment the layer manages the state of these read only or hidden portions.

Once receive operation receives the request to create a point in time copy for a volume or a set of volumes resolve operation resolves mapping of volume information into LUN information. In the case where multiple volumes are being copied in an embodiment the resolve operation may begin resolving volume LUN mapping information as it receives each volume without waiting for the remaining volumes. In alternative embodiments however resolve operation may wait until all volumes have been requested.

Resolve operation determines which LUNs are required to be copied. In an embodiment the resolve operation may communicate with the one or more providers to determine whether the requested LUNs are supported and which provider supports those particular LUNs. With respect to hardware providers the provider is presented with the information about the set of LUNs used to construct the volume and the hardware provider returns an indication as to whether the volume is supported or not by indicating whether those LUNs are supported. This determination should be all or nothing i.e. if one LUN is not supported then the volume cannot be copied. Also in an embodiment the same hardware provider must support all LUNs contributing to a specific volume. In this embodiment the hardware provider may also augment any LUN information that may be useful to either the requestor or the interface layer such as layer . For example the LUN information may be augmented with an interconnect address or the like.

Following the resolution of volume and LUN information operation synchronize operation communicates with various other writers if there are any that a point in time copy is going to be created. Synchronize operation may simply instruct other writers to stop writing and wait a predetermined time period to allow existing access requests to complete before proceeding. In other embodiments other methods may be used to effectively communicate with the writers such that the writers do not attempt to access or modify a volume of information while a copy is being made. Preventing access during the actual copy process eliminates issues of missed updates or inaccurate point in time copy information.

Additionally during the synchronize writers operation an indication may be sent to a provider that a point in time is going to be requested. That is the hardware provider supporting the LUNs of the volume to be copied is notified that a copy of the volume is to be made and which LUNs should be copied. However the notification indicating an upcoming point in time copy operation allows the provider time to prepare for the actual point in time copy process.

Following synchronize operation mark operation marks in one embodiment all volumes on all LUNs that are being copied as hidden and read only. In alternative embodiments portions of original LUNs that are not associated with requested volumes may be uniquely marked. The hardware provider exposes marking capability relating to read only or hidden portions of LUNs. Using this capability mark operation marks unassociated LUNs as hidden. In other embodiments other methods may be used to identify those portions of LUN copies that are not associated with a volume to be transported. In some cases however a requested volume may be placed entirely on one or more LUNs such that each portion of each LUN copy is associated with a copied volume. In such a case mark operation may not be necessary. That said however the mark operation may be necessary for other reasons. For example the mark operation may be used to mark the point in time volumes as read only. Additionally the import algorithm discussed below in conjunction with relies on looking for volumes marked as hidden in order to find the point in time volumes such that mark operation may be necessary when implementing such a search algorithm.

Mark operation occurs prior to the creation of a point in time copy e.g. operation discussed below. The purpose of this requirement is that most storage subsystems do not allow the marking or modification of a point in time copy once it has been created. Thus the original volumes that are affected are marked as read only and hidden which will cause all copied volumes that are surfaced on the receiving machine as read only and hidden. The mark or tag may be implemented using hidden sectors on MBR Master Boot Record disks or operating system software specific bits in the partition header entry on GPT GUID Partition Table disks. When marking occurs before the creation of the point in time copy then the markings carry over once the copy is made such that point in time copies will include the proper markings. Additionally an extra step of removing the markings from the original volumes may also be required in this case.

Upon completion of mark operation instruct operation instructs the provider to create the point in time copy of the associated LUNs. Essentially instruct operation relates to the actual creation of the point in time copy of the LUNs associated with requested volume. Instruct operation may comprise a series of different acts as discussed below in conjunction with . Following instruct operation the actual point in time copies of the associated LUNs exist on the subsystem such as system shown in .

Once the instruct or copy operation has completed obtain and store operation obtains information from the hardware provider relating to the point in time copy set including the copied volumes LUN mappings and information as to how the volumes are located on the LUNs. The hardware provider is sent information relating to the original volume and requested to construct corresponding information related to the point in time copy of the LUNs. Upon obtaining the information operate and store operation stores the information into a backup components document such as the sample document shown below in Appendix B. In an embodiment the document is an XML document containing original LUN information new point in time copy LUN information and identifications for the disk extents for each volume in the point in time copy set. The backup components document may then be used at a later time to surface the copied volumes on the second machine. In one embodiment a surfaced or exposed point in time copy is accessible in the Microsoft WINDOWS operating system namespace via drive letter mount point volume device name and or network share.

With respect to a particular embodiment in order to keep track of the mapping from the original volume to the point in time copy volume a SNAPSHOT SET DESCRIPTION XML element appears in the backup components document and describes all properties of a point in time copy set i.e. a set of volumes copied at the same point in time . In particular it contains information about the physical layout of the original volumes as well as the physical layout of the snapshot volumes. Additionally the physical layout of the volumes is described in terms of a LUN MAPPING XML element. There is an array of LUN MAPPING elements for each volume in the point in time copy set. The LUN MAPPING element consists of three components e.g. a source LUN INFORMATION target LUN INFORMATION and a DISK EXTENT array. The source LUN INFORMATION describes the physical characteristics of the original LUN the destination LUN INFORMATION describes the physical characteristics of the destination LUN and the DISK EXTENTS describes what contiguous portions of the original LUN are occupied. The LUN INFORMATION contains enough information to identify the LUN and includes such information as the product id serial number vendor identification as well as addressing information used to find the LUN on the SAN.

The SNAPSHOT SET DESCRIPTION is built by snapshot service with cooperation from the snapshot provider and is stored in the backup components document. When the requestor for example the backup application requests that the point in time copy be surfaced on another machine the SNAPSHOT SET DESCRIPTION is extracted from the backup components document and is used to obtain access to the target LUNS as well as reconstruct the mapping from the original volumes to the point in time copy volumes that are surfaced. The mapping is generally necessary to find where a corresponding file as specified in the backup components document on the original volume is to be found on the point in time copy volume.

In a particular embodiment the creation of a point in time copy relates to the creation of a point in time copy set which involves copying multiple volumes. Thus a point in time copy set relates to more than one volume of information being copied relatively simultaneously i.e. each volume copy of the point in time set having the same point in time characteristic. The layer manages the process of creating a point in time copy set the process shown in .

Initially flow begins as receive operation receives a request to add a volume to the set of volumes. As discussed above the requester module e.g. may request that more than one volume be included in the point in time copy process. In one embodiment the requestor sends a command to the interface layer indicating that a set of volumes are to be copied. In such a case the requestor then receives multiple requests each indicating that a new volume is to be added to the set and which volume to add to the set. Operations through described below relate to the acts involved with establishing the set of volumes to be included in the point in time copy.

Upon receiving a request to add a new volume to the set of volumes determine operation determines the set of LUNs that are used to compose that new volume. The information may be gleaned from information describing the volume or referenced elsewhere in the system. In an embodiment the LUNs are determined by calling a module such as IOCTL VOLUME GET DISK EXTENTS which invokes the volume manager to describe which drives are used and which ranges of bytes on each drive are used. There is a one to one mapping between physical drives as seen by the operating system and LUNs exposed by the storage subsystem .

Next the first hardware provider is identified at identify operation . Using the LUN identification information determined at operation the first hardware provider is asked whether that hardware provider supports those LUNs at ask operation . I.e. operation determines whether the identified provider supports the LUNs for the new volume being added to the set of volumes. In an embodiment the provider is called using AreLunsSupported wherein the call includes the set of LUNs. The provider returns an indication as to whether it can create a point in time copy for all the LUNs identified in the call.

If the provider can create a point in time copy of all the LUNs identified in the call then the provider will return an indication to that effect. In such a case flow branches YES to instruct operation . Instruct operation instructs the provider to begin preparations for those LUNs to be involved in a point in time copy process. In one embodiment instruct operation calls the provider with BeginPrepareSnapshot wherein the set of LUNs is also provided in the call. It is contemplated that at this point the hardware provider should begin the process of creating the snapshot or point in time copy. In particular the provider may respond to the call by allocating resources for the point in time copy and by doing any work that can be done in advance of point in time copy creation. Typically for a provider that supports mirrors the provider should create a mirror and begin syncing the mirror especially if a mirror does not already exist for each LUN.

Although it is contemplated that the hardware provider may begin doing work to prepare for the point in time in alternative embodiments the instruct operation may simply provide an indication that at some point a point in time copy process will be conducted and the provider will be involved. Depending on the hardware provider such an indication may or may not be used to perform any number of activities in order to adequately prepare for the point in time copy process.

However if the provider cannot create a point in time copy of all the LUNs in the call then flow branches NO back to identify operation which identifies the next hardware provider. If the next provider can create a point in time copy of all the LUNs in the call then flow will branch YES to instruct operation . However as above if the next provider cannot support the LUNs then flow will branch again back to identify operation . In essence each of the various providers may be called in order to determine which one supports the LUNs associated with the new volume. If no provider is located that can create a snapshot for all the LUNs in a particular volume then that volume is not added to the set. Essentially if no hardware provider such as providers is found then a software snapshot provider is used instead. However since software providers will not support transportable snapshots the outcome is the same i.e. if no hardware provider is found then the point in time copy will not be able to be made on that volume. Additionally the requestor is notified of that the volume has not been added to the set.

In one embodiment a singular provider must support all LUNs in the call in order for the volume to be added to the set. In alternative embodiments however volumes may be split across different providers. However it should be noted that such an embodiment requires additional processing to handle the situation where one provider succeeds at one step in the process but another provider fails. The interface layer may communicate with the various providers to handle such a situation.

Following instruct operation determine operation determines whether there is another volume to evaluate. In essence operations to repeat for each volume that is to be added to the set. When another volume is to be added to the set flow branches NO back to receive operation . However when there are no more volumes to be added to the set then flow branches YES to receive operation . The requester such as requestor may control whether there are more volumes to be added to the set. Hence when no more volumes are to be added to the set the requester may send a close volume set command or might send a request to create the point in time copy. Alternative embodiments may include other means by which to indicate that no more volumes are to be added to the set.

Once all the volumes have been added to the snapshot set then receive operation receives a request to create the point in time copy set. In an embodiment the requestor indicates that the point in time copy set should be created.

In order to create the point in time copy set each provider participating in the point in time copy set is called with a command to end preparations at call operation such as with an EndPrepareSnapshots command. In an embodiment this command tells the provider that it should be ready to create snapshots for each LUN that it had previously received in a BeginPrepareSnapshot call at a moments notice. If the provider is syncing mirrors then the mirrors must be completely synced before this call returns.

Following call operation mark operation marks each original volume in the set as hidden and read only. Similarly if multiple volumes are on the LUN then mark operation marks all other volumes as hidden and read only. It is important that the marking process occurs prior to the creation of the actual point in time copy since typically once the point in time copy is created the point in time copy LUNs are not visible to the system and cannot be modified.

The purpose of steps and relates to the ultimate goal of having the point in time copy volumes marked as hidden and read only. In order to achieve this goal the process takes advantage of the fact that the point in time copy volumes are relatively exact copies of the original volumes at the time that the point in time copy is created including the hidden and read only bits. Thus setting the hidden and read only bits on the original volumes propagated such a status to the point in time copy volumes. In an embodiment the marking is done using a mechanism called RevertOnClose. Using the RevertOnClose mechanism indicates that when the interface layer is done with the original volumes their markings revert to their original state e.g. visible and not read only. In addition if a crash were to occur the volumes would automatically revert to their original state prior to being marked as hidden and read only. Typically however the reversion occurs after the point in time copy is created so that the original volumes revert to their original state but the point in time copy volumes do not i.e. they remain hidden and read only.

Following the marking operations and instruct operation instructs the writers e.g. writers to prepare for the point in time copy process. In one embodiment the writers are called with PrepareForSnapshot. Next the instruct operation instructs the writers e.g. using a Freeze command to stop writing to any volumes on which they have data. Instruct operations and provide the writers with the time to finish writes that have been started and to cache any new writes that are to occur. The communication between the writers and the interface layer in this manner results in fewer lost updates and other conflicts.

Once all writes are frozen instruct operation instructs the providers to pre commit to the upcoming point in time copy process. Pre commit operation essentially relates to a communication between the interface layer and the provider to determine whether the provider is prepared to make the point in time copy. In an embodiment the pre commit phase may be more complicated. That is the pre commit phase as well as the post commit phase described below bracket the creation of the point in time copy process which is typically a very short time frame e.g. 30 seconds. Bracketing the point in time copy process allows the provider time to do any special short term processing either prior to the creation of the point in time copy during the pre commit phase and or following the creation of the point in time copy for post commit phase. For example suppose that a provider needs to lock or prevent certain operations e.g. creation and deletion of LUNs during the short time period that the point in time copy is being created. Using the pre commit and post commit operations these preparations can be made. Furthermore the actual time needed for pre commit and post commit is often shorter than other preparation time windows e.g. freezing writes.

Next suspend operation flushes and suspends all writes to all volumes participating in the point in time copy set. In an embodiment a point in time may be chosen after which no further writes will reach each volume until the point in time copy is either created or aborted.

Following suspend operation instruct operation instructs the providers to actually make or instantiate the point in time copy. This instruction may also be referred to as a commit operation and may involve the providers being called with a command CommitSnapshots. Instantiating the point in time copy may be done in many ways such as by breaking the plex in a mirror configuration. At this point in time each participating provider must make sure that each point in time copy LUN is a relatively exact copy of the original LUN and that no further changes to the original LUN are reflected in the point in time copy LUN.

Once the point in time copy has been created allow operation allows writes to proceed. In essence the original volumes may now be modified with the pending writes that were earlier suspended. Since the provider does not allow the modifications to pass through to the point in time copy the system may allow the writes to proceed without concern for the point in time copy.

Additionally a post commit operation may effectively call the providers with a PostCommitSnapshots command. The post commit command indicates that the point in time copy process has been completed. As discussed above with respect to the pre commit phase post commit operation may be more complex and may actually provide time for the providers the time necessary to recover or revert back to the functional level existing prior to the pre commit phase .

Next thaw operation provides a thaw indication to the writers such as writers . The thaw command provides the writers with an indication that new writes may be send to the original volumes.

Following operation which involves the original LUNs get operation gets information related to the point in time copy LUNs. More specifically each provider may be called with a command GetTargetLUNs wherein the command includes an identification of the original LUNs. In response to this command the providers return enough information about the point in time LUN corresponding to the original LUN so that the point in time LUN can be imported onto another system in the SAN and so that the point in time LUN can be uniquely identified after it has been imported. In an embodiment the provider must return enough information in the VDS LUN INFORMATION such as serial number world wide name of the LUN or port port address on the storage box and vendor specific information that can be used to uniquely identify the LUN.

Following get operation store operation stores the information about the point in time copy including the mapping from original to target LUNs in the backup components document. The point in time copy creation procedure for the provider is complete at this point. If a failure occurs prior to store operation the provider receives an indication to stop the process e.g. an AbortSnapshots call allowing the provider to free up resources that have been allocated for the point in time copy.

Flow begins as retrieve operation retrieves the point in time copy information from the backup components document. An exemplary backup components XML document is attached as Appendix B. The backup components document provides information to reconstruct the volume on the second machine. In an embodiment retrieve operation uses the information in the document to construct an array of point in time copy LUN information.

Once the array of LUN information is constructed pass operation passes the information to the hardware provider responsible for the point in time copy volume. The provider information may also be included in the backup components document. In essence the provider is called to make the LUNs available at operation .

Following the passing of LUN information to the provider make operation makes the LUNs visible i.e. available. Typically make operation is performed by the provider. Making the LUNs available may involve unmasking the LUN at the storage subsystem and if possible filter accesses to the machine. Alternatively the provider may work in conjunction with the interface layer to rezone the switches at the network level.

Once the LUNs are available detect operation scans the subsystem for new and available LUNs i.e. the point in time copies of the LUNs. As new LUNs are discovered information from the backup components document may be used to determine which LUNs are associated with which original volumes in the case where multiple volumes have been copied. Additionally this information may be used to determine which portions or extents of each new LUN map to which original volume.

Upon discovering all new LUNs surface operation surfaces the new information on the second machine. In an embodiment surface operation captures the mapping information between original volumes and the point in time copy volumes so that mapping information can later be exposed to applications wanting access to the point in time copy. Once the surface operation has captured the mapping information one or more host computer systems can be located and mounted as described in more detail with respect to .

Prior to the beginning of flow the importer needs the backup components document that was returned when the point in time copy set was created in order to import the point in time copy set onto a second machine. The backup components document is in one embodiment an XML document so it can be transported as a simple text file between machines. The XML document is given to the interface layer which uses the document to extract the information needed to import the point in time copy set.

Flow begins with determine operation which determines the set of point in time copy LUNs. That is the set of point in time LUNs is determined using the backup components document.

Next the LUN information for these point in time copy LUNs is constructed and the hardware provider that created the point in time copy is called at call operation with the set of point in time copy LUNs that were created by that provider. In an embodiment the call relates to a LocateLuns call and in response to this call the provider must make all the point in time copy LUNs visible to the machine where the point in time copy set is being imported.

In a particular embodiment the process of making the LUN visible is done during place operation which places the LUNs in the same zone as the importer and also unmasks those LUNs at the storage subsystem so that they are visible to the importer system. However in other embodiments other methods may be used to make the LUNs visible on the new machine. Also it should be understood that a single provider may only be able to make a subset of the entire LUN set visible. In this case only those point in time copy volumes that are fully contained on the LUNs that are made visible to the importing machine will be imported.

Following place operation test operation determines whether more providers need to be called. That is since a point in time copy set may involve multiple volumes created by multiple providers each of the participating providers need to be called with their respective sets of LUN information. Consequently steps and are repeated until all participating providers have been called.

Next detect operation detects any new LUNs. This operation is similar to operation described above in conjunction with . In a particular embodiment however the detect operation involves performing a SCSI rescan in order to determine which new LUNs have been made visible within a zone.

Upon detecting a new LUN the new LUN is matched at match operation against information identifying point in time copy LUNs. In a particular embodiment the process for matching a new LUN with a point in time copy LUN is shown and described with respect to discussed below. In essence each new LUN that has been discovered is matched with identifying information from the backup components documents such that the interface layer not only has access to the LUN but also can map the new LUN to an original LUN.

Following match operation the coordinator or interface layer determines at determine operation which point in time copy volumes should be imported based on the set of LUNs found during the detect and match operations and respectively. That is assuming all the LUNs for a particular volume are found and matched correctly then that volume may be imported. If however all LUNs for a particular volume are not found then that volume cannot be imported.

Next check operation checks to see whether there are more LUNs that need to be located. Check operation essentially determines whether other LUNs identified in the Backup Components Document need to be discovered but have yet to be discovered. For each iteration through the loop one or more new LUNs may be discovered. As discussed below with respect to another loop may be used to cycle through and match the various LUNs discovered for each iteration through process steps and . Typically all the LUNs are detected on the first iteration of the loop and but unfortunately limitations of the SCSI rescan operation e.g. the fact that it is particularly asynchronous multiple detection operations may be required.

If more LUNs need to be discovered then flow branches NO to detect operation . Otherwise flow branches YES to import operation . Alternatively a timer may be implemented to stop the detection process associated with operation and such that following a predetermined time flow branches to import operation even if some identified LUNs have not been discovered.

For each volume that is to be imported as determined by determine operation import operation imports the new volume onto the new machine. In operation the import module causes the volume manager for that volume to import those volumes onto the machine. The volume manager actually surfaces the volume. That is in many cases such as in the case of dynamic volumes which may have multiple LUNs the volumes are not automatically surfaced when detected by a machine. Instead the volume either has to have been created on that machine in the first place or has to be imported onto that machine using a volume manager which imports the volume. Upon importing volumes to the new machine the set of volumes on the machine include the point in time copy volumes plus potentially other volumes that have were located on the LUNs that contained the point in time copy volumes but were not necessarily included in the point in time copy set. It should be understood however that at this point all the point in time copy volumes and the other volumes on the point in time LUNs are marked as hidden.

Since there may be volumes in the imported data that is not wanted the next step is to determine which volumes should be unhidden as opposed to those that should be left hidden. In order to do so the first step involves identify operation which identifies the first hidden volume. Identify operation uses the capable of the system to list the set of hidden volumes on the system. Thus the first hidden volume may be identified.

Once identified determine operation determines the LUNs and portions of those LUNs that the identified volume appears. This information may be gleaned from the volume information itself. That is using the volume information appropriate system calls may be made to determine which LUNs the volume appears on and which portions of those LUNs are used by the volume.

Using the LUN and portion information related to the volume compare operation compares the hidden volume information with the backup components document to determine if the hidden volume is one of the point in time copy volumes. That is this information is matched with the information in the backup components document to determine if the hidden volume matches one of the snapshot volumes.

If compare operation determines that the volume is one of the point in time copy volumes then flow branches YES to capture operation which captures the volume name and associate the volume with the original volume that was used to create the point in time copy volume. In addition operation may further unhide the point in time copy volume.

Following capture operation check operation check to see if there are more volumes that need to be captured or evaluated from the hidden volume list. If not then flow branches YES to end operation which ends flow . If so however flow branches NO back to identify next hidden volume operation . Similarly if compare operation determines that the volume is not one of the point in time copy volumes then flow branches to capture operation . In essence operations and are repeated until all hidden volumes have been evaluated.

In a particular embodiment upon completion of flow the system has for each volume in the point in time copy set the name of the original volume the machine where the original volume resided when the point in time copy was created and the name of the snapshot volume. Additionally upon completion of flow each point in time copy volume is marked as visible and read only. Moreover any other volumes that were brought along with the point in time copy volumes because they resided on the point in time copy LUNs remain marked as hidden.

With this information the requestor can determine how to map from the original volumes in the point in time copy set to the point in time copy volumes in the point in time copy set. For example suppose that the requestor is a backup application and it was backing up the contents of drive c on the original machine and the point in time copy volume materialized as GLOBALROOT Device HarddiskVolume55 on the machine where the import is done. The backup can substitute GLOBALROOT Device Harddisk55 for c for each file being backed up to extract the corresponding file from the point in time copy volume. GLOBALROOT is an all caps symbolic link but a case insensitive open would succeed with a lower or mixed case GlobalRoot. 

Following send operation receive operation receives the additional information about the LUN from one of the providers. That is once a provider indicates creatorship of the LUN it fills in the VDS LUN INFORMATION and sends it back. Upon receiving the information each point in time copy LUN as determined by GetTargetLuns when the point in time copy was created is matched at match operation against the LUN information for the newly arrived LUN. If the LUN information matches then it is known that the LUN is an appropriate target LUN.

Next check operation checks to see if there are other new LUNs that have been discovered that need to be evaluated i.e. whether this is the last LUN. If so then flow branches YES to end operation . Otherwise flow branches NO back to operation to restart the process of evaluating another LUN against the GetTargetLun list.

Initially evaluate operation evaluates the set of point in time copy volumes to determine which volumes will remain in the set following the deletion of the one predetermined volume. In this case the point in time copy set includes more than one volume and evaluation step is used to identify the remaining or other volumes in the set.

Upon identifying the remaining volumes determine operation determines or compiles a list of LUNs used by the point in time copy volume that is about to be deleted. These LUNs may be determined from the volume mapping information or other appropriate system calls.

Next evaluate operation identifies the first LUN in the list of LUNs used by the point in time copy volume that is about to be deleted. Operation essentially starts a loop that evaluates each LUN in the list to determine whether the LUN can be deleted because no point in time copy volume resides on the LUN once the current point in time copy volume is deleted. Upon identifying the first or next LUN in the list determine operation determines if the first or next LUN is being used by any of the point in time copy volumes that will remain following the deletion of the volume as determined above in operation .

If the first or next LUN is not being used by another point in time copy volume in the set then the LUN may be deleted. Free operation frees or deletes the LUN. In order to free the LUN a call to the hardware provider may be made such as with a OnLunFree call that specifies the LUN to be freed. Note that when all the point in time copy volumes in a point in time copy set are deleted then all the LUNs used by that point in time copy set are also freed.

Following free operation test operation tests the LUN against the list of LUNs to be evaluated to determine if the LUN is the last LUN in the list. If not then flow branches back to evaluate operation where the next LUN in the list is identified and evaluated to see if it can be deleted as before. If the LUN is the last LUN in the list then flow branches YES to send operation .

Send operation sends once all LUNs that can be deleted are freed a notification to the volume managers for those LUNs that those LUNs have been freed. This allows the volume manager to remove or modify state information about those LUNs. Following send operation flow ends at end operation .

Referring back to operation if the first or next LUN being evaluated is being used by another volume in the point in time copy set then flow branches YES to operation . Operation indicates that the LUN is still in use and should not be freed. Operation may further provide a message back to the system indicating that the LUN may not be freed but providing the message may not be necessary in some embodiments. Following operation flow branches to test operation which as described above tests the LUN against the list of LUNs to be evaluated to determine if the LUN is the last LUN in the list. If not then flow branches NO back to evaluate operation where the next LUN in the list is identified and evaluated to see if it can be deleted as before. Otherwise flow branches YES to send operation as described above.

Using the system and method described above content can be effectively transported from one machine on a SAN to another. Indeed the above system and method effectively enables a protocol where the point in time copy provider e.g. provider shown in is able to create point in time copies using only the physical components it controls i.e. LUNs and not having to understand anything about the volumes file systems or applications running on those physical components. Moreover the above system and method provides the ability to describe a LUN in such a way that it can be transported and discovered on the machine to which it is transported without additional processing. The method also allows for combining multiple volumes into a copy set and transporting the set as a group. Further the receiving machine does not see information on LUNs that are not associated with volume it is receiving.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

The Hardware Point In Time Copy or Snapshot Provider interfaces are IVssAdmin IVssProviderNotifications IVssProviderCreateSnapshotSet and IVssHardwareSnapshotProvider.

Snapshot providers can be frequently loaded and unloaded. To detect this providers can provide an optional Notification Interface IVssProviderNotifications. Implementation is optional providers only need to implement this interface if it is useful for them to catch these events.

The IVssProviderNotifications interface is implemented by the provider and is used by VSS to notify the provider about specific events. Every provider must support this interface. This interface must be accessible using IVssHardwareSnapshotProvider QueryInterface.

All providers must support this interface the interface is common to software and hardware providers.

Each hardware provider must implement the IVssHardwareSnapshotProvider interface. The COM class that implements this interface is specified by the administrator in IVssAdmin RegisterProvider at registration time.

The ProviderId is a GUID that uniquely and persistently identifies the Provider. For example the volsnap.sys provider is defined as 

Once defined the ProviderId should remain the same this is true even when the software revision is updated. The only reason for changing a provider GUID is when the provider functionality changes and both providers might reasonably be active on the same system.

The IVssProviderCreateSnapshotSet interface contains the methods used during snapshot creation. All providers must support this interface the interface is common to software and hardware providers.

For all methods a successful return indicates that processing for any and all LUNs in the snapshot set was successful.

This method will be called once for the complete snapshot set. After this is called there will be no more BeginPrepareSnapshot calls. This method is intended as a rendezvous where the provider can wait for any snapshot preparation work to complete.

The PreCommitSnapshots method is called prior to snapshot commit. It should be used to prepare all snapshots in this SnapshotSet for committing by the subsequent CommitSnapshots method. While this is called applications have been frozen but the I O subsystem is not yet blocking filesystem I O so the provider should attempt to minimize the amount of time spent in this method.

The CommitSnapshots method is called at the defined instant at which the snapshots should be taken. For each prepared LUN in this snapshot set the provider shall perform whatever work is appropriate in order to persist the point in time LUN contents While this method is called both applications and the I O subsystem are quiesced so the provider must attempt to minimize the amount of time spent in this method. As a general rule a provider should spend less than 1 second in this method.

In addition since the I O system is quiesced at this time the provider shall take great care not to initiate any I O that may deadlock the system for example debug tracing I O by the method or by any methods it has invoked Note that VM oriented file or paging I O will not be frozen at this time .

The PostCommitSnapshots method is called after all providers involved in the snapshot set have succeeded with CommitSnapshots and VSS has released the Lovelace lock on the system I O. Note that applications are still frozen at this time.

This method is an opportunity for the provider to provide additional cleanup work after the snapshot commit. Note that lSnapshotCount should not be needed by hardware providers but is necessary for software providers.

The AbortSnapshots method aborts prepared snapshots in this provide. This includes all non committed snapshots and pre committed ones.

The IVssHardwareSnapshotProvider interface contains the methods used by VSS to map volumes to LUNs discover LUNs created during the snapshot process and transport LUNs on a SAN. All hardware providers must support this interface.

VSS initializes the fields from the SCSI Inquiry Data plus the Inquiry Data Vital Product Data Pages 0x80 and 0x83 for all LUNs that contribute to a snapshots set. The provider initializes any interconnect specific addresses for any such LUNs and or corrects any omissions.

For all LUNs created by committing a snapshot the provider initializes all fields. This allows the newly created LUNs to be located by Windows software both on the original machine and or any other machine in a SAN.

This method will be called for each snapshot that is added to the snapshot set. Prior to invoking this method VSS determines the LUNs that contribute to the LUN.

For a specific volume each LUN can contribute only once a specific LUN may contribute to multiple volumes. VSS does no tracking of LUNs. The same LUN will never appear more than once in a single call but may reappear on subsequent calls. Consider the case of two snapshot volumes D and E . D is an extended volume contained on LUNS and . E is a simple volume contained on LUN . If both volumes are added to the same snapshot set LUN will appear on subsequent calls.

Prior to returning success the provider updates the VDS LUN INFO structure with the LUN interconnect address es and any additional information to ensure later recognition of the LUN. Additionally a rgwszDeviceNames parameter is provided to give the device name of the LUN allowing the provider to open the device itself if necessary.

This method will be called once after PostCommitSnapshots for the complete snapshot set. Identifying information for each newly created LUN is returned to VSS. That information must include not only the device attributes eg serial number but also any and all network addresses.

This method is called whenever VSS determines that snapshot LUN contains no interesting data. All snapshots have been deleted which also causes deletion of the volume . The LUN resources may be reclaimed by the provider and reused for another purpose.

Note that OnLunEmpty is called on a best effort basis. VSS invokes the method ONLY when the LUN is guaranteed to be empty. There may be many cases where the LUN is empty but VSS is unable to detect this. An example of this case is when a snapshot LUN is moved to a different host but not actually transported or imported by VSS. That LUN appears as any other LUN and volumes can be simply deleted via Disk Management without any notification of VSS.

This method will be called once when a snapshot set is transported between machines. The provider is responsible for any unmasking at the hardware and any necessary switch zoning. VDS LUN INFO passed to the provider is exactly that received by VSS at GetTargetLuns.

Immediately after this method completes VSS will perform any host based unmasking and invoke IOCTL DISK FIND NEW DEVICES. This causes any exposed LUNs to be discovered by PNP. Note that host based masking is a post Whistler feature.

This method will be called when information is needed about a particular Lun. The provider is responsible for supplying this information.

