---

title: Managing information display
abstract: Systems and methods for managing information display include the ability, at least in one implementation, to receive a message indicating that the information of a resource is to be displayed and to form a user interface for displaying the resource information by defining a pane in which to display the information and selecting a renderer operable to render the information in the pane.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060832&OS=08060832&RS=08060832
owner: SAP AG
number: 08060832
owner_city: Walldorf
owner_country: DE
publication_date: 20070130
---
This patent application is a continuation of U.S. patent application Ser. No. 10 307 891 filed on Dec. 2 2002 now U.S. Pat. No. 7 191 410 the contents of which are hereby incorporated by reference.

The present application describes systems and techniques related to displaying information for example a system and method for managing information display.

A user interface offers a convenient way to quickly comprehend and move through resources in a repository. Typically user interfaces use a logical structure such as a hierarchical tree to organize the information in the repository for presentation to the user. The user can then expand and collapse the tree to observe resources. Furthermore the user can select a resource to obtain more information about it or specify that more or less information about a group of resources should be displayed. Additionally in some user interfaces resources are hidden if a user does not have permission to access them.

The present application teaches managing information display. The determination could be based on a user role a user viewing interest and or properties of a resource.

In one aspect a method and system for managing information display include the ability to receive a message indicating that information of a resource is to be displayed and to form a user interface for displaying the resource information by defining a pane in which to display the information and selecting a renderer operable to render the information in the pane.

In additional aspects a method and system include the ability to evaluate a property of a resource and a user context to select a renderer. In some aspects evaluating a property of a resource comprises evaluating its location in a resource hierarchy. In particular aspects evaluating a user context comprises evaluating a user role and a user viewing interest. In certain aspects a user viewing interest includes modifying resource content.

In some aspects a method and system include the ability to associate a resource with a resource class the class specifying resource properties to evaluate a property of the resource and a user context. In particular aspects associating a resource with a resource class includes in order of priority evaluating parameters contained in a message to identify a resource class examining parent resource type to identify a resource class and using default system settings to identify a resource class.

In additional aspects a resource comprises a plurality of resources and a method and system include the ability to select a controller operable to define a layout for organizing navigation through the resources information. In some aspects selecting a controller comprises evaluating a property of the resources and a user context. In certain aspects evaluating a property of resources and a user context includes associating the resources with a resource class the class specifying resource properties. In particular aspects associating resources with a resource class comprises in order of priority evaluating parameters contained in the message to identify a resource class analyzing settings of a parent resource to identify a resource class examining parent resource type to identify a resource class and using default system settings to identify a resource class.

In certain aspects a resource comprises a plurality of resources and a system and method include the ability to select a renderer for organizing the display of the resources information.

In some aspects a system and method include the ability to modify characteristics associated with a resource wherein a user interface is altered by the modification. In certain aspects a user interface is altered by having a different renderer selected to render the information in a pane.

In particular aspects a method and system include the ability to determine whether the resource has an associated action to determine if the resource has an associated action a label for the action and to render the label. In some aspects the label comprises a link a button or a hover menu. In certain aspects the method and system include the ability to detect an event related to selection of the action and to map the event to a command to perform the action. In some aspects the method and system include the ability to generate a new message to display information of a resource when the action has been completed. In certain aspects the method and system include the ability to modify the association between actions and resources so that the associated action is altered.

The present invention has a variety of features. For example in certain embodiments the invention allows information display to be determined dynamically. Thus user interfaces do not have to be determined a priori which should allow user interfaces to be readily modified. As a further example in particular embodiments the invention allows user interface configuration based on user role user viewing interest and or resource properties. Thus a user interface may be provided that is tailored to the user and or resource. As a further example in some embodiments the invention provides a single point of entry for users across a wide variety of systems of an organization. Of course some embodiments may possess none one some or all of these features and or additional features.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features may be apparent from the description and drawings and from the claims.

The systems and techniques described herein relate to managing information display. In particular user interfaces for displaying information of resources which could include structured or unstructured documents reports presentations may be managed based on resource properties user role and or user viewing interest the last two collectively referred to as user context.

In more detail user interface device includes a screen that is operable to display a user interface . Screen may be a cathode ray tube screen a liquid crystal display screen or any other appropriate type of device for displaying information. User interface may be a graphics based user interface a text based user interface or any other appropriate type of format for presenting information. In particular embodiments the user interface can receive input from a user such as for example the selection of an action associated with a resource. User interface device may also include any other appropriate type of devices for facilitating displaying information from server or receiving user input. Such devices could include network interface devices processing devices memory devices which could store the information and or logical instructions for manipulating the information for display and user input devices. In particular embodiments user interface device may operate as a client to server .

Communication network may include any appropriate type of devices for relaying information between logical components. For example communication network may include routers switches bridges repeaters and or transceivers. Furthermore communication network may use wires fiber optics wireless channels or any other appropriate type of medium. Additionally communication network may send information using packet switched and or circuit switched techniques. In particular embodiments communication network is the Internet and hence operates according to Internet protocols.

Server includes a display generator an abstraction layer and a service directory . In general server is a framework for information deployment. Server may use any appropriate type of transport protocol such as for example HyperText Transport Protocol HTTP or Wireless Access Protocol WAP for sending information and any appropriate type of user interface generation language such as for example HyperText Markup Language HTML Extensible Markup Language XML or Wireless Markup Language WML for generating a user interface.

In more detail abstraction layer is operable to extract correlate and or understand the information and logic in enterprise infrastructure . In accomplishing this abstraction layer may aggregate and classify the information. For example abstraction layer may use metadata to categorize documents into multiple taxonomies for browsing and or retrieval. In particular embodiments layer stores pointers to documents in a folder hierarchy which ensures nonredundant storage and allows access control to be tied to the roles of users. Service directory in turn stores information regarding a user of system . For example service directory may store information regarding attributes that a user possesses for a certain role. For instance a user that is a system administrator may be able to access and change all types of information in enterprise infrastructure but a user that is a content provider may only be able to access and change certain types of information in enterprise infrastructure . Furthermore service directory could store information regarding personal preferences of a user. Display generator is operable to determine how to present information to a user. To accomplish this display generator may when determining how to display information take into account 1 a user s role administrator casual user content provider or otherwise 2 a user s current viewing interest searching for information whether by key word natural language or otherwise updating information content modifying information structure or otherwise and or 3 resource properties the location of the information type of information content mime type extension and or otherwise. For example if a user is browsing through information the display generator may provide a hierarchical view of the information and allow the user to click through it but if a user is searching for a specific piece of information the display generator may provide a detailed searching tool possibly with Boolean search logic. As another example depending on the role that the user possesses more or less information may be available to the user. Furthermore display generator is operable to receive user input from user interface device and determine an appropriate response ignore execute function update user interface and or otherwise.

Display generator abstraction layer and service directory may include any appropriate type of volatile or non volatile electromagnetic or optical device for storing information. Furthermore display generator abstraction layer and service directory may store information and or logic for manipulating the information. Server may itself include any other appropriate type of devices for assisting in retrieving manipulating and sending information. Such devices could include network interface devices processing devices and storage devices. In particular embodiments server may be a Java 2 Platform Enterprise Edition J2EE Web server and may function as a portal.

Enterprise infrastructure contains resources which includes data and applications . Data could include folders documents files databases Web content business analytics or any other appropriate grouping of information whether structure or unstructured. The information itself could be technical papers presentations drawings calculation sheets and or on line discussions for example. Furthermore information could include information about data. Applications in turn contain logic that implements business processes. Applications may perform any appropriate function for a business process such as for example order entry order fulfillment demand forecasting supply chain management enterprise resource management and or human resource management. Such applications are commonly provided by companies such as SAP BAAN Peoplesoft and the like. The input to and or output from an application along with its functions are also information that may be displayed in a user interface.

Enterprise infrastructure may include any appropriate type of volatile or non volatile electromagnetic or optical device for storing resources . Furthermore enterprise infrastructure may include any other appropriate type of devices for assisting in retrieving manipulating and sending information. Such devices could include network interface devices processing devices and storage devices.

In particular embodiments server delivers user centric collaboration through unification which allows data and relationships to be accessed and traversed through a virtual metadata layer. Unification provides contextual navigation that greatly reduces the time it takes to resolve an event of which a user becomes aware. It does this by breaking monolithic applications into building blocks that an organization can combine into elaborate solutions. In certain embodiments unification is applicable to transaction and legacy systems. The transaction and legacy systems may be unified by unifiers from companies such as PeopleSoft Siebel Oracle Baan and SAP.

System has a variety of technical features. For example the system allows heterogeneous information in an information technology landscape to be displayed in a user interface which assists in the implementation of collaborative business process by allowing users to analyze information from disparate systems. For instance system may provide users with the ability to navigate across components of applications business intelligence sources documents and Web sites as if they were all part of one virtual application that is custom configured for the user. Moreover the information may be organized and provided efficiently. As another example the system allows information display to be determined dynamically. Thus user interfaces do not have to be determined a priori which should save administrative and coding time in developing user interfaces and should allow user interfaces to be readily modified. As a further example the system allows user interface configuration based on user roles user interest and or resource properties. Thus the system may provide an appropriate set of information and or controls based on the user s authorization. Furthermore the system may provide an appropriate set of information and or controls based on the user s current needs. Additionally the system may provide an appropriate set of information and or controls based on the information being examined. For instance the system may only offer cursory information about data that an end user is browsing and or a limited set of controls for observing the data while offering a content administrator detailed information about the data and advanced functions for its viewing and manipulation which could include editing structuring or any other appropriate function. In particular embodiments a content manager s user interface could be Explorer like through folders and document lists. As another example the system may provide different user interfaces for the same user who is browsing information in one instance and navigating through it in another instance. Browsing and navigating may provide the central user interface for gaining access to resources and manipulating them. As an additional example system may provide a single point of entry for users across a wide variety of systems of an organization.

In certain embodiments abstraction layer may also support collaboration which provides a common central place where distributed teams can work together for authoring and or review purposes. To accomplish this abstraction layer may conform to the Web Based Distributed Authoring and Versioning WebDAV standard for interfaces. Furthermore collaboration may take one of two forms synchronous or asynchronous. In synchronous collaborations users share live information online meetings and instant messaging providing two examples of synchronous collaborations. In asynchronous collaboration users work together on a non live basis threaded discussions document ratings workflow feedback and shared folders providing examples of asynchronous collaboration. In some embodiments collaboration extends beyond documents and other static information. For example users could collaborate on user interfaces created by another user adding comments altering it and or syndicating it.

Portion includes a screen flow engine a layout controller a collection renderer a resource renderer a layout provider a renderer provider and a command provider . Layout controller collection renderer and resource renderer are responsible for the layout and different levels of rendering within the user interface. Some configurations of the user interface may be valid for the whole company while others may be valid for a user on a folder level or for any other appropriate classifier. Generator may reuse layout controller collection renderer and or resource renderer in different formations of the user interface and a user may modify one or more of these allowing the user interface to be reconfigured.

In more detail screen flow engine is used as the outermost container for the user interface. Typically screen flow engine contains only one layout controller although it could contain multiple layout controllers in particular embodiments. In such cases screen flow engine could be a single composite control one that may hold other controls. In particular embodiments screen flow engine is the entry point for a Web Definition Framework WDF a framework used to control screen flow logic in which controls and panes are the elements used to build up screens and to handle event driven navigations between the screens to call a navigation user interface. Screen flow engine supports dynamic rendering rendering configured at runtime rather than at configuration time by being pre configured on the framework level and acting on behalf of any contained control. Furthermore screen flow engine consolidates parameters and is the anchor for dynamically extended screen flow definitions. The basic input to screen flow engine is a resource which may be a simple resource a real collection one having an resource identifier RID which must be unique within the system a programmatically created temporary collection one not being persistent in the framework or any other appropriate type of resource.

Layout controller is used as the topmost exchangeable container to define different layouts for navigation through resources. Layout controller may be responsible for the complete layout and rendering of the control allowing the implementation to be more or less generic from that point on. Layout controller may range from a simple hardwired set of a number of links to a complete framework like controller resembling the WDF architecture. The layout controller may be defined a priori selectable and or user developed.

To provide a high level of customizability system may include a default set of layout controllers that will allow for the exchange of rendering components on different levels. Note that generator may include several layout controllers and a user may change the whole screen layout by choosing the appropriate layout controller. To select which layout controller will be the first and outermost layout controller when multiple layout controllers are being used the corresponding class may be determined by looking up the needed information in the following priority 1 evaluate parameters continued in the URL or the initiating event which may be personal settings 2 look up specific settings of the parent resource folder settings for example 3 request class based on parent resource type and 4 use default settings.

A layout controller may itself contain other layout controllers for reuse reasons because a layout controller may be just a composite control. The basic layout however is predefined by the main layout controller and is not typically customizable.

Collection renderer is used within layout controller and is responsible for rendering a list of resources. Collection renderer controls the layout and functionality that does not belong to a single resource but to the whole list or some selected resources and renders information pertaining to that list such as for example checkboxes and functions for mass operations. Thus it defines the basic structure for the resource list such as for example a table a grid or other appropriate structure. The collection renderer may be defined a priori selectable and or user developed.

Note that layout controller may include several collection renderers. Also like the top level layout controller which can be exchanged by the basic concept of the navigation user interface framework a user may provide their own implementation for collection rendering. The selection of the necessary classes may be determined by the procedure mentioned above for the layout controller except for step two because parent resources do not provide any information here.

Resource renderer is used by collection renderer to render the resource specific parts of a list meaning information of the resource which could include the information in a resource and or information about the resource. As such resource renderer is responsible for the layout and functionality of a single resource s information. As a basic functionality the resource renderer may be able to render a standalone component as a default representation. When called from a collection renderer the resource renderer supports rendering of the available pieces of information such as properties actions icons and the like each component being rendered into the superior structure. The default rendering of a resource property may be performed by standard property renderers. Resource renderer may be defined a priori selectable and or user developed. Note that layout controller may include multiple resource renderers and a user may control the rendering of a resource by choosing the appropriate resource renderer. Additionally resource renderer may include a property renderer which is a helper class used within the resource renderer and possibly elsewhere to provide a consistent rendering for a property within the whole architecture.

Layout provider renderer provider and command provider are responsible for the mapping from configuration parameters to concrete instances of classes. Command provider provides a command class that encapsulates an action for a resource represented by one or more commands and the knowledge on how to present this action within the user interface including the whole screen flow needed for this action. In particular embodiments a command bundles a set of framework actions in a single class so that controls can carry out these framework actions with a single method call of the command. In certain embodiments command provider may provide a hierarchical list of commands. The commands could also encapsulate error handling and or precondition checks. For the layout of actions it has to be decided whether to use a link a button a hover menu or other appropriate activating device. The behavior after a user has selected the action however may be the same and some checks before rendering of the resource like permissions or locking may be done in the same way as well. This leads to user interface commands that do not care about the layout the tasks of the resource renderer or the collection renderer but encapsulate the needed labels screen flow and event encoding needed to get the mapping between event and user interface command with the commands needed to perform the action. In particular embodiments for example commands may be made more or less prominent depending on the tasks a user may perform. Layout provider and renderer provider may be factory design patterns that determine the necessary rendering classes based on user role user viewing interest and or resource properties.

To accomplish their functions layout provider renderer provider and command provider use a customization controller which is part of portion to determine the necessary classes rendering or command based on user role user viewing interest and or resource properties. Customization controller receives a request for a certain parameter key and checks its configuration sources location parameters personalization data global settings resource properties service and default settings in the illustrated embodiment for values of this key. It then returns the best fitting and highest in the hierarchy of configuration sources. Layout provider renderer provider and command provider then use the returned value to identify the wanted class and return a new instance of that class.

User interface commands are used by the resource renderer to support the rendering of actions. All events caused by such an action however may be handled by the user interface command itself. Screen flow engine may be able to instantiate the needed user interface command and to execute it when receiving an event without dispatching the event down to the control or the renderer that initially rendered the action. The event could be an HTML abstraction layer event such as for example a HyperText Markup Language Business HTMLB event. To perform mass actions for more than one resource at once a separate set of user interface commands is needed using their own labels screen flow and commands. Mass commands on a framework level may be provided in addition. Mass commands may be inherited in parallel to resource commands from the base command class.

Portion in turn includes customization controller location parameters personalization data global settings resource properties service and default settings . As mentioned previously portion provides customization of a user interface and also assists in forming the user interface. In fact in this embodiment portion provides customization of the user interface in different extend and on different levels. Some configurations may be valid for the whole company others may be valid for a user others may be valid on a folder level and others may be valid for any other appropriate classifier. Customization controller is responsible for merging settings from configuration sources location parameters personalization data global settings resource properties service and default settings in the illustrated embodiment. To accomplish this customization controller may hold several buckets full of key value pairs each stemming from the different configuration sources. Then whenever a request for a parameter arrives customization controller checks all buckets for entries of this parameter and returns the best fitting one. Resource properties service is responsible for mapping between different characterized resources and properties defined for these resources. In particular embodiments resource properties service provides a bag of properties for a resource with a certain location mime type extension and or resource type. In some embodiments resource properties service may be an Object Type Handler. Location parameters is responsible for returning the address such as a URL of a resource. Personalization data global settings and default settings contain information that may be used to configure a user interface.

Browsing and searching functionalities may be carried out with display generator . For example a pane with a screen flow engine is defined as the entry point when displaying a resource. Note that a pane may or may not be rectangular. Screen flow engine uses layout provider to retrieve a valid layout controller which is responsible for the further construction of the user interface. Layout provider may hold several controls to further delegate construction or it can construct all by itself. The contained controls or the layout provider can use collection renderer and resource renderer which are retrieved by renderer provider to construct the user interface. In certain embodiments screen flow engine does send parameterizations to be used by layout controller collection renderer resource renderer layout provider renderer provider and or command provider which may again send it to customization controller and in requesting information. The user can customize the user interface by changing the parameters of the configuration sources location parameters personalization data global settings resource properties service and default settings so that another layout controller and or renderer is called or by adding new classes that will be returned by layout provider renderer provider and or command provider which will result in a different construction of the user interface.

The renderer classes know how they want to group the elements they have to render icons texts properties and actions for example but they typically do not know things such as what icon is to be rendered what set of properties is wanted and which actions are to be displayed. For icons and properties the renderer classes may use dumb property renderers that return the matching icon or the property of the resource. Of course if one of the actions of the resource properties service is the type View which is normally used as link target when the resource name is rendered it may be necessary to introduce some kind of distinction between actions that are rendered within the resource display and actions that have to be rendered as an additional link next to the resource. When screen flow engine layout controller collection renderer and or resource renderer want to render actions which are functionality for resources they use command provider which will receive the valid configuration of the present resource user role and or user viewing interest from customization controller . Customization controller uses location parameters personalization data global settings resource properties service and or default settings to make this determination. Note that resource properties service may return actions defined for a resource but that the mechanisms of the resource action control may be used because it might be difficult to write large numbers of resource properties service XMLs and modify them every time a new repository service becomes available. The actions may have a user interface command class as attributes. In this case the renderer class calls the user interface command class with the given resource. The command class returns the link target including the location of the given resource that is fired when the user clicks the link or a False when the action is not valid for the given resource caused for example by missing permissions. If the renderer class is responsible for rendering a collection of things it may also ask the commands if they are mass operation enabled and get an additional target this time without the attached location. For mass operations the renderer class may render checkboxes and persist the user selection through multiple clicks and navigations and return this collection if a mass command is fired.

The activation of a link button or the like fires an event which could be an HTMLB event for example. The class defined within the event usually the control itself usually handles the event. A framework event is returned from a control after handling the fired event. The framework event is handled by the screen flow engine to find the next pane to show and to send data to receiving controls. In some embodiments of operation commands are used to bundle a set of framework actions in a single class so that controls can carry out multi stepped actions with a single method call of the command. Commands can also encapsulate error handling and precondition checks.

The user can customize the user interface by changing the resource properties service entries for the given resource to activate or deactivate actions or change the target class implementing their own render classes writing new user interface command classes that work with their services or change the way they work with the inherent services or implementing their own dumb property renderers which might make it necessary to configure the property renderers loaded by the renderer classes.

As mentioned before the user interface commands return link targets that should be fired when the user clicks a link. To unbundle rendering and logic the target links into the user interface command itself not into the renderer class. The command then carries out the action and returns a framework event or throws an exception possibly including the translated message. This frees the renderer classes from any on click methods. However for mass actions they should be able to return the selected resources. Also the screen flow engine or the controls of the layout controller may listen to user interface command fired events instantiates the user interface command and lets it carry out its action. It may also display the returned exception message. It might be a good idea to have a command manager running which holds all available commands and returns the command in question or routes the incoming targets to the matching command. This approach would take logic away from the screen flow engine layout controller and move it towards the package where the command manager and the commands are located.

In certain embodiments the actions are defined in command provider . They may consist of the action name the label text possibly translated into a resource property XML file and the command to call. They could also know if they are mass operation enabled and if so offer an additional label text. For the grouping actions they might belong to action type categories such as 1 File Operations with children copy delete move edit and link for example 2 Collaboration with children feedback discuss rate and send to for example and 3 Repository Services with children state management tdp and subscription for example. The child parent tree could be defined in an additional XML file. Command provider could then return a collection of action categories that allows a grouping of the actions by the renderer. Another possibility would be to have these children parent relationships with resource properties service XML files which would make it more flexible but require more typing.

The utility classes could be standard. However they may be static or non static render methods and enum style classes may be used to set the style of the utility class returns which might lead to no change in display if the utility class does not care about different styles. If everything is rendered through the utility classes and there is only one utility class to render a certain element the user can change one class and modify the appearance for all elements rendered by the utility class possibly requiring a factory for the utility class.

The user can customize the user interface by changing command classes to modify behavior changing an action category XML to add action to categories split categories in most wanted actions or more actions or do the same in a resource properties service XML or modify the utility class renderer to use different icons text sizes etc.

This embodiment of the invention has a variety of features. For example the features discussed for system are available. As another example the rendering may be determined at runtime rather than at configuration allowing more dynamic rendering. Moreover the system allows for dynamically deciding what actions are displayed forbade emphasized and or de emphasized for resources. As another example the user interface may be customizable by a user. For instance the user can select any of a variety of renderers or associations between resources and or actions and resource properties. Furthermore the user interface may be customizable for a user by altering personalization data for example. As a further example the separation of logic and layout may allow new services that do not require changes in the coding of the controls. As another example several layouts with the same functionality may be provided to choose from. As a further example the hierarchical mechanism may enable customization on different levels like company wide administrator level or user level or resource type repository wide or path wide. A variety of other features exist.

System may also provide a consistent user interface by using reusable combinable rendering objects. This approach also allows the addition of new rendering objects when new elements are added to user roles user viewing interest and resource properties. Of course the same concepts are also applicable when displaying actions that are available for displayed objects. This means that depending on the user role user viewing interest and or resource properties a different set of actions may be available to a user.

In other embodiments portion does not have to include all of the components illustrated for display generator . For example in certain embodiments layout controller and or collection renderer may be eliminated especially where there are not groups of resources to be displayed. As another example in some embodiments command provider may be deleted especially if no actions are associated with resources. In certain embodiments portion does not have to include all of the components illustrated for display generator . For example one or more of location parameters personalization data global settings resource properties service and or default settings may be deleted. Of course portion and portion may include other appropriate components.

Although user interface illustrates one embodiment of a user interface that may be generated by a display generator in accordance with the present invention other embodiments may contain less more and or a different arrangement of information. For example in certain embodiments the user interface may not have a composite control. As another example in some embodiments the user interface may allow for mass operations. As an additional example in particular embodiments the user interface may have a different arrangement of resource information. A variety of other examples exist.

Although user interface illustrates one embodiment of a user interface that may be generated by a display generator in accordance with the present invention other embodiments may contain fewer more and or a different arrangement of information. For example in certain embodiments the user interface may not have a composite control. As another example in some embodiments the user interface may not allow mass operations. As an additional example in certain embodiments the user interface may not include a toolbar. A variety of other examples exist.

At decision block the method calls for determining whether information of multiple resources is to be displayed. If information of multiple resources is to be displayed the method calls for selecting a renderer for organizing the resource information at function block . This may be accomplished for example by evaluating parameters contained in the message requesting class from a resource properties service based on a parent resource type and using default settings from the system configuration. The renderer may be part of a pool of renderers or otherwise.

The method calls for selecting a renderer for rendering resource information at function block . This may be accomplished for example by evaluating parameters contained in the message requesting class from a resource properties service based on a parent resource type and using default settings from the system configuration. Note that a different renderer may be selected for different resource types. The renderer may be part of a pool of renderers or otherwise.

At function block the method calls for determining the actions associated with the resource information. This may be accomplished for example by determining a class associated with the resource and evaluating the characteristics of the class. Note that there may be resource information without an associated action. The method continues with determining a label for the action at function block . The label could include text graphics and or any other appropriate indicator of an action and could be determined by a command provider.

At decision block the method continues with waiting to detect an event related to selection of an action. Note that the event could be any type of event fired within a system such as system in . Once such a detection occurs the method calls for executing the action at function block . The action could be a command or a series of commands. After executing the action the method calls for generating an event at function block and returning to function block to wait for a message indicating that resource information is to be displayed. Note that the event itself could be or result in a message indicating that resource information is to be displayed.

Although flowchart illustrates a method for managing information display in accordance with one embodiment of the present invention other embodiments may include fewer more and or a different arrangement or operations. For example in certain embodiments whether or not there are multiple resources to be displayed may not matter because a organizing render is always necessary. As another example in some embodiments actions associated with two or more of the resources may be displayed and acted upon. As a further example in particular embodiments the method could include the rendering of the resource information and or action labels. A variety of other example exist.

Using architecture the user interface presented to a user will vary depending on the role of the user. Thus the user s role will dictate at least to some degree the information that will be presented to the user. Note that some information may be presented in multiple roles.

In some embodiments a pane may be an intermediate view iView from SAP. An iView is a self contained XML based presentation element with a well defined set of interfaces responsible for displaying its content and the personalization of the content elements presented as part of a portal page. IViews may provide awareness of events and enable the rapid creation of information building blocks from organization applications. iViews may receive information from structured or unstructured applications using Object Linking and Embedding Database OLE DB native application programming interfaces APIs HyperText Transfer Protocol HTTP Extensible Markup Language XML Simple Object Access Protocol SOAP and the like and may generate XML based output. Furthermore iViews may deliver Web service information by connecting to Web services through the Universal Discovery Description and Integration UDDI which will allow the Web service to be exposed by receiving information through Web Services Description Language WSDL and by delivering views as SOAP compliant objects.

As used herein the terms electronic document and document mean a set of electronic data including both electronic data stored in a file and electronic data received over a network. An electronic document does not necessarily correspond to a file. A document may be stored in a portion of a file that holds other documents in a single file dedicated to the document in question or in a set of coordinated files.

Various implementations of the systems and techniques described herein can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a backend component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such backend middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While several embodiments have been described in detail above other modifications are possible. Portions of this disclosure discuss managing information display. In particular portions of the disclosure relate to dynamically determining information display in server structures. However these techniques could be used in any type of resource management systems.

