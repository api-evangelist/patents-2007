---

title: Power management in electronic systems
abstract: In one embodiment, an electronic apparatus comprises at least one processor and a computer readable medium coupled to the processor and comprising logic instructions encoded in the computer readable medium, wherein the instructions, when executed in a processing system, cause the processing system to perform operations comprising initializing a direct memory access profiler in an electronic system, wherein the direct memory access is coupled to a policy manager in the electronic system, measuring at least one memory consumption characteristic of the electronic system, communicating the at least one memory consumption characteristic to a policy manager of the electronic system, and using the at least one memory consumption characteristic to adjust a power state of the electronic system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971084&OS=07971084&RS=07971084
owner: Intel Corporation
number: 07971084
owner_city: Santa Clara
owner_country: US
publication_date: 20071228
---
This application is related to the following co pending applications U.S. Ser. No. 11 007 098 to Morgan et al entitled SYSTEM AND METHOD FOR ADAPTIVE POWER MANAGEMENT and U.S. Ser. No. 11 006 917 to Vaidya et al entitled SYSTEM AND METHOD FOR ADAPTIVE POWER MANAGEMENT.

Many purchasers users and manufacturers of computer products are becoming increasingly sensitive to issues of power consumption. In some cases consumers desire to lower their energy bills. Consumers may also prefer processing systems that generate less noise and heat and there is typically a positive relationship between the amount of power consumed by a processing system and the amounts of noise and heat generated by that processing system. In addition for a battery powered processing system such as a laptop computer a cellular telephone cell phone a personal digital assistants PDAs etc. reducing the power consumption has the valuable effect of increasing the processing system s battery life i.e. increasing the amount of time the processing system can be used before the battery must be recharged or replaced with a fresh battery .

A typical processing system includes many different components such as a processor or microprocessor a data storage device and various input output I O devices. When a processing system is not off each component within the processing system may consume some power. The terms system power state and global power state both refer to the aggregate power consumption of all of the components in a processing system. The term device power state refers to the power consumption of a particular component. Typically the processor is one of the most significant consumers of power in a processing system. The term processor power state refers specifically to the power consumption of a processor or microprocessor.

One approach to managing performance is to use a static prediction of performance needs. For instance a developer of an end user application may initially determine through experimentation that certain functions or tasks of the application typically require a certain amount of processing power. The result of the experimentation may be considered static profiling information. The developer may then design the application to modify the performance level of the processing system before executing those functions or tasks. Such a software application thus manages the system performance based on the predicted needs.

Also an operating system OS may schedule and run software entities such as processes threads and tasks and the scheduler in the OS may include an application programming interface API that provides loading information pertaining to those processes threads and tasks. Other software programs can call that API to retrieve the loading information. The loading information may include for instance the total number of active processes threads and tasks. The programs that may obtain loading information from the OS scheduler may include power management software or debugging software for example.

Static techniques for managing power present many disadvantages. For example in a typical case development of the software application will be made more difficult because expected processing power requirements must be predicted by the developer based on the previous analysis done and then handled within the application. Furthermore the predicted processing power requirements may differ substantially from the actual processing power requirements. Also when a developer is attempting to design an application to handle the expected processing power requirements the tools available for that application for modifying the system s performance level may be limited to the tools provided by a particular OS. This same limitation may apply to programs that obtain loading information from an OS API. Further static analysis may not yield adequate power savings.

Described herein are exemplary systems and methods to implement power management electronic systems. In the following description numerous specific details are set forth to provide a thorough understanding of various embodiments. However it will be understood by those skilled in the art that the various embodiments may be practiced without the specific details. In other instances well known methods procedures components and circuits have not been illustrated or described in detail so as not to obscure the particular embodiments

Intel Corporation manufactures processors that incorporate technologies to support low power consumption and high performance processing for a wide range of services. In some cases the technologies in those processors for supporting low power consumption and high performance processing may be referred to in general as Intel XScale technology. Intel Corporation currently distributes one or more families of processors that feature Intel XScale technology under various product designations or model numbers such as the Intel PXA26x and the Intel PXA27x product families.

Example embodiments illustrated herein may include processing systems with processors that support Intel PCA. Alternative embodiments of the present invention include processing systems with other kinds of processors whether manufactured by Intel Corporation or other manufacturers. As described in greater detail below the example embodiment includes a processor with dynamic voltage management DVM and dynamic frequency management DFM capabilities.

The data processing environment of for example may include a processing system that includes one or more processors or central processing units CPUs communicatively coupled to various other components via one or more buses or other communication conduits or pathways. CPU may be implemented as an integrated circuit. The components coupled to CPU may include one or more volatile or non volatile data storage devices such as random access memory RAM and read only memory ROM . A memory bus may serve to couple RAM and ROM with CPU . For purposes of this disclosure the term ROM may be used in general to refer to non volatile memory devices such as erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash ROM flash memory etc. CPU may also be communicatively coupled to mass storage devices such as one or more integrated drive electronics IDE drives small computer systems interface SCSI drives or other types of hard disk drives. Other types of mass storage devices and storage media that may be used by processing system may include floppy disks optical storage tapes memory sticks digital video disks biological storage etc.

The components of processing system that are communicatively coupled to processor may also include one or more bus bridges. One or more of those bridges and associated buses may be used to connect processor either directly or indirectly with additional components such as one or more storage devices device controllers input output I O ports and I O devices . For example the additional components may include a video controller a SCSI controller a network controller a universal serial bus USB controller a keyboard controller etc. In some embodiments such components may be implemented as embedded devices using components such as programmable or non programmable logic devices or arrays application specific integrated circuits ASICs embedded computers smart cards and the like.

In some embodiments processor may be implemented as an integrated circuit IC that includes a processing core as well as control circuits or control logic for implementing additional components. Such components may include an on chip bus bridge on chip RAM on chip ROM a performance monitoring unit PMU and a memory controller . The IC may also feature one or more internal bus bridges and or internal buses such as system bus for interconnecting various components within processor .

Processing system may be controlled at least in part by input from conventional input devices such as a keyboard or keypad a pointing device etc. and or by directives received from one or more remote data processing systems interaction with a virtual reality VR environment biometric feedback or other input sources or signals. Processing system may send output to components such as a display device remote data processing system etc. Communications with remote data processing system may travel through any suitable communications medium. Processing systems may be interconnected by way of a physical and or logical network such as a local area network LAN a wide area network WAN an intranet the Internet a public switched telephone network PSTN a cellular telephone network etc. Communications involving network may utilize various wired and or wireless short range or long range carriers and protocols including radio frequency RF satellite microwave Institute of Electrical and Electronics Engineers IEEE 802.11 Bluetooth optical infrared cable laser etc.

The invention may be described by reference to or in conjunction with associated data including instructions functions procedures data structures application programs etc. which when accessed by a machine result in the machine performing tasks or defining abstract data types or low level hardware contexts. The data may be referred to in general as software and it may be stored in volatile and or non volatile data storage.

For example ROM may include at least portions of a software application for monitoring the performance of processing system and managing the power consumption of processing system . Software application may also be referred to as platform power manager PPM . In an example embodiment PPM may include instructions and other data for implementing the functionality described herein. As indicated by the dashed box in RAM some or all of PPM may be loaded into RAM for example in connection with a boot process for processing system . In one embodiment PPM may then cause processing system to operate as described below. In alternative embodiments processing system may obtain PPM from one or more other sources such as ROM and or remote data processing system and some or all of PPM may be loaded into RAM .

In the example embodiment power management architecture also includes an operating system OS and user applications . Power management architecture may also include one or more power management applications which interact with PPM as described in greater detail below. OS may include code for various OS services and a task scheduler . OS may also include power management PM software for implementing certain power management features. In the example embodiment OS also includes a sequence of instructions for causing processing core to enter and exit idle mode. Such a sequence of instructions may be referred to as original equipment manufacturer OEM idle code idle execution path or simply idle path .

In the example embodiment task scheduler keeps track of which processes or tasks are currently running and OS executes idle path whenever no processes or tasks are ready to run. In the example embodiment OS uses a variable duration idle which exits in response to an event such as an interrupt. In alternative embodiments the OS can use a fixed duration idle. The present invention may also be used in systems that do not use a thread or other dispatchable entity to implement the idle path.

In the example embodiment PPM includes various modules for monitoring system performance modifying system power consumption and performing related functions. As described in greater detail below those modules may include a power policy manager a user settings interface a DMA profiler a performance profiler and an OS mapping module . Power policy manager may also be referred to as policy manager . The different modules may communicate with each other through any suitable mechanisms such as application programming interfaces APIs for example.

In the example embodiment device drivers register with PPM through the device driver APIS. Consequently device drivers may receive notification from PPM on all of the power management events such as state transitions frequency changes and voltage changes. If a particular operating state is supported by OS then PPM may use the OS interface to notify device drivers . Otherwise PPM may use an independent interface between device drivers and PPM . When a device driver receives a callback for a power management state transition or event the device driver may transition into its new state and prepare the device for the next state. As an example when a keypad driver transitions into a standby state the keypad driver may configure the low level registers so that the keypad driver can wakeup from standby state if the user presses the key on the keypad.

Device drivers may also include logic for requesting a state change from PPM . For example a battery driver may communicate with PPM to request a reduced operating point for processing system to reduce power consumption in response to determining that the charge level of the system s battery has fallen below a predetermined threshold.

PPM may use its own services or services from OS to dynamically scale power and performance. For example if OS supports two different performance modes identified as run and idle PPM may use services of OS to enter those performance modes. In addition as described in greater detail below PPM may recognize or create additional performance modes and PPM may use its own services e.g. services for communicating with PMU to enter those modes.

OS mapping module includes resources for interfacing with one or more individual OSs. OS mapping module thus provides a layer of abstraction between policy manager and OS . Consequently PPM may be used with a different OS by simply replacing OS mapping module modifying OS mapping module or using different resources of OS mapping module .

Communications subsystem may include various software components such as a communications power management module CPMM various protocol stack layers and an MSL interface. CPMM may handle power management for communications subsystem and CPMM may maintain its own state machine. CPMM may interface to the different layers of the protocol stack. In addition CPMM may support different power modes such as a run duty cycle and a low power duty cycle with different states for functions such as a global positioning system GPS and or communications using technology such as a Global System for Mobile Communications GSM protocol.

Applications subsystem may include software such as PPM and OS power manager for managing power in processing system . Applications subsystem may also include a hardware abstraction layer HAL and various communications device drivers such as power management IC PMIC audio universal serial bus USB and MSL device drivers. The communications device drivers may operate as clients of PPM and or OS power manager and those device drivers may receive notifications from PPM and or OS power manager on appropriate state transitions. For example when the OS goes into the standby mode OS power manager may notify one or more of the communications drivers about this state change. In response communications subsystem may enter a low power standby state and in conjunction with entering that state may prepare itself for waking up applications subsystem in case communications subsystem subsequently transitions into a new state that requires processing on applications subsystem. . Communications between applications subsystem and communications subsystem may transpire as signaling events over a communications path such as MSL general purpose I O GPIO pins or any other suitable path.

For dynamic performance and power scaling such as that described below PPM may also notify communications subsystem about frequency and or voltage changes via a communications device driver such as the MSL driver. CPMM may then notify the communications software accordingly thereby increasing the effectiveness of the power management approach relative to a system that does not notify its communications subsystem regarding one or more types of power or performance changes in the applications subsystem. Thus dynamic system level power management may be achieved rather than simply application level or communications level power management.

Each of the configuration settings may be provided with PPM as default value or may be supplied or modified by a user such as a vendor a system administrator an end user etc. Thus as described below PPM may receive a user specified policy setting for processing system and may update power policy profile based at least in part on that policy setting. In one embodiment some or all of the values in power policy profile are developed through experimentation for a particular hardware configuration OS and typical workload. Experimentation may be used to develop suitable values for other hardware configurations OSs and workloads.

Referring to at operation the DMA profiler may be initialized by launching DMA profiler . The process of launching DMA profiler may include the operation of associating a callback routine with idle path of OS . A hardware abstraction layer HAL or any other suitable technique may be used to associate DMA profiler with idle execution path . For instance PPM may insert the callback routine into an interrupt service routine ISR associated with entering and or exiting the processor idle mode.

DMA profiler may set a sampling period for example based on a default or user defined setting. DMA profiler may then collect direct memory access data by measuring memory consumption i.e. load characteristics in various system locations such as e.g. on a data bus on a dynamic memory controller DMC and on a peripheral bus PxBus . DMA profiler may also collect data on cache accesses and cache misses. The sampling period may be static or dynamic.

At the end sampling period DMA profiler may determine non core memory consumption parameters i.e. what portion of the DMA activity is attributable to non core activities such as e.g. audio or video playback. For example in some embodiments DMA profiler may measure memory consumption parameters in various locations when the system is not executing non core activities such as e.g. audio or video playback. These memory consumption parameters may be stored in a suitable memory location. Memory consumption parameters collected during the sampling period may be compared with the stored parameters to determine an approximation of the memory consumption attributable to non core activities. For example the memory consumption parameters stored in memory may be subtracted from the memory parameters measured during the sampling period.

If at operation the non core memory consumption parameters i.e. the load due to non core operations exceeds a threshold then control passes to operation and the DMA profiler sets a flag in memory which indicates that the device is operating in a DMA Active mode. By contrast if at operation the load does not exceed the threshold then control passes to operation and DMA profiler sets a flag in memory which indicates that the device is operating in a DMA Inactive mode.

Control then passes to operation and the flag is used to manage a power state of the electronic device. For example in some embodiments the platform power manager may use the flag to scale voltage and frequency dynamically in response to changes in the DMA load on the system. Further the policy manager can use the DMA profiler data to keep track of DMA requirements on system throughput and can re adjust the system setting etc. to ensure that the data rate for DMA is maintained for required system functionality and performance.

Some of the operations described herein may be embodied as logic instructions on a computer readable medium. When executed on a processor the logic instructions cause a processor to be programmed as a special purpose machine that implements the described methods. The processor when configured by the logic instructions to execute the methods described herein constitutes structure for performing the described methods. Alternatively the methods described herein may be reduced to logic on e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC or the like.

The terms logic instructions as referred to herein relates to expressions which may be understood by one or more machines for performing one or more logical operations. For example logic instructions may comprise instructions which are interpretable by a processor compiler for executing one or more operations on one or more data objects. However this is merely an example of machine readable instructions and embodiments are not limited in this respect.

The terms computer readable medium as referred to herein relates to media capable of maintaining expressions which are perceivable by one or more machines. For example a computer readable medium may comprise one or more storage devices for storing computer readable instructions or data. Such storage devices may comprise storage media such as for example optical magnetic or semiconductor storage media. However this is merely an example of a computer readable medium and embodiments are not limited in this respect.

The term logic as referred to herein relates to structure for performing one or more logical operations. For example logic may comprise circuitry which provides one or more output signals based upon one or more input signals. Such circuitry may comprise a finite state machine which receives a digital input and provides a digital output or circuitry which provides one or more analog output signals in response to one or more analog input signals. Such circuitry may be provided in an application specific integrated circuit ASIC or field programmable gate array FPGA . Also logic may comprise machine readable instructions stored in a memory in combination with processing circuitry to execute such machine readable instructions. However these are merely examples of structures which may provide logic and embodiments are not limited in this respect.

In the description and claims the terms coupled and connected along with their derivatives may be used. In particular embodiments connected may be used to indicate that two or more elements are in direct physical or electrical contact with each other. Coupled may mean that two or more elements are in direct physical or electrical contact. However coupled may also mean that two or more elements may not be in direct contact with each other but yet may still cooperate or interact with each other.

Reference in the specification to one embodiment some embodiments or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least an implementation. The appearances of the phrase in one embodiment in various places in the specification may or may not be all referring to the same embodiment.

Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that claimed subject matter may not be limited to the specific features or acts described. Rather the specific features and acts are disclosed as sample forms of implementing the claimed subject matter.

