---

title: Using handwriting recognition in computer algebra
abstract: Systems and methods for use in handwriting recognition in computer algebra are provided. One disclosed method includes receiving handwriting input from a user via a handwriting input device, the handwriting input representing a mathematical expression. The method further includes, at a recognizer, processing the handwriting input to recognize a plurality of candidates and ranking the plurality of candidates to form initial candidate data. The method may further include, at an application program, scanning the plurality of candidates for segments that match application-level criteria, and adjusting a rank of one or more of the plurality of candidates based on the matching, to form a processed candidate list. The method may further include displaying the processed candidate list via a graphical user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073258&OS=08073258&RS=08073258
owner: Microsoft Corporation
number: 08073258
owner_city: Redmond
owner_country: US
publication_date: 20070822
---
Computer algebra systems are designed to assist engineers and students alike in visualizing and evaluating mathematical expressions. One challenge faced by users of such computer algebra systems is that it is often difficult to input into the computer algebra system mathematical notation in the form it appears in a textbook or publication via a sequence of keyboard strokes or mouse clicks. While each computer algebra system may include its own input methods there is no common standard for inputting mathematical notation.

For these reasons users of different computer algebra systems must master a variety of different input methods which can be confusing. Even when using a single system the complexity of current input methods are difficult to master particularly for beginning users and thus pose a barrier to learning. Many such methods involve using keywords that are meaningful in a specific language and therefore introduce difficulties in localization when the system is released in different languages. Other methods involve using complicated button palettes to incorporate a structural template for the input. The use of such button palettes and structural templates can result in undesirably slow input speeds for users.

For the above discussed reasons some users find current computer algebra system input methods to be inefficient for entering mathematical expressions.

Systems and methods for use in handwriting recognition in computer algebra are provided. One disclosed method includes receiving handwriting input from a user via a handwriting input device associated with a graphical user interface of an application program the handwriting input representing a mathematical expression. The method further includes at a recognizer configured to communicate with the application program via an application programming interface processing the handwriting input to recognize a plurality of candidates and ranking the plurality of candidates to form initial candidate data. The method may further include at an application program scanning the plurality of candidates for segments that match application level criteria and adjusting a rank of one or more of the plurality of candidates that match the application level criteria to form a processed candidate list. The method may further include displaying the processed candidate list including the plurality of candidates with rank adjusted based on application level criteria via the graphical user interface.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The recognizer contains is a software module containing executable code configured to process the handwriting input to recognize a plurality of text candidates rank the plurality of candidates in initial candidate data and return the initial candidate data to the application program via the recognizer API .

For better performance and to conserve storage space the recognizer may represent the candidates in initial candidate data using a tree hierarchy instead of a flat list. For example one ink stroke may have three different possible recognitions capital letter O lower case letter o and the digit 0 . Another ink stroke within the same handwriting input may have four different possible recognition results the letter q the letter g the digit 9 and the digit 4 . If the recognizer returns all possible combinations in a flat list twelve elements would be required to cover the combinations. However if there are seven other characters in the input and each of them has five possible recognition results the flat list must contain close to one million elements. The size of the initial candidate data may be efficiently controlled using a tree hierarchy to represent the initial candidate data. The recognizer is configured to rank the candidates to give the application program an indication of what alternatives are more likely than the others. Thus in addition to the possible interpretations for each ink stroke associated rank information may also be stored in the hierarchy.

Upon receiving the initial candidate data from the recognizer the application program is configured to compose the tree hierarchy of the initial candidate set into text form or other suitable form for processing by a parser . The text or other suitable form of each of a plurality of possible candidates from the initial candidate data is passed to the parser typically in order of highest rank to lowest as determined by the recognizer . The parser in turn scans the plurality of candidates in the initial candidate data for segments that match application level criteria such as semantic keywords or grammatical rules and adjusts a rank of one or more of the plurality of candidates that match the application level criteria to form a processed candidate list . The application program displays the processed candidate list including a plurality of candidates with rank adjusted based on application level criteria via a preview pane of graphical user interface . In addition to keywords and grammatical rules it will be appreciated that a variety of other application level criteria may be used to adjust the rank of the plurality of candidates in the processed candidate list. For example the parser may be configured to parse each of the plurality of candidates and adjust a rank of the candidates based at least whether a syntax error is encountered during parsing of one or more of the candidates .

It will be appreciated that the candidates displayed in the processed candidate list in preview pane are typically displayed in rank order based at least in part on application level criteria . Thus in the depicted embodiment the top or first entry in the list has been ranked as the most likely to be the user s intended input by the application program .

The preview pane may be configured to enable a user to select a selected candidate from the processed candidate list as an intended input. The selected candidate may be passed to an evaluation engine of the application program for evaluation such as solving graphing or otherwise processing the mathematical expression contained in the selected candidate . An output of the evaluation engine may be displayed in a result pane of the graphical user interface along with the selected candidate . The output may take the form for example of a numerical solution an algebraic solution a visual representation such as a graph etc.

The following are examples of various grammatical rules and keywords that may be matched by the parser to rank the candidates in the processed candidate list . For example the application program may include a grammatical rule that does or does not allow multiple character variable names. If such names are allowed ab would be interpreted as a single variable named ab otherwise it would be treated as implicit multiplication between two variables a and b . The recognizer may not know how the application program will interpret it. Thus the parser of the application program may be configured to match the candidates against the grammatical rule that multiple character variable names are or are not allowed and rank candidates according to the results of the matching.

Example keywords that may be known to the application program but not the recognizer include well known function names such as sin and cos in addition to many other function names that are not standardized across application programs. For example some application programs may choose to use Average as the function name to compute the average of several numbers while other may choose Avg or Mean for the same function. Further other application programs may use a foreign language equivalent of one of these terms. Thus the parser of the application program described herein may be equipped with a large set of keywords that are known to the application program and candidates may be ranked based on matching to the keywords . Higher ranks may be achieved by candidates that contain keywords understood by the application program .

As one example for the handwritten input plot the recognizer would likely rank the candidate p10t higher than plot since the recognizer tends to emphasize number input higher than letter input and since the recognizer is unaware of plot as a keyword. Thus if plot is registered as a keyword in the application program this recognizer ranking would potentially harm the recognition accuracy. To mitigate this potential harm the application program can scan the candidates in the initial candidate data against its list of keyword in localized segments. If some combination of lower ranked alternatives in the tree hierarchy of initial candidate data matches one of the keywords the application program is configured to boost the ranking of this combination and therefore make the one or more candidates containing this combination more likely to be chosen as one of the limited number of candidates presented to the user in the preview pane.

As another example of grammatical rules that may be utilized by the above described embodiments the application program may contain grammatical rules indicating that the application program uses subscripts as part of the variable name such as x or that it uses subscripts to denote the number base such as 100110110 or that it may accept both depending on the context.

With regard to syntax errors the parser may be configured to raise errors if it finds unacceptable patterns in the input text. Some errors may be common to many types of application programs for example the input should not start with closing parenthesis. Other errors may be specific to a certain type of application program . For example in an application program configured to use subscripts to denote number bases 101100110 would be determined to be acceptable but 121001 would not since only digits 0 and 1 are acceptable in a binary number.

Once the handwriting input is entered by the user the user may select preview for example by tapping a stylus on the preview selector as the depicted instructions indicate. This will cause preview pane to be displayed with the plurality of candidates listed in rank order in processed candidate list . The user may select a selected candidate for example by tapping a stylus on the desired candidate in the processed candidate list as indicated in the depicted instructions. Should the user not find the intended mathematical expression in the processed candidate list the user may select an additional candidates selector A to display more candidates if available or may choose a edit input selector B to return to the handwriting input box to edit or reenter the handwriting input .

Once the user selects selected candidate via the preview pane the preview pane typically disappears and the selected candidate is displayed in results pane along with associated output such as an algebraic solution numerical solution graph etc. produced by evaluation engine .

At the method includes at an application program scanning the plurality of candidates for segments that match application level criteria. The application level criteria may include keywords or grammatical rules for example as discussed above. At the method includes at the application program adjusting a rank of one or more of the plurality of candidates that match the application level criteria to form a processed candidate list.

At the method may include looping for each candidate in a predetermined order such as from highest rank to lowest as determined by the recognizer. On each loop the method may include at parsing a current candidate via a parser of the application program according to application level syntactical and or grammatical rules and at determining whether a syntax error occurred during parsing. If no syntax error is determined to have occurred during parsing the method may include at adding the current candidate to a processed candidate list at application level. And if a syntax error is determined to have occurred during parsing the current candidate then at the method may include determining whether a sufficient number of candidates has been successfully added to the processed candidate list or whether all candidate possibilities have been exhausted and may continue looping at until the outcome of the determination at is YES.

At the method includes displaying the processed candidate list including the plurality of candidates with rank adjusted based on application level criteria via the graphical user interface for example in a preview pane that may float or pop up over a user input pane of the graphical user interface.

If at the intended candidate is not present in the processed candidate list at the method may further include presenting user selectable options to display more candidates and or edit the handwriting input such as via additional candidates selector A and edit input selector B described above. Depending on the user s selection the method may further include either receiving a user selection to edit input as shown at or receiving a user selection to display more candidates as shown at and return to or as appropriate.

If at the candidate intended by the user is present in the processed candidate list at the method may further include receiving a user selection of a selected candidate. At the method may include displaying the selected candidate in a results pane of the graphical user interface. At the method may include evaluating a mathematical expression contained in the selected candidate. At the method may include displaying an output of the evaluating in the results pane of the graphical user interface which output may take the various forms described above.

The systems and method described above may be used to process handwriting input entered into application programs such as computer algebra systems and efficiently recognize and rank candidates based on the handwriting input in a manner that utilizes application specific knowledge.

It will be appreciated that the computing devices described herein may be any suitable computing device configured to execute the programs and display the graphical user interfaces described herein. For example the computing devices may be a personal computer calculator laptop computer portable data assistant PDA computer enabled wireless telephone networked computing device or other suitable computing device and may be connected to each other via computer networks such as the Internet. These computing devices typically include a processor and associated volatile and non volatile memory and are configured to execute programs stored in non volatile memory using portions of volatile memory and the processor. As used herein the term program refers to software or firmware components that may be executed by or utilized by one or more computing devices described herein and is meant to encompass individual or groups of executable files data files libraries drivers scripts database records etc. It will be appreciated that computer readable media may be provided having program instructions stored thereon which upon execution by a computing device cause the computing device to execute the methods described above and cause operation of the systems described above.

It should be understood that the embodiments herein are illustrative and not restrictive since the scope of the invention is defined by the appended claims rather than by the description preceding them and all changes that fall within metes and bounds of the claims or equivalence of such metes and bounds thereof are therefore intended to be embraced by the claims.

