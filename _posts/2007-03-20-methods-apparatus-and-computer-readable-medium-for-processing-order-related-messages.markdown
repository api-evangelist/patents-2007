---

title: Methods, apparatus and computer readable medium for processing order related messages
abstract: The invention is directed to techniques for processing order messages exchanged between a client and an order server. The order messages can be for products and services that the customer orders from a vendor. The client provides the input order messages, which contain order commands in a predefined document format, to an order message manager of the order server, which also provides an order message sorter and message processing modules. The order message sorter reads the input document in the input order message to determine a type for the message and then directs the message to a message processing module capable of processing that type of order message. The message processing module processes the input document, obtains data if needed from an order database, and prepares an output document to include in an output order message to be returned to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08019647&OS=08019647&RS=08019647
owner: Cisco Technology, Inc.
number: 08019647
owner_city: San Jose
owner_country: US
publication_date: 20070320
---
This application is a Continuing Application under 37 CFR 1.53 b and accordingly Applicant hereby claims the benefit under 35 U.S.C. 120 of U.S. patent application Ser. No. 09 811 971 filed Mar. 19 2001 now U.S. Pat. No. 7 203 658 entitled METHODS AND APPARATUS FOR PROCESSING ORDER RELATED MESSAGES incorporated herein by reference.

In general customers using an online order processing system may order products using a local computer e.g. a client over a connection to a vendor such as by dialing in over a modem to a computer network such as the Internet to the vendor s computer e.g. server . Typically the customer can enter in ordering information into a user interface provided by the vendor s order processing software over the connection which is displayed on a visual display of the customer s computer. For example the customer can begin by entering in the customer s name and address if the customer is interested in a particular product and the customer can enter in the name and or model number of the product that the customer is considering ordering. The customer can then receive product information including pricing information configuration information and so on.

After receiving this product information over the network connection the customer can decide whether to place the order or to hold off submitting the order until a later time. If placing the order the customer can indicate that the customer wishes to submit the order by further manipulating the computer display provided by the vendor s computer. The vendor s order processing software may require the customer to submit additional information such as a purchase order number and shipping address. After entering this information the order processing software processes this information and accepts or rejects the order. If the order is accepted the vendor s computer indicates the acceptance and typically provides the customer with verification information such as a confirmation number or order number that the customer writes down on a piece of paper or prints out on a printer connected to the customers local client computer.

If the customer is not sure of the product to be ordered the customer can request information from the vendor s order processing software which is then displayed on the customer s client computer as one or more screens of information provided over the network connection by the order processing software. The customer can then read through the displayed screens or print them out to read the hard copies of the information for comparison with the customer s requirements and needs. If the customer is a business e.g. wholesaler distributor value added reseller or VAR original equipment manufacturer or OEM or other business then the customer can check or compare its own inventory requests from its customers e.g. its retail customers and other information against the information provided by the vendor s computer to determine what products and configurations of those products to order from the vendor. In addition the customer can use the ordering information from a display screen or printout and then enter e.g. type in at a keyboard or copy and paste using a mouse this information into an ordering application or other application e.g. customer s inventory application that the customer maintains at its own local computer.

In another conventional approach a customer can log onto a vendor s web site over the Internet and view information about products for sale at the web site provided by the vendor s order processing software from the vendor s web server. The customer can select products from displays on the web site for an order and can then submit the order through the web site. The web site then displays a confirmation number to the customer who can print it out if desired.

The conventional approaches to the operation of order processing software over a network as described above have a number of deficiencies. After submitting the order the customer can obtain information such as a confirmation number about the order but then must typically re enter the confirmation number and order information into the customer s own ordering application and local order database on the customer s computer. That is the customer must enter the order information twice once when entering the order information into the vendor s order application e.g. provide order information in the vendor s web page and a second time when entering the information into the customer s own order application and local order database referred to as a double entry problem . The customer may be able to copy text from the vendor s order application e.g. copy a confirmation number from a web page and then paste the text into an input display for the customer s application but this approach involves a manual operation of copying and pasting for each piece of information to be input into the customer s application.

In general the customer cannot directly read in the data provided by the vendor s order processing software into the customer s ordering application. In particular this is a problem if the customer is a large VAR or OEM who orders products and parts from the vendor to incorporate into the customer s own systems for sale to end users of the systems. For example large complex systems such as complex commercial computing systems may be composed of many components that an OEM receives from several vendors. Such components can include central processing units data storage devices output devices routers switches and other computing or electronic devices. The OEM customer cannot readily obtain pricing and ordering information about the vendor s products to incorporate into the customer s own applications and databases without manually reentering or transferring the information. For example if the delivery dates of the vendor s products change e.g. are delayed then the OEM must reenter or manually change the delivery dates to incorporate those changes into its own ordering and manufacturing assembly software so as to provide accurate delivery dates to its own end user customers for systems provided by the OEM that incorporate the vendor s products.

In contrast the invention is directed to techniques for processing order messages in predefined formats that substantially overcome such limitations of conventional systems. The predefined formats such as document formats based on an extended markup language or XML can be readily used by a customer that is exchanging order messages with a vendor s order server. These predefined formats enable different clients to provide order messages in a format that can be readily received and processed by an order message processing application e.g. order message manager configured according to embodiments of the invention at the order server. The vendor s order processing application can sort the messages into predefined types so that different message processing modules can efficiently process the messages because each module is designed to process a specific type of message indicated by the predefined order message formats. Because the messages are based on predefined formats the sorting process can proceed automatically without the intervention of a human operator.

The vendor s ordering processing application can then return messages in predefined formats to the customer in response to the input order messages. Because embodiments of the invention produce output order messages in the predefined format the customer s ordering application can then readily incorporate returned messages i.e. output order messages from the vendor into the customer s own ordering application and order databases. If receiving returned messages from different order processing applications from the vendor or different applications from several different vendors that follow the same predefined formats then the customer s own ordering application can readily incorporate the returned order messages received from different sources and integrate the returned data in the messages into a unified customer database without requiring that the customer reenter the data received from the vendor or otherwise engage in a cumbersome manual transfer of the data from one format to another for entry into the customer s database s .

In one embodiment the invention is directed to a method in an order server for processing order messages. The method includes a step of receiving a first message of the order messages over a network where the first message comprises a first document organized in a first predefined format. The method also includes steps of obtaining a first data set from the first message based on the first predefined format of the first document in response to receiving the first message obtaining a second data set by processing the first data set of the first message in response to obtaining the first data set and providing over the network the second data set in a second message comprising a second document organized in a second predefined format suitable for use by an ordering application. Thus the customer s ordering application receives a response to the customer s order request e.g. check order status request in a format that the ordering application can readily process and incorporate into the customer s order database without requiring any manual operation by the customer.

In another embodiment the order server is a vendor order server and the ordering application is a customer ordering application. The method additionally includes the steps of receiving a first extended markup language document from the customer ordering application obtaining the first data set from a first predefined element of the first extended markup language document invoking an ordering function based on a message type defined in a second predefined element of the first extended markup language document to generate the second data set and providing the second data set in a third predefined element in a second extended markup language document to the customer ordering application. As a result the order messages can include XML extended markup language documents which provides a readily processed language for the predefined XML elements provided in the documents.

In an additional embodiment the method includes directing the first message to a first message processing module of a plurality of message processing modules. Thus the order server directs the order message to a particular module for processing.

In a further embodiment the method includes parsing the first message to determine a message type that identifies an ordering function for the first message and directing the first message to the first processing module based on the message type. As a result the order message is processed by a particular module that is designed to process that type of order message enabling more efficient processing than if all messages were processed by the same module.

The method includes in another embodiment interacting with an order database based on the first data set and based on a message type of the first message to generate the second data set. For example the order server can receive a status inquiry regarding the status of a previously submitted order in an input order message from a customer. Then the order server can obtain the current status from the order database to return to the customer in an output order message from the order server to the customer.

In another embodiment the method includes performing an ordering function based on the first data set and based on a message type of the first message to generate the second data set. For example the message processing module performs a specific ordering function such as order status inquiry new order submittal order configuration and so on.

In a further embodiment the second predefined format is suitable for integration into a database maintained by the ordering application. Thus the output order message received by the customer from the order server can be in a format that the customer s ordering application can read and readily transfer to the customer s own database of order information.

In an additional embodiment the first document and the second document are extended markup language documents. Thus the documents provided in the order messages can be based on XML extended markup language which provides a readily processed language for the predefined XML elements in the documents.

In some embodiments the techniques of the invention are implemented primarily by computer software. Such computer program logic embodiments which are essentially software when executed on one or more hardware processors in one or more hardware computing systems cause the processors to perform the techniques outlined above. In other words these embodiments of the invention are generally manufactured as a computer program stored on a disk memory card or other such media that can be loaded directly into a computer or downloaded over a network into a computer to make the device perform according to the operations of the invention. In one embodiment the techniques of the invention are implemented in hardware circuitry such as an integrated circuit IC or application specific integrated circuit ASIC .

The invention is directed to techniques for processing order messages in predefined formats. The predefined formats such as document formats based on an extended markup language or XML can be readily used by a customer that is exchanging order messages with a vendor s order server. These predefined formats enable different clients to provide order messages in a format that can be readily received and processed at the order server by an order message processing application e.g. order message manager configured according to embodiments of the invention. The vendor s order processing application can sort the messages into predefined types so that different message processing modules can efficiently process the messages because each module is designed to process a specific type of message indicated by the predefined order message formats. Because the messages are based on predefined formats the sorting process can proceed automatically without the intervention of a human operator.

The vendor s ordering processing application can then return messages in predefined formats to the customer in response to the input order messages. Because embodiments of the invention produce output order messages in the predefined format the customer s ordering application can then readily incorporate returned messages i.e. output order messages from the vendor into the customer s own ordering application and order databases. If receiving returned messages from different order processing applications from the vendor or different applications from several different vendors that follow the same predefined formats then the customer s own ordering application can readily incorporate the returned order messages received from different sources and integrate the returned data in the messages into a unified customer database without requiring that the customer reenter the data received from the vendor or otherwise engage in a cumbersome manual transfer of the data from one format to another for entry into the customer s database s .

The client e.g. customer is any suitable computing system that can be used to exchange order messages with an order server . In alternate embodiments the client can be a desktop computer a laptop computer palmtop computers or other type of computer or electronic device capable of transmitting and receiving order messages . The input order message is an order message transmitted from the client through the network connection to the order server . The output order message is an order message received by the client through the network connection from the order server . The order messages are messages preferably based on a tagged document format in which the text of the message is marked with tags indicating format category or other information about the text. In one embodiment the order messages are based on an extended markup language XML format. A memory of the client is encoded with logic instructions for a client ordering process which is a process that performs ordering functions on a processor e.g. microprocessor of the client such as generating input order messages storing the customer s order information in a client database and receiving output order messages returned from the order server . The client is in communication with a client database which is any type of suitable data storage device e.g. disk capable of storing ordering data and other data for use by the client .

The network connection is a communication connection modem connection or network providing communications between the client and the order server . In one embodiment the network connection is a packet based network such as the Internet based on the TCP IP Transmission Control Protocol Internet Protocol . In this embodiment the order messages are based on HTTP Hypertext Transfer Protocol requests and responses that include the ordering information as tagged documents within the request. In such an embodiment the customer communicates with the order server through a network browser such as Internet Explorer manufactured by Microsoft Corporation of Redmond Wash. USA or Netscape Navigator manufactured by Netscape Corporation of Mountain View Calif. USA .

The order server is a server computer including a processor a memory and an input output interface which are connected by the internal circuitry e.g. bus or other interconnection mechanism of the order server . The processor is any type of processing unit e.g. microprocessor which preferably operates electronically to process logic instructions. The memory is any type of memory suitable for use with the processor and preferably includes volatile memory e.g. RAM or random access memory and nonvolatile memory e.g. EPROM or erasable programmable read only memory or disk . The memory stores data such as an input message data set which is included as part of the input order message and an output message data set which is the basis for the output order message as will be discussed in more detail later. The memory is encoded with logic instructions e.g. software code such as object code for an order message manager application which perform on the processor to form an order message manager . The instructions for the order message manager application perform on the processor such that the order message manager includes an order message sorter that sorts incoming order messages to be processed by message processing modules e.g. A B and C . The input output interface provides communications services and connections for the order server to the network connection and to the order database . The order database is any type of suitable data storage device e.g. disk capable of storing ordering data and other data for use by the order server .

In one embodiment a computer program product including a computer readable medium e.g. one or more CDROM s diskettes tapes etc. provides software instructions e.g. logic instruction of the order message manager application for the order message manager . The computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment the software instructions can also be downloaded over a wireless connection. A computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave sound wave or an electrical wave propagated over the Internet or other network provides software instructions for the order message manager . In alternate embodiments the propagated signal is an analog carrier wave or a digital signal carried on the propagated medium. For example the propagated signal can be a digitized signal propagated over the Internet or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of seconds minutes or longer. In another embodiment the computer readable medium of the computer program product is a propagation medium that the computer can receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for the computer program propagated signal product .

In a general summary of the techniques of embodiments of the invention a customer uses the client computer to provide an input order message through the network connection to the order server . The order message manager receives the input order message through the input output interface . The order message sorter of the order message manager determines what type of message the input order message is. The order message sorter then passes the input order message to a message processing module that is capable of handling that type of message. The message processing module processes the input order message obtains data from the order database if need be and produces an output order message for transmission back to the client . illustrate this order processing process in more detail and illustrate sample order documents that can be incorporated into examples of order messages .

In step the order message manager of the order server receives though the input output interface an input order message sent from the client over the network connection to the order server . The input order message includes a document organized in a predefined format e.g. XML document as described in the examples shown in . The order message manager passes the input order message to the order message sorter which evaluates the input order message e.g. examines a header or first lines of the message to determine a type or category for the input order message . The order message sorter then determines which message processing module is suited to process that type of message and passes the input order message to that message processing module . For example the input order message includes an order status inquiry that requests the status of an order that the customer previously sent to the order server through a previous input order message that submitted the order. In one particular example the input order message is an HTTP request sent from the client over the Internet i.e. network connection to the order server that includes the order status inquiry as part of the HTTP request.

In step the message processing module obtains an input message data set from the input order message by using the predefined format of the document in the input order message . For example a status message processing module can examine the document in the input order message e.g. status inquiry to determine which lines tagged elements or parts of the document indicate the order number for which the customer wishes to obtain the status and the customer ID or identifier that identifies the customer who submitted the input order message .

In step the message processing module obtains a resulting or output message data set by processing the input data set obtained from the input order message . For example the message processing module uses the customer ID and order number to obtain information about the status of the order and location of the order e.g. manufacturing shipping etc. from the order database . The message processing module then stores this status information as the output message data set in the memory of the order server until ready to send an output order message that includes the output message data set to the client . Alternatively the message processing module can store the output message data set on the order database until ready to send the output order message to the client .

In step the order message manger provides over the network connection to the client the resulting output message data set in a response or output order message including a document organized in a predefined format suitable for use by the client ordering process as described in more detail for the examples shown in . For example the message processing module of the order message manager provides status information contained in the output message data set in an XML document in an output order message to be sent through the input output interface through the network connection to the client . Thus the output order message includes an XML document that provides the status information in predefined XML format as defined previously in an XML document type definition document so that the client s ordering process can readily interpret the status information extract the status information from the predefined XML document and then i.e. without manual reentry of the status information automatically update the status of the order in the client database .

In one embodiment the client and the order message manager exchange messages in a secure manner. For example the client and the order message manager exchange messages using a digital certificate approach to verify users and or messages. In addition the client and the order message manager can use a secure sockets layer SSL approach to provide security for the messages .

In step the order message sorter of the order message manager receives an input order message over the network connection that includes an input document . For example the embedded order type indicates that the input order message is an order status inquiry that requests the current status of an order that a customer previously submitted in a previous input order message . In such an example the embedded input data set includes information related to the status inquiry such as the customer ID of the order and the order number for the previous order.

In step the order message sorter parses the input document to determine the order type for the input document and the ordering function indicated by the order type. For example the order message sorter reads the header order type element or first lines of an XML input document based on a predefined format that provides the embedded order type information to obtain an extracted version of the order type information . In this example the order message sorter determines that the extracted order type information indicates that the ordering function requested is a status inquiry e.g. check status function for a previously submitted order.

In step the order message sorter selects a message processing module to process the input document for the ordering function indicated by the order type information . For example the order message sorter selects a message processing module that is suited to perform a check status function as indicated by the extracted order type information .

In step the order message sorter transfers the input document to the message processing module selected to process the input document . For example the order message sorter transfers the input document to a status message processing module that can perform the check status function requested by the extracted order type .

In step the message processing module parses the input document to obtain an extracted input data set from the embedded data set in the input document . For example the message processing module that is performing a check status function parses an XML input document having a predefined XML element that identifies the order information such as customer ID and order number in the XML document .

In step the message processing module processes the extracted input data set based on the ordering function indicated by the extracted order type . For example the status message processing module determines the identity of a previous order submitted to the order database as indicated by the customer ID and order number provided by the extracted input data set .

In step the message process module obtains data for an output data set and prepares an output document including an embedded output data set . For example the status message processing module obtains data for the output data set by accessing the order database to obtain the current status for the previous order indicated by the customer ID and order number in the extracted input data set . Then in this example the status message processing module prepares an output document that includes an embedded output data set based on the output data set that includes the status information obtained from the order database .

In step the message processing module sends out an output order message including the output document and embedded output data set . The output order message is one example of the output order message of . For example the message processing module sends the status information in the embedded output data set in the output document in an output order message . The message processing module sends the output order message through the input output interface of the order server over the network connection to the client .

In reference to a header section of the input document provides information on the source of the input document indicated by the tag and the destination of the input document indicated by the tag. The source typically is one company e.g. an OEM that is sending an input order message containing the input document to another company e.g. a vendor supplying one or more components to the OEM . Each company is identified by a unique number or identifier as indicated for example by the identifier for the company originating the input document . The identifier is based on a domain of numbers or identifiers that identify each company as indicated for example by the identity domain which indicates a numbering domain that is referred to as a hypothetical example in as the XYZ domain. In another example the identity domain is based on the Dun and Bradstreet D U N S Data Universal Numbering System system that provides unique identifiers for business entities such as corporations.

An authentication section includes information from the sending company that the receiving company uses to authenticate the input document as coming from a legitimate customer of the vendor. For example the authentication section includes a user identification e.g. identification number or code and a password for that user.

A data section provides the payload or data section for the input document . The data section provides the data for the input message data set which the message processing module extracts from the input document as described for . The payload ID provides a unique number that can be used by the sender s i.e. client s ordering process and the receiver s i.e. vendor s order message manager to identify the input document . The message name entry indicates the category for the command shown in the command entry included in the data section . As shown in the message name entry indicates that a task category e.g. config that is for tasks related to configuration of the component that the sender is ordering. The command entry indicates a command for a specific task shown for example in as list boms which indicates to return to the sender e.g. customer of the input document a list of the bill of materials BOMS for a product sold by the receiver e.g. vendor of the input document . The parameters section lists parameters associated with the command which indicates for example the price list to be used for this product e.g. a price list identified by 1108 the product the customer is considering ordering e.g. as identified by ABC2501 and other information.

In one embodiment the task categories that can be shown in a task category entry include configuration pricing addressing order status order submittal kit references zero pricing and administration. Each task category includes commands that a customer can use to perform ordering tasks in that category. These commands correspond to an API application programming interface implemented in the message processing modules of the order message manager of the order server . See Appendix A for a listing of the commands in the API.

Each task category is summarized in the following The configuration category includes tasks related to configuring a product that the customer is considering ordering. The pricing category includes tasks related to pricing a product such as discounts for a particular market segment of customers. The addressing category includes tasks related to customer addresses such as listing the address of a current customer or providing an address for a new customer. The order status category includes tasks related to the status of an order such as requesting the current status of an existing order. The order submittal category includes tasks related to submitting an order from a customer such as ship to information bill to information contact information shipping method and other information. The kit references category includes tasks related to specific configurations such as configuration kits for products to be shipped to specific countries. The zero pricing category includes tasks related to components such as power cables that are not priced separately that is the price for a component e.g. router covers the price for the zero price components e.g. power cable for the router . The administration category includes tasks related to administering and operating the order message manager such as diagnostic tasks. Appendix A provides examples for commands for these task categories.

In reference to the header section provides identifiers for the sender and the receiver of the output document in a manner similar to that described for the header section of the input document as described previously.

In reference to a response message entry indicates the category for the response. As shown in the response message entry the category is config which corresponds to the category indicated in the message name entry of the input document . A data section provides the payload or data for the output document . The data section is indicated by entries through and entries through as shown in . This data section provides the data for the output message data set which the message processing module incorporates in the output document as described for . For example the input document provides a command to list the BOMS for a product and thus the output document provides sample lists of subcomponents for this product such as power cables and software through documents and rack mount kits . The customer receives the output document and then typically selects the desired subcomponents from those listed in the output document e.g. a specific type of power cable needed when configuring the customer s order.

In reference to the class section indicates a class of components for the system requested in the input document for example a class of power cables as shown in a product entry . In one embodiment the product entry can indicate a product component of a product or subcomponent of a component. The hash entry indicates a hash number that can be used to locate information on the class of components in the vendor s order database . The full path entry indicates the full path to the class information in the vendor s order database . In one embodiment the full path entry follows a hierarchical tree format e.g. parent child grandchild . The description entry provides a text description of the component indicated in the product entry .

The item entries and indicates specific items within the class indicated by the class entry e.g. power cables . For example the item entries and indicate specific types of power cables e.g. USA and Italian power cords within the class of power cables. The item entries and shown in are shown as one example and more entries e.g. power cords for additional countries can be included under the class entry .

In reference to the class entry indicates a class of software for the product indicated in the input document . The minor class entries and indicate minor classes or subclasses of software components under the software class indicted by class entry . Two software items and indicate specific software versions under the minor software class indicated in the minor class entry . Two software items and indicate specific software versions under the minor software class indicated in the minor class entry .

In reference to the class entry indicates a class of documentation related to the product indicated in the input document . The class entry indicates a class of rack mount components for the product indicated in the input document e.g. components that enable the mounting of the product in a rack setup .

The techniques of the invention do not require that the output document include classes minor classes and items as shown in which are shown as one example only of a predefined format.

Thus as shown by the output document the predefined formats shown in allow the customer to readily transfer the data in the output document to a customer s application such as an ordering process or other software application performing on the client. For example the ordering process can read the output document received from the vendor and efficiently interpret the data in the output document by referring to the tags such as and other tags to classify and interpret the data. Then the ordering process can automatically convert the data into a local format used in the customer s client database without requiring ongoing manual or human intervention after an administrator or other operator sets up an automatic mapping between the predefined format of the output document to the format used in the client database .

In summary of the approach of the invention a client e.g. customer provides an input order message that includes an input document providing a command and data in a predefined format. The client sends the input order message to an order message manager performing on an order server . The order message manager interprets the input document based on the predefined format and an order message sorter determines an order type for the input document . Based on the order type the order message sorter directs the input document to a message processing module which implements one or more commands in an order processing API implemented on the order server . The message processing module extracts the input data set from the input document and processes the input data set based on the data and the command indicated in the input data set . The message processing module generates an output data set based on the input data set such as by obtaining data from the order database to use in generating the output data set . The message processing module then incorporates the output data set in an output document to be sent in an output order message to the customer providing a response to the input order message sent from the client .

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the claims that follow Appendix A.

For example the input document and output document can be based on other types of documents than an XML document such as HTML Hypertext Markup Language documents SGML Standard Generalized Markup Language documents or other types of tagged documents.

In other examples the network connection is a local area network LAN such as an Ethernet a wide area network WAN an enterprise wide network a direct line connection or other suitable network or communications connection.

In another example the order server is a PC server computer UNIX server or workstation minicomputer or other type of suitable server computer.

In a further example each message processing module can handle a variable number of commands. For example one message processing module can process all of the commands in one task category. In addition each message processing module can be implemented on a separate server. Generally the order message manager order message sorter and message processing modules are not required to perform on the same computer e.g. order server . That is the functions of the order server can be implemented in a distributed manner such as by several computers connected in a local area network or by the Internet. The functions of a single message processing module can also be implemented in a distributed computing or distributed object manner. Furthermore the data from the input message data set can be divided into subunits of data that can be processed by the different message processing modules for example if the input message data set includes a large number of different types of data or includes multiple commands.

The following appendix entitled Listing of Order Related Task Categories and Commands provides an example of order related task categories and commands suitable for use in order messages illustrating one approach of the invention and is meant to be considered as part of the detailed disclosure of embodiments of the invention. See the discussion for for a description of the task categories. The commands described in Appendix A however are to be considered as an example only and it is to be understood that this example is not meant to be limiting of the invention.

