---

title: Providing support for multiple interface access to software services
abstract: Techniques are described for providing enhanced access to software services or other software programs that provide interfaces for use by clients. The enhanced access may, for example, be provided for a software service having multiple distinct versions with distinct corresponding interfaces, such as if some clients continue to initiate access to older versions of the software service using corresponding older interfaces, while other clients initiate access to a current software service version using a corresponding current interface version. The enhanced access techniques may further include automatically adapting requests that correspond to older interface versions of a software service so that the adapted requests correspond to the current interface version for the software service, and responses may similarly be adapted from a format for a current version of a software service to a format for a prior interface version used by the request that resulted in the response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949999&OS=07949999&RS=07949999
owner: Amazon Technologies, Inc.
number: 07949999
owner_city: Reno
owner_country: US
publication_date: 20070807
---
The following disclosure relates generally to providing support for clients to use multiple interfaces when accessing software services including support for multiple versions of a particular interface.

As the use of the Internet and the World Wide Web Web has become widespread it is increasingly common for users to access and use various types of capabilities provided by remote computing systems over the Web including to search for shop for and order items such as products services and or information that are for purchase rent lease license trade evaluation sampling subscription to etc. In addition to such user initiated interactions software programs on remote computing systems may also interact for various purposes and in various ways. For example there is growing use of the Web to provide so called Web services which typically involve the programmatic interaction of remote applications to exchange information via defined APIs application program interfaces . Web services allow heterogeneous applications and computers to interact and may be defined and implemented using a variety of underlying protocols and techniques. For example some Web service implementations return data in XML eXtensible Markup Language format using HTTP HyperText Transport Protocol in response to a Web service invocation request specified as a URI Uniform Resource Identifier such as a URL Uniform Resource Locator that includes a specified operation and one or more query parameters. Such URI based invocation requests may for example be based on the use of XML over HTTP e.g. as part of the REpresentational State Transfer or REST distributed interaction model that focuses on resources . In other implementations additional underlying protocols are used for various purposes such as SOAP Simple Object Access Protocol for standard message exchange WSDL Web Services Description Language for description of service invocations and UDDI Universal Description Discovery and Integration service for discovery of available services. The use of Web services to enable software programs to interact is in some situations referred to as one example of a service oriented architecture.

While the use of remote software services by software programs provides various benefits various problems also exist. For example each software service will typically provide a distinct interface for others to use when accessing the service such that a software program using multiple remote services may need to manage and support various different interfaces for those multiple services. In addition as a service evolves or otherwise changes multiple versions of the service may be created with the interface to the service similarly changing for some or all of the service versions so as to create multiple distinct versions of the interface. If a provider of such a changing service does not continue to support previous versions of the service a client software program that uses the service may further need to be modified to adapt to the newest version of the service such as to use the newest service interface thus creating further difficulties for the client software program s creator and users. Alternatively the provider of the changing service may minimize that problem by continuing to provide and support some or all of the previous versions of the service but such continued support is difficult and expensive for the service provider. For example the service provider may need to maintain separate software code for each such supported version of the service which increases the storage needs maintenance costs and testing requirements for the service provider. Furthermore in such situations the service provider may need to create and maintain a separate front end handler that receives each client request and directs the request to the appropriate separate software code for the service version for that request which increases the computing nodes and development costs for the service provider.

Techniques are described for among other things providing enhanced access to software services via interfaces provided for clients to use in obtaining functionality. The service interfaces may for example be defined APIs that are specified in various forms such as using WSDL based interfaces for Web services. In at least some embodiments the enhanced access is provided for one or more software services or other software programs that each has multiple distinct versions with distinct corresponding interfaces such as in situations in which some clients may continue to initiate access to older versions of the software service using the corresponding older interfaces for those versions while other clients initiate access to a current version of the software service using a corresponding current version of the interface. In such embodiments the enhanced access techniques may include automatically adapting requests that are specified using older interface versions of a software service so that the adapted requests reflect the current interface version for the software service such as to allow the current version of the software service to handle some or all such requests. Furthermore in at least some such embodiments when a response to a request is obtained from a current version of a software service in a format corresponding to the current interface version for the software service but the initial received request was specified using a prior interface version corresponding to a prior version of the software service and was adapted to the current interface version the enhanced access techniques may further include automatically adapting that obtained response to reflect a format for the prior interface version used by the request. Additional details related to the described techniques for providing enhanced access to software services are included below. In addition in at least some embodiments at least some of the described techniques are automatically performed by an embodiment of one or more Interface Adaptation Manager systems as described in greater detail below.

In at least some embodiments the enhanced access to software services includes for each of one or more software services provided by a software program or system providing access to multiple versions of one or more interfaces to the software service. For example when a software program is executing on a first computing system and uses a remote service provided by a distinct second computing system over one or more networks the enhanced access may include the second computing system transparently providing access to a current version of the remote service when functionality is requested via one or more prior interface versions for the remote service. Such enhanced access to software services may provide various benefits such as by incrementally encouraging use of a current interface version that provides new functionality while continuing to support a prior interface version e.g. based on what types of prior interface requests are accepted and adapted and what are not accepted such as to allow the new functionality to be accessed only through the corresponding current version of the interface .

In at least some embodiments the enhanced access to software services is provided at least in part by successively adapting each request to a service until the adapted request reflects the current version of the interface for service such as by using changes from each successive prior version of the interface e.g. from oldest version to newest version to determine how to adapt the request. For example a request for invocation of a method of version 1.1 of a first interface Interface One may be adapted to a current version e.g. version 2.0 of the method of Interface One by adapting the request to use the method signature e.g. a specification of the particular input and or output parameters for the method in a specified order that is expected by the current version and then invoking the corresponding method of the current version of the first interface. As one example if in version 1.1 a particular method used a particular parameter but in version 2.0 that parameter was dropped for that method then a method call specified in accordance with version 1.1 that includes a value for the dropped parameter may be modified to not include the dropped parameter. In some embodiments a supplied request may be adapted a number of times from an initial prior version of the method through one or more intermediate prior versions of the method until the request is successively adapted to the format expected by the current version of the method.

In some embodiments one or more adapter components also referred to as adapters herein and in some embodiments each including adapter specific software code are provided for some or all versions of an interface to a software service. In particular the interface versions for the software service may reflect a succession of interface versions from oldest to newest and at least some such adapter components are each configured to adapt received requests for the service from a version of the interface corresponding to the adapter component to a next version of the interface in the succession such as to allow an adapter component for the next interface version to successively adapt the request to the following version of the interface in succession. Accordingly such adapter components may be arranged in a chain such that each such adapter component is responsible for adapting the request for use by the next adapter component in the chain. A request for functionality for a service may be specified using an API for the service and may take many forms for example method or function calls messages remote procedure calls remote method invocations etc. Each adaptation by an adapter component modifies the request as appropriate so as to include a valid request signature expected by the next interface version in succession culminating with a request that is formatted to be acceptable to the current version of the interface to the service. Such adaptation may include adjusting parameters removing parameters adding parameters changing method names or other indications of an operation to be performed etc. as appropriate to correspond to the expected interface version. Furthermore in some embodiments and situations a particular method s signature or other operation access definition may not change between two versions of an interface but the underlying functionality corresponding to the method or other operation may change in the newer interface version. In at least some such embodiments and situations an adapter component may similarly adapt invocations of that method or other operation that use the older interface version so that the older unchanged functionally corresponding to the older interface version is supplied for the invocations e.g. by changing an invocation so that it accesses a separate older version of the method or operation that is maintained to support the older unchanged functionality for the older interface version by modifying an invocation so that it accesses the newer version of the method or operation but with changed parameters or in another changed way so that the newer method operation version provides the older unchanged version of the functionality etc. . Thus each adapted request is reflective of one or more of the changes made from that version of the interface to the next version. Additional details related to types of interface changes and corresponding types of request and response adaptations are included below.

Responses by a remote service to requests are similarly adapted in at least some embodiments. Thus starting with a response generated by a service in accordance with requested functionality such as in a format corresponding to the current version of the interface and service the response is modified to be backwards compatible with each preceding version of the interface and service until the response is consistent with the interface version that was used by the request. In some embodiments the request and response adapter component for a version of the interface may be combined in a single adapter component for that interface version while in other embodiments each interface version may have multiple adapter components e.g. distinct adapter components for requests and for responses . In addition in some embodiments some or all methods or other operations that are made available via a particular interface version may each have a distinct adapter component while in other components at least some adapter components may each handle some or all operations for a particular interface version.

In some embodiments requests from clients to an older interface version that attempt to specify newer functionality that is only available in more current versions e.g. a new operation added to the current interface version are refused for example by indicating an error condition to the clients. Such handling of requests encourages modification of the clients to use the current version of the interface in order to take advantage of newer functionality as well as ensuring consistency for a particular interface version so that clients continue to receive the same functionality for that interface version even if related newer functionality in a newer interface version has changed. In other embodiments such requests that specify functionality inappropriate for a corresponding interface version may be handled in other manners.

Furthermore while in some embodiments the described uses of adaptation adaptor components and corresponding techniques are applied to manage multiple versions of an interface for a remote service in other embodiments these techniques may be applied in other manners such as to adapt requests and response between multiple distinct interfaces to a service e.g. different interfaces to correspond to different types of communication technologies different types of client devices different types of client users etc. to adapt requests and responses for local services etc.

The task exchange system may be implemented in various ways in various embodiments such as in the form of a software system executing on one or more computing systems or devices e.g. in a distributed manner such as on a peer to peer or grid network . In addition the types of tasks to be performed may have various forms in various embodiments. For example there is a large class of tasks which computers and application programs cannot easily automatically perform but which humans can typically easily perform referred to herein as human performance tasks. In at least some embodiments the system may enable the submission and performance of such human performance tasks. The ability of humans to perform such tasks is due at least in part to various cognitive and other mental capabilities of humans that are not easily encoded in automated programs such as the ability to use human judgment to form opinions to perform abstract or common sense reasoning to perform various discernment and perception tasks e.g. visual and aural pattern recognition such as based on experience to use cultural awareness and emotional intelligence and to perform various other everyday yet highly complex kinds of perception cognition reasoning and thinking.

In the example of various task requester clients interact with the task exchange system in order to supply tasks that are available to be performed by others as well as to perform other related activities. For example in addition to supplying tasks a task requester may interact with the system to obtain results from the performance by other users of previously supplied tasks to obtain information about an account of the task requester e.g. information about financial payments made to other users for performing tasks supplied by the task requester information about previously specified preferences etc. to search for information about tasks and or about users who are available to perform tasks to specify types of qualifications that users may need to perform supplied tasks etc. Accordingly the various task requesters may interact with the task exchange system by sending requests to the system via services interface s and by receiving corresponding responses as appropriate via the services interface s . If the task requesters are interacting with the task exchange system remotely then the services interfaces s may take the form of one or more remote services such as Web services. The task requesters may take various forms such as a task requester user who interactively accesses the system e.g. via a GUI or graphical user interface displayed on a computing system of the task requester user not shown such as a GUI based on Web pages provided by the system and or based on execution of a client side application on the computing system with the Web browser and or client side application interacting with the interface s or a software application that is programmatically interacting with the system e.g. via an API of the system such as an API provided at least in part by the services interface s on behalf of a related task requester user.

When a task requester supplies information about one or more tasks the system stores the task related data as part of task information which may then be made available to other users to perform the tasks in a manner specified by the task requester or otherwise determined by the system . The supplied information for a task may include a variety of types of information including details related to the task e.g. information to be analyzed a question to be answered etc. one or more qualifications of any task performer user who performs the task one or more geographical locations associated with the task one or more capabilities and or other current characteristics of one or more devices to be used as part of performing the task one or more other criteria related to task performance e.g. deadlines for completion format of results from task performance etc. one or more associated rewards e.g. monetary payments to be provided to one or more task performer users who successfully perform the task etc.

In this example embodiment the system stores various data across multiple alternative storage partitions such that at least some types of data are stored only on a single partition. The system may organize data based on users with which the data is currently associated so as to store a group of data related to a particular user together on a particular storage partition. Thus for example when a particular task requester user supplies information about a new task the system determines an appropriate storage partition to store the information about the new task along with other information related to the task requester user. If the task requester is an existing user who already has information stored in a particular storage partition on a particular computing node the system may merely select that existing storage partition. Alternatively If the task requester user is a new user or otherwise does not currently have an existing associated storage partition the system may determine an appropriate storage partition by considering one or more of a variety of types of information such as about possible storage partitions about the new user and or about other users that are related to the user.

As shown the system may include various alternative computing nodes that store data related to task requester users including example requester computing nodes and . As illustrated in detail with respect to requester node each requester node may include one or more storage partitions that each store data related to one or more task requester users. Furthermore in this illustrated embodiment the computing node associated with a storage partition corresponding to a task requester user not only provides storage of data related to the task requester user but also provides at least some of the system functionality for the task requester user via an executing software program not shown such as to process and respond to various types of requests received from the task requester user. The computing nodes may have various forms in various embodiments such as to each be a distinct physical computing system to be one of one or more virtual machines hosted on a physical computing system to include multiple physical computing systems working in concert etc. In addition in other embodiments storage partitions may have other forms such as to be split across multiple computing systems and or to be stored on dedicated storage devices that do not themselves provide additional computing capabilities.

Thus when a task requester user supplies information about a new task the task related information may be stored together on a single storage partition with at least some other information specific to the task requester user. In this example the various task information for the system is stored in a distributed manner across the partitions of the requester nodes although in other embodiments such task information may be associated with other users in at least some situations e.g. to temporarily associate information about a task with a task performer user while the task performer user is performing the task .

As previously noted various types of information other than about supplied tasks may also be associated with task requester users and grouped together on storage including various administrative information e.g. contact information payment related information previously specified user preferences etc. and information about previous interactions with the user. Such user information may be supplied by the user and or generated by the system and is stored as user information by the system in this example. As is illustrated such user information may be stored by the requester nodes when the user information corresponds to task requester users but may additionally be stored on task performer computing nodes when the user information corresponds to task performer users. In a manner similar to the requester nodes the system may include various alternative task performer nodes such as performer nodes and . As illustrated in detail with respect to performer node each performer node may include one or more storage partitions that each store data related to one or more task performer users.

Thus when a task performer user client submits a request to or otherwise interacts with the system the interaction is handled in a manner similar to that previously described with respect to the task requester users . The interaction may be for example to initiate performance of a specified task that is supplied by a task requester user to obtain information about an account of the task performer e.g. information about financial payments received from other users for performing tasks supplied by those other users information about previously specified preferences etc. to search for information about tasks and or about other users to provide information about qualifications of the task performer user that may assist in performing various types of supplied tasks etc. The task performer users may similarly interact with the system in various ways such as via a GUI of the system that is displayed on computing devices not shown of the task performer user or via a software program not shown that invokes services provided by services interface s .

As with requests from or other interactions by task requesters after receiving a request from a particular task performer user the system determines an appropriate storage partition for the task performer user on one of the performer nodes such as a first partition on performer node . For example in embodiments in which at least some nodes may act as both requester nodes and performer nodes or in which distinctions are not made between requester nodes and performer node such that there is merely a group of computing nodes that may each store requester related and or performer related data the data for the new task performer user may be co located on a particular storage partition with the data for one or more related task requester users who supply types of tasks for which the task performer user has an affinity.

After determining the appropriate storage partition for the task performer user the system transfers control of handling the task performer user s interaction to the computing node associated with the storage partition. For example if the interaction is a request by the task performer user to perform a specified task supplied by a task requester user the computing node associated with the task performer user s storage partition may interact with the computing node associated with that task requester user s storage partition to retrieve information about the task to be performed such as under control of a software program not shown that is executing on the computing node associated with the task performer user s storage partition in order to provide some of the functionality of the system . In so doing in some embodiments the task information may be temporarily associated with the task performer user s storage partition while the task is being performed while in other embodiments the task information may remain associated with the task requester user s storage partition but otherwise provide access to the information for the task performer user. After the task performer user performs the task which may involve the task performer user supplying information and or performing offline activities external to the system and the task performer user s computing device information about the results of the task performance may be stored in the task performance user s storage partition and then made available to the task requester user in various ways for example by automatically forwarding them to the task requester supplying them to the task requester when the task requester user requests them e.g. via services interface s etc. The aggregate task performance results information from the various task performer users then provides the task performance results information for the system .

Thus the example system stores various types of data and provides various types of functionality to clients e.g. via services interface s which in this example embodiment are task performer users and task requester users acting as clients of the system . In at least some embodiments the services that are provided via services interface s are Web services whose interfaces may be specified in various manners for example by defining an interface using a WSDL Web Services Description Language specification. Access to such interfaces may be implemented in various ways such as via HTTP and or SOAP or similar remote method invocation or message calling mechanism.

As mentioned services and their interfaces such as services interface s may evolve over time and in at least some embodiments one or more computing systems implementing the task exchange system of may support multiple interface versions for one or more services. In some embodiments an interface adaptation manager system is implemented to provide access to multiple versions of one or more of such interfaces such as in a manner that is transparent to clients and is discussed in greater detail elsewhere. In particular some embodiments provide interface adapter components which may be chained together to adapt requests and responses from one version of a service interface to another version of the same service. Accordingly these chained adapters provide a type of pipeline for processing requests and responses until they are transformed into a format acceptable to a particular version. Other embodiments may provide chained interface adapters for other purposes and or that provide different behaviors such as adapting requests from one version of a service interface to a distinct interface to either the same or a distinct service thereby providing a type of translation between services.

In one example embodiment an interface adaptation manager system routes requests for one or more software services to an interface adapter component corresponding to interface versions used for the requests e.g. an initial version of an interface of a service and to route resultant responses to appropriate clients that initiated the requests that resulted in the particular resultant responses. illustrates an example embodiment of a software service interface adapter arrangement for providing support for multiple versions of an interface to a particular software service such as a Web service. also shows interactions that occur in an interface adapter component chain in response to client requests for a software service and when distributing responses from the software service back to requesting clients.

In particular illustrates an example embodiment in which example clients client client and client N are making requests to a software service which in this example embodiment supports three prior versions in addition to the current version. Each of the four service versions has a distinct version of the service interface in this example embodiment and an example embodiment of an interface adaptation manager system is provided to manage use of the multiple interface versions. In particular the interface adaptation manager receives the various requests which each designate or otherwise correspond to a particular version of the interface for software service and forwards each request to an interface adapter component corresponding to the interface version for that request. For example client is shown requesting functionality e.g. one or more operations using version 1.x of the interface to service client is shown requesting functionality using version 2.0 of the interface to service and client N is shown requesting functionality using the current interface version to service . Such a scenario may occur when for example the functions available via service have changed over time such as for example to include additional capability e.g. methods messages and or parameters and the corresponding interface definitions e.g. WSDL based definitions have change to reflect the service changes. The interface adaptation manager is shown in this example as being connected via one or more communication mechanisms and to multiple interface version adapter components and which have been chained together to provide requests to and responses from the current service implementation . The interface adaptation manager may be a separate component that contains program code e.g. an instance of an interface adaptation manager object or may be an abstraction of code contained elsewhere in the server computing system that implements the service.

When a request arrives at an interface adapter component such as one of adapter components or it is modified e.g. translated reformatted reprogrammed etc. so as to adapt the request to the next version of the interface and then passed to the next interface adapter component in the request adaptation chain that corresponds to that next interface version. For example when client makes a request e.g. a communication which indicates a particular operation to be performed or method to be invoked to an interface version 1.x of the software service implementation the interface adaptation manager routes the request using communications path to the adapter component that corresponds to the version 1.x interface namely interface adapter component . Once it receives request the interface adapter component uses its request adapter component to adapt the request to a format suitable for the next adapter component in the chain namely interface adapter corresponding to version 2.0 of the service interface. The adapted request which is in a format suitable for interface adapter is then forwarded to interface adapter for further processing.

In the illustrated embodiment each interface adapter component is responsible for adapting requests from the corresponding version of the interface to a next newer version of the interface and then forwarding the adapted request to the next interface adapter component in the chain e.g. that corresponds to the next newer version of the interface until the request has been adapted to the current interface version so that the current implementation of the service may be invoked to process the request without further adaptation. In other embodiments adapter components could be structured and used in other manners such as to similarly have chains of adapter components but with the requester adapter component for a particular version of the interface instead being configured to receive requests in a format corresponding to a prior version of the interface and to then adapt the received requests to the particular interface version before forwarding it on to the next adapter component in the chain.

Continuing the example when interface adapter component which corresponds to interface version 2.0 receives request in the format corresponding to the interface version 2.0 request adapter component then adapts request to a format suitable for the next interface version. In this example the next interface version is version 2.1 which is the current interface version for the service so request adapter component forwards the adapted request which has been adapted to the format corresponding to the current interface version 2.1 to the next adapter component in the chain which is interface adapter component . At this point since interface adapter component corresponds to the current interface version no further adaptation is needed for the request and the interface adapter component passes the received request through without modification to the software service as request which then invokes or otherwise initiates corresponding functionality of service using the request as input . In the illustrated embodiment the interface adapter component includes a request adapter component which merely passes the adapted request through without modification but in other embodiments may not include any requester adapter component or may include a requester adapter component that performs other options e.g. performs various predefined pre processing even for requests specified in accordance with the current interface version .

Once the request is processed by the software service a generated resultant response is then passed back down the response adaptation chain to the interface adapter component that originated the request which in this example was interface adapter component corresponding to version 1.x. In a similar manner to the adaptation of the request the response is successively adapted by the interface adapter components in the chain so as to successively correspond to each intermediary interface version supported by the chain of adapters. For example as part of performing an operation that corresponds to request the service implementation in the example embodiment performs code using input so as to generate output . Output is forwarded via response to response adapter component of the interface adapter component corresponding to the current interface version of the service with response being provided in a format corresponding to the current interface version 2.1. Response adapter component adapts the response so that it corresponds to the prior interface version in this example version 2.0 and then forwards adapted response to the next interface adapter component in the chain which is the interface component that corresponds to the prior interface version in the succession from oldest prior interface version to current interface version . The response adapter component of interface adapter receives and adapts response to adapted response which is in a format corresponding to version 1.x and then forwards adapted response to interface adapter component that corresponds to version 1.x. Since interface adapter component corresponds to the interface version designated by Client in the initial request and thus Client expects to receive a response in a format corresponding to version 1.x the response is not adapted for any prior interface versions or forwarded to any additional interface adapter components corresponding to any such prior interface versions. Instead the adapted response in the format corresponding to interface version 1.x is returned to the client via interface adaptation manager and communication mechanism . In other embodiments response adapter could instead be a pass through component and the response adapter components and could instead each receive responses in the format for the interface version corresponding to the prior interface adapter component in the chain the next interface version in the succession from oldest to newest and adapt the response to the format for the interface version corresponding to their interface adapter components.

In a similar manner the request from client is specified in accordance with interface version 2.0 and the interface adaptation manager provides the request to interface adapter component via communication mechanism . In a manner similar to that described with respect to request from client the request adapter component will adapt the request to the format corresponding to interface version 2.1 and forward the adapted response to request adapter component of the next interface adapter component in the chain which will then pass the request through to the service for processing. The resulting response will be forwarded along the response chain to interface adapter component so as to be successively adapted until the format corresponding to version 2.0 is reached in this example with only a single adaptation being performed by response adapter component and then provided to client in that format via communication mechanism . Thus by using a version of the interface that is closer to the current interface version than was used by client client s request and response do not undergo the adaptations by request adapter component and response adapter component which may cause the response to be received more quickly and with less computing resources of the provider of the service being used.

Client N may similarly specify a request in accordance with current interface version 2.1 and the interface adaptation manager provides the request to interface adapter component via communication mechanism for handling in a manner similar to that previously discussed. Furthermore in the illustrated embodiment a client such as client N may in at least some situations be allowed to directly request an operation via the current interface version without interacting with the interface adaptation manager such as by directly interacting with the current version interface adapter component shown as a dashed line and or by directly interacting with the current service implementation shown as a dot dashed line . In such embodiments corresponding responses may be similarly provided directly to client N without use of the interface adaptation manager system. If so such direct functionality access may provide various benefits such as faster responses to the client and or less use of computing resources by the provider of the service . Other arrangements may also be supported in other example embodiments or with modifications to the described embodiment.

The adaptations that may be performed by each adapter component may be of various types in various embodiments. In one such example embodiment it is desirable to discourage the use of older versions of an interface while still supporting equivalent functionality of the older versions. In order to accomplish this motive each adapter component corresponding to a prior interface version may validate received requests against the functionality available in that corresponding prior interface version. When a request is specified for a particular interface version but requests functionality not offered until a later more recent version the adapter component may refuse the request such as by generating an error condition. One mechanism for implementing such behavior is through the use of blacklists of functionality which let an adapter component know which operations e.g. functions methods messages etc. are not supported by the corresponding version of the interface e.g. a blacklist that reflects new functionality added to the next version of the interface .

In addition adapter components may need to adapt a request format to a format for a next interface version in the succession if for example an operation in the corresponding interface version continues to be available in the next interface version but is changed in one or more relevant manners e.g. the parameters values ordering etc. . In that instance when the interface adapter component is generated differences between the interface version corresponding to the interface adapter component and the next interface version in the succession are identified and the adapter component is configured to modify the request to accommodate those changes. For example when new parameters are added to an existing operation in the next interface version the adapter component corresponding to the interface version prior to that next interface version may refuse received requests that use the new parameter such as by using a blacklist to deny the request similar to the blacklist used to detect a new operation. If the received request specifies parameters in accordance with the existing operation in the prior interface version the adapter component may in at least some cases generate a value for the new parameter as part of the adaptation of the received request such as by using default parameter values. One such example is when a service has added mandatory parameters that were not mandatory for the interface version corresponding to the adapter component e.g. where optionally allowed in the prior interface version were not allowed in the prior interface version were specified in a different manner in the prior interface version etc. .

In addition when input parameters that were present for an operation in a prior interface version have been removed for the operation in a next version of the interface a request may be adapted by the adapter component for the prior interface version to reflect the removed parameters. For example in some situations in may be appropriate to adapt the request by removing any values specified for the removed parameter. Alternatively if the software service continues to support the prior version of the service in which the removed parameter is used the request may be adapted by passing a value specified for the removed parameter along in the adapted request but in a manner that is designated to be ignored by subsequent adapter components e.g. by tagging or otherwise flagging such parameter values such as with an indication of the prior interface version to which to parameter values correspond . In this manner the subsequent adapter components will continue to pass the designated removed parameter values along and the software service will eventually receive the designated parameter values and use them as part of providing the prior version of the service. Such removed parameters also referred to as ghost parameters may further be handled in various ways by subsequent adapter components in at least some embodiments and situations. For example if a later version of the interface adds back such a previously removed parameter then a blacklist rule may be created to reject such a request.

When an operation present in a prior interface version is removed in a next version of the interface a request may be adapted by the adapter component for the prior interface version to reflect the removed operation in a similar manner to that for removed parameters. For example the request may be adapted to instead invoke one or more other substituted operations available in the next interface version such as if the substituted operations provide similar functionality. Alternatively the specification of the removed operation may similarly be designated as a ghost operation in the adapted request such as to be passed along to the software service to provide functionality corresponding to the prior interface version.

Output parameters may be handled similarly including for output parameters that are added removed or otherwise changed from a prior version of the interface to a next version of the interface. For example if a more recent version of the interface returns an output value that was not used for a prior interface version then it may be desirable to remove or otherwise blacklist the newer output value in the adapted response. Alternatively if a more recent version of the interface does not return an output value that is expected by a prior interface version such as for an output value removed from the more recent interface version the response adapter component may generate an output value e.g. by using a default value or otherwise create a ghost value to carry through the response chain. Other logic also may be implemented.

Thus chains of adapter components may be used to successively adapt requests and or responses to correspond to a succession of versions of an interface. In addition to providing various benefits with respect to handling requests corresponding to multiple versions of an interface the use of such adapter components may provide significant benefits when generating a new version of a software service and a corresponding interface adapter component such as part of a software development process before the new software version is executed to handle requests from clients. In particular adding a new current interface version may only entail adding a request adapter component to adapt requests specified in accordance with the previous current interface version to the new current interface version and adding a response adapter component to adapt responses specified in accordance with the new current interface version to the previous current interface version such as to accommodate changes between the previously current interface version and the new current interface version.

The interface adapter arrangement for providing support for multiple versions of an interface to a software service as illustrated in may be incorporated to support remote services for various types of software services and systems including a task exchange system such as that illustrated in . illustrates an example environment that uses the example software service interface adaptation mechanism demonstrated in to provide multiple versions of interfaces of one or more services of an embodiment of the task exchange system to one or more client systems.

In particular an example task exchange system is shown in providing one or more services and with one or more corresponding interfaces and Interface and Interface K as part of the TES services interfaces . Each such software service interface and is shown using a separate interface adapter chain in the example embodiment of although other arrangements are contemplated. Such services and their interfaces may provide one or more operations related to supplying tasks to be performed for request by one or more task requester client systems and or one or more operations related to the performance of tasks for request by one or more task performer client systems . For example task requester client system may request an operation of the task exchange system via network e.g. to supply a task that is available to be performed and a generated response may be subsequently returned to the requester system e.g. results of performance of the task an indication that the supplied task has been made available for performance etc. . Similarly task performer client system may request an operation of the task exchange system via network e.g. to initiate performance of a particular task to supply results of performance of a task etc. and a generated response may be subsequently returned to the performer system e.g. a confirmation of the action being performed .

After a request to the TES services interface is received for a particular service the interface adaptation manager of the corresponding interface for that service is invoked with the received request. For example a request from task requester client system may result in invocation of the interface adaptation manager of interface so as to forward the request to one or more interface adapters that adapt the request to correspond to the current implementation of TES service . The TES service then generates and returns a corresponding response not shown which is adapted as needed and returned to the TES services interface which in turn forwards the adapted response back to the requesting client system via network .

For ease of illustration the interfaces and Interface and Interface K their associated interface adaptation managers and and interface adapters and are shown as part of the TES services interface in this example embodiment such as to reside in or be otherwise implemented by the task exchange system . However it is to be understood that since the task exchange system may be distributed and or implemented by multiple computing systems including one or more requester nodes and one or more performer nodes the TES interfaces including interfaces and may actually be implemented and or reside on one or more of such requester nodes or performer nodes. In addition one or more of the implementations of TES service and TES service K may be implemented by multiple computing systems including one or more of the requester nodes or performer node. Furthermore in some embodiments the functionality of such interface adaptation manager systems may be provided by a third party and made available for use with the task exchange system and or one or more other systems such as for a fee. Accordingly the abstraction illustrated in may be implemented by a wide variety of computing system configurations.

For example referring to implementations of the TES service and TES service K and may be provided by the example task exchange system as part of the services interface s in a distributed manner by one or more requester nodes and or by one or more performer nodes . In addition in at least some embodiments the requester nodes may perform various interactions between themselves and the performer nodes may perform various interactions between themselves although such interactions are not illustrated here. Furthermore such interactions may in at least some embodiments be part of providing the TES services interface and or . In this manner various computing nodes of the system may interact in various ways by accessing services and or interfaces provided by other computing nodes and thus provide and or receive various functionality of the task exchange system.

In this example embodiment the techniques for enhanced access to remote services are provided and used by a task exchange system. By enabling large numbers of unaffiliated or otherwise unrelated task requesters and task performers to interact via the intermediary task exchange system in this manner free market mechanisms may be used to efficiently perform tasks with location based and or device based criteria regarding task performance. Additional details related to examples of interactions of users with particular embodiments of task exchange systems are included in pending commonly owned U.S. patent application Ser. No. 10 990 949 filed Nov. 16 2004 and entitled Providing an Electronic Marketplace to Facilitate Human Performance of Programmatically Submitted Tasks and in pending commonly owned U.S. patent application Ser. No. 11 396 286 filed Mar. 31 2006 and entitled Facilitating Content Generation Via Messaging System Interactions each of which is hereby incorporated by reference in its entirety. Nonetheless it will be appreciated that the described techniques may further be used with a wide variety of other types of systems and in other types of situations.

An embodiment of an interface portion of a task exchange system is executing in memory and it interacts with the client computing systems and over a network using the network connection e.g. via the Internet and or the World Wide Web cellular network etc. . In particular users of task requester client computing systems may interact with the system interface in order to provide information about available tasks to be performed as well as to perform other related interactions. Similarly task performer users may use task performer computing systems to interact with the system interface to obtain information about available tasks and provide task performance results information as well as to perform other related interactions.

The illustrated embodiment of the system interface further includes one or more interface adaptation manager systems and corresponding adapter components to support one or more versions of one or more interfaces for services . In the illustrated embodiment the services are shown as executing in memory but in other embodiments may be provided in other manners such as via services not shown provided by computing nodes e.g. services implemented by an executing software component . Furthermore while not illustrated here in some embodiments one or more other software components may be provided to facilitate creation of adapter components such as when a new current version of a software service and corresponding interface are created e.g. by automatically analyzing differences between interface versions and automatically generating some or all of corresponding adapter components .

As previously described for at least some interactions initiated by the client computing systems and the system interface responds by identifying an appropriate storage partition for a user associated with the interaction and then directs a computing node associated with that storage partition to handle the interaction. In particular in this example the server computing system is connected to multiple task exchange system alternative computing nodes via another network e.g. a network internal to the task exchange system such as when the computing nodes are not directly accessible to external computing systems such as computing systems and . Each of the alternative computing nodes includes at least one storage partition to store data for one or more types of users and access to such storage partitions may be managed in some embodiments by an optional storage access manager component executing on the computing node. While not illustrated in detail here in some embodiments the computing nodes may instead be of varying types e.g. separated into requester nodes and performer nodes such as to support different types of functionality corresponding to those types of users separated by offering different types or levels of capabilities such as if some computing nodes support higher levels of quality of service and or include additional capabilities for use by premium customers etc. .

When one of the computing nodes is directed to handle an interaction with a user or in response to other types of events one or more software programs executing on that computing node may perform various actions in response. For example at least some of the computing nodes may each provide one or more services that are available to other computing nodes and in some situations the software program s may invoke or otherwise interact with one or more remote services on other computing nodes as part of the response to the user interaction or other event. If so as discussed in greater detail elsewhere one or more interface adaptation managers and or adapter components may be invoked to adapt a request for a remote service or a response generated accordingly.

In addition in at least some embodiments and for some types of interactions the system interface may directly handle the interactions without directing the interactions to particular computing nodes . For example the task exchange system may maintain some types of data in a general data store that is not distributed among the computing nodes such as in a database on storage . If so the system interface may respond to requests to access or change such data directly without using the computing nodes . As described elsewhere the system interface may provide enhanced access to the services in at least some embodiments by supporting multiple versions via the adaptation managers and the adapter components . In other embodiments such general data may not be maintained and used. Furthermore in some embodiments the system interface and or other portions of the task exchange system may optionally be separated into multiple components that each provides one or more distinct types of functionality although particular such components are not illustrated in this example embodiment.

It will be appreciated that computing systems and nodes and are merely illustrative and are not intended to limit the scope of embodiments of the present disclosure. The task exchange system may instead be executed by multiple interacting computing systems or devices and computing system may be connected to other devices that are not illustrated including through one or more networks such as the Internet via the World Wide Web Web or other electronic communications network e.g. cellular based network public switched telephone network . More generally a client or server computing system or computing device or a computing node may comprise any combination of hardware firmware or software that can interact including without limitation desktop or other computers network devices PDAs cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders game consoles media players and various other consumer products that include appropriate inter communication capabilities. In addition the functionality provided by the task exchange system and by the interface adaptation manager system may in some embodiments be provided via various components and may be combined in fewer components or distributed in additional components than those described herein. Similarly in some embodiments the functionality of some of the components may not be provided as part of the task exchange system or the interface adaptation manager system and or other additional functionality may be available. As one particular example in some embodiments an interface adaptation manger system may be implemented in a distributed manner by using multiple interface adaptation manager objects that each represents a remote software service or an operation corresponding to a remote software service.

It will also be appreciated that while various items are discussed or illustrated as being stored in memory or on storage while being used these items or portions of them can be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computing system via inter computer communication. Furthermore in some embodiments some or all of the components may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The system components and data structures may also be transmitted via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of the present disclosure may be practiced with other computer system configurations.

The illustrated embodiment of the routine begins at block where an indication is received of an invocation of an interface for a specified software service e.g. by an executing software program such as a software program executing locally or instead from a remote software program of a response received from a remote service to a prior interaction or an indication of other data or other action to take. The routine continues to block to determine the type of received indication and continues to block if it is determined that an indication was received of an invocation of or other initiated interaction with an interface of a specified software service. In block the routine determines which version of the interface to the specified service or which of multiple interfaces to the specified service has been designated and any additional tracking information that is used such as data structures for storing ghost parameters blacklist structures etc. According to one example embodiment the routine continues in block to determine whether the indicated request is a valid one based on the designated interface version and if so continues in block or otherwise executes a suitable error handling mechanism not shown such as to generate an error. Alternatively such validation if performed may instead be handled by each individual interface adapter component routine as described below. In block the routine then determines whether the indicated request is specified using the current version of the interface in which case no adaptation is used or a prior version of the interface.

If the request specifies the current interface version then the routine continues to block to forward the unadapted request to the current interface version of the specified service in order to process a requested operation. Otherwise the routine continues to block to forward the request to an initial interface adapter component that corresponds to the version of the interface specified in the request. As described elsewhere this initial interface adapter will then adapt and forward the adapted request as appropriate to a next adapter component in succession until the request is adapted to the current version of the interface of the requested service. An overview of an example adapter component routine for adapting a request from an older prior interface version to a newer interface version is described relative to .

If it was instead determined in block that the type of received indication in block was a response from a remote software service to a prior operation requested from the remote service the routine continues to block to receive the corresponding response. In the illustrated embodiment the received response is in a format corresponding to a version of the interface used for the prior request that resulted in the response such as after being adapted by one or more response adapter components. An overview of an example adapter component routine for adapting a response from a version of an interface to a prior interface version is described relative to . The routine then continues to block to forward the received response to the software program or other client that initiated the prior associated request.

If it is instead determined in block that the type of received indication in block was of another form such as an indication of other received data or to take other action the routine continues to block to respond to the received indication as appropriate e.g. to take a specified action if appropriate . Such other indications may be of various types in various embodiments such as a request to update an interface adapter chain to provide an additional interface adapter in the chain an expiration of a timer or other indicator to retry a prior interaction that failed a request from an administrator to perform an administrative operation etc. After blocks or the routine continues to block to determine whether to continue. If so the routine returns to block and if not continues to block and ends.

The illustrated embodiment of the routine may perform other actions in other embodiments. For example while not illustrated here in other embodiments the routine may provide responses or other status messages to a software program or other client from who an indication is received in block such as immediately in response to the receipt of the indication in block after blocks and or even if a response is not received e.g. to indicate that the interactions have occurred etc. In addition in at least some embodiments various interactions with adapter components may be performed such as to add or remove support for particular versions of the interface. It will further be appreciated that the task exchange system and or interface adaptation manager system may have other components that provide a variety of other types of functionality as part of their operation but that are not described in detail here.

The routine begins in block to receive a request specified in accordance with a version of the interface such that the routine is currently being performed on behalf of the adapter component corresponding to that interface version. Thus when use of a chain of multiple adapter components is first initiated for a received request that designates a particular prior interface version the routine will initially be invoked on behalf of the adapter component that corresponds to that prior interface version which is the oldest interface version in the chain . As described below and elsewhere additional adapter components in the chain may be subsequently invoked such as in a recursive manner in this example embodiment. Information about the interface version for the current corresponding adapter component may be determined and stored in this example embodiment such as to assist in later providing a corresponding response to the received request. The routine then continues to block to optionally validate the request such as by determining whether a requested operation and corresponding specified parameter values are permitted in the interface version corresponding to the current adapter component and if not the request may be denied not shown . The routine then continues to block to perform any indicated adaptation of the received request for the corresponding adapter component so that the adapted request corresponds to a next interface version in the chain such as to translate operations parameters values ordering etc. and or to designate ghost operations and or parameters e.g. based on one or more predefined rules for the corresponding adapter component . For example such rules may be provided by an adapter component using string search and replacement tools such as XSLT the grep command in Unix and Unix like systems etc. Once the request has been appropriately adapted for the next interface version the routine continues in block . In block the routine invokes the next request adapter component in the chain or the actual requested software service if performed for the adapter component corresponding to the current interface version not shown which in the illustrated embodiment involves passing the adapted request to a new instance of the same routine that corresponds to the next adapter component in a recursive manner. Thus until the routine is executed on behalf of the adapter component for the current interface version and the request has been adapted to the current interface version each adapter component in the chain will successively adapt the request and then forward it to a next adapter component in the chain. The routine then continues to block to determine whether to continue. If so the routine returns to block and if not continues to block and ends.

The routine begins in block to receive a response specified in accordance with a version of the interface such that the routine is currently being performed on behalf of the adapter component corresponding to that interface version. Thus when use of a chain of multiple adapter components is first initiated for a received response the routine will initially be invoked on behalf of the adapter component for the current interface version which is the newest interface version in the chain . As described below and elsewhere additional adapter components in the chain may be subsequently invoked such as in a recursive manner in this example embodiment. Information about the interface version for the current corresponding adapter component may further be determined and stored in this example embodiment such as to assist in providing the adapted response to the client that made the corresponding request. The routine then continues to block to optionally validate the response such as by determining whether one or more response values are supported in the interface version for the current adapter component and if not the response value may be removed before the response is forwarded. The routine then continues in block to perform any indicated adaptation of the received response for the corresponding adapter component so that the adapted response corresponds to a preceding interface version in the chain such as to translate parameters values ordering etc. and or to designate ghost parameters e.g. based on one or more predefined rules for the corresponding adapter component . For example such rules may be provided in a manner similar to that described for processing requests. Once the response has been appropriately adapted for the preceding interface version the routine continues in block . In block the routine invokes the next request adapter in the chain to reflect the prior version of the interface or the interface adaptation manager to return the adapted response to the client that performed the request not shown which in the illustrated embodiment involves passing the adapted response to a new instance of the same routine that corresponds to the that adapter component in a recursive manner. Thus until the routine is executed on behalf of the adapter component for the prior interface version corresponding to the initial request with the response having been adapted to that interface version each adapter component in the chain will successively adapt the response and then forward it to a next adapter component in the chain. The routine then continues to block to determine whether to continue. If so the routine returns to block and if not continues to block and ends.

Those skilled in the art will also appreciate that in some embodiments the functionality provided by the routines discussed above may be provided in alternative ways such as being split among more routines or consolidated into fewer routines. Similarly in some embodiments illustrated routines may provide more or less functionality than is described such as when other illustrated routines instead lack or include such functionality respectively or when the amount of functionality that is provided is altered. In addition while various operations may be illustrated as being performed in a particular manner e.g. in serial or in parallel and or in a particular order those skilled in the art will appreciate that in other embodiments the operations may be performed in other orders and in other manners. Those skilled in the art will also appreciate that the data structures discussed above may be structured in different manners such as by having a single data structure split into multiple data structures or by having multiple data structures consolidated into a single data structure. Similarly in some embodiments illustrated data structures may store more or less information than is described such as when other illustrated data structures instead lack or include such information respectively or when the amount or types of information that is stored is altered.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the disclosure. For example the methods and systems for enhancing access to software services discussed herein are applicable to architectures other than a Web based architecture. In addition while certain aspects are presented below in certain claim forms the inventors contemplate the various aspects in any available claim form. For example while only some aspects of the disclosure may currently be recited as being embodied in a computer readable medium other aspects may likewise be so embodied.

