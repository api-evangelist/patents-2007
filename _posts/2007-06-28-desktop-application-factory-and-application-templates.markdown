---

title: Desktop application factory and application templates
abstract: Methods, systems, and apparatuses for producing computer desktop applications, such as widgets, are described. A desktop application factory includes an interface and a desktop application generator. The interface enables an application developer to select a desktop application template, and to provide configuration information for the selected desktop application template. The desktop application generator is configured to generate a desktop application by configuring the selected desktop application template according to the provided configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08166455&OS=08166455&RS=08166455
owner: Yahoo! Inc.
number: 08166455
owner_city: Sunnyvale
owner_country: US
publication_date: 20070628
---
Computer users desire applications that are easy to use and that solve their particular problems with as little effort on their part as possible. Attaining this ideal situation is a challenge for application developers because matching a particular problem precisely with an application requires customization. The more customizable that an application is the more complicated that a user interface for the application will likely become. Accordingly customizable applications become more complex and thus become more complicated to configure and use. Furthermore the performance of customizable applications can suffer as their complexity increases.

A desktop application is an example type of computer application that presents a user interface. Desktop application developers currently must choose between serving a few users very well with simpler single purpose applications or serving larger numbers of users relatively less well with more powerful customizable multi purpose applications that are more complex to configure and use.

What is desired is a way of allowing template developers to deliver large numbers of simpler easier to use applications that avoid the size and performance difficulties of configurable applications while reducing the effort required to produce each individual application.

Methods systems and apparatuses for producing computer desktop applications such as desktop widgets are described. In a first example application developers are enabled to select a desktop application template from a desktop application template repository. The application developer provides configuration information regarding the selected desktop application template. A desktop application is generated by configuring the selected desktop application template according to the provided configuration information.

Any number of desktop application templates may be present in the desktop application template repository. The desktop application templates may be configured in a variety of ways by application developers to generate various types of desktop applications. In this manner large numbers of customized desktop applications may be generated.

In another example a desktop application factory is described. The desktop application factory includes an interface and a desktop application generator. The interface enables an application developer to select a desktop application template and to provide configuration information for the selected desktop application template. The desktop application generator is configured to generate a desktop application by configuring the selected desktop application template according to the provided configuration information.

The interface may be configured to be accessed by human application developers and or by automated application developers. For instance in one example the interface may display a form such as a hypertext markup language HTML form for entry of configuration information by a human application developer. In another example the interface may include an application programming interface API configured to receive the configuration information from an automated application developer over a network.

The desktop application generator may include a validator module configured to validate the received configuration information. In another example the desktop application generator may include a combiner module and a packager module. The combiner module may be configured to incorporate the configuration information into files of the selected desktop application template to generate a plurality of desktop application files. The packager module may be configured to package together the plurality of desktop application files.

The desktop application factory may further include a desktop application repository. The desktop application repository may be configured to store generated desktop applications and to enable access to the generated desktop applications.

These and other objects advantages and features will become readily apparent in view of the following detailed description of the invention. Note that the Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s .

The present invention will now be described with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements. Additionally the left most digit s of a reference number identifies the drawing in which the reference number first appears.

The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment s merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment s . The invention is defined by the claims appended hereto.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Furthermore it should be understood that spatial descriptions e.g. above below up left right down top bottom vertical horizontal etc. used herein are for purposes of illustration only and that practical implementations of the structures described herein can be spatially arranged in any orientation or manner.

Embodiments of the present invention relate to all types of computer applications. One example type of application to which embodiments particularly relate is a desktop application. A desktop application is an example type of computer application not web based that presents a user interface.

Some desktop applications are referred to as widgets. Desktop widgets are typically very small applications that reside in the desktop space of a computer and use a small amount of computer resources. Example desktop widget types include Yahoo Widgets Dashboard widgets of Apple Macintosh computers Microsoft Gadgets KlipFolio Klips Google panels or gadgets and SpringWidgets widgets.

A desktop widget is typically configured to provide information of interest to a computer user in a relatively non intrusive manner. A common type of desktop widget enables the computer user to view information received e.g. streamed or fed from one or more pre selected data sources. Desktop widgets typically present content that is selected based on a computer user s preferences. For example a desktop widget may relay news from a particular website count down to a specific event fetch stock quotes for selected stock symbols provide local weather information or perform other types of tasks. Thousands of desktop widget applications currently exist and their numbers are growing.

When creating a particular desktop application the developer has to choose between serving a few users very well with a simple single purpose application or serving a larger number of users relatively less well with a more powerful customizable multi purpose application that is more complex to configure and use. This situation is particularly evident in the area of widgets. For any particular site or event single purpose widgets are more popular than more general purpose widgets. However creating a potentially unlimited number of single purpose desktop applications can be very time consuming and in fact may be too time consuming to be practical.

Thus ways of assisting application developers in creating applications of varying size and complexity are desired to better serve the needs of the user community. Embodiments of the present invention enable the rapid generation of large numbers of applications. For example embodiments for the mass production of desktop applications such as widgets are provided herein. Such embodiments enable large numbers of customized desktop applications to be efficiently created each directed to more specific needs so that there is less need for larger more complex customizable general purpose desktop applications. Example embodiments of the present invention are described in further detail in the following section.

The example embodiments described herein are provided for illustrative purposes and are not limiting. Further structural and operational embodiments including modifications alterations will become apparent to persons skilled in the relevant art s from the teachings herein.

As mentioned above embodiments of the present invention enable the efficient generation of large numbers of desktop applications. shows a desktop application development system according to an example embodiment of the present invention. Desktop application development system enables the efficient production of desktop applications including customized special purpose desktop applications such as widgets. As shown in system includes a desktop application factory . An application developer interfaces with desktop application factory to provide information to configure a particular type of desktop application for generation. Desktop application factory generates a desktop application that performs as configured by application developer .

As shown in the example of desktop application factory includes a desktop application developer interface a desktop application template and a desktop application generator . Desktop application template is a template for a particular type of desktop application. For example desktop application may include desktop application logic and data which can be conditionally included into desktop application depending on a configuration chosen by application developer. Application developer can configure desktop application with particular data parameters and or functionality by configuring desktop application template .

Application developer is enabled to interact with desktop application template at desktop application developer interface . For example interface may enable application developer to select desktop application template from a list of desktop application templates. Interface enables application developer to configure template such as by inputting or otherwise selecting configuration data and or parameters of template adding and or removing application logic supplying removing or altering text and or by inputting removing and or modifying graphical resources e.g. image and or movie files .

Desktop application generator receives template and the configuration information input by application developer at interface . Desktop application generator configures template according to the received configuration information to generate desktop application . Desktop application can be distributed to computer users for use on computer desktops.

In embodiments desktop application factory is capable producing a whole class of similar applications based desktop application template . Each individual application has a configuration based on desktop application template . Thus many different desktop applications can be generated from a single desktop application template each configured to perform a particular task. In one example desktop application template can be a template for relaying news from a particular website. Different desktop applications can be generated from such a template each configured to relay news related to a different news category e.g. world news sports news entertainment news from the website news related to different persons and or groups news related to different events and or other types of news.

After being generated desktop application runs independently of desktop application factory and can be distributed amongst an unlimited number of users with similar desktop application needs. Furthermore because they are relatively simple desktop applications created by factory can be smaller and faster than an equivalent multi purpose application performing the same task. Furthermore desktop applications may also be configured to have a more intuitive interface than multi purpose applications because the interface can be specific to the desktop application .

Desktop application factory including desktop application developer interface and desktop application generator may be implemented in hardware software firmware of any combination thereof. For example desktop application developer interface and desktop application generator may each be implemented in digital logic such as in an integrated circuit e.g. an application specific integrated circuit ASIC in code executing in one or more processors and or in other manner as would be known to persons skilled in the relevant art s . In embodiments desktop application factory may be implemented in a single computer system or may be distributed among multiple computer systems. Example computer system embodiments for factory are described further below.

For illustrative purposes flowchart is described below in relation to . shows a desktop application development system which is an example embodiment for desktop application development system shown in . In system application developer accesses desktop application factory over Internet . In embodiments application developer may access desktop application factory over any type or size of network including a local area network LAN wide area network WAN a combination of networks e.g. the Internet or other network type. Application developer may access factory using any type of computing device including a desktop computer mobile computer e.g. a laptop a handheld computer etc. a cell phone etc.

Flowchart begins with step . In step a desktop application template is selected from a desktop application template repository. For example as shown in desktop application factory includes a desktop application template repository . Desktop application template repository is configured to store a plurality of desktop application templates such as desktop application templates shown in . Any number of desktop application templates may be stored in desktop application template repository . Desktop application template repository may include one or more storage devices such as hard disc drives optical disc drives semiconductor memory devices etc. to store desktop application templates .

Templates may have various formats and may include any combination of application logic application resources and or further information. For instance shows an example desktop application template which is an example of desktop application template . As shown in desktop application template includes a desktop application template logic module one or more desktop application resources a configuration description module and validation information . In embodiments a template may include one or more of these modules and resources of template and or may include additional or alternative items.

In an embodiment desktop application template logic module includes logic such as XML code JavaScript code HTML code PHP Perl Java C C VB.Net and or other format of code that may be incorporated in desktop application by desktop application generator . Desktop application template logic module may include the functional logic packaged in a program such as a script that may be executed by desktop application generator to generate one or more files of desktop application .

Desktop application resource s includes one or more resources that may be included in desktop application such as textual resources sound resources MP3 and or other audio format graphical resources e.g. image files movie files and or other resources. For example the included resources may be displayed and or played by desktop application when functioning on a user s computer desktop.

When present configuration description module is configured to provide interface with information indicating what data parameters logic etc. of template may be configured by application developer . For example interface may generate a form such as an HTML form for receiving configuration information. In an embodiment configuration description module may additionally provide description and or instructions in the form to describe the configurable parameters data to indicate acceptable values ranges for the parameters data and or to provide other information to assist application developer in filling out the form.

When present validation information is used to validate the configuration information request and received by configuration description module to determine whether a desktop application can be generated from template using the received configuration information. If the configuration information is not validated successfully interface may indicate a validation failure to application developer and may request additional and or alternative information to be provided.

Template developers may generate templates such as template of to be used to generate various desktop applications . For example shows a flowchart providing example steps for generation of templates according to an embodiment of the present invention. Flowchart is described as follows.

In step a template developer is enabled to generate at least one desktop application template corresponding to a desktop application type. A template developer may be enabled to generate desktop templates in a variety of ways. For example the template developer may be enabled to code a template by using a textual code editor e.g. using a simple text editor e.g. Microsoft Notepad a word processor e.g. Microsoft Word or other code entry tool by using a graphical user interface to configure code in a modular fashion or in any other suitable manner.

In step the template developer stores the generated desktop application template s in the desktop application template repository. For example template developers may be provided with access to desktop application template repository shown in in one or more ways such as by providing a template by email by interacting with a Web site using FTP file transfer protocol and or other way to provide a generated template to repository . Templates submitted to repository can thereafter be used to generate desktop applications by application developers interacting with factory .

In an embodiment desktop application developer interface is configured to enable application developer to select a desktop application template from repository . For example in an embodiment interface provides a list of templates that are available in repository in a display of a graphical user interface and enables application developer to select a template from the list. In other embodiments a template may be selected from repository in alternative ways.

In an embodiment application developer may be a human application developer. For example shows application developer including a human application developer . Human application developer may have any level of application development experience depending on the particular implementation of interface . For example human application developer may be an experienced application developer or may be a non technical end user of desktop applications. Human application developer does not necessarily need to understand the entire application development process because factory can generate desktop application from a template selected and configured by application developer at interface . In an embodiment interface may include a user interface such as a graphical user interface GUI which enables human application developer to request a particular template from repository by inputting a template selection . Interface may be a network based interface such as an Internet based Web application or may be a local interface such as provided by a local desktop application.

In another embodiment application developer may be an automated entity. For example in an embodiment application developer may be a developer program module as shown in . Developer program module may be implemented in hardware software firmware or any combination thereof. For instance the developer program module may be a third party application that interacts with factory using an application programming interface API . This allows the possibility of pre generating large numbers of similar applications from a database of configuration details. For example API may be a front end of a web service that includes factory and enables machine to machine interaction. In an embodiment developer program module may communicate with API in a manner prescribed by a web service description provided by API in messages formatted according to Service Oriented Architecture Protocol SOAP .

Referring back to flowchart of in step configuration information is provided regarding the selected desktop application template. As shown in application developer interacts with desktop application developer interface to configure template . In the embodiment of a human application developer provides configuration information for a selected template to interface . A form is generated at interface based on configuration description module that can be filled in by developer . For example form may be displayed in GUI of interface . In a web based embodiment for interface form may be an HTML form and GUI may be a web browser. Human application developer provides configuration information by inputting and or selecting configuration data and or parameters in form .

In the example of template selection provided by human application developer indicates a desktop application template to be selected from desktop application template repository in step of flowchart . In an embodiment selected template includes configuration description module which is provided to interface according to step . As described above configuration description module describes to human application developer parameters data logic and or other settings that developer can provide in configuration information . For example configuration description module may configure form to provide blanks and or other input data selection mechanisms e.g. pull down menus check boxes etc. for parameters data to be input and or selected by developer for selected template .

In the embodiment of developer program module provides a template selection to interface to select a desktop application template according to step of flowchart and provides configuration information to interface to configure the selected template according to step . In an embodiment API is present and is configured to receive configuration information and template selection from developer program module over a network such as a LAN or a WAN such as the Internet. In an embodiment developer program module is pre informed of what parameters data may be provided for the template of template selection and knows a format for such parameters data and thus may transmit configuration information with template selection in a format that fulfills the requirements of the selected template.

Referring back to flowchart of in step a desktop application is generated by configuring the selected desktop application template according to the provided configuration information. For example shows a portion of system of used to illustrate step . As shown in desktop application generator receives a selected desktop application template e.g. from desktop application template repository shown in and receives configuration information e.g. from desktop application developer interface that was input by an application developer for selected template . For example configuration information can be configuration information of input by human application developer or configuration of input by developer program module . Desktop application generator is configured to generate desktop application by configuring template according to configuration information .

In an embodiment desktop application generator validates configuration information prior to generating a desktop application. Generator may perform this function to determine that all necessary parameters data to configure selected template are present in configuration information and that the parameters data have acceptable values and or are in acceptable ranges. For example shows desktop application generator including a validator module . Validator module receives configuration information and validation information from selected template and generates a validation indication . Validator module compares configuration information to the corresponding parameters data in validation information for selected template . If the necessary data parameters for selected template are present in configuration information and have acceptable values and or are in acceptable ranges validator module generates validation indication to indicate that configuration information is valid. Otherwise validator module generates validation indication to indicate that configuration information is invalid. In an embodiment validation information may include one or more validation routines e.g. logic software firmware code etc. that may be executed on configuration information to further validate configuration information . In an embodiment validation indication may be provided to interface to indicate whether configuration information was valid or not valid and to request additional and or modified configuration information if configuration information is not valid. Validator module may be implemented in hardware software firmware of any combination thereof.

Combiner module configures selected template according to the provided configuration information . For example as shown in combiner module receives configuration information which has been optionally validated as described above and desktop application template logic module from template and generates desktop application files . Combiner module incorporates the parameters data present in configuration information into the received logic of desktop application logic module . Combiner module may modify the received logic of logic module e.g. add logic change logic remove logic according to configuration information . Combiner module generates one or more logic files which include the incorporated parameters data and modified logic of logic module that are output as desktop application files . Desktop application files include all logic files e.g. XML code JavaScript code HTML code PHP Perl Java C C VB.Net and or other format of code necessary for desktop application to perform its functions. Any resources e.g. text files sound files image files video data etc. provided in configuration information are also provided by combiner module in desktop application files .

Packager module is configured to generate a packaged e.g. bundled desktop application to simplify distribution of desktop application . When present packager module receives desktop application files and desktop application resources from template and packages them together to form desktop application . Packager module may include a conventional or proprietary file combiner and or compressor to package files and resources . For example in embodiments packager module can package files and resources into a ZIP file format a Konfabulator flat file format and or other packaged file format. Desktop application preferably is packaged into a single file but in alternative embodiments may be packaged into multiple files. When combiner module is configured to generate only a single file for a desktop application packager module may not be required.

In step the configuration information for the selected template is validated. For example in an embodiment validator module shown in performs step . As described above with respect to configuration information used to configure selected template is compared to the necessary parameters data in validation information for selected template . If the received data parameters of configuration information are present and have acceptable values and or are in acceptable ranges validation indication is generated to indicate that configuration information is valid. Additional validation routines provided in validation information may be performed to further validate configuration information . If configuration information is determined to be valid step may be performed.

In step the configuration information is combined with the selected template. For example in an embodiment combiner module shown in performs step . As described above with respect to selected template is configured according to configuration information . The parameters data and or modified logic of configuration information is combined to form desktop application logic module . One or more logic files are generated and the logic file s and any resources present in configuration information are output as desktop application files .

In step the generated desktop application is packaged. For example in an embodiment packager module performs step . As described above with respect to desktop application files and desktop application resources from template are packaged together to form desktop application . Desktop application files and desktop application resources may be packaged according to any suitable packaging compression format to form desktop application .

Referring back to flowchart of in step the generated desktop application is stored in a desktop application repository. For example as shown in system includes a desktop application repository . Desktop application repository is configured to store generated desktop applications such as desktop applications shown in . Any number of desktop applications may be stored in desktop application template repository . Desktop application repository may include one or more storage devices such as hard disc drives optical disc drives semiconductor memory devices etc. to store desktop applications . Repository may include the same or different storage from desktop application template repository .

Desktop application repository is configured to enable access to users to generated desktop applications . For example one or more desktop application users such as desktop application users shown in may desire to access desktop applications in repository . Desktop applications may be copied from repository by users for use on their own computer desktops and or for distribution to other users. Repository may have an interface e.g. a website interface that is accessible over a network or combination of networks such as Internet for users to interact with to download desktop applications .

These example embodiments may be used to generate a wide variety of desktop applications more efficiently than conventional techniques. Desktop applications generated by factory of that have more narrowly defined functions can be smaller faster and easier to use than conventional multi purpose desktop applications performing similar tasks. Templates allow a single developer to rapidly create large numbers of similar but customized desktop applications . Interface enables all types of human application developers including non technical authors to quickly and easily produce genuinely useful and usable desktop applications . API or other automated interface for interface enables third party applications and web sites to use factory to create desktop applications to suit their purposes. Desktop application repository of enables application developers to easily distribute the desktop applications that they generate to end users.

The following section describes generation of some example widget type desktop applications to further illustrate embodiments of the present invention.

The following example refers to a factory application that produces widgets. This example is provided for purpose of illustration and is not intended to be limiting. Although the example refers primarily to a Yahoo Widget type widget embodiments of the present invention are applicable to all types of widgets including Yahoo Widgets Dashboard widgets of Apple Macintosh computers Microsoft Gadgets KlipFolio Klips Google panels or gadgets and SpringWidgets widgets and to further types of desktop applications other than widgets. Furthermore although the following example relates to a widget configured to relay news from a website all types of widget functions are encompassed by embodiments of the present invention including utility widgets such as calculator calendar and clock widgets widgets that count down to a specific event widgets that fetch stock quotes for selected stock symbols widgets that provide weather information and all other possible widget functions.

In the current example a template developer creates a template for a widget configured to relay news from a website. For a Yahoo Widgets type widget the template developer may create a folder directory that includes the following files directories 

 applicationName.kon.php is a PHP script configured to generate Konfabulator XML code that is suitable for a .kon file a .kon file is a file that contains the actual Yahoo Widget code . applicationName.kon.php includes placeholders to be filled with configuration information. widget.xml.php is a PHP script configured to generate a widget.xml file a widget.xml file specifies information about a Yahoo Widget such as widget name author etc. . widget.xml.php includes placeholders for configuration information. The resources folder is configured to store resources for a widget generated from the template. Each Script.js that is present is a file that contains JavaScript code that may be called by the .kon file of the generated widget. Script.js files are not modified with configuration information and thus do not include data placeholders. Each Script.js.php file that is present is a PHP template script that outputs a corresponding JavaScript file that may be called by the .kon file of the generated widget. Script.js.php files include placeholders for configuration information. kontext.php is a file that defines a PHP class called Kontext. The other PHP files retrieve data and exchange information with each other via the Kontext class.

Relating the files listed above to template shown in applicationName.kon.php widget.xml.php Script.js and Script.js.php files may be considered to be desktop application template logic module resources stored in the resources folder may be considered to be desktop application resource s and kontext.php may be considered to include both configuration description module and validation information . These files form a template such as template that may be stored in repository shown in . For example these files may be placed in a subdirectory of a directory called templates.

An application developer may select the template formed by these files according to step of flowchart in from a list provided by a web based GUI shown in . In the current example application developer is a human application developer such as human application developer . Developer configures the template at interface with configuration information according to step of flowchart in . For example form is generated at GUI based on a routine called requestParams of the PHP class Kontext of Kontext.php. requestParams includes formatting information for form including the blanks etc. that must be present in form to collect configuration information and may include instructions for filling out the configuration information in form . For example requestparams may set forth format rules for the acceptability of data input into form e.g. acceptable data types and or ranges of data . Form may be an HTML form for example. Developer configures the template by inputting configuration information e.g. inputting selecting data parameters logic resources in form . Examples of configuration information are described as follows.

For example developer may be requested to enter identifying data in form such as a name of the widget a name of developer an organization name copyright information security information etc. Such data may be entered into placeholders in the widget.xml.php file when the widget is generated for example. Developer may also be prompted to select parameters related to an appearance of the widget including a background and or any other color scheme related to the widget a font font size text color position and type of image resources displayed on the widget etc.

Furthermore developer may be requested to configure parameters in form that will affect the function s of the generated desktop application. When the widget is generated the parameters may be entered into placeholders of the applicationName.kon.php and Script.js.php files. In the current example the selected template is designed to build a widget configured to relay news from a website. Logic e.g. XML code of applicationName.kon.php and or logic e.g. JavaScript of Script.js.php may be configured to receive a RSS feed from a website and to extract content from the feed such as text and image files. In form developer may be prompted to enter a website from which to receive the RSS feed. For example a blank may be present in which developer can type in the website URL a drop down list may be present listing websites that may be selected and or other ways of selecting a website may be provided. Furthermore form may prompt developer for keywords to search for in the RSS feed to select articles to be displayed. For example form may have a drop down list of persons movie stars musicians historical figures politicians etc. events things e.g. countries places animals songs movies etc. and or other words to be searched for in the RSS feed. Furthermore form may prompt developer for numbers and types of content that the widget should provide such as a number of articles to display at any one time whether to play audio files whether to display movies etc. Thus in an embodiment developer can configure a desktop application to provide selected information of an RSS feed of a website. In alternative embodiments information may be obtained from websites in manners other than an RSS feed.

Still further developer may be requested to configure logic including adding or removing logic using form . Form may display logic functions e.g. XML code in ApplicationName.kon.php and or logic functions e.g. JavaScript code in Script.js.php that may be removed so that one or more of these functions do not operate in the to be generated widget. In this manner developer can reduce the complexity of the to be generated widget by removing undesired functions. Furthermore developer may be prompted to add logic functions such as by inserting code attaching a script file and or by other means. Any sort of function may be added or removed including a clock function calendar function timer function information collecting and displaying functions e.g. weather news etc. and or any other function.

Developer may also modify resources e.g. text files image files movie files sound files etc. of the template using form . For example developer may select and delete resources in form and may add new resources to be used by the generated widget by attaching new resources to form e.g. by browsing to or entering a path to the new resource files .

After completing configuring the template developer may submit form . As described above with respect to desktop application generator receives configuration information from the submitted form receives the selected desktop application template and generates desktop application . As shown in generator may validate configuration information . For example validation module of template may include a routine validateParams of the PHP class of Kontext in Kontext.php. Validator module may execute validateparams to validate configuration information .

If configuration information is validated desktop application generator generates a widget as desktop application according to step of flowchart in . For example combiner module shown in may run applicationName.kon.php with the PHP class of Kontext in Kontext.php. This configures the logic of applicationName.kon.php according to configuration information collected by requestParams of Kontext.php . For example placeholders in applicationName.kon.php may be filled in with configuration information and XML code may be generated. Combiner module generates a file with extension .kon named according to the widget name parameter entered by developer when providing configuration information above. Combiner module repeats this process with widget.xml.php and any .js.php files which generates corresponding files having their previous name with the .php extension removed e.g. widget.xml .js . Script.js files originally present in the selected template are not modified by combiner module . Thus in the current example embodiment the following files may be generated present as desktop application files shown in after operation of combiner module 

Packager module shown in bundles the generated .kon and .xml files and the source folder including the .js files and resource folder including the resource files into a .widget file as desktop application . The generated desktop application can then be deposited into desktop application repository shown in according to step of flowchart in to be accessible to desktop application users.

Widgets of other types may be generated according to embodiments of the present invention. For example Dashboard widgets of Apple Macintosh computers Microsoft Gadgets KlipFolio Klips Google panels or gadgets and SpringWidgets widgets may be formed in a similar manner as described above for a Yahoo Widget using their corresponding code e.g. XML code JavaScript code HTML code PHP Perl Java C C VB.Net etc. and file formats as would be known to persons skilled in the relevant art s .

For example a Google Gadget may be formed of XML HTML and JavaScript code and files. The packaged ZIPed Google Gadget file extension is .gg. A KlipFolio Klip is an XML file that contains markup styles and JavaScript. The Klip file extension is .klip .

In an embodiment of the present invention the system and components of the present invention described herein are implemented using well known servers computers such as computer shown in . For example desktop application factory shown in can be implemented using one or more computers .

Computer can be any commercially available and well known computer capable of performing the functions described herein such as computers available from International Business Machines Apple Sun HP Dell Cray etc.

Computer includes one or more processors also called central processing units or CPUs such as a processor . Processor is connected to a communication bus . In some embodiments processor can simultaneously operate multiple computing threads.

Computer also includes a main or primary memory such as random access memory RAM . Primary memory has stored therein control logic A computer software and data.

Computer also includes one or more secondary storage devices . Secondary storage devices include for example a hard disk drive and or a removable storage device or drive as well as other types of storage devices such as memory cards and memory sticks. Removable storage drive represents a floppy disk drive a magnetic tape drive a compact disk drive an optical storage device tape backup etc.

Removable storage drive interacts with a removable storage unit . Removable storage unit includes a computer useable or readable storage medium having stored therein computer software B control logic and or data. Removable storage unit represents a floppy disk magnetic tape compact disk DVD optical storage disk or any other computer data storage device. Removable storage drive reads from and or writes to removable storage unit in a well known manner.

Computer further includes a communication or network interface . The network interface enables the computer to communicate with remote devices. For example network interface allows computer to communicate over communication networks or mediums B representing a form of a computer useable or readable medium such as LANs WANs the Internet etc. Network interface may interface with remote sites or networks via wired or wireless connections.

Control logic C may be transmitted to and from computer via the communication medium B. More particularly computer may receive and transmit carrier waves electromagnetic signals modulated with control logic via communication medium B.

Any apparatus or manufacture comprising a computer useable or readable medium having control logic software stored therein is referred to herein as a computer program product or program storage device. This includes but is not limited to computer main memory secondary storage devices removable storage unit and carrier waves modulated with control logic . Such computer program products having control logic stored therein that when executed by one or more data processing devices cause such data processing devices to operate as described herein represent embodiments of the invention.

The invention can work with software hardware and or operating system implementations other than those described herein. Any software hardware and operating system implementations suitable for performing the functions described herein can be used.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

