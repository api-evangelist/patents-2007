---

title: Registry for electronic design automation of integrated circuits
abstract: A method for registering constraints for EDA (Electronic Design Automation) of an IC (Integrated circuit) includes: associating a constraint with values for constraint identification that identify the constraint in an IC design; associating the constraint with values for constraint relationships that relate the constraint to at least one EDA application; saving the constraint identification values and the constraint relationship values in a constraint registry element; and providing an interface to a user for accessing values of the constraint registry element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945890&OS=07945890&RS=07945890
owner: Cadence Design Systems, Inc.
number: 07945890
owner_city: San Jose
owner_country: US
publication_date: 20071031
---
The present invention relates to integrated circuits ICs and more particularly to Electronic Design Automation EDA of ICs.

Today s deep sub micron process present ever increasing challenges to engineers working on full custom analog and digital designs for ICs. As the process node feature sizes become smaller the number and complexity of the design constraints also known as design rules and process constraints increase. With this increased complexity the need for assistance and or automation to aid the engineer becomes more and more essential.

EDA companies are rapidly adopting OpenAccess OA which is a community driven initiative that provides an interoperability platform for complex IC design based on a common open and extensible architecture. OA provides an open standard application programming interface API and reference database implementation supporting that API.

Design constraints are defined in the technology database techDB and can later be overridden in OA supporting EDA tools. Common use of overrides is specifying a different set of design constraints on a per object basis such as specifying allowable layers and widths for a particular net. In this context EDA tools and applications must provide a friendly interface to allow the user to create a local override on a given object such as a net . Presenting the user with all the existing design constraints is prohibitively complicated and confusing OA has over 100 different design constraints and in addition allows applications to define their own.

However conventional EDA applications and systems do not allow users to access relevant constraint information in a flexible way e.g. for pruning the design constraints so that the user s interface is not cluttered by irrelevant constraints . Thus there is a need for a registry for EDA applications that allows users to access constraint information in the process of IC design.

In one embodiment of the present invention A method for registering constraints for Electronic Design Automation EDA of an Integrated Circuit IC includes associating a constraint with values for constraint identification that identify the constraint in an IC design associating the constraint with values for constraint relationships that relate the constraint to at least one EDA application saving the constraint identification values and the constraint relationship values in a constraint registry element and providing an interface to a user for accessing values of the constraint registry element.

According to one aspect of this embodiment the constraint identification values may include values for at least one of a name a description an image or a scale.

According to another aspect the constraint relationship values may include values for at least one of an EDA application a design object or a design constraint group.

According to another aspect the method may further include providing an interface to an EDA application developer for editing values in the constraint registry element.

According to another aspect the method may further include providing an interface to an EDA database that stores the IC design for transferring values from the EDA database to the constraint registry element.

According to another aspect the method may further include providing an interface between the user and an EDA database that stores the IC design for editing the IC design while accessing values from the constraint registry element.

According to another aspect providing the interface to the user may include organizing a display of constraints according to groupings of constraints and availability of editing by the user.

According to another aspect the method may further include mapping user inputs to values of the constraint registry element and corresponding values of the IC design and displaying mapping results to the user.

Additional embodiments relate to an apparatus for carrying out any one of the above described methods where the apparatus includes a computer for executing instructions related to the method. For example the computer may include a processor with memory for executing at least some of the instructions. Additionally or alternatively the computer may include circuitry or other specialized hardware for executing at least some of the instructions. Additional embodiments also relate to a computer readable medium that stores e.g. tangibly embodies a computer program for carrying out any one of the above described methods with a computer. In these ways the present invention enables a registry for EDA applications that allows users to access constraint information in the process of IC design.

An embodiment of the present invention is shown in . A system for EDA Electronic Design Automation of an IC Integrated circuit includes a registry that stores registry elements with values for constraints of an IC design. As discussed below in greater detail these constraint values may identify the specific parameters of the constraint and relate the constraint with specific EDA applications where the constraint is relevant. An application developer who specifies constraints for an EDA application or otherwise tailors the application for a user has access to the registry through a GUI graphical user interface to view and edit the registry elements. A user has access through a GUI to the registry for viewing the related constraint information. Typically the user also has access to an EDA database that stores the IC design e.g. specification for layout and routing so that the user can view and edit the IC design e.g through the EDA application corresponding to the application developer while accessing the registry . The application developer may also have access to the EDA database for viewing and editing the IC design. Additionally there may be an interface between the EDA database and the registry so that values from the database can be transferred directly to the registry .

The above described system facilitates EDA design by enabling a user to access registry information for a constraint while making related design changes. For example an exemplary method for registering EDA constraints for an IC includes associating a constraint with values for constraint identification that identify the constraint in an IC design associating the constraint with values for constraint relationships that relate the constraint to at least one EDA application saving the constraint identification values and the constraint relationship values in a constraint registry element and providing an interface to a user for accessing values of the constraint registry element. For example the constraint identification values may include values for a name a description an image or a scale and the constraint relationship values may include values for an EDA application a design object or a design constraint group. The application developer may tailor the user s access to the database and the registry so that the user can access relevant constraint information in the registry when editing the design in then database . In some operational settings the database may be a standard database such as OpenAccess where access is available to multiple parties in the design process.

Valid combinations are specified in the registry. For example in this case the relevant applications have not registered any valid constraint types on a Net in the implicit constraint group . However applications can interpret or use AllowedLayers AllowedVias MinClearance MinNumCut MinSpacing and MinWidth when in the Default constraint group on a Net .

In the field showInApps indicates which applications support this constraint. The Sample values include PRE and SKILL two conventional EDA applications. The field categoryInApps indicates that a constraint type belongs to a class of similar constraint types so a user interface may group them. The sample value is Routing. The field oaConstraintDefName indicates which constraint type in the database is represented here. The sample value is oaTaperHalo. The field allowedValueTypes indicates which value types the applications support on this constraint type and may be a subset of what the database supports. The sample value is nil indicating the applications support all value types which the database supports.

The field contextObjectType indicates which design objects support this constraint type. The sample value is Nets. e.g. as in The field contextConstraintGroupType indicates which design constraint groups support this constraint type. The Sample values are InputTaper and OutputTaper. e.g. as in That is the oaTaperHalo constraint is supported by applications only on Net objects and then only in input taper and output taper constraint groups. Specific values for each registry entry may be obtained from related documentation for the EDA database or from the Application Developer .

The field contextGUIName indicates how GUIs Clients should refer to this constraint type. The sample value is Taper Halo. The field contextName indicates how non GUI Clients should refer to this constraint type. The sample value is taperHalo. That is when displayed by an interfaces this constraint can be called either Taper Halo ref contextGUIName or taperHalo contextName depending on if that interface is more graphical or more programmatic.

The field GUIDescription indicates text for a tool tip or similar GUI element to be used with this constraint. The sample value is Specifies the offset around pin figures within which tapering must be performed according to the spacing and width constraints specified in the taper constraint group. The field GUIImage indicates a pointer to an image file representing this constraint type. The sample value is dfII ci processRules images figTaperHalo.png. These two fields related to the GUI can add additional information that is very useful to the user including for example hints for specifying constraints that are complicated or warnings where the user may make an error.

The field valueDisplay indicates a scaling factor for values on this constraint type. A sample value is UU which stands for User Units that provide a convenient interface to users. For example integral values in some registry field may correspond to microns in User Units through some convenient scaling. Another sample value is Enum to indicate that an integral value represents one item from an enumerated set.

The field suggestedMaterials indicates suggestion for materials if this constraint type is associated with layers . The sample value is nil because this constraint type is not associated with any particular material. For the constraint minNumCuts which specifies a minimum number of cuts for a via and is typically only valid on cut layers a sample value for suggestedMaterials is cut. 

The field allowedParams indicates a list of parameters which are supported on this constraint type. The sample value is nil because no additional parameters are supported for this constraint. Some constraint types such as minSpacing require additional parameters such as how to measure the spacing Manhattan or Euclidean to be fully specified. 

In some operational settings a mapping unit may be used to help associate constraint groups with objects. Similarly as in shows an EDA system that includes a registry an application developer a user and an EDA database . Additionally a mapper relates registry values to the IC design values to enhance the capabilities of the user s interface .

In some cases the mapper can provide more user friendly names descriptions etc to constraint groups. For example from we see a constraint group named InterChild which may only have meaning to those most familiar with how a OpenAccess or any database names its constraint groups. In this case the mapper could provide a more descriptive name such as Group to Group for such a constraint group.

Additionally the mapper can relate information between user interface items and the constraint groups associated with them. In the case of a net object this is a simple mapping. Users are very familiar with the concept of a net object and the database representation of such an object is transparently displayed in most user interfaces. For other compound or complex items the relationship between the user interface item that the user sees in the user interface and the database storage for where that item s constraints are stored may be much more complicated. The mapper allows applications to communicate in terms of user interface items e.g. what the user sees and selects in the GUI for characterizing constraints or other relationships between design objects and returns the correct database constraint groups and objects that correspond to the user interface items.

In this case the user is familiar with the shielding relationship which does not have a direct correspondence to a database object. The user is familiar with the concept of adding constraints to a shielding item but the registry may not properly interpret user interface items that are not found in the database as database objects. In many cases Applications and Database standards have defined the correct database locations where constraints should be represented so that the constraint is carried out as the user would logically expect. The mapper is responsible for translating the user interface items into database constraint groups and objects. In this case applications have dictated that the constraint group that behaves as the user would expect i.e. constraints in this group will impact the shielding relationship between Nets and is the Shielding constraint on the Shielded Net i.e. Net . The mapper s input would be Shielding Relationship Constr  and its output would be the shielding constraint group on Net . Once the proper constraint groups are obtained the registry and user application function as previously specified.

As illustrated by the mapper provides a flexible approach to relating constraint groups to user items which may not be database objects. Once the constraint groups and objects are obtained from the mapper the registry is used as specified above. Note that in some configurations the mapper may be considered as part of the registry or the user interface .

At least some values for the results of the above described methods can be output to a user or saved for subsequent use. For example the registry values can be saved directly for applications in EDA design. Alternatively some derivative or summary form of the results e.g. averages interpolations etc. can be saved for later use according to the requirements of the operational setting.

Additional embodiments relate to an apparatus for carrying out any one of the above described methods where the apparatus includes a computer for executing computer instructions related to the method. In this context the computer may be a general purpose computer including for example a processor memory storage and input output devices e.g. keyboard display disk drive Internet connection etc. . However the computer may include circuitry or other specialized hardware for carrying out some or all aspects of the method. In some operational settings the apparatus may be configured as a system that includes one or more units each of which is configured to carry out some aspects of the method either in software in hardware or in some combination thereof. At least some values for the results of the method can be saved either in memory e.g. RAM Random Access Memory or permanent storage e.g. a hard disk system for later use.

Additional embodiments also relate to a computer readable medium that stores e.g. tangibly embodies a computer program for carrying out any one of the above described methods by means of a computer. The computer program may be written for example in a general purpose programming language e.g. C C or some specialized application specific language. The computer program may be stored as an encoded file in some useful format e.g. binary ASCII .

Although only certain exemplary embodiments of this invention have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of this invention. For example aspects of embodiments disclosed above can be combined in other combinations to form additional embodiments. Accordingly all such modifications are intended to be included within the scope of this invention.

