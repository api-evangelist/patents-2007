---

title: System and method for complex schedule generation
abstract: A system and method for generating a schedule for multiple employees in a complex environment. In one embodiment, the method includes generating a schedule for multiple employees with varying skill sets for a time period, wherein the plurality of employees have varying overlapping skill sets that enable them to perform various tasks, and wherein employees are shared across tasks within the time period. In one embodiment, the method includes receiving a plurality of user inputs to a scheduling program, including a number of employee designations that each refer to a unique employee, and a number of skill sets that each correspond to one of the employee designations. The method further includes receiving a user input that changes the number of employee designations by indicating at least one changed employee, and estimating an effect of the at least one changed employee on effective staffing levels for each of the various tasks. The method further includes generating estimated effective staffing levels for each of the various tasks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634422&OS=07634422&RS=07634422
owner: Verint Americas Inc.
number: 07634422
owner_city: Melville
owner_country: US
publication_date: 20070417
---
This application is a continuation of copending U.S. utility application having Ser. No. 11 479 924 filed Jun. 30 2006 which is a continuation of U.S. utility application having Ser. No. 09 825 589 filed Apr. 3 2001 now U.S. Pat. No. 7 155 399 issued on Dec. 26 2006 both of which are entirely incorporated herein by reference.

The invention is in the field of generating complex schedules in dynamic environments such as call centers.

Generating schedules for employees is a complex problem for enterprises. Telephone call center scheduling is an example of a scheduling problem with a large number of variables. Variables include call volume at a particular time of day available staff skills of various staff members call type e.g. new order call and customer service call and number of call queues where a queue may be assigned a particular call type. A basic goal of call center scheduling is to minimize the cost of operators or agents available to answer calls while maximizing service. Quality of service or service level can be quantified in various ways. One common metric for call service level is the percentage of incoming calls answered in a predetermined time e.g. thirty seconds. The call center may receive calls of various types that are assigned to respective call queues.

Traditionally call center scheduling is performed by first forecasting incoming call volumes and estimating average talk times for each time period t based on past history and other measures . The forecast is based upon historical data. Next a closed form formula known as reverse Erlang C is used to compute full time equivalent FTE agent requirements to provide a desired service level for each time period t. Such a method is described in Elementary Queuing Theory and Telephone Traffic by Petr Beckmann 1977 Lee s abc of the Telephone Training Manuals Geneva Ill. After the FTE agent requirements are computed the required number of agents are scheduled for each time period t.

At a call center calls of different types are typically placed onto different queues by an Automatic Call Distributor ACD . The calls wait at the ACD for an operator to answer them. At many modern call centers the agents cannot answer any type of call they can only answer calls for which they have the prerequisite skill. At some call centers there is a group of agents for each type of call that comes in which means that each group and queue of calls can be treated as a separate problem. However at an increasing number of call centers agents are multi skilled and can answer calls from a variety of queues. Typically not all agents have the same skills and thus some agents can answer some calls while other agents cannot. The ACD distributes calls waiting in different queues to agents who are skilled to handle calls from the respective queues. This distribution task is referred to as skill based routing. Determining agent schedules for this latter type of call center is known as the skill based scheduling problem. It is considerably more difficult than the basic call center scheduling problem because of all the interactions between queues.

The skills based scheduling problem has no known closed form solution that can be used to estimate available FTE levels for each queue when agents are shared among queues. Prior attempts to solve the skills based scheduling problem involve the use of a discrete event ACD simulator to validate estimates. For example the skills based scheduling technique disclosed in U.S. Pat. No. 6 044 355 includes forming skill groups that contain agents with identical sets of skills preferences and priorities. A skill group availability array is then generated that attempts to estimate what percentage of scheduled agents of each skill type will be available to each call type during each time interval. Erlang processing and ACD simulation are used to increase the accuracy of the percentage estimates and standard call center schedule algorithms can then be used for scheduling.

Such prior solutions have other serious limitations. For example the array grows exponentially as the number of skills grow. This is particularly true because the skill group is inflexible in that each different combination of skill preference priority and proficiency requires the creation of a new skill group. The size of the array may thus reach a level at which processing time is too great and processing resources are inadequate. Another limitation of prior methods is that they do not allow for the easy determination of fine grain changes to the schedule such as the addition or subtraction of a single agent. The current methods require that the entire algorithm be executed again for any incremental change such as the addition or subtraction of one agent.

Other prior methods for skills based scheduling use skill groups similar to those disclosed in U.S. Pat. No. 6 044 355 and are limited to the assumption that each individual agent simply splits time at a predetermined ratio between various queues task switching . In such methods at any given time each agent is limited to taking calls from queues assigned to his or her skill group at that time. Each agent is unable to take calls from other queues that he or she may be skilled in. This is a serious limitation potentially causing some queues to overflow because the assigned skill group is busy while there may be idle agents in other skill group who are capable of taking those calls.

Another serious limitation of prior methods is that they provide relatively coarse approximations of schedules that fail to take into account all of the dynamics of a situation. For example if an agent from a new skill group is added to the schedule the performance of call queues that are not handled by the new agent may change. These complex dynamics are not modeled well in available scheduling methods.

Another limitation of current methods is that simulation must be performed for each iteration of the algorithm. One reason for this requirement is the failure of prior methods to estimate individual contributions of single agents to particular queues. This is expensive and time consuming.

Yet another disadvantage of prior methods for solve scheduling problems is that the algorithms of prior methods may require excessive time to execute because the prior methods are not designed to facilitate parallel processing.

A system and method for generating a schedule for multiple employees in a complex environment is described. In one embodiment the method includes generating a schedule for multiple employees with varying skill sets for a time period wherein the plurality of employees have varying overlapping skill sets that enable them to perform various tasks and wherein employees are shared across tasks within the time period. In one embodiment the method includes receiving a plurality of user inputs to a scheduling program including a number of employee designations that each refer to a unique employee and a number of skill sets that each correspond to one of the employee designations. The method further includes receiving a user input that changes the number of employee designations by indicating at least one changed employee and estimating an effect of the at least one changed employee on effective staffing levels for each of the various tasks. The method further includes generating estimated effective staffing levels for each of the various tasks.

A system and method for generating complex schedules in complex environments such as call center environments is described. The embodiments described include generating schedules for multiple employees or agents each having different sets of skills that enable them to perform various tasks. An agent may be shared across various tasks within one scheduled time period.

One example of a complex schedule is an agent schedule for a call center. A call center is an organization that answers calls from customers of an enterprise. An agent is an employee that is trained to answer calls. Each agent can have a different skill set. For example one agent may be trained to answer live telephone help inquiries regarding certain products respond to email regarding certain products receive telephone purchase orders for certain products etc. The agent may be assigned to multiple call queues within a time period. A call queue handles one type of contact requiring a particular skill or skills. The possible number of skill sets includes every permutation of combinations of the existing skills in the organization. Each agent has a particular skill set but the skill sets among different agents may overlap. In embodiments of the invention as described more fully below a user who is performing scheduling can quickly determine the overall effect on the entire schedule of removing or adding a single agent or more without restarting the entire scheduling process. The overall effect on the schedule accounts for the effect on each call queue even those queues that are not worked by the agent or agents being added or subtracted from the schedule. These queues are affected because the agents handling those queues will have more or less time to spend handling those queues as a result of handling more or less work on the queues that are usually worked by the agent or agents being added or subtracted. Embodiments of the invention also reduce the number of schedule simulations required in the scheduling process by performing simulations only at intervals. As described more fully below it is determined at what intervals simulation is necessary.

At it is determined whether the user has added an agent to the schedule or removed an agent from the schedule. If the user has made such a change an estimation function generates an estimate of the resultant change in the effective staffing of each queue. In one embodiment the estimation function is described at a high level by . The estimation function takes as inputs the skill set proficiencies priorities and preferences of the added or removed agent or changed agent . The estimation function also takes various statistics about each queue as input. The various statistics include call volume average handling time per call and the performance as measured by a previous simulation.

At the total effective work the changed agent will perform is calculated. As a function of call center configuration statistics including but not limited to the number of queues the agent is trained to handle the total amount of effective work i.e. effective FTE s or effective Erlangs of work that the agent will do is calculated. In one embodiment a lookup table is used. In the lookup table the number of queues is the index and the amount of effective work contributed is the data. This lookup table can be populated empirically using a simulator or it can be populated empirically using measurements from a sample of real call centers. The lookup table can also be designed to be adaptively filled and changed over time to most closely correspond to events in a particular call center. For discussion purposes the total work estimated for an agent is called W .

As shown at and the bunching factors for each queue and load remaining factors for each queue are calculated and used to scale each queue. Other factors may also be used to scale each queue. The bunching measure is defined as average handle time calls per time interval . Load remaining is defined as average handle time X number of calls not answered in a predetermined service time . Bunching and load remaining are combined either as a linear combination or through multiplication which yields an overall index for each queue. The overall index for each queue is called the I of the queue. At the total work computed or W is distributed across all the affected queues in linear proportion to the I values of all those queues. For all agents other than the changed agent work distribution is recalculated as described above. This is effectively like assuming that every remaining agent is removed and re added to the schedule allowing the algorithm to proceed again. The addition of the changed agent causes the load remaining to change and the adjustment of all remaining agents compensates for and empirically mimics second order effects. All other agents effective work is adjusted at . An estimate of effective staffing levels is output at .

If an agent has not been added or removed at it is next determined whether the simulator should be run at . An adaptive algorithm is used to determine whether the simulator should be run. In one embodiment the adaptive algorithm measures the cumulative error of using the estimation function from the results of simulation and uses it and a predetermined amount of allowed error to choose how many changes can be made to the schedule before running a simulation.

If it is determined that the simulator is not required the scheduling process continues at . If it is determined that a simulation should be run then the current schedule is simulated at . After simulation the estimated effective staffing levels that were output at are replaced by simulated effective staffing levels and scheduling continues at . The schedule is evaluated at to determine whether it is an acceptable schedule based upon predetermined criteria. If the schedule is acceptable it is output at .

Another aspect of the invention is the division of the scheduling method into parts for parallel processing. Parallel processing uses different processors simultaneously to perform different parts of the method for increased speed and efficiency. In one embodiment simulation can be performed on one processor while scheduling is performed on one or more different processors. In another embodiment the defined period to be scheduled is broken into sub periods of for example fifteen minutes each. The scheduling of each sub period is performed on a different processor.

