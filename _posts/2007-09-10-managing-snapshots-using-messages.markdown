---

title: Managing snapshots using messages
abstract: A method and apparatus for managing snapshots of a file system using messages. A snapshot is a restorable version of a file system created at a predetermined point in time. A message is a persistent data structure supported by a file server. A message may include one or more snapshots, attributes for the message, and/or access control information for the message. The attributes and access control information are applied to all snapshots in the message. The attributes in the message enable users to perform automatic event-based management of the snapshots in the message. The access control information in the message provides granular access control to the snapshots in the message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694095&OS=07694095&RS=07694095
owner: NetApp, Inc.
number: 07694095
owner_city: Sunnyvale
owner_country: US
publication_date: 20070910
---
The present invention generally relates to managing snapshots of file systems and more particularly to a method and system for providing granular access control to and management of snapshots using messages.

Because traditional file systems are too large to be transferred this problem is typically addressed through the use of snapshots. A snapshot is a restorable version of a file system created at a predetermined point in time. A snapshot may contain any changes to a file system s data blocks since a previous snapshot has been taken. To transfer a file system using a snapshot a first client requests a file server to create a snapshot and then a second client accesses the snapshot and recreates the file system. The recreated snapshot can either be shared with the second client or the second client can replicate the data contained within the snapshot using a software application.

However file servers in use today frequently use role based access control RBAC . Pursuant to RBAC a file server creating a snapshot cannot define a role that restricts access to the snapshot. The file server creating the snapshot defines a capability of restoring the snapshot and a role to a group of clients as opposed to a target recipient of the snapshot.

Capabilities including the capability of restoring a snapshot are usually defined by a storage administrator. However the storage administrator may not be aware of the application semantics used at the file servers for storage objects created by the file servers. Therefore a file server defines capabilities for snapshots and other storage objects created by the file server.

A combination of these capabilities defines a role. A group of clients are created having specified roles. Thus all clients within a group have the same capabilities defined by a specified role and no clients outside the group have those capabilities.

The capability of restoring a snapshot is common across all snapshots. For example suppose a creator of a snapshot is from a human resource department and a user restoring the snapshot is from a finance department. If a user in the engineering department has a capability of restoring a snapshot that user is able to access the data contained in the created snapshot even though that user is not the intended recipient of the snapshot. Currently there may be no way for the user in the human resource department to prevent users in the engineering department from accessing the data contained in the snapshot.

This lack of access control poses a security threat to data contained within the snapshot because any user within the group is able to view the contents of the snapshot. Currently there may be no mechanism that permits the user creating the snapshot to restrict access to the snapshot to a selected user or a selected group of users. Therefore there is a need for managing access control to snapshots to enable the creator of a snapshot to define different capabilities for different snapshots without the limitations of the prior art.

The present invention is a method and apparatus for managing snapshots of a file system using messages. A snapshot is a restorable version of a file system created at a predetermined point in time. A message is a persistent data structure supported by a file server. A message may include one or more snapshots attributes for the message and or access control information for the message. The attributes and access control information are applied to all snapshots in the message. The present invention has the advantages of providing granular access control over snapshots and enabling users to perform automatic event based management of snapshots via attributes . Access to the snapshots in the message can be restricted to a selected user or a selected group of users via the access control information in the message. By using the access control security threats to data contained within the snapshot can be reduced because the message specifies the exact users that may view the contents of the snapshots in the message.

The present invention permits a user creating a message to restrict access to the one or more snapshots also known as point in time images included in the message to a selected user or a selected group of users by using an access control for the message. The access control reduces a security threat to data contained within the snapshot because the message specifies the exact users that may view the contents of the snapshots in the message. Further the present invention permits a user creating a message to define an event based trigger for managing the snapshots in the message using attributes defined for the message.

The present invention is a method and apparatus for managing snapshots of a file system using messages. A snapshot is a restorable version of a file system created at a predetermined point in time. A message is a persistent data structure supported by a file server. A message may include one or more snapshots attributes for the message and or access control information for the message. The attributes and access control information are applied to all snapshots in the message. The present invention has the advantages of providing granular access control over snapshots and enabling users to perform automatic event based management of snapshots via attributes .

In an exemplary embodiment the present invention is implemented as an application executing on a computer operating system. It is noted that the principles of the present invention are applicable to any type of network attached storage NAS device running any type of operating system. For example a NAS device can include the NearStore storage system running the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. Further the principles of the present invention are applicable to any type of storage area network SAN .

A file server is a computer that provides file services relating to the organization of information on storage devices such as disks. The file server also called a filer includes a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks. Each on disk file may be implemented as a set of disk blocks configured to store information such as text whereas the directory may be implemented as a specially formatted file in which information about other files and directories are stored. A filer may be configured to operate according to a client server model of information delivery to thereby allow many clients to access files stored on a server e.g. the filer. In this model the client may comprise an application such as a file system protocol executing on a computer that connects to the filer over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the filer by issuing file system protocol messages in the form of packets to the filer over the network.

A common type of file system is a write in place file system an example of which is the conventional Berkeley fast file system. In a write in place file system the locations of the data structures such as inodes and data blocks on disk are typically fixed. An inode is a data structure used to store information about a file such as meta data whereas the data blocks are structures used to store the actual data for the file. The information contained in an inode may include e.g. ownership of the file access permission for the file size of the file file type and references to locations on disk of the data blocks for the file. The references to the locations of the file data are provided by pointers which may further reference indirect blocks that in turn reference the data blocks depending upon the quantity of data in the file. Changes to the inodes and data blocks are made in place in accordance with the write in place file system. If an update to a file extends the quantity of data for the file an additional data block is allocated and the appropriate inode is updated to reference that data block.

Another type of file system is a write anywhere or copy on write file system or the like that does not overwrite data on disks. If a data block on disk is retrieved read from disk into memory and dirtied with new data the data block is stored written to a new location on disk to thereby optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. A particular example of a write anywhere file system that is configured to operate on a filer is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. The WAFL file system is implemented within a microkernel as part of the overall protocol stack of the filer and associated disk storage. This microkernel is supplied as part of Network Appliance s Data ONTAP storage operating system residing on the filer that processes file service requests from network attached clients.

As used herein the term storage operating system generally refers to the computer executable code operable on a storage system that manages data access and may in case of a filer implement file system semantics such as the Data ONTAP storage operating system which is implemented as a microkernel. The Data ONTAP storage operating system is available from Network Appliance Inc. and implements a file system such as the Write Anywhere File Layout WAFL file system. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

Disk storage is typically implemented as one or more storage volumes that comprise physical storage disks defining an overall logical arrangement of storage space. Currently available filer implementations can serve a large number of discrete volumes.

The disks within a volume are typically organized as one or more groups of Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. In the example of a WAFL file system a RAID 4 implementation is advantageously employed which entails striping data across a group of disks and storing the parity within a separate disk of the RAID group. As described herein a volume typically comprises at least one data disk and one associated parity disk or possibly data parity partitions in a single disk arranged according to a RAID 4 or equivalent high reliability implementation.

The term snapshot is a trademark of Network Appliance Inc. and is used for purposes of this description to designate a persistent consistency point CP image. A persistent consistency point image PCPI is a point in time representation of the filer and more particularly of the active file system stored on a storage device e.g. on disk or in other persistent memory. A snapshot has a name or other identifier that distinguishes it from other PCPIs taken at other points in time. A PCPI can also include other information metadata about the active file system at the particular point in time for which the image is taken. The terms PCPI and snapshot shall be used interchangeably throughout this description without derogation of Network Appliance s trademark rights. Generally a snapshot may be viewed as an example of a read only reference store. In contrast the active file system may be viewed as an example of an active store that permits read and write operations.

A snapshot is a restorable version of a file system created at a predetermined point in time. Snapshots are generally created on some regular schedule. The snapshot is stored on disk along with the active file system and is called into the buffer cache of the filer memory as requested by the storage operating system. After a snapshot has been created and file data blocks modified the file storage operating system can reconstruct or restore the file system structure as it existed at the time of the snapshot by accessing the snapshot.

The network interconnects a number of clients and a file server . The file server described further below is configured to control storage of data and access to data that is located on a set of interconnected storage volumes or disks . It is noted that the terms storage volumes and disks can be used interchangeably herein without limiting the term storage volumes to disks.

Each of the devices attached to the network includes an appropriate conventional network interface connection not shown for communicating over the network using a communication protocol such as Transport Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP Hyper Text Transport Protocol HTTP Simple Network Management Protocol SNMP or Virtual Interface VI connections.

The file server includes a processor a memory a network adapter a nonvolatile random access memory NVRAM and a storage adapter all of which are interconnected by a system bus . Contained within the memory is a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks . In an exemplary embodiment the memory is addressable by the processor and the adapters for storing software program code. The operating system portions of which are typically resident in the memory and executed by the processing elements functionally organizes the filer by invoking storage operations in support of a file service implemented by the filer.

The network adapter includes mechanical electrical and signaling circuitry needed to connect the filer to clients over the network . The clients may be general purpose computers configured to execute applications such as database applications. Moreover the clients may interact with the filer in accordance with a client server information delivery model. That is the client requests the services of the filer and the filer returns the results of the services requested by the client by exchanging packets defined by an appropriate networking protocol.

The storage adapter interoperates with the storage operating system and the disks of the set of storage volumes to access information requested by the client . The storage adapter includes input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as Fibre Channel. The information is retrieved by the storage adapter and if necessary is processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapter where the information is formatted into appropriate packets and returned to the client .

In one exemplary implementation the filer includes a non volatile random access memory NVRAM that provides fault tolerant backup of data enabling the integrity of filer transactions to survive a service interruption based upon a power failure or other fault.

To facilitate the generalized access to the disks the storage operating system implements a file system that logically organizes the information as a hierarchical structure of directories and files on the disks. Each on disk file may be implemented as a set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which other files and directories are stored. As noted above in an exemplary embodiment described herein the storage operating system is the NetApp Data ONTAP operating system available from Network Appliance Inc. that implements the write anywhere file layout WAFL file system. It is noted that any other appropriate file system can be used and as such where the terms WAFL or file system are used those terms should be interpreted broadly to refer to any file system that is adaptable to the teachings of this invention.

Referring now to the storage operating system consists of a series of software layers including a media access layer of network drivers e.g. an Ethernet driver . The storage operating system further includes network protocol layers such as an Internet Protocol IP layer and its supporting transport mechanisms a Transport Control Protocol TCP layer and a User Datagram Protocol UDP layer .

A file system protocol layer provides multi protocol data access and includes support for the Network File System NFS protocol the Common Internet File System CIFS protocol and the Hyper Text Transfer Protocol HTTP . In addition the storage operating system includes a disk storage layer that implements a disk storage protocol such as a redundant array of independent disks RAID protocol and a disk driver layer that implements a disk access protocol such as e.g. a Small Computer System Interface SCSI protocol.

Bridging the disk software layers with the network and file system protocol layers is a file system layer . Generally the file system layer implements a file system having an on disk format representation that is block based using data blocks and inodes to describe the files. As described above an inode is a data structure used to store information such as meta data about a file whereas the data blocks are structures used to store the actual data for the file. The information contained in an inode may include information relating to ownership of the file access permissions for the file the size of the file the file type and references to locations on disk of the data blocks for the file. The references to the locations of the file data are provided by pointers which may further reference indirect blocks that in turn reference the data blocks depending upon the quantity of data in the file.

In the storage operating system a data request path between the network and the disk through the various layers of the operating system is followed. In response to a transaction request the file system layer generates an operation to retrieve the requested data from the disks if the data is not resident in the filer s memory . If the data is not in the memory then the file system layer indexes into an inode file using the inode number to access an appropriate entry and retrieve a logical volume block number. The file system layer then passes the logical volume block number to the disk storage layer . The disk storage layer maps the logical number to a disk block number and sends the disk block number to an appropriate driver for example an encapsulation of SCSI implemented on a Fibre Channel disk interconnection in the disk driver layer . The disk driver accesses the disk block number on the disks and loads the requested data in the memory for processing by the filer . Upon completing the request the filer and storage operating system returns a reply e.g. an acknowledgement packet defined by the CIFS specification to the client over the network .

It is noted that the storage access request data path through the storage operating system layers described above may be implemented in hardware software or a combination of hardware and software. In an alternate embodiment of this invention the storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or in an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the file services provided by the filer in response to a file system request issued by a client .

A client requests a file server to create a snapshot of a file system step . The client issues the request to the file server via a command line interface or an application program interface API . The file server creates the snapshot of the file server and generates a message containing the snapshot step .

A user of the client determines whether additional snapshots need to be added to the message step . As an illustrative example if the user thinks that two or more snapshots are related then the user may want to ensure that all related snapshots are included in the message. Examples of related snapshots include snapshots from the same department snapshots of different versions of the same file system or a snapshot containing a database and a snapshot containing a transactional log for the database. In an alternate embodiment the determination whether additional snapshots need to be added to the message could be made automatically without user intervention. For example in some cases the file system may be layered over disks that span multiple volumes on the file server. A snapshot of such a file system would span multiple snapshots since a snapshot is taken at the filer volume level. In such circumstances all related snapshots could be automatically located.

If no additional snapshots are needed for the message the file server sets attributes and access control information for the message step and the method terminates step . The advantage of including attributes and access control information for the snapshots contained within a message is explained below.

If additional snapshots need to be added to the message step the client requests the file server to create a snapshot of the file system step . The file server creates the snapshot of the file system and adds the additional snapshot to the message step . Each snapshot to be added to the message is added one snapshot at a time. The client makes a determination as to whether additional snapshots need to be added to the message step and the method continues as described above.

In an alternate embodiment not shown in step the user could select an existing snapshot to add to the message instead of requesting the file server to create a new snapshot. The operation of the method is otherwise the same as described above.

The message may contain multiple snapshots . For example the message may contain multiple snapshots if the snapshots are taken of related file systems e.g. log and data or if the snapshots are taken of the same file system as it existed at different points in time. Further the message may contain multiple snapshots if the snapshots are similar from a user perspective in a manner defined by a file server. If the message contains multiple snapshots the snapshots are considered to be related.

To identify the snapshots within the message the snapshots are identified by a pointer to each snapshot and or a snapshot name. Due to the size of a snapshot the snapshots themselves are not included in the message . The pointer identifies the location of metadata information for each snapshot contained within the message .

To provide event based management of the snapshots the message includes attributes . The attributes define an event based trigger for managing the snapshots contained within the message . Defining attributes for the message automatically defines the attributes for all the snapshots within the message . Each message can have multiple attributes . Each attribute defines an operation and argument set the attributes are not fixed and vary depending on the operation and argument.

The attributes may be in any form but by way of example may be of the form operation N argument. As an illustrative example the attribute delete N access performs the operation of deleting a message after its Naccess after the message is restored. As an additional illustrative example the attribute delete N restore performs the operation of deleting a message after its Naccess after the first successful restore operation is performed on the message. After the Nnumber of operations defined in an attribute each operation performs a corresponding no op operation that stops the usage of the particular operation. If N is zero the operation is effective immediately after setting the attribute. Further the attributes can be defined so that an operation is performed after a set interval of time. This feature permits automatic event based management of the one or more snapshots included in the message without any manual intervention by a file server using the attributes .

To restrict access to the snapshots the message includes access control information . The access control information enables a user of a file server creating snapshots to define policies that control access to the snapshots contained within the message . The access control information is defined for the message and is applicable to all snapshots contained within the message . The access control information includes an access control set containing pairs of roles and groups.

The access control set may be of the form r g r g . . . r g . The access control pair r g specifies that all users in group ghave access over all snapshots in the message as defined by the role r. As described earlier a role is a combination of capabilities and a group contains a set of users. Preliminary capabilities such as read write and login are predefined. Users within the group of users may pre exist or may be added by a storage administrator.

An illustrative example of an access control is read write finance manager . This access control specifies that all managers in the finance department have access to read and write all snapshots in the message . The names used in the access control pair are only illustrative of access control operation. For example a user defining the access control pair read write finance manager in the message must define a read write role and optionally defines a finance manger group if the group does not yet exist.

In an embodiment of the present invention the access control information includes UNIX file semantics for individual snapshots. For example a message may be created to be accessible only to the file server creating the message to a set of users in a group or to all users accessing a storage device. Therefore the use of access control information within the message provides granular control over the snapshots because the access control information is defined for a specific group of users by the user that created the message and not all other users.

The first client requests that the file server create roles and groups for data maintained at the file server step . Typically the clients do not have access to the file server for creating roles and groups. Therefore a user of first client must manually request that an administrator create roles and groups for data maintained at the file server via telephone e mail or in person.

The administrator of the file server creates the roles and groups for the data step . The roles and groups are created on the file server using a command line interface or a graphical user interface GUI . Further any application implementing the appropriate application programming interface API can communicate with the file server to create roles and groups. After creating the roles and groups the administrator manually informs the user of the first client that the roles and groups have been created via telephone e mail or in person step . The manual communication required between the user of the first client and the administrator of the file server is tedious and may require a considerable amount of time.

The first client requests the file server to create a snapshot of the file system of the file server step . The file server creates a snapshot of the file system step . The user of the first client manually provides the snapshot to the second client via telephone e mail or in person step . The snapshot provided to the second client contains a file path of the snapshot. A file path contains a filer name complete filer volume and a snapshot name. An example file path of a snapshot is myfiler vol myvol mysnap . The roles and groups created by the administrator allow the first client to permit a user of the second client to perform operations on the snapshot. However in contrast to the present invention there is currently no way to restrict operations to certain users when more than one user has the same role and group.

The second client restores the snapshot step by using a command line interface or a GUI. Further any application implementing the appropriate API can communicate with the second client to restore the snapshot. The user of the second client then manually informs the user of the first client that the snapshot has been restored via telephone e mail or in person step .

The user of the first client manually requests that the storage administrator delete the roles and groups via telephone e mail or in person step . Next the administrator removes the roles and groups in the file server step . The roles and groups are deleted from the file server by using a command line interface or a GUI. Further any application implementing the appropriate API can communicate with the file server to delete the roles and groups.

As can be seen from the method requires multiple communications between the user of the first client and the administrator of the file server . The file server need not be located within nor have constant communication with the first client but the administrator of the file server needs to have manual communications with the user of the first client . Thus it is difficult to optimize the various communications between the user of first client and the administrator of the file server . However as described below it is possible to optimize the communication between the user of first client and the user of the second client using messages.

A user of the first client executes an application using a command line interface or a GUI on the operating system of the first client to request the file server to create a message to be stored on the file server step . An example of the executed application is SnapDrive for UNIX from NetApp . This application runs at the application layer and communicates with a file system of the first client the file system of the file server and peer applications on other clients. Any application implementing the appropriate API can communicate with the application to create the requested message from the first client . The message creation request includes one or more snapshot names attributes for the message and access control information including roles and groups for the message.

The file server creates and stores the message according to the request received from the first client on the file server step . The file server stores the message including the one or more snapshot names attributes for the message and access control information for the message. As stated above with respect to the access control information for the message is an access control set and contains pairs of roles and groups. In contrast to the method described above the administrator of the file server need not be involved in controlling access to the snapshots contained in the message.

To send the message from the first client to the second client the user of the first client manually provides the file path of the message to the user of the second client via telephone e mail or in person step . Similar to method described above this step also requires manual communication between the user of the first client and the user of the second client . However in contrast to method this is the only manual communication needed between the users of the clients and does not involve the administrator of the file server .

The second client executes an application on the operating system of the second client and requests access to the message stored at the file server using a command line interface or a GUI step . An example application is SnapDrive for UNIX from NetApp . The application runs at the application layer and communicates with a file system of the second client the file system of the file server and peer applications on other clients. Any application implementing the appropriate API can communicate with the application on the second client to request access to the message.

When the file server is not accessible to both the first client and the second client the message may be replicated for example using SnapRestore technology from NetApp from the file server to a second file server that is accessible to the second client .

Access to the snapshots in the message is granted to the application on the second client according to the access control information in the message step . The application on the second client specifies the role and group of the application user when requesting access to the snapshots. The role and group of the application user is compared against the pairs of roles and groups specified in the access control information in the message. If the role and group of the application user matches the access control information in the message the user is granted access to the snapshots and may perform operations on the snapshots as permitted by the access control information.

In an alternative embodiment if the role and group of the application user on the second client do not match any of the access control information in the message an access violation event is generated by the application on the second client . The access violation event informs the user that the access request has been denied. In an illustrative embodiment as a result of the access violation event the application on the second client may change its role and group and or log the event.

After the message has been accessed the attributes in the message determine whether an action is required on the message by the file server after the application on the second client requests access to the message step . As stated above with respect to the attributes define an event based trigger for managing the one or more snapshots contained within the message.

In contrast to the method described above in the method provides the advantage of optimizing communication between the first client the file server and the second client by minimizing the number of communications between these entities.

In operation a user executes the application on the processor in the first client to request the file server to create a message with a snapshot step . An example application is SnapDrive for UNIX from NetApp . The application runs at the application layer and communicates with the file system of the file server and peer applications on other clients. As an illustrative embodiment the message includes one or more snapshots of the file system attributes for the message and or access control information according to the request received from the first client . As stated above with respect to the access control information for the message is an access control set and contains pairs of roles and groups. The processor in the file server controls creation and storage of the message.

The user of the first client informs a user of the second client that a message has been created step and provides the location of the message on the file server . Then the user of the second client executes the application on the processor of the second client and requests access to the message stored on the file server step . An example application is SnapDrive for UNIX from NetApp . The application runs at the application layer and communicates with the file system of the file server and peer applications on other clients. The application specifies the role and group of the user of the second client when requesting access to the message.

Access to the message is granted to the application according to the access control information in the message. The role and group of the application user of the second client is compared against the pairs of roles and groups specified in the access control information in the message. If the role and group of the application user matches the access control information in the message the user is granted access to the snapshots and may perform operations on the snapshots as permitted by the access control information step . Optionally the user of the second client sends an acknowledgement of receipt of the message to the first client step .

In an alternative embodiment if the role and group of the application user on the second client do not match the access control information in the message an access violation event is generated by the application . The access violation event informs the user of the second client that the access request has been denied. In an illustrative embodiment as a result of the access violation event the application may change its role and group and or log the event.

After the message has been accessed the attributes in the message determine whether an action is required on the message by the file server after the application requests access to the message. As stated above with respect to the attributes define an event based trigger for managing the one or more snapshots contained within the message.

The present invention can be implemented in a computer program tangibly embodied in a computer readable storage medium containing a set of instructions for execution by a processor or a general purpose computer and method steps of the invention can be performed by a processor executing a program of instructions to perform functions of the invention by operating on input data and generating output data. Suitable processors include by way of example both general and special purpose processors. Typically a processor will receive instructions and data from a read only memory ROM a random access memory RAM and or a storage device. Storage devices suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices magnetic media such as internal hard disks and removable disks magneto optical media and optical media such as CD ROM disks and digital versatile disks DVDs . In addition while the illustrative embodiments may be implemented in computer software the functions within the illustrative embodiments may alternatively be embodied in part or in whole using hardware components such as Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs or other hardware or in some combination of hardware components and software components.

While specific embodiments of the present invention have been shown and described many modifications and variations could be made by one skilled in the art without departing from the scope of the invention. The above description serves to illustrate and not limit the particular invention in any way.

