---

title: Digital media organization and access
abstract: Methods and apparatus, including computer program products, implementing and using techniques for accessing and organizing data items, including items of digital media, such as digital images, video stream, audio stream, text documents and the like. An object model defines a plurality of data object classes, including a media object class for representing items of digital media and a tag object class for representing categories of digital media. A request for one or more data items specifies a search condition. A collection of one or more data objects instantiated from the data object classes is generated, whereby the data objects in the collection represent data items satisfying the search condition. An iterator configured to sequentially access the data items represented by the data objects in the collection of data objects is generated and used to sequentially access the data items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010548&OS=08010548&RS=08010548
owner: Fotiva, Inc.
number: 08010548
owner_city: San Jose
owner_country: US
publication_date: 20071025
---
This application is a divisional of and claims priority to pending U.S. application Ser. No. 10 151 651 entitled DIGITAL MEDIA ORGANIZATION AND ACCESS filed on May 16 2002 which claims priority to U.S. Provisional Application Ser. No. 60 291 840 filed May 17 2001. Priority is claimed to the aforementioned patent applications and the entire contents of both are hereby incorporated by reference.

With the advent of digital photography and the world wide web there has been an exponential growth in the creation and storage of digital photographic images. As the number of digital photographs taken and stored has grown so too has the need for a convenient method of archiving cataloguing searching and retrieving them. Modern methods of archiving and storing digital images typically require users to remember large amounts of information merely to locate photos that are of particular interest to them. For example many users currently store their digital images in the hierarchical directory based file system structure that is native to personal computers. To find particular photos stored in such a hierarchical directory tree or structure users must know the full pathname to the directory in which their photographs are stored.

There are other disadvantages to storing digital photographs in a hierarchical directory based file system. For example cataloguing and storing groups of photos by categories such as vacation photos or wedding photos requires creating different directories for each of the desired categories. This further increases the amount of information that must be remembered in order to locate desired photos. In addition in order to store photos in two or more overlapping categories such as photos that include your favorite aunt and photos from your cousin s wedding users must either store duplicate photographs or master the concepts of directory trees and file pointers. While these are not difficult concepts for sophisticated computer users they can be troublesome for less sophisticated users thereby limiting the useful ways these users can store and retrieve digital photographs and other data items such as video streams audio streams and text documents.

The present invention provides methods and apparatus including computer program products for accessing and organizing items of digital media including digital images video stream audio stream text documents and the like. In general in one aspect the invention features providing an object model defining a plurality of data object classes the data object classes including a media object class for representing items of digital media and a tag object class for representing categories of digital media. A media object is an instantiation of the media object class and can be associated with zero or more tag objects. A tag object is an instantiation of the tag object class and can be associated with zero or more media objects.

A request is received for one or more data items the request specifying a search condition. A collection of one or more data objects instantiated from the data object classes is generated whereby the data objects in the collection represent data items satisfying the search condition. An iterator configured to sequentially access the data items represented by the data objects in the collection of data objects is generated and used to sequentially access the data items.

Implementations of the invention may include one or more of the following. The object model can further include an edit object class for representing edit operations. An edit object is an instantiation of the edit object class and is associated with a media object representing an item of digital media on which an edit operation represented by the edit object has been performed.

A search condition can specify one or more categories of digital media and a collection of data objects can be generated by identifying items of digital media associated with the specified categories. In this implementation the collection represents directly or indirectly media objects representing the identified items of digital media.

A search condition can specify metadata and a collection of data objects can be generated by identifying data items based at least in part on the specified metadata. In this implementation the collection represents data objects representing the identified data items.

A search condition can specify a set of categories of digital media and a collection of data objects can be generated by identifying items of digital media associated with one or more of the categories associated with the specified set. In this implementation the collection represents a collection of media objects representing the identified items of digital media. The set can be specified by a group or alternatively the set can be specified by a parent.

A search condition can specify one or more items of digital media including one or more of a digital image video stream audio stream and text document and a collection of data objects can be generated by identifying one or more categories of digital media associated with the specified items of digital media. In this implementation the collection represents a collection of tag objects representing the identified digital media categories.

A search condition can specify a set of categories of digital media and a collection of data objects can be generated by identifying one or more categories of digital media associated with the specified set. In this implementation the collection represents a collection of tag objects representing the identified digital media categories.

The object model can further include a group tag object class for representing groups of categories of digital media. A group tag object is an instantiation of the group tag object class and can be associated with zero or more tag objects representing categories of digital media included in a group of categories represented by the group tag object. A search condition can specify one or more categories of digital media. A collection of data objects can be generated by identifying one or more groups of a plurality of categories of digital media the groups associated with the specified categories. In this implementation the collection of data objects represents a collection of group tag objects representing the identified groups. In another implementation the search condition can specify one or more items of digital media and a collection of group tag objects can be generated by identifying one or more groups of a plurality of categories of digital media the groups associated with media objects representing the specified items of digital media.

A search condition can specify one or more items of digital media and a collection of data objects for each specified item of digital media can be generated by identifying one or more operations previously performed on the item of digital media. In this implementation the collection represents a collection of data objects representing the identified operations for the corresponding items of digital media. In one implementation the identified operations can include edit operations previously performed on the specified items of digital media and an iterator can be used to sequentially access the identified edit operations for each item of digital media and reapply each edit operation to the item of digital media to create a current state of the item of digital media.

In another implementation each data object can represent a processing operation previously performed on the specified items of digital media. An iterator can be used to sequentially access the identified processing operations for each item of digital media and to generate a processing history log for the corresponding item of digital media.

A search condition can specify one or more categories of digital media and a collection of data objects can be generated by identifying items of digital media associated with the specified categories. In this implementation the collection represents a collection of media objects representing the identified items of digital media. An edit list for each media object in the collection of media objects that represents an item of digital media previously edited by one or more edit operations can be generated. The edit list represents one or more edit objects representing the one or more edit operations performed on the corresponding item of digital media. An edit iterator is generated for each edit list the edit iterator configured to sequentially access edit operations represented by the edit objects. The edit iterator is used to sequentially access the identified edit operations for each media object and reapply each edit operation to the item of digital media represented by the corresponding media object to create a current state of the item of digital media.

In response to user input operation on a data item represented by one or more of the data objects can be performed. The operation can include displaying the data item on an output device which display can be a thumbnail representation of the data item. The operation can include an edit operation in which case a current edit object representing the edit operation performed on the data item is created and an edit list for the corresponding data object generated. The edit list represents edit objects representing all edit operations associated with the media object. The current edit object is sequentially appended to the edit list.

In another implementation the operation can be to associate a first data item represented by a first data object in a collection of data objects with a second data item represented by a second data object. A data item is created defining an association of the first data item represented by the first data object with the second data item representing the second data object. In the case where the first data object is a media object and the second data object is a tag object the data item defining the association is represented by a page object. In the case where the first data object is a tag object and the second data object is a group tag object the data item defining the association is represented by a group member object. If the association between the first data item represented by the first tag object and the second data item represented by the second data object is a parent child relationship then the data item defining the association can be metadata associated with the first and second data objects the metadata specifying the parent child relationship. Alternatively the operation can be to disassociate a first data item represented by a first data object in the collection of data objects with a second data item represented by a second data object.

In general in another aspect the invention features a system for accessing data items. The system includes a client subsystem configured to receive a request to access one or more data items the request specifying a search condition generate a collection of one or more data objects representing data items satisfying the search condition and generate an iterator to sequentially access the data items represented by the collection of data objects. The system further includes a server subsystem configured to use the iterator to sequentially access the data items represented by the collection of data objects.

Implementations of the invention can includes one or more of the following. The system can further include a user interface configured to receive user input specifying a request to access data items transmit the request to the client subsystem and receive data items from the client subsystem responsive to the request.

The data items can be stored in a data store and the server subsystem can be further configured to communicate with the data store using commands recognizable by the data store to access data items from and write data items to the data store. In one implementation the data store can be a database having a database management system and the server subsystem can be further configured to communicate with the database management system using commands recognizable by the database management system to access data items from and write data items to the database. In another implementation the data store can be a file directory system.

The invention can be implemented to realize one or more of the following advantages. Data items stored in a data store can be organized and accessed using an intuitive user friendly object model independent of how the data items are actually stored. If the data store is a database for example traditional database concepts such as keys indexes and query languages are hidden from a user and exposed only in the interface between the server subsystem and the data store providing a user friendly adaptable system. Because the object model operates independent of the data store the system can be implemented with nearly any data store and a flexible and consistent method for accessing and organizing data items is provided. The object model permits a search for data items to be conducted without accessing all data items responsive to the request at once thus consuming minimal main memory storage RAM .

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will be apparent from the description the drawings and the claims.

Data items can be sequentially accessed from a data store using an object model. The process of using an object model to access the data items can be implemented as a tiered system in communication with a user interface and a data store as shown in .

The data store provides persistent storage for the data items and can either be local or in a remote location across a local or wide area network. The data items can include digital media such as digital images or photographs video streams audio streams text documents or more generally any document having digital content. Data items can also include categories of digital media or groups of categories of digital media. Metadata about the digital media such as the date and time the digital media was captured or created or a textual or audio annotation describing the digital media can be associated with data items. Metadata can also include the name of a category of digital media and information identifying digital media included in the category or historical information such as a transaction log about digital media. The data store can be a commercially available relational database such as Oracle9I available from Oracle Corporation of Redwood Shores Calif. Alternatively the data store can be a file directory system.

The lower tier of the system the server subsystem communicates with the data store to either retrieve data items from or write data items to the data store . The server subsystem implements an object model in which data items and the relationships between them are represented by data objects. The server subsystem maps the object model to the data items stored in the data store . Communication between the server subsystem and the data store is by commands recognizable by the data store . For example if the data store is a database supporting the ODBC Open Database Connectivity standard then the server subsystem can communicate with the data store using ODBC application programming interfaces for example using SQL for accessing data from the data store . Communication between the server subsystem and the upper tier the client subsystem is in terms of the object model.

The client subsystem asynchronously receives requests through a user interface to retrieve data items from or write data items to the data store and asynchronously sends responses to such requests to the user interface or an output device such as a printer . The client subsystem translates a request for data items into terms of the object model and communicates the request to the server subsystem . The server subsystem implements the object model to sequentially access data items from the data store responsive to the request. The requested data items are returned to a user through the user interface .

The iterator is configured to sequentially access data items represented by the data objects included in the collection. The iterator is used to sequentially access the data items represented by the data objects . For example photographs associated with a category specified by the search condition are sequentially accessed and retrieved from the data store and can be presented to a user by display on an output device such as a computer monitor. Presentation to the user can be of the complete photographs or can be a thumbnail representation of the photographs thus allowing a collection of thumbnail representations to be conveniently displayed on a computer screen.

In one implementation a list can be used to represent the collection of data objects although other data structures can be used.

A data object is an instantiation of a data object class and represents a data item. Data object classes can include for example a media object class a tag object class an edit object class and a group tag object class. A media object is an instantiation of the media object class and represents an item of digital media. A tag object is an instantiation of the tag object class and represents a category of digital media. Thus a data item is a generic term that can refer to an item of digital media a category of digital media or any other electronic data that can be represented by an instantiation of a data object class. Edit objects and group tag objects are described below.

A media object is associated with a tag object if the digital media item represented by the media object is a member of the category of digital media represented by the tag object. A media object can be associated with a zero or more tag objects and a tag object can be associated with zero or more media objects. One advantage of the object model is that a single item of digital media can be included in more than one categories of digital media without having to duplicate the item of digital media in the data store thus minimizing the use of storage space. This is achieved by simply associating the media object representing the item of digital media with more than one tag object.

Additional data objects can be provided to define relationships between tag objects and media objects. Thus whenever a media object is associated with a tag object for example when a user designates an item of digital media represented by a media object as a member of a category of digital media represented by a tag object a page object can be created. The page object defines a relationship between the tag and media objects and can support an arbitrary sequence of media objects as described further below.

An item of digital media represented by a media object can be removed from a category of digital media represented by a tag object. The page object associating the media object and the tag object can be deleted thereby severing the relationship between the tag object and media object and thus removing the item of digital media from the category.

The tag object is shown as being associated with at least three media objects in addition to the media object . That is the items of digital media represented by media objects and are members of a category represented by the tag object . The tag objects can represent user defined categories of digital media or can be automatically created to represent one or more items of digital media having a common characteristic or on which a common operation was performed. For example a user can create a category named Lake Tahoe to represent all of the user s photographs stored in the data store that were taken on the user s Lake Tahoe vacation.

Tag objects can also be used to record the processing history of an item of digital media. For example if the user selects some of the photographs from the Lake Tahoe category and prints a hard copy of the subset of photographs a tag object can be used to store a historical log of that print operation. When the user selects the items of digital media to be printed e.g. by selecting the corresponding media objects and specifies a print operation the system can generate a tag object to represent the operation. The operation itself can be identified by metadata associated with the tag object. The tag object is associated with the media objects representing the subset of photographs. In this manner for example a log of printing operations performed on a particular photograph can be generated by accessing all tag objects representing metadata about a historical print operation that are associated with a media object representing the photograph.

Media objects can be accessed by reference to a tag object. As illustrated by a user can request to view all photographs included in the previously defined Lake Tahoe category . Any convenient means to receive such a request can be implemented with a user interface. For example once a user has defined a category an icon can be displayed on the user interface representing the category in this example the Lake Tahoe category. By activating the icon for example with the click of a mouse the user can request to view the photographs included in the category.

Once a request to view photographs has been received from the user interface a list is generated . In this example the user is requesting items of digital media which are therefore represented by media objects. The search information provided by the user identifies a category of digital media which is therefore represented by a tag object. As illustrated by a list can represent a tag object and media objects which are associated with the tag object . The tag object represents the Lake Tahoe category. The media objects represent photographs included in the Lake Tahoe category.

In the next step an iterator is generated to sequentially access the media objects represented by the list . The iterator is then used to sequentially access the photographs represented by the media objects from the data store . As described above this requires a command or commands to be generated and transmitted to the data store that are recognizable by the data store. The accessed photographs are then returned to the user interface and displayed to the user on an output device .

In addition to filtering the data items included in the data store that is returning data items satisfying a certain condition such as belonging to a specified category the data items responsive to a request can also be sorted according to a specified criteria. If the data items included in the data store include metadata information associated with the data items then the data items can be sorted according to the metadata. For example if the date an item of digital media was captured is stored as metadata associated with the item of digital media then a request for items of digital media could include a request to sort the items of digital media responsive to the request by date. Based on the metadata the responsive items of digital media would be returned to the user in a particular sort order. Metadata can include any kind of information specified by a user for example time of capture name of photographer or source of digital media to name a few.

It is also possible to create a list representing media objects from multiple tag objects. For the purpose of the following illustrative example assume a user has previously organized a collection of photographs into a Lake Tahoe category and into a Water skiing category. The Lake Tahoe category includes all photographs taken while on a vacation at Lake Tahoe. The Water skiing category includes all photographs taken involving water skiing at a number of locations including Lake Tahoe. If the user wished to find all water skiing photographs taken while on vacation at Lake Tahoe the user can request to view photographs by indicating both the Water skiing and Lake Tahoe categories. In one implementation the user can click on icons representing each of these categories to make the request.

The photographs returned to the user in response to this request can potentially include three sets of photographs the best matching set which are photographs of water skiing taken at Lake Tahoe the near matching set which are photographs of either water skiing or Lake Tahoe and the non matching set which are photographs of neither water skiing nor Lake Tahoe. The user interface either by user input or automatically can specify whether one or more of these sets should be hidden so that for example only the best and near match sets would be made visible through the user interface.

A list is generated representing a first tag object representing the Lake Tahoe category and a second tag object representing the Water skiing category. An iterator is generated that is configured to step through all media objects representing items of digital media in the data store but to ignore any media objects that do not belong to one of the visible match sets in this instance the best match and near match sets. At each iteration step the iterator would return a media object from one of the visible match sets along with an indication as to which match set the media object belonged.

The request could also specify a sort order and could further specify whether the photographs should be grouped and sorted by set or grouped and sorted as one intermixed collection. For example the first set of media objects returned during the iteration could represent all the best matching photographs sorted by date. A second set of media objects returned would represent all near matching photographs sorted by date. Media objects representing the non matching photographs would not be returned in this instance. Alternatively all media objects representing all the best and near matching photographs could be returned sorted by date with the best and near matching photographs intermixed. In either case the user interface would display the photographs represented by the media objects in whichever grouping and sort order had been requested. A visual indication can be included on or near each photograph to indicate whether it belongs to the best or near match set.

A tag object can be accessed by reference to a media object. As illustrated by for example a user can request the names of all the categories in which a specific photograph is included in this instance the sailboat photograph . The user may have included the sailboat photograph in the Lake Tahoe category but may have also created a separate category for all sailboat photographs. The sailboat photograph is represented by a media object and the categories of photographs including the sailboat photograph are represented by tag objects.

As illustrated by a list is then generated representing a media object which represents the sailboat photograph and a collection of tag objects associated with the media object by page objects . The tag objects represent the categories responsive to the user s request. An iterator is generated to sequentially access the tag objects represented by the list . The list and the iterator are then used to sequentially access the data items represented by the tag objects . In this example the user has requested the names of the categories including the sailboat photograph. The name of a category represented by a tag object can be included as metadata in the data item represented by the tag object. Accordingly once the data items represented by the tag objects are accessed from the data store the names of the categories can be determined from the metadata and returned to the user by way of the user interface .

A group including two or more categories of digital media can be defined either by a user or automatically. A data item identifying the group by name and the categories included within the group can be represented by a group tag object an instantiation of the group tag object class. A group tag object represents zero or more tag objects included in the group each tag object representing zero or more media objects as described above. Each time a tag object is associated with a group tag object a group member object is created. A group member object represents the relationship between a group tag object and a tag object and is similar in concept to a page object in relation to a media object and a tag object.

Items of digital media are maintained in the data store in their original unaltered state even if an edit operation has been performed on the items of digital media. As illustrated by a user can request to edit an item of digital media for example a photograph . The edit operation can be any type of operation such as cropping rotating or re sizing the photograph. The user performs the edit operation on the photograph for example by clicking a rotation button in the user interface to rotate the image . The digital media item stored in the data store corresponding to the photograph is not altered. Accordingly in order for the user to subsequently retrieve the rotated photograph from the data store the edit operation performed on the photograph must somehow be stored in the data store. An edit object is a data object representing an edit operation performed on an associated media object and is an instantiation of the edit object class The edit object also represents information identifying the associated media object and sequencing information indicating the edit object s place in a sequence of edit operations performed on the digital media item represented by the associated media object. In the next step an edit list is generated representing all edit objects associated with the media object representing the photograph . If no edit operations had previously been performed on the photograph then the edit list will be empty.

Items of digital media included in categories of digital media that are within a group of categories can be accessed by reference to the group of categories. by way of illustrative example shows that a user can request to view all of the users Vacation photographs. For the purpose of this example it is understood the user previously categorized his photographs by vacation including his Lake Tahoe vacation Hawaii vacation and Mexico vacation. The user also created a group named Vacation that included each of the three categories namely Lake Tahoe Hawaii and Mexico. The user may have also performed one or more edit operations on some or all of the photographs included in these categories.

The user now requests to view the current state of all Vacation photographs . A list is generated representing media objects that represent photographs responsive to the request . shows a list representing a group tag object which group tag object represents the Vacation group of photographs. The group tag object is associated with three tag objects each representing a category of digital media included in the group. For example tag object can represent the Lake Tahoe category of photographs tag object can represent the Hawaii category of photographs and tag object can represent the Mexico category of photographs. Each tag object is associated with media objects representing photographs included in the category represented by the tag object. Tag object is associated with media objects by way of page objects . Media objects represent the Lake Tahoe photographs included in the Lake Tahoe category. Similarly media objects represent the Hawaii photographs included in the Hawaii category and media objects represent the Mexico photographs included in the Mexico category.

In the next step an iterator is generated to sequentially access the media objects from the data store . Using the list and the iterator a media object for example media object is accessed from the data store . Because the photograph represented by the media object may have been altered by one or more edit operations it must be determined whether or not any edit objects are associated with the media object .

If one or more edit objects exist that are associated with the media object Yes branch of decision step then an edit list is generated representing edit objects associated with the media object . An edit iterator is generated to sequentially access the edit objects represented by the edit list . As discussed above an item of digital media that has been altered by edit operations is retained in an unaltered state as represented by a media object. A current state of the digital media item is achieved by sequentially reapplying each edit operation previously performed on the digital media item using an edit list and edit iterator. Using the edit iterator the edit objects associated with the media object are sequentially accessed and the edit operations represented by the edit objects are sequentially reapplied to the photograph represented by the media object to create a current state of the photograph . The current state of the photograph is then returned to the user by way of the user interface .

A determination is then made as to whether or not there remain media objects represented by the list to be accessed . In this instance it would be determined that media objects remained to be accessed Yes branch of decision step and the iterator would be used to access the next media object in sequence for example media object . It would then be determined whether or not edit objects existed that were associated with media object and the process would continue as described above until every media object had been accessed and the current state of the corresponding photographs returned to the user interface.

A user can select certain items of digital media on which to perform an operation. For example if a collection of digital media is displayed on a computer monitor by thumbnail representations of the digital media a user can select certain of the digital media by clicking on or otherwise highlighting the corresponding thumbnail representations. Each time a user selects or deselects an item the user interface informs the client subsystem such that the client subsystem knows which media objects representing the selected items have been added to or removed from the selection. The user can then perform an operation to be applied to all digital media items represented by the selected thumbnail representations. For example the user can choose to print a hard copy of all selected items of digital media. The client subsystem will therefore only return the selected items of digital media to an output device for printing because the client subsystem has kept track of which media objects representing the selected items of digital media are included in the current selection.

In another example the user can perform an edit operation on all digital media items represented by the selected thumbnail representations. A common problem with many digital images is that when a digital camera is rotated to a take a portrait photo the resulting digital image needs to be rotated by 90 so that it is not displayed sideways. A user might select multiple digital images to be rotated by clicking on thumbnail representations of the corresponding images. As discussed above the client subsystem creates an edit list for each media object representing a selected digital image the edit list representing the edit objects associated with a media object. A corresponding edit iterator is generated traverses the edit list and appends a new edit object representing the rotation operation onto the edit list. A data item represented by the edit object is then written to the data store so that when the data store is later searched for the corresponding digital image an updated edit list can always be returned to display a current state of the digital image.

The object model permits a search for data items to be conducted without accessing all data items responsive to the request at once thus consuming minimal main memory storage RAM . For example a user can request to perform an edit operation on all photographs included in a category of photographs. A list can be generated representing a tag object representing the category of photographs. Using a corresponding iterator one at a time a photograph can be accessed and the edit operation performed thus requiring only one photograph rather than the entire collection of photographs to consume memory storage at any given time.

Categories of digital media can be associated with one another using parent child relationships creating a hierarchical relationship among categories. illustrates a parent child hierarchical organization of multiple tag objects representing categories of digital media. At the top of the hierarchy is a tag object representing a category of digital media identified by the name Sports . The sports tag object is a parent to three children tag objects namely the water sports tag object the summer sports tag object and the team sports tag object . The water sports tag object represents a category of digital media identified by a user as water sports and is a sub category of the sports category represented by the sports tag object . The water sports tag object is not only a child with respect to the sports tag object but is also a parent with respect to two child tags the water skiing tag object and the boating tag object . In this manner a tag object can be both a parent and a child tag. Similarly the boating tag object a child with respect to the water sports tag object is a parent with respect to the sailing tag object and the kayaking tag object .

By arranging categories of digital media in such a hierarchical organization a user can easily access digital media items at any level. For the purpose of an illustrative example assume that the media objects associated with tag objects in the hierarchy represent photographs. A user can request to view all boating related photographs. In this example the request includes a reference to a parent tag object namely the boating tag object . The parent child relationship between the water sports tag object and the boating tag object is not relevant for the purpose of responding to this particular request.

As shown in a list is generated representing the parent boating tag object which represents the two child tag objects the sailing tag object and the kayaking tag object . The sailing tag object is associated with media objects each media object representing a photograph included in the sailing category. The kayaking tag object is associated with media objects each media object representing a photograph included in the kayaking category. An iterator is generated to sequentially access each child tag object and associated media object represented by the parent boating tag object . Using the iterator the photographs represented by the sailing and kayaking media objects are sequentially accessed from the data store.

The user could have broadened his request to include all sports related photographs in which case a list would be generated representing all media objects associated with all child tag objects falling under the sports parent tag object in the hierarchy.

To avoid infinite recursion issues in the tag to tag relationships although any tag object may play the role of a group tag object or a parent tag object one tag object can never play the role of both group tag and parent tag object. However one tag object can play the role of a child tag object group tag object or be associated with a group tag object as a group member.

A page object can be used to define an arbitrary sequence of media objects associated with a tag object. As discussed above a page object defines a relationship between a media object and a tag object. A page object can also represent an ordering of the media objects associated with the tag object so that for example the items of digital media represented by the media objects will be presented to a user in a user defined sequence when a user requests to view the digital media items within a specified category.

As another example of the use of page objects to define a sequence a tag object can be associated with a number of media objects using page objects to define a sequence for the purpose of for example a slide show. A user may wish to include a particular item of digital media in the slide show in more than one location. Without duplicating the item of digital media in the data store the media object representing the item of digital media can be associated with the tag object more than once using more than one page objects. Each page object would define a different location of the item of digital media in the slide show.

As shown in tag objects that are associated with a group tag object can also be accessed according to an arbitrary sequence by using sequencing information represented by the corresponding group member objects . A group member object like a page object can represent sequencing information for a corresponding tag object. In the example shown the iterator will access the tag objects according to the sequence defined by the group member objects as indicated by the lines joining the group member objects . That is first tag object second tag object and third tag object .

The process for accessing data items from a data store described above can be implemented to support arbitrary levels of nested transactions to provide improved data integrity whether or not supported by the underlying data store. Larger more complex transactions can be composed of smaller transactions each of which is protected by the transaction mechanism whether used individually or as part of the larger transaction. Data integrity is therefore improved because either the entire transaction no matter how simple or complex succeeds or fails. Performance is also enhanced for larger multi step transactions because the entire transaction is committed to what is often relatively slow external data storage in a single operation.

For maximum performance in networked and multiprocessor systems and to provide the greatest level of responsiveness for other areas of the application the client subsystem and the server subsystem together provide the ability to run on separate execution threads. If desired and if supported by the underlying DBMS in the data store several such threads can operate simultaneously each with its own communication channel to the data store. A key benefit of this method is that tasks that for instance need access to both the local database and relatively slow network services can take place on a background thread with minimal performance impact on other tasks that simultaneously access the same local data store.

The invention can implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. Each computer program can be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language can be a compiled or interpreted language. Suitable processors include by way of example both general and special purpose microprocessors. Generally a processor will receive instructions and data from a read only memory and or a random access memory. Generally a computer will include one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks a magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the invention can be implemented on a computer system having a display device such as a monitor or LCD screen for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer system. The computer system can be programmed to provide a graphical user interface through which computer programs interact with users.

The invention has been described in terms of particular embodiments. Other embodiments are within the scope of the following claims.

