---

title: Methods for facilitating application development
abstract: Application development is facilitated by initializing a page token in response to receiving a request. The page token comprises an abstract model component containing a specification for obtaining data designated to be sent in a response to the request or a specification for updating data obtained from the request, and also a view component for providing referential format specifications for data provided in the abstract model component. The page token is passed between at least two components of a modified model-view-controller architecture via a standard interface. The components include a user interface controller, a user interface builder implementing a first standard interface, an application layer implementing a second standard interface, a data access manager implementing a third standard interface, and at least one data access utility implementing a fourth standard interface. Business logic is applied to contents of the page token as a result of the passing, and a response is presented to the request based upon results of applying the business logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814125&OS=07814125&RS=07814125
owner: International Business Machines Corporation
number: 07814125
owner_city: Armonk
owner_country: US
publication_date: 20070917
---
This application is a continuation of U.S. patent application Ser. No. 10 942 530 filed on Sep. 15 2004 the disclosure of which is hereby incorporated by reference herein in its entirety.

The present invention relates generally to application development and more particularly to methods for facilitating application development using a modified Model View Controller architecture.

Object oriented programming is a popular means for developing applications. Object oriented programming is implemented by a special language such as Java C Smalltall etc. and refers to a type of programming that enables programmers to define a data type of a data structure as well as operation functions to be applied to the data structure. In this manner the data structure becomes an object that includes the data and its functions. By design object oriented programs are easily modified as application changes are needed e.g. a new object can be created that inherits features of existing objects although they require substantial amounts of complex code even for simple applications.

Advanced object oriented programming techniques provide the ability to better manage program code as well as reduce the complexity of the code by compartmentalizing the code into organized chunks or by implementing a general pattern during code development. One general pattern used is the Model View Controller MVC architecture. In a programming environment the Model View Controller architecture distinguishes between a model the data the user is manipulating along with its associated business logic a view a graphical representation of the data and a controller the mechanisms by which the user manipulates the data . The controller may be used to change the state of the model which in turn is displayed in the view. Segregating these components enables developers to re use object code thereby reducing the time it takes to develop applications. Despite this the MVC model still requires rather extensive development even for simple applications.

What is desirable therefore is the ability to provide rapid application development and simple application integration where most of the development is left to simple configuration rather than complex code development.

Embodiments of the invention include methods for facilitating application development. The methods include initializing a page token in response to receiving a request. The page token comprises an abstract model component containing a specification for obtaining data designated to be sent in a response to the request or a specification for updating data obtained from the request and also a view component operable for providing referential format specifications for data provided in the abstract model component. The methods also include passing the page token between at least two components of a modified model view controller architecture. The components include a user interface controller a user interface builder an application layer a data access manager concrete models and the standard interfaces between these components. The methods further include applying business logic to contents of the page token as a result of the passing and presenting a response to the request based upon results of applying the business logic.

Other methods according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional methods be included within this description be within the scope of the present invention and be protected by the accompanying claims.

In accordance with exemplary embodiments methods for facilitating application development are disclosed. The modified Model View Controller MVC framework of the invention allows for rapid application development and simple application integration and enhancement whereby most of the development is left to simple configuration rather than complex code development. The flexibility of the modified MVC framework s implementation provides custom application specific extensions while maintaining a standard interface at each level to ensure simple integration. The implementation of the standard interface combined with a standard data structure i.e. page token eliminates the need for coding controller and model components. The page token object introduces the concept of an abstract model which is integrated with the view component to provide a more data driven aspect to the existing MVC model architecture.

In a block diagram of an exemplary system upon which the modified MVC framework may be implemented is generally shown. The system of includes one or more client systems through which users at one or more geographic locations may contact a host system . The host system executes computer instructions for implementing the modified MVC framework and the client systems are in communication with the host system via a network . Client systems interact with host system by initiating one or more requests. Client systems may be one of many different types of client systems e.g. a personal computer that initiates HTTP requests via a web browser or a full featured interface such as a rich client that is written with e.g. J2SE technology a mobile computing device such as a personal digital assistant PDA or cellular telephone that initiate requests using Wireless Markup Language WML or a server e.g. a web service peer that requests services with Electronic Business XML ebXML or Simple Object Access Protocol SOAP messages .

The network may be any type of known network including but not limited to a wide area network WAN a local area network LAN a global network e.g. Internet a virtual private network VPN and an intranet. The network may be implemented using a wireless network or any kind of physical network implementation known in the art. A client system may be coupled to the host system through multiple networks e.g. intranet and Internet so that not all client systems are coupled to the host system through the same network. One or more of the client systems and the host system may be connected to the network in a wireless fashion. In one embodiment the network is an intranet and one or more client systems execute a user interface application e.g. a web browser to contact the host system through the network while another client system is directly connected to the host system . In another exemplary embodiment the client system is connected directly i.e. not through the network to the host system and the host system is connected directly to or contains a storage device .

The storage device may be implemented using a variety of devices for storing electronic information. It is understood that the storage device may be implemented using memory contained in the host system or it may be a separate physical device. The storage device is logically addressable as a consolidated data source across a distributed environment that includes a network . Information stored in the storage device may be retrieved and manipulated via the host system . The storage device includes a data repository containing documents data web pages images multi media etc. Further storage device stores configuration files also referred to herein as page tokens . In an exemplary embodiment the host system operates as a database server and coordinates access to application data including data stored on storage device .

The host system depicted in may be implemented using one or more servers operating in response to a computer program stored in a storage medium accessible by the server. The host system may operate as a network server e.g. a web server to communicate with the client system . The host system handles sending and receiving information to and from the client system and can perform associated tasks. Host system executes various applications utilizing the modified MVC framework.

The host system may also include a firewall to prevent unauthorized access to the host system and enforce any limitations on authorized access. For instance an administrator may have access to the entire system and have authority to modify portions of the system. A firewall may be implemented using conventional hardware and or software as is known in the art.

The host system may also operate as an application server. The host system executes one or more computer programs to implement business logic and related functions. As previously described it is understood that separate servers may be utilized to implement the network server functions and the application server functions. Alternatively the network server the firewall and the application server may be implemented by a single server executing computer programs to perform the requisite functions.

Turning now to an exemplary model of the modified MVC framework is described. Also shown in is a request and response . A request may be a browser initiated HTTP request or may be a request for data a document image or other content. The request may also be a search request or a request to launch an application. Response refers to the results of the request processing. Response for example might be a web page search result etc. Requests and responses are handled by the user interface controller as described herein.

User interface controller employs e.g. a standard Java Action Servlet for managing configuration information as well as creating session associated information e.g. creating and destroying objects required by an application . User interface controller also manages panel flow using the configuration information and status information received from the page token via a standard interface . Standard interface as well as standard interfaces and enables and facilitates the independent functionality of the various elements that comprise the modified MVC framework model .

Also included in the modified MVC framework model is a page token . Page token is a data structure that contains a view component and an abstract model component . The page token is passed back and forth between model components including the user interface controller one of the user interface builders one of the application layer components and zero or more data access utilities via the data access manager during the request and response processes. The abstract model component contains a specification for obtaining data to be sent in a response or updating data obtained from the request . The view component contains a specification for formatting a response e.g. a web page and also referentially specifies how data from the abstract model component will be formatted in the view.

The user interface builder interacts with user interface controller via the standard interface described above. An application layer provides a set of high level application programming interfaces APIs for handling the page token and includes functionality to perform paging searching and standard validation e.g. checking required fields . Application layer may be extended as necessary to apply business logic such as custom validation functions. For example application layer manages requests sent via the data access manager to the concrete models if default interaction is not desired via the implementation of custom business logic. Business logic is applied by updating the page token as it is received from a user interface builder or after it has been updated by one or more of concrete models . Additionally a single piece of business logic may produce many page formats by updating the page token as needed.

The modified MVC model includes a set of standard user interface builders that interact with the application layer using a standard interface which performs requests to update the page token associated with the current panel or panel flow. This enables the modified MVC framework to provide a standardized way of building all like panels e.g. all add panels all modify panels all delete panels all list panels and all search panels. User interface builders use the view component of page token to identify what fields data and text should be placed on the panel as well as in which format to place them. Further user interface builders handle the plumbing associated with obtaining data from a client request by placing this data into the page token so that the business logic can be used to validate the request data without having to write the code to obtain it. These user interface builders may be extended if the needed type is not available in the existing framework as described further herein. Once extended they become immediately available as standard page types.

Also included in modified MVC framework model are data access manager and concrete models . As indicated above the abstract model component of page token contains a specification for obtaining data to be sent in a response or updating data obtained from a request . This specification is then routed by the data access manager to be translated into data store specific procedures by a translation layer provided by data access utilities implemented in concrete models . By performing translation of the specification at this location in the framework data store independent functionality may be achieved thereby eliminating the need to write code to access a data store.

Concrete models represent a collection of objects responsible for managing data sources such as data sources . This collection may consist of objects that manage one or more such sources comprising a variety of types e.g. IBM s DB2 Lightweight Directory Access Protocol LDAP eXtensible Markup Language XML Structured Query Language SQL etc. . There may also be as many different data sources as an application requires e.g. multiple DB2 databases or a DB2 database and an LDAP database . Standard interfaces enable specific actions such as add delete modify and query to be applied to one or more data sources for each page.

As indicated above a translation layer is provided by each data access utility to enable the abstract model component to be applied in the language of the underlying data store. Since multiple data sources e.g. are managed by the data access manager it is possible to join data obtained from any of the underlying data stores without suffering performance degradation traditionally associated with join operations. This standard interface for a data access utility enables newly developed concrete model objects to become immediately re useable by any application using this framework.

Turning now to a flow diagram describing a sample implementation of the modified MVC framework is described. A client request generated by a user at client system is received by the user interface controller on host system at step . The user interface controller may include state machine information that enables controller to keep track of the page flow. The user interface controller initializes the page token creates a session for the request at step and passes the page token to a user interface builder . The user interface builder extracts data from the request at step .

At step it is determined whether default interaction is required for the request . If not custom logic is applied to the request at step . The extensibility of the user interface builders as described in steps enable an application developer to provide custom code to the user interface builder in situations where the configuration information in the page token does not satisfy the requirements needed or the results desired by the developer. For example a developer may wish to provide a standard validation procedure that is built into the user interface builder . This may be accomplished by the custom logic in step .

If default interaction is required at step the default logic is applied to the request at step . The view component is then updated to reflect the application of the default logic from step or alternatively to reflect the application of the custom logic from step at step . At step it is determined whether application logic is required for the request . This step determines whether the flow will proceed to the application layer for applying business logic and further processing or whether such application of business logic is not required whereby the flow will return to the user interface controller . If no application logic is required at step the user interface builder updates the view component at step and presents a response to the requesting client system at step . For example using the example above if a custom validation procedure is performed at step and no application logic is required at step then a message e.g. validation failed may be presented at step . The user interface builder handles the view e.g. builds a web page updates the view component and sends the view i.e. response to user interface controller which transforms the view into a format recognized by the requesting client system and presents the result to the client system .

If on the other hand it is determined that application logic is required at step the user interface builder calls e.g. a validation method or subroutine in the application layer via the standard interface . It is then determined whether default interaction is required within the application layer at step . If not custom business logic is applied to the page token at step . Similar to steps recited above steps enable an application developer to extend the utility of a configuration file in a page token if desired by providing customized code. For example if a page flow requires that information be gathered from different screens and a request is sent to a web service for further action then custom business logic may be needed to handle this complex page flow. Handling logic associated with password account administration is another example of a workflow that may require custom business logic.

If on the other hand default interaction is required at step the default logic is applied to the page token at step . An example of default business logic may include validating forms. Once the default logic has been applied at step or alternatively once the custom business logic has been applied at step it is then determined whether data access is required at step . This step determines whether the flow returns to the user interface builder or whether the flow proceeds to the data access manager . If no data access is required then the page token is passed back to the user interface builder .

Once again it is determined whether default interaction is required for the page token at step . If not then custom view logic is applied to the page token at step followed up updating the view component to reflect this application of logic at step . A response is then presented to the client via the user interface controller at step . If default interaction is required at step the view component is updated at step to prepare it for transformation by the User Interface Controller.

Returning back to step if data access is required the application layer calls a subroutine or method via standard interface and the page token is passed to the data access manager . The data access manager parses the abstract model component of the page token into abstract component pieces or segments if needed and calls method or subroutine via standard interface and passes the segments or the entire abstract model component if no segmentation is required to one or more of the corresponding data access utilities at step . The data access utilities translate the operation provided in the abstract model component or segments into the language recognized by their respective concrete model data stores e.g. LDAP XML DB2 etc. at step . The operation is executed e.g. search retrieve add delete etc. at step . The results are then returned to the data access manager which reassembles the page token e.g. aggregates the various abstract model component segments received from the data access utilities via standard interfaces respectively updates the page token with the data received from the data access utilities at step and passes the page token back to the application layer .

At step it is determined whether application logic is required. If so custom business logic is applied to the page token at step . Once the custom logic has been applied at step or alternatively if no application logic is required at step the page token is passed to the user interface builder. At step it is again determined whether default interaction is desired. If so then the view component is updated to reflect the data access transaction at step and the client is presented with a response at step . Otherwise custom view logic is applied to the page token at step followed by updating the view component as described in step .

As described above the modified Model View Controller MVC framework of the invention allows for rapid application development and simple application integration and enhancement whereby most of the development is left to simple configuration rather than complex code development. The flexibility of the modified MVC framework s implementation provides custom application specific extensions while maintaining a standard interface at each level to ensure simple integration. The implementation of the standard interface combined with the standard data structure i.e. page token eliminates the need for coding controller and model components. The page token object introduces the concept of an abstract model which is integrated with the view component to provide a more data driven aspect to the existing MVC model architecture.

As described above the present invention can be embodied in the form of computer implemented processes and apparatuses for practicing those processes. The present invention can also be embodied in the form of computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of computer program code for example whether stored in a storage medium loaded into and or executed by a computer or transmitted over some transmission medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into an executed by a computer the computer becomes an apparatus for practicing the invention. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the invention has been described with reference to an exemplary embodiment it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to a particular embodiment disclosed as the best mode contemplated for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims.

