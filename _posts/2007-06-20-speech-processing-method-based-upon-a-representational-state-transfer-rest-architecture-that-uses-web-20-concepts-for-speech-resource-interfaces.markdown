---

title: Speech processing method based upon a representational state transfer (REST) architecture that uses web 2.0 concepts for speech resource interfaces
abstract: The present invention discloses a method of performing speech processing operations based upon Web 2.0 type interfaces with speech engines. The method can include a step of interfacing with a Web 2.0 server from a standard browser. A speech-enabled application served by the Web 2.0 server can be accessed. The browser can render markup of the speech-enabled application. Speech input can be received from a user of the browser. A RESTful protocol, such as the ATOM Publishing Protocol (APP), can be utilized to access a remotely located speech engine. The speech engine can accept GET, PUT, POST, and DELETE commands. The speech processing engine can process the speech input and can provide results to the Web 2.0 server. The Web 2.0 server can perform a programmatic action based upon the provided results, which results in different content being presented in the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08041572&OS=08041572&RS=08041572
owner: International Business Machines Corporation
number: 08041572
owner_city: Armonk
owner_country: US
publication_date: 20070620
---
This application is related to and the teachings of which are incorporated herein by reference in their entirety the following United States Applications for Patent entitled SPEECH PROCESSING SYSTEM BASED UPON A REPRESENTATIONAL STATE TRANSFER REST ARCHITECTURE THAT USES WEB 2.0 CONCEPTS FOR SPEECH RESOURCE INTERFACES filed Jun. 20 2007 assigned U.S. application Ser. No. 11 765 900 and SPEECH ENABLED APPLICATION THAT USES WEB 2.0 CONCEPTS TO INTERFACE WITH SPEECH ENGINES filed Jun. 20 2007 assigned U.S. application Ser. No. 11 765 962 both of which are assigned to the assignee of the present application.

The present invention relates to the field of speech processing technologies and more particularly to a speech processing method based upon REST architecture that uses Web 2.0 concepts for speech resource interfaces.

In the past companies having a Web presence thrived by providing as many people broad access to as much information as possible. Information flow was unidirectional from a company to information consumers. As time has progressed users have become inundated with too much information from too many sources. Successful Web sites began to provide user facing information management and information filtration mechanisms designed to aid users in identifying information of interest. Even these Web sites were somewhat flawed in a sense that information still flowed in a unidirectional manner. A user was limited to information gathered and groomed by a particular information provider.

A new type of Web application began to emerge which emphasized user interactions and two way information exchange. These new Web applications operated more as information marketplaces where people shared information and not as information depots where users accessed a semi static reservoir of information. This new Web and set of Web applications can be referred to as Web 2.0 where Web 2.0 signifies a second generation of Web based services and applications that emphasize online collaboration and information sharing among users. In other words a Web 1.0 application would be one that was effectively read only from a user perspective where a Web 2.0 application would provide read write and update access to end users. Web 2.0 users can fundamentally change a Web 2.0 application.

Specific examples of Web 2.0 instances include WIKIs BLOGs social networking sites FOLKSONOMIEs MASHUPs and the like. All of these Web 2.0 instances allow end users to add content which other users are able to access. A value of a Web 2.0 Web site is enhanced by the user provided content and may even be completely dependent upon it.

For example WIKIPEDIA e.g. one Web 2.0 application is a WIKI based encyclopedia where each end user is able to view add and edit content. No content would exist without end user contributions. Information accuracy results from an end user population constantly updating erroneous entries which other users provide. As new innovations emerge customers update and add WIKIPEDIA entries that describe these new innovations. Other examples of Web 2.0 applications include MYSPACE.com YOUTUBE.com DEL.ICIO.US.com CRAIGSLIST.com and the like.

Currently a schism exists between speech processing technologies and Web 2.0 applications meaning that Web 2.0 instances do not generally incorporate speech processing technologies. One reason for this is that conventional interfaces to speech resources are too complex for an average end user to utilize. For this reason speech technologies are typically only available from Web sites services that provide a unidirectional flow of information. For example speech technologies are commonly used by enterprises to handle routine customer interactions via a telephone interface such as providing bank balances and the like.

One problem contributing to the schism is that speech processing technologies are currently implemented using a non uniform interface and the Web 2.0 is generally based upon a uniform interface. That is speech processing operations are accessed via function calls method invocations remote procedure calls RPC and other messages that are only understood by a specific server or a small subset of components. A specific invocation mechanism and required parameters must be known by a client and must be integrated into an interface. A non uniform interface is characteristic of RPC based techniques which includes Simple Object Access Protocol SOAP Common Object Request Broker Architecture COBRA Distributed Component Object Model DCOM JINI and the like. Without deliberate integration efforts however the chances that two software objects designed from an unconstrained architecture are near nil. At best an ad hoc collection of software objects having vastly different interface requirements result from the RPC style architecture. The lack of uniform interfaces makes integrating speech processing capabilities for each RPC based application a unique endeavor fraught with application specific challenges which usually require significant speech processing design skills to overcome.

In contrast a uniform interface exists that includes a few basic primitive commands e.g. GET PUT POST DELETE that act upon targets which in a Web 2.0 context are generally able to be referenced by Uniform Resource Identifiers URIs . A term used for this type of architecture is Representational State Transfer REST . REST based solutions simplify component implementation reduce the complexity of connector semantics improve the effectiveness of performance tuning and increase the scalability of pure server components. The Web e.g. hypertext technologies in general is founded upon REST principles. Web 2.0 expands these REST principles to permit end users to add HTTP PUT update HTTP POST and remove HTTP DELETE content. Thus WIKIs BLOGs FOLKSONOMIEs MASHUPs and the like are all considered RESTful since each generally follows REST principles.

What is needed to bridge the gap between speech processing resources and conventional Web 2.0 applications is a new paradigm for interfacing with speech processing resources which makes speech processing resources more available to end users. In this contemplated paradigm end users would optimally be able to cooperatively and dynamically develop speech enabled solutions which the end users would then be able to integrate into Web 2.0 content. Thus a more robust Web 2.0 environment that incorporates speech processing technologies will be allowed to evolve. This is a stark contrast with a conventional paradigm for interfacing with speech processing resources which is decisively non RESTful in nature.

The present invention discloses a RESTful speech processing method that uses Web 2.0 concepts for interfacing with server side speech resources. The RESTful speech processing method can be used to add customizable speech processing capabilities to Web 2.0 applications such as WIKIs BLOGs social networking sites FOLKSONOMIEs MASHUPs and the like. The invention can access speech enabled applications via introspection documents. Each speech enabled application can contain a collection of entries and resources. The entries can include Web 2.0 entries such as WIKI entries and the resources can include speech resources such as speech recognition speech synthesis speech identification and voice interpreter resources. Each entry and resource can be further decomposed into sub components specified at a lower granularity level. Each application resource entry can be introspected customized replaced added re ordered and or removed by end users.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a method for using Web 2.0 as an interface to speech engines. In the method a Web 2.0 server can serve at least one speech enabled application to at least one remotely located client. The Web 2.0 server can utilize a set of RESTful commands to interface with a server side speech processing system which performs speech processing operations for the speech enabled application. The RESTful commands can include a GET a PUT a POST and a DELETE command each of which conform to an ATOM PUBLISHING PROTOCOL APP based protocol.

Another aspect of the present invention can include a method of performing speech processing operations based upon Web 2.0 type interfaces with speech engines. The method can include a step of interfacing with a Web 2.0 server from a standard browser. A speech enabled application served by the Web 2.0 server can be accessed. The browser can render markup of the speech enabled application. Speech input can be received from a user of the browser. A RESTful protocol can be utilized to access a remotely located speech engine. The speech processing engine can process the speech input and can provide results to the Web 2.0 server. The Web 2.0 server can perform a programmatic action based upon the provided results which results in different content being presented in the browser.

Still another aspect of the present invention can include a method for providing speech enabled applications based upon Web 2.0 concepts. In the method a Web 2.0 server can serve at least one speech enabled application to at least one standard browser. The speech enabled application can include an introspection document a collection of entries and a collection of resources. At least one of the resources can be a speech resource associated with a speech engine. The speech enabled application can conform to an APP based specification. The speech engine can perform speech processing operations for the speech enabled application. The speech engine can be a turn based speech processing engine executing within a JAVA 2 ENTERPRISE EDITION J2EE middleware environment.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory or any other recording medium. The program can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

It should also be noted that the methods detailed herein can also be methods performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

In one embodiment the speech enabled applications served by server can comply with the ATOM PUBLISHING PROTOCOL APP or other RESTful format. As such the speech enabled application can be associated with an introspection document and a collection of entries and resources. The resources can link the server to the speech processing engines of system . End users of environment can be permitted to introspect customize add re order and remove entries and resources of the collections.

The method of can begin in step where an end user accesses a client that includes a standard browser. The browser can be a Web browser executing on the client or a voice browser executing upon a middleware server that the client accesses. In step the browser can be communicatively linked to a Web 2.0 server. In step the Web 2.0 server can initiate a speech enabled application. The application can include an introspection document linking to collections of entries and resources as shown in step .

In step an initial entry and a set of associated resources can be processed for presentation in the browser. Step indicates that these resources can include at least one speech processing resource. In step for each speech resource a link can be established to a corresponding speech engine of the speech processing system. In step a communication can be established between the speech processing system and the Web 2.0 server. This communication can be in accordance with a RESTful protocol and a set of RESTful commands e.g. GET PUT POST and or DELETE .

In step the speech processing engines can execute requests producing results which are sent to the Web 2.0 server. In step the Web 2.0 server can provide processed entries and resource execution results to the browser. In step the user can receive the results. The user can then interact with the browser which results in a change to the current entry as shown by step .

A determination can be made in step as to whether further user browser interactions are to be handled. When additional user interactions exist the method can loop from step to step where the entries and resources associated with the user specified interactions can be processed. When user interactions are complete in step the method can proceed to step where open connections and executing applications can be closed.

More specifically in step active links between the Web 2.0 server and the speech system can be terminated. In step links between the client and the Web 2.0 server can be terminated. In step the Web 2.0 server can optionally store session and state information concerning the user interaction as appropriate.

As used herein Web 2.0 is a concept that refers to a cooperative Web in which end users add value by providing content as opposed to Web systems that unidirectionally provide information from an information provider to an information consumer. In other words Web 2.0 refers to a readable writable and updateable Web. While a myriad of types of Web 2.0 instances exists some currently popular ones include WIKIs BLOGS MASHUPs FOLKSONOMIEs social networking sites and the like.

REST refers to a Representational State Transfer architecture. A REST approach focuses on utilizing a constrained operation set e.g. commands such as GET PUT POST and DELETE to act against a set of structured targets which can be URL addressable. A REST architecture is a client server architecture which is stateless cacheable and layered by nature. REST replaces a paradigm of do something with a make something so concept. That is instead of attempting to execute a kind of state transition for a software object the REST concept changes a state of a software object to a user designated state. A RESTful object is one which primarily conforms to REST concepts. A RESTful interface e.g. interface can be a simple interface that transmits domain specific data using a HyperText Transfer Protocol HTTP based protocol without utilizing an additional messaging layer such as SOAP and without reliance of session tracking HTTP cookies.

In system Web 2.0 clients can communicate with Web 2.0 servers utilizing a REST ATOM protocol. The Web 2.0 servers can serve one or more speech enabled applications where speech resources are provided by a Web 2.0 for Voice system . One or more of the applications can include AJAX or other JavaScript code. In one embodiment the AJAX code can be automatically converted from WIKI or other syntax by a transformer of a server .

Communications between the Web 2.0 servers and system can be in accordance with REST ATOM protocols. Each speech enabled application can be associated with an ATOM container which specifies Web 2.0 items resources and media . One or more resource can correspond to a speech engine .

The Web 2.0 clients can be any client capable of interfacing with a Web 2.0 server . For example the clients can include a Web or voice browser as well as any other type of interface which executes upon a computing device. The computing device can include a mobile telephone a mobile computer a laptop a media player a desktop computer a two way radio a line based phone and the like. Unlike conventional speech clients the clients need not have a speech specific interface and instead only require a standard Web 2.0 interface. That is there are no assumptions regarding the client other than an ability to communicate with a Web 2.0 server using Web 2.0 conventions.

The Web 2.0 servers can be any server that provides Web 2.0 content to clients and that provides speech processing capabilities through the Web 2.0 for voice system . The Web 2.0 servers can include a WIKI server a BLOG server a MASHUP server a FOLKSONOMY server a social networking server and any other Web 2.0 server .

The Web 2.0 for voice system can utilize Web 2.0 concepts to provide speech capabilities. A server side interface is established between the voice system and a set of Web 2.0 servers . Available speech resources can be introspected and discovered via introspection documents which are one of the Web 2.0 items . Introspection can be in accordance with the APP specification or a similar protocol. The ability for dynamic configuration and installation is exposed to the servers via the introspection document.

That is access to Web 2.0 for voice system can be through a Web 2.0 server that lets users e.g. clients provide their own customizations personalizations. Appreciably use of the APP opens up the application interface to speech resources using Web 2.0 JAVA 2 ENTERPRISE EDITION J2EE WEBSPHERE APPLICATION SERVER WAS and other conventions rather than being restricted to protocols such as media resource control protocol MRCP real time streaming protocol RTSP or real time protocol RTP .

A constrained set of RESTful commands can be used to interface with the Web 2.0 for voice system . RESTful commands can include a GET command a POST command a PUT command and a DELETE command each of which is able to be implemented as an HTTP command. As applied to speech GET e.g. HTTP GET can return capabilities and elements that are modifiable. The GET command can also be used for submitting simplistic speech queries and for receiving query results.

The POST command can create media related resources using speech engines . For example the POST command can create an audio file from input text using a text to speech TTS resource which is linked to a TTS engine . The POST command can create a text representation given an audio input using an automatic speech recognition ASR resource which is linked to an ASR engine . The POST command can create a score given an audio input using a Speaker Identification and Verification SIV resource which is linked to a SIV engine . Any type of speech processing resource can be similarly accessed using the POST command.

The PUT command can be used to update configuration of speech resources e.g. default voice name ASR or TTS language TTS voice media destination media delivery type etc. The PUT command can also be used to add a resource or capability to a Web 2.0 server e.g. installing an SIV component . The DELETE command can remove a speech resource from a configuration. For example the DELETE command can be used to uninstall a previously installed speech component.

The Web 2.0 for Voice system is an extremely flexible solution that permits users of clients to customize numerous speech processing elements. Customizable speech processing elements can include speech resource availability request characteristics result characteristics media characteristics and the like. Speech resource availability can indicate whether a specific type of resource e.g. ASR TTS SIV Voice XML interpreter is available. Request characteristics can refer to characteristics such as language grammar voice attributes gender rate of speech and the like. The result characteristics can specify whether results are to be delivered synchronously or asynchronously. Result characteristics can alternatively indicate whether a listener for callback is to be supplied with results. Media characteristics can include input and output characteristics which can vary from a URI reference to an RTP stream. The media characteristics can specify a codec e.g. G711 a sample rate e.g. 8 KHz to 22 KHz and the like. In one configuration the speech engines can be provided from a J2EE environment such as a WAS environment. This environment can conform to a J2EE Connector Architecture JCA .

In one embodiment a set of additional facades can be utilized on top of Web 2.0 protocols to provide additional interface and protocol options e.g. MRCP RTSP RTP Session Initiation Protocol SIP etc. to the Web 2.0 for voice system . Use of facades can enable legacy access use of the Web 2.0 for voice system . The facades can be designed to segment the protocol from underlying details so that characteristics of the facade do not bleed through to speech implementation details. Functions such as the WAS 6.1 channel framework or a JCA container can be used to plug in a protocol which is not native to the J2EE environment . The media component of the container can be used to handle media storage delivery and format conversions as necessary. Facades can be used for asynchronous or synchronous protocols .

The speech enabled application can be written in a RESTful format in a syntax of any Web 2.0 application. For example when the application is a WIKI application the syntax can be a WIKI syntax. When the application is a BLOG the syntax can be a BLOG syntax. The RESTful format can be an APP compliant format. The speech enabled application can have a root introspection document which includes links to resources and collections.

The entry collection can specify a set of served Web pages. Each entry page can be further decomposed into collections and having a lower level of granularity such as WIKI page sections. The resources can include speech processing resources and configuration specifics of these resources. Speech processing resources can include ASR resources TTS resources SIV resources voice interpreter resources and the like. Each resource can be further decomposed into configurable resource specifics and . For example the sub resources for an ASR resource can include a grammar a recognition language and the like. When the resource is a TTS resource the sub resources can include a language a rate of speech a gender a TTS type and the like. The speech application elements can be introspected customized replaced added re ordered or removed by end users.

When user customized applications are initiated an initial entry can be an authorizing entry. The authorizing entry can receive authorizing information from a user which identifies the user which in turn permits user specific customizations to be loaded. These customizations can apply to subsequent entries during a user interaction with the application .

The method can begin in step where a client is connected to a Web 2.0 server. Connecting to the Web 2.0 server can occur from a Web based speech enabled interface or from a voice only interface such as a telephone interface. Thus step can involve performing many different operations depending upon connection specifics.

In an embodiment where a Session Initiated Protocol SIP call is established step can cause a voice enabler VE to be invoked from a SIP INVITE message in this embodiment the VE includes a call control component . Running a speech enabled application can be indicated by a Uniform Resource Identifier URI corresponding to the application. A Sockets Direct Protocol SDP document can contain an RTP endpoint for audio output in a VOIP gateway. The VE can respond to the SIP INVITE with a 200 OK response. The VE can issue an HTTP GET to find a first Web 2.0 page in the speech enabled application. The VE can also indicate an RTP for input and output is desired. It can also provide the RTP endpoint obtained from the SDP. Then the VE can encounter a link for a speech resource. The RTP endpoint can be communicated back to a component that has access to call control information of the SIP session. Appreciably the interface for this component can be via a URL. The VE can then execute until the application ends at which point the VE can issue a SIP BYE message to the caller to terminate the call.

In a different embodiment a user interface can be a Web browser with a speech plug in. No call control messages are necessary in such an embodiment. The Web browser can include an RTP or other plug in for speech input output. When the speech enabled application is invoked the RTP plug in endpoint for audio output can be obtained from a Web 2.0 for voice system such as the system of system .

Regardless of connection specifics the Web 2.0 server can retrieve an authentication entry and related resources in step . In step the resources can be activated and input output endpoints can be established as needed. For example the authentication entry can utilize a SIV component to identify a user by speech characteristics. An input endpoint can be established so that user provided speech is conveyed to a SIV engine. For example an RTP channel having a specified endpoint can be used to convey speech. In step the endpoints and markup can be provided to the browser.

In step the user of the browser can provide authentication input. In step the input can be processed and conveyed to a backend authorizing component. In step the identity of the user can be determined and once determined can be conveyed to the Web 2.0 server. In step user customizations can be retrieved and related configuration settings can be established.

As the user interacts via the browser control can shift from one Web 2.0 entry i.e. Web page or section to another as shown in step . In step entries and resources related to the current entry can be activated and or configured. In step markup and streaming communication endpoints can be provided to the browser. In step the browser can present output to the user. In step the user can receive the input. In step the user provided input can be used to determine a new APP entry of the application. In step if the user selected entry indicates that a next interaction does not involve the Web 2.0 server the method can proceed to step where it ends. The method ending can indicate that the user proceeds with Web interactions unrelated to the speech enabled application of method in which case the method can proceed from step to step not shown . When the user interaction of step indicates further interactions with the speech enabled application the method can loop to step where control can be directed to the user selected entry.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

