---

title: Mesh quilting for geometric texture synthesis
abstract: Mesh quilting for geometric texture synthesis involves synthesizing a geometric texture by quilting a mesh texture swatch. In an example embodiment, geometry is matched between a mesh texture swatch and a portion of a synthesized geometric texture. Correspondences are ascertained between elements of the mesh texture swatch and the portion of the synthesized geometric texture. The ascertained corresponding elements of the mesh texture swatch and the portion of the synthesized geometric texture are aligned via local deformation to create a new patch. The new patch is merged into an output texture space to grow the synthesized geometric texture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07800627&OS=07800627&RS=07800627
owner: Microsoft Corporation
number: 07800627
owner_city: Redmond
owner_country: US
publication_date: 20070608
---
When computers first started displaying graphics the visual graphics were rudimentary. They tended to be limited to lines and then combinations of lines and blocks. Over time the capability of computers to display graphics has increased significantly. Computers can now display three dimensional 3D graphics and textures.

In fact computer generated graphics are becoming more and more realistic. One relatively modern approach to generating realistic looking graphics involves applying two dimensional 2D images to 3D objects. The result can be impressive compared to the rudimentary lines and blocks of the past. However this approach still fails to provide photo realistic graphics especially when motion is added to a visual scene.

Mesh quilting for geometric texture synthesis involves synthesizing a geometric texture by quilting a mesh texture swatch. In an example embodiment geometry is matched between a mesh texture swatch and a portion of a synthesized geometric texture. Correspondences are ascertained between elements of the mesh texture swatch and the portion of the synthesized geometric texture. The ascertained corresponding elements of the mesh texture swatch and the portion of the synthesized geometric texture are aligned via local deformation to create a new patch. The new patch is merged into an output texture space to grow the synthesized geometric texture.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

We introduce mesh quilting a geometric texture synthesis algorithm involving a 3D texture sample given in the form of a mesh such as a triangular mesh. In an example embodiment the 3D texture sample is relatively seamlessly applied inside a thin shell around an arbitrary surface through local stitching and deformation. Unlike pixel based image quilting mesh quilting is based on stitching together 3D geometry elements. A described quilting algorithm finds corresponding geometry elements in adjacent texture patches aligns elements through local deformation and merges elements to seamlessly connect texture patches.

For mesh quilting on curved surfaces an issue is the reduction of distortion of geometry elements inside the 3D space of the thin shell. To address this issue we describe an example embodiment involving a low distortion parameterization of the shell space so that geometry elements can be synthesized even on relatively curved objects. Mesh quilting can generally be used to generate convincing decorations for a wide range of geometric textures.

From an historical perspective caught between the drive for ever richer computer generated scenes and the hardware limitations of polygon throughput early computer graphics researchers developed texture mapping as an efficient means to create visual complexity while keeping the geometric complexity to a reasonable level. More general forms of textures such as bump mapping and volumetric textures were introduced to palliate the artifacts of image texturing while still eliminating the tedium of modeling and rendering every 3D detail of a surface.

However the graphics processor on today s commodity video cards has evolved into an extremely powerful and flexible processor allowing not only real time texture mapping but also interactive display of tens of millions of triangles. Thus exquisite details can now be purely geometrically modeled and directly rendered without generating the well documented visual artifacts of image based textures such as lack of parallax smoothed contours and inaccurate shadows. This purely mesh based representation of geometric details turns out to be also very desirable as it does not suffer from most of the traditional limitations of modeling editing and animation.

Unfortunately modeling such complex geometric details as veins chain mails ivies or weaves is still a tedious process more so than image texture synthesis its 2D counterpart. Whereas many 2D texture synthesis techniques have been proposed over the past few years the problem of creating mesh based 3D geometric textures remains challenging.

In the disclosure hereof we thus describe example embodiments for mesh quilting to synthesize geometric details by stitching together small patches of an input geometric texture sample. Utilization of such geometric details can facilitate the design of complex geometric textures on arbitrary base meshes.

A mesh quilting implementation that seamlessly applies a 3D texture sample e.g. given as a triangulated mesh inside a thin shell around an arbitrary surface entails a number of difficulties as compared to traditional 2D image based texturing. First the input texture sample is not a regular array of pixel values but it may instead be an irregular mesh given by vertex positions and connectivity. Second an example texture sample may be comprised of geometry elements. Each geometry element may be a small 3D object identified as a connected component in 3D. In some implementations the integrity of these geometry elements may be maintained in the synthesized geometry texture to facilitate subsequent applications such as interactive editing and animation. Third when mesh quilting is performed on curved surfaces geometry elements often exhibit severe distortion in the 3D space within the shell. A shell mapping procedure that reduces distortion may therefore be applicable in order to generate visually pleasing geometry textures.

For example embodiments a texture synthesis framework to produce a mesh based geometric texture is described to decorate arbitrary meshes. A base mesh and a given 3D texture swatch are input and a geometric texture is output. The geometric texture is locally similar to the swatch everywhere and is synthesized over the base mesh. In contrast to existing texture synthesis mesh quilting involves input geometry and output geometry that are both represented by meshes such as triangular meshes.

Moreover example embodiments can maintain the integrity of geometry elements in the synthesized texture so that subsequent texture editing and texture animation can be more easily performed. For stitching together geometry elements corresponding elements in adjacent texture patches are found. The corresponding elements are aligned through local deformation and the aligned elements are merged to connect texture patches. Geometry elements may thus be explicitly manipulated instead of merely relying solely on manipulating image pixel values as in traditional 2D image based texturing. For mesh quilting on curved surfaces example embodiments for a low distortion parameterization of the shell space are described. Geometry elements can therefore be synthesized with less visual distortion.

Processing device may be realized as by way of example but not limitation a general personal computer e.g. notebook desktop portable etc. a client server or workstation computer a television based device an entertainment appliance including portable ones a mobile phone a gaming device a personal digital assistant PDA a device otherwise described herein some combination thereof and so forth. An example embodiment for a processing device is described herein below with particular reference to .

In example embodiment s graphics component is capable of realizing one or more implementations of mesh quilting for geometric texture synthesis. An example embodiment for a graphics component is described herein below with particular reference to . The visual results of mesh quilting for geometric texture synthesis may be presented on display screen .

By way of example only a result is shown in block diagram at display screen . A 3D bunny model is decorated with two example geometric textures using mesh quilting. On the left a non periodic tubular weave mesh swatch is grown over the surface of the 3D bunny to synthesize a woven geometric texture. On the right an even chain mail structure texture is synthesized on the 3D bunny from the chain mail swatch the integrity of each link may be preserved in the output chain mail geometric structure.

In an example embodiment at action a seed region is found to grow the output geometric texture. For example a seed region may be selected from a partially completed output geometric texture for a next placement of a texture swatch.

At action the geometry between a texture swatch and the seed region is matched. For example a texture swatch may be translated until a matching geometry is determined between the texture swatch and the seed region of the output geometric texture.

At action element correspondences between the matched texture swatch and the seed region are ascertained. For example elements of the matched texture swatch and elements of the seed region that correspond to one another may be ascertained.

At action the corresponding elements are aligned through local deformation. For example the elements of the matched texture swatch and the corresponding elements of the seed region may be aligned through local deformation of the elements of either or both of the texture swatch and the output geometric texture.

At action the new patch is merged into the output texture space to grow the output geometric texture. For example the new patch resulting from the local deformation of the corresponding elements may be merged into the space comprising the output geometric texture.

Corresponding elements ascertainer may perform action s of ascertaining element correspondences between the matched texture swatch and the seed region of the output geometric texture. Corresponding elements aligner may perform action s of aligning the corresponding elements through local deformation. Patch merger may perform action s of merging the resulting new patch into an output texture space to grow the output geometric texture. Example embodiments of these various components and actions are described in greater detail herein below.

In example embodiments geometric details may be generated on a surface by using a swatch of geometric mesh texture. The mesh texture swatch is used to create an entire shell volume by repeating and stitching the swatch in a relatively visually seamless manner. Generally the swatch is an irregular potentially high genus mesh. Moreover the domain upon which the geometric texture is synthesized may be non flat. In this section details of example embodiments of the synthesizing of such a swatch based geometric texture are described.

For the sake of simplification and clarity example embodiments for planar applications of a mesh swatch onto a flat base mesh are addressed in this section e.g. in Sections 2.1 2.7 . Example embodiments of mesh quilting that extend to applications of synthesizing a mesh swatch onto curved surfaces are presented subsequently in Section 3.

Let M V F be the input sample mesh of geometry texture mesh texture swatch of where Vis the set of vertex positions and Fis the set of triangles. Its bounding box has dimensions l w h where his the smallest dimension e.g. the thickness of the shell is smallest . We wish to synthesize a larger mesh M geometric texture with bounding box l w h that we will denote as the output texture space by growing outward the original mesh sample in order to create a seamless geometric pattern. Each connected component of Mor Mis referred to as a geometric element. With mesh quilting synthesis the integrity of these texture elements can generally be preserved.

Example embodiments of mesh quilting synthesis proceed such that the output texture space is filled progressively. The following five 5 phases are iterated 

Mesh textures have an irregular connectivity so a seed finding phase is described for finding where the output mesh Mcan effectively be extended. We use a grid based approach. The bounding boxes of both Mand Mare subdivided into finer regular grids of the same grid cell size and each triangle of these two meshes is assigned to the grid cells containing it. Note that these grids may be two dimensional there is no need for subdividing the height of the space.

Initially the cells of Mare tagged unprocessed. Then each time we wish to grow out the current mesh M we look for an unprocessed cell with the largest number of adjacent cells that are already processed. This is the seed cell that is to be processed next. This cell is selected because it already contains some nearby patches of the input texture. With adjacent cells containing some patches of the input texture the output mesh texture Mcan be extended in a manner that is consistent with the already processed portions of the output mesh texture.

We now find how to complete the mesh texture in the seed cell and possibly add to its surroundings too. Using the nearby existing mesh texture available near the seed cell we find a portion of the original swatch Mthat matches this surrounding to extend M. To find an appropriate placement of the swatch over the seed cell and its surroundings we employ a sub patch matching technique.

Let M t be the input geometry texture translated by t. We compute the matching cost 1 . . . t as the sum of distances between the output geometry Mand the input M t within the overlapping region.

Suppose fis a face of M t . For each vertex vof the output mesh Min the output sub patch we define the distance between vand fas a combination of geometric distance and normal difference as shown by equation 1 1 1 1 where Dist v f is the shortest distance between vand triangle f n is the mesh normal and is the weighting parameter. Although it can be set to other values the weighting parameter is set to 1 for all examples presented herein. 

The minimum translation matching cost is determined at . Ideally this cost is minimized over all allowed translations but that can lead to an impractical computational time. However the translation scope may be reduced. For example we can restrict the translation t to be at the grid unit granularity. Such discrete translations are generally sufficient for finding a good patch placement. Although a finer discretization can be utilized to attain a better placement the element deformation described herein below in Section 2.6 can also compensate somewhat for an imperfect element alignment. Additionally a significant speed up factor for the matching cost computations can be achieved by building an octree data structure for the input texture as distances between vertices and faces can be more efficiently computed.

Once the best patch placement is found we can build the correspondences between the output elements and the input elements within the overlapping region. Usually the overlapping region is larger than the small sub patch Pbecause the input mesh texture is to cover Pcompletely.

We first compute the nearest face f for the distance function defined in equation 1 above for each vertex vin the overlapping region and collect them together as a set of vertex face pairs S v f . We then prune the pairs that readily indicate poor matching. For example vertex face pairs are removed if the normal of the face and its corresponding vertex normal are opposite. Also vertex face pairs with a distance much larger than the local edge length average of the input mesh are also dismissed.

For the remaining pair set S we tag an output element Cas related to an input element Cif there exists a vertex face pair v f S such that v Cand f C. This test can however create a false correspondence an element Cmay be tagged as related to an element Ceven if they are far away. To remove such irrelevant correspondences we project the triangles of both elements onto the plane and check whether the two projections overlap. If they do not overlap we can safely remove the relationship between the two elements and the vertex face pairs belonging to these two elements are subsequently removed from S.

Thus for each output element within the overlapping region we can find a set of one or more input elements to which it corresponds.

For each output element C corresponding to an input element C we now deform one or both of them in order to better align them. In addition to improving the geometric alignment between the input swatch and the current output mesh deformation can also help to provide a smooth and relatively visually seamless extension of the output element.

Element deformation utilizes a Laplacian based mesh editing technique to satisfy positional constraints while preserving local geometric details . For every pair v f S we call v v v the three vertices of face f while denotes the closest point to vin f. We also compute the Laplacian coordinates Lap for all vertices with equation 4 

We are to compute new positions p p for vertices in C C . First we get the position constraints by computing the average points of the vertex face pairs c v h 2. The deformation is to satisfy the position constraints while preserving the local geometry details e.g. Laplacian coordinates . For the output element C this goal can be achieved for example by solving the following quadratic minimization problem of equation 5 

Similarly the vertices of Ccan be deformed by finding the positions w minimizing the following energy of equation 6 

The above deformation energies can be applied by extension to elements with multiple corresponding elements by collecting multiple position constraints together. We found that maintaining the original Laplacian coordinates instead of using transformed Laplacian coordinates can work satisfactorily in our context because we generally have to deal with small deformations to achieve a better element alignment.

After element deformation we can piece elements together to extend the current output mesh. First every element either from Cor C without correspondence is directly added to M as indicated at case a . For every established correspondence C C the merging proceeds as follows If Cis entirely within the overlapping region Cis ignored and Cis instead added to the final results as indicated at case b . Similarly if Cis entirely within the overlapping region Cis ignored and Cis added to M as is indicated at case c .

In other situations as indicated at case d we stitch parts of Cand Cto get a singly connected combined element and we add it to M. To smoothly stitch two partially overlapping elements Cand Ctogether we first seek a cut path in each element such that the two cut paths are close to each other. These cut paths can be found using a graph cut algorithm using the following approach.

We first build an undirected flow network graph for Crepresenting the dual graph adjacency between triangles. The weights of this graph are set as follows for two adjacent triangles sharing an edge v v a weight as given by equation 7 1 v v 1 Dist v C Dist v C 7 is assigned to the graph edge where Dist v C is the shortest distance from vto C.

Two additional nodes are added representing the two possible choices for triangles deleted SINK or undeleted SOURCE . Triangles lying outside the overlapping region are linked to SOURCE by an edge with infinite weight to guarantee that those triangles will not be deleted. Suppose that a vertex vin Chas a closest face fin C. If flies outside of the overlapping region or there exists a face which is adjacent to fand does not have any corresponding vertices in C then the triangles sharing vertex vare linked to SINK with infinite weight to guarantee this time that these triangles will be deleted. Applying a graph cut optimization algorithm to the constructed graph provides a min cost cut which separates Cinto disconnected parts triangles linked to SOURCE are kept while those linked to SINK are deleted. A cut path for Cis found using the same approach.

Stitching together the two cut elements and at case d is performed through mesh merging. We set the average boundary points as position constraints and deform the two cut elements using the deformation energy defined in equation 5 above. The mesh connectivity of the elements is then updated to create a single connected component.

Section 2 above focuses on mesh quilting for geometric texture synthesis on a planar surface. However the description above can be extended so as to be applicable to curved surfaces in 3D. In this section we describe how a relatively seamless quilting can be obtained on 3D surfaces using local surface parameterizations and if desired a guidance vector field before embedding the resulting mesh into shell space.

Setup Let Mbe the base mesh that we wish to enhance with added geometric details. We continue to denote as Mthe geometric texture mesh used as a swatch that we wish to seamlessly tile the base mesh with. A parameter s is also provided to allow the user to specify the relative size of the input texture with respect to the base surface i.e. to choose the scale of the geometric details.

From Planar to Curved Several modifications to the description presented above in Section 2 are involved to accommodate curved domains.

First the 2D grid used in the planar case is replaced by the base mesh itself. The quilting process is stopped when there are no more unprocessed triangles. Similarly to the 2D case we pick the most constrained un synthesized triangle i.e. the cell with the most triangles synthesized in its neighborhood. We define a local surface patch by starting from the chosen triangle and growing the region using breadth first traversal until we reach a certain depth or when the total area of the patch exceeds a user defined threshold.

Additionally the positions of vertices are not placed within a global coordinate system. Instead they are located with respect to the base mesh itself. Consequently the coordinates of the vertices of the texture output mesh may be stored as follows the location of a vertex v over a triangle Tis defined by the barycentric coordinates of its orthogonal projection on Talong with the orthogonal distance e.g. height from the triangle to v.

The surface patch is flattened over the 2D plane using a discrete conformal mapping DCM or equivalently LSCM. Based on this parameterization we can convert the local mesh based representation of the part of Minside this patch into an absolute representation as in the 2D case. The local operations described for planar mesh quilting can be performed over this parameterization plane then the position of the newly synthesized vertices are re projected onto the local mesh based coordinate system described above. The geometry matching phase can still restrict its search to discrete translations in this parametric domain to keep the matching cost computations to a reasonable level if not a minimum. 

Furthermore we also accommodate for the distortion caused by DCM in very curved regions. In an example implementation if the area distortion induced by the local parameterization is too large e.g. above a factor of 4 we reduce the area of the surface patch. This in turn decreases the size of the output sub patch P.

Using Guidance Vector Fields One of the differences between synthesis on a planar region and synthesis on a curved surface is that synthesis on the curved region may entail controlling the orientation of the geometric texture over the surface when the swatch contains readily apparent privileged directions. Thus the user can be allowed to specify a vector field in order to control the direction of synthesis. We can use this field to align the direction of the grid e.g. see Section 2.3 above in the shell space.

Using the above described approach we can automatically generate highly detailed geometric textures on meshes. However harnessing the potential of such a representation involves another phase to convert the generated details into a proper mesh the vertex positions stored in local coordinates for now are converted into a stand alone common embedding. A simple conversion to is alas not sufficient. For example self intersections can be created in regions of high concavity since the local coordinate frames of two adjacent triangles forming a concave angle may overlap. This is shown in .

To convert vertex positions into a stand alone format we build a texture atlas for M and convert the above local representation of vertex positions to locations in a geometry texture space. This is shown in . illustrate an example base bunny mesh parameterized over a low distortion multi chart texture atlas. shows a base mesh decorated with flower geometry. shows the corresponding texture atlas in which the charts are individually shaded for clarity.

After the texture atlas is built we construct a shell space around M. This shell space is a thin volume between Mand one offset of it. Mapping the vertices from the geometry texture space to the shell space fixes the location of the vertices in 3D space thus turning Minto a properly embedded mesh e.g. as shown in . To minimize the distortion introduced by this procedure we describe a stretch minimized shell mapping.

Shell Mapping To model a geometric texture a thin volume around an arbitrary mesh is defined. Existing approaches to mapping systematically create large distortions in curved regions e.g. see where the flower patterns are significantly enlarged . In this section we alleviate this issue by enhancing if not optimizing a stretch metric on a tetrahedral mesh.

Stretch Metric on Tetrahedra A shell map defines a piecewise linear bijective mapping between shell space and texture space based on barycentric coordinates. However with a piecewise linear mapping between a triangle mesh and its parameterization this bijection can have significant stretching in certain regions if no special care is taken. To restrain this occurrence one can tweak the texture space coordinates in order to reduce a distortion measure.

Let g be the shell mapping defined between a point in shell space x y z inside a tetrahedron T v v v v to a point in texture space u v w inside a tetrahedron T q q q q . Due its piecewise linear nature the Jacobian of g i.e. the deformation gradient 

Reduction Algorithm To reduce L g M we start with the initial shell map and perform several enhancement iterations to reduce this stretch measure. For a shell map the vertices on the offset surface are set to the same 2D texture value u v as their originating vertices varying by the height value w. To respect this layered mapping we update the u and v texture coordinates of the vertices on the offset surface plane at each enhancement iteration. The update results are determined from a random line search e.g. we perform enhancement of the stretch metric along a randomly chosen search direction in the u v plane. The texture coordinates of vertices on the lateral boundaries of the shell patch may be fixed to preserve continuity across patch boundaries. 

Results With such an enhanced shell map a user can enjoy a range of geometric detail modeling without having to painfully edit the details in order to visually compensate for distortion in curved areas. illustrate examples of shell map distortions on a curved surface before and after enhancement respectively. depicts a shell map distortion before optimization L 1.14 . depicts a shell map distortion after optimization L 1.08 . On each figure the upper half shows the offset surface distortion of the shell map using a regular checkerboard pattern and the lower half shows a cut in the shell volume to inspect inner distortion. Generally a low distortion shell map when applying a geometry texture over an arbitrary surface can be used to support the editing of the output mesh through modification to Mwithout having to redo the whole synthesis.

Generally a device may represent any computer or processing capable device such as a server device a workstation or other general computer device a data storage repository apparatus a personal digital assistant PDA a mobile phone a gaming platform an entertainment device a router computing node a mesh or other network node a wireless access point some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media include processor executable instructions .

In an example embodiment of device I O interfaces may include i a network interface for communicating across network ii a display device interface for displaying information on a display screen iii one or more man machine interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports a network communications stack a radio and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen or monitor and so forth. Examples of iii man machine interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard a remote a mouse or other graphical pointing device etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device . Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth.

Thus realizations for mesh quilting for geometric texture synthesis may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology and it may be realized as a general purpose processor e.g. a central processing unit CPU a controller a graphics processing unit GPU a derivative thereof and so forth. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media storage and transmission media e.g. wireless or wired communication channels hard coded logic media combinations thereof and so forth. Media is tangible media when it is embodied as a manufacture and or as a composition of matter. For example media may include an array of disks or flash memory for longer term mass storage of processor executable instructions random access memory RAM for shorter term storing of instructions that are currently being executed and or otherwise processed link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein. Such functions include but are not limited to i those actions that are illustrated in flow diagram of ii those actions implementable by the components of graphics component of iii the procedures of phases of iv the graphical renderings of other FIGS. other algorithms described herein combinations thereof and so forth.

The devices actions aspects features functions procedures modules data structures phases components etc. of are illustrated in diagrams that are divided into multiple blocks and other elements. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks and or other elements can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses arrangements etc. for mesh quilting for geometric texture synthesis.

Although systems media devices methods procedures apparatuses mechanisms schemes approaches processes arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

