---

title: Method and system for preparing software offerings having software application code and post-install configuration information
abstract: Embodiments relate generally to a method of generating a post-installation configuration for a software application offering. The method includes receiving a request for a post-installation configuration for a software application and determining a software distribution in which the software application will operate. The method also includes determining a set of inter-dependencies between the software application and the software distribution and retrieving a set of templates for post-installation configuration of the software application. The method further includes generating a post-installation configuration file that customizes the software application for operation with the software distribution and packaging the software application into an offering that comprises the post-installation configuration file and the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612966&OS=08612966&RS=08612966
owner: Red Hat, Inc.
number: 08612966
owner_city: Raleigh
owner_country: US
publication_date: 20071129
---
The embodiments relate to methods and systems for application installation and configuration. More particularly the embodiments relate to methods and systems that automate installation and post installation configuration for a plurality of applications.

Today it is common that enterprises must install and configure computer applications on their computer to tailor their computer for their particular needs. Such computer application installation and configuration can be as easy as a one step activation of an installation program. Typically software applications can be installed quite easily with the well known tools such as RPM for the Linux operating system.

However more complex computer applications require post installation configuration to complete their installation or to become a working application. Such post installation configuration can be difficult. For example post installation configuration can require deep technical knowledge of parameters of a user s computer hardware operating system parameters network addressing other computer programs installed on the user s computer etc. Therefore even if an application can be successfully installed it can be difficult to make a software application filly functional. Indeed it is common that a newly installed computer application will not execute at all or may not execute in the manner desired by the user.

Unfortunately there are no known tools that simplify and automate post installation configuration of applications. Even using a RPM package to install a desired software application a user typically must manually perform a multitude of post install tasks or configuration to ensure interpretability between the installed software and existing software. Post installation configuration can consist of several tasks such as starting and stopping services editing configuration files setting up username and password accounts creating new users and access controls creating new databases etc.

For simplicity and illustrative purposes the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and service portals and that any such variations do not depart from the true spirit and scope of the present invention. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific embodiments. Electrical mechanical logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

The present invention provides systems and methods for creating and distributing post installation configurations of software applications as part of a software offering. Post installation configuration relates to any installation and configuration tasks that need to be performed after the operating system and software are installed in order to make it operational and ready to use.

Conventionally these tasks are performed manually using a command program script or batch file. However these methods are prone to error and are not scalable across a large number of devices.

The present invention provides a standardized tool and application programming interface for creating post installation configuration PIC files. The tool accesses a database containing information about hardware software and network considerations that affect post installation. The present invention also may provide a remote post installation service. This remote service allows software vendors and administrators to host their PIC files on a network accessible location. During post installation the client may then access their PIC file at the network location. In addition to post installation tasks the remote post installation service may be useful for upgrades patches and other types of software maintenance.

Once created the PIC files may be packaged together with the software application into a single package called an offering. An offering is enhanced from a standard software package because it includes post installation configuration information that makes a software application ready for use after it has been installed. Such configuration information may include for example starting and stopping of services account usernames and passwords operating system parameters networking parameters and the like. In contrast standard software packages merely render the software package installed on a target computer but does not make it ready for actual use.

Reference will now be made in detail to the present embodiments examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

The clients operate the software applications and require the post installation services of the present invention. A client can be one or more computing devices for an individual user a small business owner a user within a business or governmental entity etc. The clients can be based on well known platforms such as laptops personal computers workstations servers or other similar devices.

The clients can interface through the network via a network connection not shown . For example clients can access the portal server to retrieve desired software application s for installation and use. Client can access the portal server via known Internet communication protocols e.g. Transmission Control Protocol Internet Protocol TCP IP using known Internet addressing schemes and web interfaces. The network connection can be a private network e.g. a business network an educational network etc. an Internet service provider or other similar interfaces means. In order to perform these functions the client may include a well known operating system such as Windows Linux UNIX MacOS and the like.

As shown in client can also include a PIC tool that can provide a common interface for post installation. The PIC tool may parse the information in the PIC file in the software offering and prompt a client for information if needed. The information provided by the user can then be used to supplement the post install configuration.

The PIC tool may be initiated once the PIC file is placed in a predefined location on the client computing device. Alternatively the PIC tool may parse the software offering and access a location on network indicated in the PIC file. For example the PIC tool may retrieve post install configuration information at a Uniform Resource Locator URL specified in the PIC file of a software offering.

The PIC tool can have both a GUI and text user interface TUI depending upon a user s run level. The PIC tool can be a standalone application or component of another application. Because the PIC file is distributed from a central location i.e. portal server and standardized in its operation for example based on an application programming interface the client can perform post installation configuration that is not ISV dependent.

The network provides a communication infrastructure for the system . The network can be a combination of local wide area networks as well as private or public networks or combinations thereof. In some embodiments the Internet can be used as the network .

The portal server provides a point of control for hosting and distributing software offerings. The portal server can be implemented with a variety of servers from manufacturers such as Dell Hewlett Packard Sun Microsystems etc. as known to those skilled in the art. The portal server can store and execute a multi user operating system such as Linux Windows Enterprise UNIX or other operating systems known to those skilled in the art.

The portal server can interface with the network via a network interface such as private network a wired connection or other similar high throughput network interface. In some embodiments the portal server provides a web interface or website that is readily accessible from the network .

The portal server can store a plurality of software applications that client can install on their computing device. For example the portal server may store executable files for the software applications or binary packages for the software applications.

The portal server can also store PIC files s that can be transferred to a client along with a software application to ease configuration of the software application. For example the portal server can store the PIC files as extensible markup language XML files in one or more databases.

In some embodiments the portal server can include an installation and configuration assistant ICA module . This tool may be used as a developer service so that an ISV can easily prepare and format post install configuration tasks for their applications. Based on information provided to this tool the portal server can prepare and create the software offering of the present invention. For example the ICA module may provide an interface that assists a user at ISV in selecting a software application select how to automate distribution of the software application how the PIC file is included and accessed as part of the software offering.

The ICA module can be configured with a rule base or logic to provide a list of software applications that are available for installation. The ICA module can also be configured to package a RPM package that includes the client selected software application s and the PIC file s to assist in configuration of the selected software. For example the PIC file can be a XML file or equivalent format that can describe what the software application requires to direct execution of a processor on client and make the application ready for use after installation. The PIC file can describe what is prompted to a client buffering any user supplied information and how to process any supplied information. The PIC file can be specific to varying degrees such as for each software application a type of client a type of user a location of the client and the like.

The ICA module can be further configured to query a client to input the parameters of the computer system of the client i.e. a computing environment. For example the ICA module can generate a configuration GUI that allows a user to input parameters such as operation system type and version central processing unit amount of memory installed applications number of disk drives number of users security requirements etc. The ICA module can then use the client inputted parameters to generate the PIC file.

The ISVs represent the entities that generate and provide the software applications. In the present invention the ISVs may interface with the portal server through the network via a network connection not shown . The network connection can be a private network e.g. a business network an educational network etc. an Internet service provider or other similar interfaces means.

The ISVs can provide the parameters for the PIC file to be placed on the portal server . The ISVs can use a web browser or other similar graphical user interface GUI widget to interact with the portal server . An ISV can also use a developer tool to create the PIC file. The developer tool can have knowledge of what other software applications that exist on the portal service what services those software applications provide and how to package them into the PIC file. The developer tool may thus assist an ISV in developing a PIC file for their software application and customize how their application is made ready for use after installation.

As shown in the ICA module can comprise an ICA manager module a user interface module a RPM packager a RPM package database a PIC file manager and a PIC file database . These components of ICA module will now be further described.

The ICA manager module manages the operations of the ICA module . In some contexts the ICA manager module can be considered the main thread or routine that manages the data flow and processing sequences of data flowing throughout the ICA module .

The user interface module can be configured to generate GUIs to retrieve information from a client as well as provide the client a mechanism for receiving information. The GUIs of the user interface module can be written in e.g. HTML XML Java etc. as is known to those skilled in the art.

The user interface module in some embodiments can provide a selection GUT which displays a list of available software applications or applets that are stored in the RPM package database . The selection GUT can include multiple checkboxes each checkbox associated with a software application. A client can mark the checkbox to indicate a selected software application. Alternately the selection GUT can provide a client with a drop down menu of a list of software applications that are stored in the RPM package database . The selection GUI can also include a GUI widget e.g. a Finish button to indicate to the ICA manager module that the client has completed the selection process. The user interface module can pass the client software application selections to the user ICA manager for temporary storage.

The RPM packager accepts the selections of software application s from the user interface module retrieves the selected applications from the RPM database and packages the software applications for inclusion in the software offering.

The RPM packager may also be configured to retrieve a PIC file from the PIC file manager and package the selected applications and the PIC file in a package as a software application. In some embodiments RPM packager is configured to provide an RPM compatible package that serves as the software offering.

For example once a software offering has been packaged the ICA manager module can direct the user interface module to generate a results GUI such as a webpage that provides a link for the client to download the software offering as a single file. Alternately the software offering may comprise a set of links from which the software applications and PIC files can be downloaded and then executed individually in order to implement the software offering. Of course a combination of these approaches may also be employed.

The RPM package database provides a storage infrastructure that provides the various software applications made available by the portal server for software offerings. The RPM package database can be configured to automatically correlate and provide prerequisite software application s that may be required by and selected software application s . For example the RPM package database may include one or more data structures that indicate various dependencies that may exist between software applications. Thus working together with the RPM package database the RPM packager can automatically retrieve prerequisite software application s and package in the software offering not only the requested software application files but also the prerequisite software application s and the PIC file s retrieved from the PIC file database .

The PIC file manager retrieves the PIC file s from the PIC file database . For example PIC file manager may formulate a database query with the client software application selection s . The PIC file manager can issue the formulated database query to the PIC file database . In response the PIC file database may provide the requested PIC files that correspond to the formulated database query back to the PIC file manager .

The PIC file database can be populated by the ISVs using a web browser or other similar graphical user interface GUI widget to interact with the portal server . The ISVs can interact with the user interface module to establish a desire to populate the PIC file database . Their desire can be conveyed through an ISV GUI provided by the user interface module . The ISV GUI can provide a menu selection to allow the ISVs to pass their created PIC file s to the PIC file database . The user interface module can receive the ISV PIC file s and transfer the PIC file s to the ICA manager . The ICA manager can transfer the ISV PIC file to the PIC file manager which can store the ISV PIC file s on the PIC file database .

PIC file database provides a storage infrastructure for providing the PIC files offered by portal server . For example an ISV can use a developer tool provided by the portal server to create the PIC file that populates the PIC file database . The developer tool can have knowledge of what other software applications that exist on the portal service of the portal server what services those software applications provide how to package them into a PIC file and how they will be included in a software offering. The developer tool may thus serve as a standardized API for the ISV or other entity in developing a software application into a software offering.

First the software offering is generated. As noted a software offering comprises not only the files such as binaries for the software application but also PIC files that make the software application ready for use after installation. For example an ISV may access the portal server and invoke the ICA manager module . The ICA manager module may then direct the user interface module to generate a selection GUI previously described .

Second the ISV may utilize the selection GUI and select various options and online services for post installation configuration of the software offering. For example in some embodiments the ICA manager module is configured with a standardized set of templates and URLs for post install configuration. Templates may be provided for various well known post install tasks such as starting and stopping of services editing configuration files dialogs for user input establishment of user accounts and passwords configuration of network access and the like. The ICA manager may then provide this information to the PIC file manager which verifies the PIC file and stores it in PIC file database . In some embodiments this information is formatted as a XML file that is included with the software offering or made available via a URL included in the software offering.

Third the RPM packager creates the file or files for the software offering. For example the RPM packager may retrieve the application files from the RPM package database and the PIC file from PIC file database and packages them into a package for the software offering. As noted in some embodiments the RPM packager generates the software offering in the form of a RPM package.

Fourth the software offering is distributed to clients . For example the portal server may serve as a download location from which the software offerings are available. Of course other distribution mechanisms such as bit torrent mirrors physical delivery of the software offering on a medium such as a disk compact disk or DVD.

Fifth the software application in the software application is installed on the client . In addition the PIC file in the software application may be stored on a directory on client or a URL to the PIC file may be stored on client .

Sixth on client the PIC tool detects the PIC file and launches execution to begin post install configuration of the application. The PIC tool may perform various automated tasks such as starting and stopping services and editing configuration files. The PIC tool may also parse information from the PIC file and prompt the user for various configuration information needed for the software application as well as its prerequisite applications. The PIC tool can have both a GUI and text user interface TUI depending upon a user s run level. The PIC tool can be a standalone application that either runs in a cron or as a background service e.g. in a tool bar. The PIC tool can further query a remote server or service available on network for additional information and can be accessed remotely. As a result the software offering of the present invention provides not only a mechanism for installing software applications but also a standardized extensible mechanism for specifying and performing post install configuration of these software applications.

Certain embodiments may be performed as a computer program. The computer program may exist in a variety of forms both active and inactive. For example the computer program can exist as software program s comprised of program instructions in source code object code executable code or other formats firmware program s or hardware description language HDL files. Any of the above can be embodied on a computer readable medium which include storage devices and signals in compressed or uncompressed form. Exemplary computer readable storage devices include conventional computer system RAM random access memory ROM read only memory EPROM erasable programmable ROM EEPROM electrically erasable programmable ROM and magnetic or optical disks or tapes. Exemplary computer readable signals whether modulated using a carrier or not are signals that a computer system hosting or running the present invention can be configured to access including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software program s of the computer program on a CD ROM or via Internet download. In a sense the Internet itself as an abstract entity is a computer readable medium. The same is true of computer networks in general.

While the teachings has been illustrated with respect to one or more implementations alterations and or modifications can be made to the illustrated examples without departing from the spirit and scope of the appended claims. In addition while a particular feature of the teachings may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular function. Furthermore to the extent that the terms including includes having has with or variants thereof are used in either the detailed description and the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

Other embodiments of the teachings will be apparent to those skilled in the art from consideration of the specification and practice of the teachings disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the teachings being indicated by the following claims.

