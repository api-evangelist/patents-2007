---

title: Firewall-tolerant voice-over-internet-protocol (VoIP) emulating SSL or HTTP sessions embedding voice data in cookies
abstract: A voice-over-Internet-Protocol (VoIP) client codes audio data as printable ASCII characters, then embeds the ASCII audio data inside a cookie that is sent over the Internet within an HTTP GET message. The GET message is sent to a server acting as a call proxy or external manager that forwards the audio data to a remote client. Return audio data is sent back to the client in the normal data field of an HTTP response message from the server. When the client receives the HTTP response, it sends another GET message without audio data, allowing the server to send another response. This empty GET allows VoIP to pass through strict firewalls that pair each HTTP response with a GET. For secure-sockets layer (SSL), client and server exchange pseudo-keys in hello and finished messages that establish the SSL session. Audio data is streamed in SSL messages instead of encrypted data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941841&OS=07941841&RS=07941841
owner: 
number: 07941841
owner_city: 
owner_country: 
publication_date: 20070301
---
This application is a division of application Ser. No. 10 248 762 filed Feb. 14 2003 now U.S. Pat. No. 7 206 932.

This invention relates to voice over Internet Protocol VoIP software and more particularly to VoIP through firewalls.

Internet enabled communication such as electronic mail web browsing instant messaging and video and audio streaming are common today. The Internet can also be used to make telephone calls using voice over Internet Protocol VoIP technology. Video messages may also be exchanged using enhancements to VoIP technology.

Unfortunately other programs can interfere with VoIP. To protect local computers and networks from unauthorized use or even outright attack a barrier between a local network and the Internet is often employed. This barrier is known as a firewall since it protects internal networks from the ravages of the open Internet.

Firewall is a generic term that describes an array of different technologies for securing computer networks. Some common Firewall technologies are Packet Filters Proxy Servers Network Address Translation Port Address Translation and Application Protocol Filtering. Firewalls can be implemented in routers special firewall appliances and bastion hosts at the connection point of two or more computer networks. Personal firewalls are a software application running on a personal computer.

Firewalls can operate on different levels of the network. is a reference diagram for the Open Systems Interconnection OSI network model. Packets passing through a firewall can be filtered by examining their IP addresses TCP ports protocols states or other header criteria at network layer or transport layer .

Dynamic or stateful packet filters can operate on most of the layers. Only specifically configured traffic is allowed through the firewall such as web browser traffic that uses Transport Control Protocol TCP on port . All traffic from outside the firewall can be blocked except when a connection is opened from within the firewall. A temporary return path opening or window is created through the firewall for each connection initiated from the local network within the firewall. This window closes when the connection is closed.

Proxy servers can operate on layers or application layer . Clients behind the firewall connect to the proxy server which then makes another connection to the final server. Application protocol filtering can also operate on layer . Presentation layer and session layer are between the sockets of layer and the TCP connections of layer . Data link layer encapsulates the data into the actual packets or frames transmitted over the physical layer .

Firewalls can interfere with some Internet applications even preventing their use across firewalls. For example VoIP applications can be blocked by firewalls. Some firewalls only allow a few applications to pass packets through such as web browser traffic using port and the hyper text transfer protocol HTTP or port with the secure sockets layer SSL . Packets to ports other than and may be blocked by firewalls.

Voice call applications may use standard web browser settings. For example audio from the user at PC can be sent over Internet to port of PC using the HTTP protocol. Outgoing TCP IP packets containing higher level browser like commands such as the HTTP GET command can pass through firewall since they originate from within inside firewall .

The reverse direction audio stream is sent from PC to PC . For example PC may act as a web server and send TCP IP packets back to PC using an HTTP response message. Many firewalls may allow such TCP IP packets to pass through but other more restrictive firewalls may match each HTTP response to an HTTP GET from inside the firewall. Other firewalls may terminate an HTTP session after a timeout period.

For example after the first HTTP response is received by PC a restrictive firewall may close the HTTP session if a second HTTP response is sent without a second GET. Without another GET firewall may prevent other HTTP response messages from passing through after the first HTTP response. Thus while first HTTP response  is passed through firewall second HTTP response  is blocked by firewall .

Audio streams are often long and need to send audio data at different times in different messages. When PC attempts to stream audio back to PC using several HTTP messages firewall terminates the HTTP session and blocks the session s packets in both directions. Firewall then sees any subsequent HTTP response packets as coming from Internet without a matching HTTP GET request from PC within the firewall. Firewall blocks these packets assuming that they are unauthorized and possibly an attack on the local network.

What is desired is a method for passing packets and audio data through a firewall and to allow entry of audio or video streams originating from outside the firewall. A program that can use a firewall window for standard web browser traffic is desired. Using openings in firewalls for standard web traffic such as HTTP or SSL sessions is especially desired to allow VoIP to operate across restrictive firewalls.

The present invention relates to an improvement in Voice over Internet Protocol VoIP through restrictive firewalls. The following description is presented to enable one of ordinary skill in the art to make and use the invention as provided in the context of a particular application and its requirements. Various modifications to the preferred embodiment will be apparent to those with skill in the art and the general principles defined herein may be applied to other embodiments. Therefore the present invention is not intended to be limited to the particular embodiments shown and described but is to be accorded the widest scope consistent with the principles and novel features herein disclosed.

External manger is on a server accessible from Internet . External manager can be accessed by both PC and PC . Since web browsers use the Transport Control Protocol TCP on port or the SSL protocol on port firewalls are configured by default to allow incoming TCP packets from ports and although usually only when PC or PC first initiate a TCP connection to external manager from within the firewall. Rather than use port port may be used for secure web connections using SSL. Firewalls may even have a session table that tracks SSL sessions or matches HTTP responses with HTTP GET s.

A communication program such as VoIP may prefer to make a direct connection between PC and PC . However firewalls may not allow connections to be initiated from outside the firewall. Instead external manager acts as a proxy passing voice data between PC s .

PC and PC connect to external manager which registers each PC by storing addresses and ports for the PCs in directory table . Keep alive messages may be used to maintain the TCP connections.

When PC attempts to initiate a call to PC PC uses TCP port to send the call request to external manager . External manager then searches for the address and port information for PC in directory table . This information is used to route voice data messages through external manager to PC .

PC can open a connection when registering and then periodically send a keep alive packet to external manager to maintain its connection. Once a call is initiated PC sends voice data in TCP packets through firewall using web standards such as HTTP or SSL. External manager then extracts the voice data and sends it to PC over the connection to PC .

A window in firewall is opened when PC connects to external manager using HTTP or SSL. A similar window in firewall is opened when PC connects to external manager using HTTP or SSL. Thus windows are opened in both firewalls . External manager acts as a third party message passing service passing voice data messages between PC s .

Since a TCP connection to port is made to external manager these request message packets can pass through any local firewalls that protect PC . As long as PC can browse the web which uses TCP PC can access external manager . Reply packets from external manager can also pass through the firewall through window that is automatically set up by the firewall when the PC first connects with external manager . Window is for web browser traffic to port . Some firewalls may close windows when the HTTP protocol is not being followed such as when two or more response messages reply to the same GET message.

When the user at PC wishes to communicate with the user at PC a call setup request is sent to external manager . The same TCP port is used and the same TCP connection as the registration. In this example the call request is contained in packet or packets that are sent to TCP port from port of PC . The call request from PC identifies PC as the called party.

External manager searches its directory table for more information on the called party PC and finds its IP address and TCP port. External manager sends a call notification request to this port of PC using the TCP connection. A reply message instructing PC what communication method to use such as using external manager as a 3 way proxy may be sent to port of PC once the call is ready to be set up. Additional messages in packets may be exchanged between PC and external manager to set up the call. Some of this call information may be passed on to PC by external manager .

Once the call is setup voice data can be sent from PC to external manager which routes the voice data to PC . PC can send HTTP GET statements since PC is acting as an HTTP client. However HTTP GET statements usually do not contain much data. Since the GET command was designed to request information from a server a locator for the requested data is the primary data in a GET message. Locators such as a universal resource locator URL are often relatively small in size. Intermediate proxies may read and alter URL s to remove spaces or to point to cached resources. Long URL s can be rejected by servers and perhaps detected by firewalls.

HTTP GET command syntax does not allow for long data fields that could be used for carrying voice data. While some data may be embedded in the locator such as a stock ticker symbol generally the length of the data is limited since long URL s may be rejected by some servers. For example the length of the URL may be limited to 2K characters or some other length. Audio data is much longer and long voice clips could not fit inside a URL or would require too many GET messages.

Cookies are files that contain user data that are stored on the user s PC. Cookies were designed to store user information for a web site. For example a cookie can store a user s account number and shopping preferences for a particular store s web site. The web site first generates the cookie and sends it to the user s PC which stores the cookie on the client PC s hard disk. Later when the user again connects to the web site the stored cookie is sent with the request to the web site and the server uses information in the user s cookie to alter the displayed web pages. For example the server can look up the user s account number and show a list of prior orders or preferred shopping items.

Cookies typically contain just a small amount of data such as account numbers and preferences. However the inventor has discovered that cookies can be used to send large amounts of audio data. The client generates a cookie from the audio data ready to be transmitted as VoIP voice data. This VoIP cookie containing the audio data is then sent to the server. The server extracts the audio data from the cookie and forwards the audio data to the other party in the call such as PC .

Thus while the typical cookie is generated by the server the VoIP cookie is generated by the client. The typical cookie is stored on the client VoIP cookies are generated and transmitted rather than stored for long periods of time. While the typical cookie is small containing only user data the VoIP cookie is large containing streams of audio data.

Although cookies are typically small they can be as 4K bytes. Firewalls readily pass 4K cookies with GET messages even though other parts of the GET message are limited in size. Thus the inventor has discovered that large amounts of audio data can be embedded within a cookie that is sent with a HTTP GET message.

In when PC captures the user s voice the VoIP application running on PC compresses and encodes the data such as by using a voice codec. The audio data is then converted from a binary format to a text or character format such as ASCII American Standard Code for Information Interchange characters and the ASCII audio data stream is divided into chunks. Each chunk of audio data is placed inside a cookie and sent with an HTTP GET message from PC to port of external manager . External manager extracts the chunks of audio data re assembles the audio stream and sends it to PC such as by embedding the audio data in HTTP response messages to PC .

When external manger receives audio data from PC the audio data is placed into the data fields of HTTP response messages. Since HTTP response messages were designed to contain large amounts of server data the audio data can readily be placed in an HTTP response message that is a reply to the HTTP GET from PC . This HTTP response can readily pass through firewall since it is a reply to the prior HTTP GET from PC to external manager .

Since a firewall may only allow one HTTP response for each HTTP GET PC sends back another HTTP GET when an HTTP response from external manager is received. When PC has audio data to send the audio data can be embedded in a cookie attached to the GET message. However when PC has no audio data to send an empty GET is sent without a cookie or with no audio data in the cookie. This empty HTTP GET message allows another HTTP response message to get through firewall . Thus the empty GET allows a series of HTTP response messages to be sent from external manager through firewall even when PC is not sending any audio data.

Audio data such as the user s captured voice is coded and sent by sending thread to receiving thread on external manager which then forwards the audio data to the other calling party PC . Return audio data such as the captured voice from the other calling party on remote PC is received by external manager and forwarded to sending thread . This return audio data is sent from sending thread on external manager to receiving thread on PC .

Voice data from PC is coded as ASCII text characters and embedded inside VoIP cookie . VoIP cookie is attached to an HTTP GET message from sending thread of PC to receiving thread of external manager . Receiving thread extracts the audio data and forwards it to remote PC . A variety of methods such as UDP TCP SSL etc. may be used to transfer the voice data from external manager to remote PC .

When voice data is received from remote PC by external manager it is forwarded to sending thread which forms an HTTP response message response . The audio data is contained in the normal server data field in the HTTP response message.

This HTTP response  message is sent over the Internet to receiving thread on PC . Receiving thread extracts the audio data decodes and de compresses it and plays the audio to the user of PC .

When receiving thread of PC receives an HTTP response message it immediately sends an empty HTTP GET back to external manager . This empty GET contains no audio data and does not need a VoIP cookie. The empty GET can be ignored by receiving thread of external manager . The empty GET ensures that the firewall will allow another HTTP response from external manager . Sending thread of external manager can then send another HTTP response response  with additional audio data.

Sending thread could wait for receiving thread to receive the empty GET before sending the next message response  for a more robust implementation. Alternately to reduce latency sending thread may act independently of receiving thread and send the second response right after the first response since it is likely that the empty GET will arrive at the firewall before the second response arrives at the firewall.

By PC sending an empty GET for each HTTP response sending thread on external manager is able to stream a series of response messages to PC allowing return audio data to be sent without delay when only one party is speaking. When the user of PC is speaking a series of GET messages with VoIP cookies can be sent since the firewall allows any number of GET s to be sent. Only the response messages are matched to the GET s. The GET s are not matched to the responses.

GET message includes VoIP cookie which contains audio data. Since cookie is not allowed to contain binary data the binary audio data is converted to ASCII characters to generate the audio data inside VoIP cookie . Cookie begins with the Cookie protocol element followed by the cookie name X with the cookie s data following the equal sign. The end of the cookie can be indicated by a carriage return CR followed by a line feed LF .

The first line field of GET message includes the HTTP GET command and the version of the HTTP protocol 1.1 used by the message along with a file or resource name. Other lines in GET message give further details such as the server s IP address information about the kind of browser or other software used by the client which is the user agent the language used US English special characters allowed such as the forward slash and encoding methods that can be used by the server data.

Some GET messages may have some lines and fields and not others. In particular GET messages for more recent versions of the HTTP protocol may include additional statements for newer features and capabilities. Since some of the HTTP fields in the message are used by web browsers but not used by the VoIP software some fields can have dummy names or data.

The lines or fields in GET message are often limited in the number of characters allowed for each field. In contrast the cookie is allowed to be larger making it ideal for storing the large amounts of audio data. Cookies have a size limit of 4096 bytes in current protocols.

The first line of response message contains the protocol HTTP and version 1.1 and a status code and status message OK . The second line contains identification information on the server while the message creation date and time and expiration date time are also specified on other lines. Caching of the data in response message can be controlled by the cache control statement such as not allowing the data to be cached by intermediate caching servers or by the client web browser. Alternately the server s data may be cached until the expiration date and time.

Information about the data content from the server in response message includes the data s length in the content length line and the data type in the content type line. The server s data is contained in data field at the end of response message . This data is the voice or audio data from the remote user such as from PC that is routed through the external manager. The audio data can be sent in the more efficient binary format in data field .

The ASCII format was designed to encode alpha numeric characters and was expanded to include some non printing and control characters. However the range of valid data values for ASCII is more limited than for binary. Valid ASCII characters range in value from 0 to 127 with the printable characters being in the range of 32 to 126. For example the binary values 11111111 11000000 and 11110000 are allowable binary value but illegal ASCII values since they are larger than 127. ASCII is a less efficient coding method than binary since it has many illegal values.

The bianry data is expanded to convert it to valid ASCII data. Each binary byte is expanded to two ASCII bytes in this embodiment. For example binary byte of binary audio stream is converted to ASCII bytes and of ASCII audio stream .

To convert from binary to ASCII each binary byte is divided into two 4 bit nibbles of data. The value 48 0x30 Hex or 00110000 is added to each nibble or each nibble is appended to 0010 to form an ASCII byte. Since the lower nibble can range from 0 to 15 the converted ASCII bytes can range from 48 to 63. This is within the printable ASCII character range of 32 to 126 making the converted audio data appear to be ordinary text to any firewall reading the converted data.

For example binary byte is divided into two nibbles. The first nibble 1111 is added to 00110000 by adder to produce 00111111 which is the first ASCII byte in ASCII audio stream . The second binary nibble 0000 is added to 00110000 by adder to produce 00110000 the second ASCII byte.

Adders could be the same adder and could be part of an arithmetic logic unit ALU that is part of a programmable processor. Parallel adders in a dedicated data converter could also be used. Conversion could be performed in hardware or by software.

Rather than use port SSL servers are accessed through port . Since SSL is commonly used by web sites most firewalls allow SSL traffic to port . Some firewalls may check some or all of the packets to make sure that the packets exchanged contain messages that follow the SSL handshake protocols but since the data transferred by SSL is encrypted the firewall cannot determine if the data is audio data or secure web data. Once the SSL session is properly established SSL messages may be freely exchanged. Since theses later SSL messages have only small headers almost the entire message may be used to carry audio data reducing overhead. Thus SSL can be more efficient than HTTP for transferring audio data streams.

The inventor has discovered that several of the SSL messages exchanged when initiating a new SSL session can be combined. For example a combined client finished message can combine 3 SSL messages client key exchange change cipher spec and finished. A combined server finished message can combine 2 SSL messages change cipher spec and finished. Combining SSL messages reduces the number of messages exchanged. A pair of Hello messages are first exchanged between the client PC and server external manager . Then a pair of Finished messages are exchanged and the SSL session is established.

Messages can then be freely exchanged with status call setup audio data and teardown. The data exchanged does not actually have to be encrypted as long as the messages are in the same format as ordinary SSL messages and the SSL session was established with the normal exchange of messages. Since the audio data is coded and usually compressed often using proprietary methods the audio data is already in a format that is not easily readable so full key encryption is not needed but could be added.

In PC begins to establish a SSL session with external manager by sending a client hello message to port of external manager . SSL window in firewall allows packets to pass through firewall when the packets appear to firewall to be following the SSL protocol.

The initial client hello message contains a public key from the client known as the cipher and a challenge string that can be used to generate a session key for the new SSL session. The server external manager responds to the client hello message by sending a server hello message back to the sending port of PC . This server hello contains the server s certificate that can be checked with a key authority to verify the server s identity.

The client responds to the server hello message with a client finished message and the server replies with a server finished message. Establishment of the SSL session is now finished. Since the client and server intend to transfer audio data and do not really want a secure session several of the fields in the hello and finished messages can contain arbitrary data. Actual keys and certificates do not have to be exchanged although the lengths of data in these fields should match the specified lengths.

When the user of PC desires to call the user of PC a call request can be sent to external manager in an SSL message with call setup information such as an identifier for PC . External manager can contact PC and return more call setup information in a server SSL message. Each SSL message can be contained in one or more TCP IP packets.

Once the call is set up audio data can be exchanged. Client PC can capture encode and compress the user s voice and generate a binary data stream of audio data. This audio data can be placed in client SSL messages to external manager which forwards the audio data to PC . Return audio data from PC can be sent from external manager to PC inside a server SSL messages. The headers for these SSL messages mimic standard SSL headers but the data within the SSL messages is the audio data not data that is encrypted using the session key.

Once the VoIP call ends call teardown information or commands can be exchanged between PC and external manager using client and server SSL messages. Later the SSL session can be terminated by closing the TCP connection such as by sending TCP FIN packets.

Example formats for the client and server hello and finished SSL messages are shown below. Comments appear after the double slashes and data values are in hexadecimal.

Telephony Audio Services Interface TASI is a development environment that provides an application programming interface API for using library features or functions called by application . TASI can have a variety of services such as call control detecting placing and terminating calls between clients and audio stream control and formatting.

Interchange services corresponds to the OSI model transport layer. Interchange services provides packet transport using IP packets. Communication sockets in Windows socket sub system can be opened by Interchange services to send and receive IP packets containing audio or video data to a remote client over the Internet. Of course socket sub systems other than Windows can be substituted such as UNIX or LINUX sub systems.

Multi function resource provides a host based software layer that performs a variety of functions. Multi function resource can perform digital signal processor DSP functions such as voice compression echo cancellation bad frame interpolation for late or lost packets silence compression voice activity detection and comfort noise generation. In addition multi function resource provides the ability for playing wave files on multimedia subsystem . Multi function resource has three main subsystems the voice compression subsystem the packetization subsystem and the voice quality subsystem.

Windows multimedia subsystem contains the operating system drivers and low level components that communicate with the hardware such as a sound card or audio subsystem. Speakers and a microphone or other multi media devices can be connected to the hardware controlled by multimedia subsystem .

The lower level TCP connection begins with a SYN packet sent from PC to port of the external manager. The external manager responds with a SYN ACK packet back to the sending port of the client port in this example . The client PC then finishes the handshake with an ACK packet back to external manager . The client PC can then send data packets such as packets containing registration call setup and HTTP messages containing the ASCII voice data in the cookie.

SYN and ACK are flags that can be set in the TCP packet header such as described in the commonly used RFC 793 standard. When a connection is closed by a FIN packet or times out a new SYN ACK sequence is needed to open a new TCP connection.

The lower level TCP connection begins with a SYN packet sent from PC to port of the external manager. The external manager responds with a SYN ACK packet back to the sending port of the client port in this example . The client PC then finishes the handshake with an ACK packet back to external manager . The client PC can then send data packets such as SSL packets containing registration call setup and SSL messages containing the binary voice data.

Several other embodiments are contemplated by the inventors. For example an empty GET may be sent for each HTTP response received regardless of whether audio data from the client is available or not or the empty GET can be eliminated when a new GET is sent by the client s sending thread. The sending and receiving threads can thus act independently or dependently of each other. The expiration data in the HTTP response may be set to a time in the past. This prevents caching of the data by intermediate devices on the network.

Rather than have just one SSL or HTTP session between the client PC and the external manager several sessions may occur either in sequence or simultaneously or both. One session may carry call status and setup information while another session carries voice data. Multi way calling may use additional sessions for other voice channels background music etc. When another incoming call is detected by the external manager it can signal the client using the initial session while the second session continues to carry voice for the existing call. Each high level HTTP or SSL message may be contained in one low level TCP IP packet or each may be carried by several TCP IP packets.

Two connections from a PC client to the external manager could be used. One of the connections could send only GET messages with voice cookies. For each GET received the server could send an empty RESPONSE. On the other connection the client could send only empty GET messages for each server RESPONSE with voice data received by the client.

Long sessions can be interrupted and a new session begun either for audio data or for status channels. Rather than periodically send keep alive messages PC could periodically open a connection to external manager such as once every minute. A new connection could be made if some time has passed since registration.

Other data conversation methods can be substituted. A conversion table of binary and ASCII values could be used or variable length encoding or other methods employed. Other ranges of ASCII printable characters could be used by adding a different value to the binary audio nibbles. Rather than addition a different algorithm could be used to map to the same range or to a different range.

The external manager has been described as a single server that accepts client registrations and proxies or forwards voice data during a call. Rather than use a single server or web site separate servers or sites could be used. One server at one location could accept client registrations and then assign another server perhaps at a different location or web site to proxy the voice data. Voice proxy servers could be assigned by geographical location. One session could remain open with the registration and status server while another session is opened with the voice proxy server that carries the voice data. Audio data could be transferred between two or more proxy servers in a chain between the. calling parties. The external manager could be the other calling party such as when a user calls tech support that is located at the external manager or for private systems where one user that makes VoIP calls also acts as the external manager for other users.

Other ports and protocols may be used. Separate sessions and port pairs may be used for each direction of packet flow and more than 2 client endpoints may share a packet stream. Multicasting may also be employed. Additional HTTP or SSL windows may be opened in the firewall to allow for multiple calls to different PC s. The order of the various steps may be changed and additional steps can be included. The external manager can operate on a variety of ports such as ports and or ports added by future revisions of web protocols.

The client or PC may be a portable computing device such as a personal digital assistant PDA palm computer enhanced cell phone Internet appliance or other computing device rather than just a standard desktop or laptop PC. Operating systems other than Windows such as Linux Unix and MacOS may be used for the PC or external manager. The external manager can reside on a server that runs many applications including web server applications. Software routines may be stored on disks or other media or may be programmed as firmware or programmable logic or even converted to partial or full hardware implementations.

The abstract of the disclosure is provided to comply with the rules requiring an abstract which will allow a searcher to quickly ascertain the subject matter of the technical disclosure of any patent issued from this disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. 37 C.F.R. 1.72 b . Any advantages and benefits described may not apply to all embodiments of the invention. When the word means is recited in a claim element Applicant intends for the claim element to fall under 35 USC 112 paragraph 6. Often a label of one or more words precedes the word means . The word or words preceding the word means is a label intended to ease referencing of claims elements and is not intended to convey a structural limitation. Such means plus function claims are intended to cover not only the structures described herein for performing the function and their structural equivalents but also equivalent structures. For example although a nail and a screw have different structures they are equivalent structures since they both perform the function of fastening. Claims that do not use the word means are not intended to fall under 35 USC 112 paragraph 6. Signals are typically electronic signals but may be optical signals such as can be carried over a fiber optic line.

The foregoing description of the embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto.

