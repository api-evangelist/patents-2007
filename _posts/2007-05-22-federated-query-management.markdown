---

title: Federated query management
abstract: The availability of one or more databases targeted by a federated query may be determined prior to running the federated query against the targeted databases. In response to determining one or more of the targeted databases are unavailable, a user may be notified. The user may also be presented with options for running the federated query. The options may include being notified when all of the targeted databases are available, automatically running the federated query (in the background) when all of the targeted databases are available, and modifying the query to run against currently available databases.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895228&OS=07895228&RS=07895228
owner: International Business Machines Corporation
number: 07895228
owner_city: Armonk
owner_country: US
publication_date: 20070522
---
This patent application is a divisional of co pending application entitled FEDERATED QUERY MANAGEMENT Ser. No. 10 305 557 filed by Brian J. Cragun et al on Nov. 27 2002 which is incorporated herein by reference.

The present invention generally relates to data processing and more particularly to managing federated queries that target data resident on more than one distinct database.

Databases are computerized information storage and retrieval systems. A relational database management system RDBMS is a database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture in a DBMS a requesting entity e.g. an application or the operating system demands access to a specified database by issuing a database access request. Such requests may include for instance simple catalog lookup requests or transactions and combinations of transactions that operate to read change and add specified records in the database. These requests are made using high level query languages such as the Structured Query Language SQL . Illustratively SQL is used to make interactive queries for getting information from and updating a database such as International Business Machines IBM DB2 Microsoft s SQL Server and database products from Oracle Sybase and Computer Associates. The term query denominates a set of commands for retrieving data from a stored database. Queries take the form of a command language that lets programmers and programs select insert update data and so forth.

Often the data may actually reside in more than one database i.e. located on more than one database server . For example a patient s records diagnosis treatment etc. may be stored in one database while clinical trial information relating to a drug used to treat the patient may be stored in another database. Therefore to access the data a federated query may be generated that targets each of these distinct databases. As used herein the term federated query generally refers to any query that requires combining results of queries run against distinct databases. Because the distinct databases may be on different servers to receive valid results each of the different servers must be available. In a conventional federated database system if any of the targeted database servers are unavailable the query will fail typically due to a timeout e.g. failure to receive results from the unavailable server within a specified time limit .

Failure of the query due to unavailability of one of the targeted database servers may lead to unnecessary server activity. For example a federated query may be parsed into separate subqueries to be run against each of the targeted databases each on a separate server . If the subqueries are each run against the targeted database and one or more of the targeted database servers are unavailable the query will eventually fail although the available database servers may return valid results. In other words the activity on the available database servers to process their respective queries is wasted.

For complex queries the processing time on a targeted database server may take minutes or even hours and may put a significant load on the server resources. If a user was made aware of the unavailability of one or more of the targeted servers the user may choose not to run the query. Alternatively the user may choose to modify the query to target only available servers. However in conventional federated database systems there are no explicit mechanisms for determining the availability of targeted databases prior to running the federated query for reporting database server status back to the user or for taking action to manage the federated query.

Accordingly there is a need for an improved method for building and running federated queries that can monitor the availability targeted servers.

The present invention generally is directed to a method system and article of manufacture for managing federated queries targeting one or more databases.

One embodiment provides a method for accessing data in a federated database system. The method generally includes receiving from a user a federated query targeting one or more databases determining the availability of the targeted databases prior to executing the federated query and notifying the user in response to determining one or more of the targeted databases is not available.

Another embodiment provides a method for accessing data. The method generally includes presenting to a user a list of federated queries targeting one or more databases determining the availability of the targeted databases and indicating to the user which of the listed federated queries if run should return valid results based on the determined availability of the targeted databases.

Another embodiment provides a method for generating reusable federated queries. The method generally includes generating a federated query targeting one or more databases and saving the federated query with a list of the targeted databases in a federated query database. The method may also include transforming the federated query from a query consistent with a first data representation to a query consistent with a second data representation such as XML.

Another embodiment provides a computer readable medium containing a program. When executed by a processor the program performs operations including receiving from a user a federated query targeting one or more databases determining availability of the targeted databases prior to running the federated query and notifying the user in response to determining one or more of the targeted databases are not available.

Another embodiment provides a federated database system. The federated database system generally includes a query building interface allowing a user to specify a federated query targeting one or more databases and a federated query manager configured to receive the federated query from the query building interface determine the availability of the targeted databases and notify the query building interface in response to determining one or more of the targeted databases are unavailable.

The present invention generally is directed to a system method and article of manufacture for managing federated queries. In general the availability of one or more databases targeted by a federated query may be determined prior to running the federated query against the targeted databases. In response to determining one or more of the targeted databases are unavailable the federated query may not be run thereby reducing unnecessary server activity that may occur on servers of the available databases if the federated query is run only to fail due to the unavailability of targeted databases i.e. on servers that are down . Further for some embodiments in response to determining one or more of the targeted databases are unavailable a user may be notified and presented with a choice of options for running the federated query. For example the options may include being notified when all of the targeted databases are available automatically running the federated query in the background when all of the targeted databases are available and modifying the query to run against currently available databases including backup databases .

As used herein the term federated query generally refers to any query that targets data resident on more than one database the term database generally refers to any collection of data regardless of a particular physical representation or schema . As such database and data source may be used interchangeably. As used herein the term schema generically refers to a particular arrangement of data. In other words a database may be organized according to a relational schema accessible by SQL queries an XML schema accessible by XML queries or any other schema presently known or to be developed. A database is referred to herein as being unavailable if for any reason a requesting entity is unable to access the database such as a server for the database being down. A federated query is described as being run against the targeted databases when the federated query is parsed into individual query components that are run against the individual targeted databases. Further as used herein the terms run executed and issued may be used interchangeably.

One embodiment of the invention is implemented as a program product for use with a computer system such as for example the computer system of the database environment shown in and described below. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of signal bearing media. Illustrative signal bearing media include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive or iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal bearing media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

Referring now to a database environment is shown. In general the database environment includes a computer system and a plurality of databases collectively databases residing on servers collectively servers . As illustrated the database environment may also include a backup database residing on a backup server . Depending on the implementation the backup database may serve to backup data on all the databases . As an alternative some or all of the databases may have a dedicated backup database. The computer system may represent any type of computer computer system or other programmable electronic device including a client computer a server computer a portable computer an embedded controller a PC based server a minicomputer a midrange computer a mainframe computer and other computers adapted to support the methods apparatus and article of manufacture of the invention. In one embodiment the computer system is an eServer iSeries 400 available from International Business Machines of Armonk N.Y.

The computer system could include a number of operators and peripheral systems as shown for example by a mass storage interface operably connected to a direct access storage device DASD by a video interface operably connected to a display and by a network interface operably connected to the plurality of networked devices such as servers and backup server . As illustrated a backup database to backup data from the database may be located on the backup server . The display may be any video output device for outputting viewable information.

Computer system is shown comprising at least one processor which obtains instructions and data via a bus from a main memory . The processor could be any processor adapted to support the methods of the invention. The main memory is any memory sufficiently large to hold the necessary programs and data structures. Main memory could be one or a combination of memory devices including Random Access Memory nonvolatile or backup memory e.g. programmable or Flash memories read only memories etc. . In addition memory may be considered to include memory physically located elsewhere in a computer system for example any storage capacity used as virtual memory or stored on a mass storage device e.g. DASD or on another computer coupled to the computer system via bus .

The memory is shown configured with an operating system . The operating system is the software used for managing the operation of the computer system . Examples of the operating system include IBM OS 400 UNIX Microsoft Windows and the like. The memory further includes at least one application and a federated query manager .

The application and the federated query manager are software products comprising a plurality of instructions that are resident at various times in various memory and storage devices in the computer system . When read and executed by one or more processors in the computer system the application and the federated query manager cause the computer system to perform the steps necessary to execute steps or elements embodying the various aspects of the invention. The application and more generally any requesting entity including the operating system is configured to run i.e. issue execute federated queries against the databases .

The queries issued by the applications may be created and or specified by a user via a query building interface which may be included with the application . For example the issued queries may be generated in response to input from a user via the query building interface . Further the issued queries may be selected from a list of previously generated queries a user has saved for reuse. In either case the queries may be federated queries that target data on more than one of the databases . Accordingly the queries may be sent to federated query manager which may parse the queries into individual subqueries to be executed against separate ones of the databases . However prior to executing the individual queries and possibly prior to parsing the federated query into individual subqueries the federated query manager may determine the availability of the targeted databases .

For some embodiments the federated query manager may be implemented as a set of software components including a query execution component a pending query manager and a data source status monitor . Operation of the federated query manager may be described with reference to which illustrates a relational view of the software components according to one embodiment of the invention.

As illustrated the federated query manager may receive from the query building interface a federated query targeting one or more of the databases . An example of the federated query is illustrated in . As shown in the example the federated query may include query conditions based on sets of fields and corresponding to fields and located in records of databases and respectively. As illustrated the database may contain patient records the database may contain records related to chemical informatics while the database may contain clinical trial records . As illustrated the query may target data i.e. treatment and results from the patient records chemical abstract data and a URL links from the chemical informatics records and drug abstract and a URL links from the clinical trial records where the disease field is lung cancer.

The federated query may be generated in any suitable query language such as SQL. One example of an SQL representation of the federated query is illustrated in Table I 

As previously described the federated query manager may be generally configured to receive the query and parse the query into subqueries to be executed against the individual databases and . Execution of the subqueries against the individual databases may be performed by the query execution component . As illustrated for some embodiments the databases may be implemented using different physical data representations or schema e.g. SQL XML or any other type data representation . Accordingly the query execution component may send the subqueries to a query format translator . The query format translator may generally be configured to translate subqueries received from the query execution component to a query language suitable for accessing the targeted database . An advantage to using the query format translator is that the federate federated query manager and query building interface may only need to implement a single query language e.g. SQL .

As illustrated the query execution component may also receive queries from the pending query manager . The pending query manager is generally configured to manage e.g. determine when to run pending queries. As used herein pending queries generally refer to any queries received by the federated query manager that target one or more databases that have not been determined to be available yet. For some embodiments the pending query manager may receive federated queries directly from the query building interface . Alternatively the pending query manager may receive queries from the query execution component . For example the query execution component may send a received query to the pending query manager after determining based on information from the data source status monitor that one or more of the databases targeted by the received query is unavailable. Regardless the pending query manager may hold i.e. buffer the received queries until all targeted databases are available as determined by the data source status monitor . 

The data source status monitor may be used to monitor the availability of the databases at execution time e.g. when the query building interface sends a federated query to the federated query manager or at creation time e.g. when a user is generating a federated query with the query building interface . For example shows an illustrative method exemplifying one embodiment of operation of the federated query manager using the data source status monitor to monitor availability of the databases at execution time.

The method is entered at step when the federated query manager receives from a user a query targeting one or more of the databases such as the federated query shown in . The user may be a program such as the application or a human user of the program.

At step availability of the targeted databases is determined for example by the data source status monitor . For some embodiments the data source status monitor may be configured to periodically determine the status of each of the databases . In such a case determining the availability of the targeted databases may simply include checking the latest periodically determined status i.e. prior to receiving the query at step . Alternatively as illustrated in the data source status monitor may be configured to determine the status of only the databases targeted by the received query. For example the query execution component may receive a federated query from the application and pass a list of the databases targeted by the received query to the data source status monitor .

Regardless of whether the data source status monitor is configured to determine the status of each of the databases in a database environment or just the databases targeted by the query received at step the data source status monitor may be configured to determine the status of the targeted databases utilizing any suitable technique. For example for some database systems status may be determined via an application programming interface API call. As another example the federated query manager may register an active listening component with the databases providing a mechanism for the databases to communicate status to the federated query . As yet another example steps represent operations that may be performed by the data source status monitor to determine the availability of databases targeted by the query by polling each of the targeted databases . In other words the steps may represent a subroutine call which could be made by the query building interface the query execution component or the pending query manager to determine the availability of the databases .

At step the data source status monitor enters a loop including steps for determining the availability of the targeted databases . At step a simple query is run against a selected one of the databases. For example the simple query may be designed to return a fast result from a database with minimal processing required by the database server. If results are received from the simple query at step the data source status monitor determines the database is available at step . Alternatively if results are not received for example within a predetermined timeout period the data source status monitor determines the database is not available at step . Availability status is updated at step . Once the steps have been performed for each of the databases or at least the targeted databases availability status of the databases is returned at step .

At step if the received query will run based on the availability of the targeted databases determined at step the query is run at step . On the other hand at step the user is notified if the query will not run due to the unavailability of any of the targeted databases. As will be described in greater detail below for some embodiments the user may be presented with a list of options for running the query even though all the databases targeted by the query are not available.

As previously described the data source status monitor may also be used to monitor database availability at creation time i.e. when a user is generating a federated query . Monitoring database availability at creation may save time by preventing a user from generating a federated query only to have it fail at execution time due to unavailability of one or more targeted databases . Further the user may be presented with a number of options for running a query that targets one or more unavailable databases. The user may generate a federated query a number of ways. For example the user may generate a federated query via the query building interface by specifying individual query conditions. As previously described with reference to the federated query illustrated in the query conditions may include conditional tests on fields of various records residing on different targeted databases. For some embodiments the options presented to the user for generating a federated query may be adjusted based on which databases are available. In other words fields that correspond to databases that are not available may not be presented to the user or may be presented but not be selectable by the user.

In an effort to facilitate future query generation user generated queries may be saved for later reuse for example in a saved queries database . The user may then recall the query during a future query building session. For some embodiments the user generated queries may be first converted to an abstract query using a common data format such as XML prior to saving the query into the saved queries database . As an example an abstract query corresponding to the federated query of is shown in TABLE II. By way of illustration the abstract query of Table II is defined using XML. However any other language may be used to advantage.

Illustratively the abstract query shown in Table II includes a selection specification lines containing selection criteria and a results specification lines . The selection criterion may consists of a field name for a logical field a comparison operator 

As illustrated the abstract query shown in Table I may also include lines a list of database models that may be used for example as reference in converting the abstract query to a query compatible with a specific query language. The list of database models may also server to identify the databases targeted by the saved query. For some embodiments when creating a query from a list of saved queries an application such as the query building interface may determine which of the saved queries will run based on availability of the targeted databases as identified in the database models.

For example shows an illustrative runtime method exemplifying one embodiment of the operation the query building interface for determining which of a list of saved queries will run. The method begins at step when the query building interface gets a list of saved queries targeting one or more databases. For example the query building interface may get the list of saved queries from the saved query database .

At step the query building interface determines the availability of the databases targeted by the saved queries. For example the query building interface may request the status of the targeted databases from the data source status monitor . As previously described with reference to the data source status monitor may periodically determine the status of each of the targeted databases in which case the data source status monitor may simply return the latest determined status. Alternatively the query building interface may request that the data source status monitor determine the current status of the targeted databases rather than rely on the latest determined status.

At step the query building interface indicates to the user which of the saved queries will not run based on the determined availability of the targeted databases. Any suitable technique may be used for indicating which of the saved queries will not run. For example after getting the list of saved queries at step the query building interface may present the list to the user in a graphical user interface GUI screen such as the GUI screen shown in . After determining the availability of the databases targeted by the listed queries the list may be separated into available queries e.g. queries that target only available databases and unavailable queries i.e. queries that target one or more unavailable databases . For some embodiments additional information may also be provided such as a list of the unavailable targeted databases. For some embodiments a single list of databases may be provided with an indication e.g. an icon adjacent each listed database that may change based on the status of the corresponding database.

For some embodiments the query building interface may allow the user to generate queries from scratch and or modify saved queries by adding individual query conditions. For example the query building interface may provide the user with GUI screens such as the GUI screen illustrated in for adding query conditions. The GUI screen may allow the user to add query conditions based on categories and which may correspond to distinct databases . For some embodiments the query building interface may get the list of available fields and associated databases from a table schema database . Selecting one of the categories by the user may cause a new GUI screen not shown to appear allowing the user to enter a condition based on one or more fields from that category. For illustrative purposes the categories shown patient records chemical informatics and clinical trials correspond to the three databases targeted by the example federated query of . In response to determining the database corresponding to a category is unavailable the category may be disabled thus preventing the user from adding a query condition that would cause the query to target the unavailable database. As an example the Clinical Trials category is shown in italicized text to indicate the corresponding database trialDB is unavailable. Of course any other suitable method to indicate unavailability may also be used including not listing the category or fields associated with an unavailable database.

At step a user selects a query to run. The selected query may be a saved query selected from GUI screen a modified query or a newly generated query generated via GUI screen . At step a determination is made whether the selected query will run based on the availability of the databases targeted by the selected query. For some embodiments availability of the databases targeted by the selected query may not be determined until the query is selected. For other embodiments however the latest availability of all databases targeted by the list of saved queries as determined at step may be used to determine whether the query will run. Regardless if the selected query will run the selected query is run at step . For example as previously described the selected query may be sent to the federated query for execution by the query execution component .

On the other hand if the selected query will not run as determined at step the user is presented with a list of options at step . For example the user may be presented with the list of options in a GUI screen such as GUI screen shown in . Of course the list of options is only illustrative and other options are also available. As illustrated the list of options may include running the query in the background notifying the user when the targeted databases are available running the query against available servers and running the query against backup servers. These options will be described in greater detail below with respect to .

At step the query building interface receives a user selected option for running the selected query e.g. in response to the user selecting one of the options via the GUI screen . At step the selected query is run according to the user selected option. For some embodiments the selected query may be sent from the query building interface to the federated query manager along with data specifying the user selected option.

At step if the user selected to run the query in the background the pending query manager waits for all of the targeted databases to become available at step . For example the query may be sent to the pending query manager . The pending query manager may periodically poll the data source status monitor to determine if the targeted databases are available. Alternatively the pending query manager may request that the data source status monitor notify e.g. post a message the pending query manager when all the targeted servers are available. Regardless once all the targeted databases are available the query is run at step for example by sending the query back from the pending query manager to the query execution component .

If the user did not select to run the query in the background processing proceeds from step to step to determine if the user selected to be notified when all targeted servers are available. For example as described above the pending query manager may poll or request notification from the data source status monitor to determine when all of the targeted databases to become available. Once all the targeted databases are available e.g. the pending query manager receives notice from the data source status monitor the user is notified at step . For example the pending query manager may send a notification message to the application or the query building interface .

If the user did not select to be notified when all targeted servers are available processing proceeds from step to step to determine if the user selected to run the query against available databases. If the user selected to run the query against available databases the query is modified to remove components containing fields residing on unavailable servers at step . For example referring back to the exemplary query illustrated in and shown in TABLE I if the patient records database recordsDB were not available the query may be modified to remove query conditions based on fields in the patient records database. TABLE III illustrates an example in SQL format of the modified query 

If the user did not select to run the query against available databases processing proceeds from step to step to determine if the user selected to run the query against backup servers. For example referring back to the database may have a backup database e.g. located on a secondary or backup server that periodically receives data from the database . While the backup server for the database may not be as good as the primary server for the database e.g. the backup server may be slower may not have the latest data etc. running the query against the backup database may still be preferred over waiting until the server running the database N becomes available. Accordingly at step the query is modified to target the backup database and at step the modified query is run against the available targeted databases and the backup databases.

If the user did not select to run the query against backup servers processing proceeds from step to step . Step is representative of operations performed according to any other user selected option contemplated as embodiments of the present invention for running the query. However it should be understood that embodiments are contemplated in which less than all or none of the available options for running the query are implemented. For example in a particular embodiment the user may only have the option of being notified when all the targeted databases are available. In another embodiment the user may only have the option of modifying the query to run against available databases. For some embodiments the list of available options may also vary with the system implementation. For example the option to run a query against a backup data source may not be presented if a backup data source does not exist. Further for some embodiments a user may specify how to run a query targeting one or more unavailable databases prior to actually determining the unavailability for example as part of a configuration process of the application . Accordingly the user may not need to be notified of the unavailability in order to specify how to run the query.

Active management of federated queries that target more than one database has several advantages. For example monitoring the availability of the targeted databases prior to running the federated query may assure server resource is not wasted by starting a query on one or more available database servers that will eventually fail due to unavailability of one or more other database servers. Further by communicating the unavailability of the one or more targeted database servers back to the user the user may make an intelligent decision regarding running the query. Monitoring the availability of the targeted databases during query creation may also assure the user is not dissatisfied trying to make a query that is certain to fail.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

