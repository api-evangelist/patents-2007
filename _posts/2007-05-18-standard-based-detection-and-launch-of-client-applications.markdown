---

title: Standard based detection and launch of client applications
abstract: The claimed subject matter provides a system and/or method that detects, installs and launches applications on client machines. The disclosed system can include a component that receives a request to launch or install a client application. The component detects whether an application is present in a client machine by scrutinizing the received request and extracting an agent string associated with the client application. Based at least in part on the agent string, a server in receipt of the request can distribute a formatted document affiliated with the client application and thereafter initiate the application to execute on the client machine through MIME-type association.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943189&OS=08943189&RS=08943189
owner: Microsoft Corporation
number: 08943189
owner_city: Redmond
owner_country: US
publication_date: 20070518
---
As computing and network technologies have evolved and have become more robust secure and reliable more consumers wholesalers retailers entrepreneurs educational institutions and the like have and are shifting business paradigms and are employing the Internet to perform business rather than utilizing traditional means. For example today consumers can access their bank accounts on line e.g. via the Internet and can perform an ever growing number of banking transactions such as balance inquiries fund transfers bill payments and the like.

With the tightening of browser and operating system security it has become increasingly more difficult to detect and launch client applications from browsers with minimal user intervention. To exacerbate matters users can encounter significantly disparate experiences depending on operating system and or browser security settings. Conventionally the detection and launch of client applications has involved a combination of nonstandard approaches such as browser plug ins ActiveX signed Java Applets etc. to obtain users consent to run client applications on their machines. While such nonstandard approaches may have achieved their ends such approaches elicited a multitude of additional security dialogs generated by the operating system and or browser making a user s experience extremely unpleasant tedious and daunting. Additionally conventional means of detecting and launching client applications can significantly compromise computer operating system and or browsers security e.g. installing ActiveX control even from trust sources can open up possibilities for malicious sites to exploit any security holes that might exist in the ActiveX control .

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The claimed subject matter in accordance with one illustrative aspect relates to systems and methods that effectuate and facilitate detection launch and or installation of client applications on client machines. More particularly the subject matter as claimed in one illustrative aspect can comprise a component that receives requests to launch or install applications wherein the component analyses the request extracts an agent string associated with the application and based at least in part on the extracted agent string distributes a formatted document associated with the application and thereafter causes the application to commence execution on a client.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed and claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

Server like client can be any type of machine that includes a processor and that is capable of effective communication with network topology . Machines that can comprise server can include desktop computers server class computing devices cell phones smart phones laptop computers notebook computers Tablet PCs consumer and or industrial devices and or appliances automotive accessories aviation equipment handheld devices Personal Digital Assistants PDAs and the like. Server can receive from client via network topology indication that an individual using client e.g. utilizing a browser executing on client is trying to launch and or install a client application e.g. instant messaging client web conferencing client etc. . Upon receipt of indication that client or more particularly individual or application accessing utilizing and or executing thereon requires or is attempting to launch install and or execute an application or series or suite of applications server can detect the type of platform e.g. machine characteristics operating system network parameters and coordinates and other such potent and useful information . Once server has extracted and or obtained the type of platform from which a request is emanating server can determine whether the extracted platform type exists in a persisted support list for example. Where the platform type is found in the persisted support list further launch sequence checks can be performed as discussed supra . Where server is unable to locate the platform type in the persisted support list a reach console can be spawned and or displayed on client whereupon further pertinent information can be elicited from the individual using client and or the process application attempting to launch the client application on client .

Where server establishes that platform type exists in the persisted support list. For instance server can attempt from information supplied by client to uncover an associated agent string. An agent string can take the form for instance. For example agent string XYZ 8.0.1234.0 can indicate client application XYZ version 8.0.1234.0.

If server detects and or recognizes an agent string associated with the request received from client a file e.g. in a real time collaboration file format with an .rtc extension can be distributed to client and the client application launched thereafter.

Where on the other hand server fails to detect and or recognize an agent string associated with the received request from client server can undertake investigation as to whether client has previously been associated with a cookie e.g. a browser cookie with a relevant string representing the client application such as for instance XY4799Installed has previously been persisted on client and or an appropriate MIME e.g. Multipurpose Internet Mail Extensions type such as for example application vnd.xy rtc has heretofore been persisted and or affiliated with client . Where server uncovers the presence of either an appropriate cookie and or MIME type server can disseminate a real time collaboration formatted file e.g. a file with an .rtc extension to client and thereafter the client application can be launched to execute on client .

Where server is unable to discern either an agent string a cookie and or a MIME type server can be reasonably certain of the absence of a client application in client . Server can then deploy an installer facility that may take into consideration a user s location e.g. locale and or the geographical location of client . At this point server can elicit a response from individuals utilizing client as to whether or not to install the requested client application on client . Alternatively and or additionally server can elicit user response and thereafter wait for a preset or dynamically and or contemporaneously determined amount of time. Should a user response fail to emanate within the preset or allotted threshold period server can proceed to install the client application without further user input. Nevertheless regardless of whether user response is elicited and or the decision to install dynamically determined by server server can distribute an executable file and commence installation of the client application software on client . Once installation of the client application has completed successfully server can cause relevant cookie strings and agent strings to be associated with and persisted on client and thereafter client application can commence execution on client .

Interface can receive data from a multitude of sources such as for example data associated with a particular client application service user client and or entity involved with a portion of the transaction and thereafter convey the received information to request component for further analysis. Additionally interface can receive request information from request component which can then be communicated to server via network topology .

Interface can provide various adapters connectors channels communication pathways etc. to integrate the various components included in system into virtually any operating system and or database system and or with one another. Additionally interface can provide various adapters connectors channels communication modalities etc. that provide for interaction with various components that can comprise system and or any other component external and or internal data and the like associated with system .

Request component prior to construction generation and dissemination of the request to server can for example set up a frame in an invoking page executing on client . The frame typically can be periodically refreshed. The benefit of utilizing the frame within an invoking page is that only the frame need be periodically refreshed as further actions are performed rather than the necessity of refreshing the whole invoking page. Additionally request component can set up a plurality of further frames within the invoking page. These frames can be utilized to display installation text client application launch text and or associated information related to detection launch and or installation of client application from server .

As discussed above in connection with interface interface can function in a similar fashion. Accordingly for the sake of brevity the full functionality of interface will not be further discussed.

Launch and detection component can perform a platform check for example launch and detection component can determine whether client has the appropriate hardware and software operating system drivers patch levels etc. needed to execute client application on client . Launch and detection component can determine whether client is capable of executing the client application through use of support lists. Support lists can be persisted permanently and or temporarily e.g. in memory and or in disk . Moreover it will be understood by those conversant in the art that memory and or other equivalent persisting means can be distributed over the entirety of network topology and or can be located in contiguous proximity of either client and or server . Additionally it will be further recognized by those of ordinary skill that persisting means can be physically associated with server as well as client .

Where launch and detection component recognizes attributes and or characteristics of requesting client as existing in persisted support lists launch and detection component can perform various and sundry further tasks discussed infra . Where launch and detection component is unable to locate requesting client in the persisted support lists launch and detection component can instigate server to launch a console e.g. Java console on client for instance. Where launch and detection component identifies client in one or more persisted support lists launch and detection component can investigate the HTTP request received from client to ascertain whether the HTTP request contains an appropriate agent string necessary to launch rather than install client application. Where launch and detection component finds an agent string a formatted document of appropriate MIME type can be distributed to client and thereafter the client application can commence execution on client .

In contrast where launch and detection component is unable to locate an agent string associated with the HTTP request communicated by client launch and detection component can probe client to discover whether client contains and or has had previously persisted a cookie and or includes a MIME type appropriate to execute the client requested application. For instance launch and detection component can probe client to reveal a XY5555Installed cookie string for example which can cause launch and detection component to induce server to commence distribution of a formatted document of appropriate MIME type and subsequently application XY can commence execution on requesting client . Additionally and or alternatively as a further example launch and detection component can probe client to reveal a MIME type for instance application vnd.abc.rtc which can cause launch and detection component to instigate server to provide client with a formatted document of appropriate MIME type at which point client application can commence execution on client shortly thereafter.

Where launch and detection component is unable to detect an appropriate uses string cookie and or MIME type launch and detection component can cause server to effectuate an installation functionality that can elicited multiple responses from individuals utilizing and or processes executing on client . Elicited information can include for example the location of client preferred language for installation and the like. It should be noted in the context of preferred language that when no appropriate response is forthcoming that a default language can be automatically selected based at least in part on the geographical location of client . For instance if server determines that client is located in Montr al Qu bec server can automatically deduce that an appropriate default language can be Canadian French for example. Moreover greater and or lesser granularity with respect to regional dialect can be obtained based for example on data provided by client .

Once launch and detection component has ascertained an appropriate language with which to install client application and any other pertinent information that can be necessary and or crucial to the seamless installation off client application with minimal user interaction launch and detection component can request user response as to whether or not client application should be installed on client . Where are response is forthcoming from a user launch and detection component can commence distributing executable code suitable for execution on client . Once execution code has been installed or at least partially installed client application can commence execution on client . Additionally and contemporaneously and or alternatively and subsequently launch and detection component can instigate server to persist relevant cookie strings agent strings and or MIME types on client for future use by launch and detection component to detect whether or not client application is present on client .

Launch component can when detection component fails to locate pertinent attributes associated with client and support list launch a console e.g. a Java console to be displayed on client . Additionally launch component can respond to detection component and distribute a formatted document of appropriate MIME type to client . Additionally and or alternatively when detection component is unable to detect agent strings launch component can be utilized to cause client to disclose information related to cookies and or MIME types that can be previously persisted on client .

When detection component is unable to detect an agent string cookie and or MIME type launch component can effectuate and facilitate installation of client applications on client . In this regard launch component can elicit a multitude of responses from users and or processes executing on client . Responses solicited from users can include language preferences geographical locations of client and the like. Once launch component has obtained sufficient information related to client and or individual users and or processes executing on or expected to execute on client launch component can distribute or cause server to disseminate appropriate executable code to client . Once such executable code has been downloaded or even partially downloaded client application associated with downloaded and or disseminated code can commence execution on client .

It is to be appreciated that store can be for example volatile memory or non volatile memory or can include both volatile and non volatile memory. By way of illustration and not limitation non volatile memory can include read only memory ROM programmable read only memory PROM electrically programmable read only memory EPROM electrically erasable programmable read only memory EEPROM or flash memory. Volatile memory can include random access memory RAM which can act as external cache memory. By way of illustration rather than limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM . Store of the subject systems and methods is intended to comprise without being limited to these and any other suitable types of memory. In addition it is to be appreciated that store can be a server a database a hard drive and the like.

The independent components may be used to further fill out or span an information space and the dependent components may be employed in combination to improve quality of common information recognizing that all sensor input data may be subject to error and or noise. In this context data fusion techniques employed by data fusion component may include algorithmic processing of sensor input data to compensate for inherent fragmentation of information because particular phenomena may not be observed directly using a single sensing input modality. Thus data fusion provides a suitable framework to facilitate condensing combining evaluating and or interpreting available sensed or received information in the context of a particular application.

In view of the foregoing it is readily apparent that utilization of the context component to consider and analyze extrinsic information can substantially facilitate determining meaning of sets of inputs.

Users can also interact with regions to select and provide information via various devices such as a mouse roller ball keypad keyboard and or voice activation for example. Typically the mechanism such as a push button or the enter key on the keyboard can be employed subsequent to entering the information in order to initiate for example a query. However it is to be appreciated that the claimed subject matter is not so limited. For example nearly highlighting a checkbox can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via text message on a display and an audio tone the user for information via a text message. The user can then provide suitable information such as alphanumeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a graphical user interface and or application programming interface API . In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and EGA with limited graphic support and or low bandwidth communication channels.

In view of the exemplary systems shown and described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter. Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a program that runs on one or more computers those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor multiprocessor or multi core processor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the claimed innovation can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available microprocessors. It is to be appreciated that dual microprocessors multi core and other multiprocessor architectures can be employed as the processing unit .

The system memory includes volatile and nonvolatile memory. The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM . Volatile memory includes random access memory RAM which can act as external cache memory to facilitate processing.

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example mass storage . Mass storage includes but is not limited to devices like a magnetic or optical disk drive floppy disk drive flash memory or memory stick. In addition mass storage can include storage media separately or in combination with other storage media.

The computer also includes one or more interface components that are communicatively coupled to the bus and facilitate interaction with the computer . By way of example the interface component can be a port e.g. serial parallel PCMCIA USB FireWire . . . or an interface card e.g. sound video network . . . or the like. The interface component can receive input and provide output wired or wirelessly . For instance input can be received from devices including but not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner camera other computer and the like. Output can also be supplied by the computer to output device s via interface component . Output devices can include displays e.g. CRT LCD plasma . . . speakers printers and other computers among other things.

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment for processing the disclosed architecture in accordance with another aspect. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information by employing the claimed subject matter for example.

The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the claimed subject matter for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of the disclosed and claimed subject matter. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

