---

title: Information processing apparatus and method and program for mediating applications
abstract: An information processing apparatus is capable of being connected to an IC card via a reader/writer. The information processing apparatus includes a middleware and a device driver provided so as to correspond to the reader/writer. The middleware provides a plurality of applications for the IC card with basic functions shared by the applications. The device driver sequentially processes a plurality of commands received from the plurality of applications via the middleware in the order in which the commands are received so as to control the corresponding reader/writer. In this way, the applications concurrently access the reader/writer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08573485&OS=08573485&RS=08573485
owner: Sony Corporation
number: 08573485
owner_city: Tokyo
owner_country: JP
publication_date: 20070328
---
The present invention relates to an information processing apparatus and a method and a program for mediating applications.

With the widespread use of IC cards reader writers for reading and writing information from and to IC cards have been installed in a variety of places. When IC cards were first introduced they were mainly used in apparatuses for business applications. In recent years the use of low cost reader writers in consumer electronics devices hereinafter referred to as CE devices has become widespread. Accordingly the number of applications using IC cards has been rapidly increasing.

In particular the number of CE devices such as personal computers PCs and mobile phones having the reader writer function has been rapidly increasing. Therefore a different reader writer may be connected to such CE devices having the reader writer function. This type of CE device can prestore a plurality of applications for using an IC card and a user can freely install a new application in the CE device. Consequently the chances have greatly increased that a plurality of applications for IC cards coexist in the same CE device.

However an existing IC card application that runs on an information processing apparatus such as the above described CE device has an architecture in which one application exclusively uses one reader writer. Accordingly while an application is using a reader writer another application cannot use that reader writer. For example while an application is displaying the balance of electronic money or purchase history information in the IC card another application cannot display transit fare payment log information. That is existing information processing apparatuses that use an IC card do not support a multi application environment and therefore cannot sufficiently mediate a plurality of applications.

Japanese Unexamined Patent Application Publication No. 2003 16403 describes a technology in which an IC card includes a plurality of applications and assigns an access right to each application in the IC card. However this technology has been developed under assumption that the IC card includes a plurality of applications. Therefore this technology cannot be applied to an IC card that does not include an application and that only reads and writes data in response to a command sent from a CE device. That is this technology cannot support the above described multi application environment.

Accordingly the present invention provides an information processing apparatus and a method and a program for appropriately mediating applications for an IC card when a plurality of the applications simultaneously use a reader writer.

According to an embodiment of the present invention an information processing apparatus capable of being connected to an IC card via a reader writer includes a middleware and a device driver provided so as to correspond to the reader writer. The middleware provides a plurality of applications for the IC card with basic functions shared by the applications. The device driver sequentially processes a plurality of commands received from the plurality of applications via the middleware in the order in which the commands are received so as to control the corresponding reader writer so that the applications concurrently access the reader writer.

In such a configuration each of the applications can request the device driver to execute a command using the basic functions provided by the middleware and shared by the plurality of applications. The device driver can sequentially process a plurality of commands received from the plurality of applications via the middleware in the order in which the commands are received so as to control the reader writer. Thus the device driver can transmit the commands to the IC card. Accordingly the plurality of applications can concurrently use the same reader writer and therefore mediation of the plurality of applications can be appropriately realized.

The device driver can switch between a shared mode in which the plurality of applications are allowed to concurrently access the reader writer and a dedicated mode in which only one of the applications is allowed to access the reader writer.

The middleware can provide the applications with an application programming interface used for each of the applications to select one of the shared mode and the dedicated mode and the device driver can switch between the shared mode and the dedicated mode in accordance with the mode selected for each of the applications.

When the shared mode is set the device driver can grant an access right for accessing the reader writer to one of the applications in response to a request received from the one of the applications and while the access right is granted to the one of the applications the device driver can execute only commands received from the one of the applications and places commands received from the applications other than the one of the applications in an execution wait mode.

The middleware can provide the one of the applications with an application programming interface used for the one of the applications to request the device driver to grant the access right to the one of the applications.

Upon receiving a command from one of the applications while executing a command received from one of the other applications the device driver can place the received command in an execution wait mode from the time when the command is received to the time when a predetermined timeout interval has elapsed. When predetermined timeout interval has elapsed the device driver can send a timeout error message to the one of the applications.

The device driver can limit the number of applications concurrently accessible to the reader writer to a predetermined maximum number of accesses or less.

The device driver can include a communication information storage module for storing information about communication between each of the applications and the reader writer for each of the applications.

A plurality of the reader writers can be connected to the information processing apparatus and the middleware can select one of the reader writers in accordance with a use request received from each of the applications and request the device driver corresponding to the selected reader writer to set the selected reader writer to be usable. The device driver can determine whether the selected reader writer is accessible from each of the applications in response to the request from the middleware. If the selected reader writer is accessible the device driver can set the selected reader writer to be usable with each of the applications.

The middleware can hold a list of the one or more reader writers compatible with each of the applications and sequentially selects one of the reader writers in the list so as to sequentially request the device driver corresponding to the selected reader writer to set the reader writer to be usable with each of the applications.

According to another embodiment of the present invention a method of mediating a plurality of applications for an IC card for use in an information processing apparatus capable of being connected to the IC card via a reader writer is provided. The method includes the steps of receiving a plurality of commands by a device driver provided so as to correspond to the reader writer from a middleware where the middleware provides the plurality of applications with basic functions shared by the applications so that the applications are concurrently accessible to the reader writer and sequentially processing the plurality of received commands by the device driver in the order in which the commands are received so as to control the reader writer.

The device driver can switch between a shared mode in which the plurality of applications are allowed to concurrently access the reader writer and a dedicated mode in which only one of the applications is allowed to access the reader writer.

The middleware can provide the applications with an application programming interface used for each of the applications to select one of the shared mode and the dedicated mode and the device driver can switch between the shared mode and the dedicated mode in accordance with the mode selected for each of the applications.

When the shared mode is set the device driver can grant an access right for accessing the reader writer to one of the applications in response to a request received from the one of the applications and while the access right is granted to the one of the applications the device driver can execute only commands received from the one of the applications and places commands received from the applications other than the one of the applications in an execution wait mode.

The middleware can provide the one of the applications with an application programming interface used for the one of the applications to request the device driver to grant the access right to the one of the applications.

Upon receiving a command from one of the applications while executing a command received from one of the other applications the device driver can place the received command in an execution wait mode from the time when the command is received to the time when a predetermined timeout interval has elapsed. When predetermined timeout interval has elapsed the device driver can send a timeout error message to the one of the applications.

The device driver can limit the number of applications concurrently accessible to the reader writer to a predetermined maximum number of accesses or less.

The device driver can include a communication information storage module for storing information about communication between each of the applications and the reader writer for each of the applications.

A plurality of the reader writers can be connected to the information processing apparatus and the middleware can select one of the reader writers in accordance with a use request received from each of the applications and request the device driver corresponding to the selected reader writer to set the selected reader writer to be usable. The device driver can determine whether the selected reader writer is accessible from each of the applications in response to the request from the middleware. If the selected reader writer is accessible the device driver can set the selected reader writer to be usable with each of the applications.

The middleware can hold a list of the one or more reader writers compatible with each of the applications and sequentially selects one of the reader writers in the list so as to sequentially request the device driver corresponding to the selected reader writer to set the reader writer to be usable with each of the applications.

According to still another embodiment of the present invention a program includes program code for causing a computer to function as an information processing apparatus capable of being connected to an IC card via a reader writer. The information processing apparatus includes a middleware and a device driver provided so as to correspond to the reader writer. The middleware provides a plurality of applications for the IC card with basic functions shared by the applications. The device driver sequentially processes a plurality of commands received from the plurality of applications via the middleware in the order in which the commands are received so as to control the corresponding reader writer so that the applications concurrently access the reader writer.

As described above according to the embodiments of the present invention when a plurality of applications for an IC card simultaneously use a reader writer an appropriate mediation among the applications can be realized.

Exemplary embodiments of the present invention are described below with reference to the accompanying drawings. Hereinafter the same reference numerals are used to designate corresponding parts of the various embodiments and the accompanying drawings and therefore descriptions are not repeated.

An exemplary configuration of an information processing apparatus that can be connected to a reader writer according to a first embodiment of the present invention is briefly described with reference to . is a block diagram of an information processing apparatus an IC card and reader writers according to the present embodiment when the information processing apparatus is connected to the IC card via the reader writers .

As shown in the information processing apparatus can be connected to for example a plurality of IC cards A and B hereinafter sometimes collectively referred to as IC cards via a plurality of reader writers A and B hereinafter sometimes collectively referred to as reader writers . The information processing apparatus can communicate a variety of information with the IC card via the reader writer . The information processing apparatus is composed of for example a computing apparatus such as a personal computer either a laptop or a desktop or a CE device such as a mobile phone. However the information processing apparatus is not limited to such devices. For example the information processing apparatus may be a personal digital assistant a portable video music player a home game console a portable game machine an information appliance an electronic dictionary or commercial equipment.

The reader writers can communicate a variety of information with the IC card for example in a contactless manner. The reader writers can read and write a variety of information from and to the IC card and can perform polling to determine whether the IC card is present in the vicinity.

For example such reader writers may be embedded preinstalled in the information processing apparatus or may be externally connected to the information processing apparatus via a cable such as a universal serial bus USB cable or via a wireless communication. In addition a plurality of the reader writers may be externally connected to the information processing apparatus or may be preinstalled in the information processing apparatus . In the reader writer A is externally connected to the information processing apparatus via the cable whereas the reader writer B is preinstalled in the information processing apparatus . In this way the information processing apparatus can be connected to the two IC cards A and B either of the same type or of different types via the reader writers A and B. However the manner of connection is not limited thereto. For example the information processing apparatus may be connected to any number of the IC cards via only one of the reader writers or three or more reader writers .

For example the IC cards are noncontact IC cards capable of wirelessly and contactlessly communicating with the reader writers if the distance between the IC cards and the reader writers is in a short range e.g. about 0 to about 10 cm . A storage unit in each of the IC cards can store a secured data such as electronic money information and log information.

An exemplary hardware configuration of the information processing apparatus e.g. a personal computer PC according to the present embodiment is described next with reference to . is a block diagram of an exemplary hardware configuration of the information processing apparatus according to the present embodiment.

As shown in the information processing apparatus includes a central processing unit CPU a read only memory ROM a random access memory RAM a host bus a bridge an external bus an interface an input unit an output unit a storage unit a plurality of connection ports e.g. connection ports A and B sometimes collectively referred to as connection ports and a communication unit .

The CPU is an exemplary processing apparatus that performs various processing in accordance with various programs. The CPU controls all of components of the information processing apparatus . The ROM stores programs and computation parameters used by the CPU . The RAM temporarily stores programs executed by the CPU and parameters varying in accordance with the execution of the programs. The CPU the ROM and the RAM are connected with each other via the host bus including a CPU bus.

The host bus is connected to the external bus such as a peripheral component interconnect interface PCI bus via the bridge . The interface is a communication interface that connects the external bus to the units described below.

The input unit includes operation mechanisms such as a mouse a keyboard a touch panel a button a switch and a lever. The input unit further includes an input control circuit for generating an input signal and inputting the input signal to the CPU . A user of the information processing apparatus operates the input unit so as to input a variety of data and operational instructions to the information processing apparatus .

The output unit includes a display unit such as a cathode ray tube CRT display a liquid crystal display LCD or a lamp and an audio output unit such as a speaker. The output unit displays a variety of information such as a screen displayed in accordance with the operation of an application for an IC card described in more detail below .

The storage unit includes a storage medium for storing data. For example the storage unit is composed of a hard disk drive HDD . The storage unit stores a variety of programs such as an application a middleware an operating system and a device driver and a variety of data. However the storage unit is not limited to an HDD. For example the storage unit may be composed of a random access storage medium such as a semiconductor memory an optical disc a magnetooptical disc or a magnetic memory. Note that examples of the semiconductor memory include a flash memory a static random access memory SRAM and an electrically erasable programmable read only memory EEPROM .

The connection port connects external peripheral devices e.g. the above described reader writers to the information processing apparatus . The connection port includes connection terminals such as USB and IEEE1394 terminals. The connection port is connected to the CPU via the interface the external bus the bridge and the host bus . When the reader writers A and B are connected to the connection ports A and B the information processing apparatus can communicate with the IC cards A and B via the reader writers A and B so as to receive and transmit a variety of data such as a command and a response message from and to the IC cards A and B. The number of installed connection ports may be increased or decreased so that one reader writer or three or more reader writers may be connected to the information processing apparatus .

The communication unit includes a communication device for communicating with a network such as the Internet a local area network LAN and a telephone network neither is shown . The communication unit communicates a variety of data with external apparatuses via that network.

Exemplary hardware configurations of the reader writers and the IC card according to the present embodiment are described next with reference to . is a block diagram of the hardware configurations of the reader writers and the IC card according to the present embodiment.

An exemplary hardware configuration of the reader writers is described first. As shown in each of the reader writers includes a control unit a modulation circuit a demodulation circuit an oscillator a memory and an antenna .

The control unit is composed of an integrated circuit IC including a variety of processors and memories such as a ROM and a RAM. The control unit controls each of components of the reader writers using the memory e.g. a flash memory . In addition the control unit processes data e.g. a command input from the information processing apparatus and outputs the data to the modulation circuit so as to transmit the data to the IC card . Furthermore the control unit receives data transmitted from the IC card using the demodulation circuit . Still furthermore the control unit communicates with the information processing apparatus . Yet still furthermore the control unit performs an authentication process between the reader writer and the IC card when communicating with the IC card and sends the result of the authentication to the information processing apparatus .

The modulation circuit modulates carrier waves having a predetermined frequency and being supplied from the oscillator using the data input from the control unit for example in an amplitude shift keying ASK modulating manner. The modulation circuit then transmits the modulated waves to the IC card via the antenna . In contrast the demodulation circuit demodulates modulated waves received from the IC card via the antenna and delivers the demodulated data to the control unit .

An exemplary hardware configuration of the IC card is described next. As shown in the IC card includes an antenna a capacitor and an IC . The IC receives and transmits modulation waves from and to each of the reader writers via the antenna . The capacitor forms an LC circuit together with the antenna . The LC circuit resonates with electromagnetic waves having a predetermined carrier frequency. The IC includes an interface unit a modulation circuit demodulation circuit a control unit and a memory .

The interface unit outputs a signal obtained by detecting the modulated waves received via the antenna to the demodulation circuit . In addition the interface unit transmits a signal input from the control unit via the modulation circuit to the reader writer via the antenna . Furthermore the interface unit stabilizes the detected signal using a voltage regulator not shown and delivers the detected signal serving as a power source to each of the circuits.

The demodulation circuit demodulates the signal input from the interface unit and outputs the demodulated data to the control unit . The modulation circuit modulates data input from the control unit and outputs the modulated data to the interface unit .

The control unit performs a predetermined process in response to the data a command input from the demodulation circuit . Examples of the predetermined process include a read write process of data from and to the memory and a computing process of data input from and output to the control unit . In addition the control unit manages appends updates or deletes data stored in the memory . Furthermore the control unit generates response data a response message corresponding to the above described process and outputs the response message to the modulation circuit which transmits the response message to the reader writer . The control unit can decode data input from the demodulation circuit or encode data to be output to the modulation circuit using a Manchester encoding method. Furthermore the control unit can decrypt data input from the demodulation circuit or encrypt data to be output to the modulation circuit .

The memory is a storage unit for storing a variety of data related to the IC card . For example the IC card is composed of a semiconductor memory such as a flash memory a SRAM an EEPROM or a ROM. The memory stores for example a card ID that is unique to the IC card and electronic money information indicating the balance of the charged electronic money. In addition the memory stores a program an operating system OS of the IC card for the control unit to perform the following processes analysis of a command generation of a response message data read write operation from and to the memory and encoding and encrypting data. This information remains in the memory even after the communication between the IC card and the reader writer is completed and the power supply stops.

Examples of the communication protocol between the IC card and each of the reader writers include the near field communication NFC protocol the ISO IEC14443 protocol the ISO IEC15693 for a radio frequency RF tag the Bluetooth protocol the ultra wide band UWB protocol and the IEEE802.11b protocol.

In such a configuration data a command and a response message can be contactlessly communicated between the reader writer and the IC card . Accordingly the reader writer can read information stored in the IC card and write information onto the IC card . For example the reader writer can read a card ID stored in the IC card and perform an authentication process or can read and update electronic money information a balance of money stored in the IC card . At that time since the data is contactlessly exchanged the user can rapidly and easily instruct the reader writer to read and write data from and to their own IC card simply by moving the IC card to within a predetermined distance from the reader writer .

Exemplary software configurations of the information processing apparatus and the IC card according to the present embodiment are described next with reference to . is a block diagram of the software configurations of the information processing apparatus and the IC card according to the present embodiment.

As shown in the information processing apparatus includes a plurality of applications A B C D E . . . hereinafter sometimes collectively referred to as applications a middleware for using the IC card an operating system OS and a plurality of device drives A B . . . hereinafter sometimes collectively referred to as device drives for operating the reader writer . That is according to the present embodiment the software configuration of the information processing apparatus has the following four layers the application the middleware the OS and the device driver . A program stored in the storage unit functions as each of the device drivers when the CPU reads out the program. Software in each layer is described next.

The application is software that provides a user of the IC card with a particular service. More specifically for example the applications provides a variety of services such as a login authentication function using the IC card a display function of log information about transit fare payment e.g. railroad ticket a display function of a balance of electronic money charged in the IC card an inquiry function of points of a point reward system charged in the IC card and a display function of coupons and electronic tickets stored in the IC card .

The application operates in cooperation with the middleware and the device drivers so as to provide the user with the above described various services. The application may be preinstalled in the information processing apparatus at a delivery time or may be installed in the information processing apparatus afterward by the user. In addition the application installed in the information processing apparatus may be updated upgraded or uninstalled afterward.

To execute the above described function the application instructs the middleware to generate a command to be transmitted to the IC card . Examples of the command include a polling command for requesting a search for a predetermined IC card present in the vicinity of the reader writer a command for reading out a variety of information stored in the IC card e.g. card ID electronic money information shopping history information transit fare payment log information coupon information and electronic ticket information and a command for writing a variety of information onto the IC card or updating the information stored in the IC card . In addition the information processing apparatus receives a response message in response to the command from the IC card via the reader writer . On the basis of information contained in the response message the application provides the user with the above described service e.g. display of the balance of electronic money .

The middleware is software that provides each of the applications with a basic function commonly used by the applications . Thus the middleware can provide general purpose functions used by a plurality of applications . Therefore the need for duplicated development of the general purpose functions by developers of the applications can be eliminated. The middleware is provided in the form of a common library e.g. in a dynamic link library DDL format of Microsoft Windows trade name .

More specifically the middleware has application program interfaces APIs that are commonly used by the applications so as to provide the applications with these APIs. Each of these APIs is a set of commands and functions for facilitating the development of each of the applications . Simply by invoking the API the applications can execute a basic function related to the use of the IC card e.g. a request for execution of a command .

In addition the middleware has capability to control the reader writer and the IC card via the OS and the device driver . More specifically the middleware generates a variety of commands in response to a command generation instruction from the application and outputs the generated command to the device driver in order to request the execution of the command i.e. transmission of the command to the IC card via the reader writer . Furthermore the middleware receives a response message returned by the IC card in response to that command via the reader writer and the device driver . Subsequently the middleware outputs the received response message to the application . Thus the middleware accesses the reader writer via the device driver .

Additionally the reader writers that each of the applications can access are predefined. For example in an example shown in it is determined that the applications A B and C use the reader writer A whereas the applications D and E use the reader writer B. The middleware has a list indicating a correspondence between each of the applications and one or more available reader writers i.e. a list of the reader writers that are accessible from each of the applications . The middleware can scan the reader writers using this list so as to determine the reader writers that the applications can use. In addition the application can specify the reader writers that the application uses and the middleware can allocate the specified reader writers to that application . Such a function of the middleware allows each of the applications to smoothly execute a command transmission and a response message reception through an appropriate reader writer when a plurality of the reader writers are connected to a plurality of the information processing apparatuses .

The OS is basic software that performs overall control of the information processing apparatus . The OS provides the applications and the middleware with basic functions such as an input output function performed by the input unit and the output unit and a function of managing the storage unit .

The device driver is software that operates one of the reader writers . In response to a command received from the middleware the device driver controls the one of the reader writers . The device driver is provided for each of the reader writers . In the example shown in the device driver A corresponding to the reader writer A and the device driver B corresponding to the reader writer B are provided. However the configuration of the device drivers is not limited thereto. One device driver or three or more device drivers may be provided. When one of the reader writers is connected to the information processing apparatus the OS loads the device driver corresponding to the connected reader writer and creates an instance of the device driver .

The device drivers processes the command received from the application via the middleware and outputs the processed command to the reader writer . Upon receiving the command the reader writer transmits the command to the IC card . In addition the device driver analyzes a response message received from the IC card via the reader writer and outputs the response message to the middleware .

If the device driver receives a plurality of commands from a plurality of the applications via the middleware the device driver sequentially processes these commands in the order in which the commands are received. More specifically upon receiving a command execution request from the middleware the device driver determines whether it processes a command received from one of the applications . If the device driver does not process any command the device driver executes a process requested by the received command. However if the device driver is processing any command the device driver places the received command in a wait mode. After the currently processed command has been completed the device driver processes the received command. In this way the device driver sequentially processes a plurality of commands received from a plurality of the applications in the order in which the commands are received. Accordingly a plurality of the applications can concurrently use one reader writer . Thus a multi application environment can be appropriately realized.

In addition the device driver can switch between a shared mode in which a plurality of the applications can simultaneously access one of the reader writers and a dedicated mode in which only one of the applications can access one of the reader writers . In the shared mode even when one application A uses the reader writer A another application B can access that reader writer A. In contrast in the dedicated mode when one application A uses the reader writer A another application B is not allowed to access the reader writer A. For example the device driver can switch between the shared mode and the dedicated mode in accordance with a mode selection requested by the application via the middleware .

When the device driver is switched from the dedicated mode to the shared mode as noted above a plurality of applications in the information processing apparatus can concurrently use one of the reader writers . Accordingly a multi application environment can be suitably provided. In contrast in the dedicated mode since one of the applications exclusively uses one of the reader writers and sends commands and receives response messages to and from the one of the reader writers the one of the applications can stably perform its own function for the IC card .

Furthermore in the shared mode upon receiving an access right request from one of the applications the device driver provides the one of the applications with an exclusive access right for accessing the reader writer . Still furthermore upon receiving an access right termination request from the one of the application having the access right the device driver withdraws the access right from the one of the applications . Such a usage of the access right creates a critical section from the provision to the withdrawal of the access right even in the shared mode. During the critical section the device driver continuously processes only commands received from the one of the applications and places commands received from the applications other than the one of the applications in a wait mode without processing the commands. The access right is described in more detail later.

The device driver limits the number of applications concurrently accessible to the reader writer corresponding to the device driver to a predetermined maximum access number or less. Thus overload of the information processing apparatus or the reader writer can be prevented from occurring when more than the maximum access number of the applications access the reader writer .

The software configuration of the IC card is described next with reference to . As shown in the IC card includes only an operating system OS . The IC card does not include any application for IC cards. In addition the user cannot install an application on the IC card afterward. The memory of the IC card stores a data file having a directory structure. This data file stores a variety of information such as electronic money information transit fare payment log information reward point information electronic ticket information and coupon information. The OS reads and writes such information in accordance with a command received from the information processing apparatus via the reader writer .

As noted above according to the present embodiment the IC card does not include any application for IC cards. Thus the IC card has a simple configuration so as to only read and write data from and to the memory in accordance with a command received from the information processing apparatus . In addition the IC card cannot modify a command determined by the OS cannot change the meaning of the command or add a new command . Accordingly when a plurality of the applications are installed in the information processing apparatus the middleware and the device driver need to be appropriately designed in order to realize sufficient multi application environment.

The configurations of the middleware and the device driver according to the present embodiment are described in more detail below with reference to . is a block diagram of the configurations of the middleware and the device driver according to the present embodiment.

The configuration of the middleware is described first. As shown in the middleware includes an API a middleware core and a communication information storage module and a device control module .

The API is a set of commands and functions used by the applications when the applications use the reader writer and the IC card . Since the API provided by the middleware is a set of basic functions that a plurality of the applications commonly use the development of the applications can be facilitated.

Particular examples of the API provided by the middleware are described next. For example the middleware provides the API for generating a command for transmitting data to the IC card . Accordingly by using this API each of the applications can instruct the middleware to generate such a command.

In addition the middleware provides the API for allowing the applications to specify a connection port name e.g. a USB port name of the reader writer the target reader writer to be accessed and the data transfer rate. Accordingly by using this API one of the applications can instruct the middleware to identify the target reader writer to be accessed and the data transfer rate between the one of the applications and the reader writer .

In addition the middleware provides the API for allowing the applications to select between the above described shared mode and dedicated mode. Accordingly by using this API one of the applications can select one of the shared mode and the dedicated mode when accessing the reader writer . The device driver switches between the shared mode and the dedicated mode in accordance with the mode selection of the one of the applications .

Furthermore the middleware provides the API for allowing one of the applications to request the device driver to grant or withdraw an access right for accessing the reader writer to and from the one of the applications . Accordingly when one of the applications needs to continuously process a series of commands the one of the applications requests the device driver to grant or withdraw the access right via the middleware by using this API . Thus the one of the applications can have an exclusive access right for accessing the reader writer or terminate the access right.

The middleware core is the heart of the middleware . In response to the instruction from one of the applications the middleware core generates various commands such as the above described commands and requests the device driver to execute the command. In addition the middleware core encodes and decodes the command. Furthermore the middleware core performs a utility process. Still furthermore the middleware core outputs the generated command to the device control module and outputs a response message input from the device control module to the one of the applications .

In addition to make one of the reader writers available to the application to make one of the reader writers open the middleware core scans the reader writers and selects one of the reader writers that is available for the application . In order to select one of the available reader writers the middleware core may select one of the reader writers in accordance with the instruction from the application . Alternatively the application may sequentially select one of the reader writers using the list of the available reader writers .

Furthermore the middleware core manages communication information stored in the communication information storage module . The communication information storage module is composed of for example the storage unit of the information processing apparatus . The communication information storage module stores communication information tables A B and C hereinafter sometimes collectively referred to as communication information tables corresponding to the applications A B and C respectively. The communication information tables contain information about communication statuses between each of the applications A B and C and the reader writer . Examples of the communication information include a driver handle an access right request timeout interval a communication timeout interval error codes and transaction information. This communication information is described in more detail later.

The device control module requests a command receiving module of the device driver to execute a command generated by the middleware core so as to control the reader writer and the IC card . In addition the device control module receives a response message from a response analyzing module of the device driver and outputs that response message to the middleware core .

The configuration of the device driver is now herein described. As shown in the device driver includes the command receiving module a command executing module the response analyzing module a communication information storage module and a bus control module .

The command receiving module receives a request command from the middleware and requests the command executing module to execute that command. The command executing module executes the command requested by the command receiving module so as to request the bus control module to transmit that command to the IC card via the reader writer . The response analyzing module analyzes a response message received from the reader writer via the bus control module . Subsequently the response analyzing module outputs the response message to the middleware .

The bus control module follows instructions from the command executing module and the response analyzing module so as to control the hardware for communication with the reader writer in the information processing apparatus . Examples of the hardware include the external bus the interface and the connection port . The bus control module allows the command executing module and the response analyzing module to communicate a command and a response message with the reader writer .

In the device driver having such a configuration the command receiving module can set a command receiving mode to the above described shared mode or dedicated mode in accordance with the mode setting from one of the applications . When the command receiving mode is set to the dedicated mode the command receiving module accepts a command from only the one of the applications that has requested the dedicated mode. Thereafter the command receiving module requests the command executing module to execute the command. The command receiving module does not accept a command from the applications other than the one of the applications .

In contrast when the command receiving mode is set to the shared mode the command receiving module accepts commands from a plurality of the applications . When the command receiving module receives a plurality of commands from a plurality of the applications in the shared mode the command receiving module requests the command executing module to sequentially execute the commands in the order in which the commands are received.

More specifically upon receiving a command execution request from one of the applications the command receiving module determines whether it is in a signal state in which a process for one of the applications other than the one of the applications is not performed. If the command receiving module is in the signal state the command receiving module requests the command executing module to execute the received command. However if the command receiving module is in the non signal state in which a process for one of the applications other than the one of the applications is performed the command receiving module places the received command in a wait mode. When the process for one of the applications other than the one of the applications is completed and all the command processes placed in the wait mode before the received command is placed are completed the command receiving module requests the command executing module to execute the received command. As noted above when all the command processes placed in the wait mode are completed the command receiving module switches from the non signal mode to the signal mode so that the subsequent command received from the one of the applications can be processed. In this way the atomicity of each of the commands can be ensured that is the successful execution or unsuccessful execution of each of the commands can be clearly determined.

Furthermore in the shared mode the command receiving module can grant or withdraw an access right for the reader writer to and from one of the applications in response to the access right acquisition or termination request from the one of the applications . Thus the time period from the acquisition to the termination of the access right for the one of the applications i.e. the time period from the time when the one of the applications obtains the access right to the time when the one of the applications loses the access right serves as a critical section. In this critical section the command receiving module executes only a command received from the one of the applications having the access right and places commands received from the applications other than the one of the applications in a wait mode. In this way in this critical section the command receiving module can permit execution of a command sent from the application having the access right and inhibit execution of commands sent from the applications other than the application having the access right.

If a plurality of command execution requests are concurrently sent to one reader writer from a plurality of the applications the process of the commands is delayed. Thus the function of the applications may have a negative impact. Accordingly when the command receiving module receives a command from one of the applications while the command receiving module is processing a command sent from one of the application other than the one of the applications in the non signal mode the command receiving module places the received command in a wait mode from the time when the command receiving module receives the command to the time when a predetermined timeout interval specified by the application has elapsed. If the preceding command processing is completed before the timeout is reached the command receiving module starts to process the command received from the one of the applications in the wait mode. However if the timeout is reached before the preceding command processing is completed the command receiving module sends a timeout error message to the one of the applications .

In this way the command receiving module can determine whether the timeout is reached before the command receiving module starts executing a command received from each of the applications . Accordingly the waiting time of each application can be reduced to less than or equal to the access right waiting timeout interval. Thus when a plurality of command execution requests are concurrently sent to one reader writer from the plurality of the applications the negative impact on the applications caused by processing delay of the command can be eliminated. Each of the applications that received a timeout error message from the device driver may retry to send the same command execution request or may display an error message indicating that the command has not been executed to the user.

In addition during execution of a command if a communication timeout occurs in the bus control module when the bus control module is communicating with the reader writer this communication timeout can be notified to each of the applications . Accordingly if the execution of a command is not completed when a predetermined communication timeout is reached due to a communication error between the device driver and the reader writer each of the applications can detect the communication error.

In addition the command executing module and the response analyzing module of the device driver manage the communication information stored in the communication information storage module . The communication information storage module is composed of for example the storage unit of the information processing apparatus . The communication information storage module stores communication tables A B and C hereinafter sometimes collectively referred to as communication tables respectively corresponding to the applications A B and C that are accessible to the reader writer . The communication tables contain information about communication between the reader writer and each of the applications A B and C. Examples of the communication information contained in the communication tables include a requester application ID response data an access right waiting timeout interval a communication timeout interval an error code reader writer mode information and transaction information.

The requester application ID is an identification ID for identifying one of the applications that requested the execution of a command. By using the requester application ID the communication tables A B and C can be associated with the applications A B and C respectively.

The response data is data returned from the IC card to the reader writer in response to a command transmitted from the reader writer to the IC card . This response data is generated in accordance with a response message received by the reader writer from the IC card and is stored in the communication table of the device driver . Since the response data associated with one of the applications is stored in the communication table corresponding to the one of the applications the device driver can recognize what type of response message is returned to the one of the applications even when the device driver communicates a plurality of commands and response messages with the plurality of the applications .

The access right waiting timeout interval is a maximum time interval for waiting for the execution of a command received from one of the applications . A different access right waiting timeout interval can be set for each of the applications . Each application can set its own access right waiting timeout interval. In the initial stage the device driver stores the default value e.g. five seconds of the access right waiting timeout interval in each of the communication tables . When one of the applications specifies the access right waiting timeout interval the device driver changes the access right waiting timeout interval from the default value to the specified value e.g. ten seconds .

As noted above the communication timeout interval is a maximum time interval for limiting the communication time between the device driver and the reader writer . Like the access right waiting timeout interval a different communication timeout interval can be set for each of the applications . If the device driver does not receive any response message for more than or equal to a predetermined communication timeout interval after the device driver outputs a command to the reader writer the device driver determines that a communication timeout occurs and notifies the communication timeout to the one of the applications .

The error code represents the type of error occurring in the device driver . The error code is generated by the device driver . By holding the error code the device driver can recognize which error occurred in the operation of the application .

The reader writer mode information indicates whether one of the applications is accessible to the reader writer . To allow one of the applications to access the reader writer i.e. to allow one of the applications to open the reader writer. a pseudo mutual authentication needs to be performed between the one of the applications and the reader writer . According to the present embodiment since the device driver has a pseudo mutual authentication capability the device driver holds information about whether the pseudo mutual authentication is successfully performed in a reader writer mode information field. Thus the device driver can recognize which one of the applications is accessible to the reader writer .

The transaction information is information about communication between the device driver and the reader writer .

So far a variety of communication information contained in the communication table of the device driver has been described. Since a variety of communication information contained in the communication table of the middleware is similar to the communication information contained in the communication table descriptions of the communication information in the communication table is not repeated. However note that the driver handle in the communication information table indicates an ID for one of the applications to access the device driver via the middleware . Therefore this driver handle indicates which device driver is being accessed by the one of the applications .

As mentioned earlier the device driver and the middleware hold the communication information such as the timeout interval and a result of communication with the reader writer for each of the applications that are accessible to the reader writer . Thus each of the applications can acquire the result of communication from the middleware at any time. Furthermore the device driver can set any timeout interval for each of the applications .

So far the configuration of the information processing apparatus according to the present embodiment and in particular the configurations of the device driver and the middleware have been described. A method for mediating applications in the information processing apparatus having such a configuration is described next.

The open process of the reader writer in the method for mediating applications of the present embodiment is described first. When one of the applications sends commands and receives response messages using the reader writer the reader writer needs to be opened for the one of the applications . As used herein the term open of the reader writer refers to an operation in which a pseudo mutual authentication is performed between one of the applications and the reader writer via the device driver so that the one of the applications can use the reader writer e.g. can send commands to and receive response messages from the reader writer . This open process is performed by the middleware to work cooperatively with the reader writer .

The middleware selects one of the reader writers to be opened in response to an open request a use request of the reader writer sent from one of the applications . Subsequently the middleware requests the device driver corresponding to the selected reader writer to open the reader writer i.e. to allow the one of the applications to use the reader writer to be opened .

If a plurality of the reader writers are connected to the information processing apparatus the middleware selects one of the reader writers to be opened from among the plurality of reader writers using one of the following two methods 1 selecting the reader writer specified by the one of the applications and 2 automatically and sequentially selecting one of the plurality of the reader writers that is available for the one of the applications in a list held by the middleware .

A process flow performed by the middleware using the above described selection method 1 is described next with reference to . is a flow chart of an process performed by the middleware according to the present embodiment when the middleware opens one of the reader writers specified by the one of the applications .

As shown in the middleware receives from one of the applications an open request of the reader writer RWi specified by the one of the applications step S . Each of the applications holds identification information about the reader writers e.g. port names or reader writer IDs that the each of the application can use. When the one of the applications sends an open request to the middleware the one of the applications attaches the identification information about the reader writer RWi to be opened to that open request so as to specify the reader writer to be opened. The middleware selects the reader writer RWi specified by the one of the applications as the reader writer to be opened.

Subsequently the middleware requests the device driver corresponding to the reader writer RWi specified by the one of the application to open that reader writer RWi step S . Upon receiving the open execution request the device driver determines whether the specified reader writer RWi is accessible to the one of the applications on the basis of a predetermined condition. If the specified reader writer RWi is accessible to the one of the applications the device driver opens the reader writer RWi . However if the specified reader writer RWi is not accessible to the one of the applications the device driver does not open the reader writer RWi . This operation performed by the device driver is described in more detail later with reference to .

Thereafter the middleware determines whether the open process of the reader writer RWi has been successful on the basis of a message indicating a successful or unsuccessful open sent from the device driver step S . If the open process of the reader writer RWi is successful the middleware performs a variety of settings e.g. setting of the communication information table so that the one of the applications that sent the open request can use the reader writer RWi . The middleware then sends a message indicating a successful open to the one of the applications step S . In this case the one of the applications can use the reader writer RWi and can send commands to and receive response messages from the reader writer . However if the open process of the reader writer RWi is unsuccessful the middleware sends a message indicating an unsuccessful open to the one of the applications that sent the open request step S . In this case the one of the applications cannot use the reader writer RWi and therefore the one of the applications cannot send commands to and receive response messages from the reader writer RWi .

As shown by the process flow in the middleware performs control so as to open one of the reader writers specified by the one of the applications .

A process flow performed by the middleware using the above described selection method 2 is described next with reference to . is a flow chart of a process performed by the middleware according to the present embodiment when the middleware sequentially scans a plurality of the reader writers and opens the available reader writers .

As shown in the middleware receives from one of the applications an open request of the reader writer i.e. a request to use the reader writer step S . In the process illustrated in the one of the applications does not specify a specific one of the reader writers for the middleware and requests the middleware to open some of the reader writers connected to the information processing apparatus . Upon receiving the request the middleware automatically searches for the reader writers that are available for the one of the applications and sequentially opens these available reader writers as described below.

Subsequently the middleware acquires a list including one or more reader writers automatically searched for step S . The middleware prestores identification information about the reader writers available for each of the applications in the form of a list of the reader writers for automatic search. In this way the reader writers to be automatically searched for by the middleware are predefined for each application . Note that this list of the reader writers can be changed by the each of the applications .

Upon receiving the open request from the one of the applications as described in step S the middleware reads out the list corresponding to the one of the application that sent the open request so as to acquire identification information of the automatically searched reader writers step S . In an example shown in n reader writers RW RW . . . RWn are listed as the reader writers to be opened. In the following description RW RW . . . RWn are selected in this order and the open process is performed for the selected one.

More specifically the middleware sets a variable i to zero as an initial value step S . Thereafter the middleware increments the variable i by one step S . Subsequently the middleware determines whether the variable i is less than or equal to n step S . Thus the middleware selects the reader writer RW as the reader writer to be opened.

Subsequently the middleware requests the device driver corresponding to the reader writer RW to open that reader writer RW step S . The process in step S is similar to that in step S. The middleware determines whether the reader writer RW has been successfully opened on the basis of a message indicating a successful or unsuccessful open received from the device driver step S . If the open process of the reader writer RW is successful the process proceeds to step S where the middleware performs a variety of settings so that the one of the applications that sent the open request can use the reader writer RW . The middleware then sends a message indicating a successful open of the reader writer RW to the one of the application step S . However if the open process of the reader writer RW is unsuccessful the process returns to step S where the middleware selects the next reader writer RW in the list as one of the reader writers to be opened. Subsequently the middleware attempts to open the reader writer RW in the same manner described for the reader writer RW .

The middleware repeats such a process until the open process for either one of the reader writers is successful step S . If this open process for all the n reader writers RW RW . . . RWn is unsuccessful it is determined at step S that the variable i n and therefore the process proceeds to step S. The middleware sends a message indicating that all the reader writers cannot be opened to the one of the applications that sent the open request step S .

As noted above in the process flow illustrated in the middleware automatically and sequentially selects one of the reader writers to be opened from among the reader writers RW RW . . . RWn that are available for the application in the predetermined order determined by the list. Subsequently by sequentially requesting the device drivers corresponding to the selected reader writers to open the selected reader writers the middleware attempts to open one of the selected reader writers . In this way the middleware can automatically search for the reader writers suitable for the one of the applications so as to open the one of reader writers .

In the above described process flow illustrated in if an open process of any one of the reader writers is successful the open process is completed without attempting to open the other reader writers . However the present invention is not limited thereto. For example the middleware may attempt to open the reader writers RW RW . . . RWn contained in the list held by the middleware so as to concurrently open a plurality of the reader writer for the application . Examples of the applications that use a plurality of the reader writers which are concurrently open include an application having questionnaire capability or quiz capability for selecting a user answer from among a plurality of options. Such a type of application can identify a user answer by determining which one of reader writers associated with the options the IC card is connected to.

The process flow in which the device driver according to the present embodiment opens one of the reader writers requested by the middleware is described next with reference to . is a flow chart of a process in which the device driver according to the present embodiment opens one of the reader writers requested by the middleware .

As shown in the device driver receives an open execution request for the reader writer RWi from the middleware step S . This open execution request for the reader writer RWi is the one issued at step S of the process flow illustrated in or at step S of the process flow illustrated in .

Upon receiving the open execution request the device driver acquires identification information about the reader writer RWj held by itself step S . Subsequently the device driver determines whether this identification information RWj is equal to the identification information RWi about one of the reader writers requested by the middleware step S . Since there is a one to one correspondence between the device driver and the reader writer each of the device drivers can control only the reader writer RWj corresponding to itself. Therefore the device driver compares the identification information RWj with the identification information RWi . If the identification information RWj is equal to the identification information RWi the device driver can determine that it receives a valid open request for one of the reader writers corresponding to itself and therefore the process proceeds to step S. However if the identification information RWj is not equal to the identification information RWi it is determined that the device driver has received an open request for one of the reader writers RWi that the device driver does not support. Thus the process proceeds to step S where it is determined that the open process of the reader writer RWi is unsuccessful and the device driver notifies the middleware of that information.

Subsequently at step S the device driver determines whether the reader writer RWi RWj has been already opened for one of the applications other than the one of the applications in the dedicated mode step S . In the dedicated mode since only one of the applications can use the reader writer RWi an open request from a subsequent one of the applications needs to be inhibited. Therefore if at step S it is determined that the reader writer RWi is open in the dedicated mode the process proceeds to step S. At step S it is determined that the open of the reader writer RWi is unsuccessful and the device driver notifies the middleware of that information. In contrast if it is determined that the reader writer RWi is not opened in the dedicated mode e.g. the reader writer RWi is not opened by one of the applications other than the one of the applications or the reader writer RWi is opened in the shared mode by the applications other than the one of the applications the process proceeds to step S.

At step S the device driver determines whether the number of the applications that have already accessed the reader writer RWi reaches a predetermined maximum number of accesses step S . As mentioned earlier in the shared mode a plurality of the applications can concurrently access one of the reader writers . At that time to reduce the processing load of a processing unit e.g. the CPU of the information processing apparatus the number of the applications that can concurrently access one of the reader writers is limited to a value less than or equal to a predetermined maximum number e.g. eight . Accordingly at step S the device driver determines whether the number of the applications that have accessed the reader writer RWi reaches the predetermined maximum number of accesses. If the number of the applications that have accessed the reader writer RWi reaches the predetermined maximum number of accesses the process proceeds to step S. At step S the device driver determines that the open process of the reader writer RWi is unsuccessful and notifies the middleware of this information. This operation can prevent excess processing load of the processing unit from occurring when one of the applications requesting the open process is allowed to access the reader writer RWi although the maximum number of the applications have already accessed the reader writer RWi . However if the number of the applications that have accessed the reader writer RWi is not reached the predetermined maximum number of accesses the process proceeds to step S.

At step S the middleware connects the one of the applications that sent the open request to the reader writer RWi and subsequently checks operations of the reader writer RWi step S . Thus the middleware determines whether the reader writer RWi operates without any problem step S . If it is determined that the operation of the reader writer RWi is not normal the process proceeds to step S. At step S the device driver determines that the open process of the reader writer RWi is unsuccessful and notifies the middleware of that information. Thus the one of the applications does not open the reader writer RWi when reader writer RWi operates abnormally. However if it is determined that the operation of the reader writer RWi is normal the process proceeds to step S. At step S the device driver determines that the open process of the reader writer RWi for the one of the applications that sent the open request is successful. The device driver performs a variety of settings e.g. setting of the communication information table so that the one of the applications that sent the open request can use the reader writer RWi . The device driver then sends a message indicating a successful open to the middleware step S .

As described above in response to the open request from the middleware the device driver determines whether the reader writer RWi specified by the middleware is accessible from the one of the applications that sent the open request in accordance with the above described various conditions steps S S S and S . If the reader writer RWi is accessible the device driver can open the reader writer RWi .

So far the open process of one of the reader writers in the method for mediating applications according to the present embodiment has been described. A command processing method in the method for mediating applications according to the present embodiment is described in detail next with reference to and .

As described above when the device driver is set to the shared mode the command receiving module of the device driver sequentially receives a plurality of commands from a plurality of the applications and requests the command executing module to execute the commands in the order in which the commands are received. More specifically in the shared mode upon receiving a command execution request from one of the applications via the middleware the command receiving module determines whether the command executing module is processing a preceding command received from the applications other than the one of the applications . If it is determined that the command executing module is in the signal mode in which the command executing module is not executing any command the command receiving module requests the command executing module to immediately execute the received command and changes the signal mode to the non signal mode. However if it is determined that the command executing module is in the non signal mode in which the command executing module is executing the other command the command receiving module places the received command in a wait mode and requests the command executing module to execute that command immediately after the execution of the other command is completed and the command executing module enters the signal mode.

The command processing is now herein described in detail with reference to . are schematic illustrations of a particular example using the method for processing commands received from the plurality of the applications according to the present embodiment.

In three applications A B and C send six command execution requests to the device driver in the following order 1 a command A 2 a command A 3 a command A 4 a command B 5 a command B and 6 a command B .

In this case as shown in the device driver receives the first command A from the application A and executes the command A so as to control the corresponding one of the reader writers . During the execution of the command A the device driver receives the command A from the application B and the command A from the application C and places these commands in an execution wait mode. Note that at this point of time the commands B B and B have not been issued yet.

Subsequently as shown in after the execution of the first command A is completed the device driver executes the second command A so as to control the one of the reader writers . During the execution of the command A the device driver receives the command A from the application C and the command B from the application A and places these commands in the execution wait mode. Upon receiving a command A termination message from the device driver the application A requests the device driver to execute the subsequent command B. However as noted above the device driver executes the command A received from the application B and the command A received from the application C earlier than the command B.

Thereafter as shown in after the execution of the second command A is completed the device driver executes the third command A so as to control the one of the reader writers . During the execution of the command A the device driver receives the command B from the application A and the command B from the application B and places these commands in the execution wait mode. Subsequently the device driver sequentially executes the command B the command B and the command B in the order in which these commands are received in the above described manner.

The command execution sequence in the example illustrated in is described in more detail next with reference to . is a sequence diagram illustrating a particular example of a command processing flow of the information processing apparatus according to the present embodiment.

As shown in upon receiving an open request from the application A the middleware and the device driver execute the above described steps illustrated in so as to open the corresponding one of the reader writers for the application A steps S and S . Similarly the one of the reader writers is opened for the application B steps S and S and the one of the reader writers is opened for the application C steps S and S . Thus the applications A B and C can use the one of the reader writers so as to send commands to and receive response messages from the IC card via the one of the reader writers .

Subsequently the application A sends an execution request of the command A to the device driver via the middleware step S . The device driver immediately executes the command A and transmits the command A to the IC card via the one of the reader writers step S . Thereafter the device driver receives a response message A in response to the command A from the IC card via the one of the reader writers and outputs this response message A to the application A step S . During the execution of the command A i.e. during a time period from step S to step S the application B sends an execution request of the command A to the device driver step S . Furthermore the application C sends an execution request of the command A to the device driver step S . However the device driver places these commands A and A in the execution wait mode so as to put the applications B and C on standby. After the execution of the command A is completed step S the device driver executes the command A so as to transmit this command to the IC card step S . The device driver then receives a response message A in response to the command A from the IC card step S . Furthermore after the execution of the command A is completed step S the device driver executes the command A step S and receives a response message A from the IC card step S .

Similarly the device driver sequentially receives the execution requests of the commands B B and B from the applications A B and C respectively steps S S and S . At that time the device driver causes the applications A B and C to enter the standby mode until executions of the preceding commands A B and B are completed steps S S and S . When executions of the preceding commands A B and B are completed the commands B B and B are executed respectively steps S S and S . When the device driver receives a response message B in response to the last received command B and outputs the response message B to the application C the entire process is completed.

As described above in the method for processing a command according to the present embodiment the device driver sequentially executes commands received from the applications in the order in which the commands are received. In this way the plurality of the applications can concurrently use one of the reader writers and therefore a multi application environment can be appropriately provided.

However some commands used for the IC card change the state of the IC card if the commands are executed after a specific command is executed. Accordingly consider that one of the applications opens one of the reader writers in the shared mode and executes a series of commands that need to be continuously executed. At that time if a command from one of the applications other than the one of the applications interrupts the execution and that command is executed the execution of the series of commands may fail. Thus the one of the applications operates in an unexpected manner.

For example if the command A is a mutual authentication command between the application A and the IC card and the command A e.g. a polling command or a read write command from the application B interrupts the execution of the command A the authentication may be forcibly reset although depending on the type of the command A . In such a case if the command B is designed so as to require the completion of the authentication process the execution of the command B fails.

According to the present embodiment as noted above the middleware provides the applications with the API used for acquiring and terminating an access right for one of the reader writers . Furthermore in response to the acquiring and terminating request of the access right the device driver can grant and withdraw the access right for accessing the one of the reader writers to and from the requester application . Thus from the time when the requester application receives the access right to the time when the requester application terminates the access right i.e. during a critical section the device driver can allow the execution of commands received from only the one of the applications and inhibit the execution of commands received from the applications other than the one of the applications .

Still furthermore when one of the applications gains the access right and the device driver receives a command from one of the applications other than the one of the applications the device driver places the command received from the one of applications other than the one of the applications in an execution wait mode from the time when the device driver receives the command to the time when a predetermined access right waiting timeout is reached. When the predetermined access right waiting timeout is reached the device driver sends a timeout error message to the one of applications other than the one of the applications .

The processes of granting and withdrawing the access right and the process of the access right waiting timeout are described in detail with reference to . is a schematic illustration of the processes of granting and withdrawing the access right to and from one of the applications and the process of the access right waiting timeout according to the present embodiment.

In an example shown in three applications A B and C issue command execution requests to the device driver in the following order 1 an access right acquisition command 2 a command A 3 a command A 4 a command B 5 a command B and 6 a command A 7 a command C 8 a command D 9 a command C 10 a command B and 11 an access right termination command. The commands A B C and D form a series of commands that need to be executed continuously.

In this case the application A outputs the command for acquiring an access right the access right acquisition command to the device driver before sending the first command A execution request. In addition the application A outputs the command for terminating the access right the access right termination command to the device driver after the execution of the last command D is completed. Upon receipt of the access right acquisition request the device driver grants an access right to the application A. In contrast upon receipt of the access right termination request device driver withdraws an access right granted to the application A. The device driver holds information about the access right granted to the application A and therefore the device driver can distinguish the application A from the application B or C having no access right.

In this way in a critical section from a time when the application A acquires the access right to a time when the application A terminates the access right the device driver can inhibit the execution of the commands sent from the applications B and C and allows only the series of commands A B C and D sent from the application A to be executed continuously. In addition after the access right is terminated commands are executed in the order in which the commands are received. As a result in the example shown in the commands are executed in the following order the command A the command B the command C the command D the command A the command B the command A the command C and the command B .

Furthermore in the example shown in during execution of the command B received from the application A the executions of the command A received from the application B and the command A received from the application C are placed in the access right wait mode. At that time the device driver starts counting an elapsed time from the time the device driver has received the execution requests of the command A and A . If the access right waiting timeout specified by the application B or C is reached before the execution of the command B is completed the device driver sends an access right waiting timeout error message to the application B or C. In this way the device driver can limit the waiting times of the applications B and C thus preventing overload of the one of the reader writers caused by reception of too many command execution requests.

The command processing of granting and terminating the access right and the processing of the access right waiting timeout are described in more detail next with reference to . is a sequence diagram illustrating a particular example of the command processing of granting and terminating the access right in the information processing apparatus according to the present embodiment.

As shown in like the example shown in one of the reader writers is opened for the applications A B and C steps S through S .

Subsequently the application A requests the device driver to grant an access right to itself via the middleware . Thus the application A acquires the access right step S . After the device driver grants the access right to the application A the device driver cannot execute the commands received from the applications B and C. When the access right is granted to the application A or is terminated the middleware only functions as an interface between the device driver and each of the applications A to C. When the API is invoked by one of the applications the middleware outputs a command for acquiring or terminating the access right to the device driver . Upon receipt of the access right acquisition request or access right termination request the device driver determines whether it can grant or terminate the access right so as to grant or terminate the access right. The device driver then sends the result of granting or terminating the access right to the application via the middleware .

Subsequently the application A having the granted access right sends the execution request of the series of the commands A B and C to the device driver via the middleware steps S S and S . The device driver immediately executes these commands A B and C and transmits these commands A B and C to the IC card via the one of the reader writers steps S S and S . Thereafter the device driver receives response messages A B and C from the IC card via the one of the reader writers and outputs these response messages A B and C to the application A steps S S and S .

After the execution of the series of the commands A B and C is completed step S the application A requests the device driver to terminate the access right via the middleware . Thus the access right is terminated step S . After the access right is terminated the device driver can execute the commands sent from the applications B and C.

In the above described critical section from a time when the application acquires the access right to a time when the application terminates the access right steps S through S the application A has an exclusive access right. Accordingly even when the application B sends the execution requests of the commands A and C to the device driver steps S and S the device driver places the execution of the command A and C in an access right wait mode and puts the application B on standby.

When the access right waiting timeout that is set for the application B and that is started when the command A that is requested to be executed first is received step S is reached step S the above described access right has not been terminated yet. Accordingly the device driver sends an access right waiting timeout error on the command A to the application B step S .

In contrast when the access right waiting timeout that is set for the application B and that is started when the command C that is requested to be executed next is received step S is reached the above described access right has already been terminated step S . Accordingly the device driver executes the command C so as to transmit the command C to the IC card via the one of the reader writers step S . Subsequently the device driver receives a response message C for the command C from the IC card via the one of the reader writers and outputs the response message C to the application B step S .

In addition after the access right granted to the application A is terminated the application C can acquire the access right for accessing the one of the reader writers step S . Thus in a critical section from a time when the application C acquires the access right to a time when the application C terminates the access right steps S through S the device driver executes only the command D received from the application C having the access right steps S and S and places the command D received from the application A in an access right wait mode steps S through S . Subsequently when the access right waiting timeout that is set for the application A and that is started when the command D is received step S is reached step S the device driver sends an access right waiting timeout error on the command D to the application A step S .

As noted above in the command processing according to the present embodiment an exclusive access right to one of the reader writers is granted to one of the applications when the one of the applications requests the access right. Thus command interruption performed by the applications other than the one of the applications can be inhibited and therefore the execution of a series of commands that need to be continuously executed can be reliably and successfully performed. Consequently the one of the applications can be reliably operated.

In addition by providing the access right waiting timeout capability the waiting time interval of one of the applications can be limited to less than or equal to a predetermined time period when one of the applications other than the one of the applications holds the access right. Accordingly too many processes requested from a plurality of the applications are not concentrated on one of the reader writers and therefore overload of the information processing apparatus can be prevented. Furthermore when one of the applications receives an access right waiting timeout error message the one of the applications can retry the execution of the same command or display that information on a monitor of the information processing apparatus .

So far the information processing apparatus and the method for mediating a plurality of the applications for the IC card in the information processing apparatus according to the present embodiment have been described in detail. According to the present embodiment the middleware and the device driver for the IC card can suitably provide a multi application environment. Therefore even when a plurality of the applications for the IC card concurrently operate in the information processing apparatus connected to one of the reader writers for the IC card and furthermore a plurality of the applications operate in the information processing apparatus having a plurality of the reader writers connected thereto the applications can operate without any problem.

That is since the device driver sequentially processes command execution requests sent from a plurality of the applications one of the reader writers can be used by the plurality of the applications at the same time and therefore the functions of the plurality of the applications can be effective at the same time. For example when one of the applications displays the balance information about electronic money and the shopping log information in the IC card one of the applications other than the one of the applications can display information about a transit fare payment log in the IC card .

Furthermore even when a plurality of the reader writers are connected to the information processing apparatus the middleware can appropriately allocate accesses from the applications to the reader writers . Thus the data accesses are not concentrated to any one of the reader writers and therefore processing efficiencies of the plurality of applications that concurrently operate can be increased.

Still furthermore the software used for accessing the IC card has a three tier structure that is the applications the middleware and the device driver . Accordingly even when the structure of a command for the reader writers is modified the middleware and the device driver can compensate for the change in the reader writers . Consequently the existing applications can operate without any modifications.

Still furthermore even when the IC card including only the OS and including no applications for the IC card or the IC card that does not allow predetermined IC card commands to be modified afterward is used the information processing apparatus can appropriately provide a multi application environment.

While the present invention has been described with reference to exemplary embodiments the present invention is not limited thereto. It should be understood by those skilled in the art that various modifications combinations sub combinations and alterations may occur depending on design requirements and other factors insofar as they are within the scope of the appended claims or the equivalents thereof.

For example while the above described exemplary embodiment has been described with reference to the information processing apparatus having a plurality of the reader writers connected thereto the present invention is not limited thereto. For example only one of the reader writers may be connected to the information processing apparatus .

In addition while the above described exemplary embodiment has been described with reference to the noncontact IC card and the reader writers communicating with the IC card in a contactless manner the present invention is not limited thereto. For example the IC card may be a contact IC card e.g. a magnetic card and the reader writers that read and write information from and to the IC card in a contact manner may be employed. Furthermore an information processing apparatus including the above described capability of the IC card may be embedded in a variety of units such as mobile device e.g. a cell phone and a wrist watch. Alternatively the information processing apparatus including the above described capability of the IC card may be attached to a variety of products a sales promotion doll accessories and leaflets so that these products and goods may be used in place of the IC card . That is these products and goods are within the scope of the IC cards according to the present invention.

The present document contains subject matter related to Japanese Patent Application JP 2006 104308 filed in the Japanese Patent Office on Apr. 5 2006 the entire contents of which are incorporated by reference.

