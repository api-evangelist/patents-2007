---

title: In-line processing of standardized text values
abstract: A method of in-line processing of standardized text values. A standardization utility defines multiple standardization rules in response to user input from a graphical user interface (GUI). The standardization rules correspond to text and integer data in a database. The standardization utility generates a JAVA class template for each data model object that requires standardization. The standardization utility generates public methods for each data attribute that corresponds to a standardization rule and converts the public methods into JAVA code. The standardization utility compiles the JAVA code into multiple helper classes and stores the helper classes within a JAVA Archive (JAR) file in the library path of applications that input text into the database. The standardization utility assigns a tracking number to each new helper class. The standardization utility loads the helper classes into JAVA Virtual Machines (JVMs) that are accessible to applications capable of inputting data into the database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08136087&OS=08136087&RS=08136087
owner: International Business Machines Corporation
number: 08136087
owner_city: Armonk
owner_country: US
publication_date: 20070724
---
The present invention relates in general to data processing systems and in particular to using computers to merge data from multiple sources into a common database.

A data warehouse is a central repository of multiple databases that include the historical data of a company or organization. Data warehouses contain large amounts of data that may be utilized to support management decisions. A data analyst may utilize a data warehouse to perform complex queries and analysis without slowing down other operational systems. A data warehouse is thus optimized for reporting and analysis to minimize query response times. Databases within a data warehouse therefore include data in a consistent standardized format. Standardization is the process of checking and converting text and or integer values in a data attribute to a predefined format or a set of predefined values. Before the data of a standardized attribute is stored in a common repository the value in the attribute is compared against a set of rules that govern how the data must be formatted and if necessary the data is converted to fit the format defined by the rules.

Tools and code that perform standardization of values being entered into a database are typically configured to be aware of multiple data attributes and to transform one record at a time to a standardized value based on the dependencies between component values. The sum of serialized standardization operations can add significant time to data loading operations. Also data that is standardized with Extract Transform Load ETL tools which are typically located outside an application can create maintenance problems if attempts are made to standardize values at multiple locations since the standardization checkpoints at each location can get out of synch. Furthermore it may be problematic to share a standardization rule set among multiple applications in a data warehousing environment. When the standardization rules change older previously stored data must be updated. Conventional ETL tools also increase processing overhead by applying standardization rules to all incoming data regardless of whether or not the data originated from a trusted source.

Disclosed are a method system and computer program product for in line processing of standardized text values. A standardization utility defines multiple standardization rules in response to user input from a graphical user interface GUI . The standardization rules correspond to valid values for a model object attribute for either text or integer values stored in a public database. If no standardization rules are defined for a model object the standardization utility generates a boiler plate JAVA class template for that model object that performs no standardization checks for any attributes JAVA is a registered trademark of Oracle . The methods in the boiler plate JAVA class are essentially empty methods. If standardization rules are defined for a model object the standardization utility generates a JAVA class template for that model object where the methods in the JAVA class apply standardization logic. Each method in the JAVA class template corresponds to a setter method in the main model object for which a helper class was generated. The standardization utility compiles the Java code into multiple helper classes and stores the helper classes within a JAVA Archive JAR file in the library path of one or more applications that input text into the database. The standardization utility assigns a tracking number to each new helper class to identify the specific instance of the helper class and which version of the standardization rules each particular helper class implements. The standardization utility loads the helper classes into JAVA Virtual Machines JVMs that are accessible to applications capable of applying the standardization rules automatically when inputting text data into the database.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The present invention provides a method system and computer program product for performing in line processing of standardized text values when merging data from multiple sources into a common database.

With reference now to there is depicted a block diagram of an exemplary computer with which the present invention may be utilized. Computer includes processor unit that is coupled to system bus . Video adapter which drives supports display is also coupled to system bus . System bus is coupled via bus bridge to Input Output I O bus . I O interface is coupled to I O bus . I O interface affords communication with various I O devices including keyboard mouse Compact Disk Read Only Memory CD ROM drive and flash memory drive . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Computer is able to communicate with server via network using network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as a Local Area Network LAN an Ethernet or a Virtual Private Network VPN . In one embodiment server is configured similarly to computer .

Hard drive interface is also coupled to system bus . Hard drive interface interfaces with hard drive . In one embodiment hard drive populates system memory which is also coupled to system bus . System memory is defined as a lowest level of volatile memory in computer . This volatile memory may include additional higher levels of volatile memory not shown including but not limited to cache memory registers and buffers. Data that populates system memory includes Operating System OS application programs and database . Database includes multiple records of standardized business data. Database is illustrated in which is discussed below. In another embodiment database may instead be stored in server .

OS includes shell for providing transparent user access to resources such as application programs . Generally shell as it is called in UNIX is a program that provides an interpreter and an interface between the user and the operating system. Shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. kernel for processing. As depicted OS also includes graphical user interface GUI and kernel which includes lower levels of functionality for OS . Kernel provides essential services required by other parts of OS and application programs . The services provided by kernel include memory management process and task management disk management and I O device management.

Application programs include browser and standardization utility . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. computer to send and receive network messages to the Internet. Computer may utilize HyperText Transfer Protocol HTTP messaging to enable communication with server . Standardization utility performs the functions illustrated in which is discussed below. In one embodiment standardization utility is a code generation program such as a Tivoli Application Dependency Discovery Manager TADDM that is called via an Application Programming Interface API . Standardization utility is capable of writing JAVA classes into a file system that is accessible to multiple users such as a Configuration Management Database CMDB .

Within the descriptions of the figures similar elements are provided similar names and reference numerals as those of the previous figure s . Where a later figure utilizes the element in a different context or with different functionality the element is provided a different leading numeral representative of the figure number e.g. 1xx for and 2xx for . The specific numerals assigned to the elements are provided solely to aid in the description and not meant to imply any limitations structural or functional on the invention.

With reference now to there is depicted an exemplary standardized database according to an embodiment of the present invention. As shown database includes computer table and operating system table . Database also includes software component table which corresponds to operating system table . According to the illustrative embodiment database includes a table for every model object in a data model e.g. the Tivoli common data model . The data standardization method is illustrated in which is discussed below.

Turning now to there is illustrated a high level logical flowchart of an exemplary method of in line processing of standardized text values according to an embodiment of the invention. The process begins at block in response to a user of computer entering a command into GUI . A user enters one or more standardization rules via GUI as depicted in block . For example a user defines the standardization rules applied to an attribute on a model object i.e. JAVA class . The user selects a model object and an attribute on the selected model object. The user subsequently defines one or more rules regarding what the data in the selected attribute should look like. After defining rules for one attribute the user can define rules for another attribute and or model object.

As utilized herein a standardization rule refers to a rule that can be defined for each JAVA class in a data model and or for each attribute in a JAVA class. Standardization rules are fully customizable by users of computer . Standardization utility assigns the standardization role to the data objects themselves which execute the standardization rules inline as if the rules were hard coded into the base code of the system i.e. built in to all data handling functions . The present invention thus makes the centralization and externalization of standardization logic unnecessary. Standardization rules may be simple such as a rule listing a one to one conversion of one value to another e.g. a rule that coverts attribute value International Business Machines to IBM . Standardization rules may also be complex such as a rule that utilizes regular expressions and multiple attributes to determine the final value of an attribute e.g. a rule that converts the attribute values I B M and Lotus Notes to the single attribute value IBM .

At block standardization utility determines whether a user has exited GUI . If the user has not exited GUI the process returns to block and the user enters additional standardization rules. Once the user exits GUI standardization utility generates a standardization JAVA helper class i.e. a Java class template for each data model object that requires attribute standardization as shown in block . In one embodiment the name of each new JAVA class closely matches the name of the data model class for which the user defined standardization rules. For example if a model object is called ComputerSystem then the helper class that standardization utility automatically generates may be called ComputerSystemStd or ComputerSystemStdHelper . Each method in the JAVA class template corresponds to a setter method in the main model object for which a helper class was generated. As utilized herein a setter method refers to code that enables one or more values to be placed in a model object.

Standardization utility generates public methods i.e. methods accessible to all applications and or users for each attribute for which the user defined standardization rules as depicted in block . In one embodiment standardization utility names the public methods using naming rules consistent with the corresponding data model object. Due to method naming conventions in a data model standardization utility names attributes that correspond to the data model by pre pending the name of the attribute with the action that the method performs. For example a model object that contains an attribute called attrOne has methods named setAttrOne getAttrOne and hasAttrOne .

Standardization utility converts standardization rules from database into JAVA code as shown in block . In another embodiment standardization utility may instead use a programming language other than JAVA to convert standardization rules into a type of code other than JAVA code. According to the illustrative embodiment standardization utility generates a method called standardizeAttrOne from the standardization rules stored within database . The conversion process is efficient because the rule definitions are stored within database in a form that is very close to JAVA code. Standardization utility adds multiple if then clauses to the body of a method if multiple rules exist for a single attribute. Since standardization is performed on data values when the data is initially set into the corresponding data objects the performance overhead associated with standardization is minimized.

Standardization utility assigns a tracking number to each new helper class as depicted in block . Each tracking number identifies the version of a generated helper class. In one embodiment each tracking number is a static variable in a class definition that includes a randomly generated integer value. APIs within each helper class enable the helper classes to access the tracking numbers. Each data model class sets a corresponding tracking number as an attribute in the data of the class.

Once standardization utility generates all of the helper classes standardization utility compiles the helper classes using a JAVA compiler stores the compiled helper classes in a JAVA Archive JAR file and copies the JAR file into the library paths of installed applications as shown in block . The standardization rules are thus compiled into easily shareable components that can be used by multiple applications regardless of the particular data model typically used by an application. In one embodiment changes to the helper classes are made on server and portal GUIs within each computer in network automatically detect changes to the helper classes. JAVA Web Start GUIs automatically pick up a new JAR file when standardization utility establishes a new connection and or downloads a new helper JAR file.

Server checks the latest tracking number against the incoming tracking numbers of new and or updated data objects. Standardization utility thus replaces older versions of the helper classes as needed based on verification of the tracking number that is passed inside each model object on server . Standardization utility loads the new and or modified class files into one or more JAVA Virtual Machines JVMs that have access to the corresponding data model objects as depicted in block and the process terminates at block . Data that was previously stored using old i.e. obsolete standardization rules is automatically standardized upon retrieval from database thereby making fix up logic unnecessary.

In one embodiment JVMs that utilize the data model objects corresponding to the new and or modified class files are re started in order to load the new class files. In another embodiment the JVMs utilize dynamic class loading and thus do not require a re start. The main data model classes such as ComputerSystem are already coded to call their helper classes during standardization. Users of computer may selectively turn off standardization on the fly on a case by case basis e.g. when data is received from trusted applications . Standardization utility may also determine automatically whether or not standardization should take place for particular input data based on the source of the input data based on a Boolean value that corresponds to whether or not a source is a trusted source. As long as an application understands the correct helper API to call the application can apply the corresponding standardization rule.

The present invention thus provides an improved method of in line processing of standardized text values. Standardization utility defines multiple standardization rules in response to user input from GUI . The standardization rules correspond to text data integer data and or other data types stored in database . Standardization utility generates a boiler plate JAVA class template for each data model object that requires standardization. The standardization utility generates multiple public methods for each data attribute that corresponds to a standardization rule and converts the public methods into JAVA code. Standardization utility compiles the Java code into multiple helper classes and stores the helper classes within a JAR file in the library path of one or more applications that input text into database . Standardization utility assigns a tracking number to each new helper class. Standardization utility loads the helper classes into JVMs that are accessible to applications capable of inputting text data into database . The present invention also applies to probabilistic standardization techniques as long as the probabilistic standardization rules are compiled into one or more helper classes.

It is understood that the use herein of specific names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology and associated functionality utilized to describe the above devices utility etc. without limitation.

In the flow chart above while the process steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

While an illustrative embodiment of the present invention has been described in the context of a fully functional computer system with installed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution. Examples of the types of media include recordable type media such as thumb drives floppy disks hard drives CD ROMs DVDs and transmission type media such as digital and analog communication links.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

