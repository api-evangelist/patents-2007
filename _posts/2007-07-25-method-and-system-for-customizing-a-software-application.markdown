---

title: Method and system for customizing a software application
abstract: The technique introduced here includes a uniform customization system, which can support the customization of multiple software applications simultaneously. Customization data of a software application can be developed separately from the development of the application. The customization data is then stored, via the uniform customization system, into a customization storage. When the software application is executed, the software application retrieves, from the storage, the values of the customization data via the uniform customization system. The uniform customization system outputs the retrieved customization data indicating the current working context of a user, which may be used by the user to locate customization options in a customization user interface of the software application, for customizing functions performed in the current working context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209675&OS=08209675&RS=08209675
owner: SAP AG
number: 08209675
owner_city: Walldorf
owner_country: DE
publication_date: 20070725
---
This invention relates to software application customization. More specifically this invention relates to a method and system of facilitating a user to quickly locate customization options in a user interface for customizing a software application.

Today computer already becomes the standard equipment in office. Software vendors have found it increasingly important to improve user productivity by enhancing software usability. One important aspect of enhancing software usability is to give users more flexible customization options so that the application can be configured due to the user s specific needs.

In known art a software application such as an enterprise application can be customized via a centralized customization user interface. is an example of a centralized customization user interface. As shown the user interface includes customization tree containing a number of customization categories and a number of customization entries . A customization category can contain one or more other customization categories and or one or more customization entries . If a customization category is contained within another customization category the contained customization category can also be called a subcategory. Each customization entry is associated with a value range within which a value can be specified to customize the behavior of the software application.

Thus centralized customization user interface organizes all customization entries in one place. If a user has knowledge about the customization entry the user can quickly locate the customization entry by navigating through the category and subcategories containing the customization entry. But it requires the user to have an overall understanding of the functionalities provided by the software application and their relationship with customization entries. It might take an inexperienced user a lot of time to explore the customization tree to find the right customization entry. For enterprise software applications such as enterprise resource planning ERP and customer relationship management CRM customization options are even more complicated. Therefore a technique to facilitate an inexperienced user to quickly locate customization options to customize a software application is desired.

A technique that provides a method and system for customizing a software application. The method includes executing a function of the software application to be customized. The method further includes in response to executing the function of the software application outputting information indicating how to locate a customization entry associated with the function in a customization user interface of the software application.

Other aspects of the invention will be apparent from the accompanying figures and from the detailed description which follows.

Described herein are methods and systems for customizing a software application. In the following description numerous specific details are set forth. However it is understood that embodiments may be practiced without these specific details. For example well known equivalent components may be used in place of those described herein. In other instances well known components have not been shown in detail in order not to obscure the understanding of this description.

The technique introduced here includes a uniform customization system which can support the customization of multiple software applications simultaneously. Customization data of a software application can be developed separately from the development of the software application. The customization data is then stored via the uniform customization system into a customization storage. When the software application is executed the software application retrieves from the storage the values of the customization data via the uniform customization system. The uniform customization system outputs the retrieved customization data to indicate the current working context of a user which may be used by the user to locate customization options in a customization user interface of the software application for customizing functions performed in the current working context.

This solution helps the end users especially the inexperienced or casual users quickly and correctly find the right customization entries to adjust for desired application behavior. The essential part of the solution is the Runtime Customization Evaluation RCE mechanism. Customization entries combined together determine the application behavior during run time. Application program evaluates the value of customization entries to determine how it behaves. RCE is a procedure in which multiple customization entries are evaluated and the evaluation procedure is recorded. Based on the log of records user can easily know which customization entries are involved in the current working context and adjust them by directly navigating to the customization environment.

Customization evaluation log is written by the framework automatically. The end user is given the whole picture of behaviors determination automatically based on the RTTI Run Time Type Identification technologies.

Referring to customization developer is responsible for implementing structures of customization information the data storage and access of customization entries as part of customization implementation . These structures focus on storing and retrieving customization information in the specific storage medium which may be a file database or Windows registry. Application developer is interested in getting customization values. Their program needs to retrieve values of specific customization entry in order to determine the application behavior as part of the runtime unit . Application developers are less concerned about the underlying storage medium of customization information. User interface developer is responsible for developing the customization UI. Developers with this role implement the layout of customization UI as part of configuration UI . They have the most exact knowledge where to set a customization entry. Such location information may be stored together with the target customization entry.

Referring to according to one embodiment system includes but is not limited to a customization framework application run time unit application configuration time unit and customization implementation unit . Units interact with the framework . These three components e.g. application run time unit application configuration time unit and customization implementation unit may be developed and maintained by customization developers application developers and UI developers respectively and or independently for example using object oriented programming techniques. There are two roles of end users a normal user and a customization user . Normal user uses the software to do their daily job. Yet customization user performs the customization. Normal user interacts with application run time unit while the customization user interacts with the configuration UI unit . Note that these two roles might sometimes be the same user since in many circumstances normal users have to do the customization themselves.

When a customization user adjusts customization entry different components are involved as shown in . At runtime as shown in application s process of user command execution is affected by multiple customization entries. During the command execution values of these entries are retrieved from backend storage. Referring back to the customization UI information is stored together with customization entry value. Now the UI information is retrieved as well. According to one embodiment the information of customization entry and corresponding UI is written to a log. From the log user can easily know which customization entries affect current application s behavior and where to adjust the entries. In one embodiment the retrieval of customization entry value is performed via customization framework . Therefore all customization evaluation activities are recorded by the framework automatically. Further the customization framework instead of the application is responsible for log writing. So the application developer can focus on the implementation of business logic. Note that some or all of the components or operations as shown in may be implemented or performed by processing logic which may includes software hardware or a combination of both.

The enterprise application includes an application user interface module and an application module . The application module provides one or more functions e.g. generating a monthly sales report printing a document sending an email etc. Some of the functions may be customized according to the technique introduced here. The application user interface module receives requests from a user to execute one or more of the functions provided by the application module. In one embodiment the application user interface module includes a graphical user interface GUI . The enterprise application further includes a customization user interface module . In one embodiment the customization user interface module can be implemented as a centralized customization user interface such as illustrated in . As illustrated in the customization user interface module can provide a customization tree containing a number of customization categories and a number of customization entries . As introduced above a customization category can contain one or more other customization categories and or one or more customization entries . Each customization entry is associated with a value range within which a value can be specified to customize the behavior of the enterprise application .

In one embodiment the customization user interface module receives user inputs to change the value of a customization entry. Upon receiving the inputs the customization user interface module sends a customization request to the uniform customization system . In one embodiment the customization request includes the identification ID of the customization entry and the new value to be set for the entry. The request can be sent to the uniform customization system via messaging or by calling an application programming interface API provided by the uniform customization system . Upon receiving the request the uniform customization system searches the customization entry in the customization storage and sets the new value to the customization entry. Details of the process are further explained below.

Note that the enterprise application the uniform customization system and the customization storage can be deployed on a same processing system a server for example or on different processing systems. The different processing system can run different operating systems.

In addition according to one embodiment uniform customization system includes a logging unit to output access information of customized entries during runtime to a log to allow a user to evaluate the processes of utilizing customization entries at runtime. In one embodiment the log is stored in a temporary memory area e.g. memory as shown in a file or a database.

Customization data can be developed while a developer is developing the customization user interface module . For example when the developer designs the customization user interface the developer determines what customization categories and customization entries are needed and what value ranges each customization entry should have according to for example the business requirement. The developer can also assign a default value for each of the customization entries. Then the customization data can be entered into the customization storage . Thus one advantage provided by the uniform customization system is that the development of a software application and its customization can be carried out by different developers without interference.

The uniform customization system also includes a customization module initializer and a customization controller . In one embodiment the customization module initializer receives a connection request or an initialization request from an application such as the enterprise application . Upon receiving the request the customization module initializer creates an instance of the customization controller which is assigned to process customization requests from the application. Thus for example if two applications are connected to the uniform customization system two customization controller instances would be created to serve the two applications respectively.

After an instance of the customization controller is created the customization user interface module uses the created customization controller instance to retrieve or set values of entries stored in the customization storage . For example a customization entry may be whether or not to automatically create a monthly sales report . The value range for the entry is yes or no . If a user chooses to set the customization entry as yes via the customization user interface module the customization controller instance will be called by the customization user interface module to search the customization entry in the customization storage and set the value of the customization entry as yes .

At block the application module receives a command from the application user interface module . The command may be for example a request to perform a function e.g. sending an email printing a document etc. provided by the application module . At block the application module determines the customization entries needed to execute the command. In one embodiment the values of these customization entries affect how the function is performed. For example suppose the function is to print a document and a customization entry is using double side printing if the value of the customization entry using double side printing is yes the document would be printed on both sides of the paper. Thus at block the application module sends a request to the instance of the customization controller to obtain the value of the first determined customization entry by using the handle or reference of the instance.

At block the instance of the customization controller receives the request to retrieve the value of the first determined customization entry. At block the customization controller instance retrieves from the customization storage the value of the customization entry and information regarding how to locate the customization entry in the application s customization user interface. In one embodiment such information regarding how to locate the customization entry in the application s customization user interface is part of the customization data created by a customization developer and is stored together with the customization entry in the customization storage by the customization data setup module .

At block the instance of the customization controller outputs the information of how to locate the customization entry in the application s customization user interface into a log file. Other information outputted into the log file may include the name value and ID of the customization entry. At block the instance sends the value of the customization entry back to the application module.

At block the application module receives the value of the first determined customization entry. At block the application module and the instance of the customization controller iterate the blocks until values of all customization entries needed to execute the command are obtained from the uniform customization system . At block based on the values the command is executed.

At block the customization user interface module receives a request to set a customization entry s value. This may be triggered by a user s input via the user interface. For example the user may check a checkbox to choose an option. At block the customization user interface module sends the customization entry s ID and value to the instance of the customization controller . At block the customization user interface module waits for another customization input from the user. At block the instance of the customization controller receives the customization entry s value and ID. At block the instance searches the customization entry by the received ID and sets the value.

At block the user runs the function to be customized. As discussed in the uniform customization system outputs in a log file the customization entries and information of how to locate them in the user interface whose values are retrieved for running the function. At block the user examines the log file to determine the customization entries and information of how to locate them in the user interface.

At block according to the information the user can navigate to the customization entry or entries in the centralized user interface such as shown in FIG. . At block the user sets new values for the customization entries to customize the function. Thus even though a user is not familiar with the customization user interface and does not know which customization entries are needed to customize a function the user can quickly identify and locate these customization entries by using the method and system introduced above. Other operations may also be performed.

Referring back to the work area of a customization developer is in the customization implementation unit . Customization developers focus on the structure of customization information and how to store retrieve data to from specific storage type. How to display the customization data and how to evaluate customization entries value should be transparent from the customization developers for example using object oriented programming techniques. What customization developer need is a standardized way to represent structural customization data.

For example in a sales and distribution management system a user needs to customize different components such as sales order processing delivery processing and transportation processing components. Here sales and distribution management sales order delivery transportation are each represented as a corresponding customization category class in an object oriented programming environment which implements the standard interface CustomizationCategory as shown in . The last three categories are sub categories of the first one. The implementation is as following code shows.

The customization category SalesOrderCategory contains several customization entries as shown in . One of them is Delivery Automatic Creation which determines whether the delivery document is created automatically after sales order is created.

There is no fixed rule about the granularity of a category and how to organize category trees. The customization developers define them according to context and experience. The access to categories and entries is centrally controlled by the SDCustomizationController class which is based on a base class as shown in and illustrated as following pseudo code as an example.

Referring to with respect to ArrayListSDCustomizationController.getAllCategories this method will return all customization category objects under the control of SDCustomizationController namely an instance of class SDManagementCategory.

Customization entry is evaluated during run time by the program written by an application developer. For example the following method

The customization value is used by an application to determine the application behavior or the flow of business process. The following method

returns all entries of SalesOrderCategory. One of them is the instance of class DeliveryAutomaticCreation. In order to get the data type of customization values the following method is called.

This method returns the instance Boolean.Class. So the valid data type is Boolean. For the legal value range the developer needs to call

This method returns an instance of class BooleanValueRange. This determines that the valid values of DeliveryAutomaticCreation are either true or false. If the value is true the delivery order will be created automatically after the sales order is created. Otherwise the creation of sales order would not trigger delivery creation.

The content of the tree of all customization categories and entries is defined by customization developer. Customization developer defines the tree structure by implementing the getAllSubCategories and getAllEntries method with his her own logic. Possible values of entries are defined by implementing the CustomizationValueRange interface. Value setting and retrieval are done by the storage medium specific implementation of method setCustomizationValue and getCustomizationValue of interface CustomizationController. The customization developer s implementation of interface CustomizationController is the central access point for a UI developer and an application developer to carry out customization work.

The UI developer gets the instance of CustomizationController via CustomizaitonAccessor. This class is part of the customization framework and is shown in the center of . Before any customization activity can be performed a UI developer calls the method of

An application developer instantiates CustomizationController via CustomizaitonAccessor and handles CustomizationCategory CustomizationEntry CustomizationValueRange in a similar way as a UI developer. But different from the UI developer the application developer does not call the setCustomizaitonValue method because the application developer does not need to set any customization entry value.

The customization value evaluation may be performed within the scope of RCE transaction which is the essential part of this solution. RCE transaction also referred to as RCE transaction to transaction is a procedure including a series of customization evaluation customization value retrieval . In this procedure the application run time evaluates specific customization entries which are relevant to current working context. At the same time those value retrieval activities are recorded into a transaction log by the customization framework. An end user would be interested in this log when the end user needs to understand which customization entries are affecting the behavior of the application in current context. Since the corresponding customization UI information is stored together with each customization entry the UI information is also included in the transaction log. It would be quite easy for end user to navigate to the correct environment for setting that customization entry.

The granularity of transaction is decided by an application developer according to requirement and context. In order to start an RCE transaction the method of

With such a log at hand a user can easily understand what customization entries result in the current application behavior. When a transaction is finished the method

Referring to the last four records since 18 08 12 of the log demonstrate a business process determination procedure when software user create sales order the value customization entry DeliveryAutoCreation is read to determine whether subsequent delivery should be generated.

Thus with the techniques described above an application end user can easily find the customization entry in current context without a complete knowledge of the customization info structure. In addition the log information reveals the customization entries that influence application behavior and business process. This helps software end users better understand the application. This provides an easy to use and flexible framework to software vendors. Further a customization developer UI developer and application developer can concentrate on their own tasks. For example a reader of a customization entry does not need to know where the entry is physically stored or how it is set via a user interface. The log which enables the end user s easy customization is automatically and precisely generated. An application developer does not need to know about the log writing.

The bus system in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a form of Peripheral Component Interconnect PCI bus HyperTransport or industry standard architecture ISA bus small computer system interface SCSI bus universal serial bus USB or Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processors are the central processing units CPUs of the processing system and thus control the overall operation of processing system. In certain embodiments the processors accomplish this by executing software stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs field programmable gate arrays FPGAs programmable logic devices PLDs or the like or a combination of such devices.

The processing system also includes memory coupled to the bus system . The memory represents any form of random access memory RAM read only memory ROM flash memory or a combination thereof. Memory stores among other things the operating system of the processing system.

Also connected to the processors through the bus system are a mass storage device a storage adapter and a network adapter . Mass storage device may be or include any conventional medium for storing large quantities of data in a non volatile manner such as one or more disks. The storage adapter allows the processing system to access external storage systems. The network adapter provides the processing system with the ability to communicate with remote devices and may be for example an Ethernet adapter or a Fibre Channel adapter. Memory and mass storage device store software instructions and or data which may include instructions and or data used to implement the techniques introduced here.

Thus a method and system for customizing a software application have been described. Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine executable instructions that cause a machine that executes these instructions to perform certain functions. In this context a machine may be a machine that converts intermediate form or abstract instructions into processor specific instructions e.g. an abstract execution environment such as a virtual machine e.g. a Java Virtual Machine an interpreter a Common Language Runtime a high level language virtual machine etc. and or electronic circuitry disposed on a semiconductor chip e.g. logic circuitry implemented with transistors designed to execute instructions such as a general purpose processor and or a special purpose processor. Processes taught by the discussion above may also be performed by in the alternative to a machine or in combination with a machine electronic circuitry designed to perform the processes or a portion thereof without the execution of program code.

It is believed that processes taught by the discussion above may also be described in source level program code in various object orientated or non object orientated computer programming languages e.g. Java C VB Python C C J APL Cobol ABAP Fortran Pascal Perl etc. supported by various software development frameworks e.g. Microsoft Corporation s .NET Mono Java Oracle Corporation s Fusion etc. . The source level program code may be converted into an intermediate form of program code such as Java byte code Microsoft Intermediate Language etc. that is understandable to an abstract execution environment e.g. a Java Virtual Machine a Common Language Runtime a high level language virtual machine an interpreter etc. or a more specific form of program code that is targeted for a specific processor.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

 Logic as is used herein may include for example software hardware and or combinations of hardware and software.

Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

