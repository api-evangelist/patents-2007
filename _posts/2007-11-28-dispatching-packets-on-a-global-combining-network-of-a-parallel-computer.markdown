---

title: Dispatching packets on a global combining network of a parallel computer
abstract: Methods, apparatus, and products are disclosed for dispatching packets on a global combining network of a parallel computer comprising a plurality of nodes connected for data communications using the network capable of performing collective operations and point to point operations that include: receiving, by an origin system messaging module on an origin node from an origin application messaging module on the origin node, a storage identifier and an operation identifier, the storage identifier specifying storage containing an application message for transmission to a target node, and the operation identifier specifying a message passing operation; packetizing, by the origin system messaging module, the application message into network packets for transmission to the target node, each network packet specifying the operation identifier and an operation type for the message passing operation specified by the operation identifier; and transmitting, by the origin system messaging module, the network packets to the target node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984450&OS=07984450&RS=07984450
owner: International Business Machines Corporation
number: 07984450
owner_city: Armonk
owner_country: US
publication_date: 20071128
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for dispatching packets on a global combining network of a parallel computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost. Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. A torus network lends itself to point to point operations. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers. A tree network provides high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather.

The software used to implement message passing among compute nodes typically is divided into two messaging layers an application messaging layer and a system messaging layer. The application messaging layer exposes system independent software functionality to a parallel algorithm through an application programming interface API . The application messaging layer may be implemented according to for example the Message Passing Interface MPI family of specifications promulgated by the MPI Forum the Parallel Virtual Machine PVM specifications developed by the University of Tennessee Oak Ridge National Laboratory and Emory University or the Aggregate Remote Memory Copy Interface ARMCI platform. The system messaging layer provides system specific software and hardware functionality to implement messaging passing between compute nodes by exposing a system specific API to the application messaging layer. In such a manner parallel applications may be written independently of the system on which the application are executed because the parallel applications make system independent function calls to the application messaging layer which in turn makes system specific function calls into the system messaging layer. In the current art the application messaging layer typically supports only a single messaging passing implementation at any given time. For example the application messaging layer may support messaging passing implemented according to the MPI or PVM during any given time period but not both MPI and PVM concurrently.

Methods apparatus and products are disclosed for dispatching packets on a global combining network of a parallel computer the parallel computer comprising a plurality of compute nodes the compute nodes connected for data communications using the global combining network the global combining network capable of performing collective operations and point to point operations that include receiving by an origin system messaging module on an origin compute node from an origin application messaging module on the origin compute node a storage identifier and an operation identifier the storage identifier specifying application storage containing an application message for transmission to at least one target compute node and the operation identifier specifying a message passing operation to be performed by the origin application messaging module packetizing by the origin system messaging module the application message into network packets for transmission to the target compute node each network packet specifying the operation identifier and an operation type for the message passing operation specified by the operation identifier and transmitting by the origin system messaging module the network packets to the target compute node.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally to for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The parallel computer includes a plurality of compute nodes connected for data communications using the global combining network . The global combining network is capable of performing collective message passing operations and point to point message passing operations. The system of operates generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving by an origin system messaging module on an origin compute node from an origin application messaging module on the origin compute node a storage identifier and an operation identifier the storage identifier specifying application storage containing an application message for transmission to at least one target compute node and the operation identifier specifying a message passing operation to be performed by the application messaging module packetizing by the origin system messaging module the application message into network packets for transmission to the target compute node each network packet specifying the operation identifier and an operation type for the message passing operation specified by the operation identifier and transmitting by the origin system messaging module the network packets to the target compute node. Readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message.

Turning now to the perspective of the target compute node the system of also operates generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving by a target system messaging module on the target compute node one of the network packets identifying by the target system messaging module the operation type and the operation identifier for the received network packet and executing by the target system messaging module a callback function in dependence upon the operation type and the operation identifier.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of dispatching packets on a global combining network of the parallel computer according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates application storage for storing a message for transmission to another compute node.

Also stored RAM are first and second application messaging modules each libraries of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program effects data communications with other applications running on other compute nodes by calling software routines in the application messaging modules . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library the Parallel Virtual Machine PVM library and the Aggregate Remote Memory Copy Interface ARMCI library.

Also stored in RAM is a system messaging module that implements system specific protocols for communications that support messaging for application and the application messaging module . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging module . Such system specific protocols used for communications in the system messaging module are typically isolated from the application through the application messaging module thus making the interface provided to the application somewhat independent of system specific details implemented in the system messaging module . In carrying out system specific communications protocols the system messaging module typically accesses communications hardware and software useful according to the present invention such as for example DMA controller DMA engine and data communications adapters .

The system messaging module of includes a set of computer program instructions capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The system messaging module of operates generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving from one of the application messaging modules on the origin compute node a storage identifier and an operation identifier the storage identifier specifying application storage containing an application message for transmission to at least one target compute node and the operation identifier specifying a message passing operation to be performed by the application messaging module providing the identifiers packetizing the application message into network packets for transmission to the target compute node each network packet specifying the operation identifier and an operation type for the message passing operation specified by the operation identifier and transmitting the network packets to the target compute node.

Because more than one application messaging module operates concurrently on the compute node each application messaging module may register with the system messaging module . As such the system messaging module of also operates generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving from each of the application messaging modules a registration request for each of the message passing operations to be performed by the application messaging modules and providing to the application messaging modules in response to receiving the registration requests operation identifiers for each of the message passing operations.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU may initiates the DMA transfer the CPU does not execute it. In the example of the DMA engine and the DMA controller support the system messaging module and thereby the application message module for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of dispatching packets on a global combining network of a parallel computer in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in dispatching packets on a global combining network of a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of dispatching packets on a global combining network of a parallel computer in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for dispatching packets on a global combining network of a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of application installed on the origin compute node and application installed on the target compute node . Data communications between applications are effected using application messaging modules installed on each of the compute nodes . Applications may communicate messages by invoking functions of an application programming interfaces API exposed by corresponding application messaging modules . In the example of the first origin application messaging module corresponds to the first target application messaging module because both messaging module expose the same APIs to the applications . Similarly the second origin application messaging module corresponds to the second target application messaging module because both messaging module expose the same APIs to the applications . For the origin compute node s application to transmit messages to the target compute node s application the origin compute node s application typically calls a send messaging function exposed by one of the application messaging modules while the target compute node s application typically calls a receive messaging function exposed by the corresponding application messaging module on the target node . Through the APIs each application also provides match data to the corresponding application messaging modules.

Match data is the data used by the application messaging layer to match the send function called by the origin compute node s application with the receive function called by the target compute node s application so that the data specified in the send function is stored in the location specified in the receive function. Match data may be implemented for example as a data structure specifying the origin compute node s unique rank in the operational group a tag number provided by the application and a context that identifies the particular operational group of compute nodes involved in the transfer.

The exemplary communications architecture of includes an application messaging layer that provides a hardware independent messaging interface that supports messaging in the application layer . Such a messaging interface is typically utilized by applications in the application layer through a set of APIs exposed by application messaging modules. In the example of the messaging layer is composed of a first origin application messaging module and a second origin application messaging module installed on the origin compute node and a first target application messaging module and a second target application messaging module installed on the target compute node . Each of the application messaging modules exposes a different message passing API to the applications . For example the first origin application messaging module and the first target application messaging module may expose an API to applications according to the MPI family of specifications. The second origin application messaging module and the second target application messaging module may expose an API to applications according to the PVM or ARMCI specifications.

Each of the application messaging modules includes its respective set of callback functions CBFs . When an application messaging module invokes an operation in the system messaging layer the application messaging module provides the system messaging module with a pointer to a callback function for that particular operation. To return processing control to the application messaging module for data processing the system messaging module calls the callback function.

The system messaging layer in the exemplary communications architecture of implements hardware specific protocols for communications that support messaging in the application layer and the application messaging layer . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging layer . Such system specific protocols used for communications in the system messaging layer are typically isolated from the application layer through the application messaging layer thus making the interface provided to the application layer somewhat independent of system specific details implemented in the system messaging layer . In the example of the system messaging layer is composed of an origin system messaging module installed on the origin compute node and a target system messaging module installed on the target compute node .

The system messaging layer of implements system specific communications protocols using a set of messaging primitives. A messaging primitive is a data communications operation that serves as a basic building block for communicating between compute nodes. A message primitive may be implemented as for example a request to send RTS operation that send a RTS control message to a compute node a clear to send CTS operation that sends a CTS control message to a compute node a remote get operation that transfers data from one compute node to another a memory FIFO operation that transfers data from one compute node to another an acknowledgement operation that sends an acknowledgement message to a compute node and so on. Combining a number of messaging primitives together forms the basis for developing a communications protocol. In carrying out system specific communications protocols the system messaging layer typically accesses communications hardware and software useful according to the present invention such as for example DMA controllers DMA engines data communications hardware and so on.

The exemplary communications architecture of also includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware and each include a transmission stack and for storing network packets for transmission to other communications hardware through the data communications network and each include a reception stack and for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node and a DMA engine for the target compute node . The DMA engines and in the example of are illustrated in both the system messaging layer and the hardware layer . The DMA engines are shown in both the system messaging layer and the hardware layer because a DMA engine useful in embodiments of the present invention may often provide system messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engines of each include an injection FIFO buffer and for storing data descriptors for messages to be sent to other DMA engines on other compute nodes using a memory FIFO data transfer operation or direct put data transfer operation. The exemplary DMA engines and of each also include a reception FIFO buffer and for storing data descriptors for messages received from other DMA engines on other compute nodes. Although only illustrates a single injection FIFO buffer and a single reception FIFO buffer readers will note that a DMA engine may have access to any number of injection FIFO buffers and reception FIFO buffers as will occur to those of ordinary skill in the art for carrying out embodiments of the present invention.

In the example of the system messaging modules each include a set of computer program instructions capable of dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The origin system messaging module may operate generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving from each of the application messaging modules a registration request for each of the message passing operation to be performed by the application messaging modules and providing to the application messaging modules in response to receiving the registration request an operation identifier for each of the message passing operations. The target system messaging module may operate generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention in a similar manner.

In the example of both system messaging modules assign the same operation identifier to the same message passing operation for corresponding application messaging modules. For example if both the first origin and target messaging modules are implemented according to MPI the system messaging modules assign the same operation identifier to a broadcast operation the same operation identifier to a send operation the same operation identifier to a receive operation the same operation identifier to a gather operation and so on. Readers will note that in the example of the message passing operations may be implemented as point to point message passing operations such as for example send or receive operations. The message passing operations may also be implemented as collective message passing operations such as for example broadcast scatter gather or all to all operations.

The registration requests provided by the origin application messaging modules to the origin system messaging module and the registration requests provided by the target application messaging modules to the target system messaging module each specify a pointer to a callback function of the application messaging module requesting registration. As mentioned above the callback functions are used by the system messaging modules to return processing control to the application messaging modules. The system messaging modules each associates the callback pointer of a callback function for a message passing operation with the operation identifier for the message passing operation in one of the dispatch tables . For example the dispatch table may associate an operation identifier for a broadcast operation of the first origin application messaging module with a pointer to the first origin application messaging module s callback function for the broadcast operation. Similarly the dispatch table may associate an operation identifier for a broadcast operation of the first target application messaging module with a pointer to the first target application messaging module s callback function for the broadcast operation.

Readers will note that in the example of the origin system messaging module utilizes dispatch tables one table for collective operations and one table for point to point operations. Similarly the target system messaging module utilizes dispatch tables one table for collective operations and one table for point to point operations. Although separate tables exist for collective operations and point to point operations in the example of readers will note that these two tables may be combined into a single table or split into any number of tables.

After the origin application messaging modules have registered with the origin system messaging module and the target application messaging modules have registered with the target system messaging module one of the origin application messaging modules may instruct the origin node s system messaging module to dispatch packets on a global combining network to the target compute node . The origin system messaging module operates generally for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving from an origin application messaging module a storage identifier and an operation identifier the storage identifier specifying application storage containing an application message for transmission to at least one target compute node and the operation identifier specifying a message passing operation to be performed by the application messaging module packetizing the application message into network packets for transmission to the target compute node each network packet specifying the operation identifier and an operation type for the message passing operation specified by the operation identifier and transmitting the network packets to the target compute node .

In the example of the operation type specified by each packet indicates whether the message passing operation for which the packet was generated is a collective operation or a point to point operation. Because the operation identifier in a collective operations packet may be stored in a different location in the packet than the operation identifier in a point to point packet the target compute node receiving the packets may uses the operation type to retrieve the operation identifier contained in the packets . For packets generated for a collective operation the operation identifier is stored in the header of the packet. For packets generated for a point to point operation the operation identifier is stored in the first portion of the payload of the packet.

In the example of the target system messaging module may also operate for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The target system messaging module may operate for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention by receiving one of the network packets identifying the operation type and the operation identifier for the received network packet and executing a callback function in dependence upon the operation type and the operation identifier. As mentioned above the target system messaging module may execute a callback function in dependence upon the operation type and the operation identifier by retrieving the operation identifier from the location in the packet specified by the operation type looking up the callback pointer associated with the retrieved operation identifier in the dispatch table for the operation type and executing the callback function specified by the callback pointer .

As mentioned above the system messaging modules on both the origin node and the target node in use the same operation identifier when registering the same message passing operations for corresponding application messaging modules. For example consider that the first application messaging modules are implemented according to the MPI specification. The same operation identifier is assigned to a broadcast operation for the first application messaging modules . In such a manner when the first origin application messaging module utilizes the origin system messaging module to perform a broadcast operation all of the packets for that operation contain the operation identifier assigned to the broadcast operation for the MPI application messaging module. As the target system messaging module receives the packets the target system messaging module can identify the operation identifier for the packet and use the dispatch tables to identify the callback function for the first target application messaging module used to process the packets. Because the application messaging layer may be implemented according to multiple message passing specification concurrently the system described above with reference to allows the system messaging layer to correctly dispatch packets to the proper application messaging module implementation in the application messaging layer .

As mentioned above the operation type specified by a network packet described above may be used to indicate the location of the operation identifier in that network packet. For packets generated for a point to point operation the operation identifier may be stored in the first portion of the payload of the packet. For further explanation therefore sets forth a line drawing illustrating an exemplary point to point packet useful in dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The exemplary point to point packet of includes a header and a payload . The header of includes an operation type field for storing the operation type of the packet . The header of includes a point to point destination address field for storing the network address of the target compute node to receive the packet . The header of also includes other fields such as for example a no op field. The payload of includes an operation identifier field for storing the operation identifier for the packet . The payload of also includes message data field for storing message data packetized into the packet . The operation identifier field is arranged in the first portion of the payload while the message data field is arranged in the remaining portion of the payload .

For packets generated for a collective operation the operation identifier may be stored in the header of the packet because the point to point destination address field is not needed in a packet for a collective operation. That is a packet for a collective operation is typically transmitted along a predefined route to all the nodes of interest in the global combining network. For further explanation therefore sets forth a line drawing illustrating an exemplary collective packet useful in dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The exemplary collective packet of includes a header and a payload . The header of includes an operation type field for storing the operation type of the packet . The header of includes operation identifier field for storing the operation identifier for the packet . The header of also includes other fields such as for example a no op field. The payload of includes message data field for storing message data packetized into the packet .

For further explanation sets forth a flow chart illustrating an exemplary method for dispatching packets on a global combining network of a parallel computer according to embodiments of the present invention. The parallel computer includes a plurality of compute nodes connected for data communications using the global combining network. The global combining network is capable of performing collective operations and point to point operations.

The method of includes receiving by the origin system messaging module from the application messaging module a registration request for the message passing operation to be performed by the application messaging module . The registration request of represent a request from the origin application messaging module to register a particular message passing operation capable of being performed by the application messaging module with the origin system messaging module . The registration request of specifies a pointer to a callback function for the particular message passing operation with which the origin system messaging module may return processing control to the origin application messaging module for data processing. The origin system messaging module may receive the registration request from the application messaging module according to the method of when the origin application message module invokes a registration function of an API exposed by the origin system messaging module .

The method of also includes providing by the origin system messaging module to the application messaging module in response to receiving the registration request an operation identifier for the message passing operation. The origin system messaging module may provide the operation identifier to the origin application messaging module according to the method of by associating the callback pointer with the operation identifier in one of the dispatch tables and returning the operation identifier to the origin application messaging module as a return value for the registration function of the API exposed by the origin system messaging module to the origin application messaging module . In the example of the particular dispatch table in which the callback pointer and the operation identifier are associated depends on whether the message passing operation specified by the operation identifier is a collective operation or a point to point operation. Callback pointers and operation identifiers for collective operations are stored in one of the dispatch tables while callback pointers and operation identifiers for point to point operations are stored in another one of the dispatch tables . Readers will note however such an implementation is for explanation only and not for limitation. Readers will also note that the target application messaging module of registers message passing operation with the target system messaging module in a manner similar to the method described above.

The method of includes receiving by an origin system messaging module on an origin compute node from an origin application messaging module on the origin compute node a storage identifier and an operation identifier . The storage identifier of specifies application storage containing an application message for transmission to at least one target compute node . The operation identifier of specifies a message passing operation to be performed by the origin application messaging module . The origin system messaging module may receive the storage identifier and the operation identifier from the origin application messaging module according to the method of as parameters to a function of an API exposed by the origin system messaging module and invoked by the origin application messaging module .

The method of also includes packetizing by the origin system messaging module the application message into network packets for transmission to the target compute node . Each network packet of specifies the operation identifier and an operation type for the message passing operation specified by the operation identifier . In the example of the operation type specifies whether the message passing operation is a collective operation or a point to point operation. Moreover the operation identifier is stored at a location in each network packet in dependence upon the operation type . For example when the operation type specifies that the packet is created for a collective operation the operation identifier is stored in the first portion of the payload of the packet . When the operation type specifies that the packet is created for a point to point operation the operation identifier is stored in header of the packet .

The method of includes transmitting by the origin system messaging module the network packets to the target compute node . The origin system messaging module may transmit the network packets to the target compute node according to the method of by injecting the network packets into the transmission stacks of the origin node s network adapter for transmission to the target compute node .

The method of also includes receiving by a target system messaging module on the target compute node one of the network packets . The target system messaging module may receive one of the network packets according to the method of by retrieving the packet from the reception stacks in the target node s network adapter.

The method of includes identifying by the target system messaging module the operation type and the operation identifier for the received network packet . The target system messaging module may identify the operation type for the received network packet according to the method of by retrieving the operation type from the first field in the header of the packet . As mentioned above the location of the operation identifier in each network packet in depends on the operation type. When the operation type specifies that the packet is for a collective operation the target system messaging module may also identify the operation identifier for the received network packet according to the method of by retrieving the operation identifier from a field in the header of the packet . When the operation type specifies that the packet is for a point to point operation the target system messaging module may identify the operation identifier for the received network packet according to the method of by retrieving the operation identifier from the first portion of the payload for the received network packet without reading the remaining portion of the payload into computer memory. Remaining portion of the payload is not read into computer memory to avoid the overhead associated with retrieving the entire payload of the packet unnecessarily.

The method of also includes executing by the target system messaging module a callback function in dependence upon the operation type and the operation identifier . The target system messaging module may execute a callback function according to the method of by retrieving the operation identifier from the location in the packet specified by the operation type looking up the callback pointer associated with the retrieved operation identifier in the dispatch table for that particular operation type and executing the callback function specified by the callback pointer .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for dispatching packets on a global combining network of a parallel computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

