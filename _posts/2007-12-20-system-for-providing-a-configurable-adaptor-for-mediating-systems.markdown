---

title: System for providing a configurable adaptor for mediating systems
abstract: A system is described for providing a configurable adaptor for mediating systems. The system may include a memory, an interface, and a processor. The memory may store an interaction item, a data mapping, data schemas and binary representations of the data schemas. The interface may communicate with a first system, a second system, and a device. The processor may identify the interaction item describing an interaction between the systems. The processor may generate and process a first and second data schema to generate binary representations of the schemas. The processor may generate a data mapping referencing the binary representations to describe a data transformation between the data formats of the first and second systems. The processor may deploy the binary representations, the data mapping, and the interaction item to a device to enable the device to maintain interaction state, and communicate properly formatted messages between the first and second systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08606768&OS=08606768&RS=08606768
owner: Accenture Global Services Limited
number: 08606768
owner_city: Dublin
owner_country: IE
publication_date: 20071220
---
The present description relates generally to a system and method generally referred to as a system for providing a configurable adaptor for mediating systems and more particularly but not exclusively to building a configurable adaptor for mediating communications between a mobile application system and a backend scheduling system.

Enterprise systems may be built with component systems from several distinct vendors. The systems of each vendor may implement a unique messaging system. In some cases the uniqueness of the messaging systems may result in one or more of the component systems being unable to communicate with another component system. The communication between these systems may be facilitated by a third party adaptor however if no third party adaptor exists the component systems may be rendered incompatible.

A proprietary adaptor may be developed to facilitate the communication between the incompatible systems however the developed adaptor may be limited to the particular implementation and function of the enterprise system. If the business logic or data schema of any of the component systems were to change the adaptor may be rendered inoperable or may have to be re developed. In addition the proprietary adaptor may not be re usable that is the adaptor may be limited to the business logic and data schema of the particular implementation and may be inoperable in other implementations.

A system for providing a configurable adaptor for mediating systems may include a memory an interface and a processor. The memory may be connected to the processor and the interface and may store an interaction item including a plurality of states a data mapping describing a data transformation a first data schema a second data schema a first binary representation of the first data schema and a second binary representation of the second data schema. The interface may be connected to the memory and the processor and may be operative to communicate with a first system a second system and a device. The processor may be connected to the memory and the interface and may be operative to identify the interaction item describing an interaction between the first system and the second system. The interaction item may include a plurality of states and the processor may store the interaction item in the memory. The processor may generate the first data schema describing a first data format of the first system and a second data schema describing a second data format of the second system. The processor may process the first data schema and the second data schema to generate a first binary representation of the first schema and a second binary representation of the second schema. The processor may generate the data mapping wherein the data mapping references the first binary representation and the second binary representation to describe a data transformation between the first data format and the second data format. The processor may deploy the first binary representation the second binary representation the data mapping and the interaction item to a device to enable the device to maintain a proper state of an interaction between the first system and the second system and enable the device to send and receive properly formatted messages between the first system and the second system.

Other systems methods features and advantages will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the embodiments and be protected by the following claims and be defined by the following claims. Further aspects and advantages are discussed below in conjunction with the description.

A system and method generally referred to as a system may relate to providing a configurable adaptor for mediating systems and more particularly but not exclusively to building a configurable adaptor for mediating communications between a mobile application system and a backend scheduling system. The principles described herein may be embodied in many different forms.

The system may facilitate the deployment of an enterprise system utilizing several systems with distinct messaging systems. An enterprise system may include one or more individual systems and each individual system may be referred to as a component system of the enterprise system. If one or more of the systems such as a work management system a mobile system a human resources system and a graphical information system are unable to communicate an adaptor may easily be built using a simple interface such as a graphical interface to allow the systems to communicate properly. Once an adaptor has been built the adaptor may be re configured on the fly to adapt to changes in the underlying data schemas or the data mapping. A user may be able to utilize a simple interface to make adjustments to the adaptor to reflect changes to the underlying data schema or data mapping. The adaptor may not need be recompiled for changes to the data schema or the data mapping to take effect. In addition the adaptor may be re configured to adjust to underlying changes in the business logic or the interactions between the systems.

An adaptor built by the system may provide a higher messaging throughput and may more efficiently transform messages than traditional adaptors. The flexibility of the adaptor may allow an organization to implement an instance of the adaptor and use the simple interface to handle updates to the underlying business logic and data schema without requiring the assistance of a third party to make the modifications or recompile the software. Eliminating the need for third party assistance for system updates may reduce the costs associated with system updates and may enable organizations to dynamically update business processes at market speed.

The system may include one or more systems A N such as component systems of an enterprise system an adaptor an adaptor builder an administrator such as an administrative user of the enterprise system and one or more users A N such as end users of the enterprise system. The components may communicate using hierarchical Extensible Markup Language XML messages flat files serialized objects or generally any mode of communicating data. The administrator may use the adaptor builder to build configure and modify the adaptor . The adaptor may mediate the communications between the systems A N. The adaptor may maintain the state of the transactions between the systems A N and may maintain the business logic associated with the transactions. If the underlying data schema or business logic of one or more of the systems A N changes the administrator may use the adaptor builder to quickly reflect the changes in the adaptor .

In operation the administrator may use an interface provided by the adaptor builder such as a web interface or Microsoft Visual Studio to identify an interaction between one or more systems A N which may not be able to communicate properly such as the system A A and the system B B. The administrator may use the interface to layout the various steps or states of the business logic underlying the interaction. Interactions may include uploading data from the system A A to the system B B downloading data from the system A A to the system B B or generally any flow of data between the systems A N. For example the steps may include receiving a message from system A A and awaiting a response from system B B and or system N N. Once the business logic of an interaction has been identified the adaptor builder may compile the data representing the interaction in to binary code. Alternatively or in addition the data representing the interaction may be compiled into an XML file with an element representing each step in the interaction.

Once the business logic of the interaction has been identified the administrator may use a simple interface provided by the adaptor builder such as a web interface to identify the data schemas of the system A A and the system B B. The administrator may also use a simple interface provided by the adaptor builder such as a web interface to identify the data schemas of the system A A and the system B B. The adaptor builder may generate an Extensible Stylesheet Language Transformation XSLT file to represent the data schemas of each component identified by the administrator . The adaptor builder may generate an individual XSLT file for each data schema in the system . Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY to create an XSLT file describing the data transformation. Alternatively or in addition the adaptor builder may generate a file in other formats to describe the data schemas such as an XML file a flat file a comma delimited file or generally any file capable of describing a data transformation.

The XSLT files may then be parsed and compiled by proprietary components to generate a set of binary class objects into a dynamically linked library DLL files. One DLL file may be generated for each component in the system. The compilation of the XSLT file may include generating a class object for each data item and generating a method to retrieve the data item and a method to update the data item. Since the class objects are in binary form they may be able to update or retrieve data more efficiently and in turn enable a more efficient transformation of data than the XSLT files.

Once the interaction and the data schema files have been determined the administrator may use a simple interface provided by the adaptor builder such as a web interface to map out the data layouts between the systems A N associated with the interaction. The data layout mapping may represent the transformation necessary to reformat a message from a format used by the system A A to a format used by the system B B or vice versa. The adaptor builder may generate an XML file to represent the data mapping identified by the administrator . The adaptor builder may generate an individual XSLT file for each data mapping in the system . Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY to create an XSLT file describing the data transformation. Alternatively or in addition the adaptor builder may generate a file in other formats to describe the data transformation such as an XML file a flat file a comma delimited file or generally any file capable of describing a data transformation.

The adaptor builder may transfer the binary code representing the business logic the class objects representing the data schema and the XML file representing the data mappings to the adaptor . The adaptor may then be capable of maintaining the state of an interaction between one or more systems A N and may be able to transform data between one or more systems A N.

If the if the data schema of any of the associated systems A N changes the administrator may use the interface provided by the adaptor builder to update the adaptor . The administrator may use the interface provided by the adaptor builder to modify the data schema XSLT files as necessary. The adaptor builder may load the data from the XSLT file into the interface to allow the administrator to view and modify the data schemas. Once the data schemas have been updated the adaptor builder may generate updated XSLT files from the updated data schemas. Alternatively or in addition the XSLT files may be updated instead of being re generated. The updated XSLT files may be processed to generate updated DLL files and the DLL files may be deployed to the adaptor for a seamless update of the enterprise system. Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY to modify the XSLT file describing the data schemas.

If the if the data mapping of the schema changes the administrator may use the interface provided by the adaptor builder to update the adaptor . The administrator may use the interface provided by the adaptor builder to modify the data mapping XML file as necessary. The adaptor builder may load the data from the XML file into the interface to allow the administrator to view and modify the data mapping. Once the data mapping has been updated the adaptor builder may generate updated an XML file from the updated data mapping. Alternatively or in addition the XML file may be modified instead of being re generated. The updated XML files may be deployed to the adaptor for a seamless update of the enterprise system. Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY V to modify the XML file describing the data mapping.

In the case of the underlying business logic being represented by an XML file the administrator may use the interface provided by the adaptor builder to update the steps or states of the business logic. The adaptor builder may load the data from the XML file to the interface to allow the administrator to view and modify the business logic. Once the administrator updates the business logic the adaptor builder may generate the XML file representing the steps of the interaction. The XML file may then be deployed on the adaptor for a seamless update. Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY to update the XML file representing the business logic. The steps of updating the business logic may be found in more detail in below.

The network environment may include one or more servers A N and one or more web applications standalone applications mobile applications A N which may collectively be referred to as client applications for the users A N or individually as a user client application. Each server A N may represent one or more component systems. The network environment may also include a network a network an adaptor builder server and an administrator .

Some or all of the adaptor builder server and the servers A N may be in communication with each other by way of network . The servers A N and the adaptor builder server may each represent multiple linked computing devices. The adaptor builder server may include the adaptor and the adaptor builder . Alternatively or in addition the adaptor and the adaptor builder may reside on two separate machines. The administrator may use a web application A to interface with the adaptor builder server . Alternatively or in addition the administrator may use a mobile application N or a standalone application B to interface with the adaptor builder server .

The networks may include wide area networks WAN such as the internet local area networks LAN campus area networks metropolitan area networks or any other networks that may allow for data communication. The network may include the Internet and may include all or part of network network may include all or part of network . The networks may be divided into sub networks. The sub networks may allow access to all of the other components connected to the networks in the system or the sub networks may restrict access between the components connected to the networks . The network may be regarded as a public or private network connection and may include for example a virtual private network or an encryption or other security mechanism employed over the public Internet or the like.

The servers A N may communicate with the adaptor builder server via the networks . The servers A N may communicate with the users A N via the networks through the web applications standalone applications or mobile applications A N. Alternatively or in addition only one of the servers A N may be in direct communication with the users A N such as the server A A.

The web applications standalone applications and mobile applications A N and servers A N may be connected to the network in any configuration that supports data transfer. This may include a data connection to the network that may be wired or wireless. Any of the web applications standalone applications and mobile applications A N may individually be referred to as a client application. The web application A may run on any platform that supports web content such as a web browser or a computer a mobile phone personal digital assistant PDA pager network enabled television digital video recorder such as TIVO automobile and or any appliance or platform capable of data communications.

The standalone application B may run on a machine that may have a processor memory a display a user interface and a communication interface. The processor may be operatively connected to the memory display and the interfaces and may perform tasks at the request of the standalone application B or the underlying operating system. The memory may be capable of storing data. The display may be operatively connected to the memory and the processor and may be capable of displaying information to the user B B. The user interface may be operatively connected to the memory the processor and the display and may be capable of interacting with a user B B. The communication interface may be operatively connected to the memory and the processor and may be capable of communicating through the networks with the component servers A N. The standalone application B may be programmed in any programming language that supports communication protocols. These languages may include SUN JAVA C C ASP SUN JAVASCRIPT asynchronous SUN JAVASCRIPT or ADOBE FLASH ACTIONSCRIPT amongst others.

The mobile application N may run on any mobile device that may have a data connection. The data connection may be a cellular connection a wireless data connection an internet connection an infra red connection a Bluetooth connection or any other connection capable of transmitting data.

The adaptor builder server and servers A N may include one or more of the following an application server a mobile application server a data store a database server and a middleware server. The adaptor builder server may exist on one machine or may be running in a distributed configuration on one or more machines.

The servers A N adaptor builder server and client applications A N may be one or more computing devices of various kinds such as the computing device in . Such computing devices may generally include any device that may be configured to perform computation and that may be capable of sending and receiving data communications by way of one or more wired and or wireless communication interfaces. Such devices may be configured to communicate in accordance with any of a variety of network protocols including but not limited to protocols within the Transmission Control Protocol Internet Protocol TCP IP protocol suite. For example the web application A may employ the Hypertext Transfer Protocol HTTP to request information such as a web page from a web server which may be a process executing on the servers A N.

There may be several configurations of database servers application servers mobile application servers third party components and middleware servers included in the adaptor builder server and the servers A N. Database servers may include MICROSOFT SQL SERVER ORACLE IBM DB2 or any other database software relational or otherwise. The application server may be APACHE TOMCAT MICROSOFT IIS ADOBE COLDFUSION YAPACHE DEXTERRA CONCERT SERVER or any other application server that supports communication protocols. Third party components may include any application that may interface with the other servers A N such as CLICKSCHEDULE . The middleware server may be any middleware that connects software components or applications.

The application server or mobile application server on the servers A N or the adaptor builder server may serve pages such as web pages or mobile web pages to the users A N. The adaptor builder server may facilitate communication between the servers A N.

The networks may be configured to couple one computing device to another computing device to enable communication of data between the devices. The networks may generally be enabled to employ any form of machine readable media for communicating information from one device to another. Each of networks may include one or more of a wireless network a wired network a local area network LAN a wide area network WAN a direct connection such as through a Universal Serial Bus USB port and the like and may include the set of interconnected networks that make up the Internet. The networks may include any communication method by which information may travel between computing devices.

The system may include a server A A a server B B an adaptor builder server an adaptor an adaptor builder an administrator and a web application A A. The adaptor may include a communication interface a message processor an interaction state processor a data store a state date store and a transformation processor . The adaptor builder may include an interaction data generator an interaction data processor a data schema processor a data schema generator a data mapping generator and a communication interface .

In the adaptor builder the communication interface may be operative to communicate with the administrator via the web application A. The interaction data generator may be operative to generate a data representation such as programming code or an XML file of the business logic underlying the interaction between the server A A and the server B B. The interaction data processor may compile the programming code or the XML to generate the interaction state processor . The interaction state processor may be capable of maintaining the state of the interaction identified in the programming code or the XML file. Alternatively or in addition in the case of the business logic being stored in an XML file the interaction data generator may store the XML file in the data store . The data schema generator may be operative to generate a data representation such as an XSLT file of the data schemas used by the server A A and the server B B. The data schema processor may be operative to process or compile the data representation into binary class objects. The binary class objects may then be transferred to the transformation processor of the adaptor . The data mapping generator may be used to generate an XML file of the data mapping between the data schema of the server A A and the server B B such as in an XML file. The data mapping may be stored in the data store .

In the adaptor the communication interface may send and receive messages with the server A A and the server B B. The message processor may be operative process incoming and outgoing messages. The message processor may be operative to determine the interaction type received message such as by parsing the message and or message header. The interaction state processor may be operative to determine the current state of the interaction. The interaction state processor may store the data representation of an interaction and the current state of the interaction in the state data store . When a message is received that is not part of an existing interaction the message processor may be operative to retrieve the data representation of the interaction from the data store and communicate it to the interaction state processor . The transformation processor may be operative to utilize the binary class objects generated by the data schema processor and the data mapping stored in the data store to transform the message from the format the server A A to the format of the server B B or vice versa.

The data store and the state data store may be operative to store data such as data representations of business logic and data representation of a data transformation. The data store and the state data store may include one or more relational databases or other data stores that may be managed using various known database management techniques such as for example SQL and object based techniques. Alternatively or in addition the data store and the state data store may be implemented using one or more of the magnetic optical solid state or tape drives.

Alternatively or in addition the adaptor builder server may be in communication with additional component servers such as the component server N N. In this instance the state of the interaction may indicate the proper message transformation and the message destination. The message destination may also be included in the message itself in which case the proper transformation may be determined based on the destination.

The diagram includes the client A A the server A A the server B B and adaptor . The adaptor may include the three functional layers of the adaptor the web service layer the mapping service layer and the transmission service layer . The web service layer may include the web service component and the web configuration file . The mapping service layer may include the mapping component the system A schema file the system B schema file and the mapping data file . The transmission service layer may include the transmission component .

The web service component may receive and manage requests for interactions such as upload or download interactions from the initiating system such as the server A A. The requests may be initiated by the client A A communicated to the server A A and then communicated to the web service component .

The mapping component may be the translations engine of the system . The mapping component may include the transformation processor . The mapping component may utilize the data mapping and the data schemas to manage the mapping of messages from the system A format to the system B format. The mapping component may also include an interface enabling the administrator or other users to create or modify the data mapping. Alternatively or in addition the mapping component may include an interface for enabling the administrator or other users to create or modify the data schemas.

The transmission component may manage the delivery of the translated message to one or more end systems such as the server B B.

The web service layer may include the web service component and the web configuration file . The web service component may include the core web service the custom web service the web service helper and the technical architecture . The web service layer may be the entry point for all of the mediated interactions such as through the core web service . The custom web service may provide a set of web methods that may be invoked by the server A A to initiate and complete interaction requests such as data upload and download requests. The functionality may be supported by a number of framework web service helper functions which may mange the core functionality such as the session state. The web service helper may include the interaction state processor . The technical architecture may be the control center of the processes that are driven from the web configuration file .

The mapping layer may include a mapping component the system A schema file the system B schema file and the mapping data file . The mapping component may include a mapping engine a mapping rules a custom mapping rules and a technical architecture .

The mapping component may be a core mapping engine that performs the data mapping transformation such as object to object mapping. The data mapping transformation may be driven by the configuration files generated by the administrator . In one instance the mapping may consists of an object to object mapping of request and response messages to and from a front end client and a back end system. The mapping engine may include the transformation processor . In one instance a number of core mapping rules may be provided in the mapping rules as part of the framework of the system. The core mapping rules may enable an administrator to quickly identify common data mappings such as date and time mappings. The mapping component may also include an interface to enable an administrator to modify the data mapping. Alternatively or in addition the mapping component may include an interface enabling an administrator to modify the data schemas of the systems A N.

The transmission layer may include the transmission component . The transmission component may include the communications manager the HTTP post transmitter the web service transmitter the custom transmitter and the technical architecture .

The transmission component may provide a core communication management layer to allow the adaptor to communicate with a variety of end systems A N. The transmission component may be configured to function with any communication protocols. In one instance the transmission component may include two core transmitters the standard HTTP post transmitter and the web service transmitter . The HTTP post transmitter may serialize a mapped object to an XML formatted Service Oriented Architecture Protocol SOAP wrapped message and deliver it to a web page of an end system. The web service transmitter may deliver a mapped object directly to an end system web service. The communications manager may provide an interface that may allow the administrator or other users to develop custom transmitters for implementations utilizing a specific communication protocol such as a file transport protocol FTP transmitter or a MICROSOFT message queuing transmitter.

The technical architectures may underpin each of the components. The technical architectures may provide key and common functionality such as error handling event logging and configuration management. In one instance the implementations may be based on MICROSOFT ENTERPRISE LIBRARY 2.0 functions.

The custom configuration components may include the application configuration the system A schema the system B schema the mapping configuration the web configuration the console application the custom web service the system A schema assembly and the system B schema assembly .

The console application may include the data schema processor and or the interaction data processor . The console application may provide a once at build time conversion of information in XML and or XSLT files into raw code compiled code and configuration files utilized by the adaptor . In addition to the custom configuration and code components such as the custom mapping rules and the custom transmitters the administrator may utilize plug in components to provide further custom functionality to the adaptor . In one instance the plug in components may be written implementing generic adaptor application programming interfaces APIs using the MICROSOFT VISUAL STUDIO 2005 toolset.

At block the interaction data generator may generate interaction data such as an XML file or programming code describing the business logic or steps of each interaction. At block the interaction data processor may process the interaction data and communicate the interaction data to the interaction state processor . In the case of programming code the interaction data processor may compile the code into a binary file. At block the administrator may identify the data schema of the first system A A identified in the interaction data. At block the administrator may identify the data schema of the second system B B identified in the interaction data. The administrator may use an interface such as a web interface provided by the adaptor builder to identify the data schemas and the data provided to the interface may be processed into a data file such as an XSLT file by the data schema generator . Alternatively or in addition the administrator may use an XML tool such as ALTOVA XML SPY to identify and generate the data schemas. The data schemas may be stored in XSLT files or in any other data file.

At block the administrator may use the interface to generate a data mapping of the data formats of components A B. The data mapping may represent the data transformation necessary to facilitate communication between the systems A B. The data mapping may be represented in an XML file or other data file. At block the data schema processor may process the data schemas to generate the binary DLLs used to process the data transformation. The mapping generator may store the mapping data file and the system data schema files in the data store so the data files may be retrieved for modification. The binary DLLs may be communicated to the transformation processor of the adaptor .

At block the adaptor builder may determine whether the stored interactions require any additional data transformations. If the adaptor builder determines that additional data transformations are necessary the system may move to block . If there are no further data transformations necessary the system may move to block . At block the building of the adaptor may be complete.

At block the interaction state processor may determine the state of the interaction. The interaction state processor may determine whether any existing state data exists in the state date store . At block if no state data exists in the state date store then the interaction may be a new interaction and the system may move to block . At block the system may retrieve the interaction data associated with the interaction from the data store . At block the message processor may determine the proper data transformation based on the state of the interaction and the interaction data. For example each element in the interaction data associated with a data transformation may indicate the system or the data format associated with the destination system such as the system B B. Alternatively or in addition the message processor may be able to determine the destination component by parsing the message and or the message header such by parsing the destination internet protocol IP address. The data store may include a mapping of an IP address and or a system name and a descriptor of the appropriate binary class objects stored in the DLLs. Thus the message processor may be able to retrieve the appropriate binary class objects from the data store based on the destination IP and or the component name.

At block the message processor may communicate the message and descriptors of the appropriate binary class objects to the transformation processor . The transformation processor may utilize the data mapping file such as an XML file stored in the data store to identify the appropriate binary class objects to transform the message. The transformed message may be communicated back to the message processor . At block the message processor may communicate the message to the communication interface which may communicate the message to the destination component such as the system B B.

At block the adaptor may map the response to the data format of the server A A. At block the response may be communicated to the server A A and saved as session data to be communicated to the client A A. The server A A may then communicate the response in smaller subsets to the client A A. At block the server A A may select a first subset of the data. At block the client A A may receive the first subset of the data from the server A A. At block the server A A may select the second subset of the data. At block the client A A may receive the second subset of the data from the server A A. At block the server A A may select the third subset of the data. At block the client A A may receive the third subset of the data from the server A A. At block the server A A may signal the end of the download. At block the client A A may receive the end download request.

The system may include an application server a back end platform hierarchical XML and a toolkit client framework . The backend platform may include a backend server . The backend server may include a backend processor . The application server may include a toolkit server flattened XML and the adaptor . The toolkit server may include a core services and a web service adapter . The adaptor may include a web service a cached backend data and an HTTPS POST component . The toolkit client framework may include the client application and the client data controller . the client data controller may include a data manager and a data store such as a meta data business data . In the system the adaptor builder may be an auxiliary component which only interfaces with the adaptor when the business logic or data schema changes.

In operation a user A A may interface with the toolkit client framework such as by requesting scheduling information from the back end platform . The toolkit client framework may communicate the request to the toolkit server . The toolkit server may communicate the request as flattened XML to the adaptor . The adaptor may identify the interaction as a data request and may store the current state of the interaction in the session objects . The adaptor may then transform the data into a hierarchical XML file so as to be compatible with the backend platform . The adaptor may then communicate the hierarchical XML file to the backend platform .

The backend server may retrieve the requested data and communicate it to the adaptor as hierarchical XML . The adaptor may verify the state of the current interaction with the session objects . If the system enters an invalid state the adaptor may communicate an error message to the toolkit server which then may be communicated to the toolkit client framework . The adaptor may then transform the hierarchical XML into flattened XML so as to be compatible with the toolkit server . The adaptor may then communicate the flattened XML to the toolkit server . The toolkit server may in turn communicate the flattened XML to the toolkit client framework which may display the data to the user A A.

The system may include the scheduling server such as a CLICKSCHEDULE server an application server such as a DEXTERRA server a toolkit client framework such as a DEXTERRA toolkit framework flattened XML and hierarchical XML . The scheduling server may include a communication component such as a FMC CONNECT ASP component an integration manager component such as a CLICKSCHEDULE integration manager component a TIDE component and a scheduling system such as a CLICKSCHEDULE component.

The application server may include an adaptor and a toolkit server . The adaptor may include a web service session data and an secure HTTP HTTPS post component . The toolkit server may include a web service adaptor such as a DEXTERRA web service adaptor a HTTPS receive component and a core services component such as a DEXTERRA CONCERT core services component. The toolkit client framework may include a toolkit application and a data application . The data application may include a data manager a messaging component and a data store such as a meta data business data store. In the system the adaptor builder may be an auxiliary component which only interfaces with the adaptor when the business logic or data schema changes.

In operation a user may interface with the toolkit client framework such as by requesting scheduling information from the scheduling system . The toolkit client framework may communicate the request to the toolkit server . The toolkit server may communicate the request as flattened XML to the adaptor . The adaptor may identify the interaction as a data request and may store the current state of the interaction in the session objects . The adaptor may then transform the data into a hierarchical XML file so as to be compatible with the scheduling system . The adaptor may then communicate the hierarchical XML file to the scheduling system .

The scheduling system may retrieve the requested data and communicate it to the adaptor as hierarchical XML . The adaptor may verify the state of the current interaction with the session objects . If the system enters an invalid state the adaptor may communicate an error message to the toolkit server which then may be communicated to the toolkit client framework . The adaptor may then transform the hierarchical XML into flattened XML so as to be compatible with the toolkit server . The adaptor may then communicate the flattened XML to the toolkit server . The toolkit server may in turn communicate the flattened XML to the toolkit client framework which may display the data to the user.

The system may include an application server such as a DEXTERRA application server and a scheduling system such as a CLICKSCHEDULE system. The application server may include an adaptor a web services adaptor such as a DEXTERRA web services adaptor a toolkit server and a notification message . The adaptor may include an outbound message processor an inbound message processor a web services interface and an HTTP interface . The toolkit server may include a data store . The scheduling system may include a communication component such as a FMC CONNECT ASP component.

In operation a new task notification message such as a ticket of work TOW message may be received by the toolkit server . The toolkit server may communicate the message as flat data to the web services interface of the adaptor via the web services adaptor . The adaptor may process the message through the inbound message processor . The inbound message processor may process the message such as transform it into a data format compatible with the scheduling system . The adaptor may then communicate the message via the HTTP interface to the scheduling system .

The scheduling system may retrieve the data requested by the message and may communicate the data as hierarchical data to the adaptor . The adaptor may receive the hierarchical data via the HTTP interface . The inbound message processor may determine the state and may process the message such as by transforming the message into a format compatible with the toolkit server . The adaptor may then communicate the message as flat data to the toolkit server via the web services adaptor . The toolkit server may then sync the data with the client such as the web application A A.

The system may include a client A A a server A A configuration files adaptor a web service mediator asmx a web service mediator cs a mediator service helper stub files HTTP Post backend web service a backend system B a console application a helper application and a key . The configuration files may include one or more configuration files such as a web configuration file a schemas configuration file a mapping configuration file and any other configuration files used by the system . The adaptor may include a system A schema a system B schema a mapping engine a mapping rules a custom mapping rules a common services a communication service an HTTP post a web service plug in and a ftp plug in . The key may include the framework key the CREF key the tools key and the external system key .

In operation the console application may process the configuration files and pass the processed configuration files into the adaptor . The processed schema files may be communicated into the system A schema and the system B schema . The mapping configurations may be communicated into the mapping rules . The client A A may pass a request to the server A for data residing on the system B B. The server A A may pass the request to the adaptor via the web service mediator asmx and or the web service mediator cs and or the mediator service helper . The adaptor may then use the mapping engine the system A schema and the system B schema to translate the message into the format of the system B B. The adaptor may communicate the translated message to the system B B through the communication service the HTTP post plug in the web service plug in and or the ftp plug in .

In a networked deployment the computer system may operate in the capacity of a server or as a client user computer in a server client user network environment or as a peer computer system in a peer to peer or distributed network environment. The computer system may also be implemented as or incorporated into various devices such as a personal computer PC a tablet PC a set top box STB a personal digital assistant PDA a mobile device a palmtop computer a laptop computer a desktop computer a communications device a wireless telephone a land line telephone a control system a camera a scanner a facsimile machine a printer a pager a personal trusted device a web appliance a network router switch or bridge or any other machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. In a particular embodiment the computer system may be implemented using electronic devices that provide voice video or data communication. Further while a single computer system may be illustrated the term system shall also be taken to include any collection of systems or sub systems that individually or jointly execute a set or multiple sets of instructions to perform one or more computer functions.

As illustrated in the computer system may include a processor such as a central processing unit CPU a graphics processing unit GPU or both. The processor may be a component in a variety of systems. For example the processor may be part of a standard personal computer or a workstation. The processor may be one or more general processors digital signal processors application specific integrated circuits field programmable gate arrays servers networks digital circuits analog circuits combinations thereof or other now known or later developed devices for analyzing and processing data. The processor may implement a software program such as code generated manually i.e. programmed .

The computer system may include a memory that can communicate via a bus . The memory may be a main memory a static memory or a dynamic memory. The memory may include but may not be limited to computer readable storage media such as various types of volatile and non volatile storage media including but not limited to random access memory read only memory programmable read only memory electrically programmable read only memory electrically erasable read only memory flash memory magnetic tape or disk optical media and the like. In one case the memory may include a cache or random access memory for the processor . Alternatively or in addition the memory may be separate from the processor such as a cache memory of a processor the system memory or other memory. The memory may be an external storage device or database for storing data. Examples may include a hard drive compact disc CD digital video disc DVD memory card memory stick floppy disc universal serial bus USB memory device or any other device operative to store data. The memory may be operable to store instructions executable by the processor . The functions acts or tasks illustrated in the figures or described herein may be performed by the programmed processor executing the instructions stored in the memory . The functions acts or tasks may be independent of the particular type of instructions set storage media processor or processing strategy and may be performed by software hardware integrated circuits firm ware micro code and the like operating alone or in combination. Likewise processing strategies may include multiprocessing multitasking parallel processing and the like.

The computer system may further include a display such as a liquid crystal display LCD an organic light emitting diode OLED a flat panel display a solid state display a cathode ray tube CRT a projector a printer or other now known or later developed display device for outputting determined information. The display may act as an interface for the user to see the functioning of the processor or specifically as an interface with the software stored in the memory or in the drive unit .

Additionally the computer system may include an input device configured to allow a user to interact with any of the components of system . The input device may be a number pad a keyboard or a cursor control device such as a mouse or a joystick touch screen display remote control or any other device operative to interact with the system .

The computer system may also include a disk or optical drive unit . The disk drive unit may include a computer readable medium in which one or more sets of instructions e.g. software can be embedded. Further the instructions may perform one or more of the methods or logic as described herein. The instructions may reside completely or at least partially within the memory and or within the processor during execution by the computer system . The memory and the processor also may include computer readable media as discussed above.

The present disclosure contemplates a computer readable medium that includes instructions or receives and executes instructions responsive to a propagated signal so that a device connected to a network may communicate voice video audio images or any other data over the network . Further the instructions may be transmitted or received over the network via a communication interface . The communication interface may be a part of the processor or may be a separate component. The communication interface may be created in software or may be a physical connection in hardware. The communication interface may be configured to connect with a network external media the display or any other components in system or combinations thereof. The connection with the network may be a physical connection such as a wired Ethernet connection or may be established wirelessly as discussed below. Likewise the additional connections with other components of the system may be physical connections or may be established wirelessly. In the case of a service provider server or the content provider servers A N the servers may communicate with users A N through the communication interface .

The network may include wired networks wireless networks or combinations thereof. The wireless network may be a cellular telephone network an 802.11 802.16 802.20 or WiMax network. Further the network may be a public network such as the Internet a private network such as an intranet or combinations thereof and may utilize a variety of networking protocols now available or later developed including but not limited to TCP IP based networking protocols.

The computer readable medium may be a single medium or the computer readable medium may be a single medium or multiple media such as a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The term computer readable medium may also include any medium that may be capable of storing encoding or carrying a set of instructions for execution by a processor or that may cause a computer system to perform any one or more of the methods or operations disclosed herein.

The computer readable medium may include a solid state memory such as a memory card or other package that houses one or more non volatile read only memories. The computer readable medium also may be a random access memory or other volatile re writable memory. Additionally the computer readable medium may include a magneto optical or optical medium such as a disk or tapes or other storage device to capture carrier wave signals such as a signal communicated over a transmission medium. A digital file attachment to an e mail or other self contained information archive or set of archives may be considered a distribution medium that may be a tangible storage medium. Accordingly the disclosure may be considered to include any one or more of a computer readable medium or a distribution medium and other equivalents and successor media in which data or instructions may be stored.

Alternatively or in addition dedicated hardware implementations such as application specific integrated circuits programmable logic arrays and other hardware devices may be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments may broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that may be communicated between and through the modules or as portions of an application specific integrated circuit. Accordingly the present system may encompass software firmware and hardware implementations.

The methods described herein may be implemented by software programs executable by a computer system. Further implementations may include distributed processing component object distributed processing and parallel processing. Alternatively or in addition virtual computer system processing maybe constructed to implement one or more of the methods or functionality as described herein.

Although components and functions are described that may be implemented in particular embodiments with reference to particular standards and protocols the components and functions are not limited to such standards and protocols. For example standards for Internet and other packet switched network transmission e.g. TCP IP UDP IP HTML HTTP represent examples of the state of the art. Such standards are periodically superseded by faster or more efficient equivalents having essentially the same functions. Accordingly replacement standards and protocols having the same or similar functions as those disclosed herein are considered equivalents thereof.

The illustrations described herein are intended to provide a general understanding of the structure of various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus processors and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Additionally the illustrations are merely representational and may not be drawn to scale. Certain proportions within the illustrations may be exaggerated while other proportions may be minimized. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover all such modifications enhancements and other embodiments which fall within the true spirit and scope of the description. Thus to the maximum extent allowed by law the scope is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

