---

title: Application tracking for application execution environment
abstract: Methods, systems, and apparatus, including medium-encoded computer program products, for managing an application execution environment on a computer. One or more aspects of the subject matter described in this specification can be embodied in one or more methods of managing an application execution environment comprising a cross-platform application program interface to provide services to applications that run in the application execution environment, the one or more methods including: maintaining associations between the applications and different versions of the application execution environment installed on a computer, where the associations indicate in which of the different versions of the application execution environment the applications run; and managing the different versions of the application execution environment on the computer based on the associations between the applications and the different versions of the application execution environment in which the applications run.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08448161&OS=08448161&RS=08448161
owner: Adobe Systems Incorporated
number: 08448161
owner_city: San Jose
owner_country: US
publication_date: 20071019
---
This application claims the benefit of priority from U.S. Provisional Patent Application No. 60 952 799 entitled APPLICATION TRACKING FOR APPLICATION EXECUTION ENVIRONMENT filed Jul. 30 2007 this application is related to U.S. patent application Ser. No. 11 875 756 entitled MANAGEMENT USER INTERFACE FOR APPLICATION EXECUTION ENVIRONMENT filed on the same day as the present application this application is related to U.S. patent application Ser. No. 11 875 764 entitled VERSION MANAGEMENT FOR APPLICATION EXECUTION ENVIRONMENT now U.S. Pat. No. 7 930 273 filed on the same day as the present application and the disclosures of the three applications are incorporated by reference in their entirety.

This specification relates to managing application execution environments e.g. virtual machines and runtime environments on a computer platform. A computer platform is a computer including a particular operating system OS for that computer e.g. W OS M OS or L OS . Software developers often create source code that can be appropriately compiled for respective computer platforms and then independently generate native installation packages for each target platform. Each native installation package is associated with a specific computer platform and these native installation packages can then be distributed for installation on appropriate machines. For a particular target platform the appropriate native installation package is obtained from the software developer and an OS installer can be used to process the native installation package in order to install the application. For example IS software can be used to produce an .msi file for installation on W machines and a different software tool can be used to produce .pkg files for installation on M machines.

Some software developers have created cross platform installation packages such as the J Archive JAR file format that get deployed to the end user system. The cross platform package can then be expanded e.g. decrypted and uncompressed and written directly to disk using code provided by the software developer and or the developer of the cross platform package format. Typically such cross platform software relies on a previously installed virtual machine such as the J Virtual Machine JVM available from Sun Microsystems Inc. to run on the target platform.

The JVM provides a runtime environment and Java interpreter for most operating systems including W OS M OS AND L OS. Java source code files files with a java extension are compiled into a format called bytecode files with a class extension which can then be executed by a Java interpreter. Bytecode can be converted directly into machine language instructions by a just in time compiler JIT . Other example runtime environments include the C runtime .NET and the Adobe Integrated Runtime.

Flash Player available from Adobe Systems Incorporated is another virtual machine which is used to run or parse Flash files including Shockwave Flash SWF compiled from ActionScript. The Flash Player and Flash Authoring software allow development of projectors self running SWF movies that run on a specific target platform by embedding the SWF data in the Flash Player executable to create a new .exe file and manipulating a byte pattern in the .exe file to indicate the presence of the SWF data. Such projectors can then be distributed for use on the target platform.

Traditionally runtimes and their installers have been developed separately. Often the installation engine for a runtime is acquired or licensed from a third party. An installer for a runtime contains its own user interface and other facilities for interacting with the OS of the target computer platform. When a new version of a runtime is produced the older version is often uninstalled and the newer version is installed in its place. In this case applications that previously used the older version of the runtime should be able to use the newer version in order to operate properly. In the case of the JVM two versions of the JVM can be installed on a single computer and these two JVM versions are then managed separately.

This specification describes technologies relating to managing application execution environments e.g. virtual machines and runtime environments on a computer platform. In general one or more aspects of the subject matter described in this specification can be embodied in one or more methods of managing an application execution environment comprising a cross platform application program interface to provide services to applications that run in the application execution environment the one or more methods including maintaining associations between the applications and different versions of the application execution environment installed on a computer where the associations indicate in which of the different versions of the application execution environment the applications run and managing the different versions of the application execution environment on the computer based on the associations between the applications and the different versions of the application execution environment in which the applications run. Other embodiments include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. The maintaining can include registering for a file extension on the computer that is specific to one of the different versions of the application execution environment and the managing can include checking for a registration for the file extension before performing a management task with respect to the one of the different versions of the application execution environment. The managing can include registering in view of the management task for a file extension common to all of the different versions of the application execution environment. Moreover the managing can include registering with the computer s operating system in accordance with a latest one of the different versions of the application execution environment installed on the computer.

The managing can include determining which of the different versions of the application execution environment have dependent ones of the applications and notifying a user based on the determining regarding dependencies between the applications and the different versions before uninstalling one or more of the different versions of the application execution environment from the computer. The managing can include determining which of the different versions of the application execution environment have dependent ones of the applications and providing a user with an option to apply an available update to one of the different versions of the application execution environment when at least one of the applications uses the one of the different versions of the application execution environment on the computer.

A system can include a user interface device and one or more computers operable to interact with the user interface device and to perform operations for managing an application execution environment comprising a cross platform application program interface to provide services to applications that run in the application execution environment. The one or more computers can include the computer having the different versions of the application execution environment installed thereon and the computer can include the user interface device. The computer can include a personal computer running a web browser or a mobile telephone running a Wireless Application Protocol WAP browser.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. A runtime environment can contain its own logic and user interfaces for use in managing different installed versions of the runtime environment. Version management code for the runtime environment can operate from within the runtime environment itself. Moreover different versions of an application execution environment can be managed on a computer as a single runtime environment program having the different versions bundled therein. From an end user s perspective the application execution environment can be seen as a single program e.g. a single entry in an Add or Remove Programs control interface and the different versions of the application execution environment can be treated as merely various components that plug in to the application execution environment. Any application that uses the application execution environment can be run without the user needing to know anything about which versions of the application execution environment are installed on the computer.

The application execution environment itself can handle identification and installation of different versions of the application execution environment. Associations between applications and different versions of the application execution environment in which the applications run can be managed without user input including automatically downloading and installing any new versions as needed. In addition a common user interface for managing the different versions of an application execution environment installed on a computer can be provided for use by more sophisticated users e.g. computer system administrators . This user interface can allow a user to manage both the set of versions installed on the computer and the details of how a particular version of the application execution environment is configured.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The distributor can be a software developer publisher reseller or other entity which distributes software or the computers used by such. For example the distributor can be a server or server cluster providing software download facilities over a network such as Local Area Networks peer to peer networks wireless networks the Internet and the World Wide Web. The application execution environment program and applications can be distributed separately by multiple parties. The installer package can also be distributed on physical media such as Compact Discs CDs Digital Versatile Discs DVDs and floppy disks or by other techniques that can be used to deliver digital content.

The target computer includes both hardware and software. The hardware includes input output devices one or more processors and at least one computer readable medium e.g. memory device s a storage device s or combinations of one or more of them . The software can include an operating system on which the software elements provided by the distributor operate. The application execution environment can use the operating system to interact with other elements of the computer . The application execution environment can provide various utility services for use by applications that run in the application execution environment. These utility services can include file system access window and menuing integration with the OS shell e.g. W OS Explorer or M OS Finder file extension registration document processing support e.g. Hypertext Markup Language HTML and Portable Document Format PDF engines string manipulation graphics networking notification facilities addressing peripherals or other types of functionality that can be provided using a runtime library. Moreover the application execution environment can include a cross platform application program interface API that provides services to applications that run in the application execution environment and serves to abstract away details of the various hardware and OS platforms on which the application execution environment program has been designed to run.

Thus the application execution environment AEE can be a cross platform runtime environment such as the Adobe Integrated Runtime AIR software provided by Adobe Systems Inc. of San Jose Calif. In some implementations the application execution environment can load an application from an encoded representation of the application. For example the encoded representation can have a predefined syntactic structure such as a programming language e.g. source code or can include well defined virtual instructions e.g. platform independent bytecode such as Macromedia Flash bytecode . To load such applications the application execution environment can decode the encoded representation of the application into instructions and can execute the instructions of the application.

In addition to serving as an application execution environment the AEE can also serve as an application installation environment both for itself and the applications that run on the AEE and as a version management environment for itself. The user interface and language facilities of the AEE e.g. HTML MXML Multimedia eXtensible Markup Language and scripting support such as for ActionScript and JavaScript can be used when writing a management console program for the AEE .

The extent of the install uninstall facilities to be put into the AEE can vary among implementations. In some cases the AEE can provide APIs that perform all installation operations based on requests from one or more appropriate installers. In other cases some installation operations can be provided in the one or more installers managers and lower level API s of the runtime e.g. file system access API can be used to complete the installation operations on the computer . In any event a version management console program can employ the install uninstall facilities of the AEE to manage which versions of the AEE are installed and registered on a computer either automatically during an installation of the AEE e.g. when a new version of the AEE is installed or upon user request e.g. when the user selects a management option presented for the AEE in a control panel for installed programs .

With the AEE install location in hand the different versions of the AEE can be found. For example the installed AEE can include a directory named versions which includes a set of sub directories named according to the AEE version they contain. Note that patch levels for specific versions can be recorded separately and need not have any correspondence to a versions directory structure within the installed AEE.

The different versions of the AEE can be managed on the computer. This can involve uninstalling particular versions of the AEE applying one or more patches to update installed versions of the AEE adding components to or turning on off features of installed versions of the AEE e.g. adding a program framework that runs on top of one or more of the different AEE versions and installing one or more new versions of the AEE.

The identifying and the managing can be performed using one of the different versions of the application execution environment. Thus the version management console program which can be included as part of an installer for the AEE can run in the AEE itself and utilize the install uninstall facilities built into the AEE. Moreover when a new version of the AEE is to be added or an update is to be applied an installer package can be provided that includes the new version of or update to the AEE and an installer for that AEE or update that runs in the AEE.

The new AEE version includes appropriate native platform specific code for the target computer platform e.g. for a computer running W OS M OS or L OS . This new AEE program can be combined with an installer for this new AEE program and for an application if such is being installed at the same time into an installer package. Note that this combining can be specific to a class of computers thus the identifying and the combining can be performed for each target class of computers to prepare an installer package for each target class which can be provided separately to each target computer that is a member of the class. Alternatively the identifying and the combining can be performed dynamically for each target computer such as when the installer sent needs to be specific to the target computer for digital rights management DRM purposes.

In addition each application can be bound to one of the different versions of the application execution environment. This binding can ensure that whenever an application is invoked it will run on the version of the AEE against which that application was tested. Thus multiple applications and multiple different versions of the AEE can be installed on a given computer and each of the applications or a proper subset thereof can be bound to a different version of the AEE . Although from the user s perspective all of the applications can be presented as running on the same AEE and the distinctions between different versions of the AEE can remain completely transparent to the user during normal operation.

Referring again to a new version of the application execution environment can be installed on the computer when the namespace associated with an application matches the new version which is not already installed at the time of the checking . For example when a new application is to be installed the AEE can check to see whether the new application uses a new version of the AEE that has not yet been installed on the local computer. If so the AEE can automatically retrieve the new version of the AEE e.g. from a server over the Internet for installation along with the application.

In addition the installation of the new version can employ an installer package that combines the new AEE version with the installer for this new AEE version. The installer itself can run in the AEE and the installer package can be provided to the target computer to install the new AEE version and also potentially the application that relies on that version of the AEE by running the installer in the application execution environment copied to the target computer.

Thus the extracted copy of the AEE is immediately useable for running the installer. The installer package can be transmitted to the computer to cause the computer to perform install operations when the installer package is invoked e.g. when the installer package executable is executed . The new version of the AEE program can be copied to the computer which can involve extracting the AEE program version to the target computer from a compressed archive file after which the new version of the AEE is useable for running the installer. The new version of the AEE program can be launched on the target computer in x copy mode. The installer can be run in the launched new version of the AEE on the target computer before the new AEE program version has been installed on the target computer i.e. it is running in x copy mode . The installer can present a user interface UI including various UI panels to the user and can make a second copy of the new AEE program version directly from the running copy to its final install location.

Thus a first version of the AEE can be used to identify which of the multiple versions of the AEE have been installed on the computer and a second version of the AEE can be used to install the second version of the AEE itself. For example version 1.0 of the AEE can be installed on the computer when a new application is going to be installed. AEE version 1.0 can identify the installed versions of the AEE to determine whether a new version e.g. version 2.0 of the AEE is needed for the new application. If so a first copy of the AEE version 2.0 can be made at a first location on the computer. This can be an executable copy of the AEE program version 2.0 that has been downloaded to a temporary directory where it can be run before the installation has been completed. Execution of the first copy of the application execution environment program can be initiated and a second copy of the AEE program version 2.0 can be made at a second location on the computer. The version 2.0 of the AEE program can be registered at the second location on the computer. This can involve registering file extensions and MIME Multipurpose Internet Mail Extensions content types and registering instructions for an AEE manager program. Note that only the most recent version of the AEE need be registered for the common file extension s employed by the AEE since the most recent version of the AEE can invoke older installed version as needed for a particular situation e.g. when applying a patch to the older version . The first copy of the AEE program version 2.0 can be deleted at the first location on the computer. Note that making the second copy and deleting the first copy can be part of a move operation that has been integrated with the installation process. In addition the copying registering and deleting can involve using logic built into the AEE program.

In the example described in connection with the installer package can itself be considered an installer since the package is an executable that begins the installation process. In other situations the installer package can be a compressed archive file itself. For example for M OS computers the installer package can be a .dmg file in disk image format. In this case the user can open the .dmg file e.g. double click it and then launch the AEE installer included therein. Moreover the installer package can include one or more additional installers as discussed further below.

In any event the application execution environment program can include installation uninstallation code for installing and uninstalling software to the target computer and for performing updates such as applying patches e.g. to address discovered security vulnerabilities or adding components or features to the different AEE versions. The cross platform application program interface can be operating system independent and can include an install uninstall interface to the installation uninstallation code . The installer can include user interface code . When the installer is run in the AEE on the target computer the installer can employ the install interface of the AEE to effect installation of the new AEE version and the installer can employ the user interface code e.g. HyperText Markup Langauge ActionScript or SWF code which can also be run using the AEE to generate and present a user interface for the installation process.

For example the installer can contain a user interface that has been written using Adobe Flex software Flash code or ActionScript code or a combination of these where this user interface UI communicates with logic that is embedded in the AEE . The name of the main class in the AEE for this purpose can be runtime installer and an instance of the runtime installer can be created some properties can be set on this instance and then the runtime installer can be started. The runtime installer can then dispatch events as the install proceeds to report on progress e.g. progress of download what percentage has been installed if something has gone wrong and so forth . These events can be captured by the code in the installer which causes the UI to be updated. Note that communications going in both directions can be implemented using events. Thus when the user accepts an end user license agreement for the AEE an event can be sent from the UI to the runtime installer class telling it to proceed with the installation. Then progress events can come back the other way and cause a progress bar to be updated.

When the installer is run in the AEE on the target computer the installer can also cause placement of an AEE manager program on the target computer where the AEE manager program can also run in the AEE . The AEE manager program can be another copy of the AEE plus code that runs on top of it e.g. Flex code . Thus the installer can employ the interface to effect installation of the new version of the AEE and the AEE manager program can employ the interface to effect uninstallation of the new version of the AEE to effect installation of other versions of the AEE or to apply updates to installed versions of the AEE . Furthermore the installation uninstallation code in the AEE can be designed to operate directly on the target computer to perform install and uninstall tasks e.g. in a M OS based computer or the installation uninstallation code can be designed to interface with install uninstall facilities provided by the OS e.g. the W Installer APIs in a W OS based computer .

In the example presented above the runtime installer class can have very different implementations on a M OS based computer versus a W OS based computer. On a W OS based computer the runtime installer can operate using API s that are in the AEE and that are related only to installation because they use the W installation services to perform the installation operations. On a M OS based computer or a L OS based computer the runtime installer can operate using the file system API s that are in the AEE . In any event the runtime installer class can define a cross platform interface that the installer manager can access and use in the same manner regardless of whether it is running on a M OS based computer or a W OS based computer i.e. the installer manager need not have any native code in it . Other approaches are also possible. For example the AEE can provide a mechanism for invoking native code and this mechanism can also be used by the installer manager .

Referring again to an executable for one of the applications can be created on the computer. The executable can be configured to load the version of the AEE that matches the namespace associated with that application. For example a template executable can be converted to an application specific executable. The template executable is a generic native application executable e.g. for a W OS or a M OS computer which can be included in the installation package the AEE or both and can be converted to the application specific executable during installation on a particular computer. Alternatively the conversion can occur earlier and the application specific executable can be included in the installation package .

In either case application information can be supplied with the installation package or by other means and combined with information from the platform specific template executable to generate the application specific executable. The application information includes information specific to the application such as code implementing algorithms data or documentation. The template executable is specific to the target computer platform and contains machine code common to executables of that platform.

The template can be copied and renamed according to information included in the application information. The template can include generic filler material such as a generic icon that is overwritten when creating the application executable. The template executable can include other resources such as common code that can be used for performing common tasks or links to system libraries such as Dynamic Link Libraries DLLs . These can include one or more references to DLLs of the new version of the AEE e.g. a version specific path within a directory structure thus creating the binding between a given application and that version of the AEE. In addition to this AEE version information the template executable can also include a version resource to which version information about the application can be added when generating the application executable.

The application information can include an application name which is used as the name for the application executable. An application icon can be included in the application information and can be integrated with the template executable when generating the application executable. For example the application icon can be an application specific graphic in Portable Network Graphics PNG format that overwrites the generic icon e.g. after conversion to Windows Icon format ICO to form the application icon in the application executable. This application icon is then used to start the application such as by presenting the icon in the OS user interface for double clicking by a user. A version number can also be provided with the application information for further identification of the application executable and the version resource in the copied template executable can be updated with the version number to form the version number in the application executable. Additionally the application information can include code which can be cross platform code such as SWF and HyperText Markup Language HTML platform specific code such as machine code native to the target platform or a combination of these. The code can be in source compiled fully compiled or partially compiled and or interpreted form and can be inserted into the application executable as code. For example an SWF file that provides the logic and user interface for a new application can be embedded as a resource in the executable. A resource in this context is a section of an executable file reserved for storing data of various types. Typically an OS provides a programming interface which can be used to manipulate the resources programmatically and embedding SWF code as a resource can be done using an OS programming interface or by modifying the executable image directly note that the specification for the executable format for any given platform describes how to structure the executable file to include these resources . Moreover the application information can include additional files including both data and code such as Portable Document Format PDF files and JavaScript files.

Thus a copy of the template executable can be made and this copy becomes the application executable. Some items present in the template executable are replaced in the application executable with items used in whole or in part from the application information provided. Some information or resources may need to be converted prior to use for populating the application executable. Some platforms may require icons to be converted to a particular graphics format different from that provided with the application information e.g. conversion from .png to .ico format . In some instances the application name provided with the application information or the install directory location can be changed to follow the conventions of the target platform in such cases the application name and application executable location can be converted to a suitable equivalent. In any event the resulting application executable is generated from the template can run as native software on the target platform and includes new functionality added to the executable without recompiling the executable from source code. This resulting application executable also includes reference s to a particular version of the AEE thereby creating the binding between that application and that version of the AEE.

As will be appreciated from the above description the different versions of the AEE can be managed on the computer as a single runtime environment program having the different versions bundled therein. shows another example process of version management for an application execution environment. This process can be effected using an underlying application execution environment on which the management program runs or this process can be effected using a separate management program that does not rely on any version of the application execution environment to run on the computer for which the different versions are to be managed. In either case the management program can be triggered by a user invoking the management program such as by selecting a manage change option presented for the application execution environment in an Add or Remove Programs control interface presented on a W OS computer or such as by starting a management program provided by the application execution environment on a M OS computer and placed in a directory where the management program will be found by the M OS Finder . In addition an uninstall facility can be provided for the AEE overall such that the user can quickly uninstall all installed versions of the AEE such as by selecting an uninstall option presented for the application execution environment in an Add or Remove Programs control interface presented on a W OS computer.

When the version management program is triggered the different versions of the application execution environment installed on the computer can be identified such as described above. Note that the different AEE versions can be installed updated and uninstalled individually and independently and in any order. Each AEE version can be clearly demarcated from the rest which can include storing code specific to each version in a version specific directory as discussed above in connection with . In addition each application can be bound to a single version of the AEE as discussed above such that the specified AEE version is required for that application to run each application can declare exactly which version of the AEE is required for that application.

A user interface can be presented to allow user management of the different versions of the application execution environment. The user interface can include multiple different interface panels including at least one panel that shows all the versions of the AEE currently installed on the computer and including an option to selectively uninstall one or more of the different versions of the AEE.

The different versions of the AEE can be managed on the computer as a single runtime environment program having the different versions bundled therein based on input received via the user interface. It should be noted here that the present use of the term versions differs from traditional usage in that a different version of the AEE bundled into the AEE need not be a true stand alone piece of AEE software. Each different version of the AEE when bundled into a single runtime environment program can be a different version of the cross platform API and each application can be bound to a specific version of the different cross platform APIs included in the single runtime environment program. In addition management of the AEE versions can include uninstalling one or more versions of the AEE e.g. one or more versions of the AEE APIs applying update s to one or more versions of the AEE e.g. one or more versions of the AEE APIs and installing one or more new versions of the AEE e.g. one or more versions of the AEE APIs .

The UI panel also includes a Check for Updates button control and a Close button control . When a user selects the Close button control the management UI is closed. When a user selects the Check for Updates button control a check for any patches to installed versions of the AEE and for new versions of the AEE can be started. This can involve communicating with a server over a network e.g. the Internet to discover any available updates to the AEE.

Furthermore any new versions of the AEE can also be discovered such as through the same communication with the server over the network. Then any available updates can be applied and or any new versions found can be installed based on user input. Note that the discovery and application of any available updates can each be done automatically or in response to user input. For example when a user selects the Check for Updates button control in the UI panel shown in this can cause the AEE management program to discover any available updates including both patches to existing installed versions of the AEE and new versions of the AEE. The UI panel can then be updated as shown in .

A listing of the available updates including patches to installed versions 1.0 and 1.5 and a new version 3.0 is now included in the UI panel . In addition an Apply Updates button control has been included in the UI panel . In this example the user can initiate application of the patches and installation of the new version through a single selection of the Apply Updates button control . Thus the mechanism used to obtain input authorizing updates to different versions of the AEE e.g. applying security patches and adding new components or features and installation of new version s of the AEE can be integrated into one place. With a single click the user can initiate all available updates to the AEE. As before check box controls can also be provided allowing a user to unselect the updates that they do not want to apply when selecting the Apply Updates button control . Notifications regarding any end user license agreements e.g. for a new AEE version to be installed or documentation concerning the updates to be applied e.g. a ReadMe file for a security patch can also be retrieved and presented through the user interface.

In addition to presenting a user interface configured to manage installation update and uninstallation of the different versions of the AEE the progress of multiple AEE management tasks can be separately shown within the user interface. In a user has already selected the Apply Updates button control and the user has then selected the Uninstall option for version 2.0 of the AEE. Progress information Applying Selected Updates Status 40 Completed and a progress bar and a corresponding cancel button control are thus shown in the updated UI panel . In addition progress information Uninstall Version 2.0 Status 20 Completed and a progress bar and a corresponding cancel button control are also shown in the updated UI panel . Thus multiple management tasks can be initiated from the AEE management UI and processed in parallel and the progress of these management task can be shown in line in the UI.

When the management task includes applying update s to installed version of the AEE a check can first be made to see whether any applications that rely on the AEE version s to be updated are currently running and if so a user can be alerted to this fact and asked to close those application s before initiating the update. This can avoid requiring a reboot of the computer. The check for running applications can be performed using an interapplication communication IAC mechanism such as LocalConnection which operates using a shared memory segment or another IAC mechanism. In addition the same check for dependent running applications can be performed before uninstalling any AEE versions.

Management of the AEE versions can be based in part on dependencies between the AEE versions and the applications installed on the computer. shows associations maintained between applications and different versions of an application execution environment and management of the different versions based on the associations . The associations indicate in which of the different versions of the application execution environment the applications run. The associations can be created and maintained in various manners including using alternative approaches with different operating systems. For example on a M OS computer the associations can be maintained using file extension registrations such as described below in connection with whereas on a W OS computer the associations can be maintained using existing component reference counting facilities available through W installation services. Moreover the associations can be unidirectional e.g. pointing from application to AEE version or bidirectional.

The version management takes into consideration the associations during one or more management tasks. For example a user can be alerted when an AEE version selected for uninstall has dependent applications still installed on the computer in which case the user may not wish to uninstall that version after all. Thus as shown in if a user were to select uninstall for AEE version 2.0 no alert need be generated since none of the currently installed applications rely on AEE version 2.0. But if a user were to select uninstall for AEE version 1.5 an alert can be generated to let the user know that APP still depends on AEE version 1.5. The alert can enumerate the applications dependent on the AEE version or simply note that there is at least one dependent application. The alert can include user interface control s that allow the user to confirm or cancel the uninstall and to decide whether to uninstall APP at the same time that AEE version 1.5 is uninstalled. Other management tasks can also employ the associations .

When a new application is to be installed the associations can be maintained by registering the application for a file extension on the computer that is specific to one of the different versions of the application execution environment. This file extension can be a fake file extension e.g. .AEE 1 5 whose only purpose is to support application tracking and won t interfere with other applications . For example on a M OS computer the application can claim to support this fake file extension. Thus when the M OS inspects the application it will identify the supported fake file extension and record this information in its launch services database. This file extension registration can then be used to identify whether applications that rely on a given version of the application execution environment e.g. applications dependent on AEE version 1.5 are installed on a computer with an operating system that doesn t include a built in facility for component reference counting such as a M OS computer.

The file extensions used for application tracking can be per machine or per user based on whether the application is installed per machine or per user. Moreover when the file extensions are queried to find dependent applications all visible places in the computer system can be searched including the combination of per machine and per user visible to the user s logged in when the query is run. Note that this may not necessarily find all installed applications in each case but this technique can find most if not all installed applications in many situations.

When a management task is to be performed e.g. AEE uninstall or AEE update the AEE version management can include checking for a file extension registration specific to a given AEE version before performing the management task. For example if a user selects to uninstall version 2.0 of the AEE a check can be made to see if any applications are registered for the file extension .AEE 2 0 and the result of that check can affect how the requested management task is carried out.

In addition this checking can be performed for all currently installed AEE versions before any specific management task has been selected. For example when a user opens the AEE management user interface the AEE management program can determine which AEE versions have dependent applications installed which each require a particular version of the AEE to run. This can involve checking for file extension registrations specific to each of the installed AEE versions.

A user can then be provided with an option to apply an available update to one or more of the AEE versions when one or more of the applications use those one or more AEE versions. Thus AEE versions that do not have dependent applications need not be updated although in practice all installed AEE versions may be updated as the default action when network access is not a constraint or the order of update may be based on application dependencies e.g. AEE versions used most can be updated first . In addition a user can be notified regarding dependencies between the applications and the different AEE versions before uninstalling one or more of the different AEE versions from the computer. This can involve alerting the user as described above after an uninstall selection can be made or this can involve identifying in a UI panel e.g. UI panel which of the AEE versions have dependent applications currently installed on the computer. Note that both providing the update option and notifying the user can be done together in a single UI panel or these operations can be done separately.

Furthermore when a new latest version of the AEE results from a selected management task the latest version of the AEE can be registered with the operating system as the AEE thereby keeping the most recent version of the AEE as the single runtime environment program having the different versions bundled therein from the perspective of the operating system. For example if a version 3.5 of the AEE is installed on a computer where version 3.0 was the previously installed latest version of the AEE the version 3.5 of the AEE can be registered in place of version 3.0 for a file extension common to all the different versions of the AEE. Thus whenever an AEE file having that common file extension is to be opened the most recent version of the AEE version 3.5 in this example will be invoked by the operating system. If it turns out that an earlier version is nonetheless needed e.g. to complete installation of an application that relies on that earlier version to run then the later version of the AEE can invoke the earlier version of the AEE to complete the processing.

It should be noted that a management task other than installation of a new AEE version can also result in a new latest version. For example if a computer currently has versions 1.0 1.5 2.0 and 3.0 installed uninstalling version 3.0 can result in version 2.0 becoming the new latest version. Thus in this case version 2.0 of the AEE will be registered with the operating system. Note also that registration of the latest AEE version with the operating system can include many operations in addition to that of registering for the common file extension. For example the latest version of the AEE can register its management console program which will then be the program invoked when the user opens the management user interface.

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a tangible program carrier for execution by or to control the operation of data processing apparatus. The tangible program carrier can be a propagated signal or a computer readable medium. The propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a computer. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device or a combination of one or more of them.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment or a combination of one or more of them. In addition the apparatus can employ various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described is this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many implementation details these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. The checking for updates to installed AEE versions and for new AEE versions can be done automatically without user input e.g. when an application is launched and thus the AEE is invoked and a notification UI can be presented when a new version or update is available. Each applications may be bound to multiple versions of an application execution environment providing flexibility in which AEE version the application uses. Application tracking need not be AEE version specific. Various mobile and other devices e.g. having embedded operating systems can also be supported.

