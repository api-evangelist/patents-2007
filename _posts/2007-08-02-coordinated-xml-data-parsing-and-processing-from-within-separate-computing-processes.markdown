---

title: Coordinated XML data parsing and processing from within separate computing processes
abstract: Embodiments of the present invention address deficiencies of the art in respect to extensible markup language (XML) data processing and provide a novel and non-obvious method, system and computer program product for inter-device transfer of parsed XML documents. In one embodiment of the invention, a markup serialization method can be provided. The method can include receiving a request in a second computing process for offloaded parsing of markup from an application in a first computing process, retrieving markup from the application, parsing the markup in the second computing process to produce a serialized data object for the markup, placing the serialized data object into shared memory for the application, and returning a reference to the serialized data to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010891&OS=08010891&RS=08010891
owner: International Business Machines Corporation
number: 08010891
owner_city: Armonk
owner_country: US
publication_date: 20070802
---
The present invention relates to Extensible Markup Language XML document parsing and processing and more particularly to the use of separate processing appliances to perform XML parsing and XML processing.

The Extensible Markup Language XML is a markup language specification widely credited with improving the functionality of the World Wide Web by making data self describing thereby allowing the identification of information in a more accurate flexible and adaptable way. XML is referred to as extensible because XML is not a fixed format like the hypertext markup language HTML which is a single predefined markup language. Rather XML is a meta language that describes other languages. As such XML allows for the design of other markup languages for limitless different types of documents. XML can act as a meta language because XML is written according to the standardized general markup language SGML the international standard meta language for text document markup.

For an XML document to be acceptable to an end user the XML document must conform to a predefined structure. An XML schema is an XML based representation of the structure of an XML document. Through its support for data types and namespaces an XML schema has the potential to describe the expected structure for XML elements and attributes. As such prior to an XML document being utilized the XML document can be validated to ensure that the XML document conforms to its corresponding XML schema.

Validation can involve the parsing of an XML document and the construction of a document object model DOM tree for the XML document. Once a DOM tree has been constructed the nodes of the DOM tree can be traversed in order to confirm that the structure of the XML document conforms to a referenced schema. As it will be apparent then to the skilled artisan the parsing process can be resource consuming in nature. To address the resource consumptive nature of XML document parsing XML processing appliances have been used to perform XML document parsing separately from applications requiring XML document processing.

Where a separate XML processing appliance provides XML document parsing a client application can call an application programming interface API that forwards the XML document to the XML processing appliance for parsing and optionally schema validation. The XML processing appliance can perform parsing on the received XML document and return a parsed result to the application. As a result significant performance advantages can be achieved by offloading the XML parsing to the XML processing appliance. Yet significant overhead remains in the packaging and communication of the XML document between the application and the XML processing appliance and communication of the resulting serialized data between the appliance and the application.

Embodiments of the present invention address deficiencies of the art in respect to XML data processing and provide a novel and non obvious method system and computer program product for inter device transfer of parsed XML documents. In one embodiment of the invention a markup serialization method can be provided. The method can include receiving a request in a second computing process for offloaded parsing of markup from an application in a first computing process retrieving markup from the application parsing the markup in the second computing process to produce a serialized data object for the markup placing the serialized data object into shared memory for the application and returning a reference to the serialized data to the application.

In one aspect of the embodiment retrieving markup from the application can include receiving a pointer to the markup in the shared memory and retrieving the markup from shared memory at an address associated with the pointer. In another aspect of the embodiment returning a reference to the serialized data to the application can include rewriting the request with a pointer to the serialized data object in the shared memory and returning the request to the application. In yet another aspect of the embodiment returning a reference to the serialized data to the application can include rewriting the request with a pointer to a relocatable form of the serialized data object in the shared memory and returning the request to the application.

In another embodiment of the invention a parsed markup serialization data processing system can be provided. The system can include an application disposed in a first computing process a markup parser disposed in a second computing process shared memory for the application and a binder communicatively coupled both to the application and the parser and disposed in the second computing process. The binder can include program code enabled to receive a request for offloaded parsing of markup from the application to retrieve markup from the application to pass the markup to the parser for parsing into a serialized data object to place the serialized data object into the shared memory and to return a reference to the serialized data object to the application. Optionally the markup can include XML markup.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for inter device transfer of serialized parsed XML markup. In accordance with an embodiment of the present invention XML markup provided by an application in a request from a primary computing process can be parsed and serialized into a serialized data object in a secondary computing process. Once serialized the data object can be placed in shared memory relative to the computing processes and a memory pointer to the data object can be returned to the consuming application in the primary computing process by replacing the XML markup in the request with the memory pointer. The consumer application in turn can access the serialized data object as if the data object had been serialized within the primary computing process rather than in the secondary computing process.

In illustration is a schematic illustration of an XML data processing and consumption system for inter device transfer of parsed XML markup. The system can include separate primary and secondary computing processes A B coupled to one over a data communications network channel. In this regard the separate primary and secondary computing processes A B can subsist in a single host computing platform such that the data communications network channel is TCP IP inter process communications. Alternatively the separate primary and secondary computing processes A B can subsist in a different host computing platforms such that the data communications network channel is hardware bus coupling both computing platforms. As yet another alternative the separate primary and secondary computing processes A B can subsist in different host computing platforms separated over a computer communications network such that the data communications network channel is a traditional network communications channel.

The primary computing process A can support the operation of an application configured to consume XML markup. The secondary computing process B in turn can support the operation of an XML parser and can be bound to the primary computing process A by way of process binder . The process binder can include program code enabled to interact with both the application and shared memory utilized by the application . In this regard the program code for the process binder further can be enabled to maintain access to the shared memory through the primary process A in order to read from and write to the shared memory in behalf of the XML parser . The program code for the process binder yet further can be enabled to communicate with the application in order to receive a request for XML parsing of XML markup from the application .

In operation the application can request offloaded XML parsing of XML markup . The XML markup can be placed in shared memory where the XML markup can be accessed by the program code of the process binder . The program code of the process binder upon receiving the request can retrieve a pointer to the XML markup in the shared memory and can provide the XML markup to the XML parser for parsing. The XML parser in turn can parse the XML markup to produce a serialized data object . Thereafter the program code of the process binder can place the serialized data object into shared memory . Finally the program code of the process binder can rewrite the request to replace the XML markup with a pointer to the serialized data object in shared memory and the request can be returned to the application such that the application can utilize the serialized data object directly as programmatic data in the application .

In further illustration is a flow chart illustrating a process for inter device transfer of parsed XML markup. Beginning in block an offload request can be received to offload XML markup parsing from an application in a first computing process. In block the XML markup in the request can be placed in shared memory and a pointer to the shared memory can be retrieved in a second computing process. In block the XML markup in shared memory can be retrieved at the memory address referenced by the pointer and in block an XML parser can be invoked to parse the XML markup retrieved from shared memory.

The XML parser can return a serialized data object representative of the XML markup and in block the serialized data object can be stored in the shared memory. Once stored a pointer to the serialized data object can be determined in block and in block the offload request can be re written to replace the XML markup with the pointer to the serialized data object. For example the pseudo request 

As an alternative in lieu of providing a pointer to a memory address in shared memory to the serialized data object the serialized data object can be defined as a relocatable binary object utilizing a representation header in the request. In the alternative circumstance the re written request can appear for example as a MIME message using MTOP XOP representation headers such as

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

