---

title: Network connection manager
abstract: Described herein is technology for, among other things, facilitating network communications. It involves various techniques for facilitating network communications by creating virtual named channels which allow applications and thereby users to communicate over a wide variety of networks interfaces without requiring specific knowledge or programming corresponding to the underlying network. Thus, the technology may provide a uniform interface to handle network connections on different types of computing devices and over different types of networks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386614&OS=08386614&RS=08386614
owner: Microsoft Corporation
number: 08386614
owner_city: Redmond
owner_country: US
publication_date: 20070525
---
Computer networks connect various types of computer systems connected to various other devices in a manner that enables the network connected computer systems to communicate with each other. Each computer may have a plurality of network interfaces which connect the computer to different networks. Each network in turn may have specific protocols and procedures for communicating over the network.

In order to initiate communication over a computer network information corresponding to the specific protocols procedures and network interface of the network must be provided. For example for communication over a transmission control protocol internet protocol TCP IP based network specific information such as an IP address and TCP port must be provided in order for communication over the network to successfully occur. When applications are developed and subsequently used by users specific knowledge of the network connections and network protocols is necessary for communication over a computer. Thus application developers and or users may be required to have expert knowledge of protocols and information specific to the computer network and network interface. Furthermore in order to support a wide variety of network communication interfaces an application must have appropriate libraries and corresponding programs in order communicate over each individual interface. Therefore the requirement of network specific information procedures and network interface information in order to communicate over a computer network creates a burden for application developers and users. Unless the developers and users supply the proper requisite network information corresponding to their particular network they may be prohibited from being able to develop and use network based applications. Obtaining such network information may be problematic because software developers and users often are not intimately familiar with networking protocols and procedures.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Described herein is technology for among other things facilitating network communications. It involves various techniques for facilitating network communications by creating virtual named channels which allow applications and thereby users to communicate over a wide variety of networks interfaces without requiring specific knowledge or programming corresponding to the underlying network. Thus the technology may provide a uniform interface to handle network connections on different types of computing devices and over different types of networks.

In one implementation a set of application programming interface calls may be used to establish a virtual named channel and thereby facilitate communications over a variety of networks. Various functions are performed by a network connection manager such as creating virtual named channels on each interface and translating the virtual named channel and the host addresses. The name of the virtual named channel is used by an application or user to communicate over the computer network. Thus application developers and users are not required to provide network or network interface specific information in order to communicate over the network.

Techniques described herein provide communications over various networks without requiring users or application developers to have knowledge of specific network information. Thus users and developers are able to more easily use and develop applications which utilize network communication.

Reference will now be made in detail to the preferred embodiments of the claimed subject matter examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments it will be understood that they are not intended to limit the claimed subject matter to these embodiments. On the contrary the claimed subject matter is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the claimed subject matter as defined by the claims. Furthermore in the detailed description of the present invention numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. However it will be obvious to one of ordinary skill in the art that the claimed subject matter may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the claimed subject matter.

Some portions of the detailed descriptions that follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer or digital system memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure logic block process etc. is herein and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these physical manipulations take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system or similar electronic computing device. For reasons of convenience and with reference to common usage these signals are referred to as bits values elements symbols characters terms numbers or the like with reference to the claimed subject matter.

It should be borne in mind however that all of these terms are to be interpreted as referencing physical manipulations and quantities and are merely convenient labels and are to be interpreted further in view of terms commonly used in the art. Unless specifically stated otherwise as apparent from the discussion herein it is understood that throughout discussions of the present embodiment discussions utilizing terms such as determining or outputting or transmitting or recording or locating or storing or displaying or receiving or recognizing or utilizing or generating or providing or accessing or checking or notifying or delivering or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data. The data is represented as physical electronic quantities within the computer system s registers and memories and is transformed into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Described herein is technology for among other things facilitating network communications. It involves various techniques for facilitating network communications by creating virtual named channels which allow applications and thereby users to communicate over a wide variety of networks interfaces without requiring specific knowledge or programming corresponding to the underlying network. Thus the technology may provide a uniform interface to handle network connections on different types of computing devices and over different types of networks.

In one implementation a set of application programming interface calls may be used to establish a virtual named channel and thereby facilitate communications over a variety of networks. Various functions are performed by a network connection manager such as creating virtual named channels on each interface and translating the virtual named channel and the host addresses. The name of the virtual named channel is used by an application or user to communicate over the computer network. Thus application developers and users are not required to provide network or network interface specific information in order to communicate over the network.

Techniques described herein provide communications over various networks without requiring users or application developers to have knowledge of specific network information. Thus users and developers are able to more easily use and develop applications which utilize network communication.

With reference to an exemplary system for implementing embodiments includes a general purpose computing system environment such as computing system environment . Computing system environment may include but is not limited to desktop computers laptops tablet PCs mobile devices and smartphones. In its most basic configuration computing system environment typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing system environment memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

System memory may include among other things Operating System OS application s and network connection manager . Application s may include a variety of applications some of which may access data and resources on a computer network. Network communication manager facilitates communication of application s and thereby users through communications connection s without requiring applications or users to provide specific network details. It is appreciated that embodiments of network connection manager may be integrated or otherwise be included in operating system .

Additionally computing system environment may also have additional features functionality. For example computing system environment may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and nonremovable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing system environment . Any such computer storage media may be part of computing system environment .

Computing system environment may also contain communications connection s that allow it to communicate with other devices. Communications connection s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Communications connection s may allow computing system environment to communication over various networks types including but not limited to Bluetooth Ethernet Wi fi Infrared Data Association IrDA Local area networks LAN Wireless Local area networks WLAN wide area networks WAN such as the internet serial and universal serial bus USB . It is appreciated the various network types that communication connection s connect to may run a plurality of network protocols including but not limited to transmission control protocol TCP internet protocol IP real time transport protocol RTP real time transport control protocol RTCP file transfer protocol FTP and hypertext transfer protocol HTTP .

Computing system environment may also have input device s such as a keyboard mouse pen voice input device touch input device remote control etc. Output device s such as a display speakers etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

The claimed subject matter is described in terms of these example environments. Description in these terms is provided for convenience only. It is not intended that the invention be limited to application in this example environment. In fact after reading the following description it will become apparent to a person skilled in the relevant art how to implement the claimed subject matter in alternative embodiments.

The following discussion sets forth details of the present technology systems for network communication management. illustrates example components used by various embodiments of the present technology. System includes components or modules that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside for example in data storage features such as computer usable memory removable storage and or non removable storage of . The computer readable and computer executable instructions are used to control or operate in conjunction with for example processing unit of . It should be appreciated that the aforementioned components of system can be implemented in hardware or software or in a combination of both. Although specific components are disclosed in system such components are examples. That is embodiments are well suited to having various other components or variations of the components recited in system . It is appreciated that the components in system may operate with other components than those presented and that not all of the components of system may be required to achieve the goals of system .

Referring to connection APIs provide a common and unified set of functions which may be called by application s or user s to communicate over a network. In one embodiment the function call may be linked into a single dynamic link library DLL with an additional exported library. Connection APIs can enumerate the available virtual named channels and associated names of the virtual named channels. Connection APIs includes a set of functions which allow application s and user s to communicate by using the name of the virtual named channel rather than resolving network specific information such as IP address and port number. Connection APIs may be used to facilitate communication on each network interface on a computer. In one embodiment the application that creates a virtual named channel and is listening for clients may be known as a server. The computer or host which connects to the virtual named channel or server may be known as a client. Thus system allows applications on different computers to communicate without knowing how the computers are connected.

Channel management module provides the underlying implementation of the APIs of connection APIs . Each virtual named channel created by channel management module may have a unique name and allow bidirectional communication. Channel management module may create a virtual named channel for each connection between two computers. In one embodiment the virtual named channel may be formatted as Servername channelname whereby Servername is either the name of a remote computer or a period which specifies a local computer. Thus when a virtual named channel is created the Servername portion will be a period. In another embodiment the channel name length may be limited to a specific number of characters e.g. 256 characters . The channel names may also be case insensitive. Channel management module may include virtual named channel service channel instance management module data transferring module and exception handling module .

Virtual named channel service manages each virtual named channel which can be connected to by one or more clients. The computer providing the virtual named channels can be viewed as a server to the extent that resources and or services are provided to clients. Virtual named channel service ensures each virtual named channel on a server is associated with an actual communication socket and the server will begin to listen on the socket before any clients can connect with the virtual named channel. In one embodiment a TCP socket bound on a specific port is created for each virtual named channel.

Channel instance management module manages the mapping relationship between virtual named channel instances and the underlying communication sockets. In one embodiment channel management module sends requests to each host requesting information about all the virtual named channels on the host such as channel name channel properties and channel end point address e.g. IP and port . Channel management module may save the information to a local cache and then return the virtual named channel information to the application or user. In another embodiment the content of the cache may be returned directly without querying other hosts when the application enumerates available virtual named channels for better performance. Data transferring module controls how data is sent and received over the virtual named channel. Exception handling module handles exceptions and errors on virtual named channels. In one embodiment exception handling module ensures exceptions and errors occurring on the underlying communication sockets are reflected on the corresponding virtual channel instance and applications are notified about these exception and error events.

Communication between a virtual named channel server and client is based on the particular virtual named channel instance. In one embodiment the virtual named channel instance may be implemented as a wrapper of low level TCP socket objects which may be managed by the operating system. For example when a client connects to a server channel an underlying TCP socket is created and connects with the TCP server socket of the server channel and subsequently the underlying TCP socket is wrapped by a virtual named channel instance which is used by the client to communicate with the server. At the server side a TCP socket is created each time a client connects to the server the TCP socket is then wrapped by a virtual named channel instance with is used by the server application to communicate with the client. The underlying sockets on each side are responsible for actually transferring the data through the virtual named channel. The relationship between the virtual named channel instance and the underlying socket is managed by channel instance manager . Exceptions and errors occurring on the underlying socket are reflected on the corresponding virtual channel instance and applications are notified about the exception and error events.

Each virtual named channel instance can be operated in blocking mode or non blocking mode. In blocking mode receiving and sending operations on a virtual named channel will be blocked until there is data to be read from the channel or the data sent to the channel has finished being transmitted. In non blocking mode reading and sending operations on a channel may immediately be performed and the actual operations on the virtual named channel instance are asynchronous.

Each virtual named channel can further be operated in a message based or byte stream based format. In message based format the basic unit of data used on the channel instance is a well defined message. In one embodiment a message based channel instance will be operated in blocking mode. For example a reading operation will be blocked until the whole message including a message header and data portion has been received. As another example a subsequent sending operation will be blocked until all parts of the message have been sent out through the virtual named channel. In another embodiment a channel instance is byte stream based and the basic unit of data on the channel instance is a byte. Byte stream based channel instances may be operated in blocking or non blocking mode.

Host management module includes host discovery module and host address resolving module . Each network connection manager instance may have assigned group and password information such that each virtual named channel for a particular network connection manager instance may have the same group information. The group information may be used by host management module to guarantee that only hosts with the same group name and password can discover each other. In one embodiment the group name and password may be specified by application s and or user s when a network connection manager instance is initialized. Host management module facilitates discovery of nearby computers or hosts which are also running a network connection manager supporting virtual named channels and stores a list of the computers detected. In one embodiment when the network connection manager is initialized on a host in a LAN or a WAN supporting IP multicast the host may join a special multicast group and host management module may send an IP multicast packet containing the host s network address to the special multicast group to indicate that it is joining the associated network of computers or framework to share resources. In response other hosts that have already joined the special multicast group may reply directly to the host with UDP packets to indicate their existence and associated host information. This process allows the newly joined host and the existing hosts to discover each other. On each computer or host that has joined the multicast group host management module will send a multicast packet to the special multicast group every few minutes to indicate its existence. When a host is leaving host management module will send a multicast packet to notify others hosts that the host is leaving. If the network e.g. LAN and WAN does not support IP multicast IP broadcast may be used for host discovery. When the network does not support IP multicast or IP broadcast i.e. Ad hoc Bluetooth network the discovery process is performed by host management module by using operating system calls and related interfaces provided by an operating system e.g. Bluetooth protocol stack . When a host is discovered heartbeat messages may be sent periodically to detect if a host is still operating. In response to a heartbeat message a host may respond with a list of virtual named channels and detected host list.

In another embodiment the host management module on each computer will transmit the list of nearby computers to each other to allow each computer to discover the other computers without which would not otherwise be possible. For example where a first computer can discover a second computer but cannot discover a third computer which is discoverable by the second computer the second computer can share the list of nearby computers with the first computer and thereby allow the first computer to discover and communicate with the third computer. The exchange of computer list information may be done in response to a heartbeat signal or packet which is sent to detect if a computer is still operating.

Host discovery module hides the details of discovering available hosts in the network environment. For example if the network connection is a LAN or WAN internet protocol IP multicast messages may be used to discover other computers. In contrast if the network is an Ad hoc Bluetooth network direct searching may be performed to discover other hosts.

Host address resolving module resolves the network address of a host. For example host address resolving module may resolve a virtual named channel servername to a specific IP address and TCP port which is used to carry out network communications.

The following discussion sets forth in detail the operations of the present technology for network communication management. With reference to flowcharts and each illustrate example blocks used by various embodiments of the present technology. Flowcharts and include processes that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. The computer readable and computer executable instructions reside for example in data storage features such as computer usable memory removable storage and or non removable storage of . The computer readable and computer executable instructions are used to control or operate in conjunction with for example processing unit of . Although specific blocks are disclosed in flowcharts and such blocks are examples. That is embodiments are well suited to performing various other blocks or variations of the blocks recited in flowcharts and . It is appreciated that the blocks in flowcharts and may be performed in an order different than presented and that not all of the blocks in flowcharts and may be performed.

At block each connection interface is initialized. In one embodiment a module specific to each connection interface is loaded. For example TCP IP and Bluetooth modules may be loaded for the Bluetooth connection interface.

At block the connection modules are registered. As each connection is initialized the corresponding connection interface module is registered which allows a network connection manager access to the functions in each module. In one embodiment as each connection module is registered a handle for the corresponding connection is created. Referring to the above example when the TCP IP and Bluetooth modules are registered the network connection manager can access the functions associated with the TCP IP and Bluetooth modules to facilitate network communication.

At block a list of all the connection interfaces information is created or updated. In one embodiment each list entry may contain a handle for the connection the interface name and a list of interface information. The list of connection interface information may be used by various portions of the network connection manager to perform tasks related to carrying out network communications such as making connections and determining which connection to use.

At block a virtual named channel is created on each communication interface. Each connection interface may be initialized as described above. The virtual named channels may be assigned a name such as the machine or host name upon creation. In one embodiment a network connection manager calls a create virtual named channel function when it starts. This function may create a virtual named channel on each communication interface so a single virtual named channel can communicate with other computers on every connection interface.

At block a list of all virtual named channels is created or updated. For example the list may contain the virtual named channels that were created in the prior blocks. In one embodiment each list entry may contain a list head entry the name of the virtual named channel channel information and a pointer to a callback function for accepting a connection.

At block a group is assigned to the virtual named channels. The group information may be assigned based on a network connection manager instance such that all virtual named channels created by a single network connection manager instance have the same group information. The group name and password may be specified by application s or user s when the network connection manager is initialized. The group and password assignment for a virtual named channel can be used to allow connections in only a specific group of associated computers or framework of computers sharing resources. The group and password assigned to the virtual named channel may be stored in the list of channels created. In one embodiment the group name assigned to each virtual named channel may be the name of the group of associated computers or framework.

At block the network connection manager starts listening on each virtual named channel. The network connection manager may thus act as a server and listen for connection requests over a virtual named channel.

At block broadcast messages are sent to announce the host and the corresponding virtual named channels. In one embodiment multicast broadcast message are sent out by a host management module as described above. The broadcast messages communicate to other computers on the network where a specific computer is and how to communicate with the computer. For example on a IP based network a multicast packet may be sent out so computers can join a special multicast group as described above. An exemplary broadcast message data structure is described below.

At block connections to a virtual named channel are accepted. As described above the network connection manager may use a group assigned to the virtual channel to verify group membership prior to accepting connections thereby ensuring that the computer trying to connect is part of the associated network of computers or framework.

At block the virtual named channels are destroyed. After network connection manager has closed the channels as requested by application s or user s the network connection manager may destroy or disconnect the virtual named channels. The destruction of a virtual named channel means that connections can no longer be made to the virtual named channel. If all the channels are destroyed the computer may not be able to communicate with other computers in the associated network of computers or framework for sharing resources. In one embodiment the closing of channel and destroying of channels may be invoked by API calls to the network connection manager. The destruction of a channel may release resources associated with the virtual named channel as described herein.

At block a broadcast message is received. The broadcast message may include a plurality of information including but not limited to the virtual channel name host information group information and connection information. In one embodiment the broadcast message may have been generated by a computer that has established a virtual named channel as described above and may be acting as a server or provider of data services and resources such as devices. When a host receives a broadcast message e.g. multicast broadcast the host may discard the message if the group name and password do not match the group information of the host. Based on the broadcast message information may be retrieved such as a device list from the computer which sent the broadcast message. The broadcast message may be formatted as described below.

At block the host which sent the broadcast message is added to the list of remote channels. The relevant content of the broadcast message may also be added to the list of remote channels. In one embodiment each entry in a list of remote channels may include a list head entry the connection interface handle the address defined by the interface the name of the virtual named channel provider the machine type a channel description a property of the provider channel and a list of the sub channels.

At block a virtual named channel is connected to by the network connection manager. In one embodiment when a network connection manager instance is initialized a privileged virtual named channel with no name may be created which may be used for other hosts to connect to and for sending heartbeat messages. The underlying port of the privileged virtual named channel may be specified a broadcast message and stored in a broadcast message data structure as described herein. The connection to the virtual named channel may be made based on information in the list of remote channels which derives from the broadcast message received. The connection may be used to access various data services and or devices.

At block information about the virtual named channel provider or host is retrieved. In one embodiment information about the devices and other host resources available through the virtual named channel is retrieved by an API call.

At block information retrieved about the virtual named channel provider is stored. In one embodiment device and other information retrieved is stored for use by a network connection manager.

At block a connection to a virtual named channel is initiated. In one embodiment the connection to a virtual named channel may be initiated by an API call with a parameter of the handle of a provider or host from the list of remote providers based on a broadcast message received as described herein. In another embodiment the handle of the provider may be obtained from a device provider stored from information retrieved over a virtual named channel as described herein.

At block the connection status is reported. In one embodiment while the connection to the virtual named channel is being attempted a message box may be displayed informing users of the status e.g. Connecting . . . Please wait . . . . 

At block a selection of the optimal connection interface is performed. The selection may be performed when there is more than one connection interface available for a virtual named channel and the optimal network connection interface is chosen to establish a physical network connection. In one embodiment the selection may be based on factors such as available bandwidth or the first connection discovered between two computers. It is appreciated that only one connection interface is needed for a network connection manager to facilitate network communications.

At block a connection between the computers is established. The connection may be established via the optimal network connection determined as described above. In one embodiment after the connection is established a handle instance of the connection is stored. The data structure storing the handle may include a connection interface handle a handle for the connection and a handle to the provider or host.

At block group information is sent. The group information may be the group information e.g. group name and password stored and used as described above. In one embodiment the network connection manager which has established the connection provides a length value and a group name to communicate the group name.

At block a response based on the group provided is received from the computer accepting or denying the connection on the virtual named channel. In one embodiment the computer accepting the connection on the virtual named channel identifies if both computers are in the same group or framework and returns an accept code of 1 if the computers are in the same group or a refuse code of 0 if the computers are not in the same group.

At block a connection over the virtual named channels between the network connection managers of each machine is established. In one embodiment between the network connection managers is established only after the group name identification or verification is successful.

At block communications are performed over the virtual named channel. In one embodiment read channel and write channel API calls may be made by application s or user s to send and receive data over the virtual named channel. For example the read function may call the specified interface s read function to read data from the virtual named channel. The read and write functions may use a handle for the virtual named channel connection as a parameter to the API function call.

At block the virtual named channel is disconnected. This may be invoked by API calls by application s or user s when the data transfer is complete and the virtual named channel connection is no longer needed.

At block the virtual named channel connection resources are released. In one embodiment the channel instance which was allocated when the connection was established is released.

Data structure may also be stored in a broadcast message format on computer readable medium. In one embodiment data structure is UDP packet suited for broadcasting information corresponding to computers in an associated computer network or framework for sharing resources. The storing of data structure in a packet allows a computer to broadcast the status of the computer to other computers in the associated network of computers or framework.

Data structure includes a first data field representing a flag. The flag may indicated whether the message is a passive broadcast or an active broadcast. In one embodiment the flag may have two options QUERY PROVIDER INFO FLAG and PROVIDER INFO FLAG. For example because a broadcast message may lost when a QUERY PROVIDER INFO FLAG is received a passive broadcast message with PROVIDER INFO FLAG is sent in response. The two different flags prevents the two machines from infinitely broadcasting the messages.

Data structure may further include a second data field representing the status of a computer or host. In one embodiment the second data field or status field may have three settings start running and close. For example the status field may indicate whether the broadcast message was sent out when the network connection manager was starting running or closing.

Data structure may also include a third data field representing the port number. For example third data field may contain the TCP port that can be used to connect to the virtual named channel.

Data structure may further include a fourth data field representing a machine type. Data structure may further include fifth data field representing the machine name. For example the fifth data filed may include the machine name which may be used to connect to the machine or host. Data structure may further include sixth data field representing the size of the machine name. For example sixth data field may be used to ensure that the machine name is stored in a data structure with the correct size.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

