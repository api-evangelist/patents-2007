---

title: Test framework for testing an application
abstract: A device, method and/or computer-readable medium for testing an application within a test framework includes a framework controller associated with the test framework installed on a master device and a test driver associated with the test framework installed on one or more client devices. The master device is connected to the one or more client devices and a virtual machine (VM) module is installed on each of the one or more client devices. VMs can be created on the client devices and the application is installed on at least one of the VMs. The application is executed on the VMs according to a test scenario file. The framework controller collects data to generate an output result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07823023&OS=07823023&RS=07823023
owner: Red Hat, Inc.
number: 07823023
owner_city: Raleigh
owner_country: US
publication_date: 20070226
---
The present invention relates generally to methods and systems for testing software applications to be run in an inter machine environment.

An inter machine environment such as a computing network infrastructure which includes a plurality of computing devices connected to each other directly by for example a wireless or wired connection or indirectly by for example a local area network LAN wide area network WAN or the Internet. The network infrastructure can have one or more of a vast number of network models such as for example a centralized or distributed network in which one or more client devices are connected to a server to access resources such as memory or particular applications or a peer to peer network in which any client device can function as the server. The computing devices in the network infrastructure may not all have the same configuration. For example some of the computing devices can have different hardware configurations or operating systems.

A software application intended to be executed on one or more computing devices in a network infrastructure must execute properly in all of the computing devices in the network regardless of the nature of the network connection the hardware configuration or operating system type of the computing devices. Further software applications that help facilitate the network infrastructure itself such as for example an oracle or software applications that interact with client programs to take advantage of the network infrastructure such as for example email network security etc. must not only execute properly but perform at a high quality of service QOS level.

Therefore it is necessary to test the operability of a software application in a framework harness or execution environment that provides a network infrastructure of diverse computing devices. In addition it is necessary to test a QOS of the software application and perform stress testing over diverse computing devices. The same concern is applicable to software applications intended to be run across multiple operating systems in a single computing device.

Software applications are conventionally tested within a test framework in which computing devices referred to here as client devices are connected to a master device. Initially client devices having a predetermined configuration in accordance with a test scenario are selected. The software application to be tested and any client applications are then installed on the client devices. A test scenario written in for example a high level language is input into a test framework controller at the master device to thereby control operation of the software application and client applications at the client devices and generate an output result based upon the software application performance. A software engineer can change the test scenario and continuously monitor the results at the master device to test a QOS of the software application and perform stress testing over diverse client devices.

However the conventional approach requires a number of client devices having the configuration specified in the test scenario. It would be desirable to have a test framework in which particular client devices having the needed configuration were automatically generated. It would be further desirable for the test framework to be able to read test scenarios written in a low level language.

While a general background including problems in the art are described hereinabove with occasional reference to related art or general concepts associated with the present invention the above description is not intended to be limiting since the primary features of the present invention will be set forth in the description which follows. Some aspects of the present invention not specifically described herein may become obvious after a review of the attendant description or may be learned by practice of the invention. Accordingly it is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only in nature and are not restrictive of the scope or applicability of the present invention.

Accordingly one or more embodiments relate generally to a testing automation framework a master device and plurality of client devices in which the testing automation framework is installed a method for implementing the testing automation framework and or a computer readable medium on which instructions for implementing the testing automation framework are stored. The testing automation framework is for testing software applications in for example an inter machine environment. The inter machine environment can include the plurality of client devices having a virtual machine module installed thereon. The testing automation framework which will be referred to here as a test framework is installed in a master device and one or more generally a plurality of client devices connected to the master device.

The test framework can control the client devices to automatically create virtual machines VMs on the plurality of client devices install the software application to be tested which will be referred to here as an application and client applications of the application in the VMs as well as testing execution of the application on the VM and collecting data regarding the performance of the application to generate an output result based upon the collected data at the master device. A test scenario file at the master device can specify the client devices on which the virtual machines are created the application to be installed and the manner of controlling application execution. Preferably the test scenario file is a non coded text file that is input into a framework controller of the test framework.

Other embodiments also provide a processor included in the master device that is configured to generate control signals to thereby create one or more VMs on the client devices install the application on one of the VMs and control operation of the VMs according to the test scenario file.

In overview the present disclosure concerns a test framework for testing software applications in an inter machine environment. The test framework can be a software application stored on a computer readable medium that is installed on a master device and one or more client devices connected to the master device.

The instant disclosure is provided to further explain in an enabling fashion the best modes of performing one or more embodiments of the present invention. The disclosure is further offered to enhance an understanding and appreciation for the inventive principles and advantages thereof rather than to limit in any manner the invention. The invention is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

It is further understood that the use of relational terms such as first and second and the like if any are used solely to distinguish one from another entity item or action without necessarily requiring or implying any actual such relationship or order between such entities items or actions. It is noted that some embodiments may include a plurality of processes or steps which can be performed in any order unless expressly and necessarily limited to a particular order i.e. processes or steps that are not so limited may be performed in any order.

As further discussed herein below various inventive principles and combinations thereof are advantageously employed to provide a test framework for testing a software application.

Reference will now be made in detail to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Referring now to a simplified and representative inter machine environment in which the test framework can be implemented will be discussed and described. The inter machine environment can include a master device that is connected to a plurality of client devices directly and indirectly. In the exemplary inter machine environment the master device can have a direct connection with client devices and an indirect connection with client devices via a network connection such as for example a local area network LAN wide area network WAN or the Internet. The direct and indirect connections can be secure or non secure wired or wireless or even partially wireless and partially wired. Further the indirect connection can use a communications protocol such as for example Transmission Control Protocol Internet Protocol TCP IP for data communication. In some instances one or more of the client devices and the master device can exist within the same computer and be connected with a data bus or high speed serial connection or the like. Generally the client devices are connected to the master device in any manner. The reference numeral and iterations thereof will be used to refer generally to a client device that is connected to the master device .

The master device may be a general purpose computer or dedicated computing platform configured to execute the test framework such as for example a Linux or Unix box. The client devices can be a personal computer or a workstation including for example a 64 bit processor a 32 bit processor or a dual core processor and a virtual machine VM module installed thereon. Exemplary VM modules include a Xen module or a VMWare module.

Referring to the logical elements of the test framework will be discussed. Generally the test framework is installed in the master device and each of the plurality of client devices . Particularly as shown a framework controller associated with the test framework is installed at the master device and a test driver associated with the test framework is installed at each of the client devices . The test framework is driven by a test scenario file listing all of the test cases how the test cases are to be executed and on which particular client devices parts of the test case will be executed. A test controller at the framework controller reads the test scenario file and allocates different parts of the test to a logical element for control service at the test drivers of the client devices according to the test scenario file . It should be appreciated that although only client devices are shown the different parts of the test can be allocated to numerous other client devices as well as even a portion of the test being performed locally at the master device . It should also be appreciated that the framework controller and test driver can be software modules processes or the like for implementing high level or low level drivers. Further the drivers can be integrated in the framework or alternatively be provided by third party modules.

The control service at the client devices performs a portion of the test case allocated to the particular client device by the test controller which will be referred to as a remote test case part . For example here the control service can create a VM on the client device install the application or an application client to be tested on the VM and execute the application or application client. In order to ensure that all of the remote test case parts are performed in the correct order specified by the test scenario file a test part synchronizer at the framework controller can synchronize execution of the remote test case parts . A logical element for results service at the framework controller collects data from each of the remote test case parts and generates a results file to be displayed at the master device . That is the logical element for results service is a data collection module for collecting data associated with the output result of the remote test case part from the VM.

The test scenario file which is preferably a non coding format text file includes a set of primitives that can be read by the test controller for performing operations on the test drivers at the client devices. Particularly when the test controller reads a CREATE VM primitive in the test scenario file the test controller sends a control signal to the control service at the client device to create a VM on the client device. For example if the test scenario file includes a command such as Create VM on client device 1 and call it VM1 the test controller will send a control signal to the control service which then creates a VM on that particular client device and names the VM as VM1. 

The CREATE VM primitive can further be associated with a hardware primitive for searching for a particular one of the client devices that has a particular hardware configuration necessary to support operation. For example if the test scenario file includes a command such as Create VM of disk space 1 Gbytes and RAM size 1 Gbytes on client device with 64 bit processor and call it VM1 the test controller will search for a particular client device among the client devices having a 64 bit processor and the control service can then create a VM having disk space of 1 Gbytes and RAM size of 1 Gbytes on that particular client device and name the VM as VM1. 

The test controller sends a control signal to the control service for setting a hardware specification of the VM when it reads a VM HARDWARE SPECIFICATION primitive in the test scenario file . For example if the test scenario file includes a command such as Create VM1 with 256 MB disk space and RAM the test controller will search for a client device having sufficient capabilities to satisfy these parameters and the control service can then create the VM on the client device with 256 MB disk space and RAM and name the VM as VM1. 

The test controller sends a control signal to the control service to install a particular operating system specified by a VM OPERATING SYSTEM primitive read in the test scenario file . The test controller sends a control signal to the control service to install the application to be tested which is specified by an application primitive in the test scenario file . For example if the test scenario file includes a command such as Install Linux on VM1 and install Directory Server on VM1 the test controller sends a control signal to the control service to install the Linux operating system on the VM1 of the particular client device and to install the Directory Server as the application to be tested on the VM1.

The test controller at the framework controller sends a control signal to the control service to save a state of the VM to a saved state file when it reads a VM SAVE VM STATE primitive in the test scenario file . For example if the test scenario file includes a command such as save VM1 as VM 2006 07 01 the test controller sends a control signal to the control service to save the present state of all the programs running on VM1 as a saved state file to be saved at the master device .

The test controller at the framework controller sends a control signal to the control service of a particular client device to restore the VM to an active state on one of the plurality of client devices when it reads a RESTORE VM STATE primitive in the test scenario file . For example if the test scenario file includes a command such as restore VM VM 2006 07 01 to machine XYZ the test controller sends a control signal to the control service at the named client device XYZ to restore the VM1 with the previous state of all the programs running on VM1.

The test controller at the framework controller sends a control signal to the control service to destroy a VM when the test controller reads a DESTROY VM primitive in the test scenario file . For example if the test scenario file includes a command such as destroy VM1 the test controller will delete VM1 from memory.

Referring to exemplary operations of the test framework according to a first exemplary test scenario file will be discussed. As discussed above the framework controller is driven by a test scenario file listing all of the test cases how the test cases are to be executed and on which particular client devices parts of the test case will be executed. A first exemplary test scenario file is shown in . The test scenario file describes a test case in which operation of a software application for implementing a Directory Server which will be referred to here as a Directory Server is tested across multiple operating systems in an inter machine environment. As shown the test scenario file can be a non coding text file. The text has a file name of DIRECTORY TEST PLAN1.txt as shown.

As shown in the master device can include the framework controller associated with the test framework as discussed above with respect to as well as a results log for storing for example the results file as well as test related data. Of course the results log can be part of the test framework rather than a separate logical element. The master device can have an indirect connection such as a network connection with client devices . The client devices includes test drivers associated with the test framework as discussed above with respect to .

The test scenario file can be input into the framework controller or that is the test can be run by the test framework by typing a command such as test framework DIRECTORY TEST PLAN1.txt on for example the Unix command line if the master device is a UNIX box. After the test scenario file is input into the framework controller the test controller sends control signals to the test drivers to perform their allocated portions of the test case. Particularly as shown in in response to the controls signals the test driver creates a first VM having 500 MB of disk space and names it VM1 and installs the Linux operating system on the first VM . The test driver installs the Directory Server on the first VM and names it DS1. The test driver creates a second VM on the client device and names it VM2 and installs the Windows 2003 operating system on the second VM . The test driver installs a test client on the second VM . The test client will be a client application of the Directory Server .

Referring to in accordance with the portion of the test allocated to the test driver the test client attempts to send a request to the Directory Server to create 1000 users which is shown as CREATE USERS. In response the Directory Server creates the 1000 users which are shown as USER A USER B USER C . . . USER Z. The framework controller can collect a result indicating successful user creation of the users by the Directory Server and store the result in the results log which is shown as USERS CREATED. 

Referring to the test client attempts to obtain an address for a particular user such as for example USER A. The Directory Server sends a reply including the address information shown as USER A ADDRESS. The framework controller can collect a result indicating successful transmission of the user address by the Directory Server and store the result in the results log as shown as ADDRESS PASSED. Thereby the test framework can determine if the Directory Server executes properly across the multiples operating system platforms and over the network connection .

It should be noted that the test could not be executed properly if for example the test client attempted to send the request to the Directory Server to create 1000 users before the test driver had installed the Directory Server in the first VM . However the test part synchronizer at the framework controller described above with reference to can synchronize the execution of the respective test drivers to prevent for example sending of the request before creation of the Directory Server on the first VM .

Referring to exemplary operations of the test framework according to a second exemplary test scenario file will be discussed. The second exemplary test scenario file is shown in . The test scenario file describes a test case in which operation of a software application for implementing a Certificate Manager which will be referred to here as a Certificate Manager is tested across multiple operating systems in an inter machine environment. As shown the test scenario file can be a non coding text file. The text has a file name shown as CM TEST PLAN1.txt. The test scenario file can be input into the framework controller or that is the test can be run by the test framework by typing a command such as test framework CM TEST PLAN1.txt on for example the Unix command line if the master device is a UNIX box.

Referring to after the test scenario file is input into the framework controller the test controller of the framework controller sends control signals to the test drivers to perform their allocated portions of the test case. Particularly in response to the controls signals the test driver creates a first VM having 500 MB of disk space and names the VM VM1 and installs the Linux operating system on the first VM . The test driver installs the Certificate Manager on the first VM and names the Certificate Manager CM1. The test driver creates a second VM and names it VM2 and installs the Windows 2003 operating system on the second VM . The test driver installs an email client application on the second VM .

Referring to the Certificate Manager creates a number of certificates for users which are shown as CERT A CERT B CERT C . . . CERT Z. The framework controller can collect data indicating successful creation of the certificates by the Certificate Manager and store a result based upon the collected data in the results log which is shown as CERTS CREATED. The email client application attempts to send a certificate request to the Certificate Manager to obtain a certificate for a particular user which is shown as CERT A REQUEST. 

Referring to the Certificate Manager sends a reply including the certificate requested by the email client application . The reply is shown as CERT A. The framework controller can collect a result indicating successful transmission of the certificate by the Certificate Manager and store the result in the results log as shown as CERT PASSED. Thereby the test framework can determine if the Certificate Manager executes properly across the multiples operating system platforms and over the network connection.

Referring to exemplary operations of the test framework according to a third exemplary test scenario file will be discussed. In the first exemplary test scenario file shown in only one VM was installed in the client device . However the test framework is capable of creating a plurality of VMs on one client device . Particularly in the present example the test driver creates a first VM having 500 MB of disk space and names the VM VM1 and installs the Linux operating system on the first VM . The test driver installs the Directory Server on the first VM and names the Directory Server DS1. The test driver can create a second VM and name it VM2 a third VM and name it VM3 and a fourth VM and name it VM4 and install different operating systems for the VMs . The test driver installs a test client on the second VM a test client on the second VM and a test client on the second VM . The test clients are all client applications of the Directory Server . Thereby the test framework can determine if the Directory Server executes properly across the multiples operating system platforms and over the network connection.

Referring to a flow chart illustrating a process for testing an application within the test framework will be discussed. At the master device searches for particular ones of the plurality of client devices that will be part of the inter machine environment. For example the framework controller can search for particular client devices having a particular hardware configuration necessary to support operation in accordance with a VM HARDWARE SPECIFICATION primitive in the test scenario file expressing machine parameters.

At the master device creates a plurality of VMs on the particular client devices . Particularly the framework controller can send control signals to the test drivers of the particular client devices to thereby cause the test drivers to create and activate VMs. The hardware specification of the VM can be set according to a CREATE VM primitive for creating the VM on the one of the plurality of client devices and a VM HARDWARE SPECIFICATION primitive for setting a hardware specification of the VM in the test scenario file .

At the master device installs operating systems in the VMs. Particularly the framework controller can send control signals to the test drivers to thereby cause the test drivers to load operating systems specified in VM OPERATING SYSTEM primitives of the test scenario file in the VMs.

At the master device installs the application to be tested in the VMs. Particularly the framework controller can send control signals to the test drivers to thereby cause the test drivers to install the application in the VMs in accordance with an application primitive in the test scenario file . At the test drivers execute operation of the application according to the test scenario file to generate data. At the test drivers periodically output data regarding application execution. At the framework controller collects the data from the test drivers . At the framework controller generates the results file as an output result based upon the data collected from each of the plurality of client devices .

Referring to exemplary portions of the master device will be discussed. The master device includes an interface a processor and a memory as well as optionally known peripherals for interfacing with a user such as a display and input devices not illustrated . The interface is generally for providing an interaction between the hardware of the connection with the test drivers of the client devices and the hardware of the master device such as for example the processor . The interface may also be utilized in connection with another computer by known USB technology. The processor can be one of a variety of different processors including general purpose processors custom processors controllers compact eight bit processors or the like. The memory can be coupled to the processor and can be one or a combination of a variety of types of memory such as random access memory RAM read only memory ROM flash memory dynamic RAM DRAM a programmable ROM PROM flash memory and or an EEPROM. The memory may include multiple memory locations and store an operating system data and variables and executable code . Further the memory can include instructions such as computer programs associated with the test framework which can direct the processor in controlling the operation of the master device . The computer programs can include for example the framework controller machine addressing VM primitives client device hardware parameters and primitives and a VM module . These are described in more detail below.

The framework controller instructions are for implementing the framework controller shown in and discussed above. The machine addressing instructions are for maintaining addresses of client devices such as for example Internet Protocol addresses to ensure proper data communication.

The VM primitives instructions are for reading VM primitives in the test scenario file and sending control signals to the test drivers at the client devices to execute allocated portions of a test case accordingly. The VM primitives can include for example a CREATE VM primitive for creating a VM on one of the plurality of client devices a VM HARDWARE SPECIFICATION primitive for setting a hardware specification of the VM an application primitive for specifying an application to be installed on the VM a SAVE VM STATE primitive for saving a state of the VM and a VM OPERATING SYSTEM primitive for specifying an operating system to be installed on the VM a DESTROY VM primitive for destroying the VM and a RESTORE VM STATE primitive for restoring the VM to an active state based upon the saved state.

The machine hardware parameters and primitives are for reading hardware primitives in the test scenario file specifying a certain hardware specification for a client device and maintaining parameters regarding the hardware specification of each of the client devices in the inter machine environment such as for example a processor type memory capacity etc. The VM module can be for example a Xen or VMware module but is generally any module capable of creating one or more VMs.

Referring to an exemplary client device will be discussed. The client device includes an interface a processor and a memory . The interface is generally for providing the indirect or direct connection with the framework controller of the master device as well as with the test driver of other client devices . The processor can be one of a variety of different processors including general purpose processors custom processors controllers or the like such as a 64 bit processor a 32 bit processor or a dual core processor. The memory can be one or a combination of a variety of types of memory such as RAM ROM flash memory DRAM PROM flash memory and or an electrically erasable programmable ROM EEPROM or the like. The memory can include a basic operating system data and variables and executable code . Further the memory can include computer programs or instructions associated with the test framework such as those discussed below which can direct the processor in controlling the operation of the client device . The computer programs can include for example a test driver associated with the test framework the VM module VM primitives and client device hardware primitives and parameters . These are described in more detail below.

The test driver instructions are for implementing the test driver shown in and discussed above. The VM module can be for example a Xen or VMware module but is generally any module capable of creating and or activating one or more VMs on the client device . The VM primitives are instructions for creating and configuring a VM according to the control signals received from the master device . The VM primitives can include for example a VM HARDWARE SPECIFICATION primitive for setting a hardware specification of the VM a SAVE VM STATE primitive for saving a state of the VM and a VM OPERATING SYSTEM primitive for specifying an operating system to be installed on the VM a DESTROY VM primitive for destroying the VM and a RESTORE VM STATE primitive for restoring the VM to an active state based upon the saved state. The client device hardware parameters and primitives are instructions for maintaining and communicating the hardware specification of the client device .

Any of the above described methods and procedures can be embodied as instructions stored on a computer readable medium which includes storage devices and signals in compressed or uncompressed form. Exemplary computer readable storage devices include conventional computer system RAM ROM EPROM EEPROM and magnetic or optical disks or tapes. Exemplary computer readable signals whether modulated using a carrier or not are signals that a computer system can be configured to access including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software program s of the computer program on a CD ROM or via Internet download. In a sense the Internet itself as an abstract entity is a computer readable medium. The same is true of computer networks in general.

It should also be understood that although various logical groupings of blocks and elements were described above different realizations may omit one or more of these logical groupings. Likewise in various realizations blocks may be grouped differently combined or augmented. Furthermore one or more blocks including those identified herein as optional can be omitted from various realizations. For example the present description may describe or suggest a collection of data and information. One or more embodiments can provide that the collection of data and information can be distributed combined or augmented or provided locally and or remotely.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

