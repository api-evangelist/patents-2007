---

title: Tools for system-level design environments
abstract: A remote auxiliary tool is created in a graphical model having at least one of a signal or a block. The remote auxiliary tool is non-intrusively attached to one of the signal or the block. The graphical model and the remote auxiliary tool are executed synchronously. At least one of an execution result or a remote auxiliary tool result is output to at least one of a display device, a storage device or a destination device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08855971&OS=08855971&RS=08855971
owner: The MathWorks, Inc.
number: 08855971
owner_city: Natick
owner_country: US
publication_date: 20070820
---
This application is a continuation of U.S. patent application Ser. No. 11 011 298 filed Dec. 13 2004 entitled TOOLS FOR SYSTEM LEVEL DESIGN ENVIRONMENTS by Orofino et al. the subject matter of which application is incorporated herein by reference in its entirety.

The present invention relates to a system and method suitable for non intrusively observing modifying and or generating data synchronous with events in an executing block diagram or graphical model.

Historically engineers and scientists have utilized graphical models in numerous scientific areas such as Feedback Control Theory and Signal Processing to study design debug and refine dynamic systems. Dynamic systems which are characterized by the fact that their behaviors change over time are representative of many real world systems. Graphical modeling has become particularly attractive over the last few years with the advent of software packages such as SIMULINK made by The MathWorks Inc. of Natick Mass. LabVIEW made by National Instruments Corporation of Austin Tex. and the like. SIMULINK provides sophisticated software platforms with a rich suite of support tools that makes the analysis and design of dynamic systems efficient methodical and cost effective.

A dynamic system either natural or man made is a system whose response at any given time is a function of its input stimuli its current state and the current time. Such systems range from simple to highly complex systems. Physical dynamic systems include a falling body the rotation of the earth bio mechanical systems muscles joints etc. bio chemical systems gene expression protein pathways weather and climate pattern systems etc. Examples of man made or engineered dynamic systems include a bouncing ball a spring with a mass tied on an end automobiles airplanes control systems in major appliances communication networks audio signal processing nuclear reactors a stock market etc.

Professionals from diverse areas such as engineering science education and economics build mathematical models of dynamic systems in order to better understand system behavior as it changes with the progression of time. The mathematical models aid in building better systems where better may be defined in terms of a variety of performance measures such as quality time to market cost speed size power consumption robustness etc. The mathematical models also aid in analyzing debugging and repairing existing systems be it the human body or the anti lock braking system in a car . The models may also serve an educational purpose of educating others on the basic principles governing physical systems. The models and results are often used as a scientific communication medium between humans. The term model based design is used to refer to the use of graphical models in the development analysis and validation of dynamic systems.

Dynamic systems are typically modeled in model environments as sets of differential difference and or algebraic equations. At any given instant of time these equations may be viewed as relationships between the system s output response outputs the system s input stimuli inputs at that time the current state of the system the system parameters and time. The state of the system may be thought of as a numerical representation of the dynamically changing configuration of the system. For instance in a physical system modeling a simple pendulum the state may be viewed as the current position and velocity of the pendulum. Similarly a signal processing system that filters a signal would maintain a set of previous inputs as the state. The system parameters are the numerical representation of the static unchanging configuration of the system and may be viewed as constant coefficients in the system s equations. For the pendulum example a parameter is the length of pendulum and for the filter example a parameter is the values of the filter taps.

Generally graphical analysis and modeling methods such as the block diagram method are used in modeling for design analysis and synthesis of engineered systems. The visual representation allows for a convenient interpretation of model components and structure and provides a quick intuitive notion of system behavior.

During the course of modeling and simulation it is often desirable to be able to observe particular data values at certain locations of the model or to observe how data is transformed through the model. Examples of such data values include signal values states work areas and parameters. Signal displays used in conjunction with a system level design environment such as SIMULINK often require multiple display mechanisms to be associated simultaneously with multiple signals to monitor the progress of a model at various points of interest. Currently block diagram environments offer scope blocks to be used in such situations with each scope connected to a signal of interest in the model. Alternatively environments such as Real Time Workshop manufactured by The MathWorks Inc. of Natick Mass. offer interfaces to various data values of the model such that an individual can non intrusively observe the data values.

However conventional non intrusive approaches to observing the various data elements do not allow users to observe the data synchronously with the various execution events in the block diagram or other operating model. Such synchrony is critical in many scenarios because data values may be not be in a deterministic observable state at all times during model execution. An example of such a scenario is when a signal memory location is reused by multiple blocks for efficiency reasons. Furthermore allowing synchronous observation of the data also ensures that observers of the data are operating optimally for example when the data values are refreshed.

During the course of modeling it is also often desirable to bypass or generate data values to aid in refining or debugging a design. For example one could generate various inputs at a particular point in the block diagram model based on various test scenarios. In another example one could bypass the signal values written by a block to remove the transformation performed by a block during a debugging task. In conventional applications such as SIMULINK one needs to intrusively insert blocks and or lines into the graphical model to achieve bypass or signal generation. It should be noted that these intrusive means of bypass or generation result in the operations being synchronous with the execution of the block diagram. However conventional graphical modeling design environments do not offer mechanisms for non intrusive yet synchronous bypass or generation of data values.

In one exemplary embodiment a remote auxiliary tool is created in a graphical model having at least one of a signal or a block. The remote auxiliary tool is non intrusively attached to one of the signal or the block. The graphical model and the remote auxiliary tool are executed synchronously. At least one of an execution result or a remote auxiliary tool result is output to at least one of a display device a storage device or a destination device.

In another exemplary embodiment a device for modeling includes a remote auxiliary tool for non intrusive use as at least one of an observer tool a bypass tool or a generator tool in a block diagram. A graphical user interface GUI manages creating the remote auxiliary tool attaching the remote auxiliary tool to at least one of a signal or a block in the block diagram detaching the remote auxiliary tool from the signal or block and outputting from the remote auxiliary tool to at least one of a destination device or a display.

An illustrative embodiment of the present invention relates to a remote auxiliary tool and corresponding method of use. The remote auxiliary tool is formed of at least one of an observation tool a bypass tool and a generator tool. The remote auxiliary tool is non intrusively and synchronously connected to a graphical modeling environment prior to execution during execution or after execution of a model. The remote auxiliary tool is detachable from the model during execution of the model in the graphical modeling environment.

The remote auxiliary tool is non intrusive to the graphical model such that the remote auxiliary tool is not embedded in the model in the same way that other elements of the model are interconnected and embedded. In the case of a graphical model using blocks and signals the user does not add blocks or signals to the model diagram when attaching a remote auxiliary tool in accordance with the present invention to the model. Rather the remote auxiliary tool registers interest with the model and during execution the model informs the remote auxiliary tool of events of which the tool has requested to receive notification. The process of sending an event can be achieved through but not limited to an event listener application programming interface API a callback based interface and or model and remote auxiliary tool aggregation for execution. The remote auxiliary tool can work with execution modes that include but are not limited to interpretive accelerated or generated code model execution modes.

It should be noted that the electronic device is merely representative of a structure for implementing the present invention. However one of ordinary skill in the art will appreciate that the present invention is not limited to implementation on only the device as described herein. Other implementations can be utilized including an implementation based partially or entirely in embedded code where no user inputs or display devices are necessary. Rather a processor can communicate directly with another processor or other device.

Turning now to example embodiments of the present invention the method and system of the present invention operate in a block diagram modeling environment such as that of SIMULINK . The block diagram modeling environment is otherwise referred to herein as the graphical model. One of ordinary skill in the art will appreciate that there are a number of different graphical modeling and simulation applications that make general use of blocks or other graphical representations to model or simulate conditions events designs operations and the like or to model and control events implemented on hardware devices and the like. Accordingly the present invention is intended for use on all such modeling applications.

The present invention is generally directed to a system and method for interacting non intrusively yet synchronously with a graphical model. are screen depictions of a graphical model simulating a dynamic process. shows a version of a time based or event based block diagram graphical model A while shows a version of a state based or event based flow diagram graphical model B. As referred to herein graphical model is intended to encompass multiple variations of graphical model including those shown in . Accordingly graphical model as utilized herein includes graphical model A and graphical model B as well as other graphical models of dynamic systems. Graphical model A is formed generally of a plurality of blocks that pass signals to represent a dynamic system. Graphical model B is formed of a plurality of states that communicate though blocks in the form of transitions . The particular use or purpose of the graphical model can vary to include anything that can be modeled using a graphical modeling environment. Thus the present invention is not limited to the specific example embodiments discussed herein as understood by one of ordinary skill in the art.

In the example embodiment time based graphical models A have blocks connected by signals. Blocks are responsible for computing the values of signals as time progresses. The arrows denote the computational direction of the signal. Input ports read signals and output ports write signals. The user of the present invention may wish to obtain a reading of a value of one of the signals in the graphical model or of one of the processes in one of the blocks . However in the graphical model illustrated there is no instance of a scope shown with the model. Accordingly if the graphical model is running a model execution at the time illustrated in the figure conventional modeling applications in the situation illustrated have no mechanism for a user to be able to take readings of signal or internal block model states synchronously.

However with the remote auxiliary tool of the present invention in accordance with one embodiment an event listener API or equivalent tool is provided associating a tool with the graphical model without being embedded in the graphical model . For example if the user wishes to know the value of the signal at point A in the graphical model the user implements the remote auxiliary tool of the present invention to initiate an observation event or equivalent observation tool. The user registers with the model using the event listener API a request to invoke an observer when point A in the graphical model is computed by the source block of the signal of point A. As the model is executing when the signal at point A is re computed by the source block of the signal an event is sent to the listener. The listener in this illustrative example is an observer that reads the value of the signal at point A and displays the value appropriately in a device such as a graphical display scope. It should be noted that throughout this description the example embodiments make use of an API form of tool to connect the remote auxiliary tool to the model. However one of ordinary skill in the art will appreciate that the remote auxiliary tool does not need to be implemented in the form of an API but rather can be implemented using a number of different tools including library based modules and other tools. As such references to an API in the present description are intended to include APIs as well as such other equivalent tools noted above. In addition an alternative example embodiment of the present invention makes use of an aggregation programming paradigm to achieve the non intrusive and synchronized behavior of the remote auxiliary tool.

The remote auxiliary tool itself does not need to be represented graphically in the graphical model . However because the remote auxiliary tool registers listeners with the model the model can insert a graphical symbol or text such as symbol or other representation in the graphical model showing the existence of the listener for the remote auxiliary tool. Such graphical representation can be for example shown in the block similar to those illustrated in indicating the remote auxiliary tool is connected to the internal state of the block and not the signal . More specifically in the illustrative example showing the symbol connections made by the remote auxiliary tool can be described by selection of one or more signals from a list of all available signals in the graphical model . The remote auxiliary tool can also be described by the direct entry of an identification of one or more signals in the graphical model . The connections can be highlighted at some point in time to associate a symbol with one or more selected signals . For example this can be accomplished by pressing a button in the display interface with the corresponding signal in the model highlighted by color blinking or other temporary or persistent graphical indication in addition to textual or other representations. The connection can also be highlighted by a graphical affordance in the graphical model such as a test point symbol small lollipop icon connected to a signal line for as long as the virtual connection remains. For connections to internal block state as in the illustrative block the connections can be created in similar fashion to signal selection except that a block is selected.

The remote auxiliary tool can be connected to the model using an event listener API. More specifically and in accordance with an example embodiment of the present invention the API that enables the practice of the remote auxiliary tool in accordance with the present invention includes the presence of user definable pre execution and or post execution callbacks or events associated with any of the methods of the computational blocks in the graphical model such that the callback or event enforces proper synchronization for data transfer to and from the tool. Such an API can likewise be provided where the definitions refer to data nodes in a physical hardware device such as memory locations in a processor a physical I O protocol for a processor or an FPGA or ASIC or some other defined method for data delivery as understood by one of ordinary skill in the art. A unique identifier can be provided for each signal in the graphical model or hardware such that the tool can be associated with any signal or group of signals. Methods to read and optionally write signal data via the unique identifier which can be synchronized by the pre execution and or post execution callback or event can be provided. Furthermore textual graphical audio visual tactile or other data rendering techniques and capabilities supported by or interfaced to the modeling environment can be provided such that the signal data is presented to user in a discernable manner.

The remote auxiliary tool can include different types of observer tools such as display scopes strip chart recorder an oscilloscope a spectrum analyzer a 2 port network analyzer a logic signal display a waterfall plot a communications constellation plot an audio output device and a video display device. The observer tool can also be a non graphical tool such as a tool that reads the model data such as the signal at point A of the illustrative model and sends the data to another system for processing. The remote auxiliary tool can include different bypass tools such as a non graphical tool that reads data from the model and if the data exceeds a specified limit the data is set to that limit. The modified data is then returned to the model. This makes the bypass tool useful for providing fault tolerant actions when the model is executing in real time. Another use of the bypass tool is in the area of debugging a simulation when incorrect values are seen they can be altered enabling the simulation to continue without having to shut down. The remote auxiliary tool can include different types of generator tools such as sine wave square wave pulse or any arbitrary user created functions that produce data for the model. One of ordinary skill in the art will appreciate that the present invention is not limited to using the event listener API to non intrusively and synchronously connect the remote auxiliary tool s to the model.

In addition the displays of the remote auxiliary tool if required are provided separate from the graphical model thus keeping with the non intrusive feature of this invention. Likewise a GUI can be provided with a multiple document interface type of layout in which a master GUI contains one or more visual display device windows with additional interfaces for managing the connections to the model corresponding to each remote tool.

Several example embodiments of implementations of the remote auxiliary tool in accordance with the present invention are described herein. In addition is a diagrammatic illustration of a method of using the remote auxiliary tool realized using the event listener API. In accordance with one example embodiment of the present invention a user can attach a remote auxiliary tool to a model to listen to specific events before during or after model execution step . The user can detach a remote auxiliary tool before during or after graphical model execution step . Connections to the model by the remote auxiliary tool are maintained while the model is not running step . When the model is not running step the user can edit the model and possibly change it structure. If the act of editing the model deletes an object such as a block or line that is connected to a remote auxiliary tool the tool becomes disconnected from the model.

The user can start the model execution step . During model execution model and block methods are invoked. With in SIMULINK this consists of a simulation loop. Each computational block in SIMULINK consists of multiple run time methods that are executed within the simulation loop. SIMULINK decomposes block methods by type and executes them in a predefined manner from model models that are invoked by the simulation loop. During execution of a model or block method step if a block with registered listeners is encountered step the model sends an event step causing the respective listener steps and of the remote auxiliary tool to execute. The listener of the remote auxiliary tool can be an observer tool reading and displaying data step a bypass tool reading data and returning modified data step or a generator tool providing data step . When execution completes step the model returns to the not running state step .

One of ordinary skill in the art will appreciate that as mentioned previously the distinction between observation or observer tool bypass tool and generator tool as outlined above is done merely to convey different aspects of the invention clearly. However the present invention does not require that the tool fall completely within one or the other of the observation or observer tool bypass tool or generator tool categories. Rather the tool can be a hybrid mixture of the three forms or varieties of tool. Furthermore it should be noted that the remote auxiliary tool is formed of at least one tool such that the specific configuration of each tool forming the remote auxiliary tool becomes less relevant to the operation of the remote auxiliary tool because the same functionality of the remote auxiliary tool can be implemented with numerous variations of observation bypass or generator and number of tools forming the remote auxiliary tool. Accordingly the present invention is not limited to the specific example embodiments of tools described herein. Rather the remote auxiliary tool of the present invention is formed of a combination or mixture of the different variations possible with the tool operational characteristics in addition to a combination of multiple tools having the same or different operational characteristics.

One example implementation of the remote auxiliary tool of the present invention is shown in and . is a screen depiction of a tool resulting from a user implementing the remote auxiliary tool. The remote auxiliary tool is implemented as a waterfall plot . The waterfall plot is a visual display of data virtually connected to the graphical model at point A. The remote auxiliary tool can include a number of different interfacing options some of which can be implemented in a toolbar configuration. For example shows a toolbar having a number of standard buttons. One of ordinary skill in the art will recognize several of the symbols representing the functions of the buttons. One example button that can be utilized in conjunction with the present invention is a highlight button which when clicked on will highlight the signal in the graphical model being displayed by the remote auxiliary tool such as the waterfall plot . One of ordinary skill in the art will appreciate that a number of different functions can be implemented in the remote auxiliary tool of the present invention in accordance with particular function or operation of the remote auxiliary tool.

In addition the remote auxiliary tool interface in a particular embodiment can vary. For example in the remote auxiliary tool is implemented as a multiple document interface MDI style GUI design incorporating multiple display devices in a single master window . In this example there are connections established for each display corresponding to signals originating from multiple graphical models . A first display reports data from a first graphical model. A second display reports data from a second graphical model. A third display a fourth display and a fifth display all report data from a third graphical model. The remote auxiliary tool is formed of the collection of the displays and . Each of the displays operates independently and pulls data from different model locations. The displays can pull data from the same model location if desired. Furthermore as mentioned previously each of the collection of the displays and forming the remote auxiliary tool can be individually or collectively attached or detached from the graphical models before during or after the graphical models are implemented.

As described the remote auxiliary tool includes at least one tool. The remote auxiliary tool is attached to the model in the graphical modeling environment prior to execution during execution and or after execution of a model. The remote auxiliary tool is detachable from the model during execution of the model in the graphical modeling environment.

The illustrative embodiments have been primarily described with regard to their observation functionality. The observation tool non invasively collects data after attachment to the model . The observation tool likewise can non invasively register interest in data or some event of the graphical model . The registration of the data or event can be displayed in accordance with the examples illustrated herein. In addition the remote auxiliary tool can initiate an action upon registration of a predetermined characteristic of the data or event observed. For example if a predetermined data point such as a maximum or a minimum is achieved in a graphical model as it is running the remote auxiliary tool can register the occurrence and forward instructions or implement other actions to address the occurrence. Such actions may include pausing the model execution forwarding data relating to other points in the model at the time of the occurrence sending a message to the user implementing a change in the operation of a separate model and or hardware device and the like.

The implementation of the remote auxiliary tool can be in the form of a non blocking tool if its primary purpose is one of registration recordation or observation. In this mode the model that is executing does not wait for the attached remote auxiliary tool to finish responding to a particular execution event. The remote auxiliary tool can likewise be implemented in the form of a blocking tool if its purpose is to influence model execution. In this mode the model to which the remote auxiliary tool is attached waits until the tool has generated an action in response to receipt an execution event. Such actions could include pausing the model execution or other actions that affect the model or the execution or operation of the model or devices connected with the model and operated by the model occur based on observations made by the remote auxiliary tool.

The display or GUI for a bypass tool forming part or all of the remote auxiliary tool can be substantially the same or similar to that of the GUIs shown herein in B and . The bypass type of tool has the ability to read data from the graphic model as it is running and halt the model or modify the data and return a different value to the model or other locations in accordance with predetermined configurations. Thus the bypass tool accesses and modifies data and or event of the model and can return a modified form of the data and or event. In addition it should be noted that the bypass tool can modify a data and or event of the model using block diagram primitives and or textual language primitives. The data pulled from the graphical model can also be forwarded to a location separate from the running model for example a separate model database or hardware or software device.

It should further be noted that the observation tool the bypass tool and the generator tool described herein as example tools that can form the remote auxiliary tool can individually or in combination form the remote auxiliary tool. Thus a single remote auxiliary tool can have all three functionalities as well as invasively modify or effect the operation of the graphical model .

The remote auxiliary tool configurations can be saved in the graphical model or can be saved separate from the graphical model. In addition one of ordinary skill in the art will appreciate that a reference or other identifier to a specific remote auxiliary tool can likewise be stored within the graphical model or separate from the graphical model being viewed or manipulated by the remote auxiliary tool. Furthermore the selection of blocks signals or ports to be interfaced with the remote auxiliary tool can be performed using any available interface mechanism including graphically textually data and can be implemented through in direct or direct connection to other software or hardware and the like in addition to user interface.

In the embodiments presented herein the remote auxiliary tool configurations consist of the various attributes of the observer tool bypass tool and or generator tools the user has created. Each of these tools can be connected to the model using an object selector. The object selector is one component of the remote auxiliary tool that associates each tool the user has created with objects e.g. blocks signals or ports in the model. For example the selection of model objects blocks signals or ports to be connected to a remote auxiliary tool can be done using a signal selector that displays the model hierarchy in a textual fashion. The user navigates to the desired object in the textual hierarchy and connects the tool the object. Alternatively the user can select an object in the model and then click a button in the signal selector to attach the remote auxiliary tool to the selected object.

It should be noted that one useful implementation of the remote auxiliary tool of the present invention is in the performance of debugging of a system being modeled using the graphical model as shown in . To debug an operating model the model is first provided step . The user implements an instance of the remote auxiliary tool step . At this point the particular type of remote auxiliary tool can influence the next steps. If the remote auxiliary tool is an observation type of tool the user attaches the remote auxiliary tool at a point in the model at which access to data is desired to observer or collect data step . If desired the data collected can be registered step . If configured accordingly the remote auxiliary tool can initiate an action separate or removed from the graphical model step while still maintaining its non invasive characteristics in the graphical model.

If on the other hand the remote auxiliary tool is of a bypass type data can be collected and or modified and or overridden in accordance with the configuration of the remote auxiliary tool. The remote auxiliary tool collects the data step . The user can take information or data learned by use of the remote auxiliary tool and implement actions to affect how the model is operating in an effort to debug the simulation or the model of the dynamic system step . These actions can include using the bypass type of remote auxiliary tool to change signal values at different locations in the model. In addition different actions can be initiated in the graphical model in an effort to debug the model step . The steps can be repeated as necessary to debug the model step .

The remote auxiliary tool can also be a generator tool. The generator tool provides data to a model such as a running model in . This can be in the form of a signal without a source block icon. In the speed set point and Load represent text indicating two injection points. Without a signal provided by a remote auxiliary tool the model would treat these two signals as unconnected and provide a value of 0 to the first input port of the Controller block. It should be noted that the notion of an unconnected signal identified by an injection point in model is text but it could be a generic graphical symbol such as a circle with a dot in the center. In this example a generator tool is supplying a set point that has trajectory for the Load injection point. also includes two observer tools a scope that is connected to the second output of the Engine block and a scope that is connected to the Mux block output in the Engine Subsystem corresponding to the Engine block.

One skilled in the art will recognize that there are several ways to attach observer tools bypass tools and generator tools to a model . Revisiting model shown again in as model an alternative embodiment of the present invention can be used to connect or disconnect remote auxiliary tools from the model . In particular in the example embodiment the user can use a context sensitive menu of to attach and remove generators to unconnected input ports or signal injection points . The context sensitive menu can be brought up by right clicking on an injection point . Within the context sensitive menu one can disconnect from a generator source using a disconnect selection and reconnect to another generator source using a switch connection selection or create and connect a new generator source using a create source selection . Similarly one can bring up the context sensitive menu for a signal by right clicking on a signal such as signal which is the engine speed the second output of the engine block. Within the context sensitive menu one can open a viewer that is connected to the signal using an open viewer selection note multiple viewers can be connected to one signal disconnect one or all of the viewers connected to the signal using a disconnect selection or create and connect a new viewer using a create view selection .

When executing the model using an interpretive engine the event listener paradigm provides a straight forward means by which to support the remote auxiliary tool. However one skilled in the art recognizes that a model can be translated to generated code where the generated code can be a high level programming language such as C Java or C or assembly code. To support the adding and removing of remote auxiliary tools during execution the generated code can be instrumented before and after each block method. Alternatively a run time engine can be created which using the executable created after compiling and linking the code can instrument the executable with entry points before and after the code for each model and block method thus enabling one to implement the event listener architecture enabling the removal and addition of remote auxiliary tools during model execution.

An alternative to the event listener paradigm for synchronously connecting the remote auxiliary tool to the model is to aggregate the model objects and the remote auxiliary tool s into one execution engine. This can be done when the connections to the model are made prior to model execution and are not altered during execution. In this scenario one can use model primitives e.g. a sine wave signal generator or a scope display block to define a generator or observer tool respectively. The remote auxiliary tool is not added to the graphical definition of the model rather an internal aggregated representation of the model is formed consisting of both the model objects plus the remote auxiliary tools. After this is done an internal execution structure can be created by translating the model into executable operations or generated code. If the connections are altered during execution it is necessary to know a priori the full range of alterations that may be performed. Otherwise dynamic alteration of the execution structure needs to occur and dynamic alteration of the execution structure is very similar to the event listener paradigm.

The remote auxiliary tool provides freedom to tap into an existing and executing model at any time and collect data modify data start and stop the model execution return desired constants or other forms of modified data to the model execution influence the operation of separate models or devices and the like. Accordingly a user attempting to diagnose or debug a model of a dynamic system can use the remote auxiliary tool of the present invention to both take contemporaneous or real time readings of signal values within the graphical model and or communicatively associated devices and if desired make changes or modifications to the data to effect a desired outcome for diagnostic and or control purposes. One of ordinary skill in the art will appreciate that debugging is an iterative process that can be implemented in a number of different ways such that the present invention is not limited to the specific example of debugging described herein. Rather the present invention and corresponding method of use can vary in accordance with preferred debugging processes.

Accordingly the present invention is generally directed to a remote auxiliary tool and corresponding method of use. The remote auxiliary tool is formed of at least one observer tool bypass tool or generator tool. The tool is non intrusive meaning there are no explicit modeling primitives e.g. blocks or lines added to the graphical model. Thus there is no requirement that the tool be programmed into the model when the model is being created. The remote auxiliary tool is furthermore remote and auxiliary in nature meaning that it is separate from the graphical model. The remote auxiliary tool is likewise representative of a variety of different tools limited only by the functionality that can be provide by an tool that forms the remote auxiliary tool. The remote auxiliary tool can be connected to the graphical modeling environment prior to execution during execution or after execution of a model and is also detachable from the model during execution of the model in the graphical modeling environment. The remote auxiliary tool can be implemented to influence only the graphical modeling environment and or can initiate actions that affect the operation of separate software applications or hardware devices.

Numerous modifications and alternative embodiments of the present invention will be apparent to those skilled in the art in view of the foregoing description. Accordingly this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the best mode for carrying out the present invention. Details of the structure may vary substantially without departing from the spirit of the present invention and exclusive use of all modifications that come within the scope of the appended claims is reserved. It is intended that the present invention be limited only to the extent required by the appended claims and the applicable rules of law.

