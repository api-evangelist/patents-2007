---

title: Automatic speech recognition with dynamic grammar rules
abstract: Automatic speech recognition implemented with a speech recognition grammar of a multimodal application in an ASR engine, the multimodal application operating on a multimodal device supporting multiple modes of user interaction including a voice mode, the multimodal application operatively coupled to the ASR engine, including: matching by the ASR engine at least one static rule of the speech recognition grammar with at least one word of a voice utterance, yielding a matched value, the matched value specified by the grammar to be required for processing of a dynamic rule of the grammar; and dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value, the dynamic rule comprising a rule that is specified by the grammar as a rule that is not to be processed by the ASR until after the at least one static rule has been matched.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08670987&OS=08670987&RS=08670987
owner: Nuance Communications, Inc.
number: 08670987
owner_city: Burlington
owner_country: US
publication_date: 20070320
---
The field of the invention is data processing or more specifically methods apparatus and products for automatic speech recognition.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Current lightweight voice solutions require a developer to build a grammar and lexicon to limit the potential number of words that an automated speech recognition ASR engine must recognize as a means for increasing accuracy. Pervasive devices have limited interaction and input modalities due to the form factor of the device and kiosk devices have limited interaction and input modalities by design. In both cases the use of speaker independent voice recognition is implemented to enhance the user experience and interaction with the device. The state of the art in speaker independent recognition allows for some sophisticated voice applications to be written as long as there is a limited vocabulary associated with each potential voice command. For example if the user is prompted to speak the name of a city the system can with a good level of confidence recognize the name of the city spoken.

Computer applications that employ speech user interface with finite state grammars need to be able to build those grammars dynamically based on the user s interaction with the application. Dynamically built grammars can use the current context of the application to build a grammar that is smaller and more apropos to the context resulting in higher performance and increased accuracy of speech recognition. An example of this principle would be an application that prompts for a user s home location including city and state. By asking for state first the application can dynamically build a city grammar consisting only of the cities in the state chose first by the user.

This pattern of user interaction however suffers from being stilted and unnatural owing to the two steps of first obtaining state and then the city. The more natural interaction is to allow the user to say Boca Raton Florida and recognize both city and state from a single utterance. Depending on the application however the static grammar required to support the single utterance may be larger than can be supported by the available computing resources. Building a grammar to support recognition of a city and state from a single utterance for example may require building a grammar containing all the cities in the United States a grammar may be too voluminous for use on many multimodal devices.

Methods apparatus and computer program products are described for automatic speech recognition the method implemented with a speech recognition grammar of a multimodal application in an automatic speech recognition ASR engine with the multimodal application operating on a multimodal device supporting multiple modes of user interaction with the multimodal application the modes of user interaction including a voice mode and one or more non voice modes the multimodal application operatively coupled to the ASR engine including matching by the ASR engine at least one static rule of the speech recognition grammar with at least one word of a voice utterance yielding at least one matched value the matched value specified by the grammar to be required for processing of a dynamic rule of the grammar and dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value the dynamic rule comprising a rule that is specified by the grammar as a rule that is not to be processed by the ASR until after the at least one static rule has been matched.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for automatic speech recognition according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for automatic speech recognition according to embodiments of the present invention. Automatic speech recognition in this example is implemented with a multimodal application operating on a multimodal device . The system of includes at least one speech recognition grammar that specifies words and phrases to be recognized by an automatic speech recognition ASR engine of a speech engine . The multimodal device supports multiple modes of user interaction with the multimodal application including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The multimodal application is operatively coupled to an ASR engine in a speech engine . The operative coupling may be implemented with an application programming interface API a voice service module or a VOIP connection as explained more detail below.

The system of operates generally to carry out automatic speech recognition according to embodiments of the present invention by matching by an ASR engine at least one static rule of a speech recognition grammar with at least one word of a user s voice utterance yielding at least one matched value. The matched value is specified by the grammar to be required for processing of a dynamic rule of the grammar. The dynamic rule of the grammar is dynamically defined at run time as a new static rule in dependence upon the matched value. The dynamic rule is a rule that is specified by the grammar as a rule that is not to be processed by the ASR engine until after the at least one static rule has been matched.

The grammar in the example of includes a static grammar rule a dynamic grammar rule and a new static grammar rule that is generated dynamically at run time by use of a definition of the dynamic rule and a matched value of the static rule . Grammar rules are components of a speech recognition grammar that advise an ASR engine or a voice interpreter which words presently can be recognized. The follow grammar for example 

The URL identifies a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon matched value from the rule the rule required to be matched before the dynamic rule is processed. In this example the computer resource so identified is a Java Server Page JSP located at http groceries.com. The JSP is a computer resource that is programmed to define the dynamic rule of the grammar as a new static rule in dependence upon matched value from the rule. The ASR engine expands the definition of the rule with the results of the match from the rule and provides the expansion to the JSP page to return a new static rule. In this way the ASR engine may dynamically define the dynamic rule at run time as a new static rule by expanding the definition of the dynamic rule with a matched value of the referenced static rule. If the rule were matched with peppers for example then the definition of the dynamic rule may be expanded as 

If the rule were matched with tomatoes for example then the definition of the dynamic rule may be expanded as 

If the rule were matched with toothpaste for example then the definition of the dynamic rule may be expanded as 

And so on with a different definition of the new static rule possible for each matched value of the referenced static rule.

Note that in this example the dynamic rule occurs in document order after the static rule whose match value is required before the dynamic rule can be processed. In this example the ASR engine typically will match the rule in document order before processing the rule. This document order however is not a limitation of the present invention. The static and dynamic rules may occur in any document order in the grammar and if a dynamic rule is set forth in the grammar ahead of a static rule upon which the dynamic rule depends then the ASR engine is configured to make more than one pass through the grammar treating the dynamic rule in the meantime as a rule that matches any speech in the utterance until a next rule match a next token match or the end of processing of the pertinent user utterance.

A multimodal device is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also displaying more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech to a speech engine for recognition. A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick multimodal client or thick client because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin multimodal client or simply a thin client because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

A multimodal application in this example provides speech for recognition and text for speech synthesis to a speech engine through a VoiceXML interpreter . A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

As shown in a VoiceXML interpreter may be installed locally in the multimodal device itself or a VoiceXML interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own VoiceXML interpreter . The VoiceXML interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the VoiceXML interpreter and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

The VoiceXML interpreter provides grammars speech for recognition and text prompts for speech synthesis to the speech engine and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. In a thin client architecture the VoiceXML interpreter is located remotely from the multimodal client device in a voice server the API for the VoiceXML interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the VoiceXML interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a VoiceXML interpreter but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present invention. Each of the example multimodal devices in the system of may be configured to carry out automatic speech recognition by installing and running on the multimodal device a multimodal application that carries out automatic speech recognition with dynamic grammar rules according to embodiments of the present invention.

The use of these four example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to an ASR engine through a VoiceXML interpreter and receiving and playing speech prompts and responses from the VoiceXML interpreter may be improved to function as a multimodal device for automatic speech recognition according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for automatic speech recognition according to embodiments of the present invention is a data communications data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web sever a markup document as part of a multimodal application may execute speech elements by use of a VoiceXML interpreter and speech engine in the multimodal device itself or by use of a VoiceXML interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for automatic speech recognition according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Automatic speech recognition according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in automatic speech recognition according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server.

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured to carry out automatic speech recognition according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications. Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support automatic speech recognition may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present invention.

The voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes a grammar a lexicon and a language specific acoustic model . The language specific acoustic model is a data structure a table or database for example that associates SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in a human language. The lexicon is an association of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammar communicates to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Grammars for use in automatic speech recognition according to embodiments of the present invention may be expressed in any format supported by any ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSGF 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In this example expansion includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out automated speech recognition the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector SFV . An SFV may be defined for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

Also stored in RAM is a VoiceXML interpreter a module of computer program instructions that processes VoiceXML grammars. VoiceXML input to VoiceXML interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimedia devices. In this example VoiceXML interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimedia devices and provided to VoiceXML interpreter through voice server application .

A multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to VoiceXML interpreter through data communications across a network with multimodal application . The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The VoiceXML interpreter interprets VoiceXML dialogs provided to the VoiceXML interpreter by a multimodal application.

The speech recognition grammar in the example of includes a static grammar rule a dynamic rule and a new static rule that is generated at run time from the dynamic rule by use of a definition of the dynamic rule and a matched value of the static rule . The static rule is a non dynamic rule of the grammar that unlike traditional grammar rules can also include references to dynamic rules. The dynamic rule is a rule that is specified by the grammar as a rule that is not to be processed by the ASR engine until after the at least one static rule has been matched yielding a matched value. The dynamic rule of the grammar is dynamically defined at run time as a new static rule in dependence upon the matched value.

The static rule contains a dynamic rule reference that has a static rule parameter list containing at least one static rule reference . The dynamic rule reference identifies a dynamic rule that must be matched in order for the static rule to be matched. The at least one static rule reference identifies at least one static rule that must be matched before the dynamic rule may be processed for a match by the ASR engine . In this example static rule 

The ASR engine of operates generally to carry out automatic speech recognition according to embodiments of the present invention by matching at least one static rule of a speech recognition grammar with at least one word of a user s voice utterance yielding at least one matched value and dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. The matched value is specified by the grammar to be required for processing of a dynamic rule of the grammar. An example of a matched value in a static rule containing a dynamic rule reference for this example grammar 

The process of dynamically defining the dynamic rule as a new static rule may be carried out by the ASR engine operating in conjunction with another computer resource that is specified in the definition of the dynamic rule as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. In the exampleGrammar set forth above the definition of the dynamic rule specifies the resource located by the URL http groceries.com brand.jsp as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value of a static rule.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft NT AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application VoiceXML interpreter ASR engine JVM and TTS Engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Industry Standard Architecture ISA buses and Peripheral Component Interconnect PCI buses.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for automatic speech recognition according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for automatic speech recognition in a thin client architecture according to embodiments of the present invention. The example of includes a multimodal device and a voice server connected for data communication by a VOIP connection through a data communications network . A multimodal application runs on the multimodal device and a voice server application runs on the voice server . The multimodal client application may be a set or sequence of X V or SALT documents that execute on multimodal browser a Java voice application that executes on the Java Virtual Machine or a multimodal application implemented in other technologies as may occur to those of skill in the art. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In addition to the multimodal sever application the voice server also has installed upon it a speech engine with an ASR engine a grammar a lexicon a language specific acoustic model and a TTS engine as well as a JVM and a Voice XML interpreter . VoiceXML interpreter interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to VoiceXML interpreter through voice server application . VoiceXML input to VoiceXML interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimedia device application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

VOIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VOIP protocols. VOIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VOIP protocol and transmits the speech to voice server through the VOIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The speech recognition grammar in the example of includes a static grammar rule a dynamic rule and a new static rule that is generated at run time from the dynamic rule by use of a definition of the dynamic rule and a matched value of the static rule . The static rule is a non dynamic rule of the grammar that unlike traditional grammar rules can also include references to dynamic rules. The dynamic rule is a rule that is specified by the grammar as a rule that is not to be processed by the ASR engine until after the at least one static rule has been matched yielding a matched value. The dynamic rule of the grammar is dynamically defined at run time as a new static rule in dependence upon the matched value.

The static rule contains a dynamic rule reference that has a static rule parameter list containing at least one static rule reference . The dynamic rule reference identifies a dynamic rule that must be matched in order for the static rule to be matched. The at least one static rule reference identifies at least one static rule that must be matched before the dynamic rule may be processed for a match by the ASR engine . In this example static rule 

The ASR engine of operates generally to carry out automatic speech recognition according to embodiments of the present invention by matching at least one static rule of a speech recognition grammar with at least one word of a user s voice utterance yielding at least one matched value and dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. The matched value is specified by the grammar to be required for processing of a dynamic rule of the grammar. An example of a matched value in a static rule containing a dynamic rule reference for this example grammar 

The process of dynamically defining the dynamic rule as a new static rule may be carried out by the ASR engine operating in conjunction with another computer resource that is specified in the definition of the dynamic rule as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. In the exampleGrammar set forth above the definition of the dynamic rule specifies the resource located by the URL http groceries.com brand.jsp as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value of a static rule.

The multimodal application is operatively coupled to the ASR engine . In this example the operative coupling between the multimodal application and the ASR engine is implemented with a VOIP connection through a voice services module then through the voice server application and either JVM VoiceXML interpreter or SALT interpreter depending on whether the multimodal application is implemented in X V Java or SALT. The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a voice server application and receiving in response voice prompts and other responses. In this example application level programs are represented by multimodal application JVM and multimodal browser .

The voice services module provides data communications services through the VOIP connection and the voice server application between the multimodal device and the VoiceXML interpreter . The API is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture on . So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

Automatic speech recognition according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in automatic speech recognition according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. All the components needed for speech synthesis and voice recognition in automatic speech recognition according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly as do parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a JVM a VoiceXML Interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine a grammar a lexicon a language dependent acoustic model and a TTS engine . The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine useful for automatic speech recognition according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports automatic speech recognition according to embodiments of the present invention. The multimodal application implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded VoiceXML interpreter for processing. The embedded VoiceXML interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

In a further class of exemplary embodiments the multimodal application may be implemented as a Java voice application that executes on Java Virtual Machine and issues calls through the VoiceXML API for speech recognition and speech synthesis services. In further exemplary embodiments the multimodal application may be implemented as a set or sequence of SALT documents executed on a multimodal browser or microbrowser that issues calls through the VoiceXML API for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present invention.

The speech recognition grammar in the example of includes a static grammar rule a dynamic rule and a new static rule that is generated at run time from the dynamic rule by use of a definition of the dynamic rule and a matched value of the static rule . The static rule is a non dynamic rule of the grammar that unlike traditional grammar rules can also include references to dynamic rules. The dynamic rule is a rule that is specified by the grammar as a rule that is not to be processed by the ASR engine until after the at least one static rule has been matched yielding a matched value. The dynamic rule of the grammar is dynamically defined at run time as a new static rule in dependence upon the matched value.

The static rule contains a dynamic rule reference that has a static rule parameter list containing at least one static rule reference . The dynamic rule reference identifies a dynamic rule that must be matched in order for the static rule to be matched. The at least one static rule reference identifies at least one static rule that must be matched before the dynamic rule may be processed for a match by the ASR engine . In this example static rule 

The ASR engine of operates generally to carry out automatic speech recognition according to embodiments of the present invention by matching at least one static rule of a speech recognition grammar with at least one word of a user s voice utterance yielding at least one matched value and dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. The matched value is specified by the grammar to be required for processing of a dynamic rule of the grammar. An example of a matched value in a static rule containing a dynamic rule reference for this example grammar 

The process of dynamically defining the dynamic rule as a new static rule may be carried out by the ASR engine operating in conjunction with another computer resource that is specified in the definition of the dynamic rule as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value. In the exampleGrammar set forth above the definition of the dynamic rule specifies the resource located by the URL http groceries.com brand.jsp as a computer resource that is capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value of a static rule.

The multimodal application is operatively coupled to the ASR engine . In this example the operative coupling between the multimodal application and the ASR engine is implemented either JVM VoiceXML interpreter or SALT interpreter depending on whether the multimodal application is implemented in X V Java or SALT. When the multimodal application is implemented in X V the operative coupling is effected through the multimodal browser which provides an operating environment and an interpreter for the X V application and then through the VoiceXML interpreter which passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application is implemented in Java Speech the operative coupling is effected through the JVM which provides an operating environment for the Java application and passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application is implemented in SALT the operative coupling is effected through the SALT interpreter which provides an operating environment and an interpreter for the X V application and passes grammars and voice utterances for recognition to the ASR engine.

The multimodal application in this example running on a multimodal device that contains its own VoiceXML interpreter and its own speech engine with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application as well as the functionality for automatic speech recognition with dynamic grammar rules according to embodiments of the present invention is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of automatic speech recognition according to embodiments of the present invention. Automatic speech recognition in this example is implemented with a speech recognition grammar of a multimodal application in an automatic speech recognition ASR engine . The grammar has been provided along with one or more words in a user voice utterance from the multimodal application to the ASR engine for recognition. The multimodal application operates on a multimodal device on supporting multiple modes of user interaction with the multimodal application including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode is represented in this example with audio output through a speaker and audio input through a microphone . Non voice modes are represented by user input devices a keyboard and a mouse.

The multimodal application is operatively coupled to the ASR engine . The operative coupling provides a data communications path from the multimodal application to the ASR engine for speech recognition grammars. The operative coupling provides a data communications path from the ASR engine to the multimodal application for recognized speech and semantic interpretation results. The operative coupling may be effected with a JVM on VoiceXML interpreter on or SALT interpreter on when the multimodal application is implemented in a thick client architecture. When the multimodal application is implemented in a thin client architecture the operative coupling may include an a voice services module on and a VOIP connection on . When multimodal application is implemented in X V the operative coupling may include a VoiceXML interpreter on . When the multimodal application is implemented in a Java speech framework the operative coupling may include a Java speech API and a JVM on . When the multimodal application is implemented in SALT the operative coupling may include a SALT interpreter on .

The method of includes matching by the ASR engine at least one static rule of the speech recognition grammar with at least one word of a voice utterance yielding at least one matched value where the matched value is specified by the grammar to be required for processing of a dynamic rule of the grammar . The ASR engine uses a voice model and a lexicon to recognize the words in the voice utterance and then examines the rules of the grammar generally in document order to determine whether words and phrases in the utterance match any of the words and phrases specified in the rules of the grammar. In the following example grammar referred to below in this specification as the exampleGrammar 

In the method of the grammar includes a rule reference specified by the grammar to be a dynamic rule reference to the dynamic rule . In the exampleGrammar the rule reference in the static rule is an example of a rule reference specified by the grammar to be a dynamic rule reference to a dynamic rule. In the example of the dynamic rule reference is characterized by a static rule parameter list that includes at least one static rule reference specifying at least one static rule required to be matched by the ASR engine before processing the dynamic rule . In the exampleGrammar the dynamic rule reference in the rule is an example of a dynamic rule reference characterized by a static rule parameter list that includes at least one static rule reference to the static rule. The static rule reference to the rule specifies a static rule the rule that is required to be matched by the ASR engine before processing the dynamic rule.

The method of also includes dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value that is in dependence upon a matched value of a static rule specified in a static rule parameter list of a dynamic rule reference. The and rules in the exampleGrammar above are static grammar rules. The static rule in this example is equivalent to a traditional voice recognition grammar rule. According to embodiments of the present invention however static rules unlike traditional grammar rules can also include dynamic rule references. The static rule is an example of a static rule that includes a dynamic rule reference .

In the method of the grammar includes a definition of the dynamic rule that identifies a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value . In the exampleGrammar the definition of the dynamic rule is an example of a definition of a dynamic rule that identifies a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value. The example dynamic rule definition is 

If the rule were matched with tomatoes for example then the definition of the dynamic rule may be expanded as 

If the rule were matched with toothpaste for example then the definition of the dynamic rule may be expanded as 

And so on with a different definition of the new static rule possible for each matched value of the referenced static rule.

The examples just above describe a JSP as a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value but the JSP is used only for explanation not as a limitation of the present invention. A JSP is a dynamic server page and other forms of dynamic server page may be used as a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value Active Server Pages ASPs Common Gateway Interface CGI scripts PHP Hypertext Processor PHP scripts and so on. When a multimodal application is implemented as a Java application in a Java speech framework then a computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule may be implemented as a Java callback function. Computer resource capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule may include dynamically linked native functions or local executable programs with arguments marshalled according to the particular method. In addition ECMAScripts in X V pages may be used as computer resources capable of dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon the matched value as in 

And so on so that many computer resources may be used for dynamically defining at run time the dynamic rule of the grammar as a new static rule in dependence upon a matched value as will occur to those of skill in the art.

As mentioned earlier a static rule parameter list may contain more than one static rule reference. If a dynamic rule reference in a static rule has more then one static rule reference and so on in its static rule parameter list then the definition dynamic rule of the dynamic rule may be expanded for example as 

In the method of the grammar may include more than one dynamic rule reference to the dynamic rule the dynamic rule references characterized by more than one static rule parameter list and each static rule parameter list may include one or more static rule references specifying one or more static rules required to be matched by the ASR engine before processing the dynamic rule . That is there may be in a static rule more than one dynamic rule reference to the same dynamic rule and each such dynamic rule reference may specify different static rule references in its static rule parameter list. The follow static rule for example 

In the method of the static rule occurs in document order after the dynamic rule and the method includes treating the dynamic rule as a rule that matches any speech in the utterance until a next rule match a next token match or the end of processing of the utterance. ExampleGrammar is an example of a grammar in which a static rule containing a dynamic rule reference occurs in document order after the referenced dynamic rule 

Also in exampleGrammar the static rule referenced in the static rule parameter list occurs in document order in the grammar after the dynamic rule that depends on the referenced static rule for processing by the ASR engine. So the ASR engine in this example has two reasons to treat the dynamic rule as continuing to match speech from the utterance currently being processed 

In a traditional ASR engine prior to this invention the ASR engine upon encountering a rule such as the dynamic rule that cannot be matched in document order would stop processing and report a failure to match the grammar. The report could be an exception thrown in a Java environment a event in X V and so on. In this example however an ASR engine according to embodiments of the present invention upon encountering the dynamic rule continues processing the grammar by treating the dynamic rule as a rule that matches any speech in the utterance currently processing until a next rule match a next token match or the end of processing of the utterance. A token is a terminal grammar element. In the exampleGrammar add to my shopping and list are tokens. So the ASR engine upon encountering the dynamic rule in effect continues processing by matching arbitrary spoken input from the utterance up to the next matched token next matched rule or until the ASR engine runs out of words in the utterance. The ASR engine may carry out such matching of arbitrary spoken input by treating arbitrary spoken input from the utterance as provisionally or temporarily generating a match value of NULL for example. When the ASR engine does match a next matched token or rule of the grammar with spoken input from the utterance the ASR engine continues processing by looping back through the grammar to again visit the dynamic rule.

Now the ASR engine knows from its encounter with the static rule that processing the dynamic rule requires a matched value from the static rule. If the ASR engine has such a matched value on its next loop through the grammar rules the ASR engine can expand the definition of the rule and use the computer resource http groceries.com brand.jsp identified in the dynamic rule to dynamically define at run time the dynamic rule of the exampleGrammar as a new static rule in dependence upon the matched value.

A second pass of the recognizer matches the component of the utterance against the newly static grammar rule matching the word Crest. The recognizer combines the results of the first and second pass and returns the combined recognition results to the multimodal application Add Crest toothpaste to my shopping list. The ASR engine thus can make an arbitrary number of passes over a single utterance to resolve multiple dynamic rules in a grammar.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for automatic speech recognition with dynamic grammar rules. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

