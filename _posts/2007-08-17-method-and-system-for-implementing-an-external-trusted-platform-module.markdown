---

title: Method and system for implementing an external trusted platform module
abstract: A method for implementing an external trusted platform module includes establishing a connection with a remote host device via a remote interface. The method also includes receiving and processing a request for a trusted platform module (TPM) function from the remote host device via the remote interface. The method additionally includes generating a response to the request for the TPM function based on the processing of the request for the TPM function received from the remote host device. The method further includes sending the response to the request for the TPM function to the remote host device via the remote interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08272002&OS=08272002&RS=08272002
owner: Fujitsu Limited
number: 08272002
owner_city: Kawasaki
owner_country: JP
publication_date: 20070817
---
This application claims benefit under 35 U.S.C. 119 e to U.S. Provisional Application Ser. No. 60 822 864 filed Aug. 18 2006 by Molina et al. and entitled Method and System for Implementing an External Trusted Platform Module which is hereby incorporated by reference.

This invention relates generally to computer security and more particularly to a method and system for implementing an external trusted platform module.

The Trusted Platform Module TPM chip as defined by the Trusted Computing Group standard is a hardware device typically installed as part of a computing device such as a laptop or desktop PC and potentially in devices such as cell phones and PDAs . Current implementations of the TPM architecture assume a physical binding between the TPM chip and a single hardware platform. The TPM chip is typically installed as part of a system e.g. a chip on the PCI bus and is used to provide trusted information on the identity and internal state of the device in order to validate the current hardware and software and store cryptographic secrets and identities. The TPM chip facilitates verification of the integrity of the software and hardware by supporting measurement functions. This is expected to increase the ability to defend against viruses and other security attacks and to verify that the installed software has not been modified. The TPM chip in personal computers laptops desktop PCs is already on the market and its use is increasing rapidly. Moreover security systems utilizing TPM functionality are beginning to be deployed for applications which require enhanced levels of data security such as medical record handling. The most common implementation of a TPM is a chip physically attached to the motherboard of a computer. The TPM functionality is accessed by software using a well defined command set and application programming interface API . Through this command set the TPM chip provides cryptographic functionality such as encrypting signing key generation and random number generation. The TPM chip can also store a limited amount of information such as keys in a non volatile protected memory space.

Additionally the TPM chip contains a set of extensible Platform Configuration Registers PCRs . PCRs are used to store measurements on the current status of the platform and its software. PCRs are reset to their present values when the system powers up and or when the system powers off and can only be extended but never directly modified. Any changes made after initialization to the PCRs are made in separate areas and are cryptographically protected. A sequence of measurements on the system hardware configuration and software is performed to build up a chain of trusted components and modules. For example the boot loader the BIOS the Operating System and the applications can be measured as part of this chain of trust. The measurements to be stored in the PCRs are performed by each module parent before handing off control to the successor components children . The first measuring entity of the platform is trusted by default as it is not previously measured by any other entities. This early measuring entity is called the Core Root of Trust CRT for measurement. For security the CRT may be stored inside the TPM chip itself. After the first measurement by the CRT all software entities launched are expected to continue the chain of trust by extending the PCR registers before launching any other software. Each measurement is recorded and can be cryptographically verified using the PCRs by a verification party. The action of sending these measurements to a verification party for verification is called attestation.

The Trusted Computing Group TCG has defined open standards for hardware based system security. The specifications provided by the TCG center around the TPM chip and its functionality. More specifically the TCG bases its standards on the TPM chip as the hardware root of trust. In addition the TCG has defined standards for a Trusted Software Stack TSS that defines an application programming interface API to the TPM commands and that greatly facilitates development of applications that use TPM functionality. While the TCG s standard is based on a physical TPM chip there has been some work done with software based TPM emulators. The software based TPM emulators mimic the behavior of a real TPM chip as seen from the TPM driver interface. These software based TPM emulators are typically installed and executed in and on the device that is running an application that needs the TPM functionality provided by the software based TPM emulator.

Particular embodiments provide a method and system for implementing an external trusted platform module that substantially eliminates or reduces at least some of the disadvantages and problems associated with previous methods and systems.

In accordance with a particular embodiment a method for implementing an external trusted platform module includes establishing a connection with a remote host device via a remote interface. The method also includes receiving and processing a request for a trusted platform module TPM function from the remote host device via the remote interface. The method additionally includes generating a response to the request for the TPM function based on the processing of the request for the TPM function received from the remote host device. The method further includes sending the response to the request for the TPM function to the remote host device via the remote interface.

In some embodiments the method may also include receiving at least one TPM state parameter to be used when processing the request for the TPM function received from the host device via the remote interface.

In particular embodiments the request for the TPM function received from the host device may be encrypted. Furthermore the method may also include encrypting the response to the request for the TPM function before sending the response to the request for the TPM function to the host device via the interface.

In accordance with another embodiment a method for implementing an external trusted platform module includes establishing a connection with an external trusted platform module TPM device via a remote interface. The method also includes generating a request for a TPM function. The request for the TPM function is transmitted to the external TPM device via the remote interface. The method additionally includes receiving a response to the request for the TPM function from the external TPM device via the remote interface.

In some embodiments the method may also include determining whether to route the request for the TPM function to an internal TPM microchip or to transmit the request for the TPM function to the external TPM device via the remote interface.

In accordance with another embodiment a system for implementing an external trusted platform module includes an interface that is operable to establish a connection with a remote host device via a remote interface. The interface is further operable to receive a request for a trusted platform module TPM function from the remote host device via the remote interface. The system also includes a processor coupled to the interface. The processor is operable to process the request for the TPM function received from the remote host device. The processor is also operable to generate a response to the request for the TPM function based on the processing of the request for the TPM function received from the remote host device. The processor is further operable to send the response to the request for the TPM function to the remote host device via the remote interface.

In accordance with another embodiment a system for implementing an external trusted platform module includes an interface operable to establish a connection with an external trusted platform module TPM device via a remote interface. The system also includes a processor coupled to the interface. The processor is operable to generate a request for a TPM function. The interface is further operable to transmit the request for the TPM function to the external TPM device via the remote interface. The interface is additionally operable to receive a response to the request for the TPM function from the external TPM device via the remote interface.

Technical advantages of particular embodiments include transmitting requests for TPM functionality to an external TPM device. Accordingly a device such as a computer may be able to run programs that require TPM functionality without having to use a built in TPM chip. Another technical advantage of particular embodiments includes receiving user entered TPM state parameters. Accordingly developers may test how a product will respond to different TPM states without having to reset the external TPM each time. Yet another technical advantage includes allowing the user to keep certain personal security related information stored on the external TPM and use this in a limited number of other host machines. Accordingly this may facilitate the ability of a mobile worker to have his personal security information available for use in several different hosts rather than tied to a single host or only migratable to another TPM through a complex procedure as is the current practice.

Certain embodiments of the invention may include none some or all of the above technical advantages. One or more other technical advantages may be readily apparent to one skilled in the art from the figures descriptions and claims included herein.

In particular embodiments host computer may not have a built in TPM chip. In such embodiments coupling ETPM to host computer may provide host computer with TPM functionality despite the lack of a built in TPM chip. This may allow devices without a built in TPM chip such as older computing devices to still be integrated into a secure trusted computing environment e.g. may allow an older device to access data or programs that require TPM functionality to operate .

In some embodiments host computer may include a built in TPM chip. However because of the rigid architecture inherent in a built in TPM chip e.g. the fact that the Platform Configuration Registers PCRs of a TPM chip can not be modified and can only be reset by rebooting and the fact that the chip is physically inside the device it may be desirable to have an ETPM connected to host computer . For example a programmer may desire to connect ETPM to host computer while designing a new application that uses TPM functions even though host computer may already have a built in TPM chip. The programmer may do so because he may want to test certain TPM functions under certain circumstances without having to reboot the computer every time he makes a change as he may have to with a built in TPM chip. Using ETPM a programmer may be able to enter specific state information and configuration data into ETPM . Then the programmer can use the entered data in ETPM to test how the program responds. In addition a user may be able to store his personal security information on ETPM and use this information on host computer . Thus the user may use the information on ETPM in addition to the information on host computer s TPM.

Host computer and ETPM may be connected either before or after host computer has been booted depending on how ETPM is to be used. For example if the programmer wants to load a specific state condition into ETPM and then test his program he may not need to reboot host computer before testing his program using the specific state condition.

The timing of when ETPM is connected to host computer may affect where in a software stack of host computer ETPM may be installed. As host computer boots up it may load several different levels of software beginning at the BIOS level and progressing through to the application level other intermediate levels may include the operating system loader level the operating system level and the Trusted Software Stack TSS level . The lower in the stack closer to BIOS level ETPM is installed the greater the security and trust between host computer and ETPM . In some embodiments this may affect the Core Root of Trust CRT and or the level of security between host computer and ETPM . In some embodiments the decrease in the level of security may be mitigated by preloading ETPM with measurement values from the software levels below the level at which ETPM is installed. In some embodiments the measurement values may then be verified. This may extend the CRT to include software methods residing on ETPM . For example if the programmer wants ETPM to be installed at the operating system level he may preload ETPM with measurement values for lower layers in the software stack such as the operating system loader and the BIOS.

When the connection between host computer and ETPM is established ETPM may be cryptographically bound to host computer . ETPM may initially be bound to host computer through preshared keys or using a cryptographic key exchange protocol. These keys may be used in subsequent connections with host computer until ETPM is reset . In establishing the connection between host computer and ETPM some embodiments may use a shared secret key method that is distributed during configuration. This may be done as a way to bind host computer and ETPM . Once ETPM has been connected configured and authenticated host computer may begin to run applications that use TPM functionality and these applications may be able to trust the data used because of the ETPM .

Host computer is depicted as having processor memory and interface . Similarly ETPM is depicted as having processor memory and interface . When running an application on host computer these components may work together passing information between one another to generate receive and or process TPM requests responses from an external TPM device such as ETPM . This may enable a secure computing environment allowing the program to request TPM functionality regardless of whether the host computer has a built in TPM chip.

Processor controls the operation and administration of host computer by processing information and signals received from a user and or one or more programs or applications running on host computer . Processor controls the operation and administration of ETPM by processing information and signals received from host computer and or a programmer via interface . Processors and may include any suitable hardware software or both that operate to control and process signals. For example processors and may be programmable logic devices microcontrollers microprocessors any suitable processing devices or resources or any combination of hardware software and or encoded logic. Processors and may be similar or different types of devices. For example processor may be a microprocessor and processor may be a microcontroller. In particular embodiments processor may be used in combination with memory to run an application stored within memory that requires TPM functionality and to facilitate passing any TPM requests to ETPM via connection . In some embodiments processor may be used in combination with memory to process any received TPM requests and to generate a response to be sent back to host computer via connection .

Memory and may be any form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store any suitable information to implement features of various embodiments such as programs that may require one or more TPM functions and or any instructions that may be needed to carry out one or more of the TPM functions. Memory may store any suitable information to implement features of various embodiments such as encryption decryption keys identities passwords digital certificates and or state information.

Connection may be a wireless or wireline connection between host computer and ETPM . Connection allows host computer and ETPM to pass control and data between each other. For example host computer may send a common TPM command to ETPM through connection and ETPM may send a response to host computer through connection . More specifically in a particular scenario the application being run on host computer may request a secure operation such as requesting a key stored by ETPM . The request for the key may be sent to ETPM via connection and in response ETPM may send the requested key back to host computer via connection . Connection may couple host computer with ETPM via interfaces and respectively. Interfaces and represent any port or connection real or virtual including any suitable hardware and or software that may allow host computer and ETPM to exchange information and or signals with one another. For example interfaces and and connection may be universal serial bus USB interfaces FireWire interfaces Ethernet interfaces peripheral component interconnect PCI interfaces memory bus interfaces serial interfaces parallel interfaces a Bluetooth connection a radio frequency connection or any other wired or wireless connection. In some embodiments connection may include some added security such as encryption using shared keys. This may help to reduce and or prevent tampering with connection the data passed there through and or ETPM .

Modifications additions or omissions may be made to system . For example system may include any suitable number of host computers or ETPMs . As another example host computer may include any suitable number of additional components such as an input port for receiving user input and an output port for facilitating a graphical user interface. Additionally the operations and functionality of system may be performed using any suitable logic.

Host computer may include its own housing and any components e.g. a processor and memory necessary to provide the functionality described herein. These components may provide the necessary resources for application Trusted Software Stack TSS external TPM driver and host interface . These separate blocks taken together allow host computer to generate a request for a TPM function that is translated into a common TPM command and sent to ETPM without having to perform modifications to the internal components of host computer .

ETPM may be external to host computer and may include its own housing and any components e.g. a processor and memory necessary to provide the functionality described herein. In particular embodiments the housing may function to restrict or prohibit physical tampering with the internal components of ETPM . The components of ETPM may provide the necessary resources for TPM component TPM manager and TPM server . These separate blocks taken together allow ETPM to provide functionality similar to that provided by a built in TPM chip.

Application may be any application that supports and or uses TPM functionality such as an encrypted data management program or a secure e mail program. Application may be a finished program running on host computer in which host computer contains a built in TPM chip or is connected to an external TPM device such as ETPM . In some embodiments application may be a program that is under development. During development a programmer may desire to test TPM functionality of the program. More specifically host computer may contain a built in TPM chip but the programmer may want to test a particular TPM function under certain state conditions. Because the state of a built in TPM chip may not be readily modified the programmer may set the state of ETPM and direct host computer to send TPM requests to ETPM . Thus ETPM will have the desired state so that the programmer can test how the program operates when using the particular TPM function under the desired state conditions.

Typically one of the features of application is to protect the security of data. For example application may be a file management program for storing retrieving and editing encrypted data. The file management program may request a key used to decrypt a file from a TPM as a way to help identify that the user is in fact an authorized user. Because of the wide variety of applications that may use TPM functions the components of secure system will be described in the context of a file management application such as the one described above.

In some embodiments application may communicate with TSS . For example a user may use application to open an encrypted file stored in memory within host computer . Application may recognize that the requested file is encrypted and that to decrypt the file it will need a key that may be stored in a TPM. TSS may access the TPM functionality through driver modules e.g. external TPM driver that provide a standardized method for TSS to access TPM functionality and take advantage of its capabilities. TSS may provide application with access to TPM functionality through an application program interface API . More specifically application may use the API provided by TSS to send TSS the information needed to invoke the appropriate TPM function to retrieve the key.

From the perspective of application it does not matter whether a built in TPM or ETPM is used. More specifically whenever application needs TPM functionality the request is sent to TSS and TSS returns an appropriate response. This interaction between application and TSS is similar to the interaction that occurs when the TPM functionality is performed by a built in TPM chip.

TSS may be functionally located between application and external TPM driver ETPM driver . TSS may translate secure operation TPM function requests from application into TPM commands and pass these commands to ETPM driver . TSS may use various components of host computer such as a processor and memory to convert the particular TPM functions sent by application into TPM commands. Thus when TSS receives the TPM function request from application for the key to decrypt the requested file it may be able to generate the appropriate TPM command and send it to ETPM driver .

ETPM driver may be in communication with TSS and host interface . ETPM driver may receive the common TPM commands from TSS . In some embodiments in which host computer includes a built in TPM chip ETPM driver may be used to determine where the common TPM command is to be sent e.g. along a path towards the built in TPM or along the path towards ETPM . Like TSS ETPM driver may use various components of host computer such as a processor and memory to properly process the TPM commands before passing them to an internal TPM chip or host interface .

ETPM driver may also be involved in establishing the connection with ETPM through the exchange of information between ETPM and host computer . In particular embodiments ETPM driver may receive notification of an attempted connection with ETPM . Establishing the connection may include an initialization step in which ETPM is cryptographically bound to host computer . This may be achieved through the exchange of keys and mutual authentication resulting in the association of ETPM with ETPM driver . In some embodiments while establishing the connection configuration information may pass between ETPM and ETPM driver . This configuration information may be used in the operation of ETPM . For example the configuration information may include such information as operating modes e.g. testing secure and any encryption parameters e.g. key exchange authentication information that may be used with the connection.

Interfaces and may be similar to interfaces and of host computer and ETPM respectively of . Host interface and remote interface may allow host computer and ETPM to exchange any needed information to establish a connection e.g. link type link parameters link status and or implement ETPM functionality. More specifically interfaces and may represent any port or connection real or virtual including any suitable hardware and or software that may allow host computer and ETPM to exchange information and signals with one another. For example interfaces and may be universal serial bus USB interfaces FireWire interfaces Ethernet interfaces peripheral component interconnect PCI interfaces memory bus interfaces serial interfaces parallel interfaces a Bluetooth interface a radio frequency interface or any other wired or wireless interface. In some embodiments there may be added security such as encryption using shared keys. This may help to reduce and or prevent tampering with the communications sent between host computer and ETPM .

TPM server may be able to communicate with remote interface thus providing TPM server with the common TPM commands from external TPM driver . TPM server may format the common TPM commands into the proper format for TPM component . Because ETPM receives TPM commands and formats them internally there may be a reduced likelihood of incompatibility issues between host computer and ETPM . TPM server may use any of the components of ETPM e.g. a processor or memory to format the TPM commands. Once formatted the TPM commands may be sent directly to TPM component or they may pass through TPM manager on their way to TPM component .

In some embodiments TPM component may include a TPM chip similar to a built in TPM chip. In particular embodiments TPM component may include a TPM emulator. The TPM emulator may be implemented in hardware software or a combination of both hardware and software. For example TPM component may be implemented in separate hardware reserved solely for emulating a TPM or it may be implemented using the various components of ETPM that are used for other functions e.g. the same processor or memory used by TPM manager and TPM server or it may be implemented using some combination of the above. Upon receiving the request from application via TPM server in a format it understands TPM component may then process the request for the key and subsequently load or generate the requested key which may then be sent back to application following a similar path though in reverse order.

As mentioned above in some embodiments TPM server may send the formatted commands directly to TPM component . In particular embodiments TPM component may receive the commands from TPM manager . TPM manager may also be used to control the access configuration and or other internal aspects of TPM component . In some embodiments ETPM may include a management port that may allow a programmer access to various internal aspects of TPM component . This may be particularly useful in situations in which ETPM is being used in connection with the development of application because it may allow the developer to have more direct control over the ETPM and its states than he would have over a TPM chip integrated into host computer .

It may be recognized that system is merely an example configuration of a system in which an external TPM ETPM is coupled with a host computer host computer in accordance with particular embodiments. Other systems may include different components that may be arranged differently to accomplish the functionality and features described herein. For example external TPM driver is coupled to host interface in some embodiments external TPM driver may also include a physical TPM driver that communicates with a built in TPM chip located within host computer .

Some of the technical advantages of particular embodiments include providing software and or system developers with TPM functionality in a readily accessible ETPM device. Accordingly developers and or programmers are provided with a development tool that is simpler and more efficient to use than traditional built in TPM chips. Another technical advantage of particular embodiments includes providing older devices that do not contain a built in TPM chip with TPM functionality.

Accordingly older devices may be able to access TPM functionality and or interact within a trusted computing environment without having to make internal changes to the computing device. Yet another technical advantage of particular embodiments includes allowing a user to store certain personal security information on the ETPM and use this in a limited number of different hosts and still realize increased security and the ability to run secure applications.

The method begins at step where a connection is established between the host device and an external TPM device ETPM . The connection establishment may include the notification of the attempted connection of the ETPM to the ETPM driver and association of the ETPM with the ETPM driver. In establishing the connection configuration information may pass between the two devices. The configuration information may be used to establish communication e.g. link type link parameters operating modes e.g. testing secure and any encryption parameters e.g. key exchange authentication information used for the connection. This may cryptographically bind the ETPM to the host device. Further details of one example of this step are provided in . Both the host device and the ETPM may be contained within their own separate enclosures. This may allow the ETPM to temporarily connect to the host device and to be moved separately from the host device. The connection between the host device and the ETPM may be any of the wired or wireless connections discussed above with respect to . The way in which the host device and the ETPM establish the connection may vary depending on the type of connection e.g. a USB connection may involve different signaling handshaking than a Bluetooth connection .

At step the ETPM receives a TPM state parameter. The TPM state parameter may be received from an external source for use in setting the state of the ETPM for testing purposes. For example the state parameter may be sent by the developer to test how the database program will respond to the state parameter he sent. This may allow the developer to test specific TPM state parameters without having to alter his built in TPM chip. The state parameter may be sent to the ETPM via the connection with the host device or through a different device connected to the ETPM. In some embodiments the ETPM may include its own input device or module which the developer may use to enter the TPM state parameter. In some embodiments or scenarios the ETPM may not receive the TPM parameter at step . For example if the user is not testing how the program responds to a particular state then the ETPM may not receive the TPM state parameter.

At step the host device is rebooted. This may be done to increase the level of trust between the host device and the ETPM by allowing the ETPM to be installed lower in the stack. For example the ETPM may become associated with an ETPM driver that is placed lower in the software stack. Recall that the lower in the stack closer to BIOS level the ETPM is installed the greater the security and trust between the host device and the ETPM. In other situations the developer may not need to reboot the host device in order for the security and trust between the host device and the ETPM to be at a sufficiently high level. More specifically in some scenarios the level of trust between the host device and the ETPM may be sufficient enough to allow the ETPM to respond to the host device s TPM request using the received TPM state parameter.

At step the host device generates a request for a TPM function. The request may be for the internal TPM chip within the host device or it may be for the ETPM. In order for the host device to know where to send the request at step it determines whether the request is for the internal TPM or the ETPM. If it is determined that the request is for the internal TPM then at step the request is processed internally using the internal TPM microchip according to the standard procedures set forth by the Trusted Computing Group. In some embodiments the determination of where to send the request may be made by an ETPM driver e.g. ETPM driver . The ETPM driver may implement a switch that depending on policy may determine whether the request is sent to the internal TPM ETPM or both. The policy may specify where each request type needs to be sent. For example a simple policy may be If ETPM is present send everything to ETPM. In some embodiments certain information may be sent to only one of the internal TPM or ETPM.

If the request is for the ETPM for example if the request was generated by the database program which the developer is working on then the host device may encrypt the request for the TPM function at step . The request may be encrypted at step to increase the security of the connection e.g. prevent tampering with the request . The encryption may not affect the level of trust between the host device and the ETPM. In some instances the request may not be encrypted.

At step the host device transmits the request to the ETPM and at step the ETPM receives the request. The request may be transmitted between the host device and the ETPM in accordance with whatever protocol is used by the connection established at step e.g. a WiFi connection may use different protocols than a serial connection to communicate data such as the request between the two devices .

At steps and the ETPM processes the request for the TPM function and generates a response. Depending on the internal configuration of the ETPM this may involve the use of a TPM microchip within the ETPM a TPM emulator comprising software hardware or a combination of hardware and software. Depending on the request the response may be a signature a key a random number or any other piece of data or information that may be stored or generated by a TPM.

At step the ETPM encrypts the response before sending it back to the host device. Depending on the situation the encryption technique used by the ETPM may be similar to or different than the encryption technique used by the host device.

At step the ETPM sends the response to the host device and at step the host device receives the response. Once the host device receives the response it may pass it to the database program to allow the database program to finish whatever task it had started that caused it to request the TPM functionality.

If in step the ETPM is found not to be configured for the host then at step the host device requests the ETPM s endorsement key Ekey to verify the validity of the ETPM. For example the validity may be checked by the host device trying a limited number of well known public decryption keys from ETPM vendors. If the Ekey is not valid then at step the system stops or reports an error. If the ETPM is determined to be valid then at step a key exchange method may be executed to securely provide encryption and authentication keys to the host and the ETPM. These keys may be preshared through an independent process or a key exchange protocol such as Resurrecting Ducklings. The keys may be shared secrets or public private pairs and may be used for both authentication and privacy encryption. Following the key exchange the user authentication step is performed to verify that the user is known to the TPM. If the user authentication in step fails then an error may be reported and the process is stopped at step . If the user is verified then a configuration step is performed that includes setting permissions connection information storing keys and host information as well as modes. Modes may include the special testing mode in which the user may set values internally to the ETPM. Following the configuration in step the connection to the ETPM is opened and the ETPM driver is notified.

The above procedures have been described for a single host machine. It is possible to partition the ETPM so that the ETPM maintains separate memory space for a limited number of host devices. This may permit a user to employ the ETPM in several devices by maintaining separate memory spaces for these devices. The mutual authentication step for the ETPM may need to identify the machine and then execute its procedures from the appropriate memory space.

Modifications additions or omissions may be made to the method without departing from the scope of the invention. The method may include more fewer or other steps. Additionally steps may be performed in any suitable order without departing from the scope of the invention.

While this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of the embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure as defined by the following claims.

