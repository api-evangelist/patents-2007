---

title: Method and apparatus for creating policies for policy-based management of quality of service treatments of network data traffic flows
abstract: Techniques for creating policies for use in policy-based management of quality of service treatments of network data traffic flows are described. Policies are defined based on information about types of flows generated by an application and quality of service functions that are available in the network. Application information is received that defines flows generated by an application, including points where the application generates the traffic flows. QoS information is received that defines one of more quality of service treatments that the network device may apply to data processed by the network device. Based on the information, processing policies that associate the flows with the QoS treatments are determined. Mappings of the application information to the QoS treatments, which may be used to generate the quality of service value when the application program generates flows, are created and stored. Thus, the policies are informed both by application expertise and network expertise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970893&OS=07970893&RS=07970893
owner: Cisco Technology, Inc.
number: 07970893
owner_city: San Jose
owner_country: US
publication_date: 20070430
---
This application claims domestic priority as a Continuation of prior application Ser. No. 09 347 438 filed Jul. 2 1999 now U.S. Pat. No. 7 346 677 the entire contents of which is hereby incorporated by reference as if fully set forth herein. This application is related to prior co pending applications Ser. No. 09 179 036 filed Oct. 26 1998 entitled Method and apparatus for defining and implementing high level quality of service policies in computer networks and Ser. No. 09 206 067 filed Dec. 4 1998 entitled Method and apparatus for identifying network data traffic flows and for applying quality of service treatments to the flows. 

The present invention relates generally to computer networks and more specifically to a method and apparatus for creating policies for policy based management of quality of service treatments of network data traffic flows.

A computer network typically comprises a plurality of interconnected entities that transmit source or receive sink data frames. A common type of computer network is a local area network LAN that generally comprises a privately owned network within a single building or campus. LANs employ a data communication protocol LAN standard such as Ethernet FDDI or Token Ring that defines the functions performed by the data link and physical layers of a communications architecture i.e. a protocol stack such as the Open Systems Interconnection OSI Reference Model. In many instances multiple LANs may be interconnected by point to point links microwave transceivers satellite hookups etc. to form a wide area network WAN metropolitan area network MAN or Intranet. These internetworks may be coupled through one or more gateways to the global packet switched internetwork known as Internet.

Each network entity preferably includes network communication software which may operate in accordance with Transport Control Protocol Internet Protocol TCP IP . TCP IP generally consists of a set of rules defining how entities interact with each other. In particular TCP IP defines a series of communication layers including a transport layer and a network layer. At the transport layer TCP IP includes both the User Data Protocol UDP which is a connectionless transport protocol and TCP which is a reliable connection oriented transport protocol. When a process at one network entity wishes to communicate with another entity it formulates one or more messages and passes them to the upper layer of the TCP IP communication stack. These messages are passed down through each layer of the stack where they are encapsulated into packets and frames. Each layer also adds information in the form of a header to the messages. The frames are then transmitted over the network links as bits. At the destination entity the bits are re assembled and passed up the layers of the destination entity s communication stack. At each layer the corresponding message headers are also stripped off thereby recovering the original message which is handed to the receiving process.

One or more intermediate network devices are often used to couple LANs together and allow the corresponding entities to exchange information. For example a bridge may be used to provide a bridging function between two or more LANs. Alternatively a switch may be utilized to provide a switching function for transferring information such as data frames or packets among entities of a computer network. Typically the switch is a computer having a plurality of ports that couple the switch to several LANs and to other switches. The switching function includes receiving data frames at a source port and transferring them to at least one destination port for receipt by another entity. Switches may operate at various levels of the communication stack. For example a switch may operate at Layer 2 which in the OSI Reference Model is called the data link layer and includes the Logical Link Control LLC and Media Access Control MAC sub layers.

Other intermediate devices commonly known as routers may operate at higher communication layers such as Layer 3 which in TCP IP networks corresponds to the Internet Protocol IP layer. IP data packets include a corresponding header which contains an IP source address and an IP destination address. Routers or Layer 3 switches may re assemble or convert received data frames from one LAN standard e.g. Ethernet to another e.g. Token Ring . Thus Layer 3 devices are often used to interconnect dissimilar subnetworks. Some Layer 3 intermediate network devices may also examine the transport layer headers of received messages to identify the corresponding TCP or UDP port numbers being utilized by the corresponding network entities. Many applications are assigned specific fixed TCP and or UDP port numbers in accordance with Request For Comments RFC . For example TCP UDP port number corresponds to the Hypertext Transport Protocol HTTP while port number corresponds to File Transfer Protocol FTP service.

Computer networks include numerous services and resources for use in moving traffic throughout the network. For example different network links such as Fast Ethernet Asynchronous Transfer Mode ATM channels network tunnels satellite links etc. offer unique speed and bandwidth capabilities. Particular intermediate devices also include specific resources or services such as number of priority queues filter settings availability of different queue selection strategies congestion control algorithms etc.

Individual frames or packets can be marked so that intermediate devices may treat them in a predetermined manner. For example the Institute of Electrical and Electronics Engineers IEEE describes additional information for the MAC header of Data Link Layer frames in Appendix 802.1p to the 802.1D bridge standard.

A working group of the Internet Engineering Task Force IETF has proposed replacing the ToS field of Network Layer packets with a one octet differentiated services DS field that can be loaded with a differentiated services codepoint. Layer 3 devices that are DS compliant apply a particular per hop forwarding behavior to data packets based on the contents of their DS fields . Examples of per hop forwarding behaviors include expedited forwarding and assured forwarding. The DS field is typically loaded by DS compliant intermediate devices located at the border of a DS domain which is a set of DS compliant intermediate devices under common network administration. Thereafter interior DS compliant devices along the path apply the corresponding forwarding behavior to the packet .

To interconnect dispersed computer networks many organizations rely on the infrastructure and facilities of Internet Service Providers ISPs . For example an organization may lease one or more T lines to interconnect various LANs. Each organization enters into a service level agreement with its ISP. The service level agreements include one or more traffic specifications. The traffic specifications may place limits on the amount of resources that the organization may consume for a given price.

For example an organization may agree not to send traffic that exceeds a certain bandwidth e.g. 1 Mb s. Traffic entering the service provider s network is monitored to ensure that it complies with the relevant traffic specifications and is thus in profile. Traffic that exceeds a traffic specification and is therefore out of profile may be dropped or shaped or may cause an accounting change. Alternatively the service provider may mark the traffic as exceeding the traffic specification but allow it to proceed through the network anyway. If there is congestion an intermediate network device may drop such marked traffic first in an effort to relieve the congestion.

A process executing at a network entity may generate hundreds or thousands of traffic flows that are transmitted across a network. Generally a traffic flow is a set of messages frames and or packets that typically correspond to a particular task transaction or operation e.g. a print transaction and may be identified by various network and transport parameters such as source and destination IP addresses source and destination TCP UDP port numbers and transport protocol.

The treatment that is applied to different traffic flows may vary depending on the particular traffic flow at issue. For example an online trading application may generate stock quote messages stock transaction messages transaction status messages corporate financial information messages print messages data backup messages etc. A network administrator may wish to apply a different policy or service treatment quality of service or QoS to each traffic flow. In particular the network administrator may want a stock quote message to be given higher priority than a print transaction. Similarly a 1 million stock transaction message for a premium client should be assigned higher priority than a 100 stock transaction message for a standard customer.

Currently application programs that execute in network devices rarely invoke QoS functions and therefore they do not take full advantage of QoS features that are available in the network devices.

Some intermediate network devices can distinguish among multiple traffic flows and can apply different QoS to the flows. Generally QoS may be applied by such network devices based on the IP address or port number associated with a traffic flow. This approach has several advantages. It is centralized it works with multiple applications and it is application independent. However there are also significant disadvantages. It is based on limited or no knowledge of application traffic flows. A network manager cannot define and apply QoS policies for individual applications. It has only limited applicability to encrypted packets.

In another known approach applications use QoS signaling mechanisms such as RSVP or differentiated services DS or DiffServ to request a particular QoS for a particular traffic flow. In RSVP a traffic flow passes a request for service that includes additional information to help a network device how to apply QoS. This approach can take advantage of detailed knowledge of different traffic flows produced by an application. However there is no way to determine whether the RSVP requests comply with network wide policies. The result is that the devices are often configured to ignore the signaling and treat all traffic equally.

Still another approach is IP precedence in which a value is placed in a sub field of the IP Type of Service field. This provides even less granular QoS control than DS.

Thus current approaches do not adequately extend network device QoS features to multiple applications. These approaches do not integrate the application into the network and do not enable the application to classify its flows according to application specific information. Further there is no way to track applications that use dynamic port numbers such as FTP.

Thus there is a need for a mechanism that integrates applications into a policy based networking system and enables applications to participate in deciding how to apply a particular QoS to a traffic flow generated by the application.

Still another problem relates to how policies are defined. A typical business enterprise has separate individuals who are responsible for management of the enterprise s network and for installation and maintenance of application programs that run in or use the network. These individuals normally have greatly differing areas of knowledge and expertise. The network manager generally knows the configuration of the network in intimate detail and knows or can determine which network devices support various QoS services. However the network manager generally does not know details about traffic flows that are generated by the application programs. In contrast the application manager typically has extensive knowledge about the application programs and the kinds of traffic they generate but less knowledge about the network its devices and their QoS capabilities. Accordingly there is a need for a way to create network QoS policies that incorporate these respective bodies of knowledge in an orderly and integrated manner.

The foregoing objects and advantages and other objects and advantages that will become apparent from the following description are achieved by the present invention which comprises in one embodiment a method and apparatus for creating policies for use in policy based management of quality of service treatments of network data traffic flows. The policies are defined based on information about types of network traffic flows generated by an application program and information about quality of service functions that are available in devices of the network.

In one embodiment application information is received that defines one or more traffic flows generated by an application program including information identifying one or more points at which an application generates the traffic flows from a first individual having responsibility for managing enterprise applications in the network. Further QoS information is received that defines one of more quality of service treatments that the network device may apply to data processed by the network device from a second individual having responsibility for managing the network.

Based on the device QoS information and the application information one or more processing policies that associate the traffic flows with the quality of service treatments are determined. Mappings of the application information to the quality of service treatments which may be used to generate the quality of service value when the application program generates traffic flows are created and stored. As a result the policies are informed both by application program expertise and network expertise. Methods and mechanisms of integrating the policies into a directory are described.

A method and apparatus for creating policies for use in policy based management of quality of service treatments of network data traffic flows is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

An embodiment of the invention is used in the context of a network. is a block diagram of a computer network that includes a plurality of local area networks interconnected by a plurality of intermediate network devices . A plurality of network end stations such as end station and print server are coupled to the LANs. The network further includes at least one policy server that may be coupled to a repository and to a network administrator station . A server suitable for use as policy server is any Windows NT or UNIX workstation or similar computer platform. Network also includes at least one host or server configured in accordance with the present invention.

Server includes at least one application program or process a flow declaration component and a communication facility . The flow declaration component includes a message generator that communicates with the communication facility . Flow declaration component also is coupled to an associated memory for storing one or more traffic flow data structures . The application program communicates with both communication facility and through application programming interface API layer to flow declaration component . Communication facility in turn is connected to network by LAN . The server also comprises conventional programmable processing elements which may contain software program instructions pertaining to the methods of the present invention. Other computer readable media may also be used to store the program instructions.

Communication facility preferably includes one or more software libraries for implementing a communication protocol stack allowing server to exchange messages with other network entities such as end station print server etc. In particular the communication facility may include software layers corresponding to TCP IP Internet Packet Exchange IPX protocol the AppleTalk protocol the DECNet protocol and or NetBIOS Extended User Interface NetBEUI . Communication facility further includes transmitting and receiving circuitry and components including one or more network interface cards NICs that establish one or more physical ports to LAN or other LANs for exchanging data packets and frames.

Intermediate network devices provide basic bridging functions including filtering of data traffic by MAC address learning of a MAC address based upon a source MAC address of a frame and forwarding of the frame based upon a destination MAC address or route information field RIF . They may also include an IP software layer and provide route processing path determination and path switching functions. In one embodiment devices are computers having transmitting and receiving circuitry and components including network interface cards NICs establishing physical ports for exchanging data frames. Intermediate network device moreover preferably is configured as a local policy enforcer for traffic flows originating from server as described below.

Network is illustrated as an example only. Embodiments disclosed in this document will operate with other possibly far more complex network topologies. For example repository and network administrator station may be coupled directly or indirectly to policy server through zero or more intermediate devices.

The traffic flow state machine engine also is coupled to several traffic management resources and mechanisms. In particular traffic flow state machine engine is coupled to a packet frame classifier a traffic conditioner entity a queue selector mapping entity and a scheduler . The traffic conditioner entity includes several sub components including one or more metering entities one or more marker entities and one or more shaper dropper entities . The queue selector mapping entity and scheduler operate on the various queues established by local policy enforcer for its ports and or interfaces such as queues corresponding to interface .

The term intermediate network device broadly means any intermediate device for interconnecting end stations of a computer network including without limitation Layer 3 devices or routers as defined by RFC 1812 intermediate devices that are partially compliant with RFC 1812 intermediate devices that provide additional functions such as Virtual Local Area Network VLAN support and Layer 2 intermediate devices such as switches and bridges etc.

The Application generally is an enterprise software application program that runs on a server computer. For example Application may comprise an Oracle database system a PeopleSoft human resources system or any other application. Application is coupled to Repository and to an Application Manager the functions of which are described further below. Application is also coupled to a Local Mapping described below.

Repository stores polices that are associated with applications. Repository may comprise a directory server such as Netware Directory Server Windows Active Directory etc. or a database. Advantageously use of a Repository offers security. The format of the Repository is known only to a network vendor that supplies the Repository or to a network administrator. Thus only authorized applications may access the Repository.

A Schema stored in the Repository provides an integration point and a common information model for communication between Application and Policy Server . Application extends the Schema by adding application specific parameters to it. The extended Schema describes the application and its specific parameters. For example the Schema describes an Application Code Point and its possible values. When Application is a Web server the Schema describes a URL and its user name. Other examples of parameters include type of transaction user identifier application identifier a text description and others.

The application specific parameters may be added manually for example using a schema definition file that is uploaded into the Repository . In another embodiment the Repository is a Directory Server compatible with Lightweight Directory Access Protocol LDAP and the application specific parameters are added dynamically using LDAP. The precise mechanism for adding parameters is not critical. What is important is that each application contacts the Repository and declares one or more parameters that the application will use for classification of QoS of network devices that handle traffic flows generated by the application.

Policy Server provides a mechanism by which a network administrator or may map application parameters into network services. A Network Administration Client is coupled to Policy Server . A network administrator may use Network Administration Client to communicate with Policy Server . Each network service defines how an application should access it. For example access may comprise setting a DiffServ Code Point in the packets by setting IP Precedence values in the packets or by signaling using RSVP. An example of a commercial product suitable for use as Policy Server is CiscoAssure QoS Policy Manager 1.0 commercially available from Cisco Systems Inc.

Policy Server is coupled to one or more network devices each of which executes a network device operating system . An example of a network device is a router and an example of a network device operating system is IOS. Policy Server configures the network devices to implement the network services and to correctly respond to signaling from Application . For example Policy Server may map an Application Code Point to a DiffServ Code Point or IP precedence value. Such mappings of ACPs to DSCPs may be stored in Local Mapping so that they are immediately accessible to Application when it is executing in real time.

A mapping may apply for all application instances for all application instances running on some subnet or on a single machine or for a single instance identified by its IP address and source port number. The latter is useful for example when several Web servers are running on the same host. Thus different mappings can be defined for the same Application Code Points depending on the particular installation instance. The mapping translates single application QoS requirements into policies or requests that are centrally coordinated and in compliance with network wide multi application policies.

Application is tightly coupled to or integrated with an application QoS policy element . In one embodiment element is one or more software programs processes or modules that can be linked to application and called by the application. Element implements the functions described herein including those of . Element may communicate with Directory using LDAP calls.

Element can set QoS services of a network device for example by setting DiffServ bits of packets of a flow of application using functions of a UNIX operation system and a Windows NT operating system . Any other operating system may be supported UNIX and Windows NT are illustrated merely as examples. In one embodiment element selectively an alternatively calls the setsockopt function of UNIX or the GqoS or TC APIs of Windows NT to set QoS bits of packets of a particular application flow. As a result DiffServ or RSVP information is created as indicated by block . The QoS information of block is passed in packets of the flow to network device operating system . In response network device applies a desired QoS to the flow.

Advantageously the architecture of supports multiple platforms using APIs provides policy integration using LDAP and supports both DiffServ and RSVP .

Operation of the system of or generally comprises two phases a configuration phase and an operation phase. The phases may execute in parallel.

In block policies are established based on the ACPs that are registered in association with the application. In one embodiment Network Administration Client or a network manager receives the ACP values. The network manager need not receive information about Application or its traffic flows however the network manager or Network Administration Client normally has extensive knowledge about managed devices in the network and the QoS services and features that they support. In response the network manager establishes policies that associate conditions operators and the ACP values with actions or services of the devices. The policies may implement DiffServ or RSVP strategies. The policies may be stored in a storage device. Definition and storage of policies may be carried out using Policy Server .

In block the ACPs are mapped to DiffServ Code Points and the resulting mapping is stored in a repository. For example Policy Server may use one or more LDAP calls to store mappings of ACP values to DSCP values in Repository . In the preferred embodiment block also involves automatically storing the mappings in a Local Mapping that is associated with and accessible to the application when it is executing.

Block may also involve the steps of processing the information received from the Repository for efficient lookup. In another embodiment block involves polling the Repository for policy changes that are stored in the Repository after the mapping information is retrieved. Further block may involve listening for notification of policy changes.

For each flow generated by the application this information is then used to map the application parameters attached to the flow into a concrete QoS decision and a signaling mechanism. For example the process is notified by the application about the start of each flow with its parameters and this information is converted into QoS information usable by a network device. The simplest case is mapping one ACP into a DSCP value as shown by block and then setting a QoS value of packets of the flow as shown by block . For example a QoS value may be set by marking the flow packets using an appropriate operating system call to an existing QoS service as shown by block .

Alternatively if the mapping information cannot be obtained or refreshed from the policy Repository the application reverts to a backup mode of signaling the policy information itself such as an ACP value to the network device e.g. using RSVP as shown by block . Thus for short lived flows packets may be colored whereas for long lived flows separate out of band messages may be used to establish QoS.

Standard APIs provided by the network operating system are used to signal the network. For example GQoS or RAPI may be used for RSVP signaling. The APIs GqoS and setsockopt of IOS may be used for DiffServ or IP Precedence marking.

The application and the policy system may use event services such as CNS to publish and subscribe to event notifications regarding policy changes. Upon such events the application should download and use the new policies. Alternatively the application can poll the policy repository.

In block the policy is enforced at a network device based on information identifying the source of the packet and the DSCP or RSVP value associated with the packet. In one embodiment a service of IOS enforces the policy based on the values.

The selection of DiffServ or RSVP as a policy enforcement mechanism is a matter of network policy. DiffServ is integrated in the network using the Repository described herein with the defined Schema and LDAP for communications and can handle all sessions including short lived flows. RSVP is integrated using a network device that supports RSVP . It enables signaling QoS information from non core or third party applications and is well suited for use with non trusted hosts. Typically DiffServ is preferred if the application supports it and RSVP is a default mechanism.

Using the system and process described above network applications may request network QoS based on application specific parameters. A network manager maps the application specific parameters into concrete network services. However this approach requires the network manager to be familiar with the application specific parameters and what they mean. Some applications are complex such as Enterprise Resource Planning ERP applications and require deep knowledge and expertise to operate properly. The network manager may not have such expertise. Normally such expertise resides with an application manager or information technology manager of the organization that is using the application.

Applications manager is an individual who has expertise operating a particular application. Examples of applications include databases ERP applications sales force automation applications human resources applications etc. Applications manager receives extensive application information that defines among other things the types of network messages traffic and flows that are generated by the application in operation. Applications manager makes an application decision resulting in creating one or more application classes that categorize the messages traffic and flows into a smaller number of groups. For example application information might inform applications manager that a particular application generates eight 8 different kinds of log and warning error messages. The applications manager may decide to classify all such messages as medium priority traffic.

The mapping of application information to application classes may be represented by creating and storing one or more Application Codepoints ACPs . Thus the application pre defines a set of application classes or Application Codepoints . The ACPs identify and define one or more types of traffic flows or classes that are produced by an application. ACPs may define application flows in a static manner for example according to intrinsic application parameters. For example one ACP value may be associated with all traffic generated by a specific application module. Another ACP may identify batch traffic and another may identify transactional traffic.

Sequential ACP values are shown in Table 1 and Table 2 however an ACP may have any value according to any order. Any number of ACP values may be defined. The number of ACPs that are defined depends upon the level of detail granularity of control that is desired for traffic flows of an application.

To establish ACPs for an application an application manager may edit a configuration file that maps ACP values to application flows. For example application manager could be a Webmaster who prepares a configuration file that maps URLs and users into pre defined application classes such as High Medium and Low.

Network manager is an individual having expertise in configuring operating and maintaining a network such as network of . Network manager receives the application classes and based on the network manager s accumulated expertise in network operations makes a network decision that maps each of the application classes into one or more network classes . The network classes represent a mapping of a specific QoS for the network typically in terms of DSCPs or RSVP messages. For example the network manager may decide to map the High class of traffic to DSCP 52. 

Preferably such mappings are stored in the Repository in the manner described in this document. The mappings may be created and stored using an external application program. Preferably the program creates and stores a default policy value e.g. a default DSCP value when no mapping is created for a particular ACP value. This simplifies the mapping process.

Both network manager and applications manager may be influenced by external management and its policies and procedures.

In operation the application consults with the policy system in order to complete the mapping from the ACPs into network services for example into DSCP values. Generally such mapping is stored in the Repository. The policy manager uses the policy system to store the mappings in the Repository and an application uses an access protocol such as LDAP to retrieve a mapping from the Repository.

In one embodiment the mapping from ACPs to network services is communicated between applications manager and network manager using a Service Level Agreement. The applications manager and network manager may be associated with different enterprises. Advantageously applications manager only needs to prepare a mapping of an application function into an ACP and may ignore details of the network services that are used to achieve a particular QoS. Further network manager only needs to prepare a mapping of ACPs to network services and need not know or consider the application functions that are handled.

As a result network manager considers only groups or classes of application traffic flow and need not know or consider a much larger set of application functions that fall into such groups or classes. Minimizing the number of ACPs will optimize the local policy matching process. Further flexibility and granularity in decision making are supported because the application manager may consider all application parameters and permutations before determining application policies. Accordingly application managers may participate in the decision process pertaining to QoS for applications. A network administrator may control even the most complicated applications which might involve many application specific parameters and require extensive application specific expertise.

In an embodiment the Repository stores one or more Policy Statements. Each Policy Statement applies to a specific application and may be specific to a logical instance of the application. It describes a condition and a network service to be applied for traffic matching that condition. A Policy Statement may comprise a general Boolean expression of its underlying policy conditions.

Each condition describes a subset of traffic flows of the application. Each condition comprises basic condition components. Each basic condition comprises a basic policy parameter identifier an operator and an operand. Policy identifiers may be application specific. Each policy identifier has a pre defined type such as string integer or enumerated value. For example a policy identifier may be URL an operator may be contains and an operand may be www.cisco.com .

A plurality of global pre defined Policy Identifiers is stored. Pre defined Policy Identifiers include source and destination IP address source and destination port numbers protocol application identifier and ACP. Application specific policy identifiers are added to the Repository manually or by a configuration file provided by the application or by program calls using standard protocols such as LDAP.

As shown in Root node is coupled to a plurality of Application nodes A B C. There may be any number of Application nodes. Each Application node represents a particular application program that is used in the managed network. Child nodes of an Application node represent policies that are associated with that application.

Each Policy Statement in the Repository comprises stored information that represents a condition and an action involved in the policy. For example Application node A is coupled to two Condition nodes A B. Each condition comprises a parameter an operator and an operand. For example a parameter may be a range of ACP values or one or more URL statements that contain strings. Each operator is a comparison such as equal to greater than less than in range etc. Each condition evaluates to a Boolean value.

Conditions are joined by Boolean operators. For example Condition node A is coupled to Condition node B by an AND operator . There may be any number of Condition nodes and any number of operators.

The Repository is associated with a list of network services that are implemented by the system. The list of services stores abstract definitions of services that are later translated into a specific configuration of a network device. Examples of services include delay guaranteed bandwidth a queuing type on a router interface etc. The services in the list also define signaling mechanisms that may be used for accessing the service for example by using a specific DSCP or IP Precedence value.

Each Policy Statement terminates in an Action. For example Condition nodes A B terminate at Action node . Each Action node represents an action to apply to network devices when an associated application generates a traffic flow such that the Policy Statement evaluates to TRUE. An Action node may store information that indicates for example that network devices must service the flow using DSCP or IPP.

The Repository may be implemented in the form of a Directory Server in a database or using one or more files expressed in an Interface Definition Language IDL .

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for creating policies for use in policy based management of quality of service treatments of network data traffic flows. According to one embodiment of the invention creating policies for use in policy based management of quality of service treatments of network data traffic flows is provided by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface . In accordance with the invention one such downloaded application provides for creating policies for use in policy based management of quality of service treatments of network data traffic flows as described herein.

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

