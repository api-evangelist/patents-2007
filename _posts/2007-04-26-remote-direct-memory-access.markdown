---

title: Remote direct memory access
abstract: Methods, parallel computers, and computer program products are disclosed for remote direct memory access. Embodiments include transmitting, from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes, a request to send message, the request to send message specifying a data to be transferred from the origin DMA engine to data storage on each target compute node; receiving, by each target DMA engine on each target compute node, the request to send message; preparing, by each target DMA engine, to store data according to the data storage reference and the data length, including assigning a base storage address for the data storage reference; sending, by one or more of the target DMA engines, an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine; receiving, by the origin DMA engine, the acknowledgement message from the one or more of the target DMA engines; and transferring, by the origin DMA engine, data to data storage on each of the target compute nodes according to the data storage reference using a single direct put operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08325633&OS=08325633&RS=08325633
owner: International Business Machines Corporation
number: 08325633
owner_city: Armonk
owner_country: US
publication_date: 20070426
---
This invention was made with Government support under Contract No. B519700 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for remote direct memory access.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

A torus network lends itself to point to point operations but a tree network typically is inefficient in point to point communication. A tree network however does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather.

In large processing systems using conventional direct memory access DMA protocols each target DMA engine typically receives data packets at the target nodes in a DMA memory first in first out FIFO buffer. Each packet in the memory FIFO buffer must be processed by the target processor core which consumes computational resources. When high bandwidth is important such conventional protocols may be insufficient.

Methods parallel computers and computer program products are disclosed for remote direct memory access. Embodiments include transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message the request to send message specifying a data to be transferred from the origin DMA engine to data storage on each target compute node receiving by each target DMA engine on each target compute node the request to send message preparing by each target DMA engine to store data according to the data storage reference and the data length including assigning a base storage address for the data storage reference sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines and transferring by the origin DMA engine data to data storage on each of the target compute nodes according to the data storage reference using a single direct put operation.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods computers and computer program products for remote direct memory access according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for remote direct memory access according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a tree network which is optimized for collective operations and a torus network which is optimized point to point operations. Tree network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operations for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

A scatter operation like the broadcast operation is also a one to many collective operation. All processes specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given datatype where N is the number of processes in the given group of compute nodes. The send buffer will be divided equally and dispersed to all processes including itself . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes computer includes input output I O nodes coupled to compute nodes through one of the data communications networks . The I O nodes provide I O services between compute nodes and I O devices . I O nodes are connected for data communications I O devices through local area network LAN . Computer also includes a service node coupled to the compute nodes through one of the networks . Service node provides service common to pluralities of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally to for remote direct memory access by transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message the request to send message specifying a data to be transferred from the origin DMA engine to data storage on each target compute node receiving by each target DMA engine on each target compute node the request to send message preparing by each target DMA engine to store data according to the data storage reference and the data length including assigning a base storage address for the data storage reference sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines and transferring by the origin DMA engine data to data storage on each of the target compute nodes according to the data storage reference using a single direct put operation.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of remote direct memory access according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. The parallel computer in the example of includes sixteen compute nodes parallel computers capable of remote direct memory access according to embodiments of the present invention sometimes include thousands of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Remote direct memory access according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of remote direct memory access according to embodiments of the present invention. The compute node of includes at least one computer processor as well as random access memory RAM . Processor is connected to RAM through a high speed memory bus and through a bus adapter and a extension bus to other components of the compute node. Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored RAM is a parallel communications library a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in parallel communications library . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be used. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for remote direct memory access according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these it typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in remote direct memory access according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Collective Operations Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations such as for example a network configured as a binary tree. Collective Operations Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of collective operations adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example collective operations adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller computer hardware for direct memory access and a DMA engine computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU initiates the DMA transfer the CPU does not execute it. The DMA engine of is useful in remote direct memory access according to embodiments of the present invention such that the DMA of is capable of transmitting to other DMA engines request to send messages receiving from other DMA engines request to send messages preparing to store data sending acknowledgment messages acknowledging that the DMA engine is are prepared to receive a data transmission from other DMA engines receiving such the acknowledgement messages from another DMA engines and transferring data to data storage on another target compute nodes using a direct put operation.

A direct put operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems for remote direct memory access according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Collective Operations Adapter useful in systems for remote direct memory access according to embodiments of the present invention. Collective Operations Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Collective Operations Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Collective Operations Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation illustrates an exemplary data communications network optimized for point to point operations . In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh that wraps around to form a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in remote direct memory access on accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation illustrates an exemplary data communications network optimized for collective operations by organizing compute nodes in a tree. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with collective operations data communications adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for remote direct memory access accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in remote direct memory access according to embodiments of the present invention. The exemplary communications architecture of sets forth two compute nodes compute node and compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact remote direct memory access according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer that implements communications between applications running on the compute nodes and by invoking functions in an application messaging module installed on each compute node and . Communications among the applications and in the application layer are effected through messages passed between applications. Applications may communicate messages invoking function of an application programming interface API exposed by the application messaging modules .

The exemplary communications architecture of includes a system messaging layer that implements system specific protocols for communications that support messaging in the application layer and the application messaging layer . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging modules and in the application messaging layer . Such system specific protocols used for communications in the system messaging layer are typically isolated from the application layer making the application layer somewhat independent of system specific details.

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium.

The exemplary communications architecture of illustrates a DMA engine for the origin compute node and a DMA engine for a target compute node . The DMA engines and in the example of are illustrated in both the system messaging module layer and the communications hardware layer . The DMA engines and are shown in both the system messaging module layer and the communications hardware layer because DMA engines useful in remote direct memory access according to embodiments of the present invention often provide system messaging level interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engines and of each include a reception fifo buffer and that include data descriptors for messages and data received from other DMA engines on other compute nodes through a memory fifo data transfer. The exemplary DMA engines and of each also include an injection fifo buffer and that include data descriptors for messages and data to be sent to other DMA engines on other compute nodes through a memory fifo data transfer.

A memory fifo data transfer operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. In a memory fifo data transfer operation data is transferred along with a data descriptor describing the data from an injection fifo for the origin DMA engine to a target DMA engine. The target DMA engine in turns places the descriptor in the reception fifo and caches the data. A core processor then retrieves the data descriptor from the reception fifo and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

The DMA engines and of are also capable of transferring data through a direct put operation . As mentioned above a direct put operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

The DMA engines and of are also capable of remote direct memory access according to the present invention. DMA engines and are capable of transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message the request to send message specifying a data to be transferred from the origin DMA engine to data storage on each target compute node receiving by each target DMA engine on each target compute node the request to send message preparing by each target DMA engine to store data according to the data storage reference and the data length including assigning a base storage address for the data storage reference sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines and transferring by the origin DMA engine data to data storage on each of the target compute nodes according to the data storage reference using a single direct put operation .

For further explanation sets forth a flow chart illustrating an exemplary method for remote direct memory access according to the present invention. The method of includes transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message . The request to send message typically identifies data to be sent from the origin DMA engines to the target DMA engines and also typically specifies a data storage reference and a data length. The data storage reference may be implemented as an address space and an offset from that address space identifying the beginning storage location of the data to be sent. The data length provides the size of the data to be stored. A target DMA engine receiving such a request to send may then use the data storage reference and data length to identify data storage on the target node for storing the data upon receipt from the origin DMA engine.

Transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message may be carried out by broadcasting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message as described below with reference to . The broadcasted a request to send message is received by the target node a copy of the request to send message is stored and the request to send message is immediate forwarded to the next compute node without processing the message. Upon receiving a broadcasted request to send message each receiving target returns an acknowledgement message as described below with reference to .

Transmitting from an origin DMA engine on an origin compute node to a plurality target DMA engines on target compute nodes a request to send message may use another store and forward implementation described below with reference to . The request to send message transmitted according to a store and forward implementation of is processing by a target DMA engine to include in the request to send message data storage information about that target compute node. The processed request to send message is then forwarded to another target DMA engine to be processed and forwarded. In such an implementation only the last DMA engine to process the request to send message sends an acknowledgement message to the origin DMA engine acknowledging all the DMA engines are prepared to receive data.

The method of includes receiving by each target DMA engine on each target compute node the request to send message and preparing by each target DMA engine to store data according to the data storage reference and the data length including assigning a base storage address for the data storage reference. The base storage address is typically an initial address on the target compute node for storing the data upon receipt from the origin DMA engine.

The method of also includes sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine . Sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine may be carried out by sending by each target DMA engine an acknowledgement to the origin DMA engine as described below with reference to .

Alternatively sending by one or more of the target DMA engines an acknowledgment message acknowledging that all the target DMA engines are prepared to receive a data transmission from the origin DMA engine may be carried out by sending by only the last target DMA engine an acknowledgement to the origin DMA engine as described below with reference to .

The method of also includes receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines . Receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines may be carried out by establishing by the origin DMA engine a check in counter having a value equal to the number of target DMA engines decrementing by the origin DMA engine the check in counter upon receiving an acknowledgement message from each target DMA engine and instructing by the origin DMA engine upon decrementing the check in counter to zero a processing core on the origin compute node to initiate the single direct put operation as described below with reference to .

Receiving by the origin DMA engine the acknowledgement message from the one or more of the target DMA engines alternatively may be carried out by receiving a remote get message from the last target compute node to receive the request to send message as described below with reference to .

The method of includes transferring by the origin DMA engine data to data storage on each of the target compute nodes according to the data storage reference using a single direct put operation. A direct put operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. A direct put operation allows data to be transferred and stored on the target compute node with little or no involvement from the target node s processor. To effect minimal involvement from the target node s processor in the direct put operation the origin DMA transfers the data to be stored on the target compute node along with a specific identification of a storage location on the target compute node. The origin DMA knows the specific storage location on the target compute node because the specific storage location for storing the data on the target compute node has been previously provided by the target DMA to the origin DMA.

The direct put operation in the example of is implemented as a single direct put operation that is broadcast to all the target compute nodes. The direct put is implemented as a single direct put by setting a deposit bit on each packet used to transmit the data of the direct put operation sent to each target DMA. Setting the deposit bit on each packet used to transmit the data of the direct put operation instructs each target DMA to store the data and forward the data to the next target node.

As mentioned above in some embodiments of remote direct memory access according to the present invention a request to send message is broadcast to each target DMA and an acknowledgement message is sent in response from each target DMA to the origin DMA. For further explanation sets forth a calling sequence diagram illustrating a method for remote direct memory access according to the present invention in which a request to send message is broadcast to each target DMA and each target DMA engine sends to the origin DMA an acknowledgement message acknowledging that the target DMA engine is prepared to receive a data transmission.

In the example of a processor core of the origin compute node invokes a function call on the DMA engine of the origin compute node to initiate a direct put operation to transfer data to data storage on the target compute nodes and . In the example of in response to the function call the DMA engine broadcasts a request to send message to each target compute node a descriptor of which is placed in a reception fifo buffer of each target DMA engine of each target compute node and . The request to send message in the example of is broadcast in the sense that the message is transmitted to a DMA engine on a first target compute node who stores a copy of the request to send message and immediately transmit to a DMA engine on the next target compute node the same unprocessed request to send message. That unprocessed message is transmitted in this way to all the target compute nodes of the broadcast. Broadcasting the request to send message allows the target DMA engines to receive the request to send message as fast as possible

In the example of in response to receiving a request to send message the core processor of each target node and then processes and the message in the same manner. Each core processor receives data a descriptor of the request to send message from an injection fifo maintained by the target DMA engine and instructs the target DMA engine to send in response to the request to send message an acknowledgement message that includes data storage information such that the origin DMA may effect a direct put operation on the target compute node. In the example of the acknowledgement message is implemented as a clear to send CTS message and .

In the example of the clear to send messages may be send as a direct put operation rather than a messaging operation to a reception fifo buffer such that the origin DMA is notified of the clear to send without invoking a processor core on the origin compute node. Alternatively the clear to send message may be sent to a reception fifo for the origin DMA engine which is processed by use of a core processor on the origin compute node.

In the example of to determine that all the target DMA engines are ready to receive the data of the direct put operation the origin DMA engine of the origin compute node establishes a check in counter having a value equal to the number of target DMA engines. The origin DMA engine decrements the check in counter upon receiving each acknowledgement message and from each target DMA engine of each target compute node and .

The check in counter may be implanted as data storage have a length of corresponding to the length of a clear to send message. In such cases a target DAM engine may provide a direct put of the clear to send message to that data storage. Such a clear to send message with a direct put may for example write zeros or ones to the data storage. When all the data storage has then been written to such as by all ones or zeros for example the counter may be considered decremented to zero. In this manner the direct put of the clear to send message itself may assists in decrementing the counter. The use of such a direct put shields processor cores on the origin compute node from having to process clear to send messages.

Upon decrementing the check in counter to zero the origin DMA engine instructs a processing core on the origin compute node to initiate the single direct put operation . The direct put is implemented as a single direct put operation that is broadcast to all the target compute nodes and . The direct put is implemented as a single direct put by setting a deposit bit on each packet used to transmit the data of the direct put operation sent to each target DMA. Setting the deposit bit on each packet used to transmit the data of the direct put operation instructs each target DMA to store the data and forward the data to the next target node.

After the origin DMA engine has sent all the data of the direct put operation the DMA engine invokes a call back function instructing a processor core of the origin compute node that the data of the direct put operation has been sent. Similarly upon receiving all the data of the direct put operation by each target DMA of each target compute node and the target DMA engines invoke a call back function and instructing a processor core and of each target compute node and that the data of the direct put operation has been received.

As mentioned above transmitting a request to send message to target DMA engines may use a store and forward implementation. For further explanation sets forth a calling sequence diagram illustrating a method for remote direct memory access according to the present invention that uses a store and forward implementation and in which only one target DMA engine sends to the origin DMA an acknowledgement message acknowledging that all the target DMA engine are prepared to receive a data transmission from the origin DMA engine.

In the example of a processor core of the origin compute node invokes a function call on the DMA engine of the origin compute node to initiate a direct put operation to transfer data to data storage on the target compute nodes and . In the example of in response to the function call the DMA engine sends a request to send message to a first target DMA of a first target compute node a descriptor of which is placed in a reception fifo buffer of the target DMA engine. In the example of a core processor of the first target node processes the request to send message by retrieving the descriptor of the request to send message and instructing a target DMA engine of the first target compute node including in the request to send message data storage information directing the origin DMA to store the data in memory on the target compute node and preparing to receive the data of the direct put operation. The DMA engine of the first target node processes the request to send message by including data storage information about the target node such that the origin node may effect a direct put operation with the target node and then forwards the processed request to send message to the next compute node .

In the example of a core processor of the second target node then invokes the processing of the request to send message by retrieving the descriptor of the now once processed request to send message and instructing a DMA engine on the second target compute node to include in the request to send message data storage information for effecting a direct put operation with that target compute node and preparing to receive the data of the direct put operation. The DMA engine of the second target node then forwards the processed request to send message to the next compute node .

In the example of a core processor of the third target node then processes the request to send message by retrieving the descriptor of the now twice processed request to send message and instructing a DMA engine on the third target compute node to include in the request to send message data storage information for effecting a direct put with that target compute node and preparing to receive the data of the direct put operation. The DMA engine of the third target node and in this simple example the last target node then sends an acknowledgement message to the origin DMA acknowledging that all the target DMA engine are prepared to receive a data transmission from the origin DMA engine. In the example of the acknowledgement message is implemented as a remote get message.

Upon receiving the remote get message the origin DMA engine of instructs a processing core on the origin compute node to initiate the single direct put operation . The direct put is implemented as a single direct put operation that is broadcast to all the target compute nodes and . The direct put is implemented as a single direct put by setting a deposit bit on each packet used to transmit the data of the direct put operation sent to each target DMA. Setting the deposit bit on each packet used to transmit the data of the direct put operation instructs each target DMA to store the data and forward the data to the next target node.

After the origin DMA engine has sent all the data of the direct put operation the DMA engine invokes a call back function instructing a processor core of the origin compute node that the data of the direct put operation has been sent. Similarly upon receiving all the data of the direct put operation by each target DMA of each target compute node and the target DMA engines invoke a call back function and instructing a processor core and of each target compute node and that the data of the direct put operation has been received.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for remote direct memory access. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications.

Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

