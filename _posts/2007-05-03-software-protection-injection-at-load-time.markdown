---

title: Software protection injection at load time
abstract: A method to apply a protection mechanism to a binary object includes using operating system resources to load a binary object from a storage medium along with a manifest and a digital signature. Authentication of the binary object is performed using the digital signature and the manifest is read to determine a category of protection for the binary object. The operating system selects a protection mechanism corresponding to the protection category and injects protection mechanism code, along with the binary object into a binary image on computer RAM. When the binary image is accessed, the protection mechanism executes and either allows full access and functionality to the binary object or prevents proper access and operation of the binary object. The protection mechanisms may be updated independently from the information on the storage medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001596&OS=08001596&RS=08001596
owner: Microsoft Corporation
number: 08001596
owner_city: Redmond
owner_country: US
publication_date: 20070503
---
The protection of software has many aspects. Some software applications are augmented to detect tampering to avoid malfunctions of the software and to prevent malicious use. Tampering can include the modification of functional modules or the introduction of a virus or other forms of malware. Other software applications can include protections to detect the use of a debugger to prevent a reverse engineering of the software. A debugger can be useful to someone who wishes to discover the functionality of a software application or to modify the application for malicious purposes. Other software may include various verifications to ensure the integrity or authenticity of the software application. Traditionally a software developer generates protection against tampering against the use of debuggers against reverse engineering and the like by generating these protections during the software creation process. As such the protections are fixed and are immutable in the binary image on a software storage device such as compact disk. As a result a malicious entity has a static target to attack. Such a static target even if expertly conceived and executed can over time be successfully attacked reverse engineered and copied or modified without the permission of the original software developer. The present invention addresses these concerns and others.

In one aspect of the invention a list of protection categories is stored in a manifest on a storage medium as part of a binary object. The manifest is read by an operating system OS and a protection mechanism is identified. Code corresponding to the protection mechanism is injected into an image in computer memory of the binary object. When executed the binary image of the binary object also executes the code of the protection mechanism which serves to apply protection verifications upon the binary object. Based on the operation of the protection mechanism access or functionality of the binary object is granted or denied. The protection mechanisms are updateable separately from of the manifest.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In one aspect of an embodiment the static protection nature of a binary program stored on a storage media is changed to involve a more flexible protection that is provided via an operating system OS . In one example embodiment the OS provides the protection mechanisms that a stored media binary program requires. This protection can be applied by the OS when the binary is loaded into memory. The OS can inject any number of updatable protection mechanisms that fulfill the requirements of the binary program on a storage medium when it accesses or loads the binary into computer memory. Since protection mechanisms can be selected at random loading the same binary twice loading it on two identical machines or loading it on two different hardware configurations could result in different protections injected into the final binary image.

This approach has the advantages of a dynamically changing target for hackers and the flexibility to apply new protection technologies on software that was released before the protection technology was created. Thus updates to the protection mechanisms can be received by the OS and applied to a loaded software binary program even though the storage media containing the program was manufactured and distributed far earlier in time than the updated protection mechanism. Another additional advantage is that the distribution of software without protection mechanisms pre built into the binary can ease software development and testing for product teams involved with the software program because the protection mechanism is not hard coded into the software product on the storage medium.

A trusted digital signature which covers the binary information and the manifest is also provided on the portable media . The digital signature is used to prevent on disk tampering of the binary or manifest information when the portable media is read into a computer system using an operating system OS loader. The signature of the binary and manifest guarantees that the binary was not modified before the OS opens it. The applied protections then protect the binary information when it is loaded into computer memory such as random access memory RAM . In general computer memory can be random access memory that is external or internal to the CPU.

Initially the disk is loaded into a computer having an OS file access mechanism such as a CD ROM drive coupled with an OS loader. The OS loader responds to the CD ROM drive and begins to read the disk . The loader looks for the presence of a digital signature on the disk which it uses to verify the validity or authentication of the binary information and the manifest if present . If a manifest is present a digital signature is required to load a binary. However a digital signature may be present without a manifest. Here it is assumed that a manifest and a digital signature are present. If the OS cannot authenticate the binary information and the manifest with the digital signature then the binary information fails to load into computer memory. If the manifest is empty then loading of the binary information on the disk into computer memory can continue normally.

Assuming the digital signature assists in authentication of the binary information and the manifest then the loader reads the manifest portion of the disk to determine which category type of protection to include. The OS loader selects which protection mechanism to use based the expressed protection category type in the manifest. The OS loader accesses a protection routine collection to select the appropriate protection routine corresponding to the protection category type specified in the manifest. Essentially the loader selects the protection routines from a collection of available algorithms. This PR collection is organized into protection categories. This makes it easier to manage for updates and revocations. An updated protection mechanism can include a revocation of a previous protection mechanism. For example when a method has been breached it can be removed from the list of protections used. Also when a new threat is discovered and a new protection is developed the collection of protection routines can be updated in the OS providing new protection mechanisms. These updates can occur periodically or can occur as needed or randomly. The advantage is that the disk does not have to be updated for new protection mechanisms to be implemented to protect the binary information or object on the disk.

As an example of protection routines the protection category or type can be any one or more of anti debugging call verification program identity checks system integrity checks license verifications server inquiries and deny access via X mechanism where X is a load file open or any other type of file access permitted using a computer. In the example of protection routine one PR is an anti disassembly routine PR is encryption routine PR is code verification routine and PR is a second or alternative code verification routine. In the example of assume that protection routine Code Verification protection category is specified by the manifest. The OS loader picks a protection routine in this case PR from the list of protections it has available in the Code Verification category. The PR code verification computer instructions are then available to be included into computer memory along with the binary code from disk . Thus both the binary information and the PR code verification are included into the binary image created in computer memory .

The protection mechanism code injected into the computer memory image of the binaries can typically be anti tamper techniques. For example an anti debugging routine can perform checks to prevent someone from debugging and reverse engineering the binary. Also integrity checks can be injected into the computer memory image to prevent someone from altering the binary in memory. This prevents the introduction of viruses or changed functionality in the binary. Other protections techniques can be created and downloaded to the computer hosting the OS to allow the application of new software protection technologies to the binary.

Note that the manifest specifies the category of protection. The manifest does not list the specific protection routine or mechanism. The loader selects from the routines available in a chosen category when it inserts the protections. Therefore different instances of an application or instances on different machines can have different protections injected. Note that the protection technologies can be updated separately from the binary itself. For example the PR collection of protection code is remotely updatable using a service like Windows Update for example. The service may add new techniques to the collection and remove techniques that have been broken or otherwise compromised. Deployed applications will use the new collection implicitly without needing any modifications in the field.

In one aspect of the invention the binary image in computer memory may be executed using any of the access methods available in an operating system. For example loading a CD ROM as described above can result in a binary image in computer memory with the protection mechanism code also resident in the computer memory. If a prompt is given to the user as a result of the load then binary image can be executed. Alternatively if an application such as Microsoft Word is in computer memory and a drop down menu to open a file is selected then the binary image and the protection mechanism will be executed. Other options also exist for executing the binary image in computer memory. For example an open command or a program call may be used to open binaries that have protection manifests.

In one aspect of the invention protections routines are either general or targeted. Examples of general PRs include routines that perform functions such as do not allow file open access or routines such as verify all functions before they re called . Targeted protection routines include functions such as verify that the binary hasn t changed since it was loaded or functions such as check for presence of a debugger . Targeted protections can be injected into the binary image in multiple ways that could be specified in the manifest along with the protection categories. One example technique of injecting the targeted protections include injection at random locations throughout the program. In one embodiment this can be set as a default injection technique for targeted protection. Another targeted injection technique can be to inject in locations as specified in the manifest. Here the manifest can include a list of functions and their respective targeted locations. Another targeted injection technique can include injection in locations as specified in run time profiling data provided by the manifest. Here functions which are executed most often or least often for example can se specified in the manifest.

Returning to the example of the code verification PR was selected by the OS loader. This protection mechanism was selected to comply with the protection type in the manifest. As such the code verification protection in the binary image in computer memory will verify any functions that the binary calls before the call is executed. If a Do not allow file access protection is injected into the binary image in memory then standard file operations will not be able to access the protected binary. However selected non standard file operations may be able to access the protected binary. Thus protections can be customized within the OS on a user or computer basis.

Upon a successful authentication step is performed to check the manifest for the category or type of protection required by the binary information of the storage media. Once the protection category is retrieved from the manifest the OS loader can select the protection mechanism via a catalog of protection routines available to the OS at step . At step the selected protection code along with the binary information is injected into computer memory to form a binary image in computer RAM.

When the binary object is accessed via computer RAM the binary object as well as the protection mechanism are activated in step . This activation of both the binary object and the injected protection mechanism is possible because both the binary object and the protection mechanism are loaded together in computer memory. Depending on the specific protection mechanism used the binary is allowed to be accessed after the protection mechanism performs its verification or checks in step . For example if the binary object is a data file object or if the binary object is an executable program object the binary object is accessed if the verification of the protection mechanism is successful. Finally the computer system user either a person or a software entity is provided a verification that the protection mechanism is successfully performing its function. For example at step a person user can see a display indication the binary object data program etc. is accessed or not based on the result of execution of the protection mechanism injected into the image file in computer memory. For example should the protection mechanism fail to verify that the binary image is a valid i.e. the binary object is modified an unauthorized copy outdated incompatible etc then the binary object would not be fully executed and a message would be displayed on a user interface indicating the failure and denying access to the binary object. Alternately upon the success of the protection mechanism to verify the binary object is valid compatible authorized un tampered etc then the binary object opens and the user understands that access to the object has been granted via the protection mechanism.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an example host computer includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system .

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from MICROSOFT Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a method for implementing a protection mechanism for binary information on a storage device. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

