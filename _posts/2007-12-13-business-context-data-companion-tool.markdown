---

title: Business context data companion tool
abstract: Methods and apparatuses enable rendering business context data in a desktop widget. The business context data describes a resource, a view, and actionable context data that relate to a business scenario. The business context data is processed to determine a UI component to generate to represent the business context data. The component is then generated and rendered in a desktop widget to provide access to the actionable context data on a client device via the desktop widget. An active business client receives and processes the business context data. The active business client can operate as a widget engine for the business context data to enable the rendering of the business context data on the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250169&OS=08250169&RS=08250169
owner: SAP AG
number: 08250169
owner_city: Walldorf
owner_country: DE
publication_date: 20071213
---
This application is a Non Provisional of Provisional Application No. 60 974 737 filed on Sep. 24 2007 and claims priority thereto.

Embodiments of the invention relate to client server interaction and more particularly to generation and processing of business context data.

Work performed with electronic devices is generally performed in an interactive way where the electronic device computer handheld device wireless device etc. presents data to a user for work and the user performs one or more actions on the data. The user may also create data in an application which data can then be made part of the system or otherwise be interacted with. The user experience with the work environment and or the data to be worked includes how the data is presented to the user for interaction.

The introduction of enterprise service architecture ESA into the enterprise has exposed deficiencies in interactive controls for data. With ESA business applications resemble more a bundle of resources than a monolithic transaction or application. Thus the monolithic approach of building a single application to perform operations does not apply well to modern enterprise systems. The advent of ESA also coincides with the fact that applications and functionality are being applied to multi channel multi modal occasionally connected OCA user experiences. Current solutions are built on the monolithic approach and are inadequate at delivering content to a user on various channels and in various form factors. Although users expect pervasive access to business context data traditional systems do not support the providing of information and tools for multi channel multi modal OCA user experiences. Users have traditionally had to adapt expectations and behavior to deal with limited connectivity limited access to data and limited ability to perform work on tasks.

An attempted solution at providing a different user experience is the user of the MVC architecture to decouple data model M interaction control C and appearance V in generating the user interface. In reality contrary to what is expected traditional separation in these layers does not make the layers agnostic to each other. Backend services are built to feed the model of user interface UI patterns and the controller supports the behavior of the visual layer. Because of these interdependencies the enabling of UI patterns requires sophisticated knowledge about available services and programming skills to integrate the layers. The traditional requirements for knowledge and programming skills results in higher development and maintenance costs to generate multi modal support. Additionally traditional approaches have still not provided the user experience expected by users. The integration of the M C V layers to produce a relatively consistent user experience has remained impractical.

Furthermore work within an enterprise or company is frequently performed within the framework of a business process or a workflow having a business objective. The workflow traditionally has multiple phases or states where business activity is required for each state. Traditional workflows are ERP Enterprise Resource Planning centric. That is workflows as previously established were focused around systems. Traditional methods of attempting to integrate workflow concepts with user experience across multiple platforms has not been effective in providing the consistent experience a user would expect.

Methods and apparatuses enable rendering business context data in a desktop widget. The business context data describes a resource a view and actionable context data that relate to a business scenario. The business context data is processed to determine a UI component to generate to represent the business context data. The component is then generated and rendered in a desktop widget to provide access to the actionable context data on a client device via the desktop widget. An active business client receives and processes the business context data. The active business client can operate as a widget engine for the business context data to enable the rendering of the business context data on the client device.

In one embodiment the active business client further generates and renders one or more components related to business task details. For example a task detail toolbar can be generated. The task detail toolbar provides additional access to data related to the business task than is initially displayed in other views or screens displaying the business task. One implementation of a task detail toolbar provides a transient auxiliary pane that expands off the desktop widget. The content of the auxiliary pane can be switchable between displaying items related to the actionable context data accessible via the desktop widget. The items may include resources activities or related persons.

Descriptions of certain details and implementations follow including a description of the figures which may depict some or all of the embodiments described below as well as discussing other potential embodiments or implementations of the inventive concepts presented herein. An overview of embodiments of the invention is provided below followed by a more detailed description with reference to the drawings.

As described herein a business context data model provides raw business context data that can be delivered to an active client for processing. As used herein business context data refers to data that describes elements of data related to a business context or a business scenario. Business context data as described in more detail below is generated as a meta description with components aggregated from one or more backend systems. A modified application of an MVC like model provides the business context data in a raw format where the active client processes the data and is responsible for generating the user experience based on the resources of the user access device e.g. desktop laptop handheld etc. . The business context data includes actionable context data which provides an environment for a user to perform work. As used herein actionable context data refers to data or data objects on which a user can operate or with which a user can interact to perform one or more business operations. Actionable context data may be referred to also as a business task or simply as work. Actionable context data may or may not be associated with a workflow or a workflow task. That is actionable context data enables a user to accomplish some action with respect to a business purpose which may or may not include an action that is part of a workflow or business process. The model and the active client can be applied to a modified approach to workflow modeling and processing. Thus users who have work to perform on a business activity can more easily and rapidly access and perform work scenarios and activities among a variety of devices suitable to the current situation in which they happen to be.

One example of how business context data can be generated in reference to workflows is via the concept of a Distributed Activity Management. An enterprise system can model a business process for a workflow on multiple layers. Such a model is described in more detail in U.S. patent application Ser. No. 11 803 760 entitled Distributed Activity Management and filed May 15 2007. Note that the Distributed Activity Management is simply one example of how business context data may be generated and an overview follows for the sake of illustration. However other models or systems may be employed to generate business context data. Briefly in one embodiment a business process is modeled on three layers in the Distributed Activity Management system Scenario Activity task and Action. A scenario layer exists on a first level where a developer lays out the activities of users and connects activities of one or several users through an event driven control flow such as RTP relationships. Thus in one embodiment every activity has a requester and a performer. Requests can be simply accepted and acted on or the performer can ask for additional details or enter negotiations with the requester. The scenario description may include a role description for the performer of an activity that profiles the performer with respect to skills organizational role relationships to other performers or simply the name of the user. The role definition facilitates the scenario and a resulting business process to be dynamic. Rather than inputting a particular person into the business process the business process can be defined in terms of a role or a type of person that can should perform a particular action. When the business process is instantiated the system can place an actual person into the workflow.

Scenarios are composed by defining activity blocks assigning them to process roles and linking them through requests. Each activity is triggered by a request which may be either a system event or human request. Resources from the scenario context are handed over to activities as required resources. As used herein resources refer to elements that may be used to perform a work action. Examples may include a business object a vendor an invoice a document a statement of work SOW an interactive form ISO certification questionnaire people a report etc. Ad hoc conversations between requester and performer are supported and optionally captured as a conversation thread.

An Activity Model within a scenario is modeled as a separate entity describing an actionable business context interfacing with the scenario via events. A request event triggers an activity that models personal contributions in the form of a context description that defines potential actions resources rules and related information associated with the activity. The activity may also include requests to other contributors to perform certain activities. An activity can further be split into separate actions that accomplish a task. As used herein a task refers to a phase of a workflow. A task is some work or action which could be an Action as described below or something to do or accomplish. Tasks may be the subject of requests. An activity block is a collection of actions information and related resources that one user needs to accomplish the requested task. Each activity block may provide guidance for individual performers in terms of what actions to perform and the checking of preconditions required resources and business rules. Each activity can be enriched to offer related information and actions. The system can also model activities recursively so that a request within one activity can trigger sub activities or entire new work situations scenarios .

An Action is a reusable atomic building block for meaningful business acts. An action provides a high level enterprise service that encapsulates services and a user interface UI . In one embodiment actions provide a plug and execute interface to the activity context. In one embodiment an action is a non transactional view of a work item. Actions can provide the UI for supporting user interaction. Actions as reusable building blocks can be used to construct complex activities of a distributed workflow. Actions are connected to the enterprise backend ESA and may contain embedded navigation e.g. object links multiple screens such as guided activities . Examples of actions might be Post Message Create PO Approve Vendor View Supplier Details View supplier review Create Vendor Record Request Missing Document Choose Between Candidates Evaluate Candidate Submit Application Set New Salary Promote Employee Create Invoice etc. or anything that can be perceived as an atomic work action from a business perspective. Thus actions will likely be different in different implementations seeing that different enterprises organizations may view the atomic level of actions differently.

The modeling of a business process on multiple different layers enables the use of building block components to model and generate workflows. The model of the business process with the different layers can provide a data model for providing information to a user on various channels in various modes. The use of the building block model can make services and functions available to a variety of devices. The scenarios and activities enabled by the distributed activity model provide a business context and data to enable a user to access and perform work. The scenarios and activities can be understood as a Business Experience Schema BES that is interpreted by an active business client described in more detail below . In one embodiment the active business client provides progressive access to data depending on context and device capabilities. The combination of the above models can result in an RTP framework. The request is generated to trigger an activity or a business task. When a performer accepts the activity the activity is generated and the performer will then be tasked to perform the activity. Thus the RTP framework can provide a work task request that has a structured RTP relationship to at least one other work task related to a business scenario.

In one embodiment activities and actions are annotated and together with personal preferences the annotations allow for smart dispatching previewing and execution of activities in multiple devices. Activities can be annotated with respect to task complexity on a scale from problem solving to simple approval. Actions can be annotated with respect to UI requirements e.g. needs large display can be performed via voice and with respect to availability of service e.g. real time offline OCA .

In one embodiment the distributed activity management model and the active client approach can provide predictive deployment of services and functions to offline clients based on activity models. Such implementations allow a user to work offline and automatically upload at reconnection. Activities encapsulate a coherent set of business content and functions necessary to accomplish specific work intent. This data model can be used to deploy all necessary services and resources to a mobile client enabling the user to look at data and perform actions in an offline mode.

A runtime in a server that provides the model data can create a non technical business only configuration layer on top of the enterprise services architecture and repository ESA and ESR of an enterprise. The active client receives the model data on any of a number of different channels to consume a basic metadata schema of the data. Through the active client a user can navigate to and within activities.

As mentioned above the above provides an example of a model that can be used to generate business context data. More generally business context data as described herein can be generated by any system capable of accessing and creating a meta object from any one or more backend sources of data. The data is accessible to the user in a single context and can be operated on from a single point of access. The active client can directly operate on such entities such as a request an activity and an action referring to the entities described above as well as any actionable context data or meta object. The active client can also interpret these entities at runtime and generate a channel specific UI to navigate scan check and preview such work contexts. In one embodiment the active client is referred to as an Active Business Client because it has an understanding of business context the underlying scenario and is able to actively facilitate managing requests and to progressively disclose more functionality depending on channel and work situation of the user.

From one perspective in one embodiment the active business client consumes data streams similar to an RSS Really Simple Syndication client consuming RSS data streams. An RSS client essentially provides an opt in always on connection to a data stream source which does not require the user to reload or refresh the site to obtain new content. However the application of RSS is limited to news sites blogs or similar web pages where a main page is relatively frequently updated with new content. The active business client as described herein can consume a data feed of a stream of workflow or activity data. As the context behind the context data is updated or the underlying components are changed in the backend the active client can access them for update on the device through which the user will perform work. Thus data associated with business tasks assignments or workflow actions can be automatically updated. In contrast to an RSS connection to an open web site where new content is frequently posted the active business client connects to a backend layer which is generally secure . The data consumed from the backend is data related to work to perform and may include business objects and services that allow a user to perform work. The consumed data is related to an activity or task assigned to a user. The user need not even request the connection or opt in to obtain the data rather it is received by virtue of the assigned business task. Active business clients can be developed for various different types. For example the clients can be customized for different client device types.

The active client can provide access to the resources that enables the performance of interactive or actionable work related to a business scenario. Such capability provides at least the advantage of providing content and the ability to work from multiple devices and locations. Such ability to work from multiple devices and locations can better meet future expectations of users who are foreseen to expect access to content and the ability to manage work on various devices and from many locations. The fact that applications and business functionality will not be localized to a single computer and a single desktop will not inhibit the user from performing work. The user business experience can become pervasive and event driven.

From one perspective an implementation of an active client consuming business context data can be viewed as a modified MVC like architecture. Traditional implementations of an MVC architecture are limited in that the data model M interaction control C and view V layers are not agnostic to each other and require the use of sophisticated knowledge about available services and programming skills to integrate the system together. Current MVC implementations have limited value for a multi channel user experience architecture at least because the data is processed at the server for abstract UI definitions which are converted to different channels after the entire MVC stack has been processed. Such MVC implementations do not have the flexibility necessary to create different native user experiences for different channels which may be significantly different e.g. compare a smart phone a desktop widget and a voice interface within a car . Instead of tweaking abstract UI definitions into different channel dependent user interfaces as previously done the business context data and active client approach described herein can send raw business context data to the client device which is then fully responsible for creating the user experience.

The data model as described above enables the generation of data that can be consumed and processed for a variety of different client devices at the client devices. The output of the data model the M aspect is a business or work domain language rather than a UI domain language. An example implementation may be referred to as an xCUE cross channel user experience system. The model output describes resources views and work for a given business context. The active client at the front end of the client device consumes such data feeds and maximizes the user experience for the client device. The data output or data feed is not limited to a single client interface and thus the user experience is not limited on one device due to cross channel limitations.

Activity centric applications such as mobile applications desktop widgets or transient tasks opened from message inboxes can be built based on a selected set of compound UI building blocks. Contrast such an activity centric approach from the traditional business application where the UI pattern is part of the larger application. Instead of the performing of work out of a traditional business application users can be enabled to access information and inspect detailed information about an item of interest from any of a number of interfaces. Such a user activity can be modeled as one compound UI building block which handles all user interaction in itself.

In one embodiment the active business client renders the business context data in a desktop widget that provides access to data and functions related to executing the work. The business context data can be provided in an RTP framework that enables progressive access to the business context data. For example sufficient data can be provided to enable a user to make a determination of whether to accept the business task. If the business task is accepted more data can be accessed. As performance is executed on the business task more data may be provided. In one embodiment the desktop widget includes a transient auxiliary pane that can be selectively shown to provide access to different data related to the business task such as resources activities and related people.

Principles herein are discussed in relation to presenting business context data in a desktop widget. A short discussion of widgets follows by way of example and not limitation. The functionality of a widget is provided via one or more runtime components within an operating environment in which the widget is instantiated. Widgets are instantiated on a runtime engine that provides control and rendering functionality to the widget. The desktop widget can be understood as an interactive desktop tool where a user would generally associate the user interface with the functionality of the widget. Desktop widgets may also be referred to as gadgets. The widgets as discussed herein could also potentially be implemented as applets which are mini applications similar to a widget and hosted by a full featured application. The distinction between applets and widgets is often negligible but can be described as the difference between being a separate component loaded by a host application versus a mini application supported by a runtime engine.

Widget as used herein should be distinguished from the use of the term widget to refer to GUI components such as sliders buttons checkboxes and dropdowns. The World Wide Consortium W3C define widgets as usually small client side applications for displaying and updating remote data packaged in a way to allow a single download and installation on a client machine . . . . Refer to W3C Widgets 1.0 W3C Working Draft 9 Nov. 2006 . The W3C definition identifies a class of applications referred to herein as widgets. As provided herein the user interaction with the business context data is provided by the interaction with the widget which is able to interpret the interaction to the desired interface and is enabled with necessary application programming interfaces APIs and or code to provide the interaction.

Client device includes UI which represents any type of user interface hardware display components such as an LCD liquid crystal display touchscreen Braille interface etc. with associated drivers as well as interface components that provide input to client device and interact with items displayed on UI . Thus UI can be considered a user interface system with input and output capabilities. Note that UI will have certain capabilities that will change from device to device. For example the screen on a handheld device is generally smaller in form factor than that of a laptop.

Client device includes various client resources which may include for example memory processor storage and display . Resources provide resources with which to process data and perform work. Memory represents any type of memory that provides temporary storage of data and instructions. Memory may include any type of random access memory RAM as well as read only memory ROM or Flash. Thus memory may be a volatile or non volatile memory device i.e. it may or may not lose state when power is interrupted to the memory device . Processor represents one or more processors which may be discrete devices multi core processors central processing units CPUs microprocessors microcontrollers etc. Storage provides non volatile storage of data and instructions. In certain handheld devices memory and storage may be the same device or partitions of the same device. Display specifically represents resources associated with the display capabilities of UI . In one embodiment display also represents stored information about what resources are available and may even indicate how data can be displayed or interacted on client device .

Client device includes active client which is an example of an active client according to any embodiment described herein. Active client represents one or more components that receive and process business context data. In one embodiment active client can be considered to include view and controller referring to the V and C layers of a modified MVC implementation. Controller receives and processes user input and performs one or more actions operations or tasks based on the user input. Thus controller provides mechanisms through which changes may be invoked on the data that is the subject of the M layer. View renders the data for display and interaction in UI . The data itself is discussed in more detail below but briefly is provided as model data from server .

Network represents one or more components that interconnect client device and server . Note that client device is not necessarily always connected to network . However when data is passed to client device or when client device is consuming data it is via network . Network may include network interface cards or components in the separate devices client device and server . The network interfaces interface to wired e.g. Ethernet or wireless e.g. 802.11 networks. Network may include one or more local area networks LANs and or WLANs wireless LANs as well as wide area networks e.g. the Internet . Note that as a mobile device client device may access for example a WLAN which in turn accesses a wired network connection which may access the Internet through a service provider which in turn connects to a network via which server can be accessed. Alternatively the network could be much simpler. Thus network is to be understood as an abstract representation of the connections through which client device and server communicate.

Server includes object model which represents a framework of components from which specific objects may be generated. Object model includes interfaces and access and execution methods for data objects. In one embodiment object model is used to generate objects that are stored in backend . Backend can be a specific enterprise system e.g. ERP enterprise resource planning CRM customer relation management etc. or a repository of data objects not tied to a specific system.

One or more data objects for a business scenario can be generated with data model . xCUE generator represents one or more components that generate such data objects. When discussing xCUE generator generating the data objects can generally be understood to refer to instantiating a data object with specific data and or parameters. Typically the data generated is data that either represents resources or is related to resources of the business scenario. That is a business scenario may have activities data files forms etc. associated with performing a unit of work or accomplishing a task which may or may not be associated with a workflow. There may also be specific people involved e.g. a supervisor for confirmation or approval . xCUE generator generates data related to such resources for the business scenario. In one embodiment xCUE generator provides are executes the task model as discussed above with respect to the activities etc. for the distributed activity management. In such an implementation the workflow components are generated as individual building blocks of the workflow that are aggregated to provide the resources and functions necessary to execute a business task.

Server includes runtime which represents components e.g. software modules and an environment e.g. an operating platform and or application and or APIs to prepare and send the model data to one or more clients. In one embodiment model data represents the data as generated by xCUE generator and enriched with data schema metadata. The data schema metadata provides additional details regarding the business scenario and may include mapping and relational information between data objects and or resources. Data model represents the M component or layer of the modified MVC implementation. The model provides domain specific representations of the data. The domain logic that is part of the data provides meaning to the raw data or parameters used to instantiate the object.

Note distinctions in the MVC like architecture illustrated compared with previous implementations of MVC architectures. Previous implementations of MVC architectures included the controller layer C at the server where data was translated to a specific format for a particular user interface. Thus the server had to support and have separate control for each channel to which data would be provided. In contrast the controller component is part of active client of client device . The server can simply generate data and send it to the client device for processing. Thus model data does not include abstract UI definitions. Additionally there is no need for UI model or UI pattern information to be included in model data . The data itself with the business context information provides what is necessary to render the data in the client device and enable a user to perform work on the data.

Active client includes view which represents a view as described above and controller which represents a controller as described above. Briefly reviewing the view renders data into a form that can be displayed on a UI and interacted with via the UI by a user. The controller receives and processes the user input and provides updates to view . Controller also coordinates access to a backend to cause changes to data to make requests to access updated data or additional data etc. Thus as illustrated view provides local user interaction to controller which can then provide local messages back to view . In between receiving the local user interaction and providing the local messages controller can perform processing access the backend and or queue changes in an offline mode for synchronization when the host client device is brought back online. In one embodiment controller enables active client to determine whether or not to deploy an action or operation described in more detail below . That is the processing by controller can indicate that the client device is not a good device on which to execute a particular action. Based on such a determination the active client may not access one or more services resources or data elements from the backend. The access of services or data may thus be selective based on whether an action will be made available. Thus the particular action may not be enabled on the client device although it might be viewable .

System includes xCUE server which represents an example of a server that generates and provides business context data streams. Such business context data streams may be referred to as xCUE data streams. Server includes server runtime and model . Server runtime includes all components necessary to access the backend and generate business context data. Server runtime provides a runtime in which to instantiate the business context data. The business context data is generated from model which includes frameworks standards methods interfaces e.g. APIs function calls etc. etc. to generate data. The model includes models for workflow building block components.

Mapping composing represents a logical layer in a backend system that can interface between the xCUE server and other backend server systems. For example backend systems may each represent different backends from which data is available. Composing and constructing the actionable context data from components is not limited to accessing components from a single backend. Thus the actionable context data can be composite or mashup data components or meta objects that provide data from multiple distinct systems. The systems need not necessarily be compatible or provide data that has the same methods or attributes. Mapping composing translates and provides the data into the model.

In one embodiment the resulting generated meta components that are formed by multiple distinct components of different systems can be stored as model entities for later reuse. xCUE composite repository can store such composite or meta components. Alternatively xCUE composite repository can store individual components and a mapping or relationship data to compose the data.

System is annotated with a possible implementation flow of how the various components interact. Note that other implementations are possible. In one embodiment a user interaction includes a user attempting to access work that is assigned to the user. The access can be via opening an attachment of an email opening an item on a work center or worklist or the user can create work. At action A controller generates and sends a request for an instance of an xCUE model. At action B xCUE server loads the xCUE model an example of model which may also include other data models . In one embodiment via mapping composing layer xCUE server retrieves bound data from one or more of backends . Some data accessed is bound to one or more services or functions of one or more particular backend systems. The bound data is already bound to the necessary system which enables the data component to be incorporated into a meta component and still have the necessary interfaces for providing data or services expected from the bound data.

Once the individual data elements are gathered xCUE server via server runtime and model builds an xCUE instance with the enriched data at D. In one embodiment the enriched data is data that includes business scenario metadata. The server at E returns the xCUE instance to the client device. The instance is received at controller and processed. One or more local messages can cause the data to be rendered on a user interface.

In one embodiment based on the xCUE instance a user requests a specific action. For example a particular actionable context data component may include a workflow task. The workflow task may include the creation of a purchase order PO for a specific product of a specific system. The user may simply need to request creation of a PO and based on the business context of the xCUE instance active client understands a context behind the request for the PO. Thus the request for the PO is not simply a PO request but the specific PO that the user wants to create. Thus at G active client via controller can generate a request for a service for a contextual action which is an action based on the context of the data.

xCUE server receives the service request and can access the service. The request may be associated with a bound interface of a data element of the business context data sent to the client. The server accesses the service and provides the result to active client . Such an action is illustrated at H where the server pushes a message or a service to the client. The message or service can be processed by controller and presented to the user via view .

As illustrated in one embodiment meta object is generated by accessing various different components of various different backend systems. In one embodiment accessing the various different data components and or incorporating the data components into a meta object instance includes binding the data component to the respective backend system from which it is derived. Thus the interfaces and services related to the data components will become part of the meta object. Data model includes mapping rules between the backend data which is exposed through services and meta object . The mappings can indicate what data elements from what systems are to be used for which structural elements of a meta object. Meta object provides a data structure that describes the data schema needed to enable certain usage scenarios on an active client. Note that meta object may not need to include any UI information. In one embodiment no UI information or minimal UI information is provided in meta object . The mappings of concrete elements as illustrated in backends to the various defined structure components of meta object provides an meta object instance in runtime .

In one embodiment the meta object instance can be provided similar to a data stream to active client . xCUE data stream represents such a stream that provides xCUE instance data . Note from the shading of the component parts of instance data that different data elements from the different backend systems have been incorporated together into a meta object instance. The mapping of the different elements is based on the business scenario and may be based on the type of client to which the data will be sent. In one embodiment instance data includes business data task semantics contextual information and actions. The composed instance data of the meta object is interpreted by active client and presented into a UI associated with the host client device.

Active client receives and enables a user to access and operate on instance data . Note that as a data stream there may be an active link between active client and the server. If elements of instance data are changed the changes may be pushed to active client to dynamically update instance data . Changes requested at active client e.g. via the user are executed to the various backends based on the mappings and any bindings that may exist on the data elements.

The client device also includes information related to business scenario . Business scenario includes information that indicates a type of operation being performed a task being executed etc. In one embodiment such business scenario information is provided to the client as metadata in the business context data. The actions and processing performed on the client device will be performed under the business scenario.

The client device includes active client which represents an example of an active client according to any discussed herein. Active client may be illustrated as various functional elements that may be provided by the active client. Note that not all functional elements shown are necessarily part of every implementation. Additionally active client could be implemented with other functional elements including similar or substitute functions to those illustrated. The functional elements may be provided as modules or engines whether hardware software or a combination. Possible functional elements may include scenario identifier requester UI capability identifier receiver processor UI component generator and disconnect determiner . Each functional element will be discussed briefly in turn.

Scenario identifier enables active client to identify the business scenario to which an activity and resources are related. In one embodiment scenario identifier includes a metadata reader to access and process metadata associated with business context data to identify a business scenario. In one embodiment scenario identifier reads metadata associated with an operating context that identifies the business scenario. Based on the identified scenario active client can generate contextual requests and produce contextual actions.

Requester enables active client to generate requests for instances of meta objects. Requester can generate and send a message to the data source server for an instance of a meta object related to a business scenario e.g. data related to a workflow task to be performed on the client device. In one embodiment the request can identify the business scenario to the server to enable the server to determine what resources are associated with the business scenario and to generate an appropriate meta object.

UI capability identifier enables active client to identify what capabilities are associated with the particular client UI. The UI capabilities are described above with respect to capabilities . Such capabilities can be identified via querying the UI or via access to stored information about the device. In some implementations both querying the UI and accessing stored information will be used. Determining the UI capabilities can inform the view layer of the MVC architecture.

Receiver enables active client to receive messages from the server including message that have business context data. The receiver can include hardware and software components of a network connection or any other communication mechanism employed between the client and server devices. Receiver receives raw data content not containing UI pattern or other UI specific information.

Processor enables active client to process raw data content received by receiver . The business context data will be processed to determine among other things a business context and what components are associated with the business context data. Processor represents the ability of active client to handle raw business context data. The data needs to be processed to determine how to render it determine what capabilities are needed to display certain information and determine how the user can interact with the data. Such information informs both the view layer and the controller layer of the client device.

UI component generator enables active client to generate UI components e.g. GUI elements with proper interfaces that render a representation of the meta object data and enable its interfaces on the client device. Not all interfaces are necessarily available on every device which may be determined by processor . Those that are available are converted from raw data form to interactive content on the client device.

In one embodiment active client includes disconnect determiner which enables active client to determine a disconnect condition exists. A disconnect condition can be identified via metadata associated with a user s operation e.g. a network connection session will expire in x minutes or with information known within the system e.g. the user s calendar indicates that travel is planned for the next three days . In general a disconnect condition exists when a client device will be disconnected or offline from a server that provides business context data. Disconnect determiner may be able to not only determine that a disconnect condition exists but to identify the occurrence of the condition or identify that a condition is impending. Based on such a determination and or identification active client may access resources and store data and services or functions locally that will be needed to perform a business task. Thus rather than operating in a live or data stream data feed mode as described above active client can actively deploy functions and data necessary to perform work related to a business context. Thus a user could have all elements accessed and stored locally that will enable the work to be performed on the client device in an offline mode.

Server is coupled to active client and generates and provides business context data to active client . Server includes model and server runtime . The model and runtime are similar to components that are described above with reference to descriptions of servers with respect to other figures. A detailed discussion of these components will not be provided here. Briefly the model provides a framework and a mapping of data elements onto a meta object to create a meta object instance. The meta object instance provides a description of one or more resources one or more views and actionable context data or a business task related to a business scenario. Generally a meta object instance represents a single business task although an implementation could be provided where multiple business tasks are enabled by a single meta object instance. The server runtime instantiates the meta object instance and allows for the object instance to be passed to active client .

Backend is coupled to server . Backend represents one or more systems which may include servers databases repositories data objects data elements which may be data objects or specific services or functions etc. In one embodiment backend includes a mapping or association of resource context data and view with business scenario . Business scenario could be a source of business scenario or business scenario may represent a key in a lookup table to determine what resource s business task s and view s are associated with the business scenario. As referred to herein a business scenario provides a context and an end purpose for a business task. That is a business task may not exist alone but rather be part of a larger purpose of what is to be accomplished via the task. The business task may be one of multiple tasks that accomplish an end goal of business. The end goal can be anything that a business does such as processing an order generating a purchase producing a product etc. A resource e.g. resource may refer to a function a service a document a file a data object or anything that may be used to perform a business task. A resource may also represent a person or a particular role e.g. manager . The business task e.g. task may refer to an operation or unit of work that is performed to accomplish the business purpose. The task may be simple such as approving an order or more complex such as generating a proposal. The task may be part of a workflow but is not necessarily part of a workflow. A view may refer to an indication of what data is to be displayed a data layout what objects and or graphics are associated with what functionality what a starting view of the data is what areas are expandable or can be further reviewed what text fields to show what graphics to display etc. Generally a view represents how the data can or should be presented on a UI to the user.

When business context data is generated by server the business context data defines a resource a business task and a view. Note that multiple views multiple resources multiple tasks may be possible. When the business context data is passed to active client the active client is able to process the business context data to extract such information and render the data for presentation in the UI.

Various components referred to herein as modules clients engines or agents described herein may be a means for performing the functions described. Each component described herein includes software or hardware or a combination of these. The components can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc. Software content e.g. data instructions configuration may be provided via an article of manufacture including a machine readable medium which provides content that represents instructions that can be executed. The content may result in a machine performing various functions operations described herein. A machine readable medium includes any mechanism that provides i.e. stores and or transmits information in a form accessible by a machine e.g. computing device electronic system etc. such as recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. . The content may be directly executable object or executable form source code or difference code delta or patch code . A machine readable medium may also include a storage or database from which content can be downloaded. A machine readable medium may also include a device or product having content stored thereon at a time of sale or delivery. Thus delivering a device with stored content or offering content for download over a communication medium may be understood as providing an article of manufacture with such content described herein.

The input data to mobile device is business context data which is represented by xCUE raw data . xCUE raw data represents data that includes information and functions necessary for mobile device to allow a user to operate on the business task but does not have specific UI definitions or UI specific implementation details. The data is raw because the processing needed to render the data is not provided at the server in generating the data but is provided at the client side via the active client that receives the business context data.

Mobile device includes active business client which provides an example of an active client according to any embodiment discussed herein. Active business client receives and processes raw business context data and presents the data to a user. Raw data provides business context data for an activity or a business task. The activity can be understood in one embodiment as functionality that is to be deployed to the mobile device. An event trigger can cause the functionality to be deployed to the mobile device. Event triggers include system events user actions or requests etc.

An example may be that a user of mobile device is requested to create a statement of work or master service agreement for a particular vendor or create a vendor record. The initial request can be provided to mobile device as a message indicating the user is requested to do something. The user could then check to see on mobile device if all information is provided for example whether all vendor information has been provided. In one embodiment only actions that can be executed on a client device are deployed to the client device. For example sending an action to mobile device for a user to check might not make sense if the user then cannot execute the action on mobile device . Thus in one embodiment the server determines whether to make the action available on the mobile device or determines whether to deploy the action . Thus in one embodiment all business clients on any form factor may be enabled and can receive business context data. The user can then review request review an activity and see what action should be taken. However if the action cannot be executed on the client device the action may not be available. In one embodiment actions are annotated with messages such as perform only in online mode etc. Thus the system can determine whether actions should be deployed and available to a user. The annotations can be provided by the system e.g. the server for example based on metadata related to the actions or business tasks or a lookup table to indicate requirements for particular actions. Such annotations can be added to the business context data and sent to the client device.

Mobile device may handle a variety of different tasks and data. There may be a general pattern for handling particular tasks. As illustrated asynchronous service may be queued. An asynchronous service is one where active business client may make a request and then return to performing other operations without waiting for a reply. The asynchronous service may be queued until a connected server is ready to receive and process the request. The asynchronous service may be queued while the mobile device does not have connectivity and synchronizes when a connection is available. In one implementation a connection may be available but messages are only sent during a synchronization time. Asynchronous service can be exchanged during the synchronization.

Mobile device may include mobile service engine which represents one or more components that allow for on demand services. Examples of on demand services may include viewing a report opening an object posting a message entering a form creating a PO etc. Mobile service engine provides mechanisms for receiving and executing service components. More particularly the components may be remotely managed. In one embodiment mobile service engine is an implementation of a framework compatible with OSGi Open Services Gateway initiative Alliance framework. Briefly OSGi provides specifications for a framework that defines a service registry and a life cycle model for applications. The framework enables a number of different OSGi layers APIs and services that are compliant with the model. The framework provides a component model where applications or components can be remotely managed including installing starting stopping updating and uninstalling the components. The remote management can be performed without requiring a resetting or a rebooting of the underlying operating environment. The framework also provides for a service registry to allow detection of a change in state of services in the system e.g. detecting new services detecting that a service has become unavailable etc. . On demand service can be handled via mobile service engine to provide the service as possible as the mobile device is connected OCA .

Locally deployed services are executed in an offline mode. Local offline data represents data that is loaded on mobile device and available locally. Offline service represents any service that can be accessed locally whether or not the mobile device is operating offline or not. In one embodiment described in more detail below services necessary to perform certain operations are accessed and locally stored as local offline data to enable execution of an operation in an offline mode that would otherwise be performed via the asynchronous service or on demand service mechanisms.

In one embodiment active business client includes service agent which determines what services are necessary to perform an operation or execute an action. Service agent can coordinate operation of the device based on the appropriate service. Thus for example operations that require on demand service are directed via service agent to mobile service engine for execution.

In one embodiment service agent is proactive or predictive in the deployment of services. Services that will be necessary to perform an operation can be accessed and provided to the user on the mobile device to enable the execution of an action. Thus if the service is locally available service agent can provide the service. If the mobile device can connect to a backend to obtain the service service agent can trigger such an interaction between the mobile device and the backend to enable the user to perform the work. In another example if one or more records are missing to be able to execute an action service agent can trigger the creation of the record offline and update them once the mobile reconnects.

On the server side the server generates business context data. The server identifies a business scenario for which to create the context data . In one embodiment the business scenario can be identified in a request from the client. The server identifies a resource a view and actionable context data related to the identified business scenario . The business scenario can be defined for example as a data structure or table with the associated components. The server accesses a business context data model for generating the business context data . The business context data model includes rules for mapping and potentially includes specific associations with which to generate an instance of business context data.

The server accesses business objects or other data components or services from one or more backend services . The accessed components can be used to generate a composite data object. The server generates the instance to create business context data . The instance represents raw business context data that is not formatted to a particular user interface. The server transmits the raw business context data to the client .

The client receives the business context data and processes it with an active client. The active client identifies one or more UI capabilities of the client device . Identifying the UI capabilities can inform the active client in making a determination of which actions tasks should be deployed and in determining what UI components to create to represent the data on the client device. The active client generates one or more UI components based on the business scenario identified in the business context data and based on the UI capabilities . The active client renders the components in the UI and provides functionality in the client device in conjunction with generating the UI components . The UI components provide an interactive representation of the functionality which the user can then execute.

In one embodiment the active business client predictively obtains the identified resources and or services from a server prior to the occurrence of the disconnect condition . Such a timing can be triggered by a scheduler where a user establishes that at a certain time the user will be going home or leaving on a trip or disconnecting etc. The active business client could request such information when a particular activity is presented to the user on the client device. Based on the identified resources and the disconnect condition the active business client obtains the resources and stores the accessed resources and services locally on the client device . Storing the resources locally makes them available for offline operation.

When the active business client then detects that the disconnect condition has occurred the local resources are activated on the client device to allow local access to the resources services .

Server includes business context data generator which represents the components and functionality necessary to generate business context data . Business context data generator includes models data structures APIs function calls etc. which enable aggregating business objects from one or more enterprise systems into a composite object that describes a business scenario and actionable context data related to it. Business context data is sent to active business client for consumption.

The basic operation of active business client is described in detail above. In one embodiment active business client operates as an operating platform for one or more business companion tools . Business companion tools may be implemented as desktop widgets. Alternatively they could be implemented as applets launched by a host application e.g. a browser a workflow application a business application . In implementations where business companion tools are implemented as desktop widgets active business client can be considered to operate as a widget engine. In implementations where business companion tools are implemented as applets active business client may be incorporated as an extension or a module of an underlying application.

Active business client includes view layer and controller layer which implement view and controller functions of an MVC like architecture. In the implementation described the view layer may include rendering engine which provides a rendering engine to render the content of the business companion tools. The controller layer may also include business context data interpreter which provides an interpreter or processor for the data that is rendered in the business companion tools. Known widget engines include comparable elements such as rendering engines and XML extensible markup language converters. In one embodiment business context data interpreter enables active business client to generate UI components for the various elements of business context data .

Business companion tools are examples of small focused function applications such as widgets that provide access to business context data. In one embodiment the business companion tools can be considered to run on top of active business client . In one embodiment as a runtime environment or operating platform for business companion tools active business client can operate as a mediator of services. Certain data components that make up business context data can be bound to certain backend enterprise systems. Active business client utilizes the bindings and service interfaces to access services. In one embodiment business context data includes a mash up of service interfaces with the mash up of business objects. Active business client can also include logic implemented as service modules or service APIs to access data content and services.

Toolbar may include for example icon that provides a graphic and or text to identify BCT . Icon could be specific to a type of business task a company or generic to all BCTS. As used in this example and the following examples a task refers to any type of task whether or not related to a workflow. Thus the example may be applicable to an implementation with workflow as well as implementations that do not involve workflows. In one embodiment toolbar includes access tabs NEW TO DO PENDING and DONE . Selection of one of the tabs may open a pane to display content related to that tab. Different options or functions can be displayed for each tab. For example toolbar is provided for new tab toolbar is provided for to do tab toolbar is provided for pending tab and toolbar is provided for done tab . An example of the BCT for each tab is provided in reference to the individual figures.

In one embodiment each field for each task also includes a status indicator not shown such as a graphic that shows different colors for portion completed and portion still remaining to be completed. The graphic could be for example a vertical bar or a pie chart to the side of the time date and designation status portions of the fields. The graphic could alternatively be a horizontal bar at the bottom of a field.

BCT includes toolbar which could be a minimized view of BCT as the tool is initiated. Toolbar may include for example icon that provides a graphic and or text to identify BCT . In one embodiment toolbar includes functionality via new tab to do tab pending tab and done tab . Such functions are described above with reference to . Toolbar provides functions related to whatever tab among the tabs of toolbar is selected. For example for new tab toolbar provides options to accept clarify and reject . Thus new actions or activities can be accepted rejected or clarification can be requested.

BCT includes field or task which represents one or more business objects that provide information regarding a task. The task can indicate a requester that generated the task Alicia Diaz a time of creation 8 34 PM a task description PO for marketing meeting and a task type administrative . BCT also includes details of the task such as a business context New product introduction with select customers and partners. The performer the user of the client device that displays BCT can understand the context behind the task. Such details are provided when a user selects a task or a task is viewed revealing additional details behind the task.

In one embodiment BCT includes toolbar which represents a toolbar that provides details of a selected task. The functions available on toolbar may vary with each implementation but examples of functionality may include arrows up and down to move among the different tasks e.g. up arrow shows details for a newer task on a browsed list and a down arrow shows details for an older task on a browsed list . Toolbar may also include icons or buttons such as R A and P to signify the options to view more detail about Resources Activities and related Persons respectively. Selection of the button may open a view of the selected details in a transient auxiliary pane. Alternatively a popup could be generated to provide task details. As used herein a pane of an application is auxiliary when it is ancillary to the main view of the application. Rather than being a popup an auxiliary pane can be considered an integral part of the application and would be moved if the application were dragged around the UI screen. Auxiliary panes as described herein are common for example in media players on desktop computers which have a particular look and feel which can be expanded with an additional pane or display space to show playlists libraries or on demand services. A pane can be considered transient when it can be selectively viewed either by menu or toolbar selection or through activity in the main space of the application.

The active business client identifies the business scenario and one or more tasks from the business context data . As described herein business context data received at an active client can include one or more meta objects. For example a different meta object can be received for each of a variety of different business scenarios. Also each business scenario may have many associated resources and or tasks. Thus reference herein to receipt of business context data related to a business scenario should not be understood to imply that other data for other scenarios could not be received at the same client device by the same active client. Exactly the opposite may be true depending on the implementation.

The active business client determines which data elements of the business context data to display . That is some data elements are displayed at different times and some elements need to be requested to be displayed. Thus the active business client can provide progressive access to data. The active business client also determines how to display the selected data elements . For example some data elements may be hidden until the selection of a certain field. Also formatting the look and feel of the data components can be provided by the active business client. Such formatting can be provided by rules for example.

The active business client generates UI components for the selected data elements based on the determinations of what data elements to display and how . In one embodiment a widget or other application is open and ready to receive the generated components. Alternatively the active business client can invoke the launching of a desktop widget or other application or applet to display the UI components . A view layer of the active business client then renders the UI components in the widget .

In one embodiment the active business client generates UI components for a task details toolbar . The task details toolbar may be displayed for example when a user selects the details or chooses to view a task. An example of such a toolbar is provided above. In one embodiment the active business client generates logic or instantiates logic for one or more auxiliary panes that may be associated with the task details toolbar or some other portion of the widget . The data elements may then be associated with the generated pane s for display of the data when a pane is activated e.g. via selection .

Besides what is described herein various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow.

