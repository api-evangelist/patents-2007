---

title: Presenting differences in a file system
abstract: An embodiment of the invention provides an apparatus and method for presenting differences in a file system. In an embodiment, an application programming interface receives a request from a host, where the request is for a listing of changes in the file system within a time interval. A comparison unit determines each metadata container that has changed in the file system within the time interval. The application programming interface buffers at least one identifier that corresponds to a metadata container that has changed in the file system within the time interval. The application programming interface packages and transmits the at least one identifier to the host. The at least one identifier is readable on the host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904466&OS=07904466&RS=07904466
owner: NetApp, Inc.
number: 07904466
owner_city: Sunnyvale
owner_country: US
publication_date: 20071221
---
In storage technology a storage appliance is one type of computer that provides services relating to the organization and storage of information or data on storage devices such as for example disk drives disks . In other words a storage appliance is adapted to store and retrieve data on behalf of one or more client processing systems clients or hosts in response to external requests received from the hosts. A storage appliance can provide clients with file level access to data stored in the storage devices. A storage appliance can also provide clients with block level access to stored data or with both file level access and block level access. For convenience a storage appliance will be described herein for the most part in terms of the former though the description herein will have application to the latter types of storage appliances as well as will be apparent to those of ordinary skill in the art in light of the description that follows. Examples of such storage appliances include but are not limited to a file server or another type of computing device that provides storage services using a file system to respond to file oriented data access requests filer . A storage appliance includes a storage operating system that implements the file system to logically organize the information as a hierarchical structure of directories and files on the disks. Each file on a disk may be implemented as a set of data structures e.g. disk blocks which are configured to store information. A directory may be implemented as a formatted file in which information by other files and directories is stored.

An implemented disk storage for a storage appliance typically has one or more storage volumes which are a collection of physical storage disks and which define an overall logical arrangement of storage space. In other words a storage volume is a logical container that includes a collection of disks. Therefore the collection of disks is grouped assimilated into the storage volume. Each storage volume is generally associated with a file system.

A software application e.g. third party software application can seek access to a file system in order to determine the changes that have occurred for files or directories in the file system. However current methods for obtaining the changes in a file system would require the software application to traverse i.e. perform the known tree walk process through each directory and through each branch from a directory and to examine each file in each directory to determine which files have been modified added or accessed. The software application itself which is external to a file server that stores a file system is required to perform multiple reads to the file system by use of the tree walk process across the directories in the file system stores the results of the multiple reads to the file system and determines the changes in the file system based on the results of these multiple reads to the file system. Furthermore the tree walk process by the software application is inefficient because this is a relatively time consuming process where data that are read from the directories are randomly placed across a disk in a non sequential and random placement. This non sequential and random placement of data results in a longer time to access the data.

Therefore the current technology is limited in its capabilities and suffers from at least the above constraints and deficiencies.

An embodiment of the invention provides an apparatus and method for presenting differences in a file system. In an embodiment an application programming interface receives a request e.g. via a network from a host where the request is for a listing of changes in the file system within a time interval. A comparison unit determines each metadata container e.g. inode that has changed in the file system within the time interval. In the discussion herein an inode is shown as one example of a metadata container. The application programming interface buffers at least one identifier that corresponds to a metadata container that has changed in the file system within the time interval. The application programming interface packages and transmits the at least one identifier to the host. The at least one identifier is readable on the host. The metadata container that has changed in the file system within the time interval is associated with a file or a directory that has changed in the file system within the time interval. A file or directory that has changed in the file system within the time interval can be for example a file or directory that has been modified added deleted or accessed within the time interval.

These and other features of an embodiment of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the description herein numerous specific details are provided such as examples of components and or methods to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that an embodiment of the invention can be practiced without one or more of the specific details or with other apparatus systems methods components materials parts and or the like. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of embodiments of the invention.

An embodiment of the invention provides an apparatus and method for presenting differences in a file system. In an embodiment an application programming interface receives a request e.g. via a network from a host where the request is for a listing of changes in the file system within a time interval. A comparison unit determines each metadata container that has changed in the file system within the time interval. The application programming interface buffers at least one identifier that corresponds to a metadata container that has changed in the file system within the time interval. The application programming interface packages and transmits the at least one identifier to the host. The at least one identifier is readable on the host. The metadata container that has changed in the file system within the time interval is associated with a file or a directory that has changed in the file system within the time interval. A file or directory that has changed in the file system within the time interval can be for example a file or directory that has been modified added deleted or accessed within the time interval.

Each of the devices in the system typically includes an appropriate conventional network interface arrangement not shown for communicating over the network using a desired communication protocol such as for example Transport Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP Hypertext Transfer Protocol HTTP Simple Network Management Protocol SNMP or other suitable protocols.

A storage appliance is a computer that provides service relating to the organization or storage of information on storage devices such as for example but not limited to disks. Examples of currently available storage appliance products and associated software components are commercially available from for example NETWORK APPLIANCE INC. Sunnyvale Calif. or other vendors. Additional details of an example storage appliance are also disclosed in for example commonly assigned U.S. patent application Ser. No. 10 215 917. In addition it will be understood to those skilled in the art that the embodiments of the invention described herein may also apply to any type of special purpose computer e.g. server or general purpose computer including a stand alone computer embodied as a storage appliance or file server. Moreover the teachings of the embodiments of the invention can also be adapted to a variety of file server architectures including but not limited to a network attached storage environment or a storage area network and disk assembly directly attached to a client host computer. The term storage appliance or file server or filer should therefore be taken broadly to include such arrangements.

The storage appliance includes a processor a memory a network adapter and a storage adapter interconnected by a system bus . The storage appliance also includes a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on a storage device e.g. disk . Additionally a persistent storage device such as for example a non volatile RAM NVRAM is also typically connected to the system bus . Although NVRAMs are shown in any suitable persistent storage device that retains content in the event of a power failure or other system failure can be used in place of the NVRAMs. An example of a suitable persistent storage device is a battery backed RAM although other suitable storage devices may also be used.

As discussed below in additional details with reference to an application programming interface API in an embodiment of the invention can operate with the OS or other application so that the API can perform various operations that are discussed below. The API and comparison unit module can be for example embodied as software codes that are stored in the memory or stored in other storage devices that are accessible to the processes of the OS . The API can operate with the OS or other application so that the API can access or communicate with the network adapter . The functionalities of the API and the comparison unit are discussed below in additional details.

In an illustrative embodiment the memory may have storage locations that are addressable by the processor for storing software program code or data structures for use in the functions of the storage appliance . The processor and adapters and may in turn include processing elements and or logic circuitry configured to execute the software code and manipulate the data structures.

The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes a storage appliance by inter alia invoking storage operations in support of the file services that are implemented by the storage appliance. It will be apparent by those skilled in the art that other processing and memory implementations including various computer readable media may be used for storing and executing program instructions pertaining to the inventive techniques described herein.

The network adapter includes the mechanical electrical and signaling circuitry for connecting the storage appliance to a host over the computer network or connecting the storage appliance to other storage appliance s . A host can be a general purpose computer configured to execute applications including file system protocols such as for example the Network File System NFS or the Common Internet File System CIFS protocol or other suitable protocols. Moreover the host can interact with the storage appliance in accordance with the known client server model of information delivery.

The storage adapter cooperates with the storage operating system in order to access information requested by the host . Each storage volume is constructed from an array of physical storage devices D that are typically organized as for example RAID groups. The RAID groups include independent physical disks including those storing a striped data and those storing separate parity data. The number of physical storage devices e.g. disks in a storage volume and in a RAID group may vary.

The storage adapter includes input output interface circuitry that couples to the storage devices over an I O interconnect arrangement such as for example a conventional high speed high performance fibre channel serial link topology. The information is retrieved by the storage adapter and may be processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapter where the information is formatted into a packet and returned to the host .

To facilitate access to the storage devices D the storage operating system typically implements a file system that logically organizes the information as a hierarchical structure of directories in files on the storage devices D. Each file on a storage device D may be implemented as a set of data blocks i.e. disk blocks configured to store information such as text or other format. The directory may be implemented as a formatted file in which other files and directories are stored. The storage operating system associated with each volume is for example the Data ONTAP storage operating system which is commercially available from NETWORK APPLIANCE INC. Additional details of an example storage operating system are disclosed in for example commonly assigned U.S. patent application Ser. No. 10 836 090. The Data ONTAP storage operating system implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that the principles of embodiments of this invention can be implemented using a variety of alternate storage operating system architectures.

The storage operating system also includes a storage access layer and an associated storage driver layer to allow a storage appliance to communicate with a storage subsystem. The storage access layer implements a higher level disk storage protocol such as RAID while the storage driver layer implements a lower level storage device access protocol such as Fibre Channel Protocol FCP or SCSI which are protocols that are known to those skilled in the art. Also shown in is path which represents the data flow through the storage operating system associated with a read or write operation. Additional details of an example storage operating system are described in for example commonly assigned U.S. patent application Ser. No. 10 836 090 and 11 117 852.

As used herein the term storage operating system generally refers to the computer executable code operable to perform a storage function in a storage appliance e.g. that manages data access and may in the case of a file server implement file system semantics. In this sense the Data ONTAP software is an example of such a storage operating system implemented as a microkernel and including the WAFL layer to implement the WAFL file system semantics and manage data access. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the inventive technique described herein may apply to any type of special purpose e.g. file server filer or multi protocol storage appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage appliance . An example of a multi protocol storage appliance that may be advantageously used with the present invention is described in commonly assigned U.S. patent application Ser. No. 10 215 917. Moreover the teachings of this invention can be adapted to a variety of storage appliance architectures or storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage appliance should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.

When a session is established between the client and the storage appliance the software application can send a request to the storage appliance . In an embodiment of the invention the application programming interface API in the storage appliance receives the request . The request is a request to determine the changes that have occurred for files or and directories in the file system of storage appliance within a time interval as discussed further in the examples below. For purposes of the discussion herein a modification or change in a file system can include modifying adding deleting or accessing a file or directory in a file system of the storage appliance . The request includes a field that indicates identifies the data subset e.g. volume that will be checked for modified files or and directories in the file system. The request also includes a field that indicates the data subset e.g. base persistent point in time image or snapshot to be used as the base snapshot or base persistent point in time image PPTI which is defined below. A snapshot is a specified subset of data that is maintained by the storage appliance . SNAPSHOT is a trademark of Network Appliance Inc. Typically this specified subset of data is for example a volume of data. A volume may include data stored on one or more physical storage devices such as e.g. the storage devices D in . Although snapshots are discussed herein as examples of the above mentioned data subset it is within the scope of embodiments of the invention that the data subset can be any suitable type of persistent point in time image PPTI which is a point in time representation of data e.g. file system that is stored on a storage device e.g. disk . Associated with each file in a volume is a set of metadata for that file such as a pointer to the file the file size the number of blocks included in the file permissions etc. This set of metadata is stored in a unit of storage called a metadata container see . One example of a metadata container is an inode which is shown as example inode in . Each file in a volume has a separate metadata container e.g. inode which contains the file s metadata. The main purpose of an inode is to store metadata about a particular data file including a pointer to the tree structure of the data file the size e.g. in kilobytes of the data file the number of data blocks in the data file the link count number of references to that data file in the volume permissions that are associated with the data file creation time date of the data file and access time date to the data file. An inode may also include other metadata that are not mentioned herein. Whenever an actual data block in a file is modified added deleted or renamed at least some of the metadata in that file s inode will necessarily change. Therefore by comparing the contents of an inode in one PPTI e.g. snapshot with the contents of the corresponding inode in another PPTI e.g. snapshot it is possible to determine whether the associated file changed from one PPTI to the other PPTI. If the contents of the two corresponding inodes are different then the file has changed. If the inode contents are identical then the file has not changed. The base snapshot or base first PPTI is a prior PPTI e.g. snapshot of a volume at a given start time first time value T and the difference snapshot or difference second PPTI is a subsequent PPTI e.g. snapshot of the same volume at a later time second time value T. As an example time T may be the latest or current time that has occurred when the request is received by the API . Therefore base snapshot can be a data subset e.g. a volume in a file system at a given start time T and the difference snapshot can be the same data subset e.g. the same volume at a given end time T. Therefore the user can indicate typically via software application a time T in the field and this time T will correspond to an appropriate base snapshot. The user can optionally indicate typically via software application a time T in field of the request and this time T will correspond to an appropriate difference snapshot . Alternatively the difference snapshot will correspond to the snapshot of the given volume at the current time when the request is received by the API and in this case the field in the request is not used or does not include a value.

In an embodiment the request may include a maxdiff value threshold amount which indicates the maximum number of listed changed metadata containers e.g. inodes for files or and directories in the data subset e.g. volume that will be contained in a single response from the API . For example if the maxdiff value is set at 50 where maxdiff is typically set by a user via software application then each response from the API will indicate up to 50 identifiers of changed metadata containers that correspond to files and or directories that have changed in a given data subset e.g. volume between time T and time T. For each request from a software application the API will forward each request to the comparison unit . Based on the contents in the fields and in the requests the comparison unit determines the metadata containers e.g. inodes of files and or directories that have changed between the time interval from T to T. The comparison unit compares the metadata containers e.g. inodes in the base snapshot with the same metadata containers e.g. inodes in the difference snapshot in order to determine which metadata containers have changed from the time T to time T. Additional details of the comparison between the snapshots data subsets and is discussed in an example below with reference to . An example of a suitable comparison unit is disclosed in commonly assigned U.S. patent application Ser. No. 11 093 074.

A response is sent from the API to the software application until all identifiers of metadata containers of changed files or changed directories are reported in response to the previous request . When all identifiers of metadata containers of changed files or changed directories have been reported via the response s the software application can typically send a request to end the session between the host and the storage appliance .

The identifiers that identify all metadata containers of files or directories that have been modified between the time interval beginning at T and ending at T are listed in a listing which is transmitted in the one or more responses . Therefore an identifier will identify a metadata container number of a metadata container of a file or directory that has been modified between T and T inclusive. The listing of metadata containers of changed files or changed directories is useful in for example creating a catalog of information of a file system of the storage appliance . This listing will list the metadata containers that have changed in the file system. The listing may also include other information such as for example a listing of file name changes or directory name changes where these name changes are determined by the metadata container comparison by the comparison unit metadata container numbers which identifies a file or directory that corresponds to the metadata container access time date creation time date modification time date and or changes in file size. Therefore the identifier can also include these other information.

As one example of a benefit that is provided by the generation of the listings the listings advantageously permit a faster update of a standard file system index which can be in a memory of a host or can be in a storage space e.g. disk that is accessible to the host . As known to those skilled in the art generally a file system index may be any data structure that organizes a collection of metadata according to some aspect or attribute and permits the host to query the content of a file system based on the aspect or attribute that is indexed in the index . Various software applications for creating and updating a file system index are commercially available from various vendors e.g. Microsoft Corporation . As an example an index may list a name of all files in a file system or can sort the file system content based on associated user content creation or modification time or other attributes. Since the list indicates only the files or directories that have been changed in a file system a user can use a standard software application for creating updating a file system index in order to update the attributes contents in the index based on the listing . Therefore a faster update of the index is possible because only the attributes that are identified in the list are updated by a user in corresponding attributes entries in the index . As mentioned above a user can use any commercially available suitable software application for updating the file system index .

The API can implement other functionalities such as for example the functionalities in the Zephyr API which is a proprietary API that is provided by Network Appliance Inc. The API typically includes software components and operates with standard hardware components in order to perform the various functions that are discussed herein. The software components in the API are represented by the software module which can be programmed by use of suitable known software programming languages e.g. C C or other languages and by use of known programming techniques.

The transmissions of requests and responses between the software application and API can use for example XML extensible markup language . As known to those skilled in the art XML is commonly used on the Internet to create simple methods for the exchange of data among diverse clients or hosts. However different transport mechanisms that are known to those skilled in the art can alternatively be used for the transmissions of the requests and responses . The functions calls in a transport mechanism may require modification depending on for example if transmissions are being sent via a socket fibre channel SCSI or via TCP IP.

The comparison unit will assign and transmit an identifier for each metadata container e.g. inode corresponding to a file or directory that has been changed e.g. added deleted modified or accessed in the interval from time T to time T. The API will receive the identifiers and will initially buffer the identifier in the buffer as discussed further below. As mentioned above the comparison unit can be implemented as for example a software code that resides in the memory . An identifier can be any identifier that identifies a metadata container e.g. inode . Each identifier will identify a unique metadata container. As an example an identifier can be bit values that are unique for each metadata container. In this example an identifier with the value 00001111 would be an identifier for a particular metadata container while another identifier with the value 00000011 would be an identifier for another metadata container. In an embodiment of the invention the API will receive the identifiers from the comparison unit and will buffer the identifiers in a buffer . When the number of buffered identifiers in the buffer has reached the maxdiff value maximum difference value the API will package and transmit the identifiers in the response which is sent to the host . When the API stops receiving any identifier from the comparison unit then all changed metadata containers in the interval T T have been identified by the comparison unit and the API will then package and transmit any remaining buffered identifiers in the buffer via the response that is transmitted to the host . The API will format the identifiers in the response into a listing that is readable by the software application . This listing will list the identifiers of metadata containers that have changed for the specified volume in the interval from time T and time T. Also each changed metadata container that are listed in the listing will list a corresponding metadata container number that identifies the directory or file for that changed metadata container. As an example the contents in the listing in the response are formatted by the API into the above mentioned XML language which is a standard data file that can be parsed by most software packages. If the XML language format is used for the listing the contents in the listing is typically in a text format that any standard text editor software in a host can open to allow viewing by a user of the host . The text editor can be for example a separate software module in the host or is a software module or is a feature that is integrated with the software application . Additionally XML formats a document into a hierarchically structured format which is suited for contents that are formed by lists or records.

As shown in the example of the structure of a PPTI i.e. data subset includes a metadata container file which has information about all metadata containers e.g. inodes for a given volume. As an example the base snapshot has a corresponding metadata container file which stores information about all metadata containers e.g. inodes for a given data subset such as e.g. a volume with the state of the data subset e.g. volume taken at time T. The metadata container file has a hierarchical structure with a root node . The root node has fields that each contains pointers to another node in the metadata container file . This other node can be an indirect block not shown in which points to another node or a direct block and a direct block as shown in the example of . The direct blocks and includes metadata containers of files for the given data subset e.g. volume . For example the metadata container includes a pointer to a corresponding data file which has the data of a file that corresponds to the metadata container . The metadata container also includes metadata that relates to the data file

The data file is also in a hierarchical structure and includes a root node with fields that contain pointers to direct data blocks . The direct data blocks contain a portion of the actual data of the file that corresponds to the metadata container

The difference snapshot has a corresponding metadata container file which stores information about all metadata containers for the same given data subset e.g. volume with the state of the data subset e.g. volume taken at time T. Therefore root node is the root node at time T. The comparison unit compares each metadata container in the metadata container file with the same metadata container in the metadata container file in order to determine if a file or directory corresponding to the metadata container has changed i.e. modified added deleted or accessed between the time T and time T. For example the comparison unit compares the content in a particular field in the metadata container at time T with the content in the same particular field in the same metadata container shown as metadata container at time T. If the contents in the field have changed between time T and time T then the metadata container is a changed metadata container. The fields in a metadata container would indicate for example a data file pointer file size number of blocks for the file link count permissions creation time date and access time date. The comparison unit compares the fields with the data file pointer file size number of blocks for the file link count permissions creation time date and access time date in the metadata container with corresponding fields in the metadata container in order to determine if a metadata container has been modified between time T and time T. These fields were previously discussed above with reference to .

Since a metadata container file is sequentially accessed by the comparison unit the speed of determining the changed metadata containers is increased. Note that a third party software application which is external to a storage appliance is not able to access and not able to read the metadata container files in the file system. Furthermore the API and the comparison unit advantageously eliminates the use of the above discussed previous techniques where an external software application is required to perform multiple reads in a file system to determine the changes in the file system.

For a directory metadata container e.g. directory inode the comparison unit can read the directory metadata container blocks in parallel for faster speed. The contents of a directory metadata container blocks are the names and references for the metadata containers in that directory. The comparison unit can simultaneously read two 2 or more directory metadata container blocks and compare them to corresponding directory metadata container blocks at time T in order to determine changes in the directories in the file system. This metadata container comparison process is further described in for example the above cited U.S. application Ser. No. 11 093 074.

Another embodiment of the invention can have the optional feature of providing access security by the API so that only authorized requests are processed by the API . In this case of using authorized requests as an example the session request would include a password field that would be authenticated by the API before a session is established between the host and storage appliance . Another embodiment of the invention can have the optional feature where the API can send a progress indicator to the application software to indicate the progress of the above discussed metadata container comparison process.

In block the comparison unit compares metadata containers e.g. inodes in the file system at a start time T with the same corresponding metadata container at a subsequent time T in order to determine if a file or directory corresponding to a metadata container in the file system has changed i.e. modified added deleted or accessed between time T and time T.

In block API will buffer an identifier for each metadata container that corresponds to a file or directory that has changed.

In block when the number of buffered identifiers buffered in buffer has reached a maxdiff value maximum different value the API will package and transmit the identifiers in a response to the external software application request . When the API stops receiving any identifier from the comparison unit the API will package and transmit any remaining buffered identifiers in the buffer via the response that is transmitted to the external software application .

It is also within the scope of an embodiment of the present invention to implement a program or code that can be stored in a machine readable medium to permit a computer to perform any of the methods described above.

The above description of illustrated embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize.

These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather the scope of the invention is to be determined entirely by the following claims which are to be construed in accordance with established doctrines of claim interpretation.

