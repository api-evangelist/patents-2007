---

title: System, method and computer program product for transferring unregistered callers to a registration process
abstract: A system, method and computer program product are provided for handling unregistered callers in a voice recognition framework. Initially, it is determined whether a user is registered. If it is determined that the user is not registered, a registration process is executed. Once registered, utterances may be received from the user and recognized for the purpose of providing a service to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07899675&OS=07899675&RS=07899675
owner: Bevocal LLC
number: 07899675
owner_city: Sunnyvale
owner_country: US
publication_date: 20070905
---
The present application is a continuation of application Ser. No. 11 270 712 filed on Nov. 8 2005 now U.S. Pat. No. 7 283 963 which is a continuation of application Ser. No. 09 802 394 filed on Mar. 9 2001 now U.S. Pat. No. 7 016 843 both of which are incorporated herein by reference.

The present invention relates to speech recognition systems and more particularly to providing services using speech recognition.

Techniques for accomplishing automatic speech recognition ASR are well known. Among known ASR techniques are those that use grammars. A grammar is a representation of the language or phrases expected to be used or spoken in a given context. In one sense then ASR grammars typically constrain the speech recognizer to a vocabulary that is a subset of the universe of potentially spoken words and grammars may include subgrammars. An ASR grammar rule can then be used to represent the set of phrases or combinations of words from one or more grammars or subgrammars that may be expected in a given context. Grammar may also refer generally to a statistical language model where a model represents phrases such as those used in language understanding systems.

ASR systems have greatly improved in recent years as better algorithms and acoustic models are developed and as more computer power can be brought to bear on the task. An ASR system running on an inexpensive home or office computer with a good microphone can take free form dictation as long as it has been pre trained for the speaker s voice. Over the phone and with no speaker training a speech recognition system needs to be given a set of speech grammars that tell it what words and phrases it should expect. With these constraints a surprisingly large set possible utterances can be recognized e.g. a particular mutual fund name out of thousands . Recognition over mobile phones in noisy environments does require more tightly pruned and carefully crafted speech grammars however. Today there are many commercial uses of ASR in dozens of languages and in areas as disparate as voice portals finance banking telecommunications and brokerages.

Advances are also being made in speech synthesis or text to speech TTS . Many of today s TTS systems still sound like robots and can be hard to listen to or even at times incomprehensible. However waveform concatenation speech synthesis is now being deployed. In this technique speech is not completely generated from scratch but is assembled from libraries of pre recorded waveforms. The results are promising.

In a standard speech recognition synthesis system a database of utterances is maintained for administering a predetermined service. In one example of operation a user may utilize a telecommunication network to communicate utterances to the system. In response to such communication the utterances are recognized utilizing speech recognition and processing takes place utilizing the recognized utterances. Thereafter synthesized speech is outputted in accordance with the processing. In one particular application a user may verbally communicate a street address to the speech recognition system and driving directions may be returned utilizing synthesized speech.

Problems may exist when administrating a speech recognition synthesis system such as the one set forth hereinabove. For example a user may call and request a service that requires more information associated with the user before the service can be delivered. For example a service may require payment. Therefore in certain situations there may be a need for information i.e. billing address credit card number etc. before the service can be rendered.

A system method and computer program product are provided for handling unregistered callers in a voice recognition framework. Initially it is determined whether a user is registered. If it is determined that the user is not registered a registration process is executed. Once registered utterances may be received from the user and recognized for the purpose of providing a service to the user.

In one embodiment of the present invention the registration process may include the collection of information. As an option the information may include at least one phone number of the user a gender of the user billing information an address of the user a city in which the user resides and or preferences of the user. In one aspect of the present invention the preferences may include personalization information data relating to a stock portfolio of the user and sports of interest to the user.

In another embodiment of the present invention the information may be entered by the user utilizing a computer coupled to a network i.e. the Internet. In another embodiment the information may be entered verbally utilizing a telephone. In still another embodiment the information may be entered verbally by way of an attendant.

It should be noted that the information may be used when providing the service by modifying enhancing etc. the same. As an option promotion information may be provided to the user during the registration process.

The present platform of provides an end to end solution that manages a presentation layer application logic information access services and telecom infrastructure . With the instant platform customers can build complex voice applications through a suite of customized applications and a rich development tool set on an application server . The present platform is capable of deploying applications in a reliable scalable manner and maintaining the entire system through monitoring tools.

The present platform is multi modal in that it facilitates information delivery via multiple mechanisms i.e. Voice Wireless Application Protocol WAP Hypertext Mark up Language HTML Facsimile Electronic Mail Pager and Short Message Service SMS . It further includes a VoiceXML interpreter that is fully compliant with the VoiceXML 1.0 specification written entirely in Java and supports Nuance SpeechObjects .

Yet another feature of the present platform is its modular architecture enabling plug and play capabilities. Still yet the instant platform is extensible in that developers can create their own custom services to extend the platform . For further versatility. Java based components are supported that enable rapid development reliability and portability. Another web server supports a web based development environment that provides a comprehensive set of tools and resources which developers may need to create their own innovative speech applications.

Support for SIP and SS7 Signaling System 7 is also provided. Backend Services are also included that provide value added functionality such as content management and user profile management . Still yet there is support for external billing engines and integration of leading edge technologies from Nuance Oracle Cisco Natural Microsystems and Sun Microsystems .

More information will now be set forth regarding the application layer presentation layer and services layer .

The application layer provides a set of reusable application components as well as the software engine for their execution. Through this layer applications benefit from a reliable scalable and high performing operating environment. The application server automatically handles lower level details such as system management communications monitoring scheduling logging and load balancing. Some optional features associated with each of the various components of the application layer will now be set forth.

The services layer simplifies the development of voice applications by providing access to modular value added services. These backend modules deliver a complete set of functionality and handle low level processing such as error checking. Examples of services include the content user profile billing and portal management services. By this design developers can create high performing enterprise applications without complex programming. Some optional features associated with each of the various components of the services layer will now be set forth.

The presentation layer provides the mechanism for communicating with the end user. While the application layer manages the application logic the presentation layer translates the core logic into a medium that a user s device can understand. Thus the presentation layer enables multi modal support. For instance end users can interact with the platform through a telephone WAP session HTML session pager SMS facsimile and electronic mail. Furthermore as new touchpoints emerge additional modules can seamlessly be integrated into the presentation layer to support them.

The telephony server provides the interface between the telephony world both Voice over Internet Protocol VoIP and Public Switched Telephone Network PSTN and the applications running on the platform. It also provides the interface to speech recognition and synthesis engines . Through the telephony server one can interface to other 3party application servers such as unified messaging and conferencing server. The telephony server connects to the telephony switches and handles the phone call.

The speech recognition server performs speech recognition on real time voice streams from the telephony server . The speech recognition server may support the following features 

When pre recorded prompts are unavailable the text to speech server is responsible for transforming text input into audio output that can be streamed to callers on the telephony server . The use of the TTS server offloads the telephony server and allows pools of TTS resources to be shared across several telephony servers. Features include 

The streaming audio server enables static and dynamic audio files to be played to the caller. For instance a one minute audio news feed would be handled by the streaming audio server 

The platform supports telephony signaling via the Session Initiation Protocol SIP . The SIP signaling is independent of the audio stream which is typically provided as a G.711 RTP stream. The use of a SIP enabled network can be used to provide many powerful features including 

Web based development environment that provides all the tools and resources developers need to create their own speech applications.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device . The workstation typically has resident thereon an operating system such as the Microsoft Windows NT or Windows 95 Operating System OS the IBM OS 2 operating system the MAC OS or UNIX operating system. Those skilled in the art will appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned.

Initially in operation a call is received from a user who wishes to obtain the service s offered by the voice recognition system. More information regarding various examples of such services will be set forth hereinafter in greater detail.

Information relating to the user is then looked up in a database as indicated in operation . As an option call description records CDRs may be used to access the information. For example a CDR may be used to identify the caller by name phone number etc. To this end such identification may in turn be used to look up further information the database. In the alternative the information may refer to only the data stored in the CDR. CDRs traditionally provide a record of called numbers and a date time length and so on of each telephone call.

From the information gathered in operation it is determined whether a user is registered in decision . To accomplish this the information gathered in operation may be compared against a database of registered users or by way of any other desired technique. If it is determined that the user is not registered a registration process is executed in operation . Additional descriptions regarding such registration process will be set forth in greater detail during reference to .

Once registered utterances may be received from the user and recognized for the purpose of providing a service to the user. Note operation . In use the information retrieved in operation and the registration process of operation may be used when providing the service by modifying enhancing etc. the same. This may allow the personalization of the services and or facilitating additional capabilities.

Examples of the various services that may be provided in operation will now be set forth. It should be noted that any services may be afforded per the desires of the user 

The speech recognition system of the present invention may provide a plurality of voice portal applications that can be personalized based on a caller s location delivered to any device and customized via an open development platform. Examples of various specific voice portal applications are set forth in Table 1.

As shown in operation an account number is received. Such account number may identify the telecommunication carrier from which the user was transferred to the registration process. The account number may identify a 1 800 number or any other phone from which the user was transferred.

As an option a different type of unique user account number may be established for the user in order to facilitate future access to the speech recognition system. Such account number may be used during future transactions for allowing the user to access the speech recognition system of the present invention. Moreover the account number may be used for storing and tracking various information relating to the user for a more personalized experience.

Further in operation at least one phone number of the user is retrieved and stored for reference purposes. In an ideal embodiment multiple numbers are retrieved and stored i.e. cellular phone number facsimile number electronic mail address etc.

Still yet a personal identification number PIN may be established and verified in operation . Such step is important for security purposes when the user accesses the present invention in future instances.

Thereafter various information may be collected in operation of . As mentioned earlier the information retrieved during the registration process may be used when providing the service by modifying enhancing etc. the same.

In one embodiment of the present invention the registration process collects information including a gender of the user an address of the user birthday a city in which the user resides and or any other type general purpose data. Still yet billing information may be received including a billing address and a method of payment i.e. credit card number etc. As an option preferences of the user may be collected. In one embodiment of the present invention the preferences may include personalization information data relating to a stock portfolio of the user and or sports of interest to the user.

It should be understood that the information may be entered by the user utilizing any one or more of various possible methods. For example a computer coupled to a network i.e. the Internet similar to that shown in may be used. In such embodiment a user interface on the computer may be used while the user is on the telephone. Such user interface may take the form of a web page or the like. Of course the registration process need not necessarily occur simultaneously with the process of .

In another embodiment the information may be entered entirely verbally utilizing an automated telephone attendant system. In still another embodiment the information may be entered verbally in real time by way of a live attendant.

As yet another option promotion information may be provided to the user during the registration process. For example various promotions associated with the services provided by the speech recognition system may be offered to the user. In particular coupons may be distributed etc. After the registration process is complete the present embodiment is capable of returning the user to a main menu in order to allow the user to obtain any desired service. Note operation .

The manner in which the user is returned from the registration process may vary from embodiment to embodiment. By way of example one embodiment may monitor key words provided verbally by the user. Upon the receipt and detection of such key words the user may be returned from the process. As an option the present embodiment may monitor for such key words throughout the entire registration process and return the user immediately upon receipt of the keyword.

One embodiment of the present invention may utilize VoiceXML VoiceXML is a Web based markup language for representing human computer dialogs similar to HTML. However while HTML assumes a graphical web browser with display keyboard and mouse. VoiceXML is assumes a voice browser with audio output computer synthesized and or recorded and audio input voice and or keypad tones . VoiceXML leverages the Internet for voice application development and delivery greatly simplifying these difficult tasks and creating new opportunities.

Voice application development is easier because VoiceXML is a high level domain specific markup language and because voice applications can now be constructed with plentiful inexpensive and powerful web application development tools.

VoiceXML is based on XML. XML is a general and highly flexible representation of any type of data and various transformation technologies make it easy to map one XML structure to another or to map XML into other data formats.

VoiceXML is an extensible markup language XML for the creation of automated speech recognition ASR and interactive voice response IVR applications. Based on the XML tag attribute format the VoiceXML syntax involves enclosing instructions items within a tag structure in the following manner . . . contained items . . . 

A VoiceXML application consists of one or more text files called documents. These document files are denoted by a .vxml file extension and contain the various VoiceXML instructions for the application. It is recommended that the first instruction in any document to be seen by the interpreter be the XML version tag 

The remainder of the document s instructions should be enclosed by the vxml tag with the version attribute set equal to the version of VoiceXML being used 1.0 in the present case as follows 

Each form has a name and is responsible for executing some portion of the dialog. For example you may have a form called mainMenu that prompts the caller to make a selection from a list of options and then recognizes the response.

A form is denoted by the use of the tag and can be specified by the inclusion of the id attribute to specify the form s name. This is useful if the form is to be referenced at sonic other point in the application or by another application. For example would indicate in a VoiceXML document the beginning of the welcome form.

Another preferred embodiment of the present invention is written using JAVA. C and the C language and utilizes object oriented programming methodology. Object oriented programming OOP has become increasingly used to develop complex applications. As OOP moves toward the mainstream of software design and development various software solutions require adaptation to make use of the benefits of OOP. A need exists for these principles of OOP to be applied to a messaging interface of an electronic messaging system such that a set of OOP classes and objects for the messaging interface can be provided.

OOP is a process of developing computer software using objects including the steps of analyzing the problem designing the system and constructing the program. An object is a software package that contains both data and a collection of related structures and procedures. Since it contains both data and a collection of structures and procedures it can be visualized as a self sufficient component that does not require other additional structures procedures or data to perform its specific task. OOP therefore views a computer program as a collection of largely autonomous components called objects each of which is responsible for a specific task. This concept of packaging data structures and procedures together in one component or module is called encapsulation.

In general OOP components are reusable software modules which present an interface that conforms to an object model and which are accessed at run time through a component integration architecture. A component integration architecture is a set of architecture mechanisms which allow software modules in different process spaces to utilize each others capabilities or functions. This is generally done by assuming a common component object model on which to build the architecture. It is worthwhile to differentiate between an object and a class of objects at this point. An object is a single instance of the class of objects which is often just called a class. A class of objects can be viewed as a blueprint from which many objects can be formed.

OOP allows the programmer to create an object that is a part of another object. For example the object representing a piston engine is said to have a composition relationship with the object representing a piston. In reality a piston engine comprises a piston valves and many other components the fact that a piston is an element of a piston engine can be logically and semantically represented in OOP by two objects.

OOP also allows creation of an object that depends from another object. If there are two objects one representing a piston engine and the other representing a piston engine wherein the piston is made of ceramic then the relationship between the two objects is not that of composition. A ceramic piston engine does not make up a piston engine. Rather it is merely one kind of piston engine that has one more limitation than the piston engine its piston is made of ceramic. In this case the object representing the ceramic piston engine is called a derived object and it inherits all of the aspects of the object representing the piston engine and adds further limitation or detail to it. The object representing the ceramic piston engine depends from the object representing the piston engine. The relationship between these objects is called inheritance.

When the object or class representing the ceramic piston engine inherits all the aspects of the objects representing the piston engine it inherits the thermal characteristics of a standard piston defined in the piston engine class. However the ceramic piston engine object overrides these ceramic specific thermal characteristics which are typically different from those associated with a metal piston. It skips over the original and uses new functions related to ceramic pistons. Different kinds of piston engines have different characteristics but may have the same underlying functions associated with it e.g. how many pistons in the engine ignition sequences lubrication etc. . To access each of these functions in any piston engine object a programmer would call the same functions with the same names but each type of piston engine may have different overriding implementations of functions behind the same name. This ability to hide different implementations of a function behind the same name is called polymorphism and it greatly simplifies communication among objects.

With the concepts of composition relationship encapsulation inheritance and polymorphism an object can represent just about anything in the real world. In fact one s logical perception of the reality is the only limit on determining the kinds of things that can become objects in object oriented software. Some typical categories are as follows 

With this enormous capability of an object to represent just about any logically separable matters OOP allows the software developer to design and implement a computer program that is a model of some aspects of reality whether that reality is a physical entity a process a system or a composition of matter. Since the object can represent anything the software developer can create an object which can be used as a component in a larger software project in the future.

If 90 of a new OOP software program consists of proven existing components made from preexisting reusable objects then only the remaining 10 of the new software project has to be written and tested from scratch. Since 90 already came from an inventory of extensively tested reusable objects the potential domain from which an error could originate is 10 of the program. As a result OOP enables software developers to build objects out of other previously built objects.

This process closely resembles complex machinery being built out of assemblies and sub assemblies. OOP technology therefore makes software engineering more like hardware engineering in that software is built front existing components which are available to the developer as objects. All this adds up to an improved quality of the software as well as an increased speed of its development.

Programming languages are beginning to fully support the OOP principles such as encapsulation inheritance polymorphism and composition relationship. With the advent of the C language many commercial software developers have embraced OOP. C is an OOP language that offers a fast machine executable code. Furthermore C is suitable for both commercial application and systems programming projects. For now C appears to be the most popular choice among many OOP programmers but there is a host of other OOP languages such as Smalltalk Common Lisp Object System CLOS and Eiffel. Additionally OOP capabilities are being added to more traditional popular computer programming languages such as Pascal.

Class libraries are very flexible. As programs grow more complex more programmers are forced to reinvent basic solutions to basic problems over and over again. A relatively new extension of the class library concept is to have a framework of class libraries. This framework is more complex and consists of significant collections of collaborating classes that capture both the small scale patterns and major mechanisms that implement the common requirements and design in a specific application domain. They were first developed to free application programmers from the chores involved in displaying menus windows dialog boxes and other standard user interface elements for personal computers.

Frameworks also represent a change in the way programmers think about the interaction between the code they write and code written by others. In the early days of procedural programming the programmer called libraries provided by the operating system to perform certain tasks but basically the program executed down the page from start to finish and the programmer was solely responsible for the flow of control. This was appropriate for printing out paychecks calculating a mathematical table or solving other problems with a program that executed in just one way.

The development of graphical user interfaces began to turn this procedural programming arrangement inside out. These interfaces allow the user rather than program logic to drive the program and decide when certain actions should be performed. Today most personal computer software accomplishes this by means of an event loop which monitors the mouse keyboard and other sources of external events and calls the appropriate parts of the programmer s code according to actions that the user performs. The programmer no longer determines the order in which events occur. Instead a program is divided into separate pieces that are called at unpredictable times and in an unpredictable order. By relinquishing control in this way to users the developer creates a program that is much easier to use. Nevertheless individual pieces of the program written by the developer still call libraries provided by the operating system to accomplish certain tasks and the programmer must still determine the flow of control within each piece after it s called by the event loop. Application code still sits on top of the system.

Even event loop programs require programmers to write a lot of code that should not need to be written separately for every application. The concept of an application framework carries the event loop concept further. Instead of dealing with all the nuts and bolts of constructing basic menus windows and dialog boxes and then making these things all work together programmers using application frameworks start with working application code and basic user interface elements in place. Subsequently they build from there by replacing some of the generic capabilities of the framework with the specific capabilities of the intended application.

Application frameworks reduce the total amount of code that a programmer has to write from scratch. However because the framework is really a generic application that displays windows supports copy and paste and so on the programmer can also relinquish control to a greater degree than event loop programs permit. The framework code takes care of almost all event handling and flow of control and the programmer s code is called only when the framework needs it e.g. to create or manipulate a proprietary data structure .

A programmer writing a framework program not only relinquishes control to the user as is also true for event loop programs but also relinquishes the detailed flow of control within the program to the framework. This approach allows the creation of more complex systems that work together in interesting ways as opposed to isolated programs having custom code being created over and over again for similar problems.

Thus as is explained above a framework basically is a collection of cooperating classes that make up a reusable design solution for a given problem domain. It typically includes objects that provide default behavior e.g. for menus and windows and programmers use it by inheriting some of that default behavior and overriding other behavior so that the framework calls application code at the appropriate times.

Thus through the development of frameworks for solutions to various problems and programming tasks significant reductions in the design and development effort for software can be achieved. A preferred embodiment of the invention utilizes HyperText Markup Language HTML to implement documents on the Internet together with a general purpose secure communication protocol for a transport medium between the client and the Newco. HTTP or other protocols could be readily substituted for HTML without undue experimentation. Information on these products is available in T. Berners Lee D. Connoly RFC 1866 Hypertext Markup Language 2.0 Nov. 1995 and R. Fielding H. Frystyk T. Berners Lee J. Gettys and J. C. Mogul Hypertext Transfer Protocol HTTP 1.1 HTTP Working Group Internet Draft May 2 1996 . HTML is a simple data format used to create hypertext documents that are portable from one platform to another. HTML documents are SGML documents with generic semantics that are appropriate for representing information from a wide range of domains. HTML has been in use by the World Wide Web global information initiative since 1990. HTML is an application of ISO Standard 8879 1986 Information Processing Text and Office Systems Standard Generalized Markup Language SGML .

To date Web development tools have been limited in their ability to create dynamic Web applications which span from client to server and interoperate with existing computing resources. Until recently HTML has been the dominant technology used in development of Web based solutions. However HTML has proven to be inadequate in the following areas 

With Java developers can create robust User Interface UI components. Custom widgets e.g. real time stock tickers animated icons etc. can be created and client side performance is improved. Unlike HTML Java supports the notion of client side validation offloading appropriate processing onto the client for improved performance. Dynamic real time Web pages can be created. Using the above mentioned custom UI components dynamic Web pages can also be created.

Sun s Java language has emerged as an industry recognized language for programming the Internet Sun defines Java as a simple object oriented distributed interpreted robust secure architecture neutral portable high performance multithreaded dynamic buzzword compliant general purpose programming language. Java supports programming for the Internet in the form of platform independent Java applets. Java apples are small specialized applications that comply with Sun s Java Application Programming Interface API allowing developers to add interactive content to Web documents e.g. simple animations page adornments basic games etc. . Applets execute within a Java compatible browser e.g. Netscape Navigator by copying code from the server to client. From a language standpoint Java s core feature set is based on C . Sun s Java literature states that Java is basically C with extensions from Objective C for more dynamic method resolution. 

Another technology that provides similar function to JAVA is provided by Microsoft and ActiveX Technologies to give developers and Web designers wherewithal to build dynamic content for the Internet and personal computers. ActiveX includes tools for developing animation 3 D virtual reality video and other multimedia content. The tools use Internet standards work on multiple platforms and are being supported by over 100 companies. The group s building blocks are called ActiveX Controls small fast components that enable developers to embed parts of software in hypertext markup language HTML pages. ActiveX Controls work with a variety of programming languages including Microsoft Visual C Borland Delphi Microsoft Visual Basic programming system and in the future Microsoft s development tool for Java code named Jakarta. ActiveX Technologies also includes ActiveX Server Framework allowing developers to create server applications. One of ordinary skill in the art readily recognizes that ActiveX could be substituted for JAVA without undue experimentation to practice the invention.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

