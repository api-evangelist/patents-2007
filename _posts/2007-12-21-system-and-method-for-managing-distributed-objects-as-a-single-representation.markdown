---

title: System and method for managing distributed objects as a single representation
abstract: An architecture and method for managing at least two distinct machines (or objects) in which resources are shared as a single entity (or object) in an agent-based system. The agent-based system comprising a controller, a local agent coupled to the controller, and at least one clustered machine. The at least one clustered machine includes at least two individual agents, the at least two individual agents sharing at least one shared resource/service. The system also includes a virtual non-persistent connection for coupling the at least two individual agents to the local agent. The at least one shared resource/service is accessed by the local agent through the virtual non-persistent connection using a virtual IP address to enable the at least two individual agents of the at least one clustered machine to be represented as a single object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271605&OS=08271605&RS=08271605
owner: Intel Corporation
number: 08271605
owner_city: Santa Clara
owner_country: US
publication_date: 20071221
---
This application is a divisional of U.S. application Ser. No. 10 393 622 filed on Mar. 21 2003 the disclosure of which is incorporated herein by reference in its entirety for all purposes.

The present invention is generally related to the field of network management. More particularly the present invention is related to an architecture and method for managing distributed objects as a single representation in an agent based system.

Traditional Internet data centers are characterized as being extensions of corporate data centers with the addition of hardware for Web and e Commerce servers. Management of traditional Internet data centers consisted of applying constraints and simplifying assumptions of the hardware and its operations. For example services within a data center might use a client server object and transport model to simplify the protocols and intelligence supported by the data center.

As businesses continue to make larger investments in the Internet economy constraints that were once key to the management of Internet data centers are no longer adequate. For example conventional management tools manage and monitor a limited number of components in the Internet data center thus leaving the responsibility of event correlation and resolution options for an operator or administrator to handle.

Today the growing complexities of deployment operation and maintenance of Internet services make management and scalability of Internet data centers very difficult. As Internet services continue to grow the tasks to be performed by the operator or administrator become more burdensome. To alleviate some of the burdensome tasks required of the operator management of many of the components of the Internet data center are being automated.

One such architecture for automating management processes is open control technology. Open control technology is a network service control technology targeted at enterprise level service management. Open control technology architecture describes a structure for managing components of a data center service throughout the service lifecycle. The architecture is deployed as an open control technology pod. The open control technology pod is composed of a controller and a customer pod. The architecture defines an object model that virtualizes the data center. The virtualization is done via abstractions and encapsulation.

A problem associated with the open control technology architecture arises when the customer pod contains a set of cluster resources services be it software or hardware where at least two distinct machines represented as objects share a common resource service. The distinct machines may also contain non clustered resources services that also need to be managed and monitored. When clustered resources services are managed and monitored the distinct machines or objects need to be represented as a single object. When non clustered resources services are managed and monitored the distinct machines or objects need to be represented as separate objects. Traditional open control technology architecture is not equipped to manage and monitor clustered resources where at least two distinct machines or objects need to be represented as a single object in order to share one or more common resources services.

Thus what is needed is an architecture and methodology for representing distinct machines as a single entity or object for enabling the distinct machines to share one or more common resources or services.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the relevant art s with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which embodiments of the present invention would be of significant utility.

Reference in the specification to one embodiment an embodiment or another embodiment of the present invention means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of the phrase in one embodiment appearing in various places throughout the specification are not necessarily all referring to the same embodiment.

Embodiments of the present invention are directed to an architecture and method for managing at least two distinct machines or objects in which resources are shared as a single entity or object in an agent based system. Although embodiments of the present invention are described with respect to open control technology in an agent based framework embodiments of the invention may be applied to any agent based system in which multiple managed machines or objects share resources. Prior to describing embodiments of the present invention example environments in which embodiments of the present invention may be implemented will be described.

Front end comprises a plurality of Web servers . . . . Web servers . . . are computer systems that deliver or serve up Web pages to a browser for viewing by a user such as a client and or an administrator . Web servers . . . store HTML hypertext markup language documents in order for users to access the documents on the Web.

Back end comprises two application servers and two storage devices and and two database servers and . Applications servers and are computer systems that handle all application operations between users and an enterprise s backend business applications or databases. Application servers and are typically characterized as having built in redundancy high performance distributed application services and support for complex database access. Storage devices and are used to store information and are well known to those skilled in the relevant art s . Database servers and are computer systems that process queries. Database servers and are comprised of database applications. The database applications are divided into two parts. A first part displays the data and interacts with the user i.e. administrator and or clients . A second part preserves data integrity and handles most of the processor intensive work such as data storage and manipulation.

Data transmitted and received over Internet passes through load balancer . Load balancer analyzes all incoming data requests from clients and administrator and forwards the requests to an appropriate Web server . . . in front end . The client or administrator request may be for a particular Web page stored on one of Web servers . . . . The Web page may include embedded objects provided by one or more application servers and one or more storage devices and and or one or more database servers and . For security purposes firewall monitors and controls the data traffic between front end Web servers . . . and back end application servers and storage devices and and database servers and .

As previously indicated open control technology architecture defines an object model that virtualizes the infrastructure of Internet data center . The virtualization is done using abstractions and encapsulations. The abstraction hides the complexity of individual service implementations. The encapsulation represents the relationship between various objects in the model.

Object manager is used to embody the object model that supports the open control technology architecture. Object manager provides the mechanisms to instantiate and perform operations on instances of objects. Three interfaces are provided to facilitate such operations. The interfaces include client interface provider interface and driver interface .

Client interface provides an application programming interface API that may be used by client applications to configure query and or manipulate objects provided by object manager . An example client application may be a graphical user interface GUI . The graphical user interface may provide a graphical external representation of the object model for allowing object instances to be displayed and graphically manipulated. Other client applications may include but are not limited to rule engines for pre defining rules to respond to events changes in status or invocation of methods associated with the objects within object manager and other automated applications.

Driver interface interconnects provider framework with drivers . Drivers enable a requested action to be performed on managed services or resources. Services may include but are not limited to Web services Windows services database services email services etc. Resources may include hardware and software components of the system such as but not limited to storage devices databases logs etc. Driver interface is a set of operations or APIs through which object manager performs a management operation on a device. Management operations may include but are not limited to start stop and status requests. A management operation request is transmitted via provider framework .

Provider interface interconnects drivers with provider framework . When the state of a managed service or resource changes the interaction between drivers providers and provider framework via provider interface causes an associated property in the object managed by object manager to be reliably and efficiently updated.

Provider framework allows new different types of providers to be added to object manager . Each new different type of provider may include additional object classes and or operations to enhance the functionality of object manager . As previously indicated provider framework enables changes to properties represented in an object managed by object manager to be propagated to drivers . When one of client applications invokes an object s method via client interface action is reliably and efficiently invoked in drivers by provider framework to ultimately effect the requested action on the managed service or resource.

As previously indicated conventional open control technology architecture cannot handle the situation where clustered resources services are managed and monitored as a single object in an agent based framework. illustrates a simplified diagram of a typical open control technology architecture in which problems arise when at least two distinct machines try to share common resources and or services. Explanations as to why such an architecture does not work will now be explained with reference to .

Architecture comprises a controller and a plurality of machines M M and M representative of an exemplary datacenter. Each of machines M M and M includes an agent Agent Agent and Agent for interpreting commands from and sending information to controller for each of machines M M and M respectively. Agents and may be implemented in software hardware or a combination thereof. Each of machines M M and M is represented as an object according to the object model described above with reference to . Each of machines M M and M includes non clustered resources services such as but not limited to processors and or services daemons that must be managed and monitored.

Machines M and M represent one type of clustered machine known as a failover clustered machine. In other words clustered machine is comprised of machines M and M and clustered resources services shown in as Shared R S . The clustered resources services are shared by machines M and M and may include but are not limited to windows services database services application services Web services disks logs etc. The purpose of clustered machine is to act as a failsafe system for accessing clustered resources services. When clustered resources services are being accessed by controller only one of machines M or M may access the required shared resource service at a time. Thus if machine M is available to access the required shared resource service then machine M is considered to be invalid or inactive. Also if machine M is available to access the required shared resource service then machine M is considered to be invalid or inactive. Therefore if machine M is inactive machine M will failover and machine M will be active and vice versa.

Controller acts as a management gateway for integrating and managing resources and services provided by machines M M and M. Controller comprises inter alia provider interfaces I Fs and . Provider I F is coupled to Agents and on machines M and M respectively using persistent standard connections and respectively. Provider I F is coupled to Agent on machine M using persistent standard connection . Standard connections and provide management connections between the respective Agents and and controller .

Controller also communicates with administrator and clients using an Internet browser not shown via Internet and load balancer . Controller may collect requests for information from administrator and or clients . When the request for information is obtainable from a non clustered resource service controller will generate commands from the requests and send the commands over the appropriate standard persistent connection or to the appropriate Agent Agent or on the machine M M or M in which the information is to be retrieved. For non clustered resources services each of machines M M and M act independently as separate objects and therefore may all be active at the same time.

Controller communicates with machines M M and M using TCP IP Transmission Control Protocol Internet Protocol which is well known to those skilled in the relevant art s . TCP IP provides a unique IP address for each component in the network or datacenter.

After receiving the commands from controller the appropriate Agent will interpret the commands and perform the necessary function s required by the request such as determining the status of a resource or service obtaining information from a resource or service etc. The Agent after performing the necessary function s required by the request will send the requested information to controller . Controller will in turn send the information to the requesting entity i.e. administrator or clients .

In order to manage and monitor resources and services on machines M M and M controller may need to obtain information from a particular non clustered service or resource located on one of machines M M or M. In this case controller will send commands to the appropriate Agent on the machine in which information is to be retrieved over the appropriate persistent standard connection. In turn the appropriate Agent will interpret the commands and perform the necessary function s required to obtain the information. The information may be a status of a resource or service information from a resource or service etc. The Agent after obtaining the information will send the information to controller over the corresponding persistent standard connection.

As previously stated the problem with conventional open control technology architecture arises when clustered resources services in a failover clustered machine are managed and monitored by controller . In the agent based management and monitoring solution described in each machine M M and M is represented as an independent management object that is manipulated and monitored by controller when non clustered resources services are utilized. In the case of clustered resources services that are shared by machines M and M two objects are required to represent the same shared resources services. When controller is accessing a shared resource service from clustered machine only one of machines M and M will be active. Thus for example if controller sends a command to machine M for a request for information from a shared resource service via persistent standard connection and machine M is the machine that is inactive a response back to controller may indicate that machine M is inactive or that the resource service is down. Controller will then assume that the information cannot be retrieved. Yet the requested information could have been retrieved from machine M since the resource service requested is also accessible from machine M and machine M is active. However the architecture presented in does not allow for a failover to machine M to enable the retrieval of the information by machine M since the request was sent over persistent standard connection . The same is true if the controller had sent commands via persistent connection for machine M and machine M was inactive yet the requested information could be retrieved from machine M.

Embodiments of the present invention are directed to an architecture and method for managing at least two distinct machines or objects in which resources are shared as a single entity or object in an agent based system. This is accomplished by employing a local agent that provides non persistent virtual connections to failover clustered machines such as clustered machine . Having both a persistent standard connection to a failover clustered machine for representing the clustered machine as two distinct objects and a non persistent virtual connection to the failover clustered machine for representing the clustered machine as a single object enables controller to obtain information from individual non shared resources services as well as shared resources services in a single representation.

In an embodiment of the present invention local agent is used to provide a virtual non persistent connection shown in phantom to clustered machine . Virtual non persistent connection allows local agent to view clustered machine as a single entity or object. Virtual non persistent connection enables local agent to connect to both machine M and machine M using a single unique virtual IP address. For example machine M may be assigned an IP address of 1.2.3.1 machine M may be assigned an IP address of 1.2.3.2 and clustered machine may be assigned a virtual IP address of 1.2.3.3. This allows machines M M and the combination of machines M and M clustered machine to each have a unique IP address. Machine M would also be assigned a unique IP address such as for example 1.2.3.4.

In one embodiment local agent is used for accessing shared resources services from clustered machine . As previously stated only one of machines M or M may be active at a time when accessing shared resources services. Therefore when controller sends commands directed to a shared resource service to local agent local agent will open virtual connection and send the commands to both machine M and M. Although both machines M and M receive the commands only the active machine will respond. This eliminates the need for local agent to know which machine M or M is active and will respond to the commands.

With architecture non clustered resources services are accessed using persistent standard connections such as and as described above with reference to .

In block controller receives a request to manipulate one or more of a shared resource and or a shared service. In one embodiment the request may come from administrator who is making sure that the machines or servers on the network are operating properly. In another embodiment the request may come from a user or client who is obtaining information from Internet . The process then proceeds to block .

In block controller opens a virtual non persistent connection such as connection in to the clustered machine containing the shared resource service. This is accomplished using local agent . The process then proceeds to block .

In block controller generates commands from the request and sends the commands through the virtual connection via local agent to the clustered machine containing the shared resources. The process then proceeds to block .

In block the active machine is triggered to process the commands. The Agent within the active machine of the clustered machine will interpret the commands perform the necessary function s required by the commands and send the requested information to controller . The process then proceeds to block .

In block controller receives the requested information through virtual non persistent connection via local agent . Controller will then send the requested information to the requesting entity i.e. administrator or clients . The process then proceeds to block where virtual connection is closed. In an alternative embodiment virtual connection may be closed prior to sending the requested information to the requesting entity.

Controller is also capable of triggering a request for information from a shared resource and or service for its own edification. Such information may include but is not limited to a status check of a shared resource and or service. is a flow diagram describing a method for enabling a controller in an agent based open control technology architecture to trigger a request for information from a shared resource and or service according to an embodiment of the present invention. The invention is not limited to the embodiment described herein with respect to flow diagram . Rather it will be apparent to persons skilled in the relevant art s after reading the teachings provided herein that other functional flow diagrams are within the scope of the invention.

The process of method is similar to the process of method described in blocks of . The process begins with block and immediately proceeds to block . Unlike the process of block in where controller receives a request to manipulate a shared resource and or service in block controller generates the request on its own. That is controller triggers a request for information in the form of commands that controller needs from a shared resource and or service. The process then continues through blocks as described above with reference to . After the Agent sends the requested information to controller from the active machine in clustered machine via virtual non persistent connection the process proceeds to block .

In block controller receives the information from the active machine in clustered machine . In one embodiment controller may notify administrator if necessary regarding the status of the shared resource service in which information was obtained. The process then proceeds to block . In block virtual connection is closed by local agent via controller .

In embodiments of the present invention non persistent virtual connections such as non persistent virtual connection are constantly being created and destroyed. In one embodiment of the invention a security provision exists to ensure the security of the non persistent virtual connection. The security provision protects the agent based system from a hacker trying to fool the failover clustered machines into thinking that a connection from the hacker is a trusted connection from the controller and local agent. The security provision is accomplished using the persistent connection. The persistent connection also referred to as a trusted connection is used to pass secret information such as but not limited to a token username password etc. to the failover clustered machine. The secret information is used to create the non persistent virtual connection. That is if the secret information is not provided by the non persistent virtual connection the failover clustered machine will not accept the connection.

In one embodiment the secret information includes a public encryption key exchange. Once the secret information has been given to the failover clustered machine via the persistent connection the controller and the local agent via the non persistent connection must use the public key to encrypt messages sent to the failover clustered machine and the failover clustered machine must use a private key to decrypt verify the messages. This provision makes sure that messages from the controller are authentic.

Embodiments of the present invention may be implemented using hardware software or a combination thereof and may be implemented in one or more computer systems or other processing systems. In fact in one embodiment the invention is directed toward one or more computer systems capable of carrying out the functionality described here. An example implementation of a computer system is shown in . Various embodiments are described in terms of this exemplary computer system . After reading this description it will be apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system includes one or more processors such as processor . Processor is connected to a communication bus . Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive an optical disk drive etc. Removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit represents a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative embodiments secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM erasable programmable read only memory or PROM programmable read only memory and associated socket and other removable storage units and interfaces which allow software and data to be transferred from removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Examples of communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA personal computer memory card international association slot and card a wireless LAN local area network interface etc. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path i.e. channel . Channel carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link a wireless link and other communications channels.

In this document the term computer program product refers to removable storage units and signals . These computer program products are means for providing software to computer system . Embodiments of the invention are directed to such computer program products.

Computer programs also called computer control logic are stored in main memory and or secondary memory and or in computer program products. Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to perform the features of the present invention as discussed herein. In particular the computer programs when executed enable processor to perform the features of embodiments of the present invention. Accordingly such computer programs represent controllers of computer system .

In an embodiment where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive hard drive or communications interface . The control logic software when executed by processor causes processor to perform the functions of the invention as described herein.

In another embodiment the invention is implemented primarily in hardware using for example hardware components such as application specific integrated circuits ASICs . Implementation of hardware state machine s so as to perform the functions described herein will be apparent to persons skilled in the relevant art s . In yet another embodiment the invention is implemented using a combination of both hardware and software.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined in accordance with the following claims and their equivalents.

