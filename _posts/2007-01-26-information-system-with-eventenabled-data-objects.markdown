---

title: Information system with event-enabled data objects
abstract: A computer-implemented information system involves data objects stored in the database with characteristics of such data objects defined at a design time. The system is able to associate customized data object events with at least some of the data objects subsequent to the design time to define subscriber objects. Data objects which are publisher objects are determined based on the events. In one implementation, the information system includes a messaging manager, with a message broker and an event controller associated therewith.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341646&OS=08341646&RS=08341646
owner: SAP AG
number: 08341646
owner_city: Walldorf
owner_country: DE
publication_date: 20070126
---
Enterprise business applications often make use of business objects to represent entities or concepts in a particular business application. Business objects may be associated with classes which define the structure and at least to some degree intended meaning i.e. business semantics of a homogenous set of real world entities. Business object classes can be related to other classes via associations which generally state a semantic dependency. One example of such semantic dependency would be the relationship between a customer and its purchase orders. As such business object instances may represent individual business entities that are manipulated by business processes.

Business object classes as well as certain changes in the state of business objects may be defined at the design time associated with the class of business objects or the design time of other system parameters. It is not always practical efficient or desirable for classes event types changes in state or other characteristics of business objects to be defined at design times.

In one implementation a computer implemented information system makes use of data objects stored in a database. The data objects have one or more characteristics which are defined at a design time. The system includes suitable hardware and associated programming to associate customized data object events with at least some of the data objects subsequent to the design time thereby defining subscriber objects. The system communicates control events based on the customized data object events. The system is able to determine which of the data objects are publisher objects based on the control events. The system is also able to add new data objects as well as communicate already existing customized data object events to such new data objects.

In one variation the system includes suitable programming so that at least one predicate associated with a control event may be determined for one or more associated publisher objects. If the predicate is true a notification message is published as a result.

In another variation the system includes a messaging manager for the subscriber objects and the publisher objects. The messaging manager is able to maintain a subscription list which includes data corresponding to event types customized data object events and a reference count. The messaging manager is able to alter the value of the reference count for a given one of the data object events in response to a change in the number of subscriber objects associated with the given data object event.

In yet another implementation the information system includes a business application platform in which the data objects comprise business objects and the data object events comprise business events. In one variation an application programming interface for accessing the data objects is part of the system and the messaging manager comprises a message broker and an event controller.

A computer implemented method associates business objects in a database of an enterprise system application with events. The method involves defining business objects at design time receiving a request subsequent to the design time for one of the business objects to subscribe to an event thereby defining a subscriber object determining which of the business objects are related to the event thereby defining publisher objects and generating a notification message when the event is detected.

In one variation of the method predicates of the event are communicated to the publisher objects and a determination is made of whether the predicates are true upon which a notification message is generated.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features objects and advantages related to the implementations will be apparent from the description and drawings and from the claims.

Data objects and can represent entities or concepts in any number of applications such as a particular business application. Accordingly system can include multiple data objects and data objects can be categorized or characterized by type. For example the data object can represent a customer and the data object can represent a sales order. Data objects can be grouped into categories or classes based on the concept they represent. For example all sales order data objects can be grouped into a sales order class and all customer data objects can be grouped into a customer class.

A particular data object can be referred to as an instance of a particular class. For example a particular sales order data object can be referred to as an instance of a sales order class. Data objects can have design time characteristics such as an identification of a set of data fields that can store the data of the object. Data objects can also have associated run time characteristics such as specific values for data fields at a particular point in time. New data object instances can be added to the system during the execution of the application . For example a new customer data object can be created.

A data object such as data object can be interested in a state change of another data object such as data object . For example if an address of a customer data object changes a sales order data object representing a sales order for that customer can be notified so that a shipping address in the sales order data object can be updated.

A state change of a data object can be an example of a data object event. A data object event is the occurrence of a specific condition which another data object or service that uses data objects is interested in. Data object event conditions can be identified during or subsequent to design time. A data object event that is identified during design time can be referred to as a predefined data object event. For example the creation update or deletion of a data object can be predefined data object events.

Data object events that are configured subsequent to design time can be referred to as customized data object events. The condition of a customized data object event can be identified and configured during the execution of an application. Conditions for customized data object events do not need to be known at design time. A customized data object event can be defined in part by referencing a predefined data object event. For example a customized data object event can be defined with a condition of a sales order is created with an exempt tax code .

Customized data object events can be associated with a particular data object instance or with an entire class of objects. A customized data object event with an event condition configured as the quantity of a sales order becomes greater than 7500 may be associated with the entire class of sales order data objects. A customized data object event can refer to a single instance such as an event associated with the changing of a particular customer data object s address.

A data object can subscribe to a data object event in order to become notified when the data object event occurs. If a data object is no longer interested in a data object event it can unsubscribe. A data object that triggers a data object event can publish a notification message to data objects that have subscribed to the data object event. For example a change of state of a business object such as the changing of a field value can result in the publishing of data object event notification messages. A data object can simultaneously be both a subscriber and a publisher data object.

A messaging manager can provide functionality for message subscribing and publishing. The messaging manager can include a message broker and an event controller . Message broker and event controller are implemented by suitable software hardware or both. In one implementation message broker and event controller include substantially independent program modules running on associated hardware. The message broker can provide services that allow for the communication of messages to data objects and other entities such as the event controller . The message broker can use a messaging architecture that supports publishing and subscribing such as the Java Message Service JMS available from Sun Microsystems Inc. An example messaging service that supports JMS is ActiveMQ available from the Apache Software Foundation.

The event controller can control event based behavior of business objects and can keep track of publishers and subscribers for each data object event type. Data objects can communicate with the event controller through the use of control events. The event controller can send a control event to newly created data object instances to inform them about data object events they should publish. The event controller can send a control event to publisher data objects to notify them that a new data object event type has been subscribed to. The event controller can send a control event to publisher data objects to notify them when there are no longer any subscribers to a data object event allowing data objects to avoid needlessly publishing data object event notifications.

In this implementation data objects such as the data object are stored in a database which handles database transactions. Database transactions can include any of the wide variety of changes to data objects that are either committed to the database or rolled back as a group. The message broker can handle event notification transactions. To ensure that changes made to data objects have been committed before event notifications related to those changes are sent event notification messages can be sent after corresponding database transactions have been committed.

By way of example the invoice data object is interested in an event condition related to sales order data objects. The invoice data object wants to be notified when a quantity on any sales order data object instance becomes greater than 7500. The invoice data object can request a subscription to this new event type by communicating a control event to the event controller . The event controller can subscribe to a global control event type in order to be able to receive messages from data objects such as the invoice data object . For example the event controller can subscribe to a global control event type represented by a GLOBAL CTRL EVENT identifier. The event controller can be the sole subscriber to the GLOBAL CTRL EVENT event type so that it is the only recipient of messages of this type. The invoice data object can send a message that includes a global control event type represented by the GLOBAL CTRL EVENT identifier.

The message can include a message type field with a value that indicates that the message is a subscription request. An event category field can be included in the message to indicate that the event is applicable to sales order data objects since any sales order data object instance can potentially publish the event. The message can include an event predicate field which can describe the event condition e.g. a sales order quantity greater than 7500 .

When the event controller receives the message it can determine from an event category field that the message is a subscription request. The event type of the requested event can be represented by an identifier such as SQTY GRTHAN7500. The event controller can check to see if there are already existing subscriptions for the requested event type by checking the reference count in the subscription list that is associated with the requested event type. If the reference count is non zero then publishers are already publishing messages for this event type. The event controller can increment the reference count to indicate that another subscription to this event type has occurred. If the reference count is zero then the event controller can notify publishers to begin publishing events for the new event type.

Sales order data objects can be potential publishers for the new event type so the event controller can send a message to all sales order data objects to inform them to begin monitoring the new event. In order to be able to receive messages from the event controller sales order data objects can subscribe to a global control event type associated with the sales order class. This global control event type can be represented by the identifier SALES CTRL EVENT. The event controller can send a message with an event type of SALES CTRL EVENT to all sales order data object instances.

The sales order data object can receive the message . A message type field can indicate that the message is a request to publish a new event. The message can include an event predicate field which can describe the event condition e.g. a sales order quantity greater than 7500 . The sales order data object can maintain an event type list which can include a list of event types it can publish along with the predicates for these event types. The sales order data object can store the predicate included in the message in this event type list.

When the sales order data object is changed it can traverse its event type list and evaluate each event predicate. If an event predicate evaluates to true an event message can be published. For example if the quantity of the sales order data object becomes greater than 7500 the event predicate from the message can be evaluated to true and an event notification message can be sent to subscribers of that event. A message with an event type of SQTY GRTHAN7500 can be sent. A message type field can indicate that the message is associated with a data object event. The message can include information related to the sales order such as the value of order number and business partner fields.

The invoice data object can receive the message because it has subscribed to the event type associated with the identifier SQTY GRTHAN7500. Any other data objects that have subscribed to the SQTY GRTHAN7500 event can receive the message as well.

The event controller can decrement the reference count of the SQTY GRTHAN7500 event type in the subscription list . If the reference count becomes zero after decrementing this can indicate that there are no longer any subscriptions to the SQTY GRTHAN7500 event type. The event controller can delete the entry associated with the SQTY GRTHAN7500 event type from the subscription list .

The event controller can notify all sales order data objects to stop publishing events associated with the SQTY GRTHAN7500 event type. The event controller can send a control message that can be received by the sales order data object . A message type field included in the message can indicate that the message is a request to stop publishing an event. An event field included in the message can indicate that the SQTY GRTHAN7500 event should no longer be published. After receiving the control message the sales order data object can delete the event associated with the SQTY GRTHAN7500 event type from its event list so that events of this type are no longer published.

When the sales order data object is created it can send a control message to the event controller asking to be informed about publish and subscribe actions that are applicable to sales order data objects. The subscription list can include a type field which can indicate whether data objects for an event type should publish or subscribe to that particular event type. The event controller can generate an event action list that can include publish and subscribe actions that are relevant to a particular data object type such as the sales order data object type.

The event controller can send a control message to the new sales order data object . The control message can include an event action list generated by the event controller . The event action list can include a list of event types that the new sales order data object should participate in and can include predicates for those event types and indicators specifying whether the sales order data object should subscribe to or publish those event types. For example the event action list can include the SQTY GRTHAN7500 event type with a role type of publish . The new sales order data object can register the predicate evaluate the predicate when the object changes and send an event notification message if the predicate evaluates to true.

Data objects can be business objects which exist in a business application platform. is a method for associating such business objects in a database of an enterprise system with events.

In step business objects are defined at design time the business objects being characterizable by type. For example a business object of a sales order type can be defined such as the sales order object and a business object of an invoice type can be defined such as the invoice object .

In step a request is received subsequent to the design time for one of the business objects to subscribe to an event to define a subscriber object the subscriber object being of a first type. For example the invoice object can subscribe to an event.

In step the business objects which are related to the event are determined to define publisher objects the publisher objects being of a second type. For example it can be determined that the sales order object is related to an event subscribed to by the invoice object . The sales order object can be defined as a publisher object.

In step a notification message is generated when the event is detected. For example the sales order object can generate a notification message when its quantity becomes greater than a defined threshold.

In step data is added to a data structure containing multiple previously defined data objects and multiple events associated with the previously defined data objects. For example the data for a subscription request can be added to the subscription list that is maintained by the event controller . The subscription list can include data for multiple data objects and for each data object a list of event types can be included.

In step a class for the data object is determined. For example it can be determined that the data object is an instance of an invoice class.

In step the events which are associated with the class are determined. For example the events associated with an invoice class can be determined.

The memory stores information within the system . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit. In another implementation the memory is a non volatile memory unit.

The storage device is capable of providing mass storage for the system . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device.

The input output device provides input output operations for the system . In one implementation the input output device includes a keyboard and or pointing device. In another implementation the input output device includes a display unit for displaying graphical user interfaces.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. Accordingly other implementations or variations are within the scope of the following claims.

