---

title: Filtering application messages in a high speed, low latency data communications environment
abstract: Methods, systems, and products are disclosed for filtering application messages in a high speed, low latency data communications environment that include: receiving an application message in a transport engine of a message receiving device from a message transmitting device, the application message having a message contents label and a collision indicator, the message contents label representing contents of the application message, the collision indicator specifying whether the message contents label represents different contents in at least one other application message; determining, by the transport engine, whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label; providing, by the transport engine, the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint; and administering the application message, by the messaging middleware, in dependence upon the collision indicator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917912&OS=07917912&RS=07917912
owner: International Business Machines Corporation
number: 07917912
owner_city: Armonk
owner_country: US
publication_date: 20070327
---
The field of the invention is data processing or more specifically methods systems and products for filtering application messages in a high speed low latency data communications environment.

Messaging environments are generally available to provide data communication between message sending devices and message receiving devices using messages. A message is a quantity of data that includes one or more data fields and is passed from a message producer installed on a message sending device to a message consumer installed on a message receiving device. A message may represent for example numeric or textual information images encrypted information and computer program instructions. An application message is a message whose contents are created accessed and utilized on behalf of application software operating in the application layers of a network protocol stack.

A messaging environment may support point to point messaging publish and subscribe messaging or both. In a point to point messaging environment a message producer may address a message to a single message consumer. In a publish and subscribe messaging environment a message producer may publish a message to a particular channel or topic and any message consumer that subscribes to that channel or topic receives the message. Because message producers and message consumers communicate indirectly with each other via a channel or topic in a publish and subscribe environment message transmission is decoupled from message reception. As a consequence neither producers nor consumers need to maintain state about each other and dependencies between the interacting participants are reduced or eliminated. A publish and subscribe environment may therefore allow message publishers and message subscribers to operate asynchronously.

For further explanation of a messaging environment sets forth a block diagram illustrating a typical messaging environment for data communications that includes a message sending device a message receiving device and a message administration server . The message sending device is a computer device having installed upon it a message producer a set of computer program instructions configured for transmitting messages to the message administration server for delivery to a message receiving device. In the example of the message producer transmits messages to the message administration server on a message stream . The message sending device may produce the transmitted messages by generating the messages from data of the message sending device itself or data received from some other source. The message receiving device is a computer device having installed upon it a message consumer a set of computer program instructions configured for receiving messages from the message administration server . In the example of the message consumer receives the messages from the message administration server on a message stream . In the example of the message stream and the message stream are data communication channels implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP .

In either a point to point messaging environment or a publish and subscribe messaging environment the messages transmitted from message sending devices to message receiving devices typically pass through the message administration server . The message administration server is computer device having installed upon it a message administration module computer program instructions configured for administering the messages transmitted from the message producer to the message consumer . Examples of message administration modules may include the IBM WebSphere MQ the Open Message Queue from Sun Microsystems and the OpenJMS from The OpenJMS Group. In a point to point messaging environment the message administration module provides message queuing for the message consumer as the message administration module receives messages addressed to the consumer from various message providers. In a publish and subscribe messaging environment the message administration module administers the various channels or topics to which message producers publish and message consumers subscribe. In either message environment the message administration module may also provide security services to ensure that the only messages arriving at the messaging consumer from the message producer are those messages that the message consumer is authorized to receive and that the message producer is authorized to send.

Current messaging environments such as for example the one described above with reference to have certain drawbacks. Messages transmitted to a message administration server from a message sending device for delivery to a message receiving device are delayed in the message administration server until the message administration server can process the messages. The message processing that occurs in the message administration server typically increases the overall messaging latency of the messaging environment and decreases the overall speed for transmitting data in the data communications environment. Messaging latency is the time period beginning when the message producer transmits a message and ending when the message consumer receives the message.

In many data communication environments even slight increases in messaging latency are costly. Consider for example a financial market data environment. A financial market data environment is a data processing environment used to communicate information about financial markets and participants in financial markets. In a financial market data environment a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Financial quotes include bid and ask prices for any given financial security. A bid refers to the highest price offered by a buyer to a seller for a security. An ask refers to the lowest price a seller is willing to accept for a security. In a financial market data environment a message producer may provide quotes for the purchase or sale of financial securities based on real time financial market conditions and a message consumer may buy and sell financial securities based on financial quotes. When a message consumer buys or sells a financial security based on the quoted price provided by the message producer the ability of a message consumer to obtain the bid or ask in the quote for the financial security is largely influenced by messaging latency in the financial market data environment. The higher the messaging latency the less likely a buy or sell order generated by the message consumer will execute at or near the price stated in the financial quote. In fact a highly volatile security may fluctuate in price dramatically over a time period of a few seconds.

Current solutions to reduce messaging latency are to remove the message administration server from the messaging environment. In such current solutions the message sending devices send messages directly to message receiving devices. The drawback to such current solutions is that removing the message administration server removes the administration functionality provided by the message administration server from the messaging environment. Current solutions therefore effectively offer no solution in messaging environments where the administrative functions of a message administration server are required. Consider again the financial market data environment example from above. In such an exemplary financial market data environment consider that a message receiving device is only authorized to receive financial quotes on certain financial securities or only authorized to receive financial quotes that are at least fifteen minutes old. Removing the message administration server from such a financial market data environment inhibits the ability to filter the messages received by the message receiving device from the message sending device in the financial market data environment. As such readers will recognize that room for improvement exists in filtering application messages in a high speed low latency data communications environment.

In some systems the administrative functions of a message administration server may not be required. In such systems system designers may still filter the application messages in the message receiving device. Current solutions to filtering in such systems typically implement filtering in the application software layer that processes the application messages. The contents of each message are often examined to determine whether the message is authorized for further processing. In high speed low latency data communications environments however examining the contents of each message received is often an ineffective solution because messages typically arrive faster than they can be filtered. As such readers will recognize that room for improvement exists in filtering application messages in a high speed low latency data communications environment.

Methods systems and products are disclosed for filtering application messages in a high speed low latency data communications environment that include receiving an application message in a transport engine of a message receiving device from a message transmitting device the application message having a message contents label and a collision indicator the message contents label representing contents of the application message the collision indicator specifying whether the message contents label represents different contents in at least one other application message determining by the transport engine whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label providing by the transport engine the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint and administering the application message by the messaging middleware in dependence upon the collision indicator.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and products for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network and block diagram illustrating an exemplary computer data processing system for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The system of operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention as follows A transport engine of a message receiving device receives an application message from a message transmitting device . The message receiving device of is implemented as a subscribing client device and the message transmitting device of is implemented as a feed adapter. The application message has a message contents label and a collision indicator. The message contents label represents contents of the application message and the collision indicator specifies whether the message contents label represents different contents in at least one other application message. The transport engine determines whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label. The transport layer constraint is a constraint on application messages to be received by the message receiving device from the message transmitting device . The transport layer constraint is applied to the application messages by a software component operating in the transport layer of the network protocol stack as opposed to being applied by a software component operating in the application layer. The transport engine provides the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint. The messaging middleware of the message receiving device administers the application message in dependence upon the collision indicator. In the example of a stream administration server brokers establishment of a message stream from the message transmitting device to the message receiving device including authenticating the message receiving device authorizing the message receiving device to receive application messages from the message transmitting device on the message stream and providing to the transport engine of the message receiving device the transport layer constraint.

The system of may also operates for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention as follows Messaging middleware of the message transmitting device receives the application message for transmission to the message receiving device from a conversion application of the message transmitting device . The messaging middleware of the message transmitting device retrieves the contents of the application message and calculates the message contents label in dependence upon the retrieved contents of the application message. The messaging middleware of the message transmitting device sets the collision indicator for the application message in dependence upon the message content label and a mapping between contents of application messages and message contents labels. A transport engine of the message transmitting device transmits the application message the message contents label and the collision indicator to the message receiving device .

The high speed low latency data communications environment illustrated in includes a high speed low latency data communications network . The network includes a feed adapter a stream administration server and a subscribing client device as well as the infrastructure for connecting such devices together for data communications. The network of is termed high speed low latency because the application messages sent between devices connected to the network on message streams administered by the stream administration server bypass the stream administration server . For example the application messages on the message stream from the feed adapter to the subscribing client device bypass the stream administration server . Although such messages are not delayed for processing in the stream administration server the stream administration server retains administration of the stream between devices connected to the high speed low latency data communications network .

Further contributing to the high speed low latency nature of network readers will note that the network does not include a router that is a computer networking device whose primary function is to forward data packets across a network toward their destinations. Rather each device provides its own routing functionality for data communication through a direct connection with the other devices connected to the network . Because the network does not include a computer networking device dedicated to routing data packets the network of may be referred to as a minimally routed network. Although the exemplary network illustrated in does not include a router such a minimally routed network is for explanation only. In fact some high speed low latency networks useful in filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention may include a router.

The high speed low latency data communications environment depicted in includes a message stream . A message stream is a data communication channel between a communications endpoint of a sending device and a communications endpoint of at least one receiving device. A communications endpoint is composed of a network address and a port for a transmitting device or a receiving device. A message stream may be implemented as a multicast data communication channel. In a multicast data communication channel a one to many relationship exists between a destination address for a message and the communication endpoints of receiving devices. That is each destination address identifies a set of communication endpoints for receiving devices to which each message of the stream is replicated. A multicast data communication channel may be implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP . In addition to a multicast data communication channel the message stream may be implemented as a unicast data communication channel. In a unicast data communication channel a one to one relationship exists between a destination address for a message and a communication endpoint of a receiving device. That is each destination address uniquely identifies a single communication endpoint of single receiving device. A unicast data communication channel may be implemented using for example the Transmission Control Protocol TCP and IP.

The exemplary system of includes a stream administration server connected to the high speed low latency data communications network through a wireline connection . The stream administration server of is a computer device having installed upon it a stream administration module an authentication module an authorization module and an authorization policy . A stream administration module is a software component that includes a set of computer program instructions configured for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The stream administration module operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by brokering establishment of a message stream from the message transmitting device to the message receiving device including authenticating the message receiving device authorizing the message receiving device to receive application messages from the message transmitting device on the message stream and providing to the transport engine of the message receiving device the transport layer constraint.

The authentication module of is a set of computer program instructions capable of providing authentication security services to the stream administration module through an exposed authentication application programming interface API . Authentication is a process of verifying the identity of an entity. In the exemplary system of the authentication module verifies the identity of the subscribing client device . The authentication module may provide authentication security services using a variety of security infrastructures such as for example shared secret key infrastructure or a public key infrastructure.

The authorization module of is a set of computer program instructions capable of providing authorization security services to the stream administration module through an exposed authorization API . Authorization is a process of only allowing resources to be used by resource consumers that have been granted authority to use the resources. In the example of the authorization module identifies the application messages that the subscribing client device is authorized to receive on the message stream . The authorization module of provides authorization security services using an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated entities to send or receive application messages on a message stream. In a financial market data environment for example an authenticated entity may be authorized to receive application messages that include financial quotes for some financial securities but not other securities. The authorization policy may grant privileges on the basis of an individual entity or an entity s membership in a group. In the exemplary system of feed adapter is connected to the high speed low latency data communications network through a wireline connection . The feed adapter is a computer device having the capabilities of converting application messages received on a feed adapter input stream having a first format to application messages having a second format for transmission on a feed adapter output stream to subscribing client devices. The feed adapter input stream is a message stream from a feed source to the feed adapter . The feed adapter output stream is a message stream administered by the stream administration server from the feed adapter to the subscribing client device .

In the example of the feed adapter receives application messages on the feed adapter input stream from a feed source . The feed source is a computer device capable of aggregating data into application messages and transmitting the messages to a feed adapter. In a financial market data environment for example a feed source may be implemented as a feed source controlled by the Options Price Reporting Authority OPRA . OPRA is the securities information processor for financial market information generated by the trading of securities options in the United States. The core information that OPRA disseminates is last sale reports and quotations. Other examples of feed sources in financial market data environment may include feed sources controlled by the Consolidated Tape Association CTA or The Nasdaq Stock Market Inc. The CTA oversees the dissemination of real time trade and quote information in New York Stock Exchange and American Stock Exchange listed securities. The Nasdaq Stock Market Inc. operates the NASDAQ Market Center which is an electronic screen based equity securities market in the United States. In a financial market data environment a feed adapter input stream is referred to as a financial market data feed. 

The feed adapter of has installed upon it a conversion module a converter table conversion function library a message library a message model a mapping messaging middleware and a transport engine . The conversion module is a set of computer program instructions for converting application messages received on the feed adapter input stream having a first format into application messages having a second format for transmission to subscribing devices on the feed adapter output stream .

The conversion module converts application messages from the first format to the second format according to the converter table . The converter table of is a data structure that specifies the converter functions capable of converting the application message from one format to another format. Utilizing multiple converter tables the conversion module may convert messages from a variety of input formats to a variety of output formats. In the example of the converter table specifies the converter functions capable of converting the application message received from the feed adapter input stream having the first format to application messages having the second format for transmission to subscribing client devices on the feed adapter output stream . The converter table of may be implemented using a structured document such as for example an eXtensible Markup Language XML document.

The conversion function library of is a loadable software module that contains one or more converter functions capable of converting data fields in an application message from one format to another format or converting values of data fields from one value to another value. The converter functions contained in the conversion function library may for example convert a 16 bit integer to a 32 bit integer convert a number stored in a string field to a 64 bit double floating point value increase the value of one data field by one or any other conversion as will occur to those of skill in the art. The conversion module accesses the converter functions through a set of converter function APIs exposed by the converter functions of the conversion function library . In the example of the conversion function library may be implemented as dynamically linked libraries available to the conversion module at runtime statically linked libraries linked into the conversion module at compile time dynamically loaded Java classes or any other implementation as will occur to those of skill in the art.

In the example of the application messages transmitted by the feed adapter have a format specified in a message model . The message model is metadata that defines the structure and the format used to create access and manipulate the application messages converted from the application messages not shown received from the feed source . That is the message model specifies a message format for interpreting application messages and includes one or more field specifications. Each field specification specifies a message field for storing data in an application message and includes field characteristics of the message field. In the example of the message model is established on both the feed adapter and the subscribing client device by the stream administration server when the stream administration server brokers a message stream to a subscribing client device. A message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art.

In the example of the conversion module and the converter functions of the conversion function library process the data contained in the application messages using the message library . The message library is a software module that includes a set of functions for creating accessing and manipulating messages according to a message model . The message library is accessible to the conversion module the converter functions of the conversion function library and the messaging middleware through a message API exposed by the message library .

Before the conversion module of performs data processing on the application messages the conversion module receives application messages not shown having a first format from the feed source . The conversion module of may receive the source stream messages through a receiving transport engine not shown of the feed adapter . The receiving transport engine is a software module that operates in the transport layer of the network stack and may be implemented according to the TCP IP protocols UDP IP protocols or any other data communication protocol as will occur to those of skill in the art. The receiving transport engine may provide the received application messages directly to the conversion module or to the messaging middleware which in turn provides the source stream messages to the conversion module .

After the conversion module of performs data processing on the application messages received from the feed source the conversion module provides the application messages having the second format to the messaging middleware . The messaging middleware of is a software component that provides high availability services between the feed adapter any backup feed adapter that may exist the subscribing client device and the feed source . In addition the messaging middleware of includes a set of computer program instructions capable of filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The messaging middleware operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by receiving the application message for transmission to the message receiving device from a conversion application of the message transmitting device retrieving the contents of the application message calculating the message contents label for the application in dependence upon the retrieved contents of the application message and setting the collision indicator for the application message in dependence upon the message content label and the mapping between contents of application messages and message contents labels. The message contents label is a value representing the contents of the application message. The messaging middleware then provides the received application messages the calculated message contents labels and the collision indicators to the transport engine for transmission to a subscribing client device on the feed adapter output stream . The conversion module interacts with the messaging middleware through a messaging middleware API exposed by the messaging middleware .

As mentioned above a collision indictor for an application message specifies whether the message contents label for the message represents different contents in at least one other application message. In this manner the collision indictor indicates when a label collision exists for the application manner. A label collision exists when a single message contents label represents more than one set of message contents. A label collision typically occurs due to the nature in which the message content label is calculated. A message contents label is typically implemented as a hash value checksum or some other value derived from the contents of the application message. Often with algorithms such as a hashing algorithm used to generate a message contents label there exists the possibility that two different inputs to the algorithm produce the same output. When different inputs to an algorithm generating the message content label produce the same value for the message content label then a label collision is said to occur.

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software module that includes a set of computer program instructions for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The transport engine operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by transmitting the application message the message contents label and the collision indicator to the message receiving device . The messaging middleware operates the transport engine through a transport API exposed by the transport engine . The transport engine of may transmit the transmitting the application message the message contents label and the collision indicator by receiving the application message the message contents label and the collision indicator from the messaging middleware prepending the message contents label and the collision indicator to the application message encapsulating the application message the message contents label and the collision indicator provided by the messaging middleware into transport packets and transmitting the packets through the message stream to the subscribing client device .

The subscribing client device in exemplary system of connects to the high speed low latency data communications network through a wireline connection . The subscribing client device of is a computer device capable of subscribing to the message streams transmitted by various feed adapters. In a financial market data environment for example a subscribing client device may subscribe to a tick to receive the bid and ask prices for a particular security on a message stream provided by a feed adapter controlled by a financial securities broker.

In the example of the subscribing client device has installed upon it an application a message library a message model messaging middleware a stream administration library and a transport engine . The application is a software component that processes data contained in the application messages received from the feed adapter . The application may process the data for utilization by the subscribing client device itself for contributing the data to another feed adapter or for contributing the data to some other device. In a financial market data environment the application installed on the subscribing client device may be a program trading application that buys or sells financial securities based on the quoted prices contained in ticks. The application may also be a value adding application that contributes information to a tick such as for example the best bid and ask prices for a particular security that is not typically included in the ticks provided by the feed source . The subscribing client device may then transmit the ticks to a feed adapter for resale to other subscribing client devices.

The application processes the data contained in the application messages using the message library . The message library is software module that includes a set of functions for creating accessing and manipulating messages according to the message model that is installed on both the feed adapter and the subscribing client device . The message library is accessible to the application through a message API exposed by the message library .

The communications between the subscribing client device and the stream administration server may be implemented using a stream administration library . The stream administration library is a set of functions contained in dynamically linked libraries or statically linked libraries available to the application through a stream administration library API . Through the stream administration library the subscribing client device of may request to subscribe to messages from a feed adapter modify an existing message subscription or cancel a subscription. Functions of the stream administration library used by the application may communicate with the stream administration server through network by calling member methods of a CORBA object calling member methods of remote objects using the Java Remote Method Invocation RMI API using web services or any other communication implementation as will occur to those of skill in the art.

 CORBA refers to the Common Object Request Broker Architecture a computer industry specifications for interoperable enterprise applications produced by the Object Management Group OMG . CORBA is a standard for remote procedure invocation first published by the OMG in 1991. CORBA can be considered a kind of object oriented way of making remote procedure calls although CORBA supports features that do not exist in conventional RPC. CORBA uses a declarative language the Interface Definition Language IDL to describe an object s interface. Interface descriptions in IDL are compiled to generate stubs for the client side and skeletons on the server side. Using this generated code remote method invocations effected in object oriented programming languages such as C or Java look like invocations of local member methods in local objects.

The Java Remote Method Invocation API is a Java application programming interface for performing remote procedural calls published by Sun Microsystems . The Java RMI API is an object oriented way of making remote procedure calls between Java objects existing in separate Java Virtual Machines that typically run on separate computers. The Java RMI API uses a remote procedure object interface to describe remote objects that reside on the server. Remote procedure object interfaces are published in an RMI registry where Java clients can obtain a reference to the remote interface of a remote Java object. Using compiled stubs for the client side and skeletons on the server side to provide the network connection operations the Java RMI allows a Java client to access a remote Java object just like any other local Java object.

Before the application processes the data contained in the application messages the application receives the messages from the messaging middleware which in turn receives the application messages from the feed adapter through the transport engine . The messaging middleware is a software component that provides high availability services between the subscribing client device the feed adapter any backup feed adapters and the stream administration module . In addition the messaging middleware includes a set of computer program instructions for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The messaging middleware of operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by administering the application message in dependence upon the collision indicator for the application message. The messaging middleware of may also establish a middleware layer constraint on application messages to be provided to the application of the subscribing client device calculate the transport layer constraint in dependence upon the middleware layer constraint and provide the transport layer constraint to the transport engine of the subscribing client device . The application and the stream administration library interact with the messaging middleware through a messaging middleware API .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software component that includes a set of computer program instructions configured for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The transport engine operates generally for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by receiving an application message in a transport engine of a message receiving device from a message transmitting device the application message having a message contents label and a collision indicator the message contents label representing contents of the application message the collision indicator specifying whether the message contents label represents different contents in at least one other application message determining by the transport engine of the message receiving device whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label and providing by the transport engine of the message receiving device the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint.

As mentioned above the transport engine of receives application messages message content labels and collision indicators from the feed adapter . The transport engine receives the application messages message content labels and collision indicators by receiving transport packets through the message stream from the feed adapter and unencapsulating the application messages message content labels and collision indicators from the received packets. In accordance with embodiments of the present invention the transport engine of then provides the application messages and the collision indicators to messaging middleware of the subscribing client device if the contents of each application message satisfy the transport layer constraint. In the example of the messaging middleware operates the transport engine through a transport API exposed by the transport engine .

After the transport engine provides the application messages and the collision indicators to messaging middleware readers will recall that the messaging middleware of operates for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention by administering the application messages in dependence upon the collision indicators. Using the collision indicator for an application message the messaging middleware may determine whether a label collision for the application message exists and either provide the application message to an application of the message receiving device if a label collision for the application message does not exists or administer the application message in dependence upon the determination of whether the contents of the application message satisfy a middleware layer constraint. Because the filtering performed by the messaging middleware does not utilize the message contents label rather it uses the actual contents of the application message message middleware filtering is immune to label collisions. Filtering in the messaging middleware layer in the exemplary system of advantageously provides the ability to filter out application message for which a subscribing client device is not authorized to receive when those messages penetrated through the transport layer due to a label collision. Using the collision indicator however the exemplary system of advantageously avoids the overhead of filtering application message in the messaging middleware layer when a label collision does not exist.

The servers and other devices illustrated in the exemplary system of are for explanation not for limitation. Devices useful in filtering application messages in a high speed low latency data communications environment may be implemented using general purpose computers such as for example computer servers or workstations hand held computer devices such as for example Personal Digital Assistants PDAs or mobile phones or any other automated computing machinery configured for data processing according to embodiments of the present invention as will occur to those of skill in the art.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Although the connections to the network of are depicted and described in terms of wireline connections readers will note that wireless connections may also be useful according to various embodiments of the present invention. Furthermore data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Filtering application messages in a high speed low latency data communications environment in accordance with the present invention in some embodiments may be implemented with one or more message receiving devices stream administration servers and message transmitting devices. These devices and servers are in turn implemented to some extent at least as computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary message receiving device useful in filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention. The message receiving device of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the message receiving device.

Stored in RAM of are an application messages message model a message library a messaging middleware a stream administration library and a transport engine . Each message is a quantity of data that includes one or more data fields and is transmitted from one device to another on a message stream. As mentioned above a message may represent numeric or textual information images encrypted information computer program instructions and so on. In a financial market data environment for example a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Each message may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message model is metadata that defines the structure and format of the messages . The message model may also be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The application the message library the messaging middleware the stream administration library and the transport engine illustrated in are software components that is computer program instructions that operate as described above with reference to the message receiving device in .

Also stored in RAM is an operating system . Operating systems useful in message receiving devices according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s iS OS and others as will occur to those of skill in the art. The operating system the application the messages the message model the message library the messaging middleware and the transport engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary message receiving device of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in message receiving devices useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in message receiving devices useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

The exemplary message receiving device of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary message receiving device . Disk drive adapter connects non volatile data storage to the exemplary message receiving device in the form of disk drive . Disk drive adapters useful in message receiving devices include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a message receiving device as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary message receiving device of includes one or more input output I O adapters . I O adapters in message receiving devices implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary message receiving device of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary message receiving device of includes a communications adapter for data communications with other computers and for data communications with a high speed low latency data communications network . Such data communications may be carried out through Ethernet connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

Although is discussed with reference to exemplary message receiving devices readers will note that automated computing machinery used to implement exemplary stream administration servers and exemplary message transmitting devices useful in filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention are similar to the exemplary message receiving device of . That is such exemplary stream administration servers and feed adapters include one or more processors bus adapters buses RAM video adapters communications adapters I O adapters disk drive adapters and other components similar to the exemplary message receiving device of as will occur to those of skill in the art.

For further explanation sets forth a flowchart illustrating an exemplary method of filtering application messages in a high speed low latency data communications environment in a high speed low latency data communications environment according to embodiments of the present invention. The method of includes brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device. The message stream represents a data communication channel between a communications endpoint of a message receiving device and a communications endpoint of a message transmitting device. A message stream may be implemented as a multicast data communication channel using the UDP IP protocols or a unicast data communication channel using TCP IP protocols as discussed above with reference to .

Brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device according to the method of may be carried out by receiving a subscription request from a message receiving device to subscribe to application messages from a message transmitting device. The subscription request is a request by an application of a message receiving device to receive data from a message transmitting device. The subscription request of may be implemented as an XML document a call to a member method of a RMI object on the message receiving device or any other implementation as will occur to those of skill in the art.

The subscription request of includes the topic of the application messages that the message receiving device requests to receive from the message transmitting device. A topic represents the characteristics of the messages that the message receiving device requests to receive. Each application message typically includes a topic data field describing the information contained in the application message. Using a topic a message receiving device may specify the group of messages that the message receiving device requests to receives from a message transmitting device. In a financial market data environment for example a message receiving device may use a topic to request to receive ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that includes the best bid and best ask for the IBM option on the CBOE.

Brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device according to the method of may also be carried out by providing the message receiving device a destination address for the message transmitting device. The destination address for the message transmitting device is a multicast address or a unicast address used by the message receiving device to listen for messages from the message transmitting device. Using the destination address provided by the stream administration server the message receiving device may establish the message stream from the message transmitting device to the message receiving device.

Before the stream administration server provides the destination address for the message transmitting device the stream administration server in the example of performs several security services to ensure that the message receiving device only receives messages from the message transmitting device for which the message receiving device is authorized to receive. In the method of brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device includes authenticating the message receiving device. Authenticating the message receiving device according to the method of may be carried out by verifying client security credentials provided by the message receiving device with the subscription request . The client security credentials may be implemented as a digital signature in a public key infrastructure a security token or any other security data as will occur to those of skill in the art for authenticating the identity of the originator of the subscription request . Examples of security token may include those security tokens described in the web services specification entitled Web Services Security WS Security developed by IBM Microsoft and VeriSign or the web services specification entitled Web Services Trust Language WS Trust developed by IBM Microsoft VeriSign OpenNetworks Layer 7 Computer Associates BEA Oblix Reactivity RSA Security Ping Identity and Actional.

In the method of brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device also includes authorizing the message receiving device to receive application messages from the message transmitting device on the message stream . Authorizing the message receiving device to receive application messages from the message transmitting device on the message stream according to the method of may be carried out by identifying the privileges associated with the authenticated message receiving device in dependence upon an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated message receiving devices requesting to receive data from a message transmitting device. In the example of the authorization policy associates privileges with an authenticated message receiving device identifier . The authenticated message receiving device identifier represents a message receiving device authenticated by a stream administration server. The privileges represent the set of application messages permissible for an authenticated message receiving device identified by the associated authenticated message receiving device identifier to receive from a message transmitting device. Different authenticated message receiving devices may have difference privileges. Although the authorization policy depicted in associates individual authenticated users with certain privileges such a depiction is for explanation and not for limitation. The authorization policy may in fact grant privileges on the basis of a message receiving device s membership in a group or on any other basis as will occur to those of skill in the art.

Brokering by a stream administration server establishment of a message stream from the message transmitting device to the message receiving device according to the method of also includes providing to the transport engine of the message receiving device the transport layer constraint . The transport layer constraint represents a constraint on application messages to be received by the message receiving device from a message transmitting device. The transport layer constraint specifies the characteristics of the application messages which a message receiving device is authorized to receive from a message transmitting device. The transport layer constraint is so called because it is applied to the application messages by a software component operating in the transport layer of the network protocol stack as opposed to being applied by a software component operating in the application layer. In a financial market data environment for example transport layer constraints may specify that a particular authenticated message receiving device is authorized to receive ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that include the best bid and best ask for the IBM option on the CBOE.

In the method of providing to the transport engine of the message receiving device the transport layer constraint may be carried out by returning the transport layer constraint to a message receiving device in response to a function call by a stream administration library that provided the subscription request . Providing to the transport engine of the message receiving device the transport layer constraint according to the method of may also be carried out by returning data to the message receiving device from which the message receiving device may derive the transport layer constraint . For example the message receiving device may be provided the topic of the application messages that the message receiving device is authorized to receive and the message receiving device may then derive the transport layer constraint as a hash value of the received topic. The stream administration server may provide the transport layer constraint to the transport engine in the message receiving device directly from the stream administration server or indirectly from the stream administration server through messaging middleware of the message receiving device. The transport layer constraint may be stored in a constraints table not shown in the transport engine. Such a constraints table may be used by the transport engine as a convenient data structure for storing multiple transport layer constraints.

The method of includes receiving an application message in a transport engine of a message receiving device from a message transmitting device. The application message represents a quantity of data that includes one or more data fields such as for example numeric or textual information images encrypted information computer program instructions and so on. The application message is capable of being passed from a message transmitting device to a message receiving device. As mentioned above in a financial market data environment a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Receiving an application message in a transport engine of a message receiving device from a message transmitting device according to the method of may be carried out by receiving transport packets through the message stream from the message transmitting device and unencapsulating the application messages from the received transport packets.

In the example of the application message has a message contents label and a collision indicator . The message contents label represents contents of the application message . The message contents label of may be implemented as a hash value of a particular field in the application message calculated using a hashing algorithm. In a financial market data environment the particular field in an application message or tick used to calculate the message contents label may be the topic field. The collision indicator of specifies whether the message contents label represents different contents in at least one other application message. If the message contents label in fact represents different contents in at least one other application message then a label collision exists. A label collision may occur because the message contents label is typically implemented as a hash value checksum or some other value derived from the contents of the application message. Often with algorithms such as a hashing algorithm used to generate a message contents label there exists the possibility that label collisions will occur over the range of inputs for the algorithm. A label collision occurs when two different inputs to the algorithm produce the same message contents label. In a financial market data environment for example a collision indictor for an application message may represent whether the message contents label for the application message unambiguously corresponds to a single value for the topic field or whether the message contents label corresponds to more than one value for the topic field.

The method of includes determining by the transport engine of the message receiving device whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label . As mentioned above the transport layer constraint represents a constraint on application messages to be received by the message receiving device from a message transmitting device. The transport layer constraint of may be implemented as a hash value calculated from one or more data fields in the application message . In a financial market data environment for example the transport layer constraint may be implemented a hash value calculated from the topic field.

Determining by the transport engine of the message receiving device whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label according to the method of may be carried out by comparing the message contents label to the transport layer constraint . If the message contents label matches the transport layer constraint then the contents of the application message satisfy the transport layer constraint . The contents of the application message do not satisfy the transport layer constraint however if the message contents label matches the transport layer constraint .

The method of includes discarding the application message if the contents of the application message do not satisfy the transport layer constraint . If the contents of the application message do not satisfy the transport layer constraint then the message receiving device is not authorized to receive the application message in the application layer of the device.

The method of includes providing by the transport engine of the message receiving device the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint . Providing by the transport engine of the message receiving device the application message and the collision indicator to messaging middleware of the message receiving device according to the method of may be carried out by passing a pointer to the data structures storing the application message and the collision indicator to the messaging middleware through an API that implements data communication between the messaging middleware and the transport engine.

The method of also includes administering the application message by the messaging middleware of the message receiving device in dependence upon the collision indicator . Administering the application message by the messaging middleware of the message receiving device in dependence upon the collision indicator according to the method of may be carried out by determining whether a label collision for the application message exists in dependence upon the collision indicator and providing the application message to an application of the message receiving device without filtering the application message in the messaging middleware if a label collision for the application message does not exists as discussed below with reference to . Administering the application message by the messaging middleware of the message receiving device in dependence upon the collision indicator according to the method of may be carried out by determining whether a label collision for the application message exists in dependence upon the collision indicator determining whether the contents of the application message satisfy a middleware layer constraint if a label collision for the application message exists and administering the application message in dependence upon the determination whether the contents of the application message satisfy the middleware layer constraint as discussed below with reference to .

For further explanation sets forth a flowchart illustrating a further exemplary method of filtering application messages in a high speed low latency data communications environment in a high speed low latency data communications environment according to embodiments of the present invention. The method of is similar to the method of . That is the method of includes receiving an application message in a transport engine of a message receiving device from a message transmitting device determining by the transport engine of the message receiving device whether contents of the application message satisfy a transport layer constraint in dependence upon the message contents label providing by the transport engine of the message receiving device the application message and the collision indicator to messaging middleware of the message receiving device if the contents of the application message satisfy the transport layer constraint and administering the application message by the messaging middleware of the message receiving device in dependence upon the collision indicator .

The method of is also similar to the method of in that the method of includes discarding the application message if the contents of the application message do not satisfy the transport layer constraint . In the example of the application message has a message contents label and a collision indicator . The message contents label represents contents of the application message. The collision indicator specifies whether the message contents label represents different contents in at least one other application message.

Administering the application message by the messaging middleware of the message receiving device in dependence upon the collision indicator according to the method of includes determining whether a label collision for the application message exists in dependence upon the collision indicator . As mentioned above a label collision exists when a single message contents label represents different contents from one application message to another. A label collision may occur because the message contents label is typically implemented as a hash value checksum or some other value derived from the contents of the application message. Often with algorithms such as a hashing algorithm used to generate a message contents label there exists the possibility that label collisions will occur over the range of inputs for the algorithm. A label collision occurs when two different inputs to the algorithm produce the same message contents label. That is a label collision occurs when the message contents label represents different contents from one application message to another.

In the method of determining whether a label collision for the application message exists in dependence upon the collision indicator may be carried out by reading the value for the collision indicator for the application message . In the example of the collision indicator for the application message may be implemented as a Boolean flag that specify whether the message contents label for the message represents different contents in at least one other application message. A value of TRUE may indicate that the message contents label for the message represents different contents in at least one other application message. That is a value of TRUE may indicate that a label collision exists. A value of FALSE may indicate that the message contents label for the message does not represent different contents in at least one other application message. That is a value of FALSE may indicate that a label collision does not exist. The collision indicator may be set by the message transmitting device that calculates the message contents label for the application message as discussed in more detail below with reference to .

The method of includes providing the application message to an application of the message receiving device without filtering the application message in the messaging middleware if a label collision for the application message does not exist. Providing the application message to an application of the message receiving device without filtering the application message in the messaging middleware if a label collision for the application message does not exist according to the method of may be carried out by passing the application message or a pointer to the application message to the application of the message receiving device through an API implementing data communications between the application and the messaging middleware. Providing the application message to an application of the message receiving device is performed without filtering the application message in the messaging middleware according to the method of in that the contents of the application message are not tested in the messaging middleware layer to determine whether contents of the application message satisfy a messaging middleware layer constraint. The method of also includes determining whether the contents of the application message satisfy a middleware layer constraint if a label collision for the application message does in fact exist. The middleware layer constraint represents a constraint on application messages to be provided to application software installed on the message receiving device. The middleware layer constraint specifies the characteristics of the application messages which application software installed on the message receiving device is authorized to receive from the messaging middleware of the subscribing client device. In a financial market data environment the middleware layer constraint may be implemented as a value for the topic field in a financial market data tick. The middleware layer constraint is applied to the application messages by a software component such as messaging middleware operating between the transport layer and the application layer of the network protocol stack as opposed to being applied by a software component operating in the application layer.

Determining whether the contents of the application message satisfy a middleware layer constraint if a label collision for the application message does in fact exist according to the method of may be carried out by comparing the contents of the application message to the middleware layer constraint . If the contents of the application message match the middleware layer constraint then the contents of the application message satisfy a middleware layer constraint . The contents of the application message do not satisfy a middleware layer constraint however if the contents of the application message do not match the middleware layer constraint . For example in a financial market data environment the messaging middleware may determine whether the contents of the application message satisfy a middleware layer constraint by comparing the value for the topic field in the application message with the value for the topic field specified in the middleware layer constraint as an authorized message topic for the application of the message receiving device to receive from a message transmitting device. Determining whether the contents of the application message satisfy a middleware layer constraint if a label collision for the application message as described above advantageously provides the ability to filter out application messages for which a message receiving device is not authorized to receive when those messages penetrated through the transport layer due to a label collision. Readers will note however that the messaging middleware only determines whether the contents of the application message satisfy a middleware layer constraint when the collision indicator specifies that a label collision exists. Using the collision indicator the exemplary method of advantageously avoids the overhead of filtering application message in the messaging middleware layer when a label collision does not exist.

The method of includes administering the application message in dependence upon the determination whether the contents of the application message satisfy the middleware layer constraint . Administering the application message in dependence upon the determination whether the contents of the application message satisfy the middleware layer constraint according to the method of may be carried out by providing the application message to an application of the message receiving device if the contents of the application message satisfy the middleware layer constraint . Administering the application message in dependence upon the determination whether the contents of the application message satisfy the middleware layer constraint according to the method of may be carried out by discarding the application message if the contents of the application message do not satisfy the middleware layer constraint .

As mentioned above the collision indicator for an application message may be set by the message transmitting device that calculates the message contents label for the application message. Typically the collision indicator and the message contents label may then be transmitted along with the application message to the message receiving device. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of filtering application messages in a high speed low latency data communications environment in a high speed low latency data communications environment according to embodiments of the present invention that includes setting by the messaging middleware of the message transmitting device the collision indicator for the application message .

Prior to setting the collision indicator for the application message however the method of includes receiving in messaging middleware of the message transmitting device from a conversion application of the message transmitting device the application message for transmission to the message receiving device. The conversion application is a software component installed on the message transmitting device that converts application messages having a first format received on a message transmitting device input stream from a feed source to application messages having a second format for transmission to a message receiving device on a message transmitting device output stream. In the method of the messaging middleware of the message transmitting device may receive the application message from the conversion application by receiving a copy of the application message or a pointer to the application message when the conversion application invokes a function of the messaging middleware API.

The method of also includes retrieving by the messaging middleware of the message transmitting device the contents of the application message . The message contents represent values from one or more of the message fields in the application message . Messaging middleware of the message transmitting device may retrieve the contents of the application message by reading values directly from one or more message fields of the application message using a message model that describes the location of the message fields in the message . Rather than reading a value directly from a message field of the application message messaging middleware may also retrieve the contents of the application message by passing the application message and a message field name to a function of a messaging library on the message transmitting device and receiving in return the value from the message field of the application message identified by the message field name.

As mentioned above the method of includes calculating by the messaging middleware of the message transmitting device a message contents label in dependence upon the retrieved contents of the application message . The messaging middleware of the message transmitting device may calculate a message contents label according to the method of by concatenating the message contents together and executing a hash algorithm over the concatenated message contents. The result calculated using the hash algorithm may be implemented as the message contents label . In the example of the fields of the application message retrieved by the message transmitting device and used to calculate the message contents label correspond to the message fields specified by the transport layer constraint or any middleware layer constraint used to filter the application message. In a financial market data environment the contents may be implemented as the value from the topic field of the application message.

The method of also includes setting by the messaging middleware of the message transmitting device the collision indicator for the application message in dependence upon the message content label and a mapping between contents of application messages and message contents labels. As mentioned above the message contents label represents contents of the application message and the collision indicator specifies whether the message contents label represents different contents in at least one other application message. The mapping is a data structure that represents the relationships between contents of application messages and message contents labels. That is the mapping associates a particular message contents label with the corresponding message contents used to calculate the particular message contents label. Although most message contents labels will have a one to one relationship with the message contents used to calculate the message content labels when a label collision exists for a particular message contents label the message contents label will have a relationship with more than one message contents because more than one message contents result in the same message content label. That is this one to many relationship results because two different message contents may result in the same message contents label when the message contents label is calculated using a hashing algorithm checksum algorithm or some other algorithm for deriving value based on the contents of an application message. The collision indicator for the application message may be implemented as a Boolean flag such that a value of TRUE indicates that a label collision exists for the message contents label for the application message and a value of FALSE indicates that a label collision does not exist for the message contents label for the application message .

In the method of setting by the messaging middleware of the message transmitting device the collision indicator for the application message in dependence upon the message content label and a mapping between contents of application messages and message contents labels may be carried out by scanning the mapping to determine whether the message contents label is contained in the mapping and setting the collision indicator to FALSE if the message contents label is not contained in the mapping . If the message contents label is not contained in the mapping then the message contents label only has a relationship with one message contents the message contents used to calculated the message contents label . Setting the collision indicator for the application message may also be carried out according to the method of by scanning the mapping to determine whether the message contents label is contained in the mapping and setting the collision indicator to FALSE if the message contents label is contained in the mapping and only has a relationship with contents that match the contents retrieved from the application message . If the message contents label is contained in the mapping and has a relationship with contents that do not match the contents retrieved from the application message setting the collision indicator for the application message may also be carried out according to the method of by setting the collision indicator to TRUE to indicate that the message contents label represents different contents in at least one other application message.

The method of also includes transmitting by a transport engine of the message transmitting device the application message the message contents label and the collision indicator to the message receiving device. The transport engine of the message transmitting device may transmit the application message the message contents label and the collision indicator to the message receiving device according to method of by prepending the message contents label and the collision indicator to the application message encapsulating the message contents label the collision indicator and the application message into one or more transport packets and transmitting the transport packets to a transport engine in the message receiving device. Transmitting the message contents label and the collision indicator to the message receiving device advantageously allows the message receiving device to filter application messages in the transport layer based on the contents of the application message without having to examine the actual contents of the application messages in the transport layer. By removing the need to examine the actual contents of the application messages and providing the filtering functionality in the transport layer of the message receiving device based on a message contents label and a transport layer constraint filtering application messages may be effectively carried out in a high speed low latency data communications environment.

The method of also includes determining by the messaging middleware of the message transmitting device whether a relationship between the contents of the application message and the message contents label is represented in the mapping between contents of application messages and message contents labels. Determining by the messaging middleware of the message transmitting device whether a relationship between the contents of the application message and the message contents label is represented in the mapping according to the method of may be carried out by scanning the mapping to identify whether the message contents label is associated in the mapping with the contents retrieved from the application message . If the message contents label is associated in the mapping with the contents retrieved from the application message then the relationship between the contents of the application message and the message contents label is represented in the mapping between contents of application messages and message contents labels. If the message contents label is not associated in the mapping with the contents retrieved from the application message then the relationship between the contents of the application message and the message contents label is not represented in the mapping between contents of application messages and message contents labels.

The method of also includes processing the next application message if the relationship between the contents of the application message and the message contents label is represented in the mapping . If the relationship between the contents of the application message and the message contents label is represented in the mapping then the mapping is already updated for use in calculating the collision indicator of the next application message received from the conversion application of the message transmitting device.

The method of includes adding by the messaging middleware of the message transmitting device the relationship between the contents of the application message and the message contents label to the mapping between contents of application messages and message contents labels if the relationship between the contents of the application message and the message contents label is not represented in the mapping . Adding by the messaging middleware of the message transmitting device the relationship between the contents of the application message and the message contents label to the mapping according to the method of may be carried out by associating the contents of the application message with the message contents label in the mapping between contents of application messages and message contents labels. Adding the relationship between the contents of the application message and the message contents label to the mapping advantageously updates the mapping for use in calculating the collision indicator of the next application message received from the conversion application of the message transmitting device.

The above description of filtering application messages in a high speed low latency data communications environment according to embodiments of the present invention is described using a single message stream between the message receiving device and the message transmitting device for data communication. Readers will note however that implementing data communication between the message transmitting device and the message receiving device using a single message stream is for explanation only and not for limitation. In other embodiments of the present invention multiple message streams may be used to transmit application messages from the message transmitting device to the message receiving device. In fact using multiple message streams may reduce the total number of label collisions that exist in the system because label collisions typically occur only on a per stream basis. Label collisions typically occur only on a per stream basis because in multiple stream systems the message contents label may be composed of both a stream identifier and a hash value representing the message contents of an application message. Combining a stream identifier with a hash value representing the message contents eliminates label collisions from occurring between two application message on different streams because the stream identifier portion of the message contents label ensures the labels for the two message will always be different. In an embodiment of the present invention which implements multiple message streams therefore the total number of label collisions in the system may be reduced because label collisions that would have occurred from transmitting application messages on the same stream can be eliminated when the application messages are transmitted over separate message streams.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for filtering application messages in a high speed low latency data communications environment. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

