---

title: User interface annotations
abstract: Some embodiments of user interface annotations have been presented. In one embodiment, comments are retrieved from a database coupled to a client machine executing an application program, wherein subjects of the comments comprise at least one of a graphical user interface (GUI) of the application program and one or more user interface (UI) elements in the GUI. Then annotations of the comments are presented on the GUI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099673&OS=08099673&RS=08099673
owner: Red Hat, Inc.
number: 08099673
owner_city: Raleigh
owner_country: US
publication_date: 20070226
---
Embodiments of the present invention relate to user interface and more specifically to annotating a user interface and elements within the user interface.

Today many application programs provide user interface particularly graphical user interface GUI which typically include a set of user interface elements e.g. buttons scroll bars drop down list input fields etc. . These application programs are hereinafter referred to as the core applications. Sometimes users of the core applications may uncover an error in the user interface and or the user interface elements. Further the users may desire to make a suggestion on the user interface and or the user interface elements such as how to improve a particular user interface element.

Conventionally the users report the error found or submit the suggestion to a vendor of the core application using a reporting application separate from the core application. For example the users may send an electronic mail reporting the error found to the vendor. However the conventional approach suffers from many disadvantages. First it is typically inconvenient for the users to invoke a separate reporting application to report the error and or the suggestion and thus the users are typically unenthusiastic about reporting errors and or submitting suggestions. Further the users may submit duplicate error reports and or suggestions because one user generally has no knowledge of other users submissions. As a result a commonly encountered error in the user interface may be reported multiple times by different users. Valuable program development resources including labor and time are wasted in reviewing duplicate error reports and or suggestions.

Described herein are some embodiments of user interface annotations. In one embodiment comments are retrieved from a database coupled to a client machine executing an application program. An application program also simply referred to as an application generally includes a set of instructions which when executed by at least one processing device causes the processing device to perform one or more tasks. The comments as described herein generally refer to user feedback on a user interface and or user interface elements where the feedback may be in the form of text a selection of one or more values from a predefined list of values etc. Subjects of the comments may include a graphical user interface GUI of the application program e.g. a browser window and or one or more user interface UI elements in the GUI e.g. a Stop button in the browser window a scroll bar in the browser window etc. . There are many different types of comments such as reports on errors found in the user interface and or the user interface elements suggestions on how to use the user interface and or the user interface elements suggestions on how to improve the user interface and or the user interface elements etc. After retrieving the comments annotations of the comments are presented on the GUI.

In some embodiments an annotation of a comment includes a representation of the comment which may include one or more graphic and or textual components e.g. an icon a symbol an alphanumeric character etc. . Alternatively the annotation may include the entire comment. In some embodiments there is one annotation per comment. Alternatively there is one annotation per type of comments. For example a first icon may be assigned to represent error reports and a second icon may be assigned to represent suggestions. Further the first icon may include the number of error reports on a particular user interface element e.g. a flag with the number of error reports displayed on the flag .

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

Note that any or all of the components and the associated hardware illustrated in may be used in various embodiments of the system . However it should be appreciated that other configurations of the system may include more or fewer devices than those shown in .

Each of the application programs and generate a GUI and or user interface elements. Users of the application programs and may have comments on the GUI and or the user interface elements. Various user interface controls e.g. buttons softkeys pop up windows with text fields etc. are provided to allow the users to input their comments. For example to input a comment a user using the client machine may actuate a user interface control e.g. by right clicking a mouse to invoke a pop up window having a text field to receive the comment. The user may enter the comment in text into the text field. The comment entered may be stored in the comment database .

The comment is stored in the comment database with other comments on the GUI and or the user interface elements. For example the user or another user previously used the application on client machine could have added some comments on the GUI and or the user interface elements. These comments are also stored in the comment database . In another example the applications and are instances of the same application and the user or another user using the application on client machine could have already added some comments on the GUI and or the user interface elements via the client machine . These comments are also stored in the comment database .

In some embodiments the client machines and accesses the comment database directly by sending queries to the comment database . Alternatively the client machines and may access the comment database via the database management server . The client machines and may send requests to add comments to modify comments to retrieve comments etc. to the database management server . The database management server then composes queries to access the comment database in order to satisfy the requests. In response to a request to retrieve comments the database management server may return comments retrieved from the comment database to the requesting client machine.

Since the comment database is accessible by multiple client machines e.g. the client machines and a user on one client machine may access comments from another user possibly entered using another client machine. In response to user requests the client machines retrieve comments from the comment database and present the comments on the GUI. For example a comment on a user interface element may be displayed at or near the user interface element to allow users to easily view and associate the comment with the user interface element.

In some embodiments annotations of the comments are generated and presented on the GUI. For example an annotation of a comment on a button in the GUI may be overlaid on the button or presented near the button. As mentioned above the annotations of the comments include representations of the comments such as an icon a symbol a flag an alphanumeric character the entire comment etc. or any combination of the above. It is convenient for users to view add or modify the comments when the annotations of the comments are presented along with the GUI and or the corresponding user interface elements for many reasons. For instance the users do not have to go back and forth between a display of the comments and the GUI. Further the users may readily associate a comment with the associated user interface element because the annotation of the comment is displayed at or near the associated user interface element. Since the users may view all the comments on a user interface element readily including comments added by other users the users may avoid entering duplicate comments.

In some embodiments the comment database stores the comments according to a predefined comment database schema. The comment database schema may be modifiable. In addition to the comments other information associated with the comments may be stored in the comment database such as a unique identification ID of each comment severity of errors desirability of incorporating a suggestion types of errors and or suggestions etc. Further the unique ID of each comment may remain consistent between multiple invocations of the application program from different users on different client machines and between different versions of the same applications.

In some embodiments information about the user interface elements is stored in a resource file during development of the application programs and . Each of the user interface elements is typically assigned a unique or distinctive ID so that the application program may distinctively identify the user interface element among a set of user interface elements and may track events generated by the user interface element. Depending on the particular operating system OS of the client machine on which an application program is developed or is executed this unique ID may be retrieved from the application program s resource file. Alternatively this unique ID may be retrieved by using application programming interfaces APIs to access the OS.

Note that the above annotation mechanism may be part of the application programs and or . Alternatively the above annotation mechanism may be implemented using an independent annotation program without modifying the source code of the application programs and . In some embodiments the user interface element selected by the user is determined using data exposed by the OS. Such data may include a message from the OS. The annotation program may intercept the message to determine which user interface element the user has selected. Then the independent annotation program displays annotations of comments on the selected user interface element at or near the user interface element. Thus the source code of the application programs and may not have to be modified in order to provide annotations of comments on the GUI. One embodiment of a functional block diagram of an annotation program is illustrated in .

By storing comments from different client machines in the comment database a user can access comments from others and thus may avoid entering duplicate comments. Further it is sometimes helpful for users to view other users comments such as suggestions on how to use the GUI and or user interface elements. In other words the users may share their comments on the GUI and or user interface elements using the above approach. Application developers may also readily access comments on the GUI from different users and or different client machines making it convenient for the developer to review the comments. As a result application development may become more efficient.

In some embodiments an application program e.g. the application program in is being executed on the computing device as well. In the following discussion the application program is referred to as the core application. The core application provides a GUI which may include a set of user interface elements. In some embodiments the user interface elements in the GUI are implemented as a library loaded into the core application s address space in a storage device of the client machine . Further the user interface changes and the user interface behavior may be implemented using this library.

In some embodiments the annotation program provides at least two operating modes. A first operating mode is a normal operation mode without annotations on the core application s GUI. A second operating mode is an annotation mode in which annotations of comments are present on the core application s GUI. Users may invoke the annotation mode before and or during execution of the core application. For instance a user may start execution of the core application and the core application s GUI is displayed during the normal course of execution. As the user interacts with the core application the user may desire to make a comment on the core application s GUI and or the user interface elements of the core application s GUI e.g. to report an error to make a suggestion etc. . The user may request to enter the annotation mode to add a comment. For example the user may select the user interface element of interest such as by pointing and clicking a cursor at the user interface element of interest. Then the user may actuate a user interface control e.g. by right clicking a mouse to submit the request to the annotation module which causes the GUI module to create an information collection dialog tool such as a dialog box having a text field. The user may enter the comment via the information collection dialog tool. The annotation program receives the comment and sends the comment to a database e.g. the comment database in using the database access module and the network adapter .

In some embodiments the annotation module further includes code to allow the user to view comments on the GUI and or the user interface elements overlaid on the GUI. In response to a user request to view the comments the database access module retrieves comments on the GUI and the user interface elements from the database. As discussed above the comments retrieved may include comments from other users and or other client machines. The annotation module causes the GUI module to generate annotations of the comments retrieved and to present the annotations on the core application s GUI and or the user interface elements. For example drawing events delivered to the core application are intercepted. After the GUI of the core application has been drawn the annotation module causes the GUI module to draw the annotations e.g. icons on top of the core application s GUI. Alternatively the annotation module may implement a substantially transparent window overlaid on top of the core application s GUI. The GUI module may then draw the annotations in the transparent window such that the annotations are displayed on or near the corresponding user interface elements in the core application s GUI.

In one example the core application is an Internet browser. The GUI of the Internet browser is a browser window having various user interface elements including a Stop button. Suppose a user finds that the Stop button sometimes does not stop a page from loading as expected. The user may request to enter the annotation mode to view comments on the browser and the user interface elements of the browser. In response to the request the annotation module causes the database access module to retrieve the comments including all the errors reported on the user interface of the browser. The annotation module then generates annotations for the comments retrieved and causes the GUI module to show the annotations of the comments on the browser window. For instance a red tag may be displayed on the browser window for each error reported. The user may see some red tags around the Stop button and or some on other user interface elements of the browser e.g. the Reload button the scroll bar etc. . Further a pop up window displaying the text of the error report or a summary of the error report may be displayed in response to the user actuating some user interface control e.g. right clicking a mouse while the cursor is at a red tag near the Stop button .

Facilitating the viewing and entry of comments on the GUI and or the user interface elements is particularly useful for application program development. Users are more likely to provide feedback on the GUI and or the user interface elements when it is easy and convenient to do so. User feedback is important in correcting errors and improving the GUI.

Referring to a request to show comments on a GUI e.g. a browser window of an application is sent from a client machine executing the application to a database . The request may include one or more database queries e.g. a query written in Structured Query Language SQL with the unique identifications IDs of the GUI and the user interface elements if any of the GUI as parameters. In response to the request the database management server retrieves the comments on the GUI and the user interface elements from a comment database and sends the comments retrieved to the client machine . The client machine may present the comments on the GUI where comments on the user interface elements may be displayed at or near the corresponding user interface elements. Alternatively the client machine may generate annotations of the comments and present the annotations on the GUI at or near the corresponding user interface elements. Details of some embodiments of the generation and presentation of the annotations have been discussed above.

In response to a user request to add or update a comment on a particular user interface element or the GUI the client machine sends a request to add or to update the comment to the database . The request may include one or more database queries with the unique ID of the user interface elements as a parameter. Based on the request the database management server adds the comment or updates the comment. Then the database management server may send the added or updated comment to the client machine . The client machine may present the added or updated comment on the GUI. Alternatively the client machine may generate an annotation for the comment and present the annotation on the GUI.

Referring to processing logic receives comments on a GUI of an application program and user interface elements of the GUI from a database processing block . Processing logic may generate annotations for the comments processing block . For example processing logic may generate an icon for each comment. Then processing logic presents the annotations on the GUI processing block . For instance processing logic may display an annotation for a comment on a button of the GUI at or near the button. More details of the generation and presentation of the annotations have been described above.

Referring to processing logic creates a user interface control to allow users to add a comment on a GUI and or user interface elements of the GUI processing block . For example processing logic may create a button displayed on the GUI. A user may actuate the button to request adding a comment. Then the user may move a cursor to a user interface element of interest and right click a mouse at the user interface element to select the user interface element to comment on. Then processing logic may invoke a user dialog window having a text field to allow the user to enter the comment in the text field.

In response to the user request processing logic receives user input specifying a comment on the specified user interface element processing block . Processing logic further associates the comment with a distinctive identifier processing block . As such the comment may be identified with the distinctive identifier such as a unique number assigned to the comment . Processing logic stores the comment with the identifier in a database processing block . In some embodiments processing logic sends the comment with the distinctive identifier from a client machine to a database management server which stores the comment with the distinctive identifier in the database. Alternatively processing logic composes a database access instruction such as a query on a client machine using the distinctive identifier and the comment and then sends the database access instruction to the database directly from the client machine. The database management server or the client machine may retrieve the comment from the database later using the identifier.

In some embodiments a user may submit a request to add a comment on the user interface element by activating a user interface control such as a button integrated in the GUI or overlaid on the GUI . In response to the user request a pop up dialog window is generated. The pop up dialog window includes a text field in which the user may type in the comment. When the user is done typing the user may actuate the OK button in the pop up dialog window to add the comment. If the user wants to cancel the adding of the comment the user may actuate the Cancel button in the pop up dialog window . After the user has added the comment the annotation for the comment may be displayed on top of the user interface element .

In some embodiments a user may view the details of a comment using some user interface control. For example the user may move a cursor to the annotation corresponding to a comment of interest to cause the details of the comment of interest to be displayed on the GUI . For example referring to a cursor is moved to the annotation A to cause the details of the corresponding comment to be displayed on the GUI .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium also known as a machine readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media etc.

Thus some embodiments of user interface annotations have been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

