---

title: Operating PCI express resources in a logically partitioned computing system
abstract: Methods, systems, and products are disclosed for operating Peripheral Component Interconnect (‘PCI’) Express resources in a logically partitioned computing system that include: allocating, by a hypervisor installed on the computing system, a PCI Express adapter installed in the computing system to a logical partition of the computing system, including establishing a data communication path between a processor of the computing system and the PCI Express adapter, the data communication path including a link between a PCI Express root complex and the PCI Express adapter; and administering, by the hypervisor for the logical partition, the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07574551&OS=07574551&RS=07574551
owner: International Business Machines Corporation
number: 07574551
owner_city: Armonk
owner_country: US
publication_date: 20070323
---
The field of the invention is data processing or more specifically methods systems and products for operating Peripheral Component Interconnect PCI Express resources in a logically partitioned computing system.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

One area in which computer software has evolved to take advantage of high performance hardware is a software tool referred to as a hypervisor. A hypervisor is a layer of system software that runs on the computer hardware beneath the operating system layer to allow multiple operating systems to run on a host computer at the same time. Hypervisors were originally developed in the early 1970 s when company cost reductions were forcing multiple scattered departmental computers to be consolidated into a single larger computer the mainframe that would serve multiple departments. By running multiple operating systems simultaneously the hypervisor brought a measure of robustness and stability to the system. Even if one operating system crashed the others would continue working without interruption. Indeed this even allowed beta or experimental versions of the operating system to be deployed and debugged without jeopardizing the stable main production system and without requiring costly second and third systems for developers to work on.

A hypervisor allows multiple operating systems to run on a host computer at the same time by providing each operating system with its own set of computer resources. These computer resources are typically virtualized counterparts to the physical resources of a computing system. A hypervisor allocates these resources to each operating system using logical partitions. A logical partition is a set of data structures and services that enables distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers. Using a logical partition therefore a hypervisor provides a layer of abstraction between a computer hardware layer of a computing system and an operating system layer.

In addition to the software layer innovations in the computer hardware layer have also occurred in the subsystem that transfers data between components inside a computing system. Older data transfer subsystems included a computer bus that logically connect several components over the same set of wires and transfer data among components in parallel. Older data transfer subsystems included for example computer buses implemented according to the Peripheral Component Interconnect PCI or PCI eXtended PCI X specifications promulgated by the PCI Special Interest Group PCI SIG . Newer data transfer subsystems include a point to point connection between components that serves as a link for transmitting data serially. One implementation of such a data transfer subsystem includes a data transfer subsystem implemented according to the set of PCI Express PCIe specifications promulgated by the PCI Special Interest Group PCI SIG .

A PCI Express data transfer subsystem uses existing PCI programming and software concepts but is based on a different and much faster serial physical layer communications protocol. The physical layer consists not of a bus but of a network of serial interconnections extending to each PCI Express adapter from a PCI Express root complex. The PCI Express root complex is a computer hardware chipset that handles communications between the components of a computer system such as for example a computer processor RAM non volatile memory power management components the real time system clock PCI Express adapters and so on. The PCI Express root complex includes a host bridge for communicating with one or more computer processors. The PCI Express root complex also includes a number of ports that each provides data communication with a port on a PCI Express device such as for example a PCI Express switch or PCI Express adapter.

A connection between any two PCI Express ports is referred to as a link. A link consists of a collection of one or more lanes used for data communications between PCI Express devices. Each lane is a set of two unidirectional low voltage differential signaling pairs of transmission pathways such as for example traces along a motherboard. Because transmitting data and receiving data are implemented using separate differential pairs each lane allows for full duplex serial data communication of up to five gigabits of data per second with the potential for increased bandwidth as technology in the physical layer advances. The ability to combine several lanes together to form a link allows PCI Express technology to provide scalable bandwidth.

The increased performance offered by computing systems designed using PCI Express technology is readily apparent given the scalable high bandwidth capability afforded by PCI Express. As PCI Express becomes the data transfer subsystem implementation preferred by computer architects more and more computing systems will take advantage of the increased performance offered by PCI Express including logically partition computing systems. Readers will therefore appreciate that there is an ongoing need for improvement in the area of operating PCI Express resources in a logically partitioned computing system.

Methods systems and products are disclosed for operating Peripheral Component Interconnect PCI Express resources in a logically partitioned computing system that include allocating by a hypervisor installed on the computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system including establishing a data communication path between a processor of the computing system and the PCI Express adapter the data communication path including a link between a PCI Express root complex and the PCI Express adapter and administering by the hypervisor for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for operating PCI Express resources in a logically partitioned computing system according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a block diagram of automated computing machinery comprising an exemplary computing system for operating PCI Express resources in a logically partitioned computing system. PCI Express resources generally refer to any adapter switch link root complex or other structure or component operating according to the set of PCI Express specifications promulgated by the PCI SIG. The exemplary computing system of operates PCI Express resources in a logically partitioned computing system according to embodiments of the present invention as follows A hypervisor installed on the computing system allocates a PCI Express adapter installed in the computing system to a logical partition of the computing system which includes establishing a data communication path between a processor of the computing system and the PCI Express adapter. The data communication path includes a link between a PCI Express root complex and the PCI Express adapter. The hypervisor administers for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter . A PCI Express adapter is an adapter operating according to the set of PCI Express specifications.

The exemplary computing system of includes computer processors or CPUs as well as random access memory RAM . The RAM is connected through a high speed memory bus and a PCI Express root complex to processors and to other components of the exemplary computing system. Stored in RAM are logical partitions and a hypervisor . Each logical partition provides an execution environment for various applications and an operating system . An application is a set of computer program instructions implementing user level data processing.

The operating system of is system software that manages the resources allocated to the logical partition by the hypervisor . The operating system performs basic tasks such as for example controlling and allocating virtual memory prioritizing the processing of instructions controlling virtualized input and output devices facilitating networking managing a virtualized file system and so on. Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art.

In the example of the operating system utilizes several device drivers to interact with the various PCI Express adapters installed in the computing system . A device driver is computer software that provides interaction with a hardware device to an operating system or other application software. Because of the specialized role of a device driver device drivers are often hardware dependent and operating system dependent.

The hypervisor of is a layer of system software that runs on the computer hardware beneath the operating system layer to allow multiple operating systems to run on a host computer at the same time. The hypervisor provides each operating system with a set of computer resources using the logical partitions. For example the hypervisor provides processor resources to each partition by scheduling processor execution time on one or more processors to the operating system in each logical partition. A logical partition is a set of data structures and services provided to a single operating system that enables the operating system to run concurrently with other operating systems on the same computer hardware. In effect the logical partitions allow the distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers.

Although not specifically depicted in the hypervisor of is generally composed of a dispatchable portion and a non dispatchable portion. The dispatchable portion of the hypervisor generally operates as a hidden partition that executes in a manner similar to a logical partition. The dispatchable hypervisor however differs from other logical partitions in that it is a private hidden partition that does not generally support user level applications and has special authorization to control hardware resources. In addition the dispatchable hypervisor has its own private interface for communicating to the non dispatchable hypervisor that is not available to the logical partitions . The non dispatchable portion of the hypervisor is a supervisory agent that is non dispatchable and non relocatable because the non dispatchable hypervisor functions by accessing the physical address space. The non dispatchable hypervisor provides privileged mode processor functions that may be invoked by the dispatchable hypervisor hardware interrupts and calls from the logical partition to the hypervisor application programming interface API .

Together the dispatchable and the non dispatchable portions of the hypervisor in enforce logical partitioning between one or more operating systems by storing state values in various hardware registers and other structures which define the boundaries and behavior of the logical partitions . Using such state data the hypervisor may allocate memory to logical partitions route input output between input output devices and associated logical partitions provide processor related services to logical partition and so on. Essentially this state data defines the allocation of resources in logical partitions and the allocation is altered by changes the state data rather than by physical reconfiguration of hardware.

In the example of the hypervisor includes a PCI Express operations module . The PCI Express operations module of is a set of computer program instructions for operating PCI Express resources in a logically partitioned computing system according to embodiments of the present invention. The PCI Express operations module generally operates PCI Express resources in a logically partitioned computing system according to embodiments of the present invention by allocating a PCI Express adapter installed in the computing system to a logical partition of the computing system including establishing a data communication path between a processor of the computing system and the PCI Express adapter the data communication path including a link between a PCI Express root complex and the PCI Express adapter and administering for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter.

In some circumstances the operating system or device drivers may find it useful to reset or re synchronize the adapter by changing the state of the PCI Express link such as for example retraining or resetting the link. To relieve the operating system and the device drivers from administering transitions of the PCI express root complex and link hardware between running and error stopped states the PCI Express operations module presents abstracted runtime and abstracted error stopped states to the operating system and device drivers . The operating systems as a virtue of the methods and apparatus of the present invention need observe only the running and error stopped states of the PCI Express root complex and PCI Express link to the adapter instead of managing the actual configuration of the PCI express root complex and link hardware.

The PCI Express operations module may administer the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter by receiving a service request from a device driver operating in the logical partition for the PCI Express adapter the service request specifying an operation that retrains the link performing the operation specified in the service request including retraining the link and suppressing to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state a root complex error that results from retraining the link. The PCI Express operations module may also administer the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter by detecting an error in the PCI Express root complex for the PCI Express root complex the PCI Express adapter or the link the error causing the PCI Express root complex to place the PCI Express adapter in a stopped state determining whether the error is severe clearing the error in the PCI Express root complex if the error is not severe resetting the PCI Express root complex if the error is severe performing a hot reset of the link if the error is severe the hot reset maintaining data in sticky registers of the PCI Express adapter and recovering the PCI Express adapter from the stopped state in response to adapter recovery requests from a device driver operating in the logical partition for the PCI Express adapter.

Although the hypervisor the operating system the device driver and the logical partitions in the example of is shown in RAM readers will note that many portions of these components typically are also stored in non volatile memory. For example the hypervisor is typically implemented in firmware and shadowed in RAM to increase system performance and the operating system the device driver and the logical partitions may be stored in whole or in part on for example a disk drive .

The exemplary computing system of also includes a PCI Express root complex . The PCI Express root complex is a computer hardware chipset that handles communications between the components of a computing system such as for example a computer processors RAM non volatile memory power management components the real time system clock PCI Express adapters and so on. The PCI Express root complex of includes a host bridge for communicating with computer processors through processor bus . The PCI Express root complex also includes a number of ports that each provides data communication with a port on a PCI Express device such as for example a PCI Express switch or PCI Express adapter.

In the example of the PCI Express root complex connects to various PCI Express adapters through PCI Express links or simply links. A link establishes a data communications path between a port of the PCI Express root complex and a port of one of the PCI Express adapters. A link consists of a collection of one or more lanes used for data communications between PCI Express devices. Each lane is a set of two unidirectional low voltage differential signaling pairs of transmission pathways such as for example traces along a motherboard. As mentioned above each lane allows for full duplex serial data communication of up to five gigabits of data per second with the potential for increased bandwidth as technology in the physical layer advances. The ability to combine several lanes together to form a link allows PCI Express technology to provide scalable bandwidth. Current PCI Express specifications allow for links composed of one lane two lanes four lanes eight lanes sixteen lanes and thirty two lanes.

The exemplary computer of also includes PCI Express disk drive adapter coupled through the link with the PCI Express root complex to processors and other components of the exemplary computer . Disk drive adapter connects non volatile data storage to the exemplary computer in the form of disk drive . Other non volatile data storage may be implemented for a computer as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary computer of includes one or more PCI Express input output I O adapters coupled through link with the PCI Express root complex to processors and other components of the exemplary computer . PCI Express I O adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary computer of includes a PCI Express video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. The PCI Express video adapter is connected to processors and other components of the exemplary computer through link with the PCI Express root complex .

The exemplary computer of includes a PCI Express communications adapter coupled through link with the PCI Express root complex to processors and other components of the exemplary computer . The PCI Express communications adapter provides data communications with other computers and provides data communications through data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful in the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

For further explanation sets forth a flow chart illustrating an exemplary method for operating Peripheral Component Interconnect Express resources in a logically partitioned computing system according to embodiments of the present invention. The method of includes allocating by a hypervisor installed on a computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system. As mentioned above a logical partition is a set of data structures and services provided by the hypervisor to the operating system layer that enables the operating system to run concurrently with other operating systems on the same computer hardware. The logical partition allows the hypervisor to simulate hardware in the hardware layer to system software in the operating system layer.

Allocating by a hypervisor installed on a computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system according to the method of may be carried out by establishing data structures for the logical partition that represent an adapter operating according to the set of PCI Express specifications that is installed in the computing system. The hypervisor provides data structures representing the PCI Express adapter to the logical partition to effect communication between the logical partition and the PCI Express adapter . As the hypervisor reads or writes values to the data structure representing the PCI Express adapter on behalf of a device driver operating in the logical partition corresponding values are read or written to registers in the PCI Express adapter . The data structures in the logical partition representing the PCI Express adapter in the example of may be used by the hypervisor to assign portions of a computer processor s memory space to the PCI Express adapter for memory map input output to assign virtualized interrupts to the device driver and so on.

In the example of allocating by a hypervisor installed on a computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system includes establishing a data communication path between a processor of the computing system and the PCI Express adapter . The data communications path is a channel of communications between the processor and the PCI Express adapter that includes a link between a PCI Express root complex and the PCI Express adapter . In the example of the link represents the link between the PCI Express root complex and the PCI Express adapter . Similar to the PCI Express adapter data structure the hypervisor may create data structures representing PCI Express root complex and the link that maintains state information about the root complex the link between the PCI Express root complex and the PCI Express adapter . As the hypervisor detects changes in the state of the root complex or the link the hypervisor updates the corresponding values in the data structure representing the root complex and the link .

In the method of the hypervisor may establish a data communication path between a processor of the computing system and the PCI Express adapter by initializing and synchronizing the PCI Express root complex and the link to a runtime state. The hypervisor may initialize and synchronize the PCI Express root complex and the link to a runtime state by setting values in the data structures of the hypervisor that represent the link and a root complex . These data structure may include methods that in turn modify values in the hardware which these data structures represent. After establishing a data communication path between a processor of the computing system and the PCI Express adapter the hypervisor may further allocate a PCI Express adapter installed in the computing system to a logical partition of the computing system according to the method of by scheduling processor execution time to the device driver operating in the logical partition to allow the device driver to instruct the processor to communicate with the PCI Express adapter .

The method of also includes administering by the hypervisor for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter . The hypervisor may administer the PCI Express root complex and the link for the logical partition according to the method of by receiving a service request from a device driver operating in the logical partition for the PCI Express adapter the service request specifying an operation that retrains the link performing the operation specified in the service request including retraining the link and suppressing a root complex error that results from retraining the link to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state as discussed in more detail below with reference to . The hypervisor may administer the PCI Express root complex and the link for the logical partition according to the method of by detecting an error in the PCI Express root complex for the PCI Express root complex the PCI Express adapter or the link the error causing the PCI Express root complex to place the PCI Express adapter in a stopped state determining whether the error is severe clearing the error in the PCI Express root complex if the error is not severe resetting the PCI Express root complex if the error is severe performing a hot reset of the link if the error is severe the hot reset maintaining data in sticky registers of the PCI Express adapter and recovering the PCI Express adapter from the stopped state in response to adapter recovery requests from a device driver operating in the logical partition for the PCI Express adapter as discussed in more detail below with reference to .

As mentioned above a hypervisor may administer the PCI Express root complex and the link between the root complex and the adapter by suppressing a root complex error that results from retraining the link to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for operating Peripheral Component Interconnect Express resources in a logically partitioned computing system according to embodiments of the present invention that includes suppressing a root complex error that results from retraining the link to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state.

The method of is similar to the method of . That is the method of includes allocating by a hypervisor installed on the computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system including establishing a data communication path between a processor of the computing system and the PCI Express adapter . The data communication path includes a link between a PCI Express root complex and the PCI Express adapter . The method of is also similar to the method of in that the method of includes administering by the hypervisor for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter .

Administering the PCI Express root complex and the link according to the method of includes receiving by the hypervisor a service request from a device driver operating in the logical partition for the PCI Express adapter . The service request of represents an instruction from the device driver to the hypervisor to perform a particular operation. In the example of the service request specifies an operation that retrains the link between the PCI Express root complex and the PCI Express adapter . Such a service request may include for example a request to reset the PCI Express adapter. Link retraining is a process specified by the PCI Express specification that involves link width and data rate negotiation locking bits and symbols for each lane in the link establishing lane polarity ordering the lanes within the link and so on. The hypervisor may receive a service request from a device driver operating in the logical partition for the PCI Express adapter according to the method of as a call by the device driver into the hypervisor through an API exposed by the hypervisor to the logical partition .

Administering the PCI Express root complex and the link according to the method of also includes performing by the hypervisor the operation specified in the service request including retraining the link . The hypervisor may perform the operation specified in the service request which includes retraining the link according to the method of by allocating processor execution time to the hypervisor to perform the requested operations. The hypervisor may retrain the link according to the method of by setting bit five of the link control register of the PCI Express capability structure for a PCI Express device to a value of 1 according to the PCI Express specification.

Administering the PCI Express root complex and the link according to the method of includes suppressing by the hypervisor to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state a root complex error that results from retraining the link . A stopped state for a PCI Express adapter is a state configured in the PCI Express root complex for the adapter such that all processor reads from the adapter result in a return value that signifies a possible error state such as for example FFFFFFFF all processor stores to the adapter are discarded and any communications originating from the adapter are aborted. A stopped state for a PCI Express adapter therefore effectively freezes memory mapped I O and direct memory access communications.

In the example of a root complex error represents an error in the PCI Express root complex which results from retraining the link . Retraining the link produces a root complex error because the root complex is typically configured to enter an error state and activate an interrupt when the link is retrained. Additional errors are produced in the root complex when communication with the PCI Express adapter is attempted while the link retraining occurs. Upon detecting a root complex error the PCI Express root complex may attempt to place the PCI Express adapter in the stopped state. The hypervisor may suppress the root complex error to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state according to the method of by masking the root complex error and suppressing root complex interrupts. Suppressing the root complex error to prevent the PCI Express root complex from placing the PCI Express adapter in a stopped state according to the method of advantageously maintains synchronization between the device driver and the PCI Express adapter without the device driver having to be aware of the state of the link. For example if the device driver issues a service request to the hypervisor to reset the PCI Express adapter the device driver is expecting to communicate with the adapter upon reset not recover the adapter from a stopped state that resulted from the link retraining that also occurs when the adapter is reset.

As mentioned above a hypervisor may administer the PCI Express root complex and the link between the root complex and the adapter by recovering the PCI Express adapter from a stopped state in response to adapter recovery requests from a device driver operating in the logical partition for the PCI Express adapter. For further explanation sets forth a flow chart illustrating a further exemplary method for operating Peripheral Component Interconnect Express resources in a logically partitioned computing system according to embodiments of the present invention that includes recovering by the hypervisor the PCI Express adapter from a stopped state in response to adapter recovery requests from a device driver operating in the logical partition for the PCI Express adapter .

The method of is similar to the method of . That is the method of includes allocating by a hypervisor installed on the computing system a PCI Express adapter installed in the computing system to a logical partition of the computing system including establishing a data communication path between a processor of the computing system and the PCI Express adapter . The data communication path includes a link between a PCI Express root complex and the PCI Express adapter . The method of is also similar to the method of in that the method of includes administering by the hypervisor for the logical partition the PCI Express root complex and the link between the PCI Express root complex and the PCI Express adapter .

Administering by the hypervisor for the logical partition the PCI Express root complex and the link according to the method of includes detecting by the hypervisor an error in the PCI Express root complex for the PCI Express root complex the PCI Express adapter or the link. The error of represents value in a register of the PCI Express root complex that is set when the PCI Express root complex the PCI Express adapter or the link generate an error such as for example a surprise down link error. The hypervisor may detect an error for the PCI Express root complex the PCI Express adapter or the link according to the method of by receiving an interrupt from the root complex indicating that an error as occurred and discovering the particular type of error by reading the error registers of the PCI Express root complex. The hypervisor may also detect an error for the PCI Express root complex the PCI express adapter or the link according to the method of by initiating a processor read from the registers for the PCI Express root complex or PCI Express link independent of and asynchronous to an interrupt signaling an error . The hypervisor may make these processor reads from the registers for the PCI Express root complex or PCI Express link in response to a request from an operating system or a device driver of the logical partition after the operating system or the device driver receives an error response value to a processor read from the adapter .

In the example of the error for the PCI Express root complex the PCI Express adapter or the link causes the PCI Express root complex to place the PCI Express adapter in a stopped state without resetting the root complex or the link. Placing the PCI Express adapter in a stopped state when the error for the PCI Express root complex the PCI Express adapter or the link occurs advantageously allows the present invention to encapsulate new error states defined according to the PCI Express specification that were not previously defined in the PCI or PCI X specification into a single stopped state that the hypervisor provides to the device driver while the hypervisor administers the root complex and the link. In such a manner the device driver does not need to be aware of the PCI Express root complex and PCI Express links and how to manage them in order to interface with the PCI Express adapter. Because device drivers designed according to the PCI or PCI X specification did not have access to state and error information regarding the root complex and links these device drivers may still be utilized in some embodiments of the present invention.

In the method of administering by the hypervisor for the logical partition the PCI Express root complex and the link also includes determining by the hypervisor whether the error is severe. The hypervisor may determine whether the error is severe according to the method of by identifying whether the error is signaled with a ERR COR ERR NONFATAL or ERR FATAL message. The ERR COR message is issued when the component or device detects a correctable error on the PCI Express interface and may indicate that the error is not severe. The ERR NONFATAL message is issued when the component or device detects a Non fatal uncorrectable error on the PCI Express interface and may indicate that the error is severe. The ERR FATAL message is issued when the component or device detects a Fatal uncorrectable error on the PCI Express interface and may indicate that the error is severe.

Administering by the hypervisor for the logical partition the PCI Express root complex and the link according to the method of includes clearing by the hypervisor the error in the PCI Express root complex if the error is not severe. The hypervisor may clear the error in the PCI Express root complex according to the method of by resetting any interrupts and error registers in the root complex so that these resources are ready to trap the next error. When the hypervisor clears the error in the PCI Express root complex because the error is not severe the hypervisor does not reset the root complex or perform a hot reset of the link .

In the method of administering by the hypervisor for the logical partition the PCI Express root complex and the link includes resetting by the hypervisor the PCI Express root complex if the error is severe. The hypervisor may reset the PCI Express root complex according to the method of by restoring values in the registers of the PCI Express root complex to their initial state after power to the root complex is cycled and setting values in a root complex data structure representing the root complex in the hypervisor to indicate that the root complex is being reset. Upon completion of the reset operation the hypervisor may set values in a root complex data structure representing the root complex in the hypervisor to indicate that the root complex is operational.

In the method of administering by the hypervisor for the logical partition the PCI Express root complex and the link includes performing by the hypervisor a hot reset of the link if the error is severe. A hot reset is a protocol reset that propagated in band across a link using a physical layer mechanism. The hot reset maintains data in sticky registers of the PCI Express adapter . A sticky register is a register that is not initialized or modified by hot reset according to the PCI Express specification. The registers of the PCI Express adapter may be defined as sticky using the attributes ROS RWS or RW1CS as described in the PCI Express Specification. The hypervisor may perform a hot reset of the link by instructing the PCI Express complex to transmit across the link two consecutive training sequence ordered sets with the hot reset bit of the training control field asserted to cause the link to enter the hot reset state. The hypervisor may further perform a hot reset of the link by setting values in a link data structure representing the link in the hypervisor to indicate that the link is in the hot reset state. Upon completion of the hot reset the hypervisor may set values in a link data structure representing the link in the hypervisor to indicate that the hot reset of the link has completed. Performing by the hypervisor a hot reset of the link according to the method of advantageously maintains the state of the PCI Express adapter expected by the device driver. This adapter state would be lost if a fundamental reset were performed.

In the method of administering by the hypervisor for the logical partition the PCI Express root complex and the link also includes suppressing by the hypervisor secondary link errors in the PCI Express root complex while performing the hot reset of the link. The secondary link errors represent errors that result from the hot reset of the link . Such secondary link errors may occur for example if the adapter attempts input output operations while the link is being reset. The hypervisor may suppress the secondary link errors in the PCI Express root complex according to the method of by masking the secondary link errors and suppressing any interrupts generated because of the secondary link errors. Suppressing by the hypervisor secondary link errors in the PCI Express root complex while performing the hot reset of the link according to the method of advantageously prevents generation of additional errors and interrupts that the hypervisor expects to occur due to the hot reset of the link.

Administering by the hypervisor for the logical partition the PCI Express root complex and the link according to the method of includes recovering by the hypervisor the PCI Express adapter from the stopped state in response to adapter recovery requests from a device driver operating in the logical partition for the PCI Express adapter . The adapter recovery requests are instructions from the device driver to the hypervisor to recover the adapter from the stopped state. The adapter recovery requests may be issued by the device driver to the hypervisor using function calls of an API reference numeral of provided by the hypervisor. As mentioned above a stopped state for a PCI Express adapter effectively freezes memory mapped input output and direct memory access communications. The hypervisor may recover the PCI Express adapter from the stopped state in response to adapter recovery requests from a device driver according to the method of by attempting to unfreeze the memory mapped input output so that the processor may access the adapter registers and allowing the device driver to determine whether the adapter status requires a fundamental reset or hot reset. If the device driver determines that the adapter status does not require a reset the hypervisor may recover the PCI Express adapter from the stopped state according to the method of by clearing any direct memory access freeze state in response to a request by the device driver. If the device driver determines that the adapter status requires a reset the hypervisor may recover the PCI Express adapter from the stopped state according to the method of by performing the required reset allowing the device driver to clear any adapter state and reinitialize the adapter and clearing any direct memory access freeze state in response to a request by the device driver.

While the hypervisor resets the root complex and performs the hot reset of the link the device driver may realize that the PCI Express adapter is no longer responding to the device driver. The device driver may request the status of the adapter from the hypervisor in an attempt to discover the reason that the adapter is not responding. For further explanation therefore sets forth a flow chart illustrating an exemplary method for recovering by the hypervisor the PCI Express adapter from the stopped state in response to requests from a device driver operating in the logical partition for the PCI Express adapter useful in operating Peripheral Component Interconnect Express resources in a logically partitioned computing system according to embodiments of the present invention that includes receiving by the hypervisor from the device driver a status request for the PCI Express adapter. The status request is a set of instructions issued to the hypervisor from the device driver that instruct the hypervisor to provide the current status of the PCI Express adapter. The hypervisor may receive a status request for the PCI Express adapter from the device driver according to the method of using function call of an API reference numeral of provided to the device driver by the hypervisor.

The method of also includes determining by the hypervisor whether the resetting of the PCI Express root complex and the performing of the hot reset of the link has completed. Readers will recall from above that the hypervisor maintains the current status of the root complex and the link in the data structures of the hypervisor that represent the root complex and the link respectively. The hypervisor therefore may determine whether the resetting of the PCI Express root complex and the performing of the hot reset of the link has completed according to the method of by retrieving the status of the root complex and the link from the data structures of the hypervisor that represent the root complex and the link respectively. If the status of the root complex and the link in the data structures of the hypervisor that represents the root complex and the link indicates that the root complex is currently being reset and the hot reset of the link is in progress then resetting of the PCI Express root complex and performing of the hot reset of the link has not completed. Resetting of the PCI Express root complex and performing of the hot reset of the link has completed however if the status of the root complex and the link in the data structures of the hypervisor that represents the root complex and the link indicates that the root complex and the link are operational.

The method of includes instructing by the hypervisor the device driver to delay adapter recovery requests for a predetermined period of time if the resetting of the PCI Express root complex and the performing of the hot reset of the link has not completed. The predetermined period of time represent a time period for the device driver to wait before attempting to recover the adapter from the stopped state by issuing adapter recovery requests to the hypervisor. The predetermined period of time may be a static value or dynamically calculated. For example the predetermined period of time may be dynamically calculated to increase in duration as the resetting of the PCI Express root complex and the performing of the hot reset of the link occurs over longer periods of time. While the resetting of the PCI Express root complex and the performing of the hot reset of the link occurs the device driver may make several status requests to the hypervisor . Each time the hypervisor receives a status request from the device driver the hypervisor may instruct the device driver to delay adapter recovery requests for a longer period of time to minimize the number of status requests issued by the device driver while the resetting of the PCI Express root complex and the performing of the hot reset of the link occurs. Instructing by the hypervisor the device driver to delay adapter recovery requests for a predetermined period of time according to the method of advantageously conserves system resources from being consumed by an excessive number of status requests from the device driver.

The method of also includes continuing by the hypervisor with PCI Express adapter recovery in response to the adapter recovery requests if the resetting of the PCI Express root complex and the performing of the hot reset of the link has completed. The hypervisor may continue with PCI Express adapter recovery in response to the adapter recovery requests according to the method of as described above for recovering the PCI Express adapter from the stopped state in response to requests from a device driver with reference to .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for operating PCI Express resources in a logically partitioned computing system. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

