---

title: Exposing common metadata in digital images
abstract: Common metadata exposure with digital images involves making image metadata types that are common across multiple image file formats accessible via an application programming interface (API). In an example embodiment, a browser exposes an image metadata API that may be called with reference to a preselected image metadata name. The browser determines an image metadata value that is associated with the preselected image metadata name from image metadata of a targeted image. When the image metadata value is returned to a caller of the image metadata API, the caller may consume or present the image metadata value in any manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775474&OS=08775474&RS=08775474
owner: Microsoft Corporation
number: 08775474
owner_city: Redmond
owner_country: US
publication_date: 20070629
---
Digital images from digital cameras and other sources are proliferating over the internet. They are being stored at different locations as well as being transferred to and from different devices. Digital images are also being shared in a variety of manners. A multitude of programs and internet based services exist to facilitate the use and enjoyment of digital images in these various situations. However such programs and internet based services fail to fully exploit the potential of having images in digital form.

Common metadata exposure with digital images involves making image metadata types that are common across multiple digital image file formats accessible via an application programming interface API . In an example embodiment a browser exposes an image metadata API that may be called with reference to a preselected image metadata name. The browser determines an image metadata value that is associated with the preselected image metadata name from image metadata of a targeted image. In another example embodiment a browser has access to a common image metadata mapping data structure that maps respective preselected image metadata names to respective metadata type identification tags for different image file formats. The image metadata of a targeted image may include mapped associations between respective metadata type identification tags and respective image metadata values for the targeted image.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

Existing internet based digital image services can store multiple images for each of multiple users. These images are stored by a server and are typically accessed by a user with a web browser. In operation a user through a web browser requests to view a number of images stored by the service at a web server. The web server retrieves the requested images from storage that is associated with the web server.

First the server identifies the images that the customer wants to view. Second the server software creates the header or beginning of a e.g. HyperText Markup Language HTML page. Third the server software creates the rest of the HTML page and it adds each requested image from the image storage. Fourth in the processes of creating the HTML surrounding each image the server software typically extracts some of the metadata fields like keywords from the image file and adds that metadata as static text to the HTML.

While the resulting web page display can satisfy basic consumer desires to view the image and a limited quantity of image metadata it has two primary problems. First the process does not scale well at the server. For an internet based service having millions of customers with thousands or even tens of thousands of images apiece the server can be required to perform billions of reads. A system in which the server performs processing as opposed to primarily storage has to scale in relationship to the number of users which is less cost effective than a system in which the processing is performed on the client. Secondly this approach reduces the flexibility offered to a web page developer when designing an image focused web page display. Specifically the interactive capabilities offered to the user of the web browser at a client device with respect to the displayed web page are extremely limited. For example the user cannot ask the web browser to display different image metadata or to change the image metadata without a complete round trip back to the server. That round trip may require the server to re generate the entire page with the requested metadata or may require the server to parse the image metadata and re send the parsed image metadata.

In contrast certain example embodiments as described herein involve a browser that includes an image metadata API. Script that runs on the browser at the client device can make calls to the image metadata API. An image metadata API call can reference a particular image metadata type for a targeted image using a preselected image metadata name. The image metadata API then returns to the script an image metadata value from the targeted image that is associated with the particular image metadata type. The browser can display the image metadata value in relation to the image in a displayed page. By way of example only a particular image metadata type for a given image file format of a targeted image may be associated with a preselected image metadata name in a common image metadata mapping data structure.

In an example embodiment a displayed page includes a displayed image and displayed image metadata that is related thereto. Which particular image metadata value or values that are associated with a given image are presented as part of displayed image metadata is controllable by scripting code that is running within a browser. By way of example only displayed page may comprise a web page an intranet page another network related page any page that may be displayed by a browser some combination thereof and so forth. More generally images and selective image metadata data may be presented via displaying on a display screen via printing on hard copy with a printer and so forth. A browser window may be manifested in hard copy by borders framing edges etc. around the printed images and printed image metadata data. Examples of image metadata are described herein below.

Although two combinations of displayed image and associated displayed image metadata are explicitly shown within browser window in fewer or more than two may alternatively be displayed. Also in addition to below and beside the displayed image displayed image metadata may be positioned elsewhere with respect to its associated displayed image metadata . Moreover image information may be displayed in a grid or other pattern separate from or intertwined with text and so forth. A displayed page may also include other information besides text displayed images and displayed image metadata .

In an example embodiment client and server communicate over network s . Network s may comprise by way of example but not limitation one or more of an internet an intranet a telephone network a public network a private network a wired network a wireless network some combination thereof and so forth. Communications between client and server such as those described herein below in the context of pages may be transmitted over network .

Display screen is coupled to and or integrated with client . Client includes at least one browser . Browser produces browser window which is displayed on display screen . Client may be realized as a personal computer e.g. workstation desktop notebook etc. an entertainment device e.g. audio visual player a television or a set top box therefor a personal digital assistant PDA a mobile phone or other portable device a gaming platform any device that is capable of running a browser some combination thereof and so forth. An example device implementation that may be used to realize a client and or a server is described herein below with particular reference to .

Browser may be implemented as a proprietary browser an open source browser and so forth. Browser may be a separate application or it may be embedded in or otherwise be a part of another application such as an operating system an internet or other communications suite and so forth. Examples of current browsers include but are not limited to INTERNET EXPLORER from MICROSOFT Corporation SAFARI from APPLE Inc. MOZILLA FIREFOX OPERA KONQUEROR NETSCAPE and so forth.

Server is coupled to and or integrated with image collection and other information . Image collection and other information may be implemented as separate collections of information or as a combined collection of information. They may be realized for example as one or more databases. These elements and may be configured in any manner. Example configurations include but are not limited to at least one web server a server farm one or more servers connected to a storage area network SAN a server and a locally attached non volatile memory unit some combination thereof and so forth.

In an example embodiment information from image collection and or other information may be served as one or more pages of information. Image collection includes information relating to images. Other information includes non image related information such as text. Image collection includes multiple image items . Image items of image collection may be organized in any manner.

Each image item may include image data and image metadata . Image data includes the data to render an image on a display screen. Image metadata is associated with image data . Image metadata contains one or more metadata values relating to the associated image data . Example metadata types include but are not limited to the file name of the image item the date and or time of the image data a size of the image item a height of the image data a width of the image data and so forth. Example attributes and characteristics of image item including an example data structure for image metadata are described further herein below with particular reference to .

In an example general operation browser at client sends to server over network a request for information. In response server produces e.g. constructs retrieves etc. a page using image collection and or other information . The page includes the requested information. The page may be produced in a markup language format. By way of example only a markup language format may comport with HTML MICROSOFT HyperText Markup Language MSHTML Standard Generalized Markup Language SGML Extensible Access Markup Language XAML Extensible HTML XHTML Extensible Markup Language XML and so forth.

The page is sent from server across network to client . Browser at client then causes the page to be displayed in browser window on display screen . The displayed view of the page can be manipulated at client by browser with script coding. In an example embodiment the page is received from server at client with both a markup language portion and a scripting portion. These page portions and the processing thereof are described further below with particular reference to .

In the drawings and are flow diagrams and respectively. Implementations of flow diagrams and may be realized for example as processor executable instructions. Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth. The acts of these flow diagrams may be performed in many different environments by a number of different devices and or with a variety of different browser configurations. Hence although the descriptions of certain blocks and the acts thereof reference other elements that are described herein they do so by way of example only. The order in which the methods are described is not intended to be construed as a limitation and any number of the described blocks can be combined augmented rearranged and or omitted to implement a respective method or an alternative method that is equivalent thereto.

In an example embodiment at block a server sends to a client a page that includes a markup language portion and a script portion. For example server may send page to client . At block the client receives from the server the page that includes the markup language portion and the script portion. For example client may receive from server a markup language ML portion and a script portion of page . Script portion can comport with any one or more of many existing or new scripting formats. Example scripting formats include but are not limited to JAVASCRIPT VBSCRIPT ECMASCRIPT and so forth.

At block a browser at the client parses the markup language portion to produce a document object model DOM for the page. For example browser at client may parse markup language portion to produce a DOM for page . For instance the markup tags of markup language portion may be transformed into objects of DOM .

At block the browser applies the script portion to the DOM. For example browser may execute scripting code of script portion on DOM . This may affect how and or what parts of page are displayed. At block the browser displays the DOM on a display screen. For example browser may display DOM as affected by script portion in a browser window on a display screen . As indicated by dashed arrow script portion can continuously repeatedly and or occasionally e.g. in response to user interaction alter how it is affecting the display of DOM in browser window .

Digital images are typically created stored and maintained in an image file format in accordance with some digital image standard. Digital image standards can be relatively proprietary relatively open and so forth. Example digital image standards include but are not limited to those that comport with a Joint Photographic Experts Group JPEG specification a JPEG Interchange Format JIF specification a Portable Network Graphics PNG specification a Tagged Image File TIF specification an Exchangeable Image File EXIF standard HD PHOTO WINDOWS MEDIA PHOTO from MICROSOFT Corporation and so forth. Many camera manufacturers and some digital imaging software companies also issue their own digital image standards. Additionally although two different files may share the same image file format they may still have different sub formats for the image metadata encoding. These sub formats can result when for example the files are created with different software and or devices. Thus image file formats may also embrace sub formats as well.

These digital image standards among other things specify how digital image metadata is to be configured and or organized. For example they can specify a metadata type identification tag that is associated with each type of metadata. Thus image metadata may include multiple respective metadata type identification tags that are each respectively associated with a metadata value. An example image metadata organization is described herein below with particular reference to .

Example metadata types which may have corresponding metadata type identification tags are listed below. However some digital image standards include different metadata types fewer total metadata types more total metadata types and so forth. For instance some standards define 10s some define 100s and some define 1000s or more of different image metadata types. Metadata type examples include but are not limited to camera manufacturer camera model compression type X resolution Y resolution time date ambient conditions e.g. lighting embedded sound global positioning system GPS coordinates and so forth. Furthermore metadata types of the various digital image standards can also include user added provided information such as author copyright information one or more keywords a voice annotation combinations thereof and so forth. It should be understood that metadata type refers to a kind of metadata as described above and not necessarily to a variable category.

Specifically metadata type identification tag is associated with image metadata value . Metadata type identification tag is associated with image metadata value . Metadata type identification tag is associated with image metadata value . And metadata type identification tag is associated with image metadata value . Image metadata may include any number of mappings from zero one two and so forth.

Thus in an example embodiment each mapping associates a respective metadata type identification tag with a respective metadata value with x being a generic variable taking on a value for t . Metadata type identification tag identifies the meaning of the associated metadata value . Metadata type identification tag may be implemented as a name a number some other e.g. alphanumeric character or combination of characters and so forth.

For an example embodiment these metadata type identification tags are defined by the corresponding image file format of the applicable digital image standard of image item . The term tags may comprise tags fields keys etc. as used in the various standards. Some standards by way of example only use one two or more characters as a hexadecimal number to represent each metadata type identification tag . For instance a metadata type identification tag of IF may be associated with a metadata value representing a date that image data was acquired. A desired particular image metadata value may be extracted from image metadata by referencing or otherwise using the associated particular metadata type identification tag of the associated mapping .

Different digital image standards specify different metadata types and different total numbers of metadata types. For example the JIF and PNG standards define on the order of tens of different metadata types. The JPEG and TIF standards define on the order of hundreds of different metadata types. Other standards can also define thousands or more of different metadata types.

Digital image standards also usually define different metadata type identification tags to be associated with the same metadata type. In other words a metadata type identification tag of 0B3 may be associated with a date metadata type in a first standard may be associated with a compression ratio metadata type in a second standard may be undefined in a third standard and so forth.

Even if the metadata type identification tag differs between standards for the same metadata type there are some common metadata types that are included in most if not all standards. For example a date an image is taken is a relatively common metadata type. As explained above the associated metadata type identification tag can and often does vary between different digital image standards. As described herein below an image metadata API enables at least some of these common metadata types to be accessed without a user or web developer knowing a particular metadata type identification tag for a given image file format as defined in some corresponding digital image standard.

In an example embodiment scheme also includes an image metadata API call and an image metadata API response . Generally image metadata API call and image metadata API response enable one or more values of image metadata to be displayed for a particular image under the control of script . This API exchange enables script to modify or otherwise affect what image metadata is displayed. Thus script may affect what image metadata is displayed by way of insertion addition deletion replacement and so forth. Script may effect such changes by changing markup language portion or DOM directly. Browser can propagate changes to markup language portion to DOM prior to displaying it.

As described above with particular reference to browser parses a markup language portion of a page to produce DOM . This parsing typically produces objects from tagged parts of markup language portion . Image data object is produced from and corresponds to image data of . Image metadata property is produced from and corresponds to image metadata . Image metadata property can include the metadata value s of image metadata .

In an example implementation image decoder decodes any image items included in markup language portion . This usually occurs during the parsing but it may be performed fully or partially at another time including in response to an image metadata API call . Image metadata API enables script to interact with browser including image decoder so as to make image metadata property accessible to page developers that write script .

As described above different digital image standards define different metadata type identification tags for a single metadata type having the same underlying semantic meaning. Instead of requiring the page developer to know the correct metadata type identification tag for every possible digital image standard a predetermined but adjustable finite number of preselected common image metadata types are enabled for access using image metadata API call . Each preselected common image metadata type is referenced using a preselected image metadata name. Example embodiments are described in further detail herein below with particular reference to .

In operation of an example embodiment script sends an image metadata API call to image metadata API . By way of example only such an image metadata API call may be formulated similar to ImageName.CommonMetadata.PreselectedImageMetadataName . The ImageName portion references a targeted image item . The CommonMetadata portion may be a literal that indicates that a preselected image metadata name is being included. The PreselectedImageMetadataName portion represents the preselected image metadata name.

Browser using image decoder ascertains a metadata value that is associated with the preselected image metadata name for the targeted image. A common image metadata mapping data structure may be used as intermediate link to connect a doubly linked association chain between a preselected image metadata name and the desired image metadata value. An example common image metadata mapping data structure is described herein below with particular reference to . The ascertained metadata value is returned to script in image metadata API response . The returned metadata value may then be displayed as at least part of displayed image metadata .

In an example embodiment at block a script calls an image metadata API on a browser with reference to a preselected image metadata name. For example a script may make to an image metadata API of a browser an image metadata API call referencing a preselected image metadata name .

At block the browser determines an image metadata value responsive to the preselected image metadata name and based on a metadata mapping data structure and image metadata. For example browser using image decoder may determine an image metadata value that is associated with the referenced preselected image metadata name . This may entail ascertaining two levels of associations using a common image metadata mapping data structure as well as the decoded image metadata of the targeted image. This ascertainment of each layer of two layers of associations is described further herein below with particular reference to .

At block the browser returns to the script the determined image metadata value that is associated with the referenced preselected image metadata name in the context of the targeted image. For example browser may send to script an image metadata API response including image metadata value . The returned metadata value may then be displayed as part of displayed page .

In an example embodiment each respective image file format mapping entry corresponds to a respective digital image standard. Thus each respective image file format mapping entry maps preselected image metadata names to metadata type identification tags defined by a respective digital image standard. In an example alternative each image file format mapping entry may be directed to a particular sub format or may have multiple sub format mappings therein. Within each image file format mapping entry each association field maps a respective preselected image metadata name to a respective metadata type identification tag of the corresponding digital image standard.

In a described implementation the set of preselected image metadata names . . . are common within each image file format mapping entry throughout common image metadata mapping data structure . With such an example implementation a page developer can choose a preselected image metadata name with reasonable assurance that a valid metadata value if present is returned in response to an image metadata API call . However the tag value of the metadata type identification tag for a given preselected image metadata name can and likely will vary between any two image file format mapping entries . In other words the tag value of a metadata type identification tag may be 3C4 in one image file format mapping entry and 4D in another.

In an example embodiment a predetermined number p of preselected image metadata names may have a corresponding association field within each image file format mapping entry . However this number p may be expanded or contracted even after deployment. Additionally the number of image file format mapping entries may be increased or decreased especially as new digital image standards are introduced or retired . Common image metadata mapping data structure may be included for example as part of browser including as part of image metadata API and or image decoder .

For an example embodiment image metadata types that are to be given preselected image metadata names are selected for implementation based on their commonality across digital image standards based on their popularity of usage for page displays some combination thereof and so forth. However other criterion or criteria may be applied to select the p image metadata types to be given preselected image metadata names. Preselected image metadata names may include by way of example but not limitation Keywords DateTaken ImageSize ImageHeight ImageWidth and so forth.

By implementing certain example embodiment s from one or more of scheme of flow diagram of and common image metadata mapping data structure of image metadata capabilities are expanded. For example browser users can copy a public image from a web site and acquire the keywords and or description that the image is tagged with. Furthermore the speed of keyword searches on e.g. image sharing sites may be increased by obviating the need to query keyword information from a heavily used server across a network.

The image metadata properties may be readable read only writeable and so forth. For the read read only properties the image metadata may be read using a metadata reader. For writeable properties the image metadata may be written to using a metadata writer. Hence users of web applications and other applications that can handle markup language based files are able to read from and write to image metadata without necessitating server interaction.

In an example embodiment at block a script calls an image metadata API of a browser with reference to a preselected image metadata name. For example script may send an image metadata API call to image metadata API of browser with a reference to a preselected image metadata name . At block the browser receives from the script the image metadata API call that includes the preselected image metadata name. For example image metadata API of browser may receive from script image metadata API call that includes preselected image metadata name .

At block an image file format IFF for the targeted image is determined. For example image decoder of browser may determine the image file format corresponding to the targeted image . At block a common image metadata mapping data structure at a mapping entry corresponding to the image file format of the targeted image is accessed. For example browser may access a common image metadata mapping data structure at an image file format mapping entry that corresponds to an image file format of the targeted image .

At block a format specific metadata type identification tag associated with the preselected image metadata name is extracted. For example for the image file format mapping entry corresponding to the image file format of the targeted image a metadata type identification tag that is included in an association field corresponding to the received preselected image metadata name is extracted. In other words an association field corresponding to the received preselected image metadata name is located so that the metadata type identification tag associated with the received preselected image metadata name may be extracted.

At block from the image metadata of the targeted image an image metadata value associated with the extracted format specific metadata type identification tag is ascertained. For example from image metadata e.g. of of the targeted image an image metadata value that is associated with the extracted format specific metadata type identification tag may be extracted. Thus a metadata type identification tag is ascertained from a preselected image metadata name using one association e.g. at block and an image metadata value is ascertained from the metadata type identification tag using another association e.g. at block . Hence a two level mapping association may be used to determine an image metadata value from a preselected image metadata name .

At block the ascertained image metadata value is returned to the script. For example image metadata API may return the ascertained image metadata value to script in an image metadata API response . At block the browser displays the DOM with the scripted image metadata value as part of displayed image metadata. For example browser may display DOM with the scripted image metadata value being included as part of displayed image metadata in relation to displayed image .

As noted above image metadata API of browser may be write capable as well as read capable. For a writing implementation image metadata API receives an image metadata API call for writing that includes a preselected image metadata name and a new image metadata value. Browser replaces a current image metadata value with the new image metadata value so that the new image metadata value is associated with the metadata type identification tag in the image metadata of the targeted image.

Generally a device may represent any computer or processing capable device such as a server device a workstation or other general computer device a data storage repository apparatus a personal digital assistant PDA a mobile phone a gaming platform an entertainment device a router computing node a mesh or other network node a wireless access point some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media include processor executable instructions .

In an example embodiment of device I O interfaces may include i a network interface for communicating across network ii a display device interface for displaying information on a display screen iii one or more human device interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports a network communications stack a radio and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen or monitor and so forth. Examples of iii human device interfaces include those that communicate by wire or wirelessly to human device interface equipment e.g. a keyboard a remote a mouse or other graphical pointing device etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device . Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth.

Thus realizations for common metadata exposure with digital images may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology and one may be realized as a general purpose processor e.g. a central processing unit CPU a microprocessor a controller etc. a graphics processing unit GPU a derivative thereof and so forth. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media storage and transmission media e.g. wireless or wired communication channels hard coded logic media combinations thereof and so forth. Media is tangible media when it is embodied as a manufacture and or as a composition of matter. For example media may include an array of disks or flash memory for longer term mass storage of processor executable instructions random access memory RAM for shorter term storing of instructions that are currently being executed and or otherwise processed link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein. Such functions include but are not limited to i those acts that are illustrated in flow diagrams and of and respectively ii those provided by the illustrated data structures e.g. of iii those of scheme of other procedures described herein combinations thereof and so forth.

The devices acts aspects features functions procedures modules data structures techniques components parts etc. of are illustrated in diagrams that are divided into multiple blocks and other elements. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks and or other elements can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses arrangements etc. for common metadata exposure with digital images.

Although systems media devices methods procedures apparatuses mechanisms schemes approaches processes arrangements and other example embodiments have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

