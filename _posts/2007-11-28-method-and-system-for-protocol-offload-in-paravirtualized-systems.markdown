---

title: Method and system for protocol offload in paravirtualized systems
abstract: Certain aspects of a method and system for protocol offload in paravirtualized systems may be disclosed. Exemplary aspects of the method may include preposting of application buffers to a front-end driver rather than to a NIC in a paravirtualized system. The NIC may be enabled to place the received offloaded data packets into a received data buffer corresponding to a particular GOS. A back-end driver may be enabled to acknowledge the placed offloaded data packets. The back-end driver may be enabled to forward the received data buffer corresponding to the particular GOS to the front-end driver. The front-end driver may be enabled to copy offloaded data packets from a received data buffer corresponding to a particular guest operating system (GOS) to the preposted application buffers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07926067&OS=07926067&RS=07926067
owner: Broadcom Corporation
number: 07926067
owner_city: Irvine
owner_country: US
publication_date: 20071128
---
This application makes reference to claims priority to and claims benefit of U.S. Provisional Application Ser. No. 60 867 485 filed on Nov. 28 2006.

Certain embodiments of the invention relate to network interfaces. More specifically certain embodiments of the invention relate to a method and system for protocol offload in paravirtualized systems.

In networking systems a single server may be utilized to concurrently support multiple server operations or services. For example a single server may be utilized for providing access to business applications while also operating as an email server a database server and or an exchange server. The server may generally support the various server operations by utilizing a single operating system OS . The server operations via the single OS make use of server processing resources such as the central processing unit CPU memory network interface card NIC peripheral sound card and or graphics card for example. In many instances the server resources may not be efficiently utilized because the demand for server operations generally vary based on the type of service provided and or user needs. Consolidating server services into a single operation may result in an improvement in server efficiency. However consolidation also removes the level of protection that is provided when the operations are maintained separate. For example when the operations are consolidated a crash or failure in a database server may also result in the loss of email services exchange services and or application services.

Another approach for improving server efficiency may be to utilize multiple operating systems running concurrently so that each operating system supports a different server operation for example. The multiple operating systems may be referred to as guest operating systems GOSs . This approach maintains the level of protection provided when server operations are not consolidated while also enabling the optimization of the usage of the processing resources available to the server. The use of multiple guest operating systems may be referred to as OS virtualization because each GOS perceives to have full access to the server s hardware resources. In this regard a GOS may be unaware of the presence of any other GOS running on the server. In order to implement OS virtualization a software layer may be needed to arbitrate access to the server s hardware resources. This software layer may be referred to as a hypervisor or virtual machine VM monitor for example. The hypervisor may enable the multiple GOSs to access the hardware resources in a time sharing manner.

A hardware resource that may be frequently utilized by at least one of the server operations or services is the NIC. In this regard a hypervisor or VM monitor may enable creating a software representation of NIC that may be utilized by a GOS. This software representation of the NIC may be referred to as a virtual NIC. However a virtual NIC may be limited as to the kind of features or functionalities of the NIC that may be provided to the GOSs. For example a virtual NIC may not be able to support transmission control protocol TCP offload functions. Offloading at least part of the TCP processing from the CPU to a processor on the NIC may provide improved network throughput. Without offloading capabilities the data rate of the server may be limited in some circumstances. Another limiting aspect may be that a virtual NIC may only provide basic layer 2 L2 networking functionality to the multiple GOSs. The virtual NIC may be limited to providing data communication between the GOSs and the network. In this regard the virtual NIC may not be able to support other advanced features such as remote direct memory access RDMA and or Internet small computers system interface iSCSI for example.

In addition to the limitations on the kind of features that may be provided by the virtual NIC the hypervisor may also be required to do a significant amount of work when managing the interaction between the multiple GOSs and the server s hardware resources. Utilizing a hypervisor layer may introduce an overhead penalty to basic L2 networking operations that may not be present when a single OS is utilized. For example when data is to be transmitted from any of the GOSs the hypervisor may be required to arbitrate access to the NIC. When data is received by the NIC the hypervisor may be required to determine which one is the appropriate GOS to send the received data. Moreover because each GOS and the hypervisor may utilize different portions of memory the hypervisor may have the added responsibility of managing the transfer of data from one portion of memory to another.

Due to the growing demand to support multiple GOSs in a single server new solutions may require that the overhead introduced by the presence of a hypervisor layer be reduced and or that advance features may be supported by the virtualization of a portion of the server s hardware resources such as the network interface card.

The TCP IP protocol has long been the common language for network traffic. However processing TCP IP traffic may require significant server resources. Specialized software and integrated hardware known as TCP offload engine TOE technology may eliminate server processing constraints. The TOE technology may comprise software extensions to existing TCP IP stacks that may enable the use of hardware data planes implemented on specialized TOE network interface cards TNIC . This hardware and or software combination may allow operating systems to offload all TCP IP traffic to the specialized hardware on the TNIC leaving TCP IP control decisions on the server. Most operating system vendors prefer this approach which is based on a data path offload architecture.

Para virtualization is a virtualization technique that may present a software interface to virtual machines that may be similar but not identical to that of the underlying hardware. Para virtualization may allow the virtual machine monitor VMM to be simpler or virtual machines that run on it to achieve performance closer to non virtualized hardware. However operating systems may have to be explicitly ported to run on top of a paravirtualized VMM. Paravirtualization may modify the OS running inside the VM to run under the hypervisor. The OS may be modified to support the hypervisor and avoid unnecessary use of privileged instructions. These modifications may allow the performance of the system to be near native.

Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such systems with some aspects of the present invention as set forth in the remainder of the present application with reference to the drawings.

A method and or system for protocol offload in paravirtualized systems substantially as shown in and or described in connection with at least one of the figures as set forth more completely in the claims.

These and other advantages aspects and novel features of the present invention as well as details of an illustrated embodiment thereof will be more fully understood from the following description and drawings.

Certain embodiments of the invention may be found in a method and system for protocol offload in paravirtualized systems. Aspects of the method and system may comprise preposting of application buffers to a front end driver rather than to a NIC in a paravirtualized system. The NIC may be enabled to place the received offloaded data packets into a received data buffer corresponding to a particular GOS. A back end driver may be enabled to acknowledge the placed offloaded data packets. The back end driver may be enabled to forward the received data buffer corresponding to the particular GOS to the front end driver. The front end driver may be enabled to copy offloaded data packets from a received data buffer corresponding to a particular guest operating system GOS to the preposted application buffers.

The host system may comprise suitable logic circuitry and or code that may enable data processing and or networking operations for example. In some instances the host system may also comprise other hardware resources such as a graphics card and or a peripheral sound card for example. The host system may support the operation of the first GOS the second GOS and the third GOS via the hypervisor . The number of GOSs that may be supported by the host system by utilizing the hypervisor need not be limited to the exemplary embodiment described in . For example two or more GOSs may be supported by the host system .

The hypervisor may operate as a software layer that may enable OS virtualization of hardware resources in the host system and or virtualization of hardware resources communicatively coupled to the host system such as the NIC for example. The hypervisor may also enable data communication between the GOSs and hardware resources in the host system and or hardware resources communicatively connected to the host system . For example the hypervisor may enable packet communication between GOSs supported by the host system and the NIC via the TX queue and or the RX queue

The host processor may comprise suitable logic circuitry and or code that may enable control and or management of the data processing and or networking operations associated with the host system . The host memory may comprise suitable logic circuitry and or code that may enable storage of data utilized by the host system . The hypervisor may be enabled to control the pages that may be accessed by each GOS. The hypervisor may be enabled to support GOS creation of per process virtual memory maps. The hypervisor may enable inter partition communication by copying data from between partitions and or mapping certain pages for access by both a producer and a consumer partition.

The host memory may be partitioned into a plurality of memory regions or portions. For example each GOS supported by the host system may have a corresponding memory portion in the host memory . Moreover the hypervisor may have a corresponding memory portion in the host memory . In this regard the hypervisor may enable data communication between GOSs by controlling the transfer of data from a portion of the memory that corresponds to one GOS to another portion of the memory that corresponds to another GOS.

The NIC may comprise suitable logic circuitry and or code that may enable communication of data with a network. The NIC may enable level 2 L2 switching operations for example. A stateful network interface for example routers may need to maintain per flow state. The TX queue may comprise suitable logic circuitry and or code that may enable posting of data for transmission via the NIC . The RX queue may comprise suitable logic circuitry and or code that may enable posting of data or work requests received via the NIC for processing by the host system . In this regard the NIC may post data or work requests received from the network in the RX queue and may retrieve data posted by the host system in the TX queue for transmission to the network. The TX queue and the RX queue may be integrated into the NIC for example. The NIC processor may comprise suitable logic circuitry and or code that may enable control and or management of the data processing and or networking operations in the NIC . The NIC memory may comprise suitable logic circuitry and or code that may enable storage of data utilized by the NIC .

The domain may be a host domain that may host other GOSs for example GOS GOS and GOS . Domain may have direct access to the hardware devices and it may utilize the device drivers. The first GOS the second GOS and the third GOS may each correspond to an operating system that may enable the running or execution of operations or services such as applications email server operations database server operations and or exchange server operations for example. The first GOS may comprise a virtual NIC the second GOS may comprise a virtual NIC and the third GOS may comprise a virtual NIC . The virtual NIC the virtual NIC and the virtual NIC may correspond to software representations of the NIC resources for example. In this regard the NIC resources may comprise the TX queue and the RX queue . Virtualization of the NIC resources via the virtual NIC the virtual NIC and the virtual NIC may enable the hypervisor to provide L2 switching support provided by the NIC to the first GOS the second GOS and the third GOS

When receiving packets from the network via the NIC the hypervisor may determine packet information for example the media access control MAC address associated with the packet in order to transfer the received packet to the appropriate GOS. In this regard the hypervisor may receive the packets from the RX queue and may demultiplex the packets for transfer to the appropriate GOS. After a determination of the particular packet information for example MAC address and appropriate GOS for a received packet the hypervisor may transfer the received packet from a buffer in the hypervisor controlled portion of the host memory to a buffer in the portion of the host memory that corresponds to each of the appropriate GOSs. The received packet may be copied from a back end driver to a shared memory buffer. The data may be copied from GOS buffers to application buffers.

When connections are offloaded it may be possible to post application buffers to the NIC such that the NIC may be enabled to place incoming data from a network directly into GOS buffers eliminating a need to further copy the data. However in virtualized systems posting of an application buffer between one of the GOSs to Domain Dom may require extra overhead as the application buffer has to be mapped to Dom . As a result the pre posting of buffers to NIC may be non efficient.

When application buffers are posted to NIC they may arrive at NIC after the data to be placed into the buffer has arrived. In such a case the NIC may prefer to place the incoming data into another buffer and later copy it to the posted application buffers after the application buffers are posted to the NIC . In this case the pre posted buffers may not be utilized to copy data to the application buffer. In virtualized systems the increased latency in posting the buffers may decrease the probability of succeeding in placing data directly to application buffers.

The cycle of indicating data to an application and waiting for an application to post application buffers before indicating further data may limit the throughput of the system because of a single I O delivered. The latency associated with virtualization may be reduced due to a need to switch from Dom to GOS and back to Dom . In accordance with an embodiment of the invention not posting the application buffers to the NIC may be more efficient. The interface between the operating system and the front end driver in the GOS may not be changed. Similarly the interface between the back end driver and the device driver in Dom may not be altered.

The NIC driver may be coupled to the NIC . The front end driver may be paravirtualized to relay information to the back end driver . The front end driver may be placed on a network s front end or the network traffic may pass through the front end driver . The back end driver may be located in the network s back end. The back end driver may function in a plurality of environments for example virtual machine VM or driver VM for example. The back end driver may be enabled to invoke the NIC driver . The back end driver may be coupled to the front end driver via a shared memory interface.

In the paravirtualized system the domain may be a host domain that may host other GOSs. Domain may have direct access to the hardware devices and it may utilize the device drivers. Domain may have another back end layer that may comprise the back end driver . The unprivileged domain Dom U may have access to a front end layer which comprises the front end driver . The Dom U may issue I O requests to the front end similar to the I O requests that are transmitted to a kernel. However because the front end is a virtual interface with no access to real hardware these requests may be delegated to the back end. The requests may then be sent to the physical devices. When Dom U is created it may create an interdomain event channel between itself and domain . The event channel may be a lightweight channel for passing notifications such as indicating when an I O operation has completed. A shared memory interface may exist between each guest domain or GOS and domain . This shared memory interface may be utilized to pass requests and data. The shared memory interface may be created and handled using the API.

The NIC may be enabled to allocate one or more memory buffers for example GOS specific buffer for each of the particular guest operating systems GOSs for example GOS in the paravirtualized system . The NIC may be enabled to post the allocated one or more memory buffers for example GOS specific buffer for each of the particular GOSs for example GOS to a receive queue

The NIC may be enabled to receive offloaded data packets associated with a particular network connection for example TCP IP connection or iSCSI connection in a paravirtualized system . The NIC may be enabled to determine whether one or more of the received offloaded data packets is associated with the particular network connection for example TCP IP connection RDMA connection or iSCSI connection based on one or more network connection parameters for example MAC address associated with the received offloaded data packets.

The NIC may be enabled to place the received offloaded data packets into one or more memory buffers for example GOS specific buffer corresponding to a particular guest operating system GOS utilizing direct memory access DMA . The NC may be enabled to place the received offloaded data packets into one or more memory buffers for example GOS specific buffer corresponding to the particular GOS based on the one or more network connection parameters for example MAC address associated with the offloaded received offloaded data packets. The network connection parameters may comprise a GOS identification parameter to identify the particular GOS for example GOS .

The back end driver may be enabled to acknowledge the placement of the received offloaded data packets or return the indicate call communicated by NIC . The back end driver may be enabled to forward the memory buffer or the return from the indicate call communicated by NIC to a front end driver . The front end driver may be enabled to hold the application buffer without posting the application buffer to the back end driver . The front end driver may be enabled to copy the received offloaded data packets from shared NIC memory buffer pool in to one or more memory buffers for example GOS specific buffer corresponding to the particular GOS . The back end driver may be enabled to limit a number of offloaded network connections for example TCP IP network connections or iSCSI network connections that may be offloaded based on one or more network connection parameters associated with the received offloaded data packets.

The GOS may be enabled to prepost one or more application buffers for example application buffer to a front end driver rather than to a NIC . The front end driver may be enabled to copy offloaded data packets from a received data buffer for example GOS specific buffer to the preposted application buffers for example application buffer . The received data buffer for example GOS specific buffer may correspond to a particular guest operating system GOS .

The NIC may be enabled to receive the offloaded data packets from a network for example an Ethernet network. The NIC may be enabled to place the received offloaded data packets into the received data buffer for example GOS specific buffer corresponding to the particular GOS utilizing direct memory access. The back end driver may be enabled to acknowledge the placed offloaded data packets. The front end driver may be enabled to hold the preposted application buffers for example application buffer without posting the preposted application buffers for example application buffer to the back end driver .

The back end driver may be enabled to limit a number of offloaded network connections based on one or more network connection policies for example MAC address associated with the placed offloaded data packets. The offloaded network connections may be for example one of a TCP IP connection RDMA connection and or an iSCSI connection. The back end driver may be enabled to forward the received data buffer for example GOS specific buffer corresponding to the particular GOS to the front end driver . The NIC may be enabled to place the received offloaded data packets into the received data buffer for example GOS specific buffer corresponding to the particular GOS based on one or more network connection parameters for example MAC address or LAN ID associated with the offloaded data packets. The network connection parameters may comprise a GOS identification parameter to identify the particular GOS . The APIs between a device driver for example NIC driver corresponding to NIC and the back end driver may be preserved. The APIs between the particular GOS and the front end driver may be preserved.

In accordance with an embodiment of the invention a method and system for protocol offload in paravirtualized systems may comprise a NIC that enables receipt of data packets associated with a particular network connection for example TCP IP connection or iSCSI connection in a paravirtualized system . The NIC may be enabled to place the received offloaded data packets into one or more memory buffers for example GOS specific buffer corresponding to a particular guest operating system GOS utilizing direct memory access DMA . The NIC may be enabled to allocate one or more memory buffers for example GOS specific buffer for each of the particular guest operating systems GOSs for example GOS in the paravirtualized system . The NIC may be enabled to post the allocated one or more memory buffers for example GOS specific buffer for each of the particular GOSs for example GOS to a receive queue . The NIC may be enabled to place the received offloaded data packets into one or more memory buffers for example GOS specific buffer corresponding to the particular GOS based on the one or more network connection parameters for example MAC address associated with the received offloaded data packets. The network connection parameters may comprise a GOS identification parameter to identify the particular GOS .

The back end driver may be enabled to acknowledge the placement of the received offloaded data packets or return the indicate call communicated by NIC . The back end driver may be enabled to forward the memory buffer for example GOS specific buffer or the return from the indicate call communicated by NIC to a front end driver . The front end driver may be enabled to hold the application buffer without posting the application buffer to the back end driver . The front end driver may be enabled to copy the received offloaded data packets from GOS specific buffer to application buffer .

In accordance with an embodiment of the invention a method and system for protocol offload in paravirtualized systems may comprise a GOS that enables preposting of application buffers for example application buffer to a front end driver rather than to a NIC . The front end driver may be enabled to copy offloaded data packets from a received data buffer for example GOS specific buffer to the preposted application buffers for example application buffer . The received data buffer for example GOS specific buffer may correspond to a particular guest operating system GOS .

The NIC may be enabled to receive the offloaded data packets from a network for example an Ethernet network. The NIC may be enabled to place the received offloaded data packets into the received data buffer for example GOS specific buffer corresponding to the particular GOS utilizing direct memory access. The back end driver may be enabled to acknowledge the placed offloaded data packets. The front end driver may be enabled to hold the preposted application buffers for example application buffer without posting the preposted application buffers for example application buffer to the back end driver .

The back end driver may be enabled to limit a number of offloaded network connections based on one or more network connection policies for example MAC address associated with the placed offloaded data packets. The offloaded network connections may be for example one of a TCP IP connection RDMA connection and or an iSCSI connection. The back end driver may be enabled to forward the received data buffer for example GOS specific buffer corresponding to the particular GOS to the front end driver . The NIC may be enabled to place the received offloaded data packets into the received data buffer for example GOS specific buffer corresponding to the particular GOS based on one or more network connection parameters for example MAC address or LAN ID associated with the offloaded data packets. The network connection parameters may comprise a GOS identification parameter to identify the particular GOS . The APIs between a device driver for example NIC driver corresponding to NIC and the back end driver may be preserved. The APIs between the particular GOS and the front end driver may be preserved.

Another embodiment of the invention may provide a machine readable storage having stored thereon a computer program having at least one code section executable by a machine thereby causing the machine to perform the steps as described herein for protocol offload in paravirtualized systems.

Accordingly the present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in at least one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention may also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

While the present invention has been described with reference to certain embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the scope of the present invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the present invention without departing from its scope. Therefore it is intended that the present invention not be limited to the particular embodiment disclosed but that the present invention will include all embodiments falling within the scope of the appended claims.

