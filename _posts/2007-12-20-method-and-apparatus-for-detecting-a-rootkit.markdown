---

title: Method and apparatus for detecting a rootkit
abstract: A method and apparatus for detecting a rootkit is described. In one embodiment, a method for detecting a rootkit comprises analyzing file system information associated with a plurality of files that form a volume, wherein a first portion of the file system information comprises metadata information for a master file table and a second portion comprises at least one master file table record and identifying an inconsistency within the file system information where the inconsistency indicates a modification to the file system information by a rootkit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397295&OS=08397295&RS=08397295
owner: Symantec Corporation
number: 08397295
owner_city: Mountain View
owner_country: US
publication_date: 20071220
---
Embodiments of the present invention generally relate to computer security more particularly to a method and apparatus for detecting a rootkit within a computer system.

Many computing environments e.g. computer networks home computers and the like are constantly under alert for attacks orchestrated through various programs. Typically the various programs e.g. sets of processor executable instructions are developed by attackers e.g. hackers who desire to disrupt the operations of the computing environment. For example rootkits are employed to illegitimately obtain system administrator rights to the computing environment and use the system administrator status to exert command and control over various components of the computing environment.

Rootkits generally comprise software programs that enable the attacker to become the system administrator. Typically the attacker installs the rootkit on a computer after first obtaining user level access either by exploiting a known vulnerability or cracking a password. Once the rootkit is installed it allows the attacker to mask the intrusion and avoid detection by known anti rootkit methods as well as to gain privileged access e.g. root or system administrator level access to the computer and possibly other computers in the computing environment. With privileged access the attacker can execute files and change system configurations. The attacker may also access operating system log files and or covertly spy on the computer and or computing environment.

Anti rootkit detection and or removal software developers and rootkits developers are playing a game of cat and mouse where each side develops software to overcome an improvement developed by the other side. For example the rootkit developers almost immediately create software to avoid detection by the latest anti rootkit software. For example various types of anti rootkit software detect rootkits by comparing files names read from the Master File Table MFT records with files names returned from one or more functions e.g. FindFirstFile FindNextFile and the like implemented in the WIN32 i.e. Windows 32 bit Application Programming Interface API . Discrepancies identified by the comparison indicate the presence of the rootkit. Rootkit developers however quickly modified their methodology and masked their intrusion from the above detection mechanism thereby rendering the various types of the anti rootkit software ineffective.

Therefore there is a need for a method and apparatus for efficiently detecting a rootkit within a computer system when the rootkit modifies file system information.

Embodiments of the present invention generally comprise a method and apparatus for detecting a rootkit within a computer system. In one embodiment a method for detecting a rootkit comprises analyzing file system information associated with a plurality of files that form a volume wherein a first portion of the file system information comprises metadata information for a master file table and a second portion comprises at least one master file table record and identifying an inconsistency within the file system information where the inconsistency indicates a modification to the file system information by a rootkit.

The computer comprises various support circuits a central processing unit CPU and a memory . The CPU may be one or more of any commercially available microprocessors or microcontrollers. The various support circuits facilitate the operation of the CPU . The support circuits include for example input output circuits system bus PCI bus clock circuits power supplies and the like. The memory may comprise random access memory read only memory optical memory disk drives removable memory and the like. The memory includes a volume which may be a partition that is provisioned and organized in accordance with a New Technology File System NTFS . The memory further includes various software packages such as a volume module and a rootkit detector .

The volume further includes file system information a plurality of files and a rootkit . The file system information represents the organization and content of the plurality of files that form the volume . As such the file system information is the foundation of the volume . In one embodiment the plurality of files includes a plurality of data files and a plurality of directories because a directory is considered a file in a NTFS volume e.g. the volume . The rootkit as explained above desires administrator control over the volume in order to attack the computer .

In one embodiment the file system information is a Master File Table MFT including any non resident information associated with any record of the Master File Table e.g. non resident data or attribute records . In this embodiment the Master File Table comprises a plurality of records defining the plurality of files that form the volume . In one embodiment a first portion of the file system information may be metadata for the volume e.g. first 16 records of the MFT is metadata for the MFT itself and a second portion of the file system information may be one or more MFT records for each of the plurality of files within the volume . In one embodiment each MFT record comprises one or more attributes that describe the file and or the directory including information pertaining to one or more allocated clusters within the volume .

The volume module and the rootkit detector cooperate to identify inconsistencies within the file system information where the inconsistencies are caused by one or more modifications to the file system information by the rootkit . The rootkit modifies the file system information in an effort to avoid detection. For example the rootkit may hide in one or more files within the plurality of files by modifying a MFT record that comprises a file name associated with the rootkit . Accordingly one or more identified inconsistencies strongly indicate an intrusion by the rootkit .

In one or more embodiments the volume module accesses and analyzes the file system information associated with the plurality of files and the rootkit detector identifies the one or more inconsistencies within the file system information . In some embodiments the volume module and or the rootkit detector correlate various records of the plurality of records of the MFT in order to identify the one or more inconsistencies.

The MFT comprises a plurality of MFT records . Each MFT record of the plurality of MFT records includes information pertaining to a file e.g. the MFT directories data files and the like within the volume . Each MFT record also indicates a position of the MFT record in the MFT i.e. a record number . illustrates the record number of the MFT record under column RECORD . In one or more embodiments such information is expressed through a header e.g. FILE RECORD SEGMENT HEADER as well as one or more attributes and associated values. The headers of the plurality of records are illustrated in under a column labeled HEADER . Each header generally includes information describing an associated MFT record e.g. allocation information size information update sequence arrays flags and the like . For example the header e.g. a flag bit set in the header may indicate whether the MFT record is allocated e.g. used in the volume and not deleted . The one or more attributes are illustrated in under columns ATTRIBUTE  ATTRIBUTE  and ATTRIBUTE  and are referred to as Attribute  Attribute  and Attribute  in the following description for the plurality of records .

Metadata for the MFT is stored within a first portion of the MFT itself. In one embodiment the volume reserves the first 16 records for storage of the metadata information of the MFT e.g. record numbers . The metadata information includes a MFT file a BITMAP file among others e.g. a root directory a MFT mirror file and the like . Specifically the MFT file and the BITMAP file are stored in records zero and six respectively. The headers for the MFT file and the BITMAP file include information describing each file as indicated above.

As explained above the metadata describes the MFT for the volume . In particular Attribute  for the MFT file and the BITMAP file is a File Name attribute type and includes file names MFT and BITMAP respectively. Attribute  for the MFT file is a Bitmap attribute type. The Bitmap attribute includes information regarding which ones of the plurality of MFT records are allocated e.g. used by the volume . Attribute  for the MFT file is a Data attribute type and includes a plurality of headers associated with the plurality of MFT records . For the BITMAP file Attribute  is the Data attribute type and includes information regarding a plurality of allocated clusters in the volume .

A second portion of the MFT comprises one or more MFT records for each file or directory in the volume . For example record describes a data file. In this example a header of the record includes an Update Sequence Array as described below in addition to information describing the record . Attribute  indicates Standard Information for the record . Furthermore Attribute  is the File Name attribute type. The Standard Information attribute type includes read write permissions a number of directories that index record i.e. the file File  timestamps and the like. Attribute  for the record is an Attribute List attribute type. Generally the Attribute List includes pointers to other MFT records that include one or more additional attributes. Accordingly a pointer in the Attribute List Attribute  of the record refers to a record as the location of one or more additional attributes. Here Attribute  of the record is the Data attribute type and includes allocated cluster data for the File .

The Update Sequence Array USA generally is an array of the values which belong to an end of each sector in a MFT record. Note that a first entry in the USA is an Update Sequence Number which is a cyclic counter of a number of times the MFT record has been written to a disk. Before the MFT record is written to the disk the last two bytes of each sector are copied to the USA in the header. A sector generally is a unit of data on a disk. The update sequence number is then incremented and written to the end of each sector in the MFT record. Before the MFT record is read from the disk the ends of each sector must match the Update Sequence Number in the header. If there is no match an incomplete multi sector transfer has occurred when the MFT record was written.

Furthermore record describes a directory in the volume . Accordingly Attribute  is the Standard Information attribute. Attribute  is the File Name attribute and includes the value Directory  . Attribute  is the Bitmap attribute which represents index information for one or more files e.g. the File  within the Directory  in the form of a Balanced Tree BTree as known in the art as explained below. Here the BTree in the Bitmap attribute comprises a plurality of entries where each entry indicates a file name one or more MFT records allocated cluster data and or the like for the one or more files within the Directory .

BTrees generally comprise a data structure for storing and organizing a plurality of nodes where each parent node may have any number of children nodes and comprise any number of keys. The keys are stored in non decreasing order. Hence each key has an associated left child node that is the parent of a sub tree comprising one or more nodes with keys less than or equal to the each key but greater than a preceding key. Moreover the each key has an associated right child node that is the parent of a sub tree comprising one or more nodes with keys greater than the each key.

At step a determination is made as to whether a rootkit is present in the computer system. According to various embodiments the rootkit is present if certain inconsistencies were reported as explained below. If the rootkit is present then the method proceeds to step . At step a user is alerted as to the detection of the rootkit. Alternatively the method may alert software designed to remove rootkits such as the SYMANTEC NORTON SOFTWARE SUITE. If the rootkit is not present then the method proceeds to step . At step the method ends.

In one embodiment the method performs steps to identify a first inconsistency. At step MFT BITMAP i.e. the Bitmap attribute of the MFT file is compared with the plurality of MFT records. The MFT BITMAP represents the allocation of each and every record of the plurality of MFT records for files and directories. Hence the MFT BITMAP shows which MFT records are allocated or unallocated according to one embodiment. At step a discrepancy between the MFT BITMAP and the plurality of MFT records is determined. For example the discrepancy exists if a MFT record is allocated in the MFT BITMAP but the MFT record is marked as unallocated e.g. denoted in a flag in a header associated with the MFT record . In one embodiment the rootkit modifies the MFT record as such to hide the rootkit file name in an unallocated MFT record.

In another embodiment the method performs step to identify a second inconsistency. At step an invalid fine name within the plurality of MFT records is determined. Each MFT record may include one or more file names. For example a MFT record for a single file includes the file name within the file name attribute e.g. the File Name attribute of . For another example the file name is invalid if it comprises null data invalid character or all zeros. In one embodiment the rootkit modifies or overwrites the file name to hide the rootkit file name.

In another embodiment the method performs steps to identify a third inconsistency. At step a plurality of allocated clusters associated with the first portion is compared with allocated cluster data of the second portion. As explained above for the BITMAP file represented by the record in the MFT includes information pertaining to the plurality of allocated clusters. In one embodiment the Data Attribute of the BITMAP file stores such information. Also explained above for at least one MFT record of the plurality of MFT records in the second portion comprises a Data attribute which includes the allocated cluster data for a file associated with the at least one MFT record. If the file is a directory the Bitmap attribute includes the allocated cluster data for each and every file in the directory. At step a cluster that is allocated to two or more MFT records is determined. In one embodiment if there are two MFT records allocated to the same cluster the rootkit modified a first MFT record to show that a legitimate file has allocated a cluster when the rootkit allocated the cluster in a second MFT record to avoid detection.

In another embodiment the method performs step to identify a fourth inconsistency. At step an invalid Update Sequence Array USA is determined. For example an Update Sequence Array in any of the plurality of MFT records is invalid if there is a mismatch between an Update Sequence Number in a header and last two bytes of each cluster. In one embodiment the rootkit modifies the Update Sequence Array to prevent the MFT record from being read.

In another embodiment the method performs steps to identify a fifth inconsistency. At step BTree information is evaluated. As explained above the BTree information is associated with a BTree comprising a plurality of entries that represent index information for a directory. In one embodiment the BTree information includes file names allocated cluster data and the like associated with one or more files under the directory. At step a violation of a BTree is determined. The BTree is governed by certain semantics of which the plurality of entries must comply or violate the BTree as explained above. For example a modification to one of the files names within the directory causes the violation of the BTree by disturbing the organization of the BTree. In this example the modified file name would not be in a correct position in the BTree to enable logarithmic searching and would serve to disrupt future insertions and or deletions of one or more entries. The rootkit modifies the BTree information to a MFT record comprising the rootkit file name since any modified entry e.g. file name in the BTree cannot be used to locate the MFT record comprising the rootkit file name.

In another embodiment the method performs steps to identify a sixth inconsistency. At step each file name of the plurality of MFT records is compared with a MFT record for a directory associated with the file name. In one embodiment the each file name is compared with each file name under the directory e.g. each file name in the plurality of entries of the BTree . At step an absence of the file name within of the MFT record for the directory is determined. The absent file name indicates a modification by the rootkit to avoid detection.

In another embodiment the method performs steps to identify a seventh inconsistency. At step an attribute name within attribute list information of a MFT record is compared with a corresponding attribute in the MFT. In one embodiment the corresponding attribute comprises a non resident attribute for a base MFT record e.g. an attribute that is too large for the base MFT record . At step a mismatch between the attribute name within the attribute list information and the corresponding attribute is determined. The mismatch indicates a modification by the rootkit. At step the method returns to step of the method .

The method begins at step and proceeds to step . At step a MFT Record is accessed and values for a Bitmap attribute are stored in a cache. At step a determination is made as to whether there are more MFT records to read. If there are no more MFT records to read the method proceeds to step . At step the method ends. If there are more MFT records to read the method proceeds to step .

At step a next MFT record is accessed. At step a determination is made as to whether the next MFT record is allocated. If the next MFT record is allocated the method proceeds to step . If the next MFT record is not allocated the method proceeds to step . At step a determination is made as to whether the next MFT record is allocated in the cached attribute Bitmap. If the next MFT record is allocated in the cached attribute Bitmap a rootkit most likely modified the next MFT record to mask the intrusion. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported.

At step a determination is made as to whether each and every file name in the next MFT record is valid. If any of the file names are not valid the rootkit most likely modified or deleted one or more file names in the next MFT record to avoid detection. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If each and every file name is valid the method proceeds to step .

At step a plurality of allocated clusters associated with the next MFT record is added to an allocated cluster list. At step a determination is made as to whether one or more of the plurality of allocated clusters were already in the allocated cluster list. If one or more of the plurality of allocated clusters were already in the allocated cluster list the one or more allocated clusters are allocated to more than one MFT record. The rootkit most likely allocated one or more previously allocated clusters to avoid detection since the presence of one or more allocated clusters that are not associated with any MFT record exposes the rootkit to anti rootkit software. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If none of the plurality of allocated clusters were already in the allocated cluster list then the method proceeds to step .

At step a determination is made as to whether an update sequence array is valid. If the update sequence array is not valid the rootkit most likely modified deleted or corrupted the update sequence array to avoid detection. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If the update sequence array is valid the method proceeds to step .

At step a determination is made as to whether each and every attribute name in an attribute list matches corresponding attribute names in areas of the MFT associated with each and every attribute name. As explained in the attribute list is a type of attribute in a MFT record and contains pointers to locations in the MFT comprising one or more non resident attributes of the MFT record. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If each and every attribute name matches the corresponding attribute names then the method proceeds to step .

At step a determination is made as to whether the next MFT record is represents a directory. If the next MFT record does not represent a directory the method proceeds to step . If the next MFT record does represent a directory the method proceeds to step . At step a BTree is accessed. The BTree includes a plurality of entries representing a plurality of files within the directory. At step a determination is made as to whether the BTree is consistent with the plurality of entries. If the BTree is not consistent the rootkit most likely modified deleted or corrupted one or more of the plurality of entries to avoid detection. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If the BTree is consistent the method returns to step .

At step a directory MFT record associated with the next MFT record is accessed to verify the file name of the next MFT record in the associated directory. At step a determination is made as to whether the file name is in the associated directory MFT record. If the file name is not in the associated directory MFT record the rootkit most likely modified deleted or corrupted the next MFT record to appear to belong to a legitimate directory. In accordance with various embodiments of the present invention the method proceeds to step where such an inconsistency is reported. If the file name is in the directory MFT record the method returns to step . If there are no more MFT records in the MFT the method proceeds to step . At step the method ends.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

