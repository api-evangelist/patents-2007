---

title: Asynchronous updating of web page data views
abstract: Embodiments are provided to create and manage data view modules for updating data on a web page, without having to reload the entire web page to view the updated data. In one embodiment, a static data view module for viewing web data is modified utilizing an asynchronous update function which provides asynchronous update behavior for the data view module. The asynchronous update function enables the data view module to automatically update data displayed in a data view independently of data displayed in other static data views which may be present in a web page and which may only be updated by reloading the entire web page. In another embodiment, application programming interfaces (APIs) may be provided in the modified data view module which, when exposed, facilitate the building of customized data views by providing asynchronous update behavior for customized data view modules in a web page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895179&OS=07895179&RS=07895179
owner: Microsoft Corporation
number: 07895179
owner_city: Redmond
owner_country: US
publication_date: 20070625
---
Web site owners may simultaneously display information from several information service providers in multiple data views for users on a web page. For example an information services web page may simultaneously display live data such as weather forecast information news headlines stock quotes company information such as customer data and the like in multiple data views. In the past data views have been static which imposes several limitations on user interaction with displayed data. These limitations include having to reload the entire web page including data views which may not need to be updated or visit other pages in order to perform basic operations such as updating data adding data filtering data and sorting data.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are provided to create and manage data view modules for updating data on a web page without having to reload the entire web page to view the updated data. In one embodiment a static data view module for viewing web data is modified utilizing an asynchronous update function which provides asynchronous update behavior for the data view module. The asynchronous update function enables the data view module to automatically update data displayed in a data view independently of data displayed in other static data views which may be present in a web page and which may only be updated by reloading the entire web page. In another embodiment application programming interfaces APIs may be provided in the modified data view module which when exposed facilitate the building of customized data views by providing asynchronous update behavior for customized data view modules in a web page.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are illustrative only and are not restrictive of the invention as claimed.

Embodiments are provided to create and manage data view modules for updating data on a web page without having to reload the entire web page to view the updated data. In one embodiment a static data view module for viewing web data is modified utilizing an asynchronous update function which provides asynchronous update behavior for the data view module. The asynchronous update function enables the data view module to automatically update data displayed in a data view independently of data displayed in other static data views which may be present in a web page and which may only be updated by reloading the entire web page. In another embodiment application programming interfaces APIs may be provided in the modified data view module which when exposed facilitate the building of customized data views by providing asynchronous update behavior for customized data view modules in a web page.

Referring now to the drawings in which like numerals represent like elements various illustrative embodiments will now be described. is a network architecture diagram of a computer system that is configured to create and manage data view modules for asynchronously updating data on a web page. In one embodiment various components in the computer system may be configured using SHAREPOINT services technology developed by MICROSOFT CORPORATION of Redmond Wash. As is known to those skilled in the art SHAREPOINT services technology enables users to create maintain and present a collaborative environment to share information. Using the technology a user or organization can create a web site to provide and share information e.g. documents on a web server or web folder etc. for other users associated with the web site. For example users can use a number of document templates or fragments to prepare documents which are generated by members of a particular workgroup in a business organization. It should be understood that the embodiments described herein should not be construed as being limited to SHAREPOINT services technology and that other collaborative services technology from other developers and or manufacturers may also be utilized. The computer system and its components include functionality to communicate with other computing devices communication devices and or other systems and are not intended to be limited to the embodiments and examples described herein.

As shown in the computer system includes without limitation a web server which is in communication with a structured language query SQL database and also in communication with a client computer over a network . In one embodiment the web server may be configured to utilize SHAREPOINT services technology to create a collaborative environment for retrieving data from the SQL database and delivering the retrieved data in web pages to the client computer . In particular in accordance with one embodiment the web server may be configured as a SHAREPOINT platform and run the SHAREPOINT SERVER and SHAREPOINT SERVER FOR SEARCH application programs both of which are from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that web server application programs from other manufacturers may also be utilized to embody the various aspects of the technical features discussed herein.

In accordance with various embodiments the web server may include various program modules and application programs including without limitation server applications data view modules asynchronous update functions and modified data view modules . It should be appreciated that the aforementioned program modules and application programs may be utilized to create and manage modified data view modules which enable the asynchronous updating of data views on a web page without having to reload the entire web page. As is known to those skilled in the art and as defined herein a data view is a display area on a web page for viewing data which may be independent of other data also displayed on the web page the other data may also be displayed in one or more additional data views .

The server applications may be configured deliver web pages including content contained in the data view modules and the modified data view modules to the client computer . In an embodiment the server applications may comprise the SHAREPOINT SERVER and SHAREPOINT SERVER FOR SEARCH application programs discussed above.

The data view modules may be configured to display a data view which may include data retrieved from the SQL database . It should be understood that the data view modules are static and thus may only be updated upon the reloading or refreshing of a web page. It should further be understood by those skilled in the art that each of the data view modules may comprise a data form web part class which provides the functionality for displaying a data view on a web page.

The asynchronous update functions may comprise a function library including program code which may be utilized to incorporate dynamic functionality into static data view modules. In particular those skilled in the art should appreciate that the asynchronous update functions may be utilized to build on top of existing data form web part classes to create data views which may allow the updating of data which may include data filtering sorting and the viewing of additional data operations without having to reload or refresh an entire web page. In one embodiment the asynchronous update functions may comprise Asynchronous JavaScript and XML AJAX functionality. As is known to those skilled in the art AJAX utilizes a combination of a number of Web based technologies including extensible markup language XML and JavaScript which enables applications to make updates to a user interface without reloading the entire web page.

The modified data view modules may be configured to utilize the asynchronous update functions to display data in a data view on a web page which may be updated without having to reload or refresh the web page. In particular and as should be understood by those skilled in the art the modified data view modules may comprise a modified data form web part class which has been built from a standard data form web part class by referencing a library containing the asynchronous update functions and incorporating the functionality provided by these functions into the web part class e.g. by writing new program code into the class . It should also be understood in accordance with various embodiments that in addition to updating data without the reloading of web pages a data view corresponding to a modified data view module may also be configured to be updated asynchronously or independently of other data views which may be present on the same web page. The modified data view modules also include application programming interfaces APIs . As will be described in greater detail below with respect to the modified data view modules may be configured to expose the APIs to provide data view module developers access to the update functionality provided by the asynchronous update functions . Thus it will be appreciated that a data view module developer may call the exposed APIs to provide access to the asynchronous update functions when building on top of developer data form web part classes to create customized data view modules. The functionality of the modified data view modules will be discussed in greater detail below with respect to .

The SQL database is in communication with the web server and stores data . The SQL database may be utilized by the data view modules and the modified data view modules on the web server to retrieve the data for display in data views on a web page.

The client computer is in communication with the web server and may include a data view design application and a browser . As discussed above the client computer may be configured to receive web pages including data views from the web server . In accordance with various embodiments the data view design application may provide a user interface which may be utilized by a user to open a website select data from the SQL database for example for display in a data view by a modified data view module and insert the data view in a web page for viewing and for asynchronous updating in the browser without having to reload or refresh the web page. In accordance with an embodiment the data view design application may comprise the SHAREPOINT DESIGNER application program and the browser may comprise the INTERNET EXPLORER browser application program both of which are from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that application programs from other manufacturers may also be utilized to embody the various aspects of the technical features discussed herein. An illustrative routine for utilizing the data view design application to insert data views in a web page will be described in greater detail below with respect to .

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

As shown in the web server comprises a server computer which may include a general purpose desktop laptop handheld tablet or other type of computer capable of executing one or more application programs. The web server includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM .

The web server further includes a mass storage device for storing an operating system the server applications the data view modules the asynchronous update functions and the modified data view modules including the APIs . The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the web server . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the web server .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the web server .

According to various embodiments of the invention the web server may operate in a networked environment using logical connections to remote computers through the network which may be a local network or a wide area network e.g. the Internet for example. The web server may connect to the network through a network interface unit connected to the bus .

It should be appreciated that the web server may also be utilized to connect to other types of networks and remote computing systems. The web server may also include an input output controller for receiving and processing input from a number of input types including a keyboard mouse pen stylus finger and or other means. Similarly an input output controller may provide output to a display a printer or other type of output device. Additionally a touch screen can serve as an input and an output mechanism.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the web server including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the server applications the data view modules the asynchronous update functions and the modified data view modules .

The routine begins at operation where in response to user input the server applications retrieve a data view module to be modified. In particular a developer may select one or more of the data view modules to incorporate asynchronous update functionality contained in the asynchronous update functions .

From operation the routine continues to operation where in response to user input the server applications retrieve an asynchronous update function to incorporate into the selected data view module . As discussed above the asynchronous update functions may comprise AJAX functionality and be utilized modify static data views to create data views which may allow the updating of data which may include data filtering sorting and the viewing of additional data operations without having to reload or refresh an entire web page.

From operation the routine continues to operation where in response to user input the server applications modify the selected data view module using the retrieved asynchronous update function . As discussed above a modified data view module may be built from a standard or static data form web part class by referencing a library containing the asynchronous update functions and incorporating the functionality provided by these functions into the web part class e.g. by writing new program code into the data for web part class .

From operation the routine continues to operation where in response to user input the server applications insert the modified data view module e.g. one of the modified data view modules into a web page for displaying a data view. From operation the routine continues to operation where the inserted modified data module updates the displayed data view without reloading the web page. In particular and as discussed above the modified data view modules may be configured to utilize the asynchronous update functions to display data in a data view on a web page which may be updated without having to reload or refresh the entire web page and also which may be updated asynchronously or independently of other data views which may be present on the same web page. It should be understood that the modified data view modules in updating a data view without reloading a web page may be configured to perform a number of additional functions with respect to data in a data view. For example a modified data view module may be configured to allow a user to select a portion of the displayed data in a data view e.g. by hovering a pointer over a selected data portion with a pointing device and display a window with additional details concerning the selected data portion. As another example a modified data view module may be configured to allow a user to reorder tabular data by dragging and dropping columns so that the displayed data is presented in a different fashion e.g. a user could reorder customer data so that customer telephone numbers are shown before customer names . As still another example a modified data view module may be configured to filter displayed data as well as sort data e.g. tabular data such that the data is updated as a result of the filtering and or sorting operations without reloading the entire web page. As an example of filtering displayed data the modified data view module would enable a user typing in a search engine web page to view possible matches while typing and as the user continued to type the matches would be updated i.e. filtered from an original list without having to reload the search engine web page.

From operation the routine continues to operation where in response to user input the server applications may be utilized to disable the asynchronous update functionality in a modified data view module . In particular a modified data view module may be configured to include a property which will allow a user to turn the update functionality off from a default on state. Another property which may be included in a modified data view module may include a frequency setting for automatically updating a data view. For example a user may set a modified data view module to automatically update a data view every five seconds. From operation the routine then ends.

Turning now to a flow diagram illustrating a routine for selecting and inserting a data view module for asynchronously updating a web page data view in accordance with various embodiments will now be described. It should be understood that the logical operations making up the routine may be performed on the client computer in the computer system of utilizing the data view design application . The routine begins at operation where the data view module design application receives a selection of a data view module to insert in a web page. In particular and as discussed above the data view design application may provide a user interface which may be utilized by a user to open a website and insert a modified data view module from the web server for displaying a data view on a web page which may be asynchronously updated without reloading or refreshing the web page.

From operation the routine continues to operation where the data view design application in response to receiving a selected data view module generates a data list for insertion into the selected data view module . In particular the data view design application may be configured to communicate with the SQL database through the web server and generate the data list so that a user may select the data to be displayed in the data view generated by the selected data view module .

From operation the routine continues to operation where the data view design application receives the selected data from the SQL database for insertion into the selected data view module . From operation the routine continues to operation where the data view design application inserts the selected data view module and the selected data as a data view in the web page. From operation the routine then ends.

Turning now to a flow diagram illustrating a routine for building a customized data view module for asynchronously updating a web page data view in accordance with various embodiments will now be described. The routine begins at operation where a modified data view module receives an API function call on the web server . As discussed above the modified data view modules include APIs and may be configured to expose the APIs to provide data view module developers access to the update functionality provided by the asynchronous update functions .

From operation the routine continues to operation where a developer may utilize the exposed API to build a customized data view module on top of a modified data view module to asynchronously update data corresponding to the customized data view module on the web page. It should be appreciated by those skilled in the art that a function call to the exposed APIs provides web page developers access to the asynchronous update functions when building on top of developer created data form web part classes to create customized data view modules having asynchronous update functionality without having to manually write multiple lines of code. From operation the routine then ends.

Although the invention has been described in connection with various illustrative embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

