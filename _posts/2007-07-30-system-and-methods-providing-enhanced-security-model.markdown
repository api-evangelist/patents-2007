---

title: System and methods providing enhanced security model
abstract: The present invention relates to a system and methodology to facilitate security for data items residing within (or associated with) a hierarchical database or storage structure. A database security system is provided having a hierarchical data structure associated with one or more data items. The system includes a security component that applies a security policy to the data items from a global location or region associated with a database. Various components and processes are employed to enable explicit and/or inherited security properties to be received by and propagated to the data items depending on the type of data structure encountered or processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971230&OS=07971230&RS=07971230
owner: Microsoft Corporation
number: 07971230
owner_city: Redmond
owner_country: US
publication_date: 20070730
---
This application is a Divisional of U.S. patent application Ser. No. 10 691 999 filed Oct. 23 2003 and entitled SYSTEM AND METHODS PROVIDING ENHANCED SECURITY MODEL the entirety of which is incorporated herein by reference.

The present invention relates generally to computer systems and more particularly to a system and method that employs an enhanced security model in accordance with hierarchically arranged data items.

Modern operating systems drive many of today s technology based innovations by offering a platform for both hardware and software development while serving many diverse needs. These systems have evolved from more simplistic file management systems to more complex workstations that provide high end performance at reasonable cost. Such systems often include multi processing architectures high speed memory advanced peripheral devices a variety of system libraries and components to aid software development and intricate interleaved bus architectures for example. At the heart of these systems include sophisticated operating systems that manage not only computer related hardware but a vast array of software components having various relationships. These components are often described in terms of objects or classes having multi tiered relationships such as in a hierarchical tree arrangement for files and directories that are found in many data management systems.

Emerging technologies have spawned other type structures and models for storing and managing objects within a database. These include such hierarchical structures as containment hierarchies that enable multiple relationships between respective items or objects. Such hierarchies are often modeled as a Directed Acyclic Graph DAG and support multiple path relationships to an item from a root node of the containment hierarchy. Regardless of the type of data structure involved however security models have been applied to these systems to determine and facilitate how entities e.g. users or other components are permitted access to objects or items residing in the respective structures.

In many aspects current security models limit the effectiveness of operating systems to manage data both securely and efficiently. For example one security model implements security by associating an Access Control List ACL with every file or directory in a hierarchy. An inheritance model then provides support for specifying a default ACL for newly created items in a directory but subsequently if the ACL on a directory is changed the files and folders contained in the hierarchy under that directory are not automatically updated. Also ACL s specified at any directory can be propagated using higher level API s for example. Consequently every item can override security policy above it and specify an ACL at its level that either explicitly blocks further inheritance from above or merely re inherits when a newly created ACL propagates down the hierarchy. Unfortunately at a volume level since there is no single place where these different security policies are tracked they are generally tracked per item it is exceedingly difficult if not impossible to determine a resultant security policy at that level.

As mentioned above if a new ACL is specified at a directory it can be propagated down the hierarchy but this usually entails running operations on every file and directory in that hierarchy. For significantly large volumes this can take an inordinate amount of time. It is noted that even single instancing ACL s do not alleviate this issue since single instancing occurs regardless of containment paths. Thus if two hierarchies happened to have the same ACL on its contained items and if policy on one of them changed it would be incorrect to simply update the single instance table since that would change the policy on the other hierarchy as well.

Other problems with current security models involve the presence of hard links between items that present semantic problems when considered in conjunction with ACL inheritance. For example when an Item is created under a Folder it receives a default ACL from Folder. Creation of a subsequent link to the Item from a Folder does not change the security. However if a new ACL on Folder is applied to its hierarchy it changes the ACL on the Item as well. Subsequently if a new ACL is applied on Folder it then inherits down to the Item. Consequently who or whatever happens to write last overwrites the existing inherited ACL s. This type of security arrangement is at least confusing and more often unpredictable which is highly undesirable.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The present invention relates to systems and methods that provide a predictable and globalized security model for hierarchically arranged data items. Such hierarchies can include substantially any type of hierarchically arranged items such as common tree structures or more elaborate data structures such as a Directed Acyclic Graph DAG for example. In one aspect a security component is provided that enables security policies to be applied in more global manner such as from one or more security regions that are mapped within a database. These policies can include explicitly defined policies and or more generalized policies that can be inherited from various portions of a path or region associated with the type of data structure involved e.g. security policies applied in one manner for a tree structure and a subsequent manner for a containment hierarchy . Since respective security policies are applied at a regional or global level of a database as opposed to applying a separate security file per data item within a hierarchical structure the present invention significantly increases database performance. Performance increases are achieved by mitigating computing operations associated with conventional system security models that create manage a plurality of isolated security files that also continue to increase in quantity as data items are added to the database.

In another aspect of the present invention various components and processes are provided to enable security policies to automatically be associated with database items. These components define a security model that maps a security policy to a respective item depending on the type of data structure employed. For example in one type of database a containment hierarchy may include various holding relationships between items appearing in the hierarchy. The holding relationship may be employed to propagate a security policy for a respective item wherein the policy may include both an explicit portion e.g. defined by a system administrator and an inherited portion received from the parent and or other components associated with the item. Thus a rule can be modeled that enables an item to inherit a security policy along the branches of a path from a root of the hierarchy to the respective item in accordance with the hierarchical structure. Also if a more traditional tree arrangement is encountered such as in the case if there is one path between a root node of a tree to the respective data item then alternative mapping of security policies may be applied. By providing various approaches for mapping security policies depending on the type of hierarchy encountered the present invention provides a robust security model that facilitates system performance and promotes stability by mitigating uncertainty associated with conventional security techniques.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The present invention relates to a system and methodology to facilitate security for data items residing within or associated with a hierarchical database or storage structure e.g. hierarchical tree branching to various nodes . In one aspect a database security system is provided having a hierarchical data structure associated with one or more data items. The system includes a security component that applies a security policy to the data items from a global location or region associated with a database. Various components and processes are employed to enable explicit and or inherited security properties to be received by and propagated to the data items depending on the type of data structure encountered or processed. By associating security policies and or properties at a global volume or regional level of the database in contrast to the item level database processing operations are mitigated over conventional systems that generally link individual security files with respective data items residing in the database.

As used in this application the terms component tree model system and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Referring initially to a database security system and model is illustrated in accordance with an aspect of the present invention. The system includes a database having a security component or components that are administered from a global or regionalized location within the database can also be administered from remote locations outside the database . The database includes one or more hierarchical structures and . Such hierarchies can include substantially any type of hierarchically arranged data items illustrated as elliptical nodes such as common tree structures at or more elaborate data structures such as a containment hierarchy that is generally modeled as a Directed Acyclic Graph DAG . Although the tree and containment hierarchy also referred to as DAG are illustrated it is to be appreciated that the security model of the present invention can be applied to substantially any type of hierarchical data structure. As will be described in more detail below various processes and components are employed to administer security policies from the security component to the respective hierarchies and .

In one aspect of the present invention the security component enables security policies to be applied in more global manner such as from one or more security regions that are mapped within from the database . These policies can include explicitly defined policies or properties at and or more generalized policies or properties at that can be inherited from various portions of a path or region associated with the type of data structure involved. For example security policies can be applied in one manner for the tree structure and a subsequent manner for the DAG if desired.

As noted above various components and processes are provided to enable security policies to automatically be associated with database items. These components define a security model that maps a security policy from the security component to a respective item in the hierarchies and depending on the type of data structure employed. For example in one type of structure a containment hierarchy may include various holding relationships between items appearing in the hierarchy. The holding relationship may be employed to propagate a security policy for a respective item wherein the policy may include an explicit portion e.g. defined by a system administrator and or an inherited portion received from the parent and or other components associated with the item. Thus rules can be provided that enable an item to inherit a security policy along the branches of a path from a root of the hierarchy to the respective item in accordance with the hierarchical structure. Also if a more traditional tree arrangement is encountered such as in the case if there is one path between a root node of a tree to the respective data item then alternative mapping of security policies may be applied.

It is noted that database and or hierarchies can be modeled as an item store e.g. memory region in the database . The granularity at which security policy can be specified and enforced is generally at the level of various operations on an item in a given store. In general the security component or model specifies a set of principals that can be granted or denied access to perform these operations on an item through for example Access Control Lists ACL s . Respective ACL s are typically an ordered collection of Access Control Entries ACE s which are described in more detail below.

The security policy for an item can be described by discretionary access control policy and the system access control policy for example wherein these policies can be modeled as a set of ACL s. A first set Discretionary ACL DACL s describes discretionary access granted to various principals by a owner of the item while a second set of ACL s is referred to as SACL s System Access Control Lists which specify how system auditing is achieved when an object is manipulated. In addition to these lists items in an item store are generally associated with a security identifier SID that corresponds to the owner of the item Owner SID .

One aspect for organizing items in an item store is that of the containment hierarchy such as illustrated at . Generally the containment hierarchy is realized via holding relationships between items. For example holding relationship between two items A and B expressed as A contains B enables item A to influence the lifetime of the item B. Typically an item in an item store cannot exist until there is a holding relationship from another item to it. One exception to this rule is the root of the containment hierarchy. As noted above the holding relationship in addition to controlling the lifetime of the item provides a component for propagating the security policy for an item.

The security policy specified for respective items generally include two or more portions a portion that is explicitly specified for that item and a portion that is inherited from the parent of the item in the item store. The explicitly defined security policy for an item may also include two or more portions a portion that governs access to the item under consideration and a portion that influences the security policy inherited by its descendants in the containment hierarchy or other hierarchical structure. The security policy inherited by a descendant is a generally function of the explicitly defined policy and the inherited policy.

Referring now to an access control list and ordering component are illustrated in accordance with an aspect of the present invention. As noted above security policies are generally propagated through holding relationships in a containment hierarchy. Since the security policy is propagated through holding relationships and can also be overridden at an item the following describes how the effective security policy for an item is determined. For example an item in a containment hierarchy inherits an ACL along the paths from the root of the item store to the item. Within the inherited ACL for a given path the ordering of the various Access Control Entries ACE s in the ACL generally determines the final security policy that is enforced. The following notation describes the ordering of ACE s in an ACL via the ordering component .

The ordering of the ACE s in an ACL that is inherited by an item can be determined by the following rules 

The above rule stratifies the ACE s inherited from the various items in a path to the item I from the root of the containment hierarchy. The ACE s inherited from a closer container take precedence over the entries inherited from a distant container. Intuitively this allows an administrator the ability to override ACE s inherited from farther up in the containment hierarchy.

The following rule orders the ACE s that deny access to an item ahead of the ACE s that grant access to an item.

Turning to a system illustrates security policy distribution in accordance with an aspect of the present invention. The system deploys one or more security policies to a tree structure and or a DAG . In the case of a containment hierarchy being a tree there is one path from the root of the tree to the item and the item thus has one inherited ACL at . Under these circumstances the ACL inherited by an item matches the ACL inherited by a file item in existing security models in terms of the relative ordering of the ACE s within them. However when the containment hierarchy is a Directed Acyclic Graph DAG multiple holding relationships are permitted to items. Under these conditions there are multiple paths to an item from the root of the containment hierarchy. Since an item inherits an ACL along the paths the items are associated with a collection of ACL s as opposed to a single one are employed at .

It is noted that the above described model is different from the file system model where exactly one ACL is associated with a file or folder. Thus for the legacy interfaces the system can return an ACL associated with the particular path over which the item was accessed. However for item store models a set of ACL s associated with the item can be returned.

There are typically two aspects that are to be elaborated when the containment hierarchy is a DAG as opposed to a tree . In one aspect the model provides a description how the effective security policy for an item is computed when it inherits more than one ACL from its parents and how items are organized and represented affect the administration of the security model for an item store.

The following algorithm evaluates access rights for a given principal to a given item. Before proceeding with the algorithm the following notation describes ACL s associated with an item.

Inherited ACLs ItemId a set of ACL s inherited by an item whose item identity is an ItemId from it s parents in the store.

The above routine returns STATUS SUCCESS if the desired access was not explicitly denied and pGrantedAccess determines which of the rights desired by the user were granted by the specified ACL. If the desired access was explicitly denied the routine returns STATUS ACCESS DENIED.

It is noted that the sphere of influence of the security policy defined at an item covers the descendants of the item in the containment hierarchy defined on the item store. For items where an explicit policy is defined then the effect is similar to defining a policy that is inherited by its descendants in the containment hierarchy. The effective ACL s inherited by the descendants can be obtained by taking the ACL s inherited by the item and adding the inheritable ACE s in the explicit ACL to the beginning of the ACL unless a flag is set specifying that propagated ACE s are not to be inherited . This is referred to as the set of inheritable ACL s associated with the item.

In the absence of explicit specification of security in the containment hierarchy rooted at a folder item the security specification of the folder generally applies to all the descendants of that item in the containment hierarchy. Thus every item for which an explicit security policy specification is provided defines a region of similarly protected items and the effective ACL s for all the items in the region is the set of inheritable ACL s for that item. This would completely define the regions in the case of a containment hierarchy that is a tree. If each region were to be associated with a number then it would be sufficient to merely include the region to which an item belongs along with the item.

For containment hierarchies that are DAG s the points in the containment hierarchy at which the effective security policy changes is generally determined by two types of items 

Items for which an explicit ACL has been specified. Typically these are the points in the containment hierarchy where an administrator has explicitly specified an ACL and

Items that have more than one parent and the parents have different security policies associated with them. Typically these are the items that are the confluence points of security policy specified for a volume of items and indicate the beginning of a new security policy.

With the above definition the items in the item store fall generally into one of two categories those that are the root of a similarly protected security region and those that are not. The items that do not define security regions generally belong to one security region. As in the case of trees the effective security for an item can be specified by specifying the region to which an item belongs. This leads to a straightforward model for administering the security of an item store based upon the various similarly protected regions in the store.

The following discussion relating to is related to more detailed descriptions of security policies and or security implementations that may be employed in accordance with the present invention. For example although detailed bit mappings may be described it is to be appreciated that the present invention is not limited to the particular implementations so described e.g. other bit mappings and or implementations possible .

In general a security descriptor includes security information associated with a securable object. A security descriptor includes a SECURITY DESCRIPTOR structure and its associated security information. The security descriptor can include the following security information 

Applications should not directly manipulate the contents of a security descriptor. Application Programming Interface API functions can be provided for setting and retrieving the security information in an object s security descriptor. In addition there are functions for creating and initializing a security descriptor for a new object.

A discretionary access control list DACL identifies trustees that are allowed or denied access to a securable object. When a process attempts to access a securable object the system checks the ACEs in the object s DACL to determine whether to grant access to it. If the object does not have a DACL the system can grant full access. If the object s DACL has no ACEs the system denies attempts to access the object because the DACL does not allow access rights. The system checks the ACEs in sequence until it finds one or more ACEs that allow the requested access rights or until the requested access rights are denied.

A system access control list SACL enables administrators to log attempts to access a secured object. The ACE specifies the types of access attempts by a specified trustee that cause the system to generate a record in a security event log. An ACE in a SACL can generate audit records when an access attempt fails when it succeeds or both. Also an SACL can raise an alarm when an unauthorized user attempts to gain access to an object. Generally ACEs contain the following access control information 

A set of bit flags that determine whether child containers or objects can inherit the ACE from the primary object to which the ACL is attached.

In one aspect securable objects can arrange their access rights via the access mask format other formats possible illustrated in a mask in . In this format the low order 16 bits are for object specific access rights the next 7 bits are for standard access rights which apply to most types of objects and the 4 high order bits are employed to specify generic access rights that object types can map to a set of standard and object specific rights. An AS bit ACCESS SYSTEM SECURITY bit corresponds to the right to access the object s SACL.

Generic rights are specified in the 4 high order bits within the mask . Generally each type of securable object maps these bits to a set of its standard and object specific access rights. For example one type of file object can map the GENERIC READ bit to the READ CONTROL and SYNCHRONIZE standard access rights and to the FILE READ DATA FILE READ EA and FILE READ ATTRIBUTES object specific access rights.

Other types of objects map the GENERIC READ bit GR to the set of access rights suitable for that type of object. Generic access rights can be utilized to specify the type of access desired when opening a handle to an object for example. This is typically simpler than specifying all the corresponding standard and specific rights. The following table depicts possible constants defined for generic access rights.

Generally each type of securable object has a set of access rights that correspond to operations specific to that type of object. In addition to these object specific access rights there is a set of standard access rights that correspond to operations common to most types of securable objects. The following table depicts possible constants defined for standard access rights.

Item Ordpath This is the ordpath associated with the root of the similarly protected security region.

Explicit Item ACL This is the explicit ACL defined for the root of the similarly protected security region. In some cases this can be NULL e.g. when a new security region is defined because the item has multiple parents belonging to different regions .

Region ACLs This is the set of ACL s defined for the similarly protected security region associated with the item. This differs from the Inherited ACL s column when the explicit column has a non NULL value.

The computation of effective security for an item in a given store leverages the table . In order to determine the security policy associated with an item the security region associated with the item is analyzed and the ACL s associated with that region are retrieved. As the security policy associated with item is changed e.g. by directly adding explicit ACL s or indirectly by adding holding links that results in the formation of new security regions the security table should be kept up to date to facilitate that the above algorithm for determining the effective security of an item is valid. Possible algorithms to maintain the security table are as follows 

When an item is newly created in a container it inherits the ACL s associated with the container. Since the newly created item has one parent it belongs to the security region as its parent. Thus there is typically no need to create a new entry in the security table.

When an ACL is added to an item it defines a new security region for its descendants in the containment hierarchy that belong to the same security region as the given item itself. For the items that belong to other security regions but are descendants of the given item in the containment hierarchy the security region remains unchanged but the effective ACL associated with the region is changed to reflect the addition of the new ACL. The introduction of this new security region can trigger further region definitions for those items which have multiple holding links with ancestors that straddle the old security region and the newly defined security region. For such items a new security region can be defined and the procedure repeated.

When a holding link is added to an item it typically gives rise to one of three possibilities. If the target of the holding link i.e. the item under consideration is the root of a security region the effective ACL associated with the region is changed and no further modifications to the security table is generally required. If the security region of the source of the new holding link is identical to the security region of the existing parents of the item then typically no changes are required. However if the item now has parents that belong to different security regions then a new security region is formed with the given item as the root of the security region. This change is propagated to the items in the containment hierarchy by modifying the security region associated with the item. The items that belong to the same security region as the item under consideration and are its descendants in the containment hierarchy should be changed. When the change is made the items that have multiple holding links should be examined to determine if further changes are required. Further changes may be required if any of the items have parents of different security regions.

When a holding link is deleted from an item it is possible to collapse a security region with its parent region if certain conditions are satisfied. More precisely this can be accomplished under the following conditions 

If the removal of the holding link results in an item that has only one parent and no explicit ACL is specified for that item.

If the removal of the holding link results in an item whose parents are all in the same security region and no explicit ACL is defined for that item. Under these circumstances the security region can be marked to be the same as the parent. This marking should be applied to all the items whose security region corresponds to the region being collapsed.

When an explicit ACL is deleted from an item it is possible to collapse the security region rooted at that item with that of its parents. More precisely this can be achieved if the removal of the explicit ACL results in an item whose parents in the containment hierarchy belong to the same security region. Under these circumstances the security region can be marked to be the same as the parent and the change applied to the items whose security region corresponds to the region being collapsed.

In this case no new additions to the security table are generally required. The effective ACL associated with the region is updated and the new ACL change is propagated to the security regions that are affected by it.

Proceeding to of one or more security policies are defined for hierarchical structures. As noted above this can include common tree structures and other structures such as containment hierarchies. Also hybrid structures are possible having some aspects of tree arrangements and some aspects relating to containment hierarchies. Security policies can be provided in such devices as Access Control Lists having one or more Access Control Entries that describe the respective policy therein. At explicit and or inherited mapping rules are defined for the security policies. Such rules can include override functions in the case of explicit mappings whereas other rules provide for how policies will be mapped in a more complex arrangement such as a containment hierarchy whereby multiple holding relationships are possible. At ordering for respective rules and policies are determined. For example Access Control Entries can be arranged within the Access Control List depending on the type of structure and or hierarchical relationship encountered. At one or more security regions are defined for a given hierarchical structure. At one or more security policies are applied to selected regions defined at .

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 16 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 1102.3 Token Ring IEEE 1102.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the present invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly the present invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

