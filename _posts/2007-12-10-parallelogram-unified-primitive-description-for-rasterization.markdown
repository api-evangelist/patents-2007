---

title: Parallelogram unified primitive description for rasterization
abstract: In a graphics pipeline of a graphics processor, a method for a unified primitive description for rasterization. The method includes receiving a group of primitives from a graphics application, wherein the group includes different types of primitives and the types of primitives include line primitives, point primitives and triangle primitives. For each of the types of primitives, the method includes generating a corresponding parallelogram, wherein the parallelogram has four sides disposed along an x-axis and a y-axis, and computing an inside y-axis mid point and an outside y-axis mid point based on the four sides. The parallelogram is controlled to represent to each of the primitive types respectively by adjusting a location of the inside y-axis mid point or the outside y-axis mid point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08564598&OS=08564598&RS=08564598
owner: Nvidia Corporation
number: 08564598
owner_city: Santa Clara
owner_country: US
publication_date: 20071210
---
This application claims the benefit of the U.S. Provisional Application No. 60 965 044 filed on Aug. 08 15 2007 titled PARALLELOGRAM UNIFIED PRIMITIVE DESCRIPTION FOR RASTERIZATION by Hutchins E. et al.

Recent advances in computer performance have enabled graphic systems to provide more realistic graphical images using personal computers home video game computers handheld devices and the like. In such graphic systems a number of procedures are executed to render or draw graphic primitives to the screen of the system. A graphic primitive is a basic component of a graphic picture such as a point line polygon or the like. Rendered images are formed with combinations of these graphic primitives. Many procedures may be utilized to perform 3 D graphics rendering.

Specialized graphics processing units e.g. GPUs etc. have been developed to optimize the computations required in executing the graphics rendering procedures. The GPUs are configured for high speed operation and typically incorporate one or more rendering pipelines. Each pipeline includes a number of hardware based functional units that are optimized for high speed execution of graphics instructions data where the instructions data are fed into the front end of the pipeline and the computed results emerge at the back end of the pipeline. The hardware based functional units cache memories firmware and the like of the GPU are optimized to operate on the low level graphics primitives e.g. comprising points lines triangles etc. and produce real time rendered 3 D images.

The real time rendered 3 D images are generated using raster display technology. Raster display technology is widely used in computer graphics systems and generally refers to the mechanism by which the grid of multiple pixels comprising an image are influenced by the graphics primitives. For each primitive a typical rasterization system generally steps from pixel to pixel and determines whether or not to render or write a given pixel into a frame buffer or pixel map as per the contribution of the primitive. This in turn determines how to write the data to the display buffer representing each pixel. Various traversal algorithms and various rasterization methods have been developed for computing from a graphics primitive based description to a pixel based description e.g. rasterizing pixel to pixel per primitive in a way such that all pixels within the primitives comprising a given 3 D scene are covered.

Once the primitives are rasterized into their constituent pixels these pixels are then processed in pipeline stages subsequent to the rasterization stage where the rendering operations are performed. Generally these rendering operations assign a color to each of the pixels of a display in accordance with the degree of coverage of the primitives comprising a scene. The per pixel color is also determined in accordance with texture map information that is assigned to the primitives lighting information and the like.

A problem exists however with the ability of prior art 3 D rendering architectures to scale to handle the increasingly complex 3 D scenes of today s applications. Open GL is one of the widely used industry standard APIs Application Programming Interface used for creating 3D applications. Graphics hardware has developed specialized hardware to specifically accelerate OpenGL based processing. OpenGL hardware acceleration has to support a variety of drawing primitive types. Such primitive types include points lines and triangles.

One typical prior art solution is to create each of the types of primitives internally by using a single graphics primitive most commonly a triangle. A point for example which has non zero height and width is drawn out of two triangles. This process is inefficient however for at least 2 reasons 1 power and time are consumed by communicating the two triangles from the setup unit to the raster unit of the graphics processor and 2 rasterization of triangles usually has inefficiencies. The power and time requirements can be a problem if many relatively small points are being drawn. The rasterization inefficiencies are caused by partially covered rasterization tiles intersections with scissor and window boundaries and sparse coverage of sampling points. This problem is exacerbated if multisampling is used to support for example anti aliasing algorithms. The rasterization drawbacks also present obstacles in the scaling process where engineers continually strive to improve the performance and the efficiency of graphics processor architectures.

Thus a need exists for a rasterization process that can scale as graphics application needs require and provide added performance without incurring penalties such as increased power consumption and or reduced fabrication yield.

Embodiments of the present invention provide a method and system for a rasterization process that can scale as graphics application needs require and provide added performance without incurring penalties such as increased power consumption and or reduced fabrication yield.

In one embodiment the present invention is implemented as a method for a unified primitive description for rasterization in a graphics pipeline of a graphics processor. The method includes receiving a group of primitives from a graphics application wherein the group includes different types of primitives and the types of primitives include line primitives point primitives and triangle primitives. For each of the types of primitives the method includes generating a corresponding parallelogram wherein the parallelogram has either four sides or two sides and a bisector disposed along an x axis and a y axis. An inside y axis mid point and an outside y axis mid point are computed based on the four sides. The parallelogram is controlled to represent to each of the primitive types respectively by adjusting a location of the inside y axis mid point or the outside y axis mid point.

In one embodiment a setup unit of the graphics pipeline is configured to receive the group of primitives e.g. from a graphics application etc. and generate a corresponding parallelogram for each one of the group of primitives. In this manner a common primitive description in this case a parallelogram can be used to represent each of the different types of graphics primitives that may be produced by the graphics application. The setup unit can be coupled to communicate with a raster unit via an interface that is optimized for the transmission of these parallelogram parameters. The raster unit can be configured to correspondingly interpret the parallelogram parameters and efficiently rasterize pixels based on the parameters.

In one embodiment when the parallelogram parameters are interpreted by the raster unit the parallelogram parameters are configured to collapse into a triangle type primitive as controlled by the location of the inside y axis mid point or the location of the outside y axis mid point. In this embodiment the parallelogram bisector may be transmitted in lieu of one of the four parallelogram edges to facilitate the rendering of a triangle as half of a parallelogram. The parallelogram parameters are configured as a square to represent a point type primitive. The parallelogram parameters are configured as a rectangle to represent a line type primitive.

In this manner a common primitive description can be used to represent each of the different types of primitives that are produced by graphics applications. This attribute allows hardware of the setup unit and raster unit to be streamlined and optimized to efficiently rasterize all the different types of primitives that may be produced by a graphics application.

Reference will now be made in detail to the preferred embodiments of the present invention examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments it will be understood that they are not intended to limit the invention to these embodiments. On the contrary the invention is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore in the following detailed description of embodiments of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be recognized by one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of procedures steps logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure computer executed step logic block process etc. is here and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing terms such as processing or accessing or executing or storing or rendering or the like refer to the action and processes of a computer system e.g. computer system of or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

It should be appreciated that the GPU can be implemented as a discrete component a discrete graphics card designed to couple to the computer system via a connector e.g. AGP slot PCI Express slot etc. a discrete integrated circuit die e.g. mounted directly on a motherboard or as an integrated GPU included within the integrated circuit die of a computer system chipset component not shown . Additionally a local graphics memory can be included for the GPU for high bandwidth graphics data storage.

Embodiments of the present invention implement a method and system for a unified primitive description for rasterization in a graphics pipeline of a graphics processor e.g. GPU . The method includes receiving a group of primitives from a graphics application wherein the group includes different types of primitives and the types of primitives include line point and triangle primitives. For each of the types the method includes generating a corresponding parallelogram wherein the parallelogram has either four sides or two sides and a bisector disposed along an x axis and a y axis. An inside y axis mid point and an outside y axis mid point are computed based on the four sides. The parallelogram is controlled to represent to each of the primitive types respectively by adjusting a location of the inside y axis mid point or the outside y axis mid point thus allowing a common primitive description in this case a parallelogram to represent each of the different types of graphics primitives that may be produced by the graphics application. The setup unit can be coupled to communicate with a raster unit via an interface that is optimized for the transmission of these parallelogram parameters. Similarly the raster unit can be configured to correspondingly interpret the parallelogram parameters and efficiently rasterize pixels based on the parameters. Embodiments the present invention and their benefits are further described below.

The embodiment shows the four edges that comprise the parallelogram . These edges are mathematically defined and generated by a setup unit e.g. shown below in within the GPU and they represent the parallelogram within 3 D space. The parallelogram is shown disposed against the x axis and y axis since that is the plane of rasterization upon which the parallelogram will be rasterized e.g. by a raster unit shown below in .

The four edges are defined by edge equations that are used by the setup unit and the raster unit to determine what pixels are inside and what pixels are outside the parallelogram . Thus as a rasterization process proceeds from left to right a line of rasterization goes from outside to inside as it crosses either the upper in edge or the lower in edge and goes from inside to outside as the crosses either the upper out edge or the lower out edge .

In one embodiment the setup unit is further configured to compute an in y midpoint and an out y midpoint as shown in . The points are those points on the rasterization row e.g. a horizontal row at which the parallelogram switches from one edge to another. Thus as shown in the in y mid point is that point where a line of rasterization would transition between the upper in edge and the lower in edge . Similarly the out y midpoint is that point where a line of rasterization would transition between the upper out edge and the lower out edge .

After generating the parallelogram the setup unit transmits the information about the edges to the raster unit along with the midpoints to indicate the cross over point from upper edges to lower edges for the in and out edges respectively. This information comprises parallelogram parameters that are interpreted by the raster unit to rasterize the parallelogram into pixels.

When drawing a triangle the in or out y midpoint is set to be above or below the parallelogram causing the parallelogram to degenerate into a triangle. In the embodiment as described above when the setup unit wants to draw a triangle the setup unit causes the in y midpoint or the out y midpoint to be disposed above or below the parallelogram . In this situation the optimal architecture may be obtained by replacing the upper out edge with the bisector of the parallelogram in the output of the setup unit. This resulting relationship causes the parallelogram to essentially degenerate into a triangle. shows a case where the out y midpoint was moved to be below the parallelogram thereby causing the parallelogram to convert into the triangle . As shown in the out midpoint is below the triangle . The lower out edge is now ignored by the raster unit as it rasterizes the resulting triangle . With the parallelogram bisector contained in the upper out edge the raster unit can rasterize to the edge without requiring special hardware in the raster unit to compute the parallelogram bisector.

In one embodiment rasterization limits can be used to constrain the minimum and maximum valid Y values. In such an embodiment the minimum and maximum Y values e.g. of the 3 or 4 primitive points are computed and rasterization processing by the raster unit is constrained to the region between them. This allows the unused 4th edge e.g. upper in edge of a degenerate parallelogram to be ignored since the extra edge is outside the y min max region.

Each of the different types of primitives can be represented using a common unified primitive description such as the parallelogram as described above. For example the parallelogram generated by the setup unit can be readily used to represent the point primitive e.g. to represent points of various different sizes and the line primitive e.g. to represent lines of various different lengths thicknesses etc. . Additionally as described above the parallelogram parameter information produced by the setup unit can be used to represent the triangle primitive .

The embodiment shows exemplary components within the GPU that implement the functionality of embodiments of the present invention. The setup unit functions by receiving groups streams and the like of primitives from a graphics application executing on the host CPU e.g. CPU . The setup unit prepares this information for rasterization by the raster unit . The cache memory is optionally included and provides a high speed low latency memory to facilitate the rasterization of the pixels and functions by reducing the apparent latency of the local graphics memory .

The groups of primitives received by the setup unit include different types of primitives such as line type primitives point type primitives triangle type primitives and the like. As described above for each of the types of primitives the setup unit generates a set of parameters for a common unified primitive description e.g. a parallelogram .

The communications link between the setup unit and the raster unit and the corresponding link interfaces of the setup unit and the raster unit are streamlined and optimized to efficiently convey the parameters for the common unified primitive description preferably a parallelogram. For each of the different types of primitives that may be received from a graphics application executing on the computer system a set of parallelogram parameters are transmitted from the setup unit to the raster unit .

The use of the common parallelogram primitive eliminates any need or any requirement for any specialized hardware interfaces to handle special cases of primitive types. For example no special hardware interfaces are required to handle point type primitives or line type primitives. Additionally for example there is no need to geometrically expand the number primitives within a model by breaking down all of the primitive types into triangles e.g. breaking line primitives into two triangles primitives into two or more triangles etc. . As a result hardware of the setup unit and raster unit can be streamlined and optimized to run faster generating more rasterized pixels per clock and run requiring less power since the resulting geometry is less since fewer primitive types are used.

The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed and many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

