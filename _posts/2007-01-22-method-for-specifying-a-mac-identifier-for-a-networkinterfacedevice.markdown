---

title: Method for specifying a MAC identifier for a network-interface-device
abstract: One embodiment of the present invention provides a system that specifies a MAC identifier for a network-interface-device in a computing device. In this system, the network-interface-device is configured to connect to a network though a port. During operation, the network-interface-device receives data packets through this port, and accepts a data packet if the data packet contains a destination that matches the MAC identifier for the network-interface-device, which can be a universally-administered MAC identifier. The system is also configured to determine whether the network-interface-device supports one or more additional MAC identifiers. If so, the system adds and activates an additional MAC identifier. By activating the newly-added MAC identifier in the computing device, the system allows the network-interface-device to logically separate data packets based on MAC identifiers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08184631&OS=08184631&RS=08184631
owner: Oracle America, Inc.
number: 08184631
owner_city: Redwood Shores
owner_country: US
publication_date: 20070122
---
The subject matter of this application is related to the subject matter in a co pending non provisional application by Rajagopal Kunhappan Kais Belgaied and Eric T. Cheng entitled Method Apparatus and Program Product to Use Factory Defined Multiple MAC Addresses for Virtual NICs having Ser. No. 11 644 561 and filing date 21 Dec. 2006.

Networked systems exchange information across a network by sending data packets that encapsulate the information being exchanged. These data packets generally include a unique destination address or identifier for the data packet s destination destinations for multicast and broadcast packets . The uniqueness of the address identifier is in accordance with the definitions of MAC 48 EUI 48 and EUI 64 as defined used in networking standards known to one skilled in the art. Networked systems require that the address identifier be unique so that the data packet can be directed to its intended destination. The data packet also contains a source address identifier to identify which device resource emitted the data packet onto the network. One skilled in the art will understand that there are additional details related to broadcast and multicast data packets.

Each address identifier that complies with the previously referenced definitions comprises two primary fields. The first field is a 24 bit identifier often referred to as an organizationally unique identifier OUI which is uniquely assigned by the IEEE Registration Authority to a requesting organization such as a networking device manufacturer . The requesting organization is responsible for maintaining uniqueness by providing unique values for the second field which is the extension identifier . The address identifier is a concatenation of these two fields. Often an address identifier is permanently or semi permanently installed into a networking device or permanently or semi permanently associated with a specific service and is hence termed a universally administered MAC identifier or a burned in address identifier because the universally administered MAC identifier is commonly burned into a read only memory installed in a network interface card NIC or other network interface device .

The MAC 48 and EUI 48 definitions are syntactically indistinguishable from one another and are assigned from the same numbering space. The EUI 64 definition uses an expanded numbering space that provides an expansion of the currently available address identifiers. MAC 48 EUI 48 and EUI 64 are commonly referred to as the Media Access Control MAC address the MAC identifier the hardware address the Ethernet address etc.

For the rest of this disclosure the term MAC identifier is used to mean any address identifier that is used to identify a specific device or service on a network. One skilled in the art will understand that the terms MAC address and MAC identifier are equivalent can be used interchangeably and that for the rest of this document the use of one implies the use of the other.

The MAC identifier can be used by the layer 2 networking protocols. On the Internet the Address Resolution Protocol ARP converts an address in a layer 3 protocol for example an IP address to a MAC identifier.

A locally administered MAC identifier is assigned to a device by a network administrator and overrides the universally administered MAC identifier the burned in address . Locally administered MAC identifiers should not contain organizationally unique identifiers assigned by the IEEE but see the subsequent discussion on cloning . Locally administered MAC identifiers are distinguished from universally administered MAC identifiers by a bit in the MAC identifier.

A typical host network interface device includes a burned in MAC identifier. The burned in MAC identifier is inserted into the source field of a data packet when the data packet is transmitted by the host network interface device. Furthermore the host network interface device will examine all the data packets it receives and if the destination address identifier in the data packet matches the burned in MAC identifier the host network interface device will accept the information within the data packet. Generally the host network interface device will not accept data packets unless they are specifically addressed to the host network interface device addressed as a multicast recognized by the host network interface device or as a broadcast. However the host network interface device can be conditioned to be in promiscuous mode so that all data packets seen by the host network interface device are provided to the next protocol level and the host network interface device provides no data packet filtering. Data packets sent by the host network interface device contain the host network interface device s active MAC identifier in the source field of the data packet.

For the rest of this disclosure the term burned in MAC identifier refers to the universally administered MAC identifier the term active MAC identifier refers to the MAC identifier that is transmitted and or recognized by a networking device or service and the term spoofed cloned MAC identifier refers to a universally administered MAC identifier that is not the universally administered MAC identifier assigned to the network interface card by the device s manufacturer or a universally administered MAC identifier of another network interface device and the like .

There are situations where it is useful for the active MAC identifier to be other than the burned in MAC identifier a universally administered MAC identifier . Some devices allow the burned in MAC identifier to be changed. However it is more common to clone the MAC identifier by providing the device with a capability of accepting and using a universally administered MAC identifier other than the universally administered MAC identifier provided by the device s manufacturer. There are numerous reasons why the ability to specify the MAC identifier is useful. These reasons include providing support for Layer 2 authentication in a firewall system where the firewall monitors specific locally administered MAC identifiers that are periodically changed . Changing the MAC identifier is also useful when modifying a network if for example an internet service provider registers the universally administered MAC identifier of the device that directly connects to the ISP. Thus if a user changes the ISP connection device the user either must re register the universally administered MAC identifier of the changed connection device with the ISP or clone the universally administered MAC identifier of the prior device in the changed connection device.

Turning now to difficulties related to MAC identifiers when used within some virtualized computing environments. One example of a virtualized computing environment includes a host computer system that executes an operating system that can be a commonly used operating system such as Solaris LINUX or Microsoft Windows XP and or a specialized virtualization operating system such as a hypervisor or other virtual machine monitor . The host operating system or hypervisor manages the host computer s resources. The hypervisor can also mimic the hardware of a second computer system using any one or combination of techniques known to one skilled in the art such that installing the operating system on a virtual machine appears to be identical to installing on an actual physical computer.

A virtual machine monitor generally is an application program that executes subject to the host operating system and mimics the hardware of a second computer system whereas a hypervisor generally is an operating system that directly provides virtualization support for virtual computers. Both approaches provide a virtualized computing environment and this document uses the terms interchangeably.

The virtualized computing environment enables a host computer system to emulate other systems. For example a computer manufactured by SUN Microsystems that is executing the Solaris operating system and a hypervisor application can simultaneously execute programs in the host environment and at the same time mimic a processor such as one manufactured by Intel Corporation that is executing applications that use a windowing operating system such as one provided by Microsoft Corporation in a guest environment and at the same time can also mimic a processor manufactured by Sun Microsystems that executes an unstable research operating system that is prone to crash the emulated system all without disruption to the other virtualized computing environments executing in the real host computer. Thus critical errors in one virtualized computing environment that crash the virtual computer will not impact the other virtualized computing environments.

The virtual computers have one or more virtual network interface devices. A single host network interface device can be carved into multiple virtual network interface devices each needing its own MAC identifier. The virtual network interface devices behave just like any other real non virtual NIC for the rest of the system. NIC vendors are beginning to provide host network interface devices that have multiple universally administered MAC identifiers and or multiple address slots for storing additional MAC identifiers.

One difficulty when using a host network interface device in a host computer environment where that host network interface device is used to support guest environments is that the traditional host network interface device only has one MAC identifier. Thus without more each guest environment as well as the host environment uses the same MAC identifier which requires significant out of protocol processing to determine the actual destination for the data packet.

One way this problem is addressed is by configuring the virtual network interface device with a locally administered MAC identifier which is then used for emitting data packets through the network interface device and placing the host network interface device into promiscuous mode which allows all incoming data packets to be accepted by the host and distributing the received data packets to the appropriate virtual NIC in accordance with the MAC identifier in the destination field of the data packet.

There are a number of difficulties that arise when the host network interface device is operated in promiscuous mode. These include but are not limited to performance impacts on the host computer because each data packet on the network must be examined by a higher protocol layer as the NIC does not filter any data packet and security impacts because each data packet is copied into computer memory and thus jeopardizes network security for example a malicious user or administrator could capture passwords etc. .

Hence what is needed is a method and an apparatus for allowing virtual network interface devices to use additional MAC identifiers without the problems of the above described techniques.

One embodiment of the present invention provides a system that specifies a MAC identifier for a network interface device in a computing device. In this system the network interface device is configured to connect to a network though a port. During operation the network interface device receives data packets through this port and accepts a data packet if the data packet contains a destination that matches the MAC identifier for the network interface device which can be a universally administered MAC identifier. The system is also configured to determine whether the network interface device supports one or more additional MAC identifiers. If so the system adds and activates an additional MAC identifier. By activating the newly added MAC identifier in the computing device the system allows the network interface device to logically separate data packets based on MAC identifiers.

In a variation on this embodiment the system determines whether the network interface device includes a resource that supports one or more MAC identifiers. If so the system assigns the additional MAC identifier to the resource. For instance the resource may include slots for storing MAC identifiers such that adding a new MAC identifier involves adding the new MAC identifier to a slot and then activating it.

In a further variation the resource can include a multicast resource. Note that this multicast resource may allow the system to add an additional general purpose MAC identifier instead of limiting the system to only adding multicast MAC identifiers. For instance the system may use a slot in the multicast resource to store a general purpose MAC identifier instead of a multicast MAC identifier.

In a further variation the system selects the specified value of the additional MAC identifier randomly.

In a further variation the system selects the specified value of the additional MAC identifier from a specified block of universally administered MAC addresses.

In a further variation the system uses code in the computing device to track how many additional MAC identifiers can simultaneously be supported by the network interface device. This code supports adding removing and or modifying the additional MAC identifier.

In a further variation the computing device supports one or more computer applications which can request the additional MAC identifier.

In a further variation the computer application is a guest operating system that includes a virtual network interface device.

In a further variation the computer application selects a slot and activates one or more additional MAC identifiers.

In a further variation the computing device enables multiple guest operating systems to execute concurrently. In this variation the system allows additional MAC identifiers to be activated by a first computer application that manages allocating MAC identifiers for the multiple guest operating systems or individually by each of one or more guest operating systems.

In a further variation the computer application stores the value of the additional MAC identifier persistently which enables the computer application to use the same value across multiple sessions of the computer application.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the claims.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. This includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

One aspect of the technology disclosed herein teaches a method for specifying a MAC identifier for a network interface device configured to connect to a network through a port. The network interface device includes multiple universally administered MAC identifiers and can accept data packets received through the port responsive to whether the data packets contain a destination address matching any active MAC identifier. The method includes reserving a first universally administered MAC identifier from the multiple universally administered MAC identifiers and reserving a second different from the first universally administered MAC identifier from the multiple universally administered MAC identifiers where the first universally administered MAC identifier and the second universally administered MAC identifier are associated with a first and second resource of the network interface device respectively. The MAC identifier is then assigned to one of the first resource or the second resource is activated. Other aspects include apparatus logics including programmed general purpose logic custom circuitry or any combination thereof and program products for example tangible computer readable media storing program code that can be read and executed by a CPU or other programmed general purpose logic for example a computer to perform the method.

The computer can be connected to a shared data bus that is shared with a second computer . The shared data bus can support a shared network interface card . The shared network interface card either must be in promiscuous mode have two network ports each with a unique universally administered MAC identifier or use the subsequently disclosed technology to accept data packets from a single port that is associated with at least two active MAC identifiers.

The problem addressed by the technology described herein can also exist in a single processor system say the computer that includes more than one separately identifiable networked resource accessed through a single port to the network.

The right hand side of the configuration separator illustrates a virtual machine monitor configuration executed by the tangible computer processor that uses a host operating system to manage the memory I O etc of the tangible computer processor in a manner well known to one skilled in the art. As part of and or working in conjunction with the host operating system is the advanced host network interface device driver program that contains instructions executed by the tangible computer processor to perform the methods of the technology disclosed herein. The host operating system allocates resources and or provides services to a host application program one of which is labeled . One of the host application programs can be a virtual machine monitor that emulates a virtual machine environment such that the resources of a virtual computer including virtual devices such as a virtual network interface device can be managed by a virtual operating system . Executing within the virtual machine environment and under control of the virtual operating system can be one or more applications such as a guest application .

One skilled in the art will understand that the host application program and the virtual machine environment are both controlled and serviced by the host operating system to for example provide for the allocation of host memory and schedule execution by the tangible computer processor . Within the constraints of the resources allocated to the virtual machine monitor by the host operating system the virtual operating system controls the resources and execution of the guest applications including access to devices networks files and or other resources. As the virtual operating system initializes the virtual network interface device the virtual machine monitor invokes capabilities in the advanced host network interface device driver program of the network interface device as will be subsequently described.

Another example virtualized computing environment configuration that can be executed by the tangible computer processor is shown on the left hand side of the configuration separator . In this configuration a hypervisor that contains the advanced host network interface device driver program provides resource support for virtual computers such as a guest computer system .

There are many other possible configurations that support virtualized computing environments. The technology described herein can be applied to any of these and in particular can be applied to diagnostic programs test environments configuration environments hot backup environments etc.

For the rest of this document the term hypervisor will include any hardware resource management program such as an operating system diagnostic or stand alone program in an embedded system.

The technology disclosed herein treats the available MAC identifiers within a network interface device as a resource one skilled in the art will understand that one example of a network interface device is a Network Interface Card NIC . An entity for example a device a computer a specialized circuit and or executing program etc. that needs to use the network interface device first determines whether the network interface device has an available resource and if so reserves the resource uses the resource and when no longer needed releases the resource. Thus the entity that reserves the resource has complete responsibility for that resource. No other entity can access that resource. Where the network interface device is a network interface card the disclosed technology prevents MAC address stealing from underneath a virtual NIC . If some entity needs to modify a reserved MAC identifier that entity must coordinate with the reserving entity to do so.

The host network interface device is interfaced to a network through a port and if suitably capable includes a set of universally administered MAC identifiers. The host network interface device also has a set of slots. Each slot associates a resource with an active MAC identifier which can be a universally administered MAC identifier a spoofed cloned universally administered MAC identifier or a locally administered MAC identifier . The resource can be for example hardware or software executing on a computer that performs some operation on receiving a data packet containing the active MAC identifier. If the resource emits a data packet onto the network the source address in the data packet will be set to the active MAC identifier associated with the resource via the slot. In addition the host network interface device is conditioned to accept any data packet received through the port if the data packet contains a destination address that matches any one of a set of active MAC identifiers in an accept filter even if the host network interface device is not in promiscuous mode.

A guest operating system can include a virtual network interface device as a resource. The guest operating system or hypervisor initializes the virtual network interface device and invokes the virtual host network interface device association process to associate the virtual network interface device the resource with a slot in the host network interface device.

The slot also associates an active MAC identifier with the resource such that data packets emitted onto the network for the resource will have the source address of the active MAC identifier associated with the resource. In addition the host network interface device will accept data packets that have a destination address that match any of the active MAC identifiers. The accepted data packets will be dispatched to the resource associated with the slot active MAC identifier for example to the virtual network interface device . Thus the slots associate a resource and its active MAC identifier.

Thus the multiple MAC identifiers associated with the port can identify separate resources in or associated with the network interface device.

Where the network interface device is a NIC each slot generally associates a resource that will source and or sink data packets. Furthermore if the network interface device provides some other service or capability that can be invoked by receipt of a data packet that service can be associated with a specific active MAC identifier.

The virtual host network interface device association process initiates at a start terminal when invoked by a hypervisor and continues to a NIC feature decision process that can invoke the Address Support procedure subsequently described with respect to to verify that the network interface device has a multiple universally administered MAC identifier capability that allows multiple active MAC identifiers to be associated with a port. If this capability exists the virtual host network interface device association process continues to a reserve MAC address process that can for example invoke the Address Reserve procedure subsequently described with respect to to reserve one of the available slots in the network interface device.

If the network interface device is configured to automatically activate a universally administered MAC identifier when a slot is reserved the network interface device will associate one of its set of universally administered MAC identifiers with the slot and add that associated MAC identifier to the accept filter within the host network interface device. Thus the host network interface device will start accepting data packets that have the active MAC identifier in the destination field. In embodiments where the network interface device only reserves a slot and returns a universally administered MAC identifier from the set of universally administered MAC identifiers the virtual host network interface device association process will explicitly activate the provided MAC identifier for the slot as is subsequently described with respect to .

Next the virtual host network interface device association process continues to an overwrite MAC decision process that determines responsive to explicit programming system preference etc. whether the host network interface device is to associate a universally administered MAC identifier or a locally administered MAC identifier with the slot. If the universally administered MAC identifier is to be used and if the network interface device is configured to automatically add the associated universally administered MAC identifier to the accept filter the virtual host network interface device association process returns the reserved slot and its associated universally administered MAC identifier as it completes through an end terminal .

However if at the overwrite MAC decision process the decision is to associate a locally administered MAC identifier with the slot instead of a universally administered MAC identifier the virtual host network interface device association process invokes a specify locally administered MAC process to associate the locally administered MAC identifier with the slot which will cause the locally administered MAC identifier to be added to the accept filter such that the network interface device will start recognizing data packets addressed with that locally administered MAC identifier. One skilled in the art after reading the disclosure herein will also understand that a spoofed cloned universally administered MAC identifier can be used instead of the locally administered MAC identifier.

Looking now at the NIC feature decision process . If the network interface device does not have the expanded capability previously described the virtual host network interface device association process continues to a traditional network interface device configuration process that uses previously known methods for conditioning the network interface device to accept data packets intended for the virtual network interface device. This requires that the traditional network interface device be placed into promiscuous mode so that it will accept all data packets and its associated driver or daemon will distribute the received data packets to each of the active virtual computers. Other well known techniques are used to emit packets on the network that have the correct source MAC identifier.

If the network interface device has the multiple universally administered MAC identifier per port capability subsequent operation of the virtual host network interface device association process will reserve additional slots with their respective universally administered MAC identifiers and remove the reserved slot universally administered MAC identifier from an available slot pool. Each of the reserved universally administered MAC identifiers is unique.

If the well formed invocation decision procedure determines that the parameters are valid the Address Support process continues to a query network interface device capabilities procedure that acquires data defining the capabilities of the host network interface device either from the hosts network interface device itself or from other data sources that can provide the information such as a database . Once the capabilities of the host network interface device are determined the Address Support process continues to a multiple MAC capability decision procedure that examines these capabilities to determine whether multiple universally administered MAC identifiers were burned into the host network interface device.

If only a single universally administered MAC identifier was burned into the network interface device the Address Support process continues to a prepare return of universally administered MAC procedure that obtains the assigned universally administered MAC identifier from the network interface device or from the previously obtained capabilities and prepares that information for return to the hypervisor such that the hypervisor will be able to place the network interface device into promiscuous mode and prepare to distribute data packets to guest operating systems using well known techniques. Next the Address Support process continues to the return terminal to return the prepared information.

One skilled in the art will understand that other embodiments can return a failure status instead of returning the single universally administered MAC identifier of the traditional network interface device. In such embodiments the prepare return of universally administered MAC procedure is not needed and the Address Support process returns a failure status to indicate that the network interface device does not include a set of universally administered MAC identifiers.

If the multiple MAC capability decision procedure determines that the network interface device includes multiple universally administered MAC identifiers the Address Support process continues to an obtain capability information from NIC procedure that further queries the network interface device unless the information of interest is already provided by the query network interface device capabilities procedure for the total number of slots the number of available slots and other capabilities of the network interface device that may be of interest. Once the capability information is determined a prepare return of capability information procedure prepares the information to be passed back to the hypervisor.

If the well formed invocation decision procedure determines that the parameters are valid the Address Reserve process continues to a free slot decision procedure that determines whether there is at least one slot that has not been reserved. If no slot is available the Address Reserve process continues to the error handler procedure for processing as previously described.

If at the free slot decision procedure a slot is available the Address Reserve process continues to a reserve slot procedure that reserves one of the available slots as well as one of the available universally administered MAC identifiers. Next a prepare return of slot identifier and MAC information procedure prepares the return information. The return information comprises the slot identifier for the resource and can include the MAC identifier activated for that slot.

In some embodiments as the slot is reserved any one of the universally administered MAC identifiers from the available slot pool of burned in identifiers is reserved. In other embodiments a specific universally administered MAC identifier that is assigned to the slot is reserved.

As each resource attempts to access the host network interface device it receives a slot that associates a specific MAC identifier to the resource. For example when two resources need to use the host network interface device a separate slot and universally administered MAC identifier is assigned to each resource responsive to a resource access request. In some embodiments the universally administered MAC identifier is automatically activated by adding it to the accept filter. In some embodiments the universally administered MAC identifier is returned to the hypervisor to be replaced by a spoofed cloned universally administered MAC identifier or locally administered MAC identifier or used as is for explicit activation as is subsequently described with respect to .

In some embodiments the Address Reserve process can be invoked multiple times by a hypervisor or other computer program or invoked multiple times by separate programs. Thus the hypervisor can support multiple virtual network interface devices multiple resources by invoking the Address Reserve process as each virtual network interface device is initialized and thus reserves a slot for the resource that associates an active MAC identifier in the host network interface device with the resource.

In some embodiments the Address Reserve process can be invoked by different applications or computers such as illustrated in such as a diagnostic an operating system a hypervisor and a Solaris Zone Container.

One skilled in the art will understand that the association between slots and universally administered MAC identifiers can be created at the time the universally administered MAC identifiers are burned into the network interface device or can be dynamically associated at the time a slot is reserved.

If the network interface device has the multiple universally administered MAC identifier per port capability subsequent operation of the Address Reserve process will reserve additional slots with their respective universally administered MAC identifiers and remove the reserved slot universally administered MAC identifier from the available slot pool. Each of the reserved universally administered MAC identifiers is unique.

If the well formed invocation decision procedure determines that the parameters are valid the Address Unreserve process continues to a reserved slot decision procedure that determines whether the slot identifier references a reserved slot. If the slot identifier does not references a reserved slot the Address Unreserve process continues to the error handler procedure for processing as has been previously described.

If at the reserved slot decision procedure the provided slot identifier references a reserved slot the Address Unreserve process continues to a release slot procedure that removes the MAC identifier if any associated with the slot from the accept filter thus the network interface device will no longer accept data packets identified by that MAC identifier increases the number of free slots by one and marks the slot as being available. Next a prepare return success status procedure prepares the return information generally a success status and the Address Unreserve process completes through the return terminal .

If the well formed invocation decision procedure determines that the parameters are valid the Address Modify process continues to a reserved slot decision procedure that determines whether the slot identifier has been reserved. If the specified slot has not been reserved the Address Modify process continues to the error handler procedure and returns through the return terminal as has been previously described.

However if the slot has been reserved the Address Modify process continues to an assign MAC identifier procedure that first removes the MAC identifier that has been associated with the specified slot if any from the accept filter associates the locally administered MAC identifier with the specified slot and adds the new MAC identifier to the accept filter such that the network interface device will now accept data packets addressed to the new MAC identifier instead of the MAC identifier previously associated with the slot. Thus the Address Modify process changes the active MAC identifier for a specified slot.

The Address Modify process then continues to a prepare return of success status procedure to prepare status indicating success and then completes through the return terminal .

It is sometimes advantageous to determine what MAC identifier is assigned to a slot. illustrates an Address Get process that can be invoked by the hypervisor to obtain a slot s MAC identifier. The Address Get process initiates at a start terminal and continues to a well formed invocation decision procedure that validates any parameters provided in the invocation and performs any required initialization. If the provided parameters are not valid the Address Get process continues to an error handler procedure that performs any required event error logging associated recovery and preparation for return of failure status. The Address Get process then completes through a return terminal . The parameters can include a slot identifier.

If the well formed invocation decision procedure determines that the parameters are valid the Address Get process continues to a slot reserved decision procedure that determines whether the slot is currently reserved. If the slot has not been reserved the Address Get process continues to a select universally administrated MAC address procedure that selects the universally administered MAC identifier that has been burned in by the manufacturer for that slot for network interface devices that have a set of universally administered MAC identifiers that can be dynamically reserved for the slots the select universally administrated MAC address procedure can select a range of universally administered MAC identifiers for return . Once the universally administered MAC identifier s has been selected for return the Address Get process continues to a prepare return of selected MAC address procedure that prepares the selected MAC identifier s the slot allocation state and success status and then returns through the return terminal as has been previously described.

If at the slot reserved decision procedure the slot is allocated the Address Get process continues to a select MAC from accept filter procedure that retrieves the active MAC identifier associated with the slot if any and continues to the prepare return of selected MAC address procedure for prepare the active MAC identifier for return as previously described.

One skilled in the art will understand that the allocation of portions of the work between the host network interface device and procedures on the tangible computer processor is a design detail. The technology disclosed herein assumes an accept filter and some process to associate a resource and or slot with an active MAC identifier in the accept filter. The technology also assumes that the accept filter can hold two or more active MAC identifiers and that the accept filter interfaces to the network through a port such that the port can accept data packets having different unique MAC identifiers without being in promiscuous mode.

One skilled in the art and after having read the disclosure herein will understand that the process of using the network interface device that has the previously described capabilities can be included with a diagnostic an operating system a hypervisor and a Solaris Zone Container. Such a one will also understand that in multi processor embodiments such as shown in where a network interface device is shared between at least two of the processors that each processor can reserve a slot for its own use.

In one embodiment an implementation of a software interface implements the previously disclosed technology. A software interface is a rule set that enables access to the desired functionality. In the programming context a software interface is commonly referred to as an Application Programming Interface API . The subsequently described software interfaces can be implemented as programmed procedures as invocation of trap instructions or any other API technique known in the art. One skilled in the art will understand that there are many substantially equivalent API designs that can be used for this purpose and that those described below are but one example of an API that would fall within the claimed subject matter.

In this embodiment five software interfaces are added to a host operating system or hypervisor to enable a virtual client to have access to a network interface card. These software interfaces are 

The Address Support software interface can query a network interface device to return capability information about the device. This capability information can include the total number of slots universally administered MAC identifiers available to the network interface card and the current number of slots that are available those MAC identifiers in the available slot pool as well as other information such as the starting and ending universally administered MAC identifiers.

The Address Reserve software interface can reserve one of the available slots from the available slot pool. The reserved slot is now in use and the associated universally administered MAC identifier is now the active MAC identifier for the reserved slot. The interface returns the reserved slot identifier and its associated universally administered MAC identifier. The network interface card can add the reserved universally administered MAC identifier to the accept filter when the reserve slot identifier is returned. Thus data packets that are directed to a MAC identifier that matches one of the active MAC identifiers in the accept filter will be received by the network interface card and passed to the host operating system hypervisor. The slot identifier can be used by the Address Unreserve interface to return the slot to the available slot pool and to remove the associated active MAC identifier from the accept filter.

The Address Unreserve software interface can use the slot identifier provided to the host operating system by the Address Reserve interface to return the slot to the available slot pool. This removes the active MAC identifier from the accept filter and also makes the universally administered MAC identifier currently associated with the slot available for subsequent use. Thus data packets directed to the newly released MAC identifier are no longer recognized by the network interface card and are ignored in the course of normal operation of the network interface card. Note that the active MAC identifier removed from the accept filter need not be the universally administered MAC identifier associated with the slot identifier because subsequent software interface operations may have overridden the universally administered MAC identifier with a locally administered MAC identifier or a spoofed cloned universally administered MAC identifier.

The Address Modify software interface can use the slot identifier provided to the host operating system by the Address Reserve interface and a MAC identifier such as a locally administered MAC identifier a spoofed cloned universally administered MAC identifier or a universally administered MAC identifier provided by the network interface card to allow a virtual client to specify a MAC identifier for the specified slot. The network interface card can remove the existing active MAC identifier associated with the slot identifier from the accept filter and can add the provided MAC identifier to the accept filter.

The Address Get software interface can receive the slot identifier and in response returns the active MAC identifier in the accept filter associated with the specified slot identifier. In some embodiments if the slot is not reserved this software interface can return the universally administered MAC identifier associated with the specified slot identifier. The software interface can also provide the relevant reservation status.

When the guest operating system initializes a virtual network interface device it triggers the hosting hypervisor to allocate a resource. In one embodiment the hypervisor can execute programmed procedures that are consistent with the following pseudo code 

In this embodiment Address Reserve returns a boolean value to indicate whether the specified NIC was able to reserve a universally administered MAC identifier. If the NIC was unable to reserve a MAC for example if no entries are left in the available slot pool Address Reserve returns a FALSE and the hypervisor posts an error to indicate that the resource is not available thus a virtual network interface device would be marked as off line disabled or the like . The universally administered MAC identifier associated with the slot is removed from the available slot pool and added to the accept filter. Thus the universally administered MAC identifier becomes an active MAC identifier.

When the guest computer is turned off or when the guest operating system disables the virtual network interface device the hypervisor releases the active MAC identifier by 

If the hypervisor is conditioned to use a locally administered MAC identifier either by a request from the host operating system or by predefined preference or suchlike the hypervisor can activate the requested MAC identifier by 

One skilled in the art will understand that the available slot pool can be implemented as an unavailable slot pool with the appropriate logic transformations.

As used herein a procedure is a self consistent sequence of steps that can be performed by logic implemented by a programmed computer specialized electronics or other circuitry or a combination thereof that lead to a desired result. These steps can be defined by one or more computer instructions. These steps can be performed by a computer executing the instructions that define the steps. Further these steps can be performed by circuitry designed to perform the steps. Thus the term procedure can refer for example but without limitation to a sequence of instructions a sequence of instructions organized within a programmed procedure or programmed function a sequence of instructions organized within programmed processes executing in one or more computers or a sequence of steps performed by electronic or other circuitry or any logic. In particular a first reservation logic a second reservation logic an assignment logic activation logic and a locally administered MAC identifier assignment logic are such logics. In addition one skilled in the art will understand for example that the first reservation logic and the second reservation logic need only differ by the input value provided to the logic and thus a first invocation of a logic can be distinguished from a second invocation of the logic.

One skilled in the art will understand that the network transmits information such as informational data as well as data that defines a computer program . The information can also be embodied within a carrier wave or otherwise propagated across a network using electromagnetic signals visible or invisible light pulses signals on a data bus or signals transmitted over any wire wireless or optical fiber technology that allows such signal propagation. Programs and data are commonly read from both tangible physical media such as a compact floppy or magnetic disk and from a network. Thus the network like a tangible physical media can be considered a computer usable data carrier.

One skilled in the art will understand that the technology disclosed herein provides a novel solution to assigning MAC identifiers to a network interface device that has multiple universally administered MAC identifiers burned in the device.

From the foregoing it will be appreciated that the technology has without limitation the following advantages 

In one embodiment of the present invention the network interface device includes resources that support additional customizable MAC identifiers. For instance a network interface device may include a number of address slots into which the system can add additional MAC identifiers.

In one embodiment of the present invention a network interface device may include one or more address slots for system specified multicast MAC identifiers. Note that these slots do not need to be limited to multicast MAC identifiers. For instance the system may use such address slots to store additional general purpose MAC identifiers instead of multicast MAC identifiers.

Multicast techniques are typically used for the simultaneous delivery of information to a group of destinations. Multicast is similar to broadcast in that a single multicast packet may be of interest to multiple computing devices but typically an application on a specific computing device needs to register interest in a multicast stream before the computing device will accept the multicast packets from that stream. In multicast packets a multicast bit is set in the MAC identifier. In contrast the multicast bit is not set in unicast packets. When the multicast bit is set a portion of the MAC identifier is used to identify the multicast address group thereby allowing multiple simultaneous multicast streams to be distinguished from one another.

After a user registers interest in a multicast stream the computing device accepts data packets destined for the multicast MAC identifier associated with the multicast stream. If the network interface device on the computing device only supports hardware filtering for a single MAC identifier the network interface device switches to promiscuous mode and uses software filtering to identify packets with the specified multicast MAC identifier. As mentioned previously performing such filtering operations in software involves much higher overhead than hardware filtering resulting in reduced performance.

As mentioned previously some network interface devices can include additional hardware resources that can provide additional address slots for application and or network specific purposes such as multicast . For instance a network interface device may include functionality to perform hardware filtering on an application specified multicast MAC identifier. Hence such a network interface device may include a number of slots that can be used for such purposes and can provide application programmer interfaces APIs to access these features. These resources can be used to support additional customizable MAC identifiers.

In one embodiment of the present invention the system determines whether a network interface device supports one or more additional MAC identifiers and if so selects and activates an additional MAC identifier. By activating the additional MAC identifier in the computing device the system allows the network interface device to logically separate data packets. Note that if the network interface device includes sufficient resources to support multiple additional MAC identifiers the system may configure the network interface device to simultaneously reserve a mix of additional MAC identifiers for normal e.g. unicast traffic as well as additional protocol specific e.g. multicast specific MAC identifiers. Note also that only a small set of applications and or users typically use such protocol specific MAC identifiers leaving these resources available for other purposes.

In one embodiment of the present invention the network interface device includes a resource such as a default ring which may be associated with the universally administered MAC identifier that detects broadcast packets. Broadcast packets are detected and then copied to other active MAC identifiers in the system.

In one embodiment of the present invention one application such as the hypervisor manages the multiple MAC identifiers. This application queries the network interface device to determine whether it supports multiple MAC identifiers and reserves MAC identifiers on behalf of other applications in the system such as the guest system . After the hypervisor has set up the an additional MAC identifier for the guest system the guest system can interact with the operating system directly to send and receive packets directly via the advanced host network interface device driver program . In this embodiment the hypervisor can maintain information on the number of slots currently in use prevent MAC identifier collisions and enforce sharing of available MAC identifier slots between multiple applications and or virtual operating systems. In an alternate embodiment of the present invention each application and or virtual operating system can interact with the network interface device directly to reserve a MAC identifier.

As mentioned previously the technology disclosed herein treats the available MAC identifiers within a network interface device as a resource. As described previously for a network interface device with multiple universally administered MAC identifiers an entity that needs to use the network interface device first determines whether the network interface device has an available resource. If so the entity reserves the resource uses the resource and when the resource is no longer needed releases the resource. The resulting processes are similar to those described in with the difference that instead of selecting a universally administered MAC identifier associated with a slot the system can choose a slot from a set of available slots and can associate a system specified MAC identifier with that slot.

If the network interface device has the multiple MAC identifier per port capability subsequent operation of the virtual host network interface device association process will reserve additional slots with their respective system chosen MAC identifiers and will remove the reserved slot from an available slot pool. Note that each of the added MAC identifiers is typically unique.

The Address Add process process when combined with a network interface device that supports multiple system defined MAC identifiers can be substituted for the Address Reserve process in the variety of embodiments described previously. The Address Add process can be paired with an Address Remove process similar to the Address Unreserve process described previously where the Address Remove process uses a slot identifier returned by the Address Add process to remove a MAC address added by the Address Add process . The Address Remove process marks the address slot as unused and instructs the network interface device to stop filtering on the MAC address that is being removed from the address slot.

Note that the previously described Address Support Address Reserve and Address Unreserve procedures can be modified to provide Address Support Address Add and Address Remove procedures that reflect the Address Support Address Add and Address Remove processes described above. Note that the previously described Address Modify and Address Get processes and procedures can also be used by one skilled in the art to provide similar functionality for a network interface device that allows the specification of multiple MAC addresses. Moreover the modified Address Modify procedure can provide an interface for clients to specify a slot id and new MAC address to modify a MAC address that has previously been added. The modified Address Get procedure in turn can return the MAC address used for a given slot id.

In one embodiment of the present invention the system selects MAC identifiers randomly. Note however that while the address space for MAC identifiers is large the use of random MAC identifiers can lead to address collisions both among a number of randomly assigned MAC identifiers as well as with other universally administered MAC identifiers present on a given network. In an alternate embodiment of the present invention the system can select a MAC identifier from a block of MAC identifiers e.g. using an OUI allocated by a vendor for a specific purpose.

In a further embodiment of the present invention the system persistently stores the value of a MAC identifier for a given computer application so that the computer application can be configured to use the same value across multiple sessions. By using a persistent address across multiple sessions the system can avoid problems associated with updating MAC identifiers cached in other systems.

In summary a network interface device that includes several slots for system specified MAC identifiers can be used to provide functionality similar to that of a network interface device with multiple universally administered MAC identifiers. A system including such a network interface device can perform hardware filtering for a number of MAC identifiers thereby saving the overhead involved in software filtering.

The foregoing descriptions of embodiments of the present invention have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

