---

title: Technique for enabling network statistics on software partitions
abstract: A computer implemented method, data processing system, and computer program product for enabling network statistics to be collected per software partition. When an incoming data packet is received at the Internet Protocol (IP) layer of an operating system, the IP address in the incoming data packet is identified. The IP address in the incoming data packet is then compared against IP addresses stored in a hash table, wherein the hash table maps each IP address in the hash table to a software partition of the operating system. If an IP address in the hash table matches the IP address in the data packet, the software partition mapped to the located IP address in the hash table is identified. Network statistics collected for the incoming data packet are then associated with the software partition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07924829&OS=07924829&RS=07924829
owner: International Business Machines Corporation
number: 07924829
owner_city: Armonk
owner_country: US
publication_date: 20070430
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method data processing system and computer program product for enabling network statistics to be collected per software partition.

In an Internet Protocol IP network a message passing mechanism is used to send packets of data between a host machine such as a server computer on the Internet commonly referred to as a web server and a client machine such as user s computer connected to the Internet. The message passing mechanism consists of a transport protocol an upper level protocol and an application programming interface. The key standard transport protocols used on IP networks today are the Transmission Control Protocol TCP and the User Datagram Protocol UDP .

When a network packet is received by an operating system on the host or client machine the operating system kernel may begin to collect statistics from the packet about the performance of the system. A system s network performance is a common gauge users will look at to determine how the system is operating. Software partitions are used in some systems to provide an isolated environment within one operating system instance. However in systems which currently employ software partitioning network statistics that are collected reflect performance information about the overall system. In other words existing systems which employ software partitioning only allow network performance information to be collected about the overall system rather than collected for the individual software partitions. This limitation is due to the fact that software partitions share the same network devices with other software partitions and the general system in which they run.

The illustrative embodiments provide a computer implemented method data processing system and computer program product for enabling network statistics to be collected per software partition. When an incoming data packet is received at the Internet Protocol IP layer of an operating system the IP address in the incoming data packet is identified. The IP address in the incoming data packet is then compared against IP addresses stored in a hash table wherein the hash table maps each IP address in the hash table to a software partition of the operating system. If an IP address in the hash table matches the IP address in the data packet the software partition mapped to the located IP address in the hash table is identified. Network statistics collected for the incoming data packet are then associated with the software partition.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub NB MCH and a south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are coupled to north bridge and memory controller hub . Processing unit may contain one or more processors and even may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the NB MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB and other ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

In currently used systems network statistics may be collected to determine how the system is operating. However these network statistics are collected for the overall system rather than at the software partition level. Currently used systems cannot provide individualized network information since the software partitions share the same network devices with other software partitions and the general system in which they run. The illustrative embodiments provide a solution to the limitations in the currently used systems by providing a mechanism which enables network metrics to be gathered within the kernel to allow network statistics to be reported per software partition. With the illustrative embodiments network metrics for individual software partitions may be collected by breaking down an incoming network packet at the IP layer of the operating system and comparing the IP address in the incoming network packet to known software partitions.

In particular the illustrative embodiments create a hash table to map IP addresses to software partitions for this environment. Each time an IP address is created for a software partition the IP address to software partition mapping is added to the hash table. When a data packet arrives at the IP layer of the operating system as part of the normal processing of the packet the packet is broken apart to determine the IP address of the packet. The illustrative embodiments then compare the IP address of the packet with the IP addresses stored in the hash table. If a match is located in the hash table all metrics normally collected for the packet may be labeled as belonging to the software partition mapped to the matching IP address in the hash table.

In addition the packet may also be tagged in an unused section of the packet to identify the packet to all upstream methods as belonging to the particular software partition. Furthermore since inbound interface metrics have already been collected for this packet the inbound interface metrics for this software partition may be retrofitted at this point by associating previously collected network metrics with the software partition identified in the IP layer.

Outbound packets may also be easily tagged in the same unused section of the network packet while still in the process space of the software partition. Thus all outbound metrics may be quickly correlated to the software partition to which they belong and network metrics may be collected through the entire outbound route per software partition.

Kernel may collect statistics about the performance of the network. To enable the collection of network statistics per software partition kernel employs hash table and data system structures which correspond to software partition and such as partition data structure partition data structure and partition data structure . In this illustrative example hash table partition data structure partition data structure and partition data structure are located within kernel although it should be noted that these components may be located at any suitable location within the data processing system. Each time an IP address is created for a partition hash table is updated with a mapping which indicates the association between the new IP address and the partition. The mapping identifying a packet as belonging to a particular software partition may then be used to tag the packet in an unused section of the packet header with the unique identifier of the associated software partition.

The unique partition identifier placed in the packet header may then be used to associate all network metrics normally taken for the packet with the particular software partition. Kernel uses each data system structure to store the network statistics collected for the packet for each software partition. For example partition data structure stores statistics collected for software partition etc.

Network layer also is referred to as the Internet layer and handles the movement of packets of data around the network. For example network layer handles the routing of various packets of data that are transferred over the network. Network layer in the TCP IP suite is comprised of several protocols including Internet Protocol IP Internet control message protocol ICMP and Internet group management protocol IGMP .

When a packet is received at network layer as part of normal processing the packet is taken apart in order to determine the IP address in the packet. Once the IP address of the packet is known the kernel may then access hash table in to determine the software partition associated with the IP address. Prior to this point in network layer the software partition associated with the packet is unknown. Thus any network metrics collected at the previous link layer will not be stored in a particular partition data structure since at link layer the kernel does not know to which software partition the incoming packet belongs.

When the kernel determines from the hash table which software partition is associated with the IP address the metrics collected at network layer may be provided to the partition data structure corresponding to the software partition associated with the packet. Thus rather than providing all collected network metrics to a data structure for the overall system the metrics may be segregated out into separate partition data structures based on the IP address to particular software partition mapping in the hash table.

In addition at network layer an unused section of the packet header is tagged with the software partition identified in the hash table. The value tagged in the unused section of the packet header is the software partition identifier. Consequently the remaining layers of code through which the packet traverses e.g. transport layer application layer etc. may collect additional metrics and use the value tagged in the unused section of the packet header to index those metrics directly to the identified software partition s data structure. Thus the upstream layers of code do not need to lookup the software partition identifier in the hash table to determine to which partition the network metrics collected for the packet belong.

As previously mentioned network metrics collected at link layer are not indexed into a particular partition data structure since the kernel does not know at that time to which software partition the incoming packet belongs. At network layer the kernel may now update the metrics previously collected at link layer to indicate that these metrics collected for the packet also belong to the identified software partition.

Transport layer provides an interface between network layer and application layer that facilitates the transfer of data between two host computers. Transport layer is concerned with things such as for example dividing the data passed to it from the application into appropriately sized chunks for the network layer below acknowledging received packets and setting timeouts to make certain the other end acknowledges packets that are sent. In the TCP IP protocol suite two distinctly different transport protocols are present TCP and user datagram protocol UDP . TCP provides reliability services to ensure that data is properly transmitted between two hosts including dropout detection and retransmission services.

TCP segmentation and TCP checksum are used as an exemplary implementation of embodiments of the present invention and in no way limits segmentation offload and checksum offload to the TCP suite of protocols. In other embodiments segmentation offloading and checksum offloading may be used with any transport protocol for example user datagram protocol and other versions of TCP protocol.

Conversely user datagram protocol provides a much simpler service to the application layer by merely sending packets of data called datagrams from one host to the other without providing any mechanism for guaranteeing that the data is properly transferred. When using UDP the application layer must perform the reliability functionality.

Application layer handles the details of the particular application. Many common TCP IP applications are present for almost every implementation including a Telnet for remote login a file transfer protocol FTP a simple mail transfer protocol SMTP for electronic mail and a simple network management protocol SNMP .

When a data packet arrives at the IP layer of the operating system step as part of the normal processing of the packet the packet is broken apart to determine the IP address of the packet step . Once the IP address of the packet is known the kernel compares the IP address of the packet against the IP addresses stored in the hash table step . A determination is then made as to whether the comparison results in an IP address match step . If no match exists in the hash table no output of step the processing of the packet terminates thereafter. However if a match is found in the hash table yes output of step all metrics normally gathered for the packet at the IP layer may be labeled as belonging to a particular software partition associated with the matching IP address in the hash table or stored within a software partition data structure corresponding to the identified software partition step .

Next a tag comprising the software partition identifier may be inserted into an unused section of the header of the packet step . As the packet travels upstream through the layers of code the kernel may use the tag in the unused section to index directly to the software partition s data structure for collection of all metrics for the packet including all upstream and previously executed methods step . For instance when the layers of code following the IP layer collect additional metrics for the packet these layers may look at the tag to index directly to the data structure of the partition for metric collection without having to perform the lookup in the hash table. Additionally since inbound interface metrics were already collected for this packet prior to the IP layer the inbound interface metrics for the software partition may get retrofitted by associating the previously collected metrics with the software partition identified in the IP layer. In this manner all metrics collected for the packet may be identified as belonging to a particular software partition and may be labeled as such or placed in the data structure corresponding to the software partition to allow one to review the performance of the network based on the performance of each partition in the system.

The process begins when an outbound data packet is created step . A tag comprising a value identifying the software partition associated with the packet is inserted into an unused section of packet header step as the software partition with which the packet is associated is known. Thus no hash table lookup is necessary when tagging an outbound packet. As the packets go through the many layers to when it leaves the machine the unused field is checked to obtain statistics.

As the kernel collected metrics for the outbound packet traversing through the layers of code before leaving the machine the kernel checks the tag in order to index directly to the data structure of the software partition for the collection of the network metrics for the packet step . Prior to the outbound packet being sent from the machine the software partition information in the tagged section is removed from the packet header step .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM and a rigid magnetic disk.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

