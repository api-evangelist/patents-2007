---

title: Authored video programs
abstract: A storage medium is encoded with a video program created using authoring systems and methods. The processor-based authoring system removes an author from consideration of low-level configuration functions during authoring. The authoring system includes an authoring engine having an interactive graphical authoring interface, a data management engine, an emulator, a compiler, a multiplexer and a simulator. The authoring methods include the use of summary authoring data, a compiler that builds a skeleton-form layout structure comprising abstracted components that include movie chapters, menu buttons and command segements. The compiler resolves abstracted connections between combinations of the abstracted components to produce a video program. Instructions associated with the command segments and a configuration of the command segments within a video program video space and domain structure are abstracted the functional during authoring.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08180194&OS=08180194&RS=08180194
owner: APPLE Inc.
number: 08180194
owner_city: Cupertino
owner_country: US
publication_date: 20070227
---
This is a continuation of U.S. application Ser. No. 10 213 025 filed Aug. 5 2002 which issued as U.S. Pat. No. 7 200 836 which is a continuation of U.S. application Ser. No. 09 010 267 filed Jan. 21 1998 which issued as U.S. Pat. No. 6 453 459 all of which are incorporated herein by reference.

The present invention relates generally to mass data storage and retrieval and more particularly to apparatus and methods for authoring a digital versatile disk.

New mass data storage means provide not only for storing greater amounts of multimedia and other information but also for more interactive data retrieval by consumers. For example one such storage means is espoused by the DVD Specification for Read Only Disc Physical File Format and Video Specifications DVD Consortium 1997 hereinafter referred to as the DVD Specification . Other examples include further DVD related technologies e.g. DVD Audio DVD RAM etc. as well as non DVD technologies.

The Physical and File System portions of the DVD Specification defines the physical encoding and organization of data for storage on read only digital versatile disk DVD ROM media. The Video portion of the DVD Specification defines a data set DVD Video data set with which pre recorded DVD Video discs must confirm in order to assure proper reading decoding and playback when inserted into a media reader decoder DVD player . More specifically the Video portion specifies how control data and audio video presentation data are encoded and ordered within the data set. The control data determines how presentation of audio video data will proceed when the disc is played back on a DVD player and consists of low level state information data structures and instruction sets which govern what kinds of functions and user operations a DVD player can perform.

The DVD Specification is further hereby fully incorporated herein by reference as if repeated verbatim immediately hereinafter.

The process of encoding and authoring a DVD movie title as currently practiced includes a number of separate and distinct steps requiring similarly separate and distinct expertise. After movie production raw film and or video footage is edited the soundtrack is edited and mixed and a movie film or video master is created. This master is subsequently digitized encoded as video and audio streams and stored as data files. In accordance with the DVD Specification the Moving Pictures Expert Group MPEG 1 or MPEG 2 format is used to encode the video streams and any one or more of a number of specified formats e.g. MPEG 1 or MPEG 2 Audio Dolby AC 3 PCM is used to encode the audio streams. Graphic data i.e. still or moving images for creating menus and other presentation data is also created and stored in conventional graphic files. Finally authoring guidelines the encoded audio and video stream files and the graphic files are gathered for the authoring phase.

During authoring a DVD author utilizes the guidelines and file information to construct a DVD movie title. The authored movie title determines what a user of a resultant movie title will see and hear and what kinds of interactions the user can command when the movie title is played back by a DVD player. The author organizes the video audio and often author created subtitle files divides the movie into segments chapters creates menus and specifies low level instructions. The low level instructions will set parameters define fixed or optional jump points and their destinations and determine the order and options by which playback of still pictures movie chapters and associated audio tracks will proceed based on the user s menu selections and or use of other DVD player controls i.e. typically using a remote control device .

Once authored the author s organizational decisions subtitle chapter and menu decisions and low level instructions are compiled into control data and the encoded video audio and subtitle streams as well as the graphic data files are multiplexed into presentation data which together constitute the DVD Video data set. Finally this DVD Video data is converted into a disc image layout file which can be used to burn a write once DVD R disc or can be stored onto a tape to send to a DVD ROM manufacturing plant for creating a master disc which can then be used for replication.

Conventional DVD authoring systems comprise a computer system running an application specific DVD authoring program. An exemplary widely used conventional DVD authoring system is Scenarist II.

Scenarist II is essentially an attempted nearly direct embodiment of the DVD Specification. Using Scenarist II an author organizes data streams and constructs menus and DVD structures according to the DVD Specification. Top level structures i.e. up to 99 VTSs and VTSMs a VMG and a VMGM are constructed by selecting the structure type and then populating the structure with one or more low level command segments program chains or PGCs including movie or menu references. Throughout this process the author also selects from among available data formats as well as from among the numerous DVD options and requisite parameters using a number of provided lists and other data and parameter representations. Stated alternatively all structures and PGC parameters capabilities and references must be fully specified by the author on an ongoing basis during authoring.

Unfortunately the DVD Specification is very complex as are the conventional programs that attempt to embody it. Available options are extensive as are the numerous listings of options and parameters within programs such as Scenarist II. The potential combinations of structures and PGCs are also extensive and many such combinations will not ultimately result in functional DVD movie titles.

To make matters more difficult the PGCs i.e. basic and frequent constructs of the DVD Specification and therefore of programs such as Scenarist II are counter intuitive. Often many PGCs including both operative and so called dummy PGCs must be used in specific combinations to provide a DVD consumer with even the most basic control capabilities. Limitations imposed by the DVD Specification must also be considered throughout the process. Thus errors in planning and or programming might well remain undetected until after a substantial number of structures are formed. In addition given the sheer number of structures PGCs commands options and parameters involved identifying locating and correcting errors is difficult and time consuming.

Consequently while providing extensive low level control and an expedient authoring to compilation correspondence conventional authoring systems require an extensive expertise with regard to both the DVD Specification and the authoring system itself. Further even assuming such expertise authoring is extremely time consuming and is therefore typically very costly. In addition even assuming resolution of other factors the time and expertise required would likely prevent authoring of even a preliminary movie title as a directorial aid during the movie production process.

A further disadvantage of conventional authoring systems is that experimentation and all but necessary modification are often compromised due to time and cost considerations. Thus many DVD movie titles due to limited budget to support expensive authoring time provide a DVD consumer with only minimal playback control navigation flexibility and interactivity.

Accordingly there is a need for an authoring system and method that enables DVD authoring in a manner removed from the structures and low level instruction sets of the DVD Specification thereby reducing the time cost and complexity of the authoring process.

There is further a need for such an apparatus and method whereby authoring can be conducted in an intuitive manner while maximizing flexibility and access to features provided by or otherwise not in conflict with the DVD Specification.

The present invention provides a data processing system based authoring system and method that essentially removes an author from consideration of the structures and low level instruction sets of the DVD Specification. More specifically the present authoring system removes the ordered tasks associated with creating DVD structures and programming PGCs and replaces them instead with an interactive intuitive and graphical authoring environment.

The present invention further provides for flexible program flow in response to control events. Many interactive controls menu button destinations and other features that are possible in accordance with the DVD Specification can be specified by an author in multiple instances and according to quick intuitive and interactively modifiable selections. Thus the invention facilitates authoring of a DVD movie title by even an inexperienced author with context sensitive responsiveness to DVD consumer instructions and other DVD player generated events.

Accordingly a preferred embodiment of the present invention comprises an authoring engine having an integrated interface with which an author performs the above tasks a data management engine for storing and recalling authoring information a simulator for viewing progressive and or comparatively authored movie titles prior to compiling a compiler a multiplexer and an emulator for viewing authored movie titles after compiling and multiplexing.

Included within and facilitating the ability of these elements to remove an author from the DVD Specification are several abstractions. Preferably the interface provides such user abstractions as arranging movies i.e. data streams including video audio subtitles chapter points and other elements creating menu layouts i.e. menus menu buttons and still or moving images with or without sound and specifying connections among these arrangements and layouts each in a simple and intuitive yet highly flexible way. Further abstractions include a network or connection switching abstraction and a number of control and router PGC abstractions from which the connection switching abstraction is constructed.

Authoring instructions entered through the interface are preferably broken down into component parts and stored by the data management engine. The invoked compiler using only summary authoring information preferably constructs a skeleton form PGC layout structure comprised of PGC abstractions corresponding to the number of authored movie elements. The compiler then completes the layout structure according to author selected and default source target connections.

Further according to a preferred embodiment during playback of a resultant DVD movie title a source PGC abstraction is invoked in response to DVD player and or consumer instructions. The source PGC abstraction determines target information and transfers control through necessary router PGC abstractions to a target PGC abstraction. The target in accordance with the target information plays a movie chapter displays a menu or sets and or modifies one or more DVD parameter.

These and other objects advantages and benefits of the present invention will become apparent from the drawings and specification that follow.

For clarity sake the discussed embodiment herein will be directed primarily toward storage according to the DVD Specification and more specifically at authoring motion picture DVD ROMS movie titles . It should be understood however that the present invention relates to a broad range of program and data storage and retrieval utilizing a variety of media only a subset of which will be specifically identified herein. The types of DVD ROMS which can be authored are further in no way limited to movie titles. Other examples include but are not limited to music videos documentaries educational videos corporate training medical applications and other continuous play or interactive information which utilizes audio video and or other presentation data.

As illustrated in a preferred embodiment of authoring system according to the invention preferably comprises electrically connected hardware elements including input devices processor memory storage MPEG encoder decoder video I O device and audio I O device . Authoring system further comprises software elements including operating system authoring engine data management engine compiler simulator emulator and multiplexer .

It will be apparent to those skilled in the art that several variations of the authoring system elements are contemplated and within the intended scope of the present invention. For example given processor and computer performance variations and ongoing technological advancements hardware elements such as MPEG encoder decoder may be embodied in software or in a combination of hardware and software. Similarly software elements such as multiplexer may be embodied in hardware or in a combination of hardware and software. Further while connection to other computing devices is indicated as network I O wired wireless modem and or other connection or connections to other computing devices including but not limited to local area networks wide area networks and the internet might be utilized. A further example is that the use of distributed processing multiple site viewing information forwarding collaboration remote information retrieval and merging and related capabilities are each contemplated. Various operating systems and data processing systems can also be utilized however at least a conventional multitasking operating system such as Windows95 or Windows NT trademarks of Microsoft Inc. running on an IBM trademark to International Business Machines compatible computer is preferred and will be presumed for the discussion herein. Input devices can comprise any number of devices and or device types for inputting commands and or data including but not limited to a keyboard mouse and or speech recognition. The use of a keyboard and a mouse are exemplified throughout the discussion that follows. 

The block diagram illustrates in greater functional detail an authoring program of the preferred authoring system of . As shown authoring program comprises authoring engine which includes interface data management engine compiler simulator emulator multiplexer output DVD data storage and layout formatter user abstractions and PGC abstractions .

It is discovered through examination of the features supported by DVD players that the basic presentation data types and consumer controls available to an author of DVD movie titles can be generalized and then reconstructed as abstracted user data types and controls. Further despite the complexity of the DVD Specification many of its programming constructs can also be generalized and then reconstructed as abstracted DVD program chains PGCs operating within a further abstracted network or connection switching superstructure. Such user abstractions and PGC abstractions as integrated into authoring engine data management engine and compiler as illustrated effectively remove an author using authoring program from consideration of DVD Specification . These abstractions further remove such consideration without unduly limiting for most practical purposes authoring flexibility PGC efficiency or interactive responsiveness of a resultant DVD ROM among other factors. In addition these abstractions provide a framework of re useable components that are readily adaptable to further modification for providing improvements and for re use in a variety other DVD and non DVD applications.

Authoring program is preferably implemented in C an object oriented language for reliability updateability and other known generalized advantages of object oriented programming. Those skilled in the computer arts will appreciate however that despite such advantages other environments and or programming languages of various object oriented and non object oriented types can also be utilized.

Operationally an author enters authoring information and instructions for activating and controlling authoring program through interface portion of authoring engine . Authoring engine interactively receives entered information and commands by correspondingly adjusting interface portion invoking a further authoring program module sending entered authoring information to data management engine retrieving authored information from data management engine and sending and or retrieving presentation data from presentation data storage . Data management engine responds to authoring engine by receiving and storing authored information from authoring engine and or sending information which it retrieves from storage and or from a remote source to authoring engine . Simulator responds to authoring engine by retrieving authoring data from data management engine retrieving multiplexed presentation data from multiplexer and simulating an authored DVD ROM in conjunction with interface

Compiler responds to authoring engine by retrieving authored information from data management engine compiling the information and storing the compiled information .ifo files in output DVD data storage . Emulator responds to authoring engine by retrieving compiled data from output DVD data storage retrieving multiplexed data from output DVD data storage and emulating an authored DVD ROM in conjunction with interface . Multiplexer responds to authoring engine by receiving DVD parameter information from compiler retrieving presentation data from presentation data storage and combining the retrieved information and data in accordance DVD Specification . Multiplexer then stores the combined information and data DVD data stream or .vob file in output DVD data storage . Layout formatter retrieves the .vob files and .ifo files from output DVD data storage and combines these files into a single disc image file which it then stores in disc image file storage . The disc image file can then be sent through network I O to additional apparatus for further review processing and or for burning one or more DVD ROMs .

The screenshot illustrates a preferred authoring window which an author can utilize to select an arrangement of audio visual material including video segments video clips audio segments audio clips and subtitles hereinafter referred to collectively as performance data .

Authoring window is divided into movable modifiable and replaceable groupings or views and panels including presentation data panel performance assembly panel assembled elements panel log panel and preview video panel . Assembly panel is further divided into video assembly portion audio assembly portion and subtitle assembly portion which are collectively referred to herein as performance view and performance tools portion . Authoring window also includes authoring toolbar and menu bar . For clarity sake the following discussion assumes that a single continuous movie is being authored i.e. a movie having component video audio and subtitle data streams each of which begins at the start of the movie and ends at the conclusion of the movie .

Presentation data panel provides a display listing for each presentation data file that an author has selected and loaded for use in assembling movies and menus either during a current authoring session or when continuing a re initiated prior authoring session. File listings include file name file duration and file type parameters. File name lists the name of a file. File duration lists the playback duration of files such as video data files and audio data files. File type alternatively lists a file format which is generally indicated by a filename extension or a recognized data type such as video data or audio data. As will be further discussed presentation data file listings can be used interactively during an authoring session.

Performance assembly view of performance assembly panel is used by an author to graphically and interactively assemble loaded video and or audio data to add and assemble subtitles and or to add chapter points. For these purposes performance view includes video assembly portion audio assembly portion subtitle assembly portion and chapter assembly portion respectively. Video assembly portion is used by an author to assemble graphic objects referencing stored video data files video clips . As discussed these files once initially selected are listed in presentation data panel . Video frame thumbnails and are indicative of chapter points as will be further discussed herein.

Audio assembly portion of performance assembly panel is used by an author to receive graphic objects referencing stored audio data files audio clips . As with video clips audio clips once selected for use are listed in and selected from presentation data panel for arrangement purposes. Up to eight alternate language audio data streams or audio tracks exemplified by audio tracks through are available in accordance with DVD Specification . Audio bars and which represent author arranged audio clips have a length that reflects the playback time of the audio data represented. Separators are further indicators of chapter points as with video frame thumbnails and of video assembly portion . Audio tracks through further include audio encoding indicators audio format indicators track number indicators and selected language indicators which are indicative respectively of audio data file encoding and playback format selectable audio track number and modifiable language label . Language labels can be set by author selection or as is expected automatically by recognition of languages spoken in a recorded dialog of a respective audio track.

Subtitle assembly portion provides for entry retrieval and or editing of up to thirty two alternate language frame based subtitle sequences as exemplified by tracks and . Exemplary subtitle frames and illustrate textual subtitle contents. Subtitles are entered in a conventional manner using a conventional text editor not shown which is invoked by activating a subtitle frame e.g. by menu selection or double clicking and or by retrieving a pre existing subtitle file using for example presentation data panel . As with audio assembly portion subtitle portion includes selectable track numbers and modifiable language label indicators.

Performance assembly view also includes chapter assembly portion which is used by an author to graphically and interactively assemble chapter points. Chapter assembly portion includes wall clock reference offset clock author assembled chapter indicators through chapter time indicators through and reference time indicators through . Wall clock indicates a time within a video clip corresponding to a cursor position over chapter portion of assembly panel . Offset clock indicates the start time of a currently indicated video clip according to the reference timecode of a master tape i.e. from which the video data file was created . Chapter indicators through show chapter points i.e. points to which a DVD ROM consumer can advance as arranged during authoring. Chapter time indicators through and reference time indicators through display the elapsed time of corresponding selected chapter points from the start of a movie and from the start of a clip respectively. Reference times are typically recorded and thus can be selectively retrieved and displayed utilizing Society of Motion Pictures and Television SMPTE timecode.

As noted earlier performance assembly panel and the other panels and views of authoring window are replaceable. Tabs provide one alternative control structure for selectively switching between initiated or open authoring tasks for example to alternate between assembling presentation data of multiple movies for creating menu layouts and or for other authoring tasks. Other control structures include menu options not shown for selectively de coupling panels and transport enabling controls through and through and further for re coupling in the illustrated default arrangement in an author selectable arrangement and or interactively by an author. Panels can be resized and or re arranged among other window capabilities as will be understood by those skilled in the art in view of the discussion herein.

Assembly tools portion of performance assembly panel comprises selectable zoom controls through preview transport buttons including stop play and frame advance preview transport start time selector and stop time selector selected clip indicator and total clips indicator . Zoom controls through are used respectively for increasing the viewable data range of a selected area within performance assembly view of performance assembly panel for selecting a portion of performance assembly view for such viewing and for decreasing the viewable data range. Transport controls through provide video playback control when previewing a video clip audio clip and or subtitle data using preview video panel or when selecting a representative video frame in a video clip as a preview thumbnail as with exemplary thumbnails and . Transport control halts video audio and or subtitle playback transport control initiates continues playback and transport control provides for per frame step viewing as will be understood by those skilled in the art. Start and end time selectors and are used respectively for selecting and monitoring video audio and or subtitle playback position and for setting and monitoring a playback stop time.

Assembled elements panel provides interactive and selectable listings of authored contents of a current movie title including but not limited to movie volume movies and menus .

Log panel provides selectable progress reports and other information relating to decoding encoding of presentation data compiling and layout of a disk file format according to DVD disk format specifications . These reports are automatically created and can be accessed using log tabs exemplified by tabs and .

Preview video panel selectively displays a video frame corresponding to a cursor position over assembly panel chapter portion video assembly portion audio assembly portion subtitle portion and or chapter portion of assembly panel . In addition preview video panel is used for previewing video data using transport controls through start and stop time selectors and or directly invoking the panel using selection or drag and drop capabilities. As will be understood by those skilled in the art encoded video and audio files are decoded and buffered as needed for playback in a conventional manner using MPEG encoder decoder of . 

The following toolbar chart lists the respective elements of toolbar . It will be understood by those skilled in the art in view of the discussion herein that the toolbar elements can vary substantially and includes user defined expandable and replaceable elements. The elements shown are provided as defaults.

The flowchart illustrates by way of example and with reference to how an interface in accordance with the invention enables an author to assemble performance data and objects without consideration for structures commands or ordered tasks imposed by DVD programming specifications . Select open and drag and drop among other operations and clicking double clicking click and drag and other user actions associated with graphic interfaces are well known and will not be further expounded upon herein.

As shown in step an author initiates a new project volume by selecting new volume . In step the author initiates a new movie by selecting new movie . In step the author adds video and audio files to presentation data panel for potential use in the volume by movies and menus. In step the author can preview a video file in preview panel by dragging its icon in presentation data panel to preview panel and or if desired by invoking transport controls through preview timer and or other playback related controls. In step the author adds a selected video clip to the currently opened movie by double clicking its icon in presentation data panel or by dragging the icon from presentation data panel to video assembly portion of performance view . In step the author can select a video frame thumbnail other than a first frame for reference viewing by dragging the pointer of thumbnail timer and or by using transport controls through

In step the author can preview an audio file by selecting its icon in presentation data panel and using controls including stop play using start time and end time selectors and and or using other play related controls. In step the author adds a selected audio clip to a next available track of the currently opened movie by double clicking its icon in presentation data panel . Alternatively the author can add a selected audio clip to a specific audio track by dragging the icon from presentation data panel to a selected track in audio assembly portion of performance view . In step the author selects a language label by selecting selected language indicator and selecting a listed element.

In step the author opens a subtitle frame and enters subtitle information for display in a video frame during playback of video clips. In step the author selects a language label corresponding to the subtitle track containing the subtitle frame. If in step the author elects to add more performance data then the author returns to step .

In step the author moves a cursor within chapter assembly portion of performance view to view video frames available as chapter points. In step the author selects a chapter point. If in step the author elects to add more chapter points then the author continues at step .

In step the author selects an audio track number and optionally selects a subtitle track number and or playback start and or end times before selecting play button to preview playback of the video clip and the audio clip referenced by the selected track number.

The and flowchart with reference to generally illustrates responses by the preferred authoring program to an author s actions according to the invention. As shown if in step an author selects a movie assembled in a prior authoring session then in step data management engine loads related parameters and in step sends the parameters to authoring engine . Otherwise default parameters for a new movie are loaded in step .

In step authoring engine updates assembled elements panel and other affected interface elements to indicate the movie parameters. If in step the author selects presentation data files then data management engine loads and sends the respective presentation data file parameters to authoring engine in step which updates presentation data panel in step . If in step the author assembles one of the selected video clips then authoring engine accordingly updates video assembly portion chapter assembly portion and offset clock in step updates assembled elements panel in step and sends the video clip parameters to data management engine for storage in step . Similarly if the author assembles one of the selected audio clips in step then authoring engine updates the selected track of audio assembly portion in step updates assembled elements panel in step and sends the audio clip parameters to data management engine in step . If in step the author assembles subtitle data then authoring engine updates subtitle assembly portion in step updates assembled elements in step and sends subtitle data and parameters to data management engine in step .

If in step the author moves an interface pointer e.g. a mouse pointer within chapter assembly portion then in step authoring engine updates wallclock finds an I frame i.e. a video frame that is completely described without reference to other frames within the video clip corresponding to the mouse pointer position and displays the I frame in preview video panel . If in step the author assembles a chapter point then authoring engine updates video assembly portion and chapter assembly portion in step updates assembled elements panel in step and sends corresponding chapter parameters to data management engine in step .

The screenshot illustrates the preferred authoring window of with the performance data assembly panels replaced by panels for allowing an author to layout menus. More particularly menu layout panel and menu tools panel are selected sized and positioned to replace performance view of . An exemplary menu layout including graphic and textural images is shown in menu layout panel for purposes of illustration. Menu layout panel is used visually and interactively by an author to retrieve add place and modify menu elements using menu tools panel selections.

In accordance with the DVD Specification menu elements presentable to a DVD consumer can include a background image background an overlay image subpicture and up to twenty five buttons. For the present example author selected background is a multicolor design and author selected subpicture includes the textural information Dolby Demo Dolby Demo Play Both Demos and Main Menu. Four author created buttons through including button frames through are also shown. Each of button numbers through is added by authoring program in response to creation of a respective button for identification purposes i.e. during authoring and for use in compilation .

Menu tools panel comprises controls for implementing selectable menu element parameters and for selectably altering the display characteristics of elements within menu layout panel during an authoring session. For example color selection boxes and allow an author to choose a button outline color for display in a consumer viewing scenario when a button is not selected normal when a consumer points at the button selection and when a button is invoked action respectively. An author can also select the opacity of the buttons for these cases using opacity sliders and respectively. Similarly an author can select button shapes and other characteristics by selecting one of the layout feature tabs and utilizing the tool sets that appear in a respective tool set panel not shown . An author might for example utilize prior button shape color texture opacity and or normal selection and activation color combinations used with a prior authoring session as either a starting point for further changes or without further modification. Other parameter combinations might also be utilized. Safe area toggle allows an author to selectively display safe area indicator of menu layout panel which bounds an area that is assured to be displayed on a consumer television . Display controls and provide for altering the characteristics indicated which in light of the prior discussion will be understood by those skilled in the art without further edification.

Layout feature tabs also provide access to button ordering tools not shown . As with other authoring parameters an author can selectively utilize an existing order of buttons that will be traversed in a currently displayed menu when a consumer pushes directional buttons on a remote control device. An alternative order can also be set using any number of methods including but not limited to using a displayed remote control device or dragging an arrow from a starting point to an ending point. Such features and their operational characteristics given the foregoing will be understood by those skilled in the art without further edification.

The flowchart shows how the actions required for laying out a menu are consistent with those for assembling performance data. Once again authoring is visually and interactively achieved without requiring any specific ordering of actions. Therefore as with performance data assembly the specific ordering of actions is given for purposes of illustration only.

As shown in step the author selects background and subpicture files for inclusion in a menu layout. Selected files will appear in presentation data panel . In step an author adds a background and a subpicture to the current menu by double clicking on file listings dragging the files to menu layout panel or by using a similar method. In step the author draws i.e. drags a box around subpicture text forming a button frame thereby indicating button placement directly in menu layout panel . If in step more button frames remain to be added then the author returns to step .

In step the author selects a button and sets shape size opacity and other parameters using preset combinations and or color selection boxes and opacity sliders and and or other tools. In step the author sets the intra menu button order in the manner already described. If in step more menus remain to be created then the author selects add menu button in step and returns to step . New elements appear in assembled elements panel and control data i.e. relating to added elements and their layout characteristics are sent to data management engine as with performance data assembly.

The screenshot illustrates a further selectable configuration of the interface for linking together presentation data menu layouts buttons within menu layouts and available control functions of a DVD player. As shown connection view includes available targets panel and linking panel . Linking panel further includes available sources portion and connected targets portion . While connections view is active assembled elements panel can further be used as a selection means for navigating more quickly to a desired target within available targets panel .

Operationally an author forms a link or available connection simply by copying i.e. performing a copy action or dragging a target from available targets portion to a position in connected targets portion that is in the same row as a desired source in available sources view . As with assembling a movie and menu layouts an author can interactively remove move or otherwise modify links in a conventional manner. For example a link can be removed by deletion or a target can be moved or copied to another row in linking portion .

As with arranging performance data and forming menu layouts an author has easy and complete flexibility in adding interactivity to a consumer s viewing experience. A DVD movie can be authored for example such that entry and exit from a menu can be controlled by any available event. Referring also to the simulator window any menu button can further be linked to any DVD event including but not limited to a chapter point e.g. chapter point the end of chapter playback or depressing a DVD remote control device menu button and . A particular menu button can also be used as a target in multiple instances as might be creatively appropriate.

Thus for example a consumer interface can be quickly and easily created which is interactively responsive context sensitive to a consumer s actions. Stated alternatively an interface can be authored such that for example the conclusion of a specific chapter playback or menu button activation will determine a next chapter playback a next menu or even a next menu wherein an author selected menu button is highlighted.

Among the reasons for such ease and flexibility is that contrary to conventionally authored DVD movies program chains are not created during the authoring process. Similarly connections specified during authoring are not permanent hard wired . Rather program chains are not created until compilation and available connections are not fully resolved until playback each according to additional abstractions of the invention as will be further discussed herein.

The block diagram illustrates the structure of a preferred data management engine according to the invention. As illustrated data management engine only partially reflects the interface constructs and the structures of the DVD Specification. While reflecting interface abstractions e.g. a movie menu and connection based movie title description and DVD Specification requirements e.g. first play jump source data management engine is further structured as a flexible network of data storage and distribution objects that also reflects other abstractions of the invention.

One further abstraction for example is a model of a DVD player a consumer s controller and the compiled authoring instructions as an actively connection switched network. Within this network DVD program chains representative of action oriented authoring instructions routers perform switching among available connections in response to DVD player i.e. consumer instructions thereby re directing program flow and control. Control receiving program chains then perform more localized tasks e.g. such as displaying a menu . Stated alternatively a router program chain resolves an available connection from a DVD player control instruction to a receiving program chain which again routes control or executes the instruction. Further abstractions also include models of program chains for performing a common base functionality in a same or similar manner using a derived common program chain structure.

Such an arrangement provides real world flexibility and efficiency. For example data management engine supports authoring flexibility with regard to source target connections that are switchable. Further given the power of even conventional computer systems data management engine is sufficiently robust to enable the interactive operation of interface as well as minimal compilation times of compiler i.e. only milliseconds without direct interface or DVD program specification correlation. Data management engine is therefore also readily adaptable to interface variations and further interfaces as well as to compiler variations and other compilers supporting other DVD and non DVD data storage and or retrieval applications.

Referring again to and with further reference to data management engine comprises a root volume object which manages data management engine communication and storage. Volume object provides an interface for communicating messaged data to and from its component parts including title key jump source first play jump source media database DVD layout properties movies list menus list and connections list objects . Media database further includes media files list which stores pointers to media files referred to by the performance data arrangement as a result of authoring.

In addition each of the presentation data objects i.e. movies list and menus list and a connection sets list object contain links to other data management engine objects in the form of an object tree. More specifically movies list is linked to movie objects movie through movie M wherein M is the total number of movies authored for storage on a single DVD ROM movie title . Each movie object contains a respective track list object and a respective chapter list object . Each track list object contains respective track objects track through track T wherein T is the total number of tracks authored within a respective movie. Track through track T further contain clip lists which in turn contain clip objects clip through clip CL and wherein CL is the total number of clips in a given track within a given movie . Finally each clip object contains a respective clip properties object as exemplified by clip object .

Menu objects are structured in a manner similar to that of movie objects. Menus list object contains menu objects menu through menu N wherein N is the total number of menus authored for storage on a given DVD ROM. Each menu object further contains a respective button list object e.g. object each button list object contains a respective button objects button through button B and each button object is linked to a button properties object e.g. object . B indicates a total number of buttons in a respective menu.

Finally connections sets list contains respective connections lists i.e. connect list through connect list CL wherein CL is the total number of connections lists authored for storage on a given DVD ROM. Each connect list is further linked to respective connections objects i.e. connect through connect CN wherein CN is the total number of connections authored to facilitate flexible program flow and control. Each connections object through represents an action oriented switch between a respective source and a respective target as indicated by source pointer variable and target pointer variable as will be discussed further herein.

Where applicable each object includes an indexed object list having a pointer to each connected dependent object i.e. an object further down the tree as illustrated as well as a totals variable. The object list is updated to include new dependent objects as these objects are created instantiated to reflect for example an added chapter point or menu. Dependent objects are similarly removed from the object list according to authoring deletions. Totals variables are also updated during authoring to reflect each corresponding dependent object instantiation and deletion. Undo and redo operations are handled in a conventional manner using authoring instructions which are further conventionally stored within respective objects during each authoring session.

Using this structure data management engine breaks down or filters control data generated during authoring into its basic component parts for storage in a corresponding object s indexed data list. These basic component parts are then retrieved by authoring engine or retrieved and reconstructed into an applicable form by compiler as needed.

Operationally data management engine receives messages from authoring engine in response to and reflecting each author modification of a performance assembly menu layout or connection. Volume receives the message polls its contained objects list for a recipient object according to the message type and sends the message to the matching recipient object. If the message includes a reference to a title key source or a first play source which is author slectable in connections view then volume sends the message respectively to either title key jump source or first play jump source . Upon receipt title key jump source or first play jump source will accordingly store included data delete stored data or modify stored data.

If a received message includes a reference to a video audio or subtitle file then volume sends the message to media database . If the message contains an instruction to add a data element then media database stores the data which will include a pointer to a media file in media files list . If the message contains an instruction to delete a stored pointer then media database deletes the pointer. If the message contains an instruction to modify a stored pointer e.g. if the file was moved to a new location then media database locates and replaces the file pointer. Media database further updates its totals variable to reflect additions and deletions.

If a received message type relates to the content of a movie arrangement menu layout or connection then volume sends the message respectively to movies list menus list or connections list . Each of movies list menus list and connection sets list operates similarly to objects described thus far. Each parses through a received message for included control information sends the message respectively to a corresponding movie object menu object or connections list and adjusts its totals variable as needed.

A movie message for example will then progress down through the movie object tree and depending upon the message type will be filtered by track list track and then handled a matching clip or will be filtered by chapter list and then handled by corresponding chapter or by a clip properties object i.e. as illustrated . Menu layout data will similarly progress as illustrated down through the menus list tree being handled by a matching menu properties object and connections data will progress down the connection sets list tree until it is handled by a connection object with reference to its source pointer or destination pointer variables . Upon receipt a clip properties menu key end key menu properties or connection object will handle the message and store included data delete stored data or modify stored data in a similar manner as with media database object .

Each respective storage object stores authoring modifications in a sequentially indexed list according to its type i.e. each object name is illustrated to reflect the data type the object stores . Thus for example chapter points within a movie are stored from a first chapter point during playback to a final chapter point in the movie. Playback will however be determined by authored connections. The list accommodates added inserted or deleted data interactively by expanding or contracting about the addition insertion or deletion point.

While other data structures might be utilized interactively adjusted indexed lists and limited object definitions using even a minimally equipped computer are sufficiently robust to accommodate an author s input rate given the relatively small amount of data stored in each list. Alternative structures that might be used for example include but are not limited to a lesser number of objects each containing a less restricted dataset and or the addition of summary objects for storing total numbers of menus buttons and system other status and or statistical information. Such arrangements however have been found to add complexity with only moderate gains in application specific operational characteristics. Alternative data structures including but not limited to multi dimensional arrays multiple queues and linked lists stored locally and or remotely present similar tradeoffs.

Data management engine returns stored data to authoring engine in a manner essentially the reverse of that for storing data. Volume upon receipt of a request for stored data parses the request call for a data type searches its contained objects list for a corresponding object and forwards the request to title key jump source first play jump source media database DVD layout properties list movies list menus list or connection sets list . Movies list menus list or connection sets list upon receipt of such a request parses its available objects list and forwards the message correspondingly to a movie object menu object or connection list object and so on until the message is received by a last recipient object. The last recipient object then retrieves the requested data and sends the data in the reverse direction of request receipt until the data reaches volume . Volume upon receipt of the data sends the requested data to authoring engine . Error handling and messaging functionality are otherwise handled in a conventional manner. 

Data management engine further responds to queries from authoring engine for purposes such as totaling the number of data elements of a given type or for reviewing the contents of a particular object s data list. As with data storage and retrieval above data management engine receives a call from authoring engine requesting information. Volume parses the message polls its available objects list and sends the message to a corresponding object. For objects linked to a tree structure such as movies list menus list and connection sets list the message is forwarded down through respective objects as already discussed and a last recipient object will respond. If the message requests for example a total number of data elements of a given type then a last recipient will either poll its totals variable or if necessary poll its data list for corresponding data count the number of corresponding occurrences and return a response including the total. The response is sent back through the tree structure to volume which sends the message including the total to authoring engine . Given the relatively small number of objects alternatives such as asynchronous multiple messaging and in particular broadcast messages add some expediency but with unnecessarily added complexity.

As with the authoring engine interface objects the object types inter object messaging protocol and data objects utilized in data management engine in view of the disclosure herein will be apparent to those skilled in the computer arts. Preferably available object libraries from Microsoft are utilized. For example the preferred available objects and data lists utilize Standard Template Libraries and in particular Expandable Indexed Buffered Vectored Lists. Such objects provide robust response with the flexibility of expandable lists and indexed vectors for easy lookup in light of the typically small number of objects and datasets among other factors. As noted earlier however use of an object oriented architecture and or the specific data structures are not essential and many conventional alternatives can be utilized.

As discussed the particular arrangement of objects of the preferred data management engine is preferred according to its flexibility performance and adaptability among other factors. It should be noted therefore that any number of modifications will be apparent according to the teachings and within the spirit and scope of the invention.

As shown generally in compiler preferably operates on data entered through the authoring process into the interface of authoring engine and stored by data management engine in three stages. In step compiler builds an intermediate skeleton form PGC layout data structure. The skeleton form PGC layout data structure is preferably formed according to DVD program code segment program chain or PGC abstractions and a network abstraction according to the invention utilizing only summary data gathered from data management engine . Broadly stated each PGC abstraction is preferably comprised of pre determined command combinations wherein the number of PGCs of a given type and the number of command combinations of a given type e.g. button command combinations are determined according to either a default value e.g. typically one PGC or according to the number of corresponding authored element types. e.g. the number of menu buttons in a given menu .

In step compiler resolves source target connections as indices to source and target identifier information within data management engine . In step compiler replaces the indices with identifier information which is retrieved by further querying data management engine .

The preferred VMGM domain PGC layout structure includes a single title key PGC abstraction and a single movie router PGC abstraction . Thereafter the VMGM PGC structure includes 2 menu PGC abstractions e.g. and for each authored menu and a single PGC abstraction for each end command in each movie that an author for which an author has specified a connection. As will be discussed further each menu PGC abstraction pair includes a menu display PGC e.g. and and a menu button router PGC e.g. and .

Each VTS domain PGC layout structure e.g. includes a movie display PGC and a video title set menu VTSM area . VTSM area further consists of from one to four remote key router PGCs e.g. remote key router PGCs depending upon the number of different remote key commands necessary given the preferred layout structure to realize the chapter target connections selected using connection view . More specifically 

In each case an attempt has been made to minimize the number of PGCs without detrimental impact on flexibility. Thus while the number of PGCs is as indicated above complete authoring flexibility with regard to connecting menus menu buttons and presentation data without concern for limitations of the DVD programming specification is provided. Further the practical impact of resultant limitations is also minimized.

For example the number of remote key router PGCs per VTSM area calculation reflects that each chapter point abstraction requires more than four commands. This in turn reflects that only one hundred twenty eight commands are allowable in a single PGC chain in accordance with the DVD programming specification . While not essential placing each abstraction completely within a separated chains and in equal numbers throughout like chains provides an efficiently symmetrical structure. Since DVD programming specifications provide for up to ninety nine chapter points per movie a maximum of four PGC abstractions is required without detrimental impact in terms of connectability. Considering the same parameters and calculations for menus however it is seen that only twenty five menu buttons are available per menu without limitation on connectability. In practical terms however i.e. displaying a menu on a conventional television set this number does not present any practical detrimental effect.

The use of consecutive locations in the PGC layout structure greatly simplifies the task of finding specific PGCs relating to specific data types and further for resolving PGC connections. A movie title PGC will always be the first element a movie router PGC will always be the second element and a display menu PGC can always be located merely by adding a known constant plus two times the menu number etc.

Those skilled in the art will appreciate however in view of the discussion herein that the PGC abstractions provide for other than consecutively arranged elements as an indexed list in memory . Such alternatives for example include but are not limited to multiple lists queues and or multi dimensional arrays stored in memory in other media and or in more than one media either locally or in a distributed fashion as with data management engine . Such methods can be useful where more than one authoring location or other distributed environments are utilized.

The flowchart with reference to shows in greater detail how compiler constructs a preferred PGC layout data structure in an initial skeleton form. As shown compiler begins by storing a first play PGC abstraction a title key PGC abstraction and a menu router PGC abstraction into PGC layout structure in steps and respectively. Next in step compiler queries data management engine for a total number MenusTot of menus authored and in step initializes a menu pointer MenuPtr. In step compiler queries data management engine for a total number ButtonsTot of buttons authored in a current menu e.g. initially a first menu . MenusTot will specify the number of pre determined menu display and menu button router PGC abstractions i.e. menu PGC abstraction pairs that compiler will add to the structure while ButtonsTot will specify the number of commands that compiler will add to each PGC of a current menu PGC abstraction pair.

In step compiler adds a menu PGC abstraction pair to VMGM PGC structure corresponding to the existence of and the number of buttons in a current authored menu e.g. initially a first menu . If in step one or more menus are not yet added to VMGM PGC structure then in step compiler increments the menu counter and returns to step .

At this point compiler lacks any authoring information other than MenusTot and a respective ButtonsTot value for each current menu. A similar same lack of further authoring details will also exist for other PGCs in the skeleton form PGC layout structure. The preferred PGC and network abstractions of the invention however enable compiler to accommodate missing authoring details merely by inserting null values no ops into the commands of the abstracted PGCs for unknown connection information i.e. source target identification information . As discussed compiler will preferably resolve these no ops later in compilation. These abstractions further enable menu PGCs to be created independently of movies and movie arrangements. Thus independently created conceived menu PGCs provide extensive flexibility allowing an author to link any available menu button of any menu to any potential target using a user friendly interface such as the preferred connection view .

If instead in step all authored menu layouts are reflected by corresponding menu PGC abstraction pairs then compiler proceeds to step . In step compiler queries data management engine for the total number MovieTot of movies which compiler will use to create end commands VTSs and VTS contents. In step compiler initializes a current movie pointer MoviePtr as well as two counters EndTot and Remote . Compiler will use EndTot to count the number of available end of chapter conditions in each movie for which an author has specified connections and will use Remote to count the number of available playback interruption conditions i.e. by a user pressing a DVD player control typically on a remote control device for which an author has specified connections.

In step compiler queries data management engine for the total number of chapters ChapterTot in a current movie e.g. initially the first movie and in step initializes a current chapter pointer ChapterPtr . If in step the author has specified a target for the current chapter end of chapter condition i.e. using connection view then in step compiler increments EndTot otherwise compiler proceeds to step . Similarly if in step the author has specified a target for the current chapter remote control key playback interruption remote key condition then in step compiler increments Remote otherwise compiler proceeds to step .

The existence of authored connections is determined similarly for both end of chapter and remote key conditions. Preferably objects contain actual source and target identifier information i.e. corresponding to authored sources and targets while the connection objects e.g. contain pointers to data stored by these objects. Stated alternatively as a new potential source is authored a connection object is instantiated including a source pointer that points to the potential source and a null value target pointer if an author later connects such a source then the corresponding connection object target pointer value is replaced by a pointer to the target object. Subsequent editing by an author correspondingly deletes or instantiates a connection object and or changes a source pointer or target pointer value. 

Therefore compiler determines the existence of a connected end command by first querying each connection object for a source pointer pointing to the currently selected chapter object. Once found compiler checks the corresponding target pointer. A null value target pointer indicates an unconnected end command while a non null value target pointer indicates the existence of a connection. Remote key i.e. menu key in connections are similarly determined by finding an identifier in a current chapter menu key object e.g. finding the corresponding source pointer in one of the connection objects and then querying the connection object for the existence of a corresponding non null value target pointer.

Those skilled in the art in view of the foregoing will appreciate that considerable variation of the above structure will provide the same related or similar functionality. For example identifiers labels and even complete movie tree menu tree and or other objects could well be contained within or duplicated within the connections tree i.e. objects . A single connection object could also be used i.e. having a single list of all connections as could connection objects that remain despite the deletion of a source. Other variations are also anticipated. The current structure is however preferred in that it provides a compilation time of only a few milliseconds minimizes memory usage and further facilitates debugging emulation simulation and overall symmetry by separating these objects and their contained data . In simulation for example the restrictions imposed by the DVD Specification are not controlling and simulation can therefore more efficiently utilize authoring data directly from the preferred non integrated data management engine object structure.

Returning now to if in step more chapters remain in the current movie then compiler increments ChapterPtr and returns to step otherwise compiler proceeds to step . In step compiler adds a 1 4 PGC end command router PGC abstraction to layout structure . In step compiler creates a VTS domain for the current movie i.e. including a VTSM adding to the VTS domain a movie display PGC in step and adding a 1 4 PGC remote key PGC abstraction in step .

If in step more movies remain in the current movie title i.e. tested by comparing MovieTot with MoviePtr then compiler increments moviePtr in step re initializes EndTot and Remote in step and returns to step . Otherwise formation of a PGC layout structure in skeleton form has been completed.

The flowchart with reference to shows how compiler replaces the no ops in skeleton form PGC layout structure with indices i.e. source or target pointers to respective sources and targets and then further replaces the indices with element identifiers. In step compiler initializes a movie pointer MoviePtr to a first movie a chapter pointer ChapterPtr to a first chapter a menu pointer MenuPtr to a first menu and a button pointer ButtonPtr to a first button.

In step compiler queries data management engine i.e. connection objects for a source pointer to a next initially a first author connected button. As discussed earlier the connection object checks its source pointer for a corresponding source having a corresponding non null value target pointer. Since specific connection values rather than the existence of a connection as with are required in this case the query utilized results in the return of such a source pointer. In step compiler uses the returned source pointer to query data management engine for the corresponding target pointer and in step compiler uses the returned indices to query data management engine e.g. via volume menu and button list to button for the source and target identifiers corresponding to the source and target pointers. Then in step compiler replaces the current button command no ops of the current menu PGC abstraction pair with the returned identifiers.

If in step more buttons remain unresolved in the current menu then compiler increments ButtonPtr in step and returns to step otherwise compiler proceeds to step . If in step menus remain unresolved then compiler increments MenuPtr and resets ButtonPtr to one in step and then returns to step otherwise compiler proceeds to step .

Having resolved and replaced all menu button no ops compiler next resolves all chapter end command and remote key PGC abstraction no ops in a similar manner. Compiler queries data management engine for a next connected current chapter end command source pointer in step uses the returned source pointer to query data management engine for a corresponding target pointer in step uses the pointers to query data management engine for corresponding identifiers in step and replaces corresponding layout structure PGC commands with the returned identifiers in step . Similarly compiler queries data management engine for a next connected current remote key source pointer in step uses the returned source pointer to query data management engine for a corresponding target pointer in step uses the pointers to query data management engine for corresponding identifiers in step and replaces corresponding layout structure PGC commands with the returned identifiers in step .

If in step more chapters remain unresolved then compiler increments the chapter pointer in step and returns to step . If instead no chapters remain unresolved in the current movie then compiler proceeds to step . In step compiler queries data management engine i.e. via volume to media database of for all audio and video file references which reference the current movie. In step compiler invokes multiplexer which retrieves the referenced audio and video files and outputs a resultant multiplexed data file in a conventional manner and in accordance with the DVD disk format specifications of the DVD Specification.

If in step more movies remain unresolved in layout structure then compiler resets pointers for the next movie and first chapter in step and returns to step . Otherwise compiler in a similar manner resolves first play title key jump source and menu router no ops respectively in steps and . Then in step compiler saves the PGC layout structure as a stored file.

With regard to and total authored element values i.e. such as MenusTot and ButtonsTot are maintained on an ongoing basis in a corresponding list object or the functional equivalent of a list object as already discussed. For example movies list object in addition to a list for containing references to all instantiated movie objects also contains a variable for updating the total number of movies in a current movie title during the course of one or more authoring sessions. Similarly button list object contains a list of instantiated button objects e.g. through as well as a variable indicating the total number of buttons in menu . Other list objects similarly include ongoing totals which are updated during the course of authoring. One reason is that some early generation DVD players limit the available memory space for storing PGCs which correspondingly limits the number of elements e.g. menus menu buttons and chapters that the invention permits to be authored. These limits and or current totals are therefore selectively conveyed to an author through interface . Ongoing totals are also beneficial in that no time periods are required during compilation for calculating such totals.

As will be understood by those skilled in the art however total values might become unimportant for other than compilation purposes as DVD players are manufactured with increasing resources in conformance with the current DVD Specification in accordance with expanded DVD capabilities and in accordance with the requirements of non DVD systems. In such cases totals can alternatively be calculated during compilation.

The use of preferably pre determined PGC abstraction types comprising preferably pre determined command combinations and the preferred PGC layout structure are thus factors in providing a maximized authoring flexibility and efficient compilation among other benefits. Available connections remain completely flexible during authoring and in fact until substitutions are made for no ops during compilation. The preferred structures of PGC abstractions further add to compilation efficiency since a skeleton can be formed with only summary authoring data and then authoring details can be quickly added thereafter.

Details of the DVD Specification including but not limited to multiplexed data stream and DVD player configurations data formats protocols and loading of data are known to those skilled in the art and will therefore be discussed only to the extent required for an understanding of the invention.

DVD programming specifications provide that PGCs can reside along with the corresponding presentation data in virtual structures including a first play space a video manager VMGM and any of 99 video title sets VTSs each of which includes a video title set menu space VTSM . Among the limitations of this virtual structure however is first that a PGC in an initial VTS or VTSM cannot directly trigger i.e. jump to using a DVD jump command a PGC stored in another VTS or VTSM . For example while a PGC in an initial VTS can playback a chapter of presentation data and the conclusion of chapter playback can trigger a followup PGC the followup PGC cannot be stored in a different VTS. Similarly an initial PGC used to respond to DVD consumer menu button activation cannot trigger a second PGC which is stored in a different VTS. A further relevant limitation is that the format of performance data must remain constant within a given VTS. So for example a video data stream having one aspect ratio cannot be stored in the same VTS with another video data stream having a different aspect ratio.

The functional diagram illustrates how the preferred connection switching abstraction provides a flexible and robust functional superstructure within which movie title DVD player and interactively occurring consumer control events are routed and executed. In the figure VTS A and VTS A 1 exemplify any two different VTSs which have been created during compilation of a movie title. It should also be noted that the illustrated connection arrows only denote the path from one box i.e. PGC abstraction PGC or command set to another that can result from an author s use of connection view . Thus fewer connections than those illustrated might be authored and each path from one box to another is accomplished individually using a single jump command or a single transfer of control by a DVD player. The use of multiple connected arrows and shared arrows is used only for clarity sake since the alternative use of individual arrows between each pair of boxes might otherwise obscure the invention. 

Within each VTS only a movie display PGC abstraction operates as a control PGC i.e. directly controls menu and or movie display . For example VTS A includes movie display PGC abstraction and within its VTSM domain remote key PGC abstraction . Movie display PGC abstraction comprises a single PGC which includes a command set pre command for selecting a chapter and initiating playback of the chapter as well as an end command cell command that initiates routing upon the occurrence of an end of chapter playback condition. Remote menu key which denotes an automatic DVD player function traps and forwards a remote key condition i.e. user depression of a remote menu key which interrupts playback . Remote menu key router PGC abstraction of VTSM A sets the authored target for a corresponding remote menu key condition i.e. where a consumer presses a remote menu key during playback and then routes control to a corresponding movie PGC abstraction or menu PGC abstraction within VMGM . Other VTSs e.g. VTS A 1 are similarly structured for each movie within the current DVD movie title.

Each remote menu key router PGC abstraction includes up to 4 PGCs to accommodate the up to 99 chapter points per movie limitation of the DVD Specification. The first remote menu key PGC is always assigned as a root menu and is always a hardwired i.e. unalterable target for any remote menu key condition in accordance with the DVD Specification . Therefore in order to provide for chapter dependent routing of a remote menu key condition a DVD player system register must first be queried for the last played chapter. Using the returned last played chapter information program execution is then diverted to the corresponding authored remote menu key router PGC.

VTSM comprises the discussed menu display PGC e.g. and menu button router PGC e.g. abstraction pairs for providing menu control as well as the remaining router PGC abstractions. More specifically movie router PGC abstraction acts as a playback bridge between VTS domains receiving control from a remote key PGC in a first VTS e.g. remote key PGC of VTS and then forwarding control to a movie display PGC abstraction in second VTS e.g. movie play PGC of VTS . In contrast end router PGC abstractions e.g. and can be author connected to route control from an end of chapter condition to either a selected chapter in a selected movie or to a selected menu button in a selected menu.

As shown a separate PGC is provided for each author connected end of chapter condition. Each end command router PGC abstraction is paired with i.e. responds to a specific end command such that each end of chapter condition for a given movie will be routed from the end command to a unique end router PGC abstraction. Separate end command PGCs are required due to a flaw in current generation DVD players whereby the last played chapter is not reliably available at the end of chapter playback. Upon correction of this flaw in future generation DVD players however end command routing can be accomplished in a manner consistent with remote menu key PGC abstractions i.e. using only up to four end command router PGCs per movie .

A menu display PGC abstraction e.g. when it receives control as a target and thereafter while a consumer continues to depress menu navigation buttons effectuates control by highlighting a menu button and displaying the menu. If however a consumer activates a menu button then the DVD player initiates the corresponding router PGC abstraction e.g. which routes control i.e. according to an authored connection to either a movie display PGC or to a menu display PGC.

For clarity sake the first play PGC abstraction and title key PGC abstraction are not shown in . Each operates to transfer control to either a menu display PGC or a movie display PGC as with the end command router PGCs and menu router PGCs. First play PGC is stored in a separate DVD player storage location while title key PGC is stored in VMGM .

While those skilled in the art will appreciate in view of the discussion herein that considerable variation might be utilized iterative experimentation with different connection switching abstractions and DVD players has revealed a number of considerations. For example command execution delays will necessarily occur as a result of PGC execution and greater delays typically result from transfer of control between a VTS e.g. and and VMGM . Another example is that a delay occurring prior to the start of a movie is observed to be more acceptable than a similar delay during navigation through what can be a large number of menus. A still further example is that consistent delay periods for similar transitions is more acceptable than inconsistent delays for similar transitions.

Thus the preferred connection switching abstraction provides a generally symmetrical structure wherein delays are first minimized by source router target execution paths having a minimum number of PGCs and PGC commands. Movie display PGC abstractions are further placed similarly within each VTS while menu PGC abstraction pairs are placed similarly within VMGM . Note that an author typically only connects the end command of a last chapter within any given movie such that the DVD player will continuously play all chapters with the movie before control is routed outside the corresponding VTS . In addition movie router is only used for VTS to VTS transitions. This reflects for example that inconsistent delay between movie to movie playback and menu to movie playback is more acceptable than imposing further delay on menu to movie playback or other alternatives. For example further distribution and or re distribution of movie and or menu routing functions have been observed to produce subjectively less acceptable results. In addition movie router complexity and PGC length is therefore reduced. It should be understood however that these already short delay periods will further decrease as advances are made in DVD player technology and that the resulting decreasing importance of such considerations might well contribute to further connection switching abstraction variations.

The flowchart broadly illustrates the operation of preferred connection switching abstraction . In step first play PGC abstraction is invoked in response to insertion of a movie title into a DVD player. The first play PGC abstraction i.e. now the current PGC abstraction determines target information i.e. a target identifier and if needed target parameters . If in step a router is required then the current PGC abstraction routes the target information and control to a next router abstraction in step and operation returns to step . If no router is required in step then in step the current PGC abstraction routes the target information to the target PGC abstraction.

If in step the target is not a chapter i.e. playback of a chapter is not the resultant authored event then the target displays a menu i.e. according to the target information in step and the DVD player waits for a menu button to be selected i.e. step through act as a wait loop . If in step a menu button is selected then the current PGC abstraction sets authored target information for the selected button in step and operation returns to step .

If instead in step the target is a chapter then the target initiates playback of the chapter. If further in step a consumer invokes the remote menu key during playback of the chapter then the current PGC abstraction sets authored target information in step and operation returns to step . If in step the remote menu key is not invoked i.e. the chapter plays uninterrupted to its conclusion and a chapter end command target has been authored then the current PGC abstraction sets the authored target information in step and operation returns to step . If in step a chapter end command target has not been authored then operation continues in step .

If in step more chapters exist in the current movie then the DVD player increments the chapter number in step and operation returns to step . If instead in step no more chapters remain unplayed in the current movie then the player suspends playback and in some models switches itself off.

For clarity sake the operation of preferred connection switching abstraction will also be discussed by way of example with reference to . If for example an authored connection for first play is set to begin playback of a first chapter of a first movie stored in VTS A then upon insertion of the DVD movie title into a DVD player movie display PGC abstraction will be invoked. Movie display PGC will select and initiate playback of the first chapter.

If the first chapter playback is interrupted by a remote menu key condition then the DVD player will automatically trap the condition i.e. box and will initiate the root menu PGC of remote menu key router of VTSM A . Assuming further that less than 25 chapters exist in the first movie the root menu PGC of remote menu key router i.e. now the current source PGC abstraction will set the author selected target for the first chapter remote menu key condition and will route control to either movie router or a menu display PGC e.g. or within VMGM . If movie router receives control then upon receipt movie router further routes control to the author connected movie display PGC in this case movie display PGC of VTS A 1 which will set and initiates playback of the author selected chapter of the VTS A 1 movie.

If instead playback of the first movie is not interrupted and only the last chapter of the first movie includes an author connected end command then the DVD player will continue to play successive chapters of the first movie until the conclusion of the last movie. At the conclusion of the last movie the DVD player will execute cell command i.e. end command which will transfer control to the PGC in end router in VTSM that corresponds with the chapter last chapter played i.e. the last chapter of VTS A movie. Since in this case only one chapter in the VTS A movie has a connected end of chapter playback condition end router will include only the one corresponding PGC. 

Upon receipt of control from end command end router i.e. now the current source will set the corresponding author connected target included in end router . Assuming the target is the VTS A 1 movie end router will further route control to movie display PGC of VTS A 1 which will set and initiate playback according to the chapter of the VTS A 1 movie set by end router . Since control is not being routed from one VTS to another VTS movie router is not utilized. 

If instead the current source PGC of end router i.e. again the only PGC in end router in this example includes an author selected connection to menu N then end router will set target parameters and will route control to menu display PGC . Menu display PGC will highlight the button of menu N according to the received target parameters and will then display menu N . Menu display PGC will thereafter continue to be invoked by the DVD player and will continue to highlight a button and display menu N correspondingly with each successive uninterrupted i.e. by consumer selection of a conflicting DVD control function consumer depression of a navigation button. If however the consumer next activates a displayed menu button then the DVD player will invoke menu button router PGC . Once invoked menu button router PGC will set target parameters according to the author selected connection for the activated button and so on.

Attachment A attached hereto provides computer listings of preferred PGC abstractions source code according to the invention. For clarity sake compilation has already been completed. Stated alternatively the no ops initially included in the skeleton form PGC layout structure have been replaced by indices and the indices have been resolved to source and target identifiers using the discussed compiler and compilation methods.

As shown in attachment A the preferred PGC abstractions utilize a number of DVD player registers. According to the DVD specification each DVD player includes 16 general purpose registers GPs and 20 system registers SPs . The GPs are functionally undefined and merely available for use by movie title control program PGCs. Conversely the SPs have fully defined purposes consistent with DVD player operation and movie title control program interfacing.

The preferred GPs utilization and corresponding naming conventions according to the invention are indicated in the following chart. As shown PGC abstractions exclusively utilize only 5 GPs leaving a maximized number of remaining GPs available for adding further capabilities.

As illustrated by the register utilization chart GPs are utilized by source PGC abstractions primarily for designating i.e. resolving an available connection to target PGC abstractions and for passing to the targets parameters affecting target operation. The GPs are further utilized by target PGC abstractions primarily for establishing manipulating and recalling localized variables i.e. relating to a currently executing PGC command set .

For example at a time prior to initiating playback of a chapter a source PGC abstraction stores a value in GP stream select . That value will later indicate to a target PGC which audio subtitle and or angle stream is to be selected for movie playback. A further example is that at a time prior to routing control to a target PGC abstraction a source PGC abstraction stores a target s designation in a combination of registers GP Movie Number and GP Chapter Number for a movie target or GP Button Number for a menu target. Finally PGC abstractions preferably utilize GP to temporarily store values typically for use within a current PGC operation.

In most cases only a portion of a given register register bits are utilized while conversely a given register may be used for multiple purposes as seen in the utilization of GP in the register chart. Those skilled in the art will appreciate given the discussion herein that the preferred embodiment enables certain advantages. Among these are that a single register or register set can be designated in all cases for similar purposes thereby minimizing complexities the number of registers required and the number of commands required within a PGC without detrimentally affecting routing or parameter passing flexibility. Similarly operations required to parse register data containing multiple data values are not needed. Other arrangements consistent with the teachings of the invention however are likely in view of other applications facilitated by these teachings and in accordance with the scope and spirit of the invention.

While the present invention has been described herein with reference to a particular embodiment thereof a latitude of modification various changes and substitutions are intended in the foregoing disclosure and it will be appreciated that in some instances some features of the invention will be employed without a corresponding use of other features without departing from the spirit and scope of the invention as set forth.

