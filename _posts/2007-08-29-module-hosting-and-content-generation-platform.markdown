---

title: Module hosting and content generation platform
abstract: A module hosting and content generation platform in a social network site. In particular embodiments, a method includes receiving, from a network application, one or more module requests for module output data, wherein each module request includes a module identifier, an instance identifier, and user identifier, a module identifier; retrieving configuration information from the user configuration data store based on each of the one or more module requests; retrieving a module view definition from the module data store; generating the module output data by merging user configuration data with the retrieved module view definition; and performing additional processing operations based on the view type associated with the module; and transmitting the module output data to the network application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397212&OS=08397212&RS=08397212
owner: Yahoo! Inc.
number: 08397212
owner_city: Sunnyvale
owner_country: US
publication_date: 20070829
---
The present disclosure generally relates to module hosting and content generation in interactive network sites.

Interactive systems connected by wide area networks such as the Internet have steadily evolved into vibrant mediums for information exchange social interaction and sharing of digital media. Internet users typically maintain one or more accounts with various service providers that feature customizable personal pages such as personal home pages e.g. my.yahoo.com etc. personal pages on social network sites e.g. facebook.com myspace.com etc. and the like. To enhance the utility and customization of such pages to end users service providers sometimes allow users to customize their pages with one or more functional modules or widgets hereinafter referred to as modules .

In web or Internet environments these modules can include hypertext markup language HTML code and scripts such as JavaScript and Asynchronous JavaScript and extensible markup language extensible stylesheet language AJAX that execute within the context of a client application such as a browser to achieve a variety of useful or entertaining functions. For example modules can be developed to display content such as blog entries news headlines or podcasts obtained from Really Simple Syndication RSS feeds. Other modules can be developed to display a slideshow of photos hosted on a content aggregation site such as flickr.com. Other modules can display real time stock quotes. In many instances the modules appear in a base HTML document as frames or Inline Frames iframes which make it possible to embed another HTML document inside the base HTML document. The service providers maintaining these customizable pages may develop a number of modules from which users may select and add to their pages.

The present invention provides a method apparatus and system directed to providing web pages and other documents to users that include one or more modules. In particular embodiments the present invention utilizes modules to output information to be displayed on customizable pages of users such as customizable home pages personal pages on social network systems and the like. Modules are functional components associated with a personal page and display various module output data e.g. personal profile media player content RSS feeds etc. in module regions on the page. A module hosting platform provides module output data to a network application which in turn merges the module output data into a base template and returns the page to the user. In addition a given page may be configured to include more than one instance of a given module. Each instance of a given module may be based on different configuration information. As such the network application may generate different information for each module instance.

Database system is a network addressable system that hosts a database application and may operate in conjunction with a variety of network applications such as a social network system a customizable user home page e.g. my.yahoo.com etc. Database system is accessible to one or more hosts such as network application server over a computer network. In one embodiment database may store various types of information such as user account information user profile data addresses preferences page layout information and or financial account information. Database may also store content such as digital content data objects and other media assets. A content data object or a content object in particular embodiments is an individual item of digital information typically stored or embodied in a data file or record. Content objects may take many forms including text e.g. ASCII SGML HTML images e.g. jpeg tif and gif graphics vector based or bitmap audio video e.g. mpeg or other multimedia and combinations thereof. Content object data may also include executable code objects e.g. games executable within a browser window or frame podcasts etc. Structurally database connotes a large class of data storage and management systems. In particular embodiments database may be implemented by any suitable physical system including components such as database servers mass storage media media library systems and the like.

Module hosting platform hosts modules developed internally by service provider site as well as modules developed by third parties. Module hosting platform includes in one embodiment multiple module generators to increase the capacity of the service provider site to serve high volumes of users. Data store stores module definition data such as computer program code HTML code scripts Adobe Flash swf objects and the like. User configuration data store stores configuration information for various modules in association with user identifiers. Developer tool provides interfaces allowing module developers to access module hosting platform to upload and register modules which other users can add to web pages such as personal pages and home pages.

In a particular embodiment network application may access database system to retrieve add or modify data stored therein as required to provide a network application such as a social network application or customizable home page to one or more users. In response to a request for a home page from a given user for example network application server may access database system to retrieve page format and layout information from a corresponding user account. The layout information may identify among other things modules that the user has added to his or her page. Network application may then access module hosting platform in order to obtain or generate HTML code and other content for adding the modules identified in the layout information. Network application may then merge the module output data into a base document or page template and transmit the merged page to the user. The module output data may be merged into the base template within inline frames frames sections defined by div tags or simply merged into the base document without such elements.

Client systems are operably connected to the network environment via a network service provider or any other suitable means. Client systems may include personal computers or mobile devices such as laptop computers personal digital assistants PDAs etc. Clients systems may include one or more processors a memory a network interface one or more input output I O devices and a system bus interconnecting these components. Client systems may also include an operating system and a user agent such as a browser client operative to interact with service provider site . Browser clients may include Microsoft Internet Explorer Mozilla Firefox Apple Safari Netscape Navigator and any other suitable user agent. In some embodiments of the invention session state information and user identifying information e.g. user identifier is contained in so called browser cookies that are appended to HTTP requests and responses.

The server host systems described herein such as network application servers may be implemented in a wide array of computing systems and architectures. The following describes example computing architectures for didactic rather than limiting purposes.

The elements of hardware system are described in greater detail below. In particular network interface provides communication between hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network etc. Mass storage provides permanent storage for the data and programming instructions to perform the above described functions implemented in the location server whereas system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by processor . I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to hardware system .

Hardware system may include a variety of system architectures and various components of hardware system may be rearranged. For example cache may be on chip with processor . Alternatively cache and processor may be packed together as a processor module with processor being referred to as the processor core. Furthermore certain embodiments of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to standard I O bus may couple to high performance I O bus . In addition in some embodiments only a single bus may exist with the components of hardware system being coupled to the single bus. Furthermore hardware system may include additional components such as additional processors storage devices or memories.

As discussed below in one embodiment the operations of one or more of the physical servers described herein are implemented as a series of software routines run by hardware system . These software routines comprise a plurality or series of instructions to be executed by a processor in a hardware system such as processor . Initially the series of instructions may be stored on a storage device such as mass storage . However the series of instructions can be stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via network communication interface . The instructions are copied from the storage device such as mass storage into memory and then accessed and executed by processor .

An operating system manages and controls the operation of hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. According to one embodiment of the present invention the operating system is the Windows 95 98 NT XP Vista operating system available from Microsoft Corporation of Redmond Wash. However the present invention may be used with other suitable operating systems such as the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems LINUX operating systems and the like. Of course other embodiments are possible. For example the server functionalities described herein may be implemented by a plurality of server blades communicating over a backplane.

In one embodiment the module regions display information based on the module definitions and configuration information corresponding to the respective modules. In particular embodiments a module may include code sections such as HTML code sections code objects applications scripts etc. that include computer readable instructions operable to cause a processor to perform a set of actions. Using a media player module as an example the media player module may output HTML code that causes a processor to load a music player and fetch music from a local or remote source. The media player module may provide user controls on a media player displayed in the media player module region e.g. module region .

In response to the request network application server may access database system to a retrieve a base template corresponding to the request and page format and layout information from a corresponding user account . The layout information may identify among other things modules that the user has added to his or her page. In one embodiment for each module instance identified in the layout information network application may then access module hosting platform in order to obtain or generate HTML code and other content for adding the modules identified in the layout information. Network application may then merge this content into a base document or page template and transmit the merged page to the user. In addition network application may also receive modification requests generated by Ajax scripts associated with a given module and executing within the context of a browser or other user agent of client system .

In one embodiment network application for each module instance identified in the layout information generates a module request including a module identifier an instance identifier a user identifier and a view name and queues each module request until all requests are generated. After all the module requests are generated and queued network application causes the module requests to be transmitted to the module generators to retrieve module output data to use in responding to the request. In one implementation a transmit process distributes the queued module requests to multiple module generators to provide for generation of module output data in parallel in order to decrease response times. A variety of schemes can be used such as round robin arbitration or arbitration schemes based on observed load of the module generators . In another embodiment network application can transmit the module requests to a load balancer which forwards the module requests to the module generators .

As discussed in more detail below module generator may receive a module request identifying a module a module instance and a user. In other implementations the request may also include a view name. Module generator may use these identifiers to retrieve module definition and user configuration data and generate module output data. In response to a given module request module generator fetches the requested output data from cache if available or generates the requested output data and returns the output data to the network application . In one embodiment the output data may include HTML code that causes the browser or other user agent to render information load JavaScript load media players and or Flash objects in the personal page. In the implementation shown network application waits for responses to all module requests or for the module requests to time out . As to each module valid module output data may be returned the module request may have timed out or an error may have occurred. Network application responds to each of these circumstances as described below. The network application for each module incorporates or merges the module output data if the output data is valid into the base template of the page . In some implementations the module output data is merged into the base template such that a browser client renders corresponding module regions of a personal page. In these instances the module output data can be inserted within frames inline frames HTML div tags and the like. In some modules however the module output may result in HTML code or scripts that do not result in objects or module regions being rendered within a page or otherwise. For example module output data for a given module can be configured to change the background color or theme of the page.

In one embodiment if network application requests module output data from module hosting platform and the request times out the network application may insert placeholder code into the base template . The placeholder code may contain the module request information and may include scripts such as an Ajax script object that causes a browser client to reissue the module request after a predefined time period e.g. 2 seconds . In one embodiment if the module output data is not valid and does not time out the module generator may output an error indication and network application may include HTML code that causes an error message to be displayed within the corresponding module region .

As described in more detail below module generator provides module output data based on information provided in module requests module definition information stored in module data store and module instance information stored in user configuration data store . For example in one embodiment a module request may include a module ID instance ID user ID and view name. As described in more detail below in connection the module generator accesses configuration information from the user configuration data store and module definition information from module database based on the module ID instance ID user ID and view name. The following are example types of module definition and configuration information that the module generator may utilize to generate module output data. In one embodiment the configuration information described below may be implemented in one or more tables of a relational database and accessed by a tuple of information attributes such as module ID instance ID user ID etc. In other embodiments the configuration information may be stored in other database types such as object oriented databases and the like.

Module data store stores module definition information. In one embodiment a module definition may include basic module information one or more configuration fields and one or more view definitions.

In one embodiment basic module information includes basic information that describes a given module. For example basic module information may include a module ID author ID module description security level status data etc. In one embodiment the module ID is a unique identifier for a module such as a media player module. In one embodiment the author ID may indicate a particular author of the module such as an individual or corporate entity. In one embodiment the module description may describe one or more attributes of the module e.g. a media player module that plays video . In one embodiment the security level may indicate security attributes e.g. permissions such as trusted non trusted and the like. Module hosting platform may set the security level based on a variety of considerations such as whether the module was created by an internal team or a third party external to service provider site . In one embodiment the status may indicate whether a particular module is in development in beta live obsolete etc. In one embodiment the data may include serialized key value pairs that may for example other behaviors than how the data is to be rendered e.g. control caching behavior etc .

Modules may also include one or more configuration parameters that require specification by the end user. In a particular implementation module data store includes a configuration fields table where a given module may include one or more configuration field entries. In one embodiment the configuration fields entries in the table may include the following a module ID configuration name configuration label configuration type attributes e.g. serialized key value pairs encoding filters etc. The configuration name and label may identify a particular configuration parameter of a given module. In one embodiment the configuration name is the name of the configuration and the configuration is a label that is displayed to the user in an edit or configuration view or interface. Also the configuration type may describe a particular type of configuration parameter. The attributes field described other characteristics of the configuration parameter such as an encoding parameter a default value and a filter. Configuration parameters could include a URL of third party sites such as an RSS feed or a photo aggregation site third party account identifiers access parameters keywords profile data user preferences settings and the like.

Module data store may also include a view definition table or other data structure. In particular embodiments the view definition defines how module output data is generated for a given view type. In one embodiment a view definition may include a module ID a view name e.g. big small narrow wide top bottom side etc. a view type data etc. A view name is an arbitrary name that generally corresponds to how module output is rendered on a given page. For example various implementations of a module can be developed for different locations on the page. For example a first version of a module can be adapted for display at the top of a page while a second version of a module can be adapted for display on the side of a page in a narrow window. In one embodiment the view name may be used to identify a view and ideal dimensions for the view e.g. pixel width and height . For example using the media player example the view name may indicate dimensions that are large enough to show control buttons and a window to display a video. Given the foregoing the view name may be determined by the network application based on layout information indicating where the module is to be rendered in a given page. In one embodiment the module ID is used as a key to identifying one or more view definitions associated with a given module.

A view type corresponds an implementation format for a given module directed to how the module is defined and may affect how the module generator generates the module output data for the module. For example a module can be defined in whole or in part by scripting languages container object definitions markup language code executable code objects and combinations of the foregoing. An implementation format can correspond to one or more of the foregoing or combinations thereof. The module view definition data may refer to or include HTML code Javascript objects JSON code XML documents hypertext preprocessor PHP code Flash objects and the like. For example a given module can be implemented with two or more view definitions where a first view definition implements the module as a Flash object while a second view definition implements the module as a Javascript object.

In one embodiment the module generator supports the following view types which may include hypertext markup language HTML JavaScript JS Flash e.g. a URL extensible markup language extensible stylesheet language transformations XML XSLT e.g. a URL of XML feed and XSLT . Still further the supported view types are extensible in that module generator can be configured to support additional view types such as PHP code Java code as well as compiled or interpreted code objects. HTML is a markup language for creating web pages and provides a means to describe the structure of text base information in a given document. Javascript is a scripting language primarily used to write functions that are embedded into an HTML page and interact with the Document Object Model DOM of the page. Javascript Object Notation JSON structs can also be used in connection with view definitions. XML is a markup language that allows users to define their own tags and that facilitates the sharing of structured data across different information systems. XSLT can be used to convert XML code to HTML code. XML XSLT can be used to access internal or external web services. For example XSLT code can be used to convert XML output from a web service to HTML code.

Accordingly the module generator may perform different operations based on the determined view type. In one embodiment a site administrator or other user may determine what view types are permissible. Still further a module developer may define a plurality of view types for a given module. In one embodiment the module generator at run time may determine what view types are to be used in response to any given request based on one or more policies. Such policies may be based on load e.g. a high load environment versus a low load environment browser type or other factors e.g. security user preferences etc. .

Still further the network applications requesting module output data can request a specific view name and or view type for a given module. The network applications may base these decisions on current load where in the page the module is to be rendered security policies resulting volume of module output data and the like.

The configuration data store stores the actual configuration data for users relative to the modules. The configuration data for a given module instance maps to the configuration fields for that module defined in the Configuration Fields table of the module data store see above . In a particular implementation the user configuration data store is organized as a table having the following schema or table fields module ID instance ID user ID and data. The data field in a particular implementation is a series of serialized key value pairs where the keys correspond to the configuration parameters required by the module and the values correspond to the actual configuration data. For example the key value pairs for a module that retrieves photos from a photo sharing site may include 1 URL www.photos.com 2 userid example user and 3 keywords flowers city apple horses.

As discussed above in one embodiment a given module request may include a tuple of attributes including a module ID instance ID user ID and a view name. The module request may also include context parameter information as well. As described above context parameter information may be for example a value pair such as an attribute identifier and attribute value.

If the module output data is cached the module generator obtains the time stamp of the cached entry . If the age of the module output data is less than a threshold the module generator returns the module output data to the network application . In particular embodiments the threshold may be configurable e.g. 15 minutes 24 hours etc. based on the particular module ID or a default threshold for all modules. If the age of the module output data is greater than the threshold the module generator still returns the module output data . The module generator then disconnects the network application . In one embodiment the module generator may include a content length field in the HTTP response header equal to the number of bytes in the response which causes network application server to disconnect after it reads the number of bytes. The module generator then generates module output data and caches it . As such the next time the network application server reconnects and requests module output data the module generator will send a more recent version of the module output data.

The module generator then obtains configuration fields based on the module ID. The module generator then obtains user configuration data from the user configuration data store based on the module ID instance ID and user ID. If the module has configuration definitions but module generator obtains no or insufficient corresponding user configuration data e.g. user configuration values missing or incomplete the module generator returns an edit view . In one embodiment the edit view may be HTML and or Ajax code that defines a form that prompts the user to enter the user configuration values required for the module. The edit view may be generated based on the user configuration fields that the module generator could not find or may be a special view that is defined by the module developer.

If the module generator returns both the configuration definitions and the user configuration values the module generator merges the user configuration data into the view definition data replacing the variables in the view definition data with the user configuration values . In one embodiment in addition to user configuration values the module generator may also merge contextual information e.g. viewer ID owner ID group ID text etc. into the view definition. For example the output of a module may depend on the user accessing the page which may be different from the owner of a page such as in a social network site . Other context information can include time of access browser type and the like. The module generator may perform different actions based on the determined view type . In particular embodiments example view types may include HTML XML XSLT JS Flash. Other view types are possible including customized view types.

If the view type is HTML the module generator returns the HTML result data i.e. module output data to the network application . If the view type is XML XSLT the module generator fetches XML from URL . The module generator then applies XSLT to convert the XML code to HTML code. The module generator then returns HTML result data to the network application . If the view type is JS the module generator generates a one time use URL to the JS code . The module generator creates an iframe HTML with URL . The module generator then returns the HTML result data to the network application . If the view type is Flash the module generator generates embedded HTML tags with a URL to the flash object and any other required parameters . The module generator then returns the HTML result data to the network application . In one embodiment the module generator may optionally wrap the HTML result data in a wrapper before sending it to the network application . In one embodiment the wrapper may include HTML code a status whether the module is trusted or not whether the module output data cached the age of the module output data etc.

The present invention has been explained with reference to specific embodiments. For example while embodiments of the present invention have been described as operating in connection with HTML and HTTP the present invention can be used in connection with any suitable protocol environment. Other embodiments will be evident to those of ordinary skill in the art. It is therefore not intended that the present invention be limited except as indicated by the appended claims.

