---

title: Displaying text of a writing system using syntax-directed translation
abstract: A method for displaying an input string of character codes as a sequence of glyphs. In one implementation, an ordered list of instructions for transforming an input string of character codes may be generated using syntax-directed translation. The ordered list of instructions may be executed to generate a sequence of glyph indices. A sequence of glyphs corresponding to the sequence of glyph indices may be displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925091&OS=07925091&RS=07925091
owner: Microsoft Corporation
number: 07925091
owner_city: Redmond
owner_country: US
publication_date: 20070330
---
As computing systems become available throughout the world the ability to display complex writing systems becomes increasingly important. In general the process of displaying text includes analyzing an input string of character codes according to a particular writing system transforming the input string of character codes into a sequence of glyph indices and displaying the sequence of glyphs on a graphical device. Character codes are numerical designators for characters defined by Unicode an industry standard list of approximately one million characters and their associated numerical designators designed to allow symbols from various writing systems in the world to be consistently represented and manipulated by computers.

A writing system may be defined as a symbolic system used to represent statements expressible in human language. A glyph index may be defined as the zero based integral value used to refer to a particular glyph or shape given in a particular typeface to a symbol of a writing system. For example glyph indices may represent letters of the alphabet punctuation symbols and the like. Further glyph indices may represent elements used to form complex combinations of glyph indices representing characters in writing systems such as Hindi or Chinese. The process of displaying text may be understood as the computing system receiving the Unicode character codes from the input keystrokes mapping those character codes to appropriate glyph indices for a particular writing system and displaying the glyphs. For some writing systems such as English the mapping process is a simple one to one mapping. However in other writing systems such as Hindi the mapping process may be very complex with ten character codes mapping to five glyph indices in a different order than inputted.

Typically the input string of character codes may be analyzed by complex custom code and transformed into a sequence of glyph indices. Each writing system supported by a computing system requires extensive custom code to handle the intricacies of that writing system. Therefore the effort required to encode test and maintain each writing system is monumental requiring huge amounts of time and money. Moreover the custom code is not extendable such that new writing systems cannot be easily added. A need exists for a new way in which an input string may be analyzed and transformed into a sequence of glyph indices.

Described herein are implementations of various technologies for a method for displaying an input string of character codes as a sequence of glyphs. In one implementation an ordered list of instructions for transforming the input string may be generated using syntax directed translation. The ordered list of instructions may be executed to generate a sequence of glyph indices which may be displayed as a sequence of glyphs. The ordered list of instructions may include one or more commands to direct the mapping of the input string into the sequence of glyphs. A writing system analyzer may generate the ordered list of instructions after receiving and analyzing the input string. The writing system analyzer may be generated by compiling a syntax directed translation representation of a writing system. A writing system may be represented in syntax directed translation by creating an environment for representing the writing system in syntax directed translation and formulating one or more rules for representing the writing system in syntax directed translation.

The above referenced summary section is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description section. The summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In general one or more implementations of various technologies described herein may be directed to a method for analyzing an input text string and displaying a sequence of glyphs using syntax directed translation. Syntax directed translation may be defined as a method of analyzing a text string and generating an ordered list of instructions used to map the text string into a sequence of glyph indices. Syntax directed translation may be applied by formulating context free grammar rules and attaching one or more instructions to each rule. Thus analyzing a text string using the context free grammar rules produces an ordered list of instructions to map the text string into a sequence of glyph indices. A context free grammar may be defined as the mathematical representation of rules that govern structural patterns. As such syntax directed translation may be used as a method for defining how to analyze a set of strings representing a formal language i.e. a language defined by mathematical formulas and generate an ordered list of instructions to map the set of strings into a sequence of glyph indices.

In one or more implementations of various technologies described herein a writing system analyzer may be used to parse or analyze an input string of Unicode character codes to determine its grammatical structure with respect to a writing system. The writing system analyzer may generate an ordered list of instructions describing how to map the input string into a sequence of glyph indices. A translator may then be used to execute the ordered list of instructions and display the sequence of glyphs. Various techniques for a method for analyzing an input text string and displaying a sequence of glyphs using syntax directed translation in accordance with various implementations are described in more detail with reference to in the following paragraphs.

Implementations of various technologies described herein may be operational with numerous general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the various technologies described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The various technologies described herein may be implemented in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The various technologies described herein may also be implemented in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network e.g. by hardwired links wireless links or combinations thereof. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The computing system may include a central processing unit CPU a system memory and a system bus that couples various system components including the system memory to the CPU . Although only one CPU is illustrated in it should be understood that in some implementations the computing system may include more than one CPU. The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus. The system memory may include a read only memory ROM and a random access memory RAM . A basic input output system BIOS containing the basic routines that help transfer information between elements within the computing system such as during start up may be stored in the ROM .

The computing system may further include a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from and writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive the magnetic disk drive and the optical disk drive may be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media may provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing system .

Although the computing system is described herein as having a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that the computing system may also include other types of computer readable media that may be accessed by a computer. For example such computer readable media may include computer storage media and communication media. Computer storage media may include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media may further include RAM ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing system . Communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. The term modulated data signal may mean a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above may also be included within the scope of computer readable media.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs writing system analyzers an ordered list of instructions a translator other program modules program data and a database system . The operating system may be any suitable operating system that may control the operation of a networked personal or server computer such as Windows XP Mac OS X Unix variants e.g. Linux and BSD and the like. The writing system analyzers the ordered list of instructions and the translator will be described in more detail with reference to in the paragraphs below.

A user may enter commands and information into the computing system through input devices such as a keyboard and pointing device . Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices may be connected to the CPU through a serial port interface coupled to system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device may also be connected to system bus via an interface such as a video adapter . In addition to the monitor the computing system may further include other peripheral output devices such as speakers and printers.

Further the computing system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node. Although the remote computer is illustrated as having only a memory storage device the remote computer may include many or all of the elements described above relative to the computing system . The logical connections may be any connection that is commonplace in offices enterprise wide computer networks intranets and the Internet such as local area network LAN and a wide area network WAN .

When using a LAN networking environment the computing system may be connected to the local network through a network interface or adapter . When used in a WAN networking environment the computing system may include a modem wireless router or other means for establishing communication over a wide area network such as the Internet. The modem which may be internal or external may be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing system or portions thereof may be stored in a remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It should be understood that the various technologies described herein may be implemented in connection with hardware software or a combination of both. Thus various technologies or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the various technologies. In the case of program code execution on programmable computers the computing device may include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the various technologies described herein may use an application programming interface API reusable controls and the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

At step an input string of Unicode character codes may be received. The input string of Unicode character codes may be entered through a sequence of keystrokes read from a persistence document file received from a remote computer or the like. illustrates six keystrokes generating an input string of Unicode characters representing a word in the Hindi writing system. The keystrokes may be interpreted by the computer as Unicode characters. For example the keystrokes for the input string may be interpreted as the following input string of Unicode characters A D F. If the input string is read from a persistence document file received from a remote computer or the like the input string may consist of the Unicode characters without the keystrokes .

At step the input string of Unicode characters may be analyzed by a writing system analyzer . A writing system analyzer may be defined as an executable program designed to parse or analyze an input string of Unicode characters to determine its grammatical structure with respect to a particular writing system and to produce an ordered list of instructions which describe the manner in which the input string will be mapped into a sequence of glyph indices. A writing system analyzer may be writing system specific such that there may be a separate writing system analyzer for each writing system supported by a computing system.

In one implementation the writing system analyzer used to analyze the input string of Unicode characters may be auto generated from a writing system definition. A writing system definition may be defined as a syntax directed translation representation of a writing system. In one or more implementations the writing system definition used to generate the writing system analyzer may be developed by establishing an environment for developing a writing system definition and constructing syntax directed translation rules. An environment for developing a writing system definition may be established by creating an expressive language inside a programming language such as C C and the like. Within a programming language features such as generic types overridden operators classes commands to direct the formation of the sequence of glyph indices and the like may be used to create an expressive language designed to develop a writing system definition. Within the established environment to develop a writing system definition variables necessary to describe the writing system definition may be defined. A variety of variable types may be defined such as symbols ranges syntax directed translation rule titles and the like. Each writing system definition constructed may have different variable types defined as well as different specific variables defined. It should be understood that only variables necessary to construct the writing system definition may be defined. Using the template types operator overriding and commands to direct the formation of the sequence of glyph indices along with the variables to construct the rules of a writing system syntax directed translation rules may be constructed. Syntax directed translation rules may be defined as the context free grammar representation of the rules of writing a particular human language and the attached instructions used to map a text string into the glyph indices of the human language. Syntax directed translation rules may be very complex and include a number of attached instructions to direct the formation of the sequence of glyph indices. Further the writing system definition may include many syntax directed translation rules.

The writing system definition may then be compiled by a compiler to auto generate the executable code for a writing system analyzer . The writing system analyzer may be a recursive descendent analyzer program of the writing system defined by the syntax directed translation. In this manner a writing system analyzer may be generated for any writing system that may be represented in syntax directed translation. Because syntax directed translation source code may be compiled to auto generate an analyzer representing a writing system using syntax directed translation leverages compiler techniques to allow a writing system analyzer to be auto generated thereby eliminating the need for complex written programming language code. A writing system analyzer generated from a writing system definition may also simplify parsing because syntax directed translation may define the structural pattern of tokens making it possible to define a syntax tree for the writing system.

At step the writing system analyzer may generate an ordered list of instructions which describes the manner in which the input string may be changed into a sequence of glyph indices. The ordered list of instructions may be held in computer memory. The ordered list of instructions may not be specific to a particular font yet it is capable of producing font specific visual representation of the input string. Various commands to direct the formation of the sequence of glyph indices defined in the environment for developing a writing system definition and used in the writing system definition may be included in the ordered list of instructions . For example the environment for developing a writing system definition may define a command Change to mean apply the specified glyph index substitution feature on the range of text at the top of the stack. The command Change may be used in the writing system definition development to describe an action necessary to form the sequence of glyph indices. Finally the command may be included in the ordered list of instructions which describes the manner in which the input string may be changed into a sequence of glyph indices. The ordered list of instructions may further include other commands such as Push Pop Pushadd Change Move Reverse Basify and the like.

Continuing with the example illustrated in the input string in Hindi may be analyzed by the writing system analyzer and generate an ordered list of instructions . The ordered list of instructions for the first syllable of the input string formed by the first two input keystrokes PA and matra U may be as follows.

At step a translator may execute the ordered list of instructions . In executing the ordered list of instructions the translator may interpret the ordered list of instructions independent of the writing system. The translator may include a runtime library which may include the executable code for performing one or more commands to direct the formation of a sequence of glyph indices. As mentioned in the previous paragraphs such commands may include Push Pop Pushadd Change Move Reverse Basify and the like. In executing the ordered list of instructions the translator may use a stacking engine to queue the result of each instruction. In computer science a stack may denote a temporary data structure for queuing data in which the data element that is queued up last comes out first. In one implementation the translator may rely on a font and a library implementing the OpenType font standard specification for glyph transformation. The font may be a coordinated set of glyphs designed with stylistic unity typically comprising an alphabet of letters numerals punctuation marks ideograms and symbols. The library implementing the OpenType font standard specification may be an industry standard of scalable computer fonts.

Continuing with the example illustrated in the translator may execute the example of an ordered list of instructions provided above in paragraph 0028 for the first syllable of the input string formed by the first two input keystrokes PA and matra U as follows. The translator pushes an input substring representing onto the stack. The translator then adds an input substring representing to the top of the stack. The combined substring may then be used as an argument to perform glyph substitution and positioning using the typographic feature blws and blwm respectively. The font and the library implementing the OpenType font standard specification may be accessed by the translator to perform the glyph substitution and positioning. The last substring i.e. the sequence of glyph indices for the first syllable of the input string may then be popped out of the stack.

At step a sequence of glyph indices may be generated and the sequence of glyphs displayed. The final appearance of the first syllable may be displayed as the first portion of the sequence of glyphs .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

