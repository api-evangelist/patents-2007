---

title: Displaying HTTP session entry and exit points
abstract: A monitoring tool continuously monitors for insertion, call or deletion of objects from a session. Display of this information shows any get object, set object or remove object operations in the session and shows the entry and exit points for each such object, thus assisting the user whenever objects inserted or called remain in the session and are not removed, thus allowing the user to prevent any data buildup in the session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607197&OS=08607197&RS=08607197
owner: International Business Machines Corporation
number: 08607197
owner_city: Armonk
owner_country: US
publication_date: 20070828
---
The present invention is related to commonly assigned U.S. Pat. No. 8 032 858 entitled METHOD AND SYSTEM FOR NAVIGATIONALLY DISPLAYING HTTP SESSION ENTRY AND EXIT POINTS. 

This invention relates generally to enterprise development environments where source code for enterprise applications is developed using an automated coding tools such as the Eclipse Foundation s Eclipse product or other generally available similar systems. More particularly it relates to a device method and system for providing a user who is developing source code for an enterprise application using such an automated coding tool with pertinent feedback that informs the user that session entry points have been created which have not yet been removed at the time the coding work is finished.

Many Interactive Development Environment IDE tools exist today to assist users in creating business enterprise computer applications and or web pages or web applications for conducting business with on line customers of the enterprise. A few examples are the aforementioned Eclipse Integrated Development Environment and the Microsoft Corporation s Visual Studio product. In practice nearly all enterprise web applications are built using a set of libraries in a composing framework such as Apache Struts Java ServerFaces or MicroSoft s ASP.NET . IDE s often come bundled with web frameworks such as the aforementioned ones for convenient use. Such web frameworks share the commonality of a session application interface for allowing developers to make objects persistent between web page invocations by an end user but the IDE s are currently unaware of the usage of the session interfaces and they are treated just as any other library function.

Although it is often convenient to use such APIs Application Programming Interfaces use of them to create a way to share state information between web servers can be problematic for the user because putting too many data structures into a session can virtually clog the operation of a website. For example use of an HttpSession to maintain temporary user state information for a user s online session can present an enormous problem is say 1000 logged in users each have a one megabyte temporary storage of session information the requirement on the system is for one gigabyte or more of memory in use to maintain the integrity of the 1000 user sessions in operation at the time. The general rule of thumb however is that programmers creating software for HttpSessions should store only as much state data or information as is necessary for the current business transaction and no more. Thus when a developer writes the source code and finds it convenient to use the HttpSession API to insert an object they need to be consistent in removing the object from the session once it is no longer needed for the business transaction. But keeping track of what is put into the session and what is taken out is difficult to do at the time the code is being created or developed by the programmer. The available solutions all provide for inspection and removal of unnecessarily saved data only later when a debugger after the application under development has been compiled.

The present invention solves this problem by providing a static monitoring and analysis tool enhancement to the IDE system which collects information from the source code the user programmer is building. This information is used to help the user programmer detect conditions where objects may inadvertently have been left in session. This analysis occurs at development time instead of after the application is actually deployed.

The present invention provides a method and system for providing feedback via an alert which may be displayed to the user during the development phase of creating the source code by continuously monitoring for any get set or remove operations in the session under development and which can show the entry and exit points for any such object put into the session. This enables developers to resolve session problems during the actual development time does not require laborious manual searching of the code for such conditions nor does it require the frequent and seemingly unending task of inspecting debugger outputs after the application has been developed and deployed.

Particularly the present invention modifies the usual IDE by providing a monitoring tool that continuously monitors for insertion call or deletion of objects from a session and which provides a display of such information to the developer via a special enhanced session view of any code that is open for development. The new IDE shows any get object set object or remove object operations in the session and shows the entry and exit points for each such object allowing for alerting the user whenever object inserted or called remain in the session and are not removed thus preventing the data buildup problem explained earlier.

The invention will now be described in detail with reference to a preferred embodiment thereof as illustrated in the Drawings mentioned above.

The invention provides an enhanced IDE that has a session viewing feature that can be invoked by the user to provide a display of any get object set object or remove object operations in the newly written code for a session under development. Importantly it shows all entry and exit points in the code for any object put into the session. This is superior to current systems as it permits developers to resolve session problems at the time of development rather than later when manual searching of code would have to be done and or it alleviates the endless inspection of debugging outputs after the application being developed has actually been deployed for use.

Turning to a schematic representation of a block diagram of a static analysis tool in a preferred embodiment of the invention is shown. This tool analyzes all newly written code as it is being created by the user and builds a meta data file of all instructions found to either insert call or remove an object from the session the analysis tool then compares the changed code to the meta data file and updates the meta data if objects inserted called or removed are no longer in the meta data file at the completion of the code writing task. The meta data file of any objects remaining in the session after completion of the writing task is then used to generate a display that informs the user of all the entry and exit points of objects inserted into the code and also displays any other sessions or instructions that have called an object into the session under development thus enabling the user to quickly resolve any unresolved objects remaining in the session without further analysis or debugging.

In the static analysis tool begins its process by monitoring for any changes made to the source code as shown in box . Any changed or new code is then inspected in box to determine whether a new session access has begun. If a new session access has been created the code is inspected in boxes and to determine respectively whether an instruction entering an object into the session reading an object into the session or removing an object from the session is present. If these analyses show that any of these actions has occurred the identification of the object entry point read point or exit point is added to a meta data file as shown by the operation of the system in boxes and respectively. Once the code writing task has been completed the newly written code is compared in box to the meta data file and a further analysis is made in box to determine whether any objects inserted called or removed still remain in the code and if they do not the meta data file is updated to remove entries to all such objects inserted read or removed that are no longer found in the code and the process ends. The remaining meta data file however will retain a record of all unremoved object entries insertions via calls or reads and exits and this data can be accessed and read to display the resulting information as shown in .

In a depiction of a display generated by a typical IDE system is shown and an example session view is illustrated. In this example it is assumed that a developer has opened a Java class called Tradeshow.java as an example of source code for a session under development. This is illustrated in by the label in box Tradeshow.Java . The identity of the HTTP Hypertext Transfer Protocol session under development is shown in box and the entries from the meta data file generated by the analysis tool of are displayed in box where the session object entries exits and reads or calls are listed. Any unresolved objects are identified in a highlighted portion such as the item in this example display where no exit point was found for the object named showdescription . This enables the user to quickly locate the portion of the source code under development that may need attention to resolve the object that was entered into the session.

To illustrate its operation let us assume that the example the Java class Tradeshow.Java puts a string into the session called ShowDescription with a session .setValue showDescription myObject call. The session view generated by the IDE system is shown in and displays not only the showDescription call as an entry point in the session but it also shows where the exit point is. For example the application may remove showDescription from the session in SpeakerBio.java but if there is no exit point for the session attribute the IDE system reading the meta data file generated by the analysis tool of will highlight the showDescription object that was inserted into the session as a warning to the user that this object may need attention. The display also shows every Java class that read or used the showDescription object during the session as an aid to correcting any unresolved object issues. All this information is displayed as illustrated in and as described above so that the user may easily determine what other classes in his or her codebase are manipulating the showDescription object session attribute. In this case the analysis tool of as incorporated into the IDE system could not find HttpSession.removeValue showDescription anywhere in the codebase and has highlighted it in the box line as shown.

The analysis tool of and the session information viewer of and indeed the navigational viewer of may all be implemented as plug ins because of the Eclipse product s modular architecture. If the IDE is based on the Eclipse system the plug in code may be given the standard preference properties to enable session viewing for a variety of technologies such as Servlets Java ServerFaces and JSR Java Specification Request 168 Portlets.

However for simplicity the rest of this example assumes only that the Servlet session viewing is enabled. Utilizing the process of the tool in the plug in code creates a lookup table indexed by session attribute by inspecting every class on the classpath for the current project under development. The lookup table would then be populated with a JavaBean class that includes the three lists of the tool in the entry point list which in this example would add HttpSession.setValue object it adds it to the list. The exit point list when the plug in finds HttpSession.removeValue object it is added to a second list and a Read Point List when the plug in finds HttpSession.getValue object it is added to the third list. Thus whenever a class is opened the plug in using the process of scans the class for any access to the session API and uses the session attribute lookup table to get the entry exit and read points.

To further illustrate this process and it s interrelationship to the IDE system and its components as well as to the alternative method of viewing the information in a navigational view shows the overall system in which the IDE is provided with a plug in session analysis component as depicted in and with a Session viewer component as depicted in . A File system contains the session information in metadata files and will contain the lists referred to above as a result of the operation of the invention s static analysis tool .

In operation the analysis process of and as depicted by box in continually inspects code for session information which it stores in the filesystem . The session view component of polls the filesystem via link in to gather the information therein to construct the screen display showing the latest entry exit and read points in the code under construction.

As an alternative to the display method used by the IDE system as shown in a second preferred embodiment is also given for this invention which utilizes the website navigation class diagram form of display. This navigational view or state diagram form of view is a second preferred embodiment of the invention and may be constructed by polling the filesystem content using the method of and as functionally illustrated in via link between the filesystem and the state diagram plug in tool which is described with reference to . Such navigational views are commonly provided by IDE systems such as IBM s Rational Application Developer and can be arranged to display the overall website navigational view such as the example shown in by using the process as depicted in .

In a typical website navigational diagram is illustrated. In the diagram various webpages such as home inventory error order and about are shown. Tools of this type are used to graphically illustrate for the developer how the various sessions created in moving from one webpage to another relate to one another. These sessions are shown by the interconnecting lines labeled session in . The system of the invention may be used to greatly enhance the view by accessing the metadata file generated by the process of and displaying the results in a drop down box associated with the particular session under analysis as shown in box of . The code content can be inspected for every webpage navigation path thus quickly enabling the user to identify any unresolved object problems that can impede scaling and take corrective action. The webpages could be JavaServer Pages for example and there are some cases when objects may be inserted into the session based upon conditional logic or inserted and not removed directly as with any code. This will be detected by the analysis tool of added to the metadata file and used to create the display as shown in box . In this example the results stored in the metadata file are displayed on the session path on the navigational diagram generated by the IDE which quickly identifies any potential problems with that session. It enables a user to very quickly run an analysis of each session s path on the website and uncover any unresolved object issues that would inhibit proper scaling of the application.

The process by which the invention constructs the state diagram or navigational view as shown in is illustrated schematically in in which the overall state diagram rendering plug in code process is shown.

In the navigational view process begins with block where the code checks constantly for any new developer created web page or modifies an existing web page in his code under development and proceeds in box to construct a page navigational graph in memory. The process then queries in box the session metadata in the filesystem for any entry and or exit points that correspond to the pages in the navigational graph in memory. The root node of the graph in memory becomes the page that is the target of the navigation path as shown in block . This portion of the graph data is searched for applicable entry points in block and a check is then made in block to determine whether a corresponding exit point is found for the entry point identified in block . If a corresponding exit point is found to exist the block finds that the session object is no longer present for this portion of the navigation path and exits back as shown by the dotted line to check for entry points for each navigation path in the graph in memory.

However if no corresponding exit point is found in block the process continues in block to associate this session object entry with the current navigation path under analysis and then checks in block as to whether the execution of the entry point and or exit point is dependent on Boolean logic. If the answer to this inquiry is yes the object may be in the session when this portion of the navigational path is traversed as indicated in block which will trigger the rendering of the graphical information onto a display along with the associated entry or exit or read point information so the developer can view the navigation path on which the entry point still remains. However if the entry point is not dependent on Boolean logic in block the process continues in block to find that the object is always in the session whenever this navigation path is traversed which also triggers the rendering of the graphical information from memory along with the associated navigational path for the developer to view as shown in .

Having thus described the invention with reference to a preferred embodiment thereof it will be apparent to those of skill in this art that the invention would be implemented in any particular IDE system with ease wherefore the invention as described in the following claims is not limited to any particular IDE system or to any particular programming language or technique.

