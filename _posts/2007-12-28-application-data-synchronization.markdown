---

title: Application data synchronization
abstract: In a particular implementation, providing a virtual cached network drive, on a client, for PST-type (Personal STore) file operations, during a non-optimal connection. In one implementation, during the non-optimal connection, changes to objects, in a local PST file, are saved in a local cache (the virtual network drive) and logged. At certain intervals, the changes are compiled, compared with entries in a synchronization database and a list of changes, to be performed on the objects, is generated which is used to update a remote PST. If the connection remains non-optimal, a temporary PST file is created, based on the list of changes, and transferred to a remote agent that performs the changes on the remote PST. If the connection improves, the changes are instead performed directly on the remote PST.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458127&OS=08458127&RS=08458127
owner: Blue Coat Systems, Inc.
number: 08458127
owner_city: Sunnyvale
owner_country: US
publication_date: 20071228
---
Reliably and consistently performing data backups of mobile laptop users typically members of an organization that desires to maintain such backups can often be problematic. Some of those problems may include deciding a process to perform the data backup in view of not necessarily knowing where a laptop may next be connected. For example if a connection is established between the laptop and the organization network via a non organization network at a non optimal connection speed to perform a backup.

Email client related data is one example of a data type that may be beneficial to backup. However an email storage file can become monolithic over time and therefore make backups time intensive for the user.

The present invention in particular embodiments is directed to methods apparatuses and systems directed to application data backup and synchronization.

In a particular implementation providing a virtual cached network drive on a client for PST type Personal STore file operations during a non optimal connection. In one implementation during the non optimal connection changes to objects in a local PST file are saved in a local cache the virtual network drive and logged. At certain intervals the changes are compiled compared with entries in a synchronization database and a list of changes to be performed on the objects is generated which is used to update a remote PST. If the connection remains non optimal a temporary PST file is created based on the list of changes and transferred to a remote agent that performs the changes on the remote PST. If the connection improves the changes are instead performed directly on the remote PST.

In another implementation change work lists are generated for both the local and remote PSTs when a connection becomes non optimal. At the local PST the lists are analyzed for changes synchronized to generate a master change work list. If the connection remains non optimal a temporary PST is created and the master change work list is sent to a remote agent which performs updates on the remote PST. In turn the remote PST returns any additions to the local PST. If the connection improves the changes are instead performed directly on the remote PST.

The following embodiments and aspects thereof are described and illustrated in conjunction with systems apparatuses and methods which are meant to be exemplary and illustrative not limiting in scope. In various embodiments one or more of the above described problems have been reduced or eliminated. In addition to the aspects and embodiments described above further aspects and embodiments will become apparent by reference to the drawings and by study of the following descriptions.

The following embodiments and aspects thereof are described and illustrated in conjunction with systems apparatuses and methods which are meant to be illustrative not limiting in scope.

The present invention in particular embodiments is directed to methods apparatuses and systems directed to providing a virtual network drive on a client for PST type file operations when a connection is non optimal or not available i.e. offline usage . This is accomplished in part by providing a file system filter driver operable to determine when a connection to a network drive hosting a remote backup PST becomes non optimal. When this occurs the file system filter driver re directs PST file operations to a virtual network drive hosted in a local cache. When the connection improves or becomes available the file system filter driver re directs PST file operations back to the network drive. The file system filter driver and conditions other than connection quality to cause the driver to switch to and from a virtual network drive will be presented in a later section.

During the duration of the non optimal connection logging and analyzing of the PST file operations occurs at certain intervals and are utilized to generate a change work list. If the non optimal connection persists a temporary PST containing information on changes to the local PST is created and sent to a remote agent which updates the remote PST based on the temporary PST. If the connection improves the changes are instead performed directly on the remote PST. This particular implementation of updating the remote PST may be termed as a one way backup. Also the present invention in particular embodiments provides for a two way data synchronization which will be described in more detail at a later section.

For didactic purposes a brief review of some terms and concepts utilized by the present invention will first be presented. In a Microsoft Exchange server email system email messages and perhaps other items are typically delivered to and stored on a server in a multi user database the messages being accessible via an email client application such as Outlook hosted on a client computer. Personal items such contacts and notes are typically stored at the client computer. In contrast non Exchange email systems such as POP based email for example will typically store all the information in a local file at the client computer. A PST Personal STorage file is a storage container created from within an email client such as Microsoft Outlook which stores e mail contacts tasks and more in a local location such as a user s laptop or a network drive. Enterprise users with Exchange accounts typically use PSTs for archival purposes given that their respective email accounts usually have storage size limits. Such PST files are either typically stored on a local client or on a remote host such as a file server. To remotely access the PST file the folder space maintained by the file server may be accessible to the user as a so called network drive. Given that the archive PST files may be the only container of a user s data it may be desirable to remotely backup these PST files from the client to a remote backup system. Still further some enterprise users may not maintain an exchange server. Accordingly backup of PST files in an efficient manner becomes more important.

In the corporate arena Exchange Servers are used to store email messages. The Outlook Offline Storage Folder .OST in Microsoft Outlook provides a synchronization method with an Exchange Server and existing mailbox accounts. This .OST file is generated by the email client application for the purpose of storing the content of the user s mailbox on the local hard drive for offline use. The OST file gets stored on a users computer system which gets synchronized with the Exchange mailbox account resulting in duplication of data on the exchange server and on the user s system.

For purposes of description a local PST refers to a PST file stored locally on a storage system directly attached to a computer host. A remote PST refers to a file stored on a server or other host remote from a given computer host. A PST may also be termed as remote if it resides on a different partition or section of a drive that hosts the local PST on another drive on a client or perhaps an external drive locally connected wired or wireless to the client or other similar situations.

The present invention may also utilize Messaging Application Programming Interface MAPI which is a messaging architecture and a Component Object Model based API for Microsoft Windows. MAPI allows client programs to become e mail messaging enabled aware or based by calling MAPI subsystem routines that interface with certain messaging servers. Email applications use MAPI to access PST and OST files. MAPI is closely related to MAPI RPC the proprietary protocol that Microsoft Outlook uses to communicate with Microsoft Exchange. MAPI tends to be chatty however in that it tends to use large amounts of bandwidth.

Remote procedure call RPC is an inter process communication technology that allows a computer program to cause a subroutine or procedure to execute in another address space either on the same host or more commonly on another computer on a shared network without having to explicitly code the details for this remote interaction. As will be seen in a later section an RPC is utilized in an Outlook instance as part of one implementation of the present invention.

The present invention may be embodied in a mobile data management utility such as the Mobility software product offered by Packeteer Inc. of Cupertino Calif. Mobiliti is a software package that provides file access data synchronization and data backup for though not necessarily limited to mobile computer users.

As discussed above the remote PST file may be maintained on a remote file server resident on an enterprise local area network. In a particular implementation a mobile user may maintain on or more remote PST files on a so called network drive. In a particular implementation the mobile data management application includes functionality that while the laptop is not connected to the local area network emulates the network drive. is a block diagram illustrating file storage locations utilized for differing operating modes of the present invention as directed by the driver. Speaking generally a file system filter driver can be used to intercept file system commands such as open read and write commands from the file system directed to a network drive and direct them to a virtual network drive . In a particular implementation the mobile data management client maintains a local copy of the network drive in a local cache . While the client host is not connected to the enterprise network the file system filter driver directs the file system commands to the virtual network drive which processes the commands on the data stored in the local cache . When connectivity is re established or in response to a manual command or determination of improvement in connectivity the mobile data management application synchronizes the local cache with the data stored on the network drive . Accordingly when a user saves data to a PST when the client host is disconnected the data will be saved to the PST residing in the local cache . A subsequent synchronization will be performed between the PST file on the local cache and the PST stored in the network drive .

There are various conditions or modes that could be set which would cause the file system filter driver to re direct remote PST file operations when one or more of those conditions are met. For example one mode could be based on a process which automatically decides when to switch over based on network connectivity. Another mode may be that a user manually switches over. Yet another mode may be rule based where the switch over is conditioned on a threshold observed data rate.

The synchronization functionality described herein can perform one way synchronizations for straight back ups or two way synchronizations. In a particular implementation the synchronization functionality utilizes a local synchronization database where metadata of the objects in a PST file such as the local or virtual remote PST files are stored. The contents of the synchronization database contains information relating to the state of a given PST file at the last synchronization such as what objects are contained in the file and their last modification times. In one implementation file system filter driver or a separate module or driver layer may also monitor file system accesses to a select set of files such as PST files and stores the write commands associated with these set of files in the synchronization database. From this write history the synchronization functionality may determine what file objects have been added changed or deleted.

As discussed above a synchronization can be initiated in a variety of manners including manually and automatically. In one implementation a triggering event can be determined by monitoring file system commands associated with one or more target PST files. Once a certain number of writes has occurred for example then the backup or synchronization would start. illustrates such a method . File system filter driver for example receives a file system command and determines if the received command is a write command to the local PST . If no the next received command will be checked . If the received command is a write to the local PST the file system filter driver logs and stores the command and determines if a threshold number of writes to the local PST has been reached . If no a counter is incremented . If yes the file system filter driver transmits a notification to mobile data management application to launch a synchronization . Additional decisional logic such as determining network connectivity and data rates can also be applied as well.

Starting with one way synchronizations or backups reference is made to which is a flowchart diagram illustrating a method for performing said backup. When a backup is initiated mobile data management application accesses the PST to gathers object metadata corresponding to the data from the local PST . This object meta data includes the objects identified in the PST file and their last modification times. Mobile data management application then compares the meta data to the object meta data in the synchronization database to the gathered metadata to generate a change work list a list of objects that have been added changed or deleted since the last synchronization.

After the work list has been completed mobile data management application determines whether it is currently configured to operate in a local synchronization mode or a split synchronization mode . The local synchronization mode refers to the deployment configuration illustrated in where the synchronization engine of the client host performs the synchronization. The split synchronization mode refers to the deployment configuration illustrated in where synchronization operations are distributed between a synchronization client and a synchronization server agent . If the mobile data management application is operating in the local mode it mounts the remote PST via a MAPI interface to implement the changes to the file in the change work list and updates the synchronization database to reflect the current state of the objects in the PST file .

If the mobile data management application is operating in the split synchronization mode it creates a temporary PST file including the objects that have been added to the local PST and transmits the temporary PST file and the change list to the remote synchronization server agent . The temporary PST will typically contain objects that have been added or changed while the change list will contain the list of added changed and deleted objects. In an optional optimization the mobile data management application may compress the data prior to transmission. The remote synchronization server agent uses this data to synchronize the remote PST file . Mobile data management application may then update the synchronization database either after transmitting this information or after receiving an acknowledgment that the remote synchronization has been executed.

The following provides a pseudo code representation setting forth example decisional logic for creating an entry of a work change list. The pseudo code includes a list of definitions. The definitions also apply to a two way synchronization pseudo code representation that will be presented in a later section.

record A record of the existence of an object but not the object itself. Contains information such as object identification object last modification time object flags etc.

remote A reference to the PST file that resides on some form of disconnectable media network or other shared or backup location may also refer to a virtual remote PST file .

syncdb A reference to a database that resides on the user s local computer that reflects the last known state of all of the objects in the local PST file.

Additionally in view of the one way backup pseudo code it is possible to backup from one source to multiple destinations. To facilitate this there is typically a unique record corresponding to each destination.

Furthermore also in view of the one way pseudo code it is possible to have a list of folders items that may be ignored from synchronization. Due to this it is possible to prevent backup of data that does not necessarily require backup. It is also possible to backup portions of the PST file into different locations. This advantageously allows the user to prioritize the backup of different locations by having different schedules for different folders running at different priorities . Also it is possible in one implementation to have content based filters to enable synchronization for example of email from a specific sender or perhaps by keyword.

Now that the one way backup implementation has been described the two way synchronization implementation will be presented. Two way synchronization generally involves determining discrepancies between a local PST and a remote PST since a last synchronization and applying updates as necessary to either or both PSTs. Two way synchronization can be utilized for a group of users who share a single local PST or a single user who uses multiple client hosts and wants to maintain a common PST among the multiple client hosts.

Next mobile data management application builds a synchronization table of PST file object entries based on the local PST object metadata the remote PST object metadata and the local synchronization database . Table 1 illustrates for didactic purposes a representation of an example synchronization table that may be generated. Mobile data management application analyzes the row entries of the synchronization table to build change work lists for the local to remote direction and the remote to local direction . In one implementation MAPI provides unique object identifiers that are used to reconcile the entries of the synchronization table. For a given row entry the presence or absence of entries in a given column as well as differences between time stamps of corresponding entries in a row can indicate what entries have been deleted changed or added. Additionally conflicts are identified between the two lists an example of which could be an email that was modified at both PSTs.

As discussed above mobile data management application may be running in a local or a split synchronization mode . If mobile data management application is running in the local mode it mounts the remote PST and implements the changes identified in the change work list in the local to remote direction via a MAPI layer and accesses the local PST file either by directly mounting it or accessing thru the access plug in implements the changes to the local PST file in the remote to local direction . Mobile data management application then updates the local synchronization database to reflect the current state of the local PST file .

If mobile data management application is executing in the split synchronization mode it creates a temporary PST based on the master change list and the local PST to include the objects added to the local PST file and transmits the temporary PST and the change list to the remote server synchronization agent . The remote server synchronization agent applies the changes to the remote PST file and based on the change list generates a temporary PST file including the file objects to be added to the local PST file . When mobile data management application and receives remote PST additions it adds the file objects to the local PST file . Mobile data management application then updates the local synchronization database to select the current state of the local PST .

The following pseudo code sets forth decisional logic that can be applied to each row of the synchronization table to identify object deletions additions and changes and to generate a change work list for both the local to remote and remote to local directions. As mentioned in the previous pseudo code section for the one way backup implementation the listed definitions also apply to the following pseudo code representation for the above described two way synchronization implementation.

Additionally in view of the two way synchronization pseudo code instead of synchronizing between a network drive and a local drive two way synchronization may be performed between the local drive and an external drive in one implementation. By doing this a user can keep active PSTs synced on multiple PSTs. Additionally the virtual network cache may be located on the external drive. This way the user may be mobile with the PST file on the external drive without syncing to the local hard disk but sync the external drive directly to the network. Preferably for consistent behavior it is recommended in this scenario to work in a forced cached mode and keep the network synced using Mail Harmony when network connectivity is available otherwise when network connectivity is not available an offline mode will be utilized.

The synchronization functionality described above can be utilized in a variety of different manners. For example the synchronization functionality can be utilized to synchronize a local PST file with a remote PST file directly. In another implementation the synchronization functionality described herein can be utilized in a first synchronization phase to synchronize the local PST file with a virtual remote PST file stored in the local cache in connection with the virtual network drive . A second synchronization process between the virtual remote PST file and the remote PST file can be initiated when network connectivity is established.

The elements of hardware system are described in greater detail below. In particular network interface provides communication between hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network etc. Mass storage provides permanent storage for the data and programming instructions to perform the above described functions whereas system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by processor . I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to hardware system .

Hardware system may include a variety of system architectures and various components of hardware system may be rearranged. For example cache may be on chip with processor . Alternatively cache and processor may be packed together as a processor module with processor being referred to as the processor core. Furthermore certain embodiments of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to standard I O bus may couple to high performance I O bus . In addition in some embodiments only a single bus may exist with the components of hardware system being coupled to the single bus. Furthermore hardware system may include additional components such as additional processors storage devices or memories.

In particular embodiments the processes described herein may be implemented as a series of software routines run by hardware system . These software routines comprise a plurality or series of instructions to be executed by a processor in a hardware system such as processor . Initially the series of instructions are stored on a storage device such as mass storage . However the series of instructions can be stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via network communication interface . The instructions are copied from the storage device such as mass storage into memory and then accessed and executed by processor .

An operating system manages and controls the operation of hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. According to one embodiment of the present invention the operating system is the Linux operating system. However the present invention may be used with other suitable operating systems such as the Windows 95 98 NT XP Vista operating system available from Microsoft Corporation of Redmond Wash. the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems and the like.

Particular embodiments of the above described processes might be comprised of instructions that are stored on storage media. The instructions might be retrieved and executed by a processing system. The instructions are operational when executed by the processing system to direct the processing system to operate in accord with the present invention. Some examples of instructions are software program code firmware and microcode. Some examples of storage media are memory devices tape disks integrated circuits optical disks magnetic disks and hard drives. The term processing system refers to a single processing device or a group of inter operational processing devices. Some examples of processing devices are integrated circuits and logic circuitry. Those skilled in the art are familiar with instructions storage media and processing systems.

While a number of exemplary aspects and embodiments have been discussed above those of skill in the art will recognize certain modifications permutations additions and sub combinations thereof. For example while implementations of the invention have been described as operating on a PST file the present invention has application to synchronization and back up of other container file formats. Accordingly it is therefore intended that the following appended claims and claims hereafter introduced are interpreted to include all such modifications permutations additions and sub combinations as are within their true spirit and scope.

