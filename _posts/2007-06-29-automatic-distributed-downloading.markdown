---

title: Automatic distributed downloading
abstract: Automatic distributed downloading (ADD) may involve, for example, enabling the downloading of a resource via a peer-to-peer (P2P)-based protocol from a uniform resource identifier (URI). In an example embodiment, an ADD module includes a directory client that sends to a directory service a mapping request including a URI corresponding to a targeted resource and receives a mapping response including P2P session connection information. The targeted resource can be retrieved over a P2P network via a P2P-based protocol using the P2P session connection information. In another example embodiment, a mapping data structure is accessed with reference to a URI. An entry corresponding to the referenced URI is ascertained and P2P session connection information from the entry is extracted. The URI corresponds to a source making the resource available via a client-server-based protocol, and the P2P session connection information makes the resource available via a P2P-based protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08037135&OS=08037135&RS=08037135
owner: Microsoft Corporation
number: 08037135
owner_city: Redmond
owner_country: US
publication_date: 20070629
---
Web browsers enable users to acquire files over the internet. A server that stores files can provide web pages over the internet. When a web page is displayed at a client device by a web browser text or an icon may serve as a link that both represents and makes available a particular file. When a user selects the link a download manager contacts the server and acquires a copy of the particular file from the server for the user of the client device. This approach to downloading a file can unfortunately be exceptionally slow. Additionally this approach to downloading files can be equally slow in other non browser related file acquisition scenarios.

Automatic distributed downloading ADD may involve for example enabling the downloading of a resource via a peer to peer P2P based protocol from a uniform resource identifier URI . In an example embodiment an ADD module includes a directory client that sends to a directory service a mapping request including a URI corresponding to a targeted resource and receives a mapping response including P2P session connection information. The targeted resource can be retrieved over a P2P network via a P2P based protocol using the P2P session connection information. In another example embodiment a mapping data structure is accessed with reference to a URI. An entry corresponding to the referenced URI is ascertained and P2P session connection information from the entry is extracted. The URI corresponds to a targeted resource and a source that makes the targeted resource available via a client server based protocol and the P2P session connection information enables connection to a P2P session that makes the targeted resource available via a P2P based protocol.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure application programming interface API arrangement etc. implementations are described herein.

There are two primary modes by which files are downloaded over the internet. With one mode a server hosts a file and serves it to multiple clients e.g. in accordance with a Hypertext Transfer Protocol HTTP . A disadvantage with this mode is that the server has to be sufficiently powerful to serve a large number of requests possibly simultaneously. For large file sizes when multiple downloads from the server are sharing bandwidth the download speed can potentially decrease significantly. Due at least partially to this aspect of the server client mode another mode of downloading is a peer to peer P2P mode. With the P2P mode a client downloads a desired file from a multitude of other clients or other peers that have the desired file instead of from one server. The P2P mode therefore does not suffer from a potential bandwidth bottleneck at a single server. However a disadvantage with the P2P mode is that effort is involved to create and provide a P2P session for a desired file.

In contrast certain embodiments of automatic distributed downloading can enable existing and new content on an internet to be downloaded automatically in a P2P fashion without any effort from the server. In an example embodiment a directory service maps a uniform resource identifier URI corresponding to a resource to associated P2P session connection information. The P2P session connection information can be used to download the resource from a P2P network e.g. without contacting the server originating the resource . In a specific example implementation on the client side an aggregate downloader can combine downloads obtained from both P2P and client server mechanisms so that the download can be completed faster. Regardless of whether aggregate downloading is specifically implemented certain embodiments of automatic distributed downloading can enable users to download resources from an internet using P2P based protocols without requiring additional setup or changes to the servers and without requiring additional input from users of client devices.

General embodiments as described further herein below are directed to downloading resources over any one or more networks using a P2P based protocol. A user at a client can request a resource that originated on a server and that corresponds to a URI. Instead of requesting the resource from the server using the URI via a client server based protocol a directory service is consulted. The directory service maps the URI to associated P2P session connection information. The client can then retrieve the resource using the P2P session connection information over a P2P network via a P2P protocol. As noted above for aggregate downloading implementations the client can also simultaneously retrieve different portions of the requested resource from multiple different sources including via different protocols and then combine the portions into the requested resource.

In an example embodiment ADD module is capable of communicating with server directory service and or P2P network over one or more networks. If communications involve multiple networks they may be the same or different networks for sending messages to the different network side entities. Although not explicitly illustrated such a network or networks can be an internet a local area network LAN a wireless or wired network one of the networks described below with reference to some combination thereof and so forth.

Server and client may be realized by one or more devices. Directory service may also be realized with one or more devices. Although shown separately server and directory service may alternatively be co located on a single machine or set of related machines including but not limited to when a directory service covers a particular domain. An example device for implementing any of these entities is described herein below with particular reference to . P2P network includes multiple peers and multiple P2P type connections between and among the multiple peers in an overlay on top of one or more physical networks.

In operation of an example embodiment a user wishes to acquire resource and has knowledge of a URI corresponding thereto. The URI may be capable for example of uniquely identifying the corresponding resource throughout one or more networks. The URI may be by way of example but not limitation a Uniform Resource Locator URL a Uniform Resource Name URN a Uniform Resource Citation URC and so forth. Without intervention by or activation of ADD module client would attempt to retrieve resource solely from server using the URI via a client server based protocol. Instead ADD module sends a mapping request having the URI to directory service .

Directory service accesses a mapping with reference to the URI and ascertains P2P session connection information that is associated therewith. Directory service sends a mapping response having the P2P session connection information to ADD module . With the P2P session connection information ADD module possibly in conjunction with another component of client can retrieve resource over P2P network via a P2P protocol.

Client can access resource from server using the URI via a client server based protocol. After a request response exchange with directory service ADD module possesses the P2P session connection information enabling client to also access resource from P2P network via a P2P based protocol. Examples of resource include but are not limited to a file a program a plug in a media stream some combination thereof and so forth.

In an example embodiment ADD module provides a downloading service this is accessible to requesting applications via an exposed API. ADD API may be realized using a library of functions an application module some combination thereof and so forth. Directory client facilitates communication between ADD module and directory service . In operation a requesting application makes a resource request having a URI to ADD module via ADD API . Resource request is directed toward a targeted resource . As a result of accepting resource request directory client sends mapping request having the URI to directory service .

In an example embodiment directory service receives mapping request having the URI from directory client . P2P session indexing service is accessible to directory service . Directory service contacts P2P session indexing service and accesses mapping data structure . This access operation references the URI corresponding to resource . Depending on implementation P2P session indexing service and or mapping data structure may be separate from or part of directory service .

Mapping data structure includes multiple mapping entries . . . with m representing an integer. Each respective mapping entry associates a respective URI with respective P2P session connection information. In other words each mapping entry maps a key the URI to data the P2P session connection information . Each mapping entry may also include a hash e.g. a cryptographic hash value that derives from the corresponding resource . Client can verify the accuracy and completeness of a downloaded resource by comparing a hash value computed from the downloaded resource to the hash value stored in the corresponding mapping entry and sent to directory client .

After a mapping entry having the corresponding URI is located in mapping data structure the associated P2P session connection information is extracted. Hence after mapping data structure access operation directory service possesses the P2P session connection information that is associated with the received URI. Directory service formulates and then sends a mapping response having the P2P session connection information to directory client . Utilization of the received P2P session connection information at client is described herein below with particular reference to

P2P session connection information comprises information that enables an entity e.g. client to connect to a P2P session and download a targeted resource. Consequently the contents of a P2P session connection information package may be P2P protocol specific. By way of example only for a BitTorrent P2P protocol a separate BitTorrent file is downloaded and used to download the targeted resource.

When directory service accesses mapping data structure with reference to the URI it is possible that no mapping entry includes the referenced URI. In other words there may be no known P2P session connection information that is associated with the referenced URI and that enables P2P protocol based retrieval of the resource corresponding thereto. If so directory service sends a mapping response that includes a negative indicator or result which indicates that no P2P session connection information is known for the requested URI. Also in such cases for an example embodiment directory service sends a create session request with the URI to P2P session creation service . Although illustrated separately in P2P session creation service and directory service may alternatively be co located.

P2P session creation service receives create session request having the URI from directory service . P2P session creation service creates a P2P session at session creation event . The created P2P session enables the corresponding resource to be downloaded over P2P network via a P2P based protocol. This session creation event produces appropriate P2P session connection information for retrieving resource over P2P network via a P2P based protocol. P2P session connection information provides data that can be used to hook into a P2P session offering resource . P2P session creation service sends a session created notification having the P2P session connection information to directory service . Session created notification may also include a hash value of resource as it is accessible over P2P network when P2P session creation service computes the hash.

Directory service receives session created notification having the P2P session connection information from P2P session creation service . Directory service sends an add entry instruction to P2P session indexing service . Add entry instruction includes the URI including at least a reference thereto and the P2P session connection information. P2P session indexing service adds a new mapping entry to mapping data structure . The new mapping entry associates the URI with the P2P session connection information. The new mapping entry may also include a hash value created e.g. by directory service P2P session creation service P2P session indexing service etc. responsive to the corresponding resource in accordance with some hashing algorithm.

After directory service receives session created notification having the P2P session connection information from P2P session creation service directory service may send a mapping response having the P2P session connection information to directory client . Potentially however too much time might have elapsed for the first requesting client to directly benefit from the created P2P session for resource . With regard to message communication timings when directory service ascertains that P2P session indexing service does not have an entry for a requested URI directory service can send a negative response to directory client .

Alternatively or additionally directory service can send P2P session connection information to directory client after its creation so that directory client can choose to retrieve resource using the URI via a client server based protocol and or to retrieve it using the P2P session connection information via a P2P based protocol. This is an especially viable alternative if P2P session connection information can be received at the client prior to a complete downloading of resource via the server client based protocol. As described further herein below with particular reference to an aggregate downloader embodiment of resource can also be downloaded using both download mechanisms with the retrieved chunks of resource being combined at client .

In an example embodiment directory client receives mapping response having the P2P session connection information from directory service . Mapping response may also include a hash computed on resource . Directory client forwards the P2P session connection information to P2P protocol implementer .

Using the P2P session connection information P2P protocol implementer retrieves resource in accordance with the established P2P session. More specifically P2P protocol implementer performs resource retrieval operation for resource over P2P network via a P2P based protocol. P2P protocol implementer is capable of operating in accordance with one or more defined P2P protocols.

ADD module may verify the integrity and or accuracy of the retrieved resource using a hash value received e.g. separately or as part of mapping response from directory service . If the verification procedure fails ADD module may still retrieve resource from server of using the URI via a client server based protocol. After verification if any ADD API provides the downloaded resource to requesting application .

In the drawings are flow diagrams and respectively. Implementations of flow diagrams and may be realized for example as processor executable instructions. Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth. The acts of these flow diagrams may be performed in many different environments with a number of different devices and or in a variety of different network configurations. Hence although the descriptions of certain blocks and the acts thereof reference other elements that are described herein they do so by way of example only. The order in which the methods are described is not intended to be construed as a limitation and any number of the described blocks can be combined augmented rearranged and or omitted to implement a respective method or an alternative method that is equivalent thereto.

At block the resource request having the URI is redirected by sending a mapping request having the URI to a directory service. For example a directory client of ADD module may send a mapping request having the URI to a directory service . As indicated by the encircled A which leads to flow diagram of network side acts may process the mapping request.

As indicated by the encircled B which comes from flow diagram of network side acts may return a response to the mapping request. At block a mapping response having P2P session connection information for the identified URI may be received from a directory service. For example directory client may receive from directory service mapping response having P2P session connection information for the identified URI.

At block the P2P session connection information is forwarded to a corresponding P2P protocol implementer. For example directory client may forward the P2P session connection information to a P2P protocol implementer that corresponds to the P2P session described by the P2P session connection information.

At block the requested resource is retrieved over a P2P network using the P2P session connection information via a P2P based protocol. For example P2P protocol implementer may perform a resource retrieval operation using the P2P session connection information to thereby acquire resource from P2P network via a P2P based protocol.

At block the retrieved resource is provided to the requesting application. For example ADD API may provide the retrieved resource to requesting application .

At block a mapping data structure is accessed with reference to the received URI. For example directory service may attempt an access with reference to the identified URI on a mapping data structure of a P2P session indexing service .

At block it is ascertained if an entry is located that corresponds to the received URI. For example it may be ascertained e.g. by P2P session indexing service and or directory service if mapping data structure includes a mapping entry that corresponds to the identified URI. If not then the method of flow diagram continues at block which is described below. On the other hand if a mapping entry corresponding to the identified URI is located then the method continues at block .

At block from a mapping entry corresponding to the received URI associated P2P session connection information SCI is extracted. For example at a mapping entry corresponding to the identified URI the associated P2P session connection information may be extracted. A hash value computed on resource may also be extracted.

At block a mapping response having the associated P2P session connection information is sent to the directory client. For example a mapping response having the P2P session connection information may be sent from directory service to directory client . Mapping response or another message may include any extracted hash value.

The acts of blocks address example scenarios for when a mapping entry corresponding to the identified URI is not located within a mapping data structure. At block a P2P session creation service is asked e.g. by a directory service to create a P2P session for the requested resource corresponding to the URI. For example directory service may send a create session request having the identified URI to a P2P session creation service .

The acts of blocks and may be performed by for example a P2P session creation service. At block the P2P session creation service creates a P2P session for the identified URI with the P2P session associated with P2P session connection information. For example P2P session creation service may perform a session creation operation that makes resource corresponding to the identified URI available over P2P network via a P2P based protocol using P2P session connection information. The session creation operation produces the P2P session connection information.

At block the P2P session creation service sends P2P session connection information to the directory service. For example P2P session creation service may send a session created notification that includes the P2P session connection information to directory service .

At block a session creation notification having P2P session connection information for the identified URI is received. For example directory service may receive session created notification that includes the P2P session connection information from P2P session creation service .

At block an entry which corresponds to the identified URI and associates the P2P session connection information therewith is added to the mapping data structure. For example directory service may perform an add entry operation to add a mapping entry that associates the identified URI with the P2P session connection information that is produced by the session creation operation .

As indicated by arrow if the P2P session connection information is potentially still relevant to the requesting directory client P2P session connection information that is recently produced from a session creation operation may be sent from the network side e.g. from directory service to the requesting directory client . Although not explicitly illustrated in after a no result at block the network side e.g. directory service may send a negative mapping response to the requesting directory client . Thus directory client can begin to download the targeted resource using the URI from server via a client server based protocol.

This section describes additional example alternative embodiments. An initial portion references to describe example aggregate downloader implementations. Subsequent portions reference other FIGS. and elements thereof to describe other alternative embodiments.

In an example general embodiment aggregate downloader is capable of downloading an identified resource not shown in using two or more different protocol implementers including potentially fully or partially simultaneously. Consequently aggregate downloader may download from two or more different sources e.g. server s P2P network s etc. . Especially when the downloading is performed at least partially in parallel the total downloading time may be lower than using any single source. After the resource is downloaded in chunks aggregate downloader combines the chunks into a whole resource so that ADD API can provide it to requesting application .

In client portion two client server based protocol implementers and two P2P based protocol implementers are illustrated. More specifically a first client server based protocol implementer and a second client server based protocol implementer are illustrated. A first P2P based protocol implementer and a second P2P based protocol implementer are illustrated. Other different types of protocol implementers may also be used in conjunction with aggregate downloader .

Each respective protocol implementer enables access to a requested resource from a corresponding network entity via a respective corresponding protocol. Examples of network entities include by way of example but not limitation servers P2P networks both of and so forth. By way of example only second client server based protocol implementer may be capable of retrieving resource from server via a client server based protocol and first P2P based protocol implementer may be capable of retrieving resource from P2P network via a P2P based protocol.

In an example specific embodiment aggregate downloader chooses which source or combination of sources to use to download a requested resource . In this example two sources are chosen. Aggregate downloader separates resource into multiple chunks and assigns respective sets of chunks to respective protocol implementers and . Thus second client server based protocol implementer downloads its assigned set of chunks from server via the client server based protocol and first P2P based protocol implementer downloads its assigned set of chunks from P2P network via the P2P based protocol.

These implementations may be protocol specific. The client server based HTTP protocol for example enables range requests to be made when retrieving a resource such that the chunks may be so delimited. Examples of client server based protocols include but are not limited to HTTP Hypertext Transfer Protocol Secure HTTPS File Transfer Protocol FTP and so forth. Examples of P2P based protocols include but are not limited to Kazaa Napster BitTorrent and so forth.

Aggregate downloader can also verify the integrity and or accuracy of the resulting combined resource after downloading using a hash value received from directory service . If the verification fails aggregate downloader can re download resource from different source s including from the single originating source. This verification using the hash value can be performed by way of example only when one or more of the sources and or downloading protocol mechanisms that are utilized cannot be fully trusted.

In an example embodiment ADD API is asked to download a requested URI. ADD API starts an instance of aggregate downloader with the requested URI. Concurrently directory client asks directory service s that are attained from a list thereof for a new source from which to better download the targeted resource . If no other source is ascertained aggregate downloader continues downloading exclusively from the requested URI. On the other hand if directory client receives a new source or sources this new source is added to the instance of aggregate downloader . Hence aggregate downloader additionally downloads from the new source. If directory client was used to obtain a new source and if the resulting file combined by aggregate downloader does not have a cryptographic hash matching that obtained from directory service the download is failed so the file is deleted. In this case the file is re downloaded from the original URI without trying to access a directory service .

For an example implementation aggregate downloader can support the addition of new sources even after initial configuration. In other words while downloading from one set of sources more sources may be added. Aggregate downloader may manage its child protocol instances by keeping a cache file of the combined progress by providing suggestions to the child protocols of what chunks to download and by providing access to the cached combined progress to any of the child protocols if they request it.

With reference to for an example embodiment directory client may make mapping request by performing a GET on the resource for the well known URI while including a query containing a copy of the requested URI. The mapping request may also include a list of supported communication protocols and a list of supported cryptographic hashing algorithms. Accordingly directory service can tailor its mapping response to those protocols and hashing algorithms that are supported by the client.

With reference to for another example embodiment directory client may have a listing of multiple directory services . If so directory client may try each of them sequentially or in parallel in an attempt to get a faster response and or a different response e.g. one for a supported P2P based protocol .

With continuing reference to for another example embodiment a directory service may return multiple P2P session connection information packages in response to a single URI. They may be grouped randomly or grouped hierarchically as primary secondary tertiary etc. recommended P2P options and so forth. Moreover a directory service may return one or more alternative URIs in a mapping response for a mapping request from a directory client . The receiving directory client can then also choose to download a targeted resource from one or more of these alternative URIs especially with an implementation that includes an aggregate downloader .

With continuing reference to for another example embodiment when a mapping entry is added to P2P session indexing service from P2P session creation service directory service can also store whatever caching information is applicable to determining whether or not a proxy can serve cached information. If a mapping request is made for a resource and a mapping entry exists but the caching information suggests that the cached version may be out of date then that mapping entry is removed and not returned to directory client .

With continuing reference to for another example embodiment directory service may allow clients to register a mapping from a client provided key URI to client provided data P2P session connection information . Directory service may disallow the registration by directory client if the service cannot verify that the resource obtained from the data matches the resource obtained from the key or if the service cannot verify that the key is uniformly accessible. Directory service can also follow the proxy or caching rules if such rules exist for any protocol associated with the key.

The following description pertains to a specific example in which an HTTP protocol is used for the message exchange for mapping request and mapping response and in which the P2P protocol corresponds to the BitTorrent protocol. However these messages and protocols may be implemented in alternative fashions. If a directory service has a mapping for a requested URI to other sources that use protocols supported by the client then the service responds with 200 and the mapped sources in the HTTP response body. If no such mapping exists the service responds with 404 . When a directory service requests a BitTorrent session creation service to create a new P2P session the BitTorrent session creation service creates a torrent file for the resource identified by the requested URI hosts that file on a server starts a BitTorrent tracker that is specified by the torrent file and sends back to the directory service a torrent identifier. The torrent identifier specifies the location of the torrent file the cryptographic hash used in the torrent file and any caching information associated with the requested URI.

Generally a device may represent any computer or processing capable device such as a server a desktop a notebook etc. computer a workstation or other general computer device a data storage repository apparatus a personal digital assistant PDA a mobile phone a gaming platform an entertainment device a router computing node a mesh or other network node a wireless access point some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media include processor executable instructions .

In an example embodiment of device I O interfaces may include i a network interface for communicating across network ii a display device interface for displaying information on a display screen iii one or more human device interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports a network communications stack a radio and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen or monitor and so forth. Examples of iii human device interfaces include those that communicate by wire or wirelessly to human device interface components e.g. a keyboard a remote a mouse or other graphical pointing device etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device . Processor executable instructions may be embodied as software firmware hardware fixed logic circuitry some combination thereof and so forth.

Thus realizations for automatic distributed downloading may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology and one may be realized as a general purpose processor e.g. a central processing unit CPU a microprocessor a controller etc. a graphics processing unit GPU a derivative thereof and so forth. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media storage and transmission media e.g. wireless or wired communication channels hard coded logic media combinations thereof and so forth. Media is tangible media when it is embodied as a manufacture and or as a composition of matter. For example media may include an array of disks or flash memory for longer term mass storage of processor executable instructions random access memory RAM for shorter term storing of instructions that are currently being executed and or otherwise processed link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein. Such functions include but are not limited to i those acts that are illustrated in flow diagrams and of respectively ii those that are illustrated in the different described schemes of and those of other algorithms described herein combinations thereof and so forth.

The devices acts aspects features functions procedures modules data structures techniques components parts etc. of are illustrated in diagrams that are divided into multiple blocks and other elements. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks and or other elements can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses arrangements etc. for automatic distributed downloading.

Although systems media devices methods procedures apparatuses mechanisms schemes approaches processes arrangements and other example embodiments have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

