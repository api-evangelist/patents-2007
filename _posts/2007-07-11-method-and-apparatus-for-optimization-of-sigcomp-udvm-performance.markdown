---

title: Method and apparatus for optimization of SigComp UDVM performance
abstract: A signal compression optimization system between a communication network and wireless user equipment advantageously selects an optimized decompressor when feasible for reduced content processing latency and otherwise selects a virtual machine decompressor, such as a Universal Decompressor Virtual Machine (UDVM) that interprets the received decompression bytecode. Since the UDVM is not optimized for any particular decompression algorithm and suffers by the requisite delays associated with analyzing each statement in the bytecode before execution, being able to avoid use of the UDVM whenever possible enhances user experience in presenting wirelessly received signaling messages or media content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07561081&OS=07561081&RS=07561081
owner: Qualcomm Incorporated
number: 07561081
owner_city: San Diego
owner_country: US
publication_date: 20070711
---
The present Application for Patent claims priority to Provisional Application No. 60 830 545 entitled Method and Apparatus for Optimization of SigComp UDVM Performance filed 12 Jul. 2006 and assigned to the assignee hereof and hereby expressly incorporated by reference herein.

Session Initiation Protocol SIP is the protocol used for call control in the third generation mobile network starting from the Third Generation Partnership Project 3GPP release 5. SIP uses textual encoding which makes it easier to build services based on SIP design extensions to SIP and debug the protocol. However the textual encoding of SIP also has a serious drawback it is well known that SIP messages are considerably larger than those of the protocols used for instance in Global System for Mobile communication GSM call control. Large message sizes result in increased call setup delay because more data needs to be transmitted over the low bandwidth radio interface. This observation created a need to develop a solution which could reduce the call setup time. One such solution is the Signaling Compression SigComp protocol designed by the Internet Engineering Task Force IETF . SigComp provides a framework for the compression of application layer signaling between two network elements. The central piece of SigComp architecture is the Universal Decompressor Virtual Machine UDVM which is a virtual machine optimized for running decompression algorithms. Because of the UDVM SigComp can support a wide range of compression algorithms instead of dictating a single algorithm to be supported by all SigComp endpoints.

SigComp is a mandatory part of the 3GPP release 5 IP Multimedia Subsystem IMS . It is applied over the interface between a terminal and Proxy Call Session Control Function P CSCF which is the first contact point for the terminal within the IMS. SigComp improves the quality of service the user perceives by reducing the idle time at call setup. It also allows the network to support a greater number of users by reducing the amount of resources consumed per subscriber.

The primary target for SigComp is cellular systems where the mobile terminals have varying capabilities and undetected errors may be introduced on the cellular link. SigComp also addresses communication links with limited throughput including cellular systems.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed versions. This summary is not an extensive overview and is intended to neither identify key or critical elements nor delineate the scope of such versions. Its purpose is to present some concepts of the described versions in a simplified form as a prelude to the more detailed description that is presented later.

An aspect provides for communicating data content compressed by one of a number of compression algorithms. Each compression algorithm has a corresponding decompression algorithm capable of reproducing the data content from the compressed data content. In order to give increased flexibility bytecode sufficient to perform the decompression algorithm is transmitted as part of a data packet protocol along with the compressed data content intended for a decompression virtual machine to interpret the bytecode. In order to enhance user experience by reducing processing time required to interpret the decompressing algorithm an accessible executable version of the decompression algorithm in machine code associated with the detected bytecode is located and used to decompress the data content rather than using the virtual machine.

In yet another aspect at least one processor is configured perform the method of decompressing data content by locating an executable version of a decompression source code. In particular a first module detects the source code. A second module locates an accessible executable version of the decompression algorithm associated with the source code. A third module decompresses the compressed data content utilizing the located accessible executable version of the decompression algorithm.

In an additional aspect a computer program product has a computer readable medium containing a first set of codes for causing a computer to detect a source code contained in at least one message. A second set of codes is for causing the computer to locate an accessible executable version of the corresponding decompression algorithm associated with the detected source code. Then a third set of codes is for causing the computer to decompress the compressed data content utilizing the located accessible executable version of the corresponding decompression algorithm.

In yet another aspect a means for early compilation of bytecode into machine code provides a very efficient execution of decompression algorithms. For example using this method with Session Initiation Protocol Session Description Protocol SIP SDP messages compressed using signal compression SigComp would shorten the latency of the processing and call setup times of the message.

In one implementation a mechanism is provided to avoid executing a Universal Decompression Virtual Machine UDVM interpreter for decompression of each SIP SDP message received. Avoiding execution of the UDVM interpreter reduces the computational requirements on the mobile station and reduces a potential delay in SIP SDP processing. This approach brings down the call setup teardown times for SIP based call flows.

In another aspect a method for disseminating Internet Protocol IP Multimedia Subsystem IMS data content to a communication device comprises compressing the IMS data content with a compression algorithm. The method further includes generating a data structure containing a decompression bytecode and transmitting the compressed IMS data content and decompression bytecode to the communication device. Additionally the method includes transmitting an executable version of the decompression bytecode to the communication device responsive to a request from the communication device.

In an aspect at least one processor configured for disseminating Internet Protocol IP Multimedia Subsystem IMS data content to a communication device comprises a first module for compressing the IMS data content with a compression algorithm. The at least one processor further includes a second module for generating a data structure containing a decompression bytecode and a third module for transmitting the compressed IMS data content and decompression bytecode to the communication device. Additionally the at least one processor includes a fourth module for transmitting an executable version of the decompression bytecode to the communication device responsive to a request from the communication device.

In a further aspect a computer program product comprises a computer readable medium comprising a plurality of sets of codes. A first set of codes is operable to cause a computer to compress Internet Protocol IP Multimedia Subsystem IMS data content with a compression algorithm. A second set of codes is operable to cause the computer to generate a data structure containing a decompression bytecode. A third set of codes is operable to cause the computer to transmit the compressed IMS data content and decompression bytecode to the communication device. And a fourth set of codes is operable to cause the computer to transmit an executable version of the decompression bytecode to the communication device responsive to a request from the communication device.

In another aspect an apparatus for disseminating Internet Protocol IP Multimedia Subsystem IMS data content to a communication device comprises means for compressing the IMS data content with a compression algorithm. The apparatus also includes means for generating a data structure containing a decompression bytecode and means for transmitting the compressed IMS data content and decompression bytecode to the communication device. Additionally the apparatus includes means for transmitting an executable version of the decompression bytecode to the communication device responsive to a request from the communication device.

To the accomplishment of the foregoing and related ends one or more versions comprise the features hereinafter fully described and particularly pointed out in the claims. The following description and the annexed drawings set forth in detail certain illustrative aspects and are indicative of but a few of the various ways in which the principles of the versions may be employed. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings and the disclosed versions are intended to include all such aspects and their equivalents.

Various aspects are now described with reference to the drawings. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident however that the various aspects may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to concisely describing these versions.

The apparatus and methods are especially well suited for use in wireless environments but may be suited in any type of network environment including but not limited to communication networks public networks such as the Internet private networks such as virtual private networks VPN local area networks wide area networks long haul networks or any other type of data communication network.

To perform the advantageous avoidance of such execution delays the processor recognizes that an accessible copy of the bytecode is the same as the received bytecode . Machine code as part of an executable decompression algorithm for performing the bytecode is then used by the optimized decompressor . The machine code and or the optimized decompressor are optimized for reduced time for decompression as compared to interpreting source code i.e. bytecode in a virtual machine. By being able to avoid use of the UDVM whenever possible the user equipment enhances user experience in presenting the media content on a media content player by avoiding delayed setup.

It should be appreciated with the benefit of the present disclosure that the machine code may be accessed as part of a locally stored library be compiled locally and stored for future use be wirelessly accessed from a remote library be remotely compiled upon request and stored for future use and or be provided as firmware or other form of circuitry incorporated into the optimized decompressor. Delays in compiling and or remotely compiled machine code would be offset by advantages in reduced complexity requirements for the wireless user equipment and on going decompression efficiencies over a UDVM.

According to some aspects the communication device may comprise any type of computerized communication device. For example as illustrated in the communication device may comprise a mobile communication device such as a wireless and or cellular telephone. Alternatively the communication device may comprises a fixed communication device such as a Proxy Call Session Control Function P CSCF server a network device a server a computer workstation etc. It should be understood that communication device is not limited to such a described or illustrated devices but may further include a Personal Digital Assistant PDA a two way text pager a portable computer having a wired or wireless communication portal and any type of computer platform having a wired and or wireless communications portal. Further the communication device can be a remote slave or other similar device such as remote sensors remote servers diagnostic tools data relays and the like which does not have an end user thereof but which simply communicates data across a wireless or wired network. In alternate aspects the communication device may be a wired communication device such as a landline telephone personal computer set top box or the like. Additionally it should be noted that any combination of any number of communication devices of a single type or a plurality of the afore mentioned types may be utilized in the system . Therefore the present apparatus and methods can accordingly be performed on any form of wired or wireless device or computer module including a wired or wireless communication portal including without limitation wireless modems Personal Computer Memory Card International Association PCMCIA cards access terminals personal computers telephones or any combination or sub combination thereof.

Additionally the communication device may include a user interface for purposes such as requesting interacting with and or playing the multimedia content . This user interface include an input device operable to generate or receive an input into the communication device and an output device operable to generate and or present information for consumption by the user of the communication device . For example input device may include at least one device such as a keypad and or keyboard a mouse a touch screen display a microphone in association with a voice recognition module etc. In certain aspects input device may provide for user input of a request for content or for user input of a request for additional information. Further for example output device may include a display an audio speaker a haptic feedback mechanism etc. Output device may generate a graphical user interface a sound a feeling such as a vibration etc. and such outputs may be associated for example with the presentation of multimedia content .

Further communication device may include a computer platform operable to execute applications to provide functionality to the device and that may further interact with input device and output device . Computer platform may include a memory which may comprise volatile and nonvolatile memory portions such as read only and or random access memory RAM and ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory and or any memory common to computer platforms. Further memory may include active memory and storage memory including an electronic file system and any secondary and or tertiary storage device such as magnetic media optical media tape soft and or hard disk and removable memory components.

Further computer platform may also include a processor which may be an application specific integrated circuit ASIC or other chipset processor logic circuit or other data processing device. In some aspects such as when communication device comprises a cellular telephone processor or other logic such as ASIC may execute an application programming interface API layer that interfaces with any resident software components such as voice call data call and media related applications in memory . API may be a runtime environment executing on the respective communication device. One such runtime environment is Binary Runtime Environment for Wireless BREW software developed by Qualcomm Incorporated of San Diego Calif. Other runtime environments may be utilized that for example operate to control the execution of applications on wireless computing devices.

Additionally processor may include various processing subsystems embodied in hardware firmware software and combinations thereof that enable the functionality of communication device and the operability of the communication device on communications network . For example processing subsystems allow for initiating and maintaining communications and exchanging data with other networked devices as well as within and or among components of communication device . In one aspect such as in a cellular telephone processor may include one or a combination of processing subsystems such as sound non volatile memory file system transmit receive searcher layer layer layer main control remote procedure handset power management diagnostic digital signal processor vocoder messaging call manager Bluetooth system Bluetooth LPOS position determination position engine user interface sleep data services security authentication USIM SIM universal subscriber identity module subscriber identity module voice services graphics USB universal serial bus multimedia such as MPEG Moving Picture Experts Group protocol multimedia GPRS General Packet Radio Service short message service SMS short voice service SVS web browser etc. For the disclosed aspects processing subsystems of processor may include any subsystem components that interact with applications executing on computer platform .

Computer platform may further include a communications module that enables communications among the various components of communication device as well as being operable to exchange content and content requests between the communication device and communications network . Communications module may be embodied in hardware firmware software and or combinations thereof and may further include all protocols for use in intra device and inter device communications. Further communications module is operable to transmit and or receive information such as requesting multimedia content and receiving the compressed media signaling content and bytecode in accordance with the apparatus and methods described herein.

In some aspects the memory of the communication device may further store a user interface module operable to retrieve store and play multimedia content across the communications network in a background or a foreground process. The user interface module may comprise one or any combination of hardware software firmware data and executable instructions operable to perform these functions including a media player appropriate for the type of multimedia content and capabilities of the user interface .

Referring to as the exemplary environment for use of the signal compression optimization system a network architecture is disclosed for performing a particular type of signal compression SigComp that is mandated by the Third Generation Partnership Project 3GPP and 3GPP2 standards for the IP Multimedia Subsystem IMS networks and that is defined in RFC 3320 RFC 3321 and 3GPP standards for IMS e.g. 3GPP TS 23.228 . In a universal method compresses the SIP signaling messages sent over the air between a mobile communication device SIP User Agent and Proxy Call Session Control Function P CSCF . This involves the compressing party sending a decompression algorithm to the de compressing party as part of the first message transmitted. The de compressing party communication device on reception of the algorithm bytecode executes a Universal Decompressor Virtual Machine UDVM interpreter in memory that interprets the bytecode received and decompresses the following messages compressed media signaling content . An advantage of this approach is the ability to support any kind of algorithm as long as its bytecode is supplied over the air. A call control module in memory in the exemplary version is a local Session Initiation Protocol SIP and Session Description Protocol SDP application that defines protocols for this communication.

A computational overhead resulting from executing the decompression bytecode in the UDVM interpreter induces a delay as each instruction in the bytecode is interpreted which may impair user experience due to prolonging call setup times. A decompressor dispatcher module in memory advantageously mitigates this delay by one or more optimization implementations supported by the computer platform of the communication device by reducing usage of the UDVM interpreter .

As a first implementation early compilation of the bytecode into the machine code that could be executed by an optimized decompressor module in memory provides a very efficient execution of decompression algorithms and thus shortens the latency of following SIP messages processing and call setup times. To that end the decompressor dispatcher module accesses a decompression library to compare the received bytecode with one or more locally accessible bytecodes each paired with a respective decompression machine code . Upon detection of a match the decompression machine code may be executed by the optimized decompressor module rather than the UDVM interpreter .

As a second implementation for a new received bytecode for which the decompressor dispatcher module fails to detect a match the decompressor dispatcher module directs a compiler in memory to generate the decompression machine code that is then stored along with the bytecode in an empty code storage record and a vacant index respectively in the decompression library . This compilation may occur in background so that future instances of this bytecode may be handled by the first implementation.

As a third implementation upon failing to detect a match as in the second implement the decompressor dispatcher module forwards a request for the bytecode to be externally compiled or retrieved from a periodically updated database of decompression machine codes for future instances.

As a fourth implementation the computer platform may advantageously include a UDVM hardware processor e.g. Digital Signal Processor DSP that facilitates faster setup by allowing parallel processing in a device hardware optimized for decompression. The decompressor dispatcher module utilizes a proxy UDVM to emulate the UDVM for the benefit of the Local SIP SDP application .

In the communication network generally consistent with the 3GPP release five 5 network architecture described in 3GPP TS 23.228 3GPP TS 23.002 provides an operating environment for the signal compression optimization system of . With particular reference to the communication network is logically divided into a Core Network CN infrastructure and an Access Network AN infrastructure . The CN infrastructure is logically divided into a Circuit Switched CS domain a Packet Switched PS domain and Internet Protocol IP Multimedia Subsystem IMS . The AN infrastructure depicted as the UMTS Terrestrial Radio Access Network UTRAN interfaces is formed by a hierarchical Radio Network Subsystem RNS whose elements are Radio Network Controller RNC Node B elements and User Equipment UE . The Node B is a logical network component that serves one or more cells. It is the radio transmission reception unit for communication in the radio cells. The RNC is a network component with the functions for control of one or more Node B elements . The RNC handles protocol exchanges between UTRAN interfaces . The RNC provides centralized operation and maintenance of the radio network subsystem including access to an operations support system not shown . Among other things the functions of the RNC include radio resource control admission control channel allocation and handover control. The entities specific to the circuit switched domain are signaling gateway SGW Mobile Switching Centre MSC and Gateway Mobile Switching Centre GMSC . The CS switched domain may also include certain home subscriber services constrained to this type of signaling. The MSC constitutes the interface between the radio network subsystem and the fixed networks. The GMSC is an MSC that performs routing to the actual location of a mobile station user equipment UE . The entities specific to the packet switched domain are Serving GPRS Support Node SGSN and Gateway GPRS Support Node GGSN . The SGSN and GGSN handle packet traffic. The SGSN delivers packets to mobile stations within its service area. The SGSN performs mobility management functions such as handing off a roaming subscriber from the user equipment in one cell to the equipment in another. The GGSNs are used as interfaces to external IP networks such as the public Internet other mobile service provider s GPRS services home subscriber service HSS or enterprise intranets not shown . The GGSNs maintain routing information that is necessary to tunnel protocol data units PDUs to the SGSNs that service particular mobile stations .

IP Multimedia Subsystem IMS entities of the IMS Core Network were introduced as part of Third Generation Partnership Project 3GPP release five 5 to create a common platform to develop diverse multimedia services in accordance with a mobile Internet paradigm. The IMS entities comprises all core network elements for the provision of IP multimedia IM services for example Call Session Control Functions CSCF i.e. Interrogating Proxy and Serving IMS Media Gateway Function MGW Media Gateway Control Function MGCF and Multimedia Resource Function . The IMS CN per 3GPP standardizes functions rather than nodes as defined by standardized interfaces. Implementers are free to combine two functions into a single node or to split a single function into two or more nodes. The IMS CN is a domain that controls voice and multimedia calls and sessions as well as the interconnection to other networks like a Public Switched Telephone Network PSTN and other UMTS networks such as HSS . It has a signaling plane and a media plane that traverse different paths.

SigComp is a part of the IMS CN and it is used to compress SIP signaling traffic. The IP Multimedia IM domain enables cost reductions and introduction of new services e.g. voice telephony video telephony multimedia conferencing instant messaging and real time interactive games. IMS enables convergence of and access to voice video messaging data and web based technologies for the wireless user and combine the growth of the Internet with the growth in mobile communications. IP Multimedia Core Network Subsystem IMS makes it possible for Public Land Mobile Network PLMN operators to offer their subscribers multimedia services based on and built upon Internet applications services and protocols. It utilizes the packet switched domain to transport multimedia signaling and bearer traffic. The packet switched domain maintains the service while the terminal moves and hides the movement from the IMS. IMS is independent of the circuit switched domain. The IM domain enables users and applications to control sessions and calls between multiple parties. It controls and supports network resources to provide the functionality security and quality required for the calls. The IM domain provides for registration of users so that they can access their own services from any UMTS network. One additional role of the IM is to generate Call Detail Records CDRs which contain information on call participants time duration and volume of data sent and received. CDRs are used for charging purposes.

In the IMS entities per 3GPP TS 23.228 include CSCF MGCF IMS Media Gateway Function IMS MGW Multimedia Resource Function Controller MRFC Multimedia Resource Function Processor MRFP Subscription Locator Function SLF Breakout Gateway Control Function BGCF and Application Server AS wherein interfaces supporting user traffic are shown as bold lines and interfaces supporting signaling are drawn as dashed lines.

The roles of IMS entities are described in 3GPP TS 23.228. The CSCF which is a SIP server can act as the Proxy CSCF P CSCF Serving CSCF S CSCF or Interrogating CSCF I CSCF . The P CSCF is the UE s first contact point for the IMS CN. The P CSCF is also of special importance to SigComp since it is the core network element that performs compression and decompression of SigComp messages. For this the P CSCF includes a compressor and a decompressor IMS terminals include both as well . The S CSCF handles the session states in the network while the role of the I CSCF is to find the proper S CSCF for a particular user. The MGCF performs protocol conversion receives out of band information communicates with the CSCF selects the CSCF and controls parts of call state. The IMS MGW terminates bearer channels from a switched circuit network and media streams from a packet network. It handles media conversion bearer control and payload processing. The task of the MRFC is to control media stream resources in the MRFP generate CDRs and interpret information coming from an AS and an S CSCF and control MRFP accordingly. The MRFP provides resources that are controlled by the MRFC controls bearers on the Mb reference point and mixes sources and processes media streams. The SLF provides the name of the HSS containing the required subscriber specific data when requested by the I CSCF during registration and session setup. It is also queried by the S CSCF during the registration process. The BGCF selects the network in which PSTN breakout is to occur and chooses the MGCF that is used. The AS can be a SIP Application Server an Open Service Access OSA Application Server or a Customized Application for Mobile Enhanced Logic CAMEL IP Multimedia Service Switching Function IM SSF . It offers value added IM services. The interface between the S CSCF and the AS is used to provide services residing in the AS.

The IP multimedia subsystem attempts to be conformant to Internet Engineering Task Force IETF Internet standards in order to achieve access independence and to maintain a smooth operation with wireline terminals across the Internet per 3GPP TS 23.228. The signaling protocol that is used for registration and call control in the IM domain is the Session Initiation Protocol SIP . SIP is the single protocol that is applied between UE and CSCF.

In the entity that compresses messages sent to a terminal and decompresses messages received from the terminal is the P CSCF which is depicted as a SIP signaling flow from a UE to the S CSCF. SIP messages that are compressed with SigComp in the UE flow through the radio interface Base Station BS and Radio Network Controller RNC of UMTS Terrestrial Radio Access Network UTRAN . From the UTRAN they traverse through the Serving GPRS Support Node SGSN and Gateway GPRS Support Node SGSN all the way to the P CSCF where the SigComp messages are decompressed. From the P CSCF onwards the SIP messages are sent uncompressed. The reasons behind selecting the entity performing SigComp compression and decompression from the network core rather than from the radio access network are discussed below. First of all the location of traffic encryption and decryption functionalities also affects the location of compression functionality because compression has to be applied out bound from the points of encryption and decryption and it must be transparent. The packet content of some traffic types is authenticated integrity protected or encrypted. The trusted party that decrypts traffic from and encrypts traffic to a terminal is in the mobile network core. If the endpoint was chosen from the radio access network network design and performance would suffer from the complexity that would be added by transferring message keys within the mobile network. Another important issue that affects the location of signaling compression is handover. In SigComp a relatively large amount of historical state is built up to enable efficient compression. If the endpoint performing decompression changed this state would need to be transferred to the new entity to maintain compression efficiency. This kind of solution would add complexity to the network. When the decompression is performed in the P CSCF the decompressing endpoint remains stable for the duration of the application layer session.

Thus the location of SigComp functions is in the mobile terminal and in the interior of the network namely in the IMS. This approach contrasts with header compression in which the compression functions are located in the terminal and in the radio access network. In the case of SigComp messages are application level messages that do not contain routing information. They are carried in the payload of transport layer protocols which in turn leave routing issues to IP. SigComp does not compress the headers of transport layer protocols. Only the entities interested in the content of the transport layer protocol payload namely the two communicating endpoints need to decompress SigComp messages.

It should be emphasized that the reason SIP signaling is sent compressed between the terminal and the P CSCF is not to save a few bytes over the air interface. It is not worth saving a few bytes of signaling when the terminal will be establishing a multimedia session that will use much more bandwidth. The main motivation for compression is to reduce the time required to transmit SIP messages over the air interface.

In the IMS the protocol that performs session control is the Session Initiation Protocol SIP . SIP was originally used to invite users to existing multimedia conferences but today it is mainly used to create modify and terminate multimedia sessions. Although SigComp can be used to compress the messages of any text based protocol the main focus is currently on the compression of SIP messages.

SIP is independent of the type of multimedia session handled and of the mechanism used to describe the session. The most common format to describe multimedia sessions is the Session Description Protocol SDP . SDP is simply a textual format that is carried in the body of SIP messages. This is the reason SigComp has to be able to efficiently compress both SIP and SDP. The SIP SDP static dictionary was defined for this purpose.

SIP protocol defines several entities which are user agents UAs redirect servers proxy servers registrars and location servers. All 3G terminals supporting 3GPP Release 5 or later releases contain a SIP UA. Also 3GPP2 has adopted SIP. SIP makes use of proxy servers to help route requests to the user s current location authenticate and authorize users for services implement provider call routing policies and provide features to users. Redirect servers help in the location of SIP UAs by providing alternative locations where the user can be reachable. A registrar accepts registrations. It is usually co located with a redirect server or a proxy server. A location server is not a SIP entity but is an important part of any architecture that uses SIP. Location servers store and return possible locations of users.

SIP is a request response protocol like the Hypertext Transfer Protocol HTTP on which it is based. SIP User Agent Clients UACs send requests and User Agent Servers UASs return responses. The start line of a request declares a method name which indicates the purpose of the request.

The layout of a SigComp endpoint is illustrated in . It includes the following entities compressor dispatcher one or more compressors state handler Universal Decompressor Virtual Machine UDVM and decompressor dispatcher.

The task of the compressor dispatcher is to receive messages from the application and pass the compressed version of each message to the transport layer. The application has to provide the compressor dispatcher a compartment identifier together with each message. A compartment is an application specific grouping of messages that relate to a peer endpoint. In case of SIP a compartment is formed by all messages belonging to a SIP dialog. The compartment identifier uniquely identifies a compartment. SigComp invokes compressors on a per compartment basis which means that a compartment identifier can also be used to identify a compressor. For this a mapping between compartment identifiers and compressors has to be maintained. By providing a compartment identifier together with the application message the application ensures that the compressor dispatcher can locate an appropriate compressor. Each time a new compartment identifier is encountered a new compressor is invoked. Once the compressor has compressed the application message a SigComp header is created and attached to it. After this the compressor dispatcher can pass the SigComp message to the transport layer. When the application wishes to close a compartment e.g. after receiving a BYE message and sending the final response it should indicate this to the compressor dispatcher.

The compressor implements a certain compression algorithm that is used to compress application messages. One of the fundamental ideas of SigComp is that the standard does not dictate the use of one compression algorithm that should be used by all endpoints. Instead the choice of the algorithm is left as an implementation decision. What follows is that each endpoint should be able to decompress the output of a variety of compression algorithms. This is made possible by the use of a virtual machine to take care of the decompression functionality. When a compressor creates a SigComp message containing a compressed application message it includes a decompression algorithm to the header of the message. This decompression algorithm is called the bytecode and it has been compiled to a form that can be executed on the virtual machine.

A number of requirements are placed on the compressor. First of all it needs to be transparent e.g. the compressor does not send bytecode that causes the UDVM to incorrectly decompress a SigComp message . The compressor should supply some form of integrity check over the application message to ensure that successful decompression has occurred. It must ensure that the message can be decompressed using the resources available at the remote endpoint. If the transport is message based as it is in the case of User Datagram Protocol UDP the compressor must map each application message to exactly one SigComp message. In case the transport is stream based but the application defines its own internal message boundaries the compressor should also map each application message to exactly one SigComp message.

The role of the decompressor dispatcher is to receive SigComp messages from the transport layer invoke a new instance of the UDVM to decompress each message and pass the resulting uncompressed message to the application. Once the application has received the message it maps the message to a compartment and returns the compartment s identifier to the decompressor dispatcher. The decompressor dispatcher then hands the identifier to the state handler which uses the identifier to save state information and forward feedback information to an appropriate compressor. By supplying a compartment identifier the application grants the dispatcher a permission to do this.

The Universal Decompressor Virtual Machine UDVM is the entity that decompresses SigComp messages. The decompression process is carried out by executing a special compiled program called the bytecode on the virtual machine. The UDVM is a virtual machine much like the Java Virtual Machine but with the difference that it has been optimized for running decompression algorithms. In the case of SigComp the source code that is compiled to bytecode is called the UDVM assembly and the entity compiling it is called the UDVM interpreter. The bytecode can be thought of as the machine language of the UDVM.

The UDVM provides flexibility when choosing how to compress a given application message the compressor implementer has the freedom to select an algorithm of his choice. The compressed data is combined with a bytecode containing a set of UDVM instructions. These instructions are carried in the header of the SigComp message and they allow the original data to be extracted at the receiving endpoint.

Because SigComp can run over an unsecured transport layer a separate instance of the UDVM is invoked on a per message basis to ensure that damaged messages do not affect the decompression of later messages. However during the decompression process the UDVM may invoke the state handler to access an existing state. This way the state of the UDVM instance that decompressed the previous message can be restored by a later UDVM instance.

When the UDVM has been initialized the UDVM can receive additional compressed data from the decompressor dispatcher or state information from the state handler only upon request. As the decompression proceeds the UDVM outputs decompressed data to the decompress or dispatcher. When it encounters the end of a message it indicates this to the dispatcher which provides it with a compartment identifier. This identifier is passed to the state handler in a state creation request. The state handler uses the compartment identifier to store the state information in a location in the state memory that is reserved for the corresponding compartment. The UDVM also forwards the feedback information that may be piggybacked to a SigComp message to the state handler.

A UDVM cycle is a measure of the amount of CPU power that is required to execute a UDVM instruction. A UDVM cycle limit is used to restrict the number of UDVM cycles that can be used to decompress each bit in a SigComp message. The amount of cycles a bytecode uses must be monitored because malicious users can send bytecodes containing looping code. However the cycle limit only reduces the amount of damage that can be caused but does not remove the problem.

In SigComp the size of the decompressor memory is negotiable. The decompressing side advertises the size of the decompressor memory to the compressing side. The default size is two kilobytes. To improve the efficiency of the compression a memory size of four or eight kilobytes or even more can be used. The decompressor memory is divided into two sections the first of which is used to store the decompressed message. The other section is used for the UDVM to hold the bytecode and a circular buffer which enables the use of states that are larger than the UDVM memory. This is possible because as soon as the buffer fills the UDVM can start to overwrite content at the beginning of the buffer.

Because a separate instance of the UDVM is invoked to decompress each message that arrives a way is needed to retain information between messages. This is the task of the SigComp state handler which stores information between received SigComp messages. Thanks to the state handler the compression ratio is improved since messages can be compressed relative to the information contained in previous messages. The state handler makes it possible to create state items for access when a later message is being decompressed. The state items typically contain either a snapshot of a UDVM instance s memory or an uncompressed message.

The state handler manages state memory on a per compartment basis. As well as storing the state items themselves it maintains a list of the state items created by a particular compartment and ensures that no compartment exceeds its allocated memory.

UDVM Interpreter is the entity that translates the UDVM instructions and their operands listed in UDVM assembly to the bytecode form. The UDVM interpreter takes as an input a file containing UDVM assembly source code and compiles it to a bytecode which can be executed on the virtual machine.

With the operating environment of the signal compression optimization system described a signal compression optimization method is depicted in . For clarity the method is segregated sequentially into a communication network disseminating portion of blocks followed by a communication device recipient portion of blocks . It should be appreciated that the method may include a plurality of entities and that dissemination of compressed SIP SDP data content may be also be sent from a communication device to the communication network. Furthermore the communication network or the communication device may represent a plurality of entities with dissemination be originating relayed or terminating in various combinations of such entities.

Beginning in block the communication network may advantageously advance aspects of signal compression optimization system by obtaining hardware software configuration of a recipient communication device. This could entail a comprehensive database meant to remain up to date on the universe of possible communication devices or particularly focused on those that support other aspects of the signal compression optimization system disclosed herein. This data may be supplied by Original Equipment Manufacturers OEM or be interactively obtained via SIP SDP communication with individual communication devices or hierarchical entities that support a population of such communication devices. In block a signal compression algorithm is selected along with a corresponding decompression source code bytecode . Such a selection may be made advantageously with awareness of whether the recipient communication device s have local access to an executable version of the bytecode rather than expecting the communication device to invoke a UDVM. In block the communication network compiles the bytecode consistent with the obtained hardware software configuration to produce executable machine code. Such compilation may wait for a request and then be transmitted immediately. In the depicted sequence in block this compilation is done in advance of a request and indexed according to the bytecode and configuration for dissemination upon request.

Data content e.g. multimedia content and or signaling is compressed according to a compression algorithm in block . The compressed data content is then transmitted in accordance with a data packet protocol along with the selected source code bytecode that is suitable for interpretation at the communication device mobile terminal to decompress the data content e.g. multimedia signaling etc. . In the exemplary implementation in block the communication network wirelessly transmits the compressed data content in accordance with a data packet protocol along with the selected source code bytecode .

In blocks the communication device wirelessly receives the transmission. In block the transmitted bytecode is detected. In block an accessible executable version of the decompression code associated with the detected bytecode is located avoiding the slower interpretation of the bytecode on a virtual machine. Accessing the executable version may entail local or remote compilation in advance of execution with storage for future use. The executable version may entail utilizing digital signal processing or other types of hardware optimized decompressor in order to avoid use of a UDVM interpreter. In block the compressed data content is then decompressed using the accessible executable version.

In four particular implementations of the method of are depicted. First in a signal compression optimization apparatus builds upon an assumption that a set of compression algorithms to be used is known in advance and is incorporated into a mobile terminal by provisioning with a machine code implementation for these decompression algorithms. The Signaling Compression SigComp optimization operation performed on the mobile terminal can compare in block the decompression bytecode detected along with SigComp messages sent over a communication channel by a Proxy Call Session Control Function P CSCF . If in block the SigComp optimization operation determines that an exact match is detected then in block machine code decompression is executed. If however in block an exact match was not determined then in block the Universal Decompressor Virtual Machine UDVM interpreter is invoked on the bytecode for decompression. The local SIP SDP application receives plain SIP SDP messages that were initially compressed by the P CSCF. Thus if an algorithm is sent by the P CSCF for example during roaming or after network upgrade that is not recognized in block the mobile terminal will still be able to execute the standard UDVM interpreter.

In an alternative signal compression optimization apparatus entails just in time compilation by a SigComp optimization operation that compares in block decompression bytecode received over a communication channel from a P CSCF with a list of pre compiled algorithms. If the bytecode is found to be a match in block then the associated machine code of the pre compiled algorithm is used in block for decompression. If no match was found in block then the bytecode is compiled in block into machine code and then block is performed in either event providing plain SIP SDP messages to a Local SIP SDP application . Thus this bytecode is compiled once and is used for decompression of all the following Session Initiation Protocol SIP messages. In use of the UDVM is avoided by waiting until the compilation is performed. This method requires bytecode compilation capability on the target. All the messages after the first one do not suffer from any processing inefficiency that would have been induced by executing UDVM interpreter code. Alternatively compilation may occur in background for future use while invoking the UDVM interpreter for the current communication.

In another alternative signal compression optimization apparatus extends the use of a compiled version of the bytecode but instead of compiling the bytecode on target the machine e.g. compiled code is sent by the network. To make sure that this machine code is compatible to the mobile in question a network SigComp server can first check the Hardware Software version number of a mobile terminal using SIP messaging capabilities via a channel . In other words the network chooses the appropriate machine code that needs to be sent to the mobile station according to mobile station s hardware software HW SW information. The machine code received can be stored on the mobile station s permanent memory to avoid subsequent re transmission of the same machine code. To that end a SigComp optimization operation in block compares the decompression bytecode received over the communication channel form a P CSCF . If a bytecode match is determined in block then the precompiled machine code is executed in block . If no match was found in block then a pre compiled version of the bytecode is requested from the SigComp Server and the bytecode is added to the list block . The machine code is then available for execution to achieve decompression in block to provide plain SIP SDP messages to a local SIP SDP application .

In yet an additional alternative signal compression optimization apparatus has mobile terminal whose decompressor dispatcher receives SigComp messages with decompression bytecode via a communication channel from a P CSCF . The mobile terminal utilizes an optimized hardware processor . Proxy UDVM programs the hardware processor with specific bytecode and then sends SigComp messages for decompression in the hardware processor . The hardware processor can be either a dedicated accelerator or a general purpose DSP programmed for UDVM interpretation. The plain SIP SDP messages are then utilized by a local SIP SDP application .

This system and method can also be applied to the Network side to reduce processing requirement of P CSCF servers.

Implementation. A variety of implementations are possible. It is likely that some advanced implementation such as a method in which the network sends a pre compiled de compression binary to the mobile station would require some support from infrastructure vendors and therefore would require some form of standardization. Therefore in some implementations it may be appropriate to include at least some of the features of the method and apparatus disclosed herein in standards such as those promoted by 3GPP 3GPP2 or IETF Internet Engineering Task Force standards organizations.

Experimental results. After running some bench marking of UDVM performance the following was observed 1 The UDVM interpreter decompresses SIP messages about 20 times slower compared to a native decompression algorithm. 2 The time that it takes for UDVM to decompress a SIP message during a normal call setup on a QUALCOMM MSM6800 chipset is about 100 ms on a mostly idle central processing unit CPU . This time goes up with advanced call setup scenarios such as usage of PRACK i.e. a SIP method that acknowledges the reception of a provisional response or Quality of Service QoS preconditions. 3 Introduction of better compression algorithms that improve compression efficiency would increase UDVM decompression time significantly. To summarize this invention can potentially reduce the call setup time by at least 100 ms or even more in case of CPU load or complicated SIP call setup flows.

The various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

Further the steps of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. For example the steps of a method may be embodied in one or more modules of a processor operable to execute the respective method steps. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal. Further for example the steps of a method or algorithm may be embodied in a computer program product comprising a computer readable medium having one or more sets of instructions operable to cause a computer to execute the respective method steps.

Referring back to the communications network may comprise any data and or voice communications network. For example communications network may comprise all or some portion of any one or any combination of a wired or wireless telephone network a terrestrial telephone network a satellite telephone network an infrared network such as an Infrared Data Association IrDA based network a short range wireless network a Bluetooth technology network a ZigBee protocol network an ultra wide band UWB protocol network a home radio frequency HomeRF network a shared wireless access protocol SWAP network a wideband network such as a wireless Ethernet compatibility alliance WECA network a wireless fidelity alliance Wi Fi Alliance network and a 802.xx network a packet data network a data network an Internet Protocol IP Multimedia Subsystem IMS network a public switched telephone network a public heterogeneous communications network such as the Internet a private communications network a multicast network such as a Forward Link Only FLO network including the MediaFLO System available from Qualcomm Inc. of San Diego Calif. a digital video broadcasting DVB network such as DVB S for satellite DVB C for cable DVB T for terrestrial television DVB H for terrestrial television for handhelds and a land mobile radio network.

Further examples of telephone networks that may be included in some aspects of communications network include at least a portion of one or any combination of analog and digital networks technologies such as code division multiple access CDMA wideband code division multiple access WCDMA universal mobile telecommunications system UMTS advanced mobile phone service AMPS time division multiple access TDMA frequency division multiple access FDMA orthogonal frequency division multiple access OFDMA global system for mobile communications GSM single carrier 1X radio transmission technology RTT evolution data only EV DO technology general packet radio service GPRS enhanced data GSM environment EDGE high speed packet access HSPA analog and digital satellite systems and any other technologies protocols that may be used in at least one of a wireless communications network and a data communications network.

While the various disclosed aspects have been illustrated and described it will be clear that the subject matter of this document is not limited to these aspects only.

For example for conciseness the communication device is depicted receiving decompressing multimedia content . Applications consistent with the aspects of the present invention may entail reverse or two way transmission of such multimedia content. For example multimedia content generated by a still image or video camera or otherwise stored on the communication device may be uploaded to the communication network . Moreover the communication network may be responsive to detecting the bytecode provided by the communication device to henceforth utilize the same bytecode and corresponding compression algorithm for transmitting multimedia content to the communication device . Thereby the communication device may increase the likelihood of receiving multimedia content for which an optimized decompression technique is supported without resorting to the UDVM interpreter .

Therefore while the foregoing disclosure shows illustrative aspects it should be noted that various changes and modifications could be made herein without departing from the scope of the described aspects as defined by the appended claims. Furthermore although elements of the described aspects may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

In addition while a particular feature may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. To the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. Furthermore the term or as used in either the detailed description of the claims is meant to be a non exclusive or .

Furthermore although elements of the described aspects and or versions may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated. Additionally all or a portion of any aspect and or version may be utilized with all or a portion of any other aspect and or version unless stated otherwise.

