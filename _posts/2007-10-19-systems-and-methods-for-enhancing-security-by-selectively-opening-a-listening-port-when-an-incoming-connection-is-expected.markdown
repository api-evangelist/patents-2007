---

title: Systems and methods for enhancing security by selectively opening a listening port when an incoming connection is expected
abstract: The present solution reduces the attack surface of a server by selectively opening a server port for listening when a client has been authenticated/authorized via another machine or process, and directed to connect to the server in question. When not selectively listening on a port, the server does not listen or open ports for connections or otherwise minimizes the number of open ports. By selectively listening for connections, the server reduces the opportunity for hackers to attack the server process, and improves the security of the server. The ability to selectively listen on a port at specific times may be combined with additional meta informationâ€”like ticketing and prior authentication information to help further secure the server. The meta information may identify and ensure that only the correct remote endpoint is allowed to connect via the port. Instead of first listening for connections and then authenticate and authorize the received connection as with typical servers, the present solution first authenticates/authorizes a connection via another machine or process, then listens for an expected and authorized connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266688&OS=08266688&RS=08266688
owner: Citrix Systems, Inc.
number: 08266688
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20071019
---
The present application generally relates to data communication networks. In particular the present application relates to systems and methods for selectively listening on a port for expected authorized connection requests.

Server processes generally listen on ports for incoming connections such as transport control protocol connection requests from a client. The server may have processes listening for requests on multiple ports of the server. Typically the server listens on these ports for connections on a continuous basis during the lifetime of the server. Having a port open for a server increases the attack surface of a server. An open port may provide a hacker another process upon which an attack may be mounted by sending bad network packets. The more ports that are open further increases the attack surface of the server for which to mount attacks.

The present solutions reduces the attack surface of a server by selectively opening a server port for listening when a client has been authenticated authorized via another machine or process and directed to connect to the server in question. When not selectively listening on a port the server does not listen or open ports for connections or otherwise minimizes the number of open ports. By selectively listening for connections the server reduces the opportunity for hackers to attack the server process and improves the security of the server. The ability to selectively listen on a port at specific times may be combined with additional meta information like ticketing and prior authentication information to help further secure the server. The meta information may identify and ensure that only the correct remote endpoint is allowed to connect via the port. Instead of first listening for connections and then authenticating and authorizing the received connection as with typical servers the present solution first authenticates authorizes a connection via another machine or process then listens for an expected and authorized connection.

In one aspect the present invention is related to a method for improving security of a device by selectively listening on a port for a connection request in response to a signal identifying an expected authorized connection request. The method includes establishing a first process on a first device for receiving incoming connections via a port. The first process is disabled from listening for incoming connections via the port. The first process receives a signal from a second process indicating a request of a second device to connect to the first device is authorized. In response to receiving the signal the first process enables listening for an incoming connection request on the port. In response to receiving a connection request via the port the first process or a second process determines whether or not the received connection request corresponds to information identifying the authorized connection request of the second device.

In some embodiments the method includes determining by the first process prior to accepting a connection for the received connection request that the received connection request corresponds to the information and accepting the received connection request in response to the determination. In other embodiments the method includes determining by the first process prior to accepting a connection for the received connection request that the received connection request does not correspond to the information and dropping or otherwise not accepting the received connection request in response to the determination. In another embodiment the method includes the first process determining after accepting a connection for the received connection request that the received connection request corresponds to the information and in response to the determination maintaining the connection. In one embodiment the method also includes determining after accepting a connection for the received connection request that the received connection request corresponds to the information and in response to the determination dropping the connection.

A second process on either the first device or a third device may receive a request from the second device to connect to the first device. The second process may authenticate the connection request and determine that the second device is authorized or allowed to connect to the first device. The second process may communicate the signal to the first process in response to this determination.

In one embodiment the method includes listening by the first process on the port until the connection request is received. Upon receipt of the connection request the first process may disable listening on the port. In some embodiments the first process listens on the port until an expiration of a predetermined time period. The first process may receive information comprising a ticket from the second device. For example the first process may accept a connection request and receive the ticket via the connection established for the accepted connection request. The first process or a second process compares a second ticket of the received connection request with the ticket. In response to the comparison the first process may determine to maintain the connection established for the received connection request if the second ticket and the ticket match. In another embodiment the first process may determine to drop the connection if the second ticket and the ticket do not match.

In another aspect the present invention is related to a system for improving security of a device by selectively listening on a port for a connection request in response to a signal identifying an expected authorized connection request. The system includes a first process on a first device for receiving incoming connections via a port. The first process is disabled from listening for incoming connections via the port. The first process may include a receiver for receiving a signal indicating a request from a second device to connect to the first device is authorized. The first process also includes a listener to listen for an incoming connection on the port in response to receiving the signal. The system may include a comparator to determine information of a connection request received on the port corresponds to information identifying the authorized connection request of the second device

In some embodiments the first process determines prior to accepting the received connection request that the received connection request corresponds to the information and accepts a connection for the received connection request in response to the determination. In other embodiments the first process determines prior to accepting the received connection request that the received connection request does not correspond to the information and in response to the determination drops the received connection request. In another embodiment the first process determines after accepting a connection for the received connection request that the received connection request corresponds to the information and in response to the determination maintains the connection. In one embodiment the first process determines after accepting a connection for the received connection request that the received connection request does not correspond to the information and in response to the determination drops the connection.

The system may include a second process on the first device or a third device. The second process may receive the request from the second device to connect to the first device. The second process may authenticate the connection request of the second device and determine that the second device is authorized to connect to the first device. In response to this determination the second process communicates the signal to the first process. The second process on the first device or a second device may include the comparator.

In another embodiment of the system the listener of the first process listens on the port until the connection request is received or an expiration of a predetermined time period. Upon receipt of the connection request the system may disable the listener. In one embodiment the receiver receives information comprising a ticket for the second device. The system via the comparator compares a second ticket of the received connection request with the ticket. In some cases the first process communicates the second ticket to the comparator of the first process or a second process. The first process may determine to maintain a connection established for the received connection request if the second ticket and the ticket match or drop the connection if the second ticket and the ticket do not match.

The details of various embodiments of the present invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of a connection management system of the present solution it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network .

The network may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network may be a bus star or ring network topology. The network and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm may not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server desktop server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server and or desktop server providing access to hosted applications desktops for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications including desktops hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications and or desktops available to the client and address information associated with a server hosting an application and or desktop identified by the enumeration. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and may be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The appliance may accelerate delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL Secure Socket Layer VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

The application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Presentation Server by Citrix Systems Inc. and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via streaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Presentation Server by Citrix Systems Inc. and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as a client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to a first process or a second process such as any of those elements described in connection . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The connection management system in some cases combines connection meta information with the selective listening technique to further secure the server. Connection meta information may include ticketing and prior authentication with another server. The first process may use this meta information to determine whether or not the connection requested by the client should be established. If the connection meta information corresponds to the connection request such as a received ticket the first process may establish the connection. In one case the first process may drop the connection request and disable listening on the port until another signal is received from the second process. In other cases the first process may drop the unauthorized connection request and continue listening for the authorized connection request.

In brief overview of FIG. A. the system may include a client having a client agent . The client as a first computing device may request a connection to a second computing device such as client A or server A. An appliance or server may receive the connection request for the second device and process the request via a connection broker e.g. a second process. The connection broker may authenticate and authorize the request to the second device. In response to authorizing the connection request the connection broker generates meta information identifying the connection which may include a ticket . For example the connection broker may obtain a ticket from any ticket service . The connection broker communicates this information to the client . The client agent may use the connection information to send a connection request to the port of the second device. Upon authorizing the connection request to the second device the connection broker communicates a signal to a second process of a port listening process of the second device.

The port listening process of the second device includes a port listener and a receiver . The port process may be established as a running process or device driver. By default or otherwise the port listener may be disabled from listening on a port until receiving a signal from another process such as the connection broker . Upon receiving a signal from the connection broker via a receiver the port process may enable the listener to listen for incoming connection requests on the port such as the connection request authorized by the connection broker . The listener receives the connection request from the client . The listener may also receive connection information which may include a copy of the ticket . In some cases the comparator of the listener process compares the information received by the listener to determine if the received connection request corresponds to the expected connection requested authorized via the connection broker . In other cases the listener process communicates the connection information to the connection broker to determine if the received connection request corresponds to the expected connection request authorized via the connection broker . If the connection request is as expected the port process establishes or maintains the requested connection. Otherwise the port process drops the connection request or the connection.

The connection broker may include software hardware or any combination of software and hardware. The connection broker may include an application program library service task process thread or any type and form of executable instructions. In one embodiment the connection broker resides or executes on a server . In another embodiment the connection broker executes or operates as part of or on an appliance . In one embodiment the connection broker receives connection requests from client and transmits information to the client to identify a device to which the client transmits the connection request. In some embodiments the connection broker operates or acts as a proxy. In one embodiment the connection broker may operate as a transparent proxy. In another embodiment the connection broker may operate as a reverse proxy. In other embodiments the connection broker intercepts requests from a client directed to another device. For example the connection broker may be deployed in line between client and server A. The connection broker may forward the connection request to the device to be connected to.

The connection broker may receive requests from an end point device or client to connect to or establish sessions with another device such as a server in a server farm or another client A. In one embodiment the connection broker receives a transport layer connection request from a client to establish a connection with the client A or server A. For example the client may request a UDP connection. In various embodiments the client requests a TCP connection. In another embodiment the connection broker receives any type and form of application layer request to establish a session with the client A or server A. For example the client may request an SSL session or an HTTP session. In another example the client such as via client agent may request any type and form of remote session or remote display protocol session such as an ICA session or an RDP session. In some embodiment the client agent communicates the connection request to the connection broker .

The connection broker may use any type and form of authentication and authorization system and policies to authenticate and or authorize the client or user of the client to connect to the requested device. In some embodiments the connection broker receives authentication credentials of a user of the client and validates the credentials. In one embodiment the connection broker validates the authentication credentials with a database a server LDAP directory service or any type and form of authentication service accessible via the network . In some embodiments the connection broker determines the authentication credentials are incomplete invalid or otherwise do not authenticate the user. In other embodiments the connection broker authenticates the user based on a policy via a policy engine such as the policy engine of the application delivery system . In one embodiment the connection broker authenticates the user via a ticket service .

In one embodiment the connection broker receives a certificate from the client . The connection broker may check if the certificate is from a valid or expected issuer or otherwise has valid or expected content. In another embodiment the connection broker validates the certificate with any authentication credentials or user profiles. In some embodiments the connection broker uses a third party service host or server to validate the certificate. In other embodiments the connection broker validates the certificate with a ticket service . In one embodiment the connection broker acts a certificate authority or issuer for client certificates and validates the received certificate against a database. In some embodiments the connection broker determines if the certificate is otherwise intact complete or without error.

The connection broker may use any type and form of information about the client to authenticate and or authorize the client device to connect to the requested device. The connection broker may receive information from the client agent . In some embodiments the client agent comprises a collection agent or otherwise performs collection of information about the client. In one embodiment the client agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the client agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The client agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. A policy engine of or used by the connection broker may have one or more authentication and or authorization policies based on any one or more of the attributes or characteristics of the client or client side attributes.

The connection broker may generate or otherwise provide connection meta information for a connection request. The connection meta information may include any type and form of information to identify the connection request. The connection meta information may include a file such as an ICA file. For example the connection meta information may include any of the following user id password transport driver name or IP address of application server name of published application or any working or program directories etc. In another embodiment the connection meta information may include information identifying the device for which to connect such as a host identifier host name IP address and or port number. In some embodiments the connection meta information may uniquely identify the connection request. The connection meta information may include any portion of the header fields or payload of the network packet such as source and or destination addresses and ports. In one embodiment the connection meta information includes one or more tickets or is otherwise associated with one or more tickets . In another embodiment the connection meta information may include any type and form of authentication and or authorization information. In other embodiments the connection meta information may include any client side attributes such as attributed provided or detected by the client agent .

In one embodiment the connection broker generates the connection meta information upon receipt of the connection request. In another embodiment the connection broker generates the connection meta information upon authentication and or authorization of the request. In other embodiments the connection broker generates the connection meta information upon receipt of a ticket for the connection from the ticket service . As will be described herein the connection broker may communicate the connection meta information to the requesting device such as client . For example the connection broker may identify to the requesting client via the meta information what device to connect to and or how to connect to the device. The connection broker may also communicate the connection meta information to the device to which the client requests connection such as client A or server A.

A ticket service may include software hardware or any combination of software and hardware. The ticket service may include an application program library service task process thread or any type and form of executable instructions. In one embodiment the ticket service may reside or operate on the same device as the connection broker such as server . In some embodiments the connection broker may include the ticket service . In another embodiment the ticket service may reside or operate on a separate device such as server .

The ticket service may provide authentication services and or provide one or tickets for use in establishing connections via the connection management system . A ticket service generates and validates tickets for connection and authentication purposes. In one embodiment the ticket service may receive authentication credentials and or certificate to provide a ticket. A ticket may comprise a session identifier and or key. The ticket may also comprise a random number an application server certificate a constant or null value or any other type of identification confidential or security based information that may be used for such purposes. In some embodiments the ticket service encrypts the ticket. In one embodiment the ticket service stores information about the connection request in association with a generated ticket. For example the ticket service may store encrypted authentication credentials communicated to the ticket service by the connection broker .

Also as depicted in a first process or port process may reside or operate on the device to which the client requests a connection. The port process may include software hardware or any combination of software and hardware. The port process may include an application program library service task process thread or any type and form of executable instructions. The port process or any portion thereof may operate on any layer of a network stack. In one embodiment the port process or any portion thereof operates in kernel mode. In other embodiments the port process or any portion thereof operates in user mode. In yet another embodiment a first portion of the process operates in kernel mode while another portion operates in user mode.

The port process may include a listener for listening on a port of the device . The listener may include any type and form of driver software or program for listening for accepting establishing and or dropping connections via a port of the device. As depicted in a device such as client A or server may have one or more network ports for transmitting and receiving data over a network. The network port provides a physical and or logical interface between the computing device and a network or another device for transmitting and receiving network communications. The type and form of network port depends on the type and form of network and type of medium for connecting to the network. The interface to the port may include software hardware or any combination of software and hardware. A network stack of the device may interface to the port via one or more device drivers.

The listener may include any type and form of application programming interface API for listening or waiting for any type and form of connection request. In one embodiment the listener includes any type and form of socket based communication API. In some embodiments the listener is designed constructed or adapted to listen for and establish any type and form of transport layer connection via a port such as a TCP or UDP connection. The listener may listen for a connection via a predetermined port. In some embodiments the listener may listen on a port identified and communicated by another process such as by the connection broker .

The listener may be designed constructed or adapted to selectively listen on a port for a connection request at a predetermined or signaled time. In some embodiments the listener does not listen on any ports until specifically communicated to do so from another process. For example although the port process may execute or otherwise be operational the port process does not listen via the listener on any ports unless otherwise instructed to do so. In one embodiment the listener listens for an expected connection request upon receiving a signal from another process. In some embodiments the listener listens for the connection request upon receipt of information that an authenticated and or authorized connection request is expected to be received by the device of the listener . In yet other embodiments the listener listens on a port on a predetermined frequency. In one embodiment the listener listens on a port starting at a predetermined time. In some embodiments the listener listens on a port for a predetermined time period. In another embodiment the listener listens on a port until any connection request is received. In one embodiment the listener listens on a port until an expected connection request is received. For example the listener may listen on the port until an identified connection request is received such as connection request authorized by the connection broker .

The port process may determine if the connection request is an expected and authorized connection request before or after accepting the connection. In some embodiments after the listener receives the connection request via the port the port process and or listener determines if the connection request is the expected and authorized connection request. For example the port process may determine from any host name or IP address of the requester whether or not the connection request is the authorized connection request. The port process and or listener may use any information available from the network packet of the connection request to make this determination. In some cases this available information is the connection meta information for the connection request.

In other embodiments after the listener receives the connection request via the port the port process and or listener accepts the connection request and establishes the connection. Through the established connection the port process receives connection meta information . In some embodiments the port process expects to receive the connection meta information as the next communication over the established connection. If the port process does not receive the connection meta information next or within a predetermined time period the port process may drop the connection. Upon receiving the connection meta information via the established connection the port process may determine whether or not the connection request and or connection is the expected and authorized connection request and or connection. For example the port process may receive a ticket via the established connection and check the ticket against the expected ticket or with a ticket service .

In some embodiments the port process provides at least two levels of comparison i upon receiving the connection request and prior to accepting the connection and ii after accepting the connection and receiving connection meta information via the established connection. The port process may check a first level or set of connection meta information such as an IP address of the connection request upon receiving the connection request via listening. After determining this first set of available connection meta information identifies the authorized connection request the port process accepts the connection. The port process receives a second level or set of connection meta information via the established connection. If the second set of connection meta information is determined to still identify the authorized connection the port process maintains the established connection. Otherwise the port process may drop or discontinue the established connection.

The port process may include a receiver for receiving any communications from another device or process such as from the connection broker . The receiver may include software hardware or any combination of software and hardware. The receiver may include an application program library service task process thread or any type and form of executable instructions. In some embodiments the receiver includes any type and form of API for receiving a signal or communication from a connection broker . The receiver may be adapted designed or constructed to receive communications in any type and form of protocol at any layer of a network stack. The receiver may be adapted designed or constructed to perform any type and form of interprocess communications between the port process and the connection broker or other service such as any of the IPC signals described below.

The port process as a first process may communicate with the connection broker as a second process via the receiver and an interprocess communication IPC signal . In some embodiments the IPC signal may comprise any type and form of control communication channel. In one embodiment the IPC signal includes any form implementation or portion of the Windows Communication Foundation programming and services model of the Microsoft Corporation. The IPC signal may include any type and form of pipe communication mechanism. In one case the IPC signal may be event based and generate events for the port process . In another case the IPC signal may comprise a shared memory IPC mechanism. In some embodiments the IPC signal may comprise the use of semaphores. In another embodiment the IPC signal includes any type and form of remote procedure calls. In one embodiment the IPC signal includes socket based communications.

In yet another embodiment the IPC signal may include any type and form of messaging. In other embodiments the connection broker and the port process via the receiver communicate via a TCP or UDP connection. In some embodiments the connection broker and port process communicate via a secure communication channel such as via a virtual private network VPN secure socket layer SSL or Transport Layer Security TLS . In one embodiment the connection broker communicates connection meta information to the port process via the IPC signal . In another embodiment the port process communicates via the receiver and or IPC signal connection meta information received from the client .

Still referring to the connection management system of a comparator may be used to compare the connection meta information or any portion thereof generated by the connection broker with the connection meta information or any portion thereof received by the port process in association with the client s connection request. The comparator may include software hardware or any combination of software and hardware. A comparator may include an application program library service task process thread or any type and form of executable instructions. In one embodiment the connection broker includes a comparator . In some embodiments the port process includes the comparator . In another embodiment a first comparator or a first portion of the comparator operates on the server and a second comparator or a second portion of the comparator operates on the client A or server A. In other embodiments the comparator operates on another computing device . The comparator may be a separate process from either the connection broker and or port process . In some embodiments the comparator may be part of the same process of the connection broker and or port process .

The comparator may include logic functions or operations to compare a first set of connection information to a second set of connection information to determine whether or not the connection information matches or otherwise corresponds. In one embodiment the comparator expects or determines if a received connection information matched or corresponds to a stored connection information . For example the comparator may determine if connection information for a connection received by the port process matches or corresponds to connection information generated by the connection broker for an authenticated and or authorized connection request. In one embodiment the comparator checks or compares a first ticket with a second ticket. For example the comparator may determine if a ticket received by the client matches or corresponds to the ticket provided by the connection broker to the client .

In some embodiments the comparator receives the connection meta information from any portion of the port process such as the listener . In other embodiments the port process communicates to the comparator the connection meta information received from the client . In another embodiment the port process received the connection meta information via the IPC signal from the connection broker . Upon receipt of the connection meta information from the client s connection request the comparator of the port process performs the comparison. In yet another embodiment the port process communicates with a ticket service to validate or verify a ticket from the connection request of the client .

In view of embodiments of operation as depicted in the connection management system provides a technique for managing connection requests to improve the security of the client A or server A. The port process may be running on the client A or server A but the listener is disabled from listening on the port. The client may transmit a connection request to connect to the client or server such as via the client agent . The connection broker receives the connection request and performs authentication and authorization of the request such as user authentication authorization and or end point authorization. If the request is not authorized the connection request may not be further processed. If the request is authorized the connection broker generates connection meta information such as a ticket . The connection broker may forward information to the client such as to client agent to inform the client to connect to the client A or server A. The client transmits a connection request to the port of the client A or server A. The client may provide the connection meta information such as the ticket obtained via the connection broker .

The connection broker transmits a signal to the receiver of the port process to inform the port process of the expected and authorized connection request from the client . In some cases the connection broker communicates the connection meta information to the port process to identify the expected connection request. In response to the signal the port process enables the listener to listen on the port. The listener may listen for a connection request for a predetermined time period and or until a connection request is received. The listener receives the connection request and meta information from client . Upon receipt the port process may disable the listener from listening on the port.

The port process may determine via a comparator whether or not the received connection request is the connection identified and authorized by the connection broker . In some cases the port process communicates the received connection meta information to the comparator . The comparator may be 1 part of the port process 2 on the same device as the port process 3 part of the connection broker 4 on the same device as the connection broker 5 part of a ticket service or 6 otherwise accessible via the network on any device or appliance. The comparator may compare and determine whether or not the received connection meta information matches or corresponds to the connection meta information generated by the connection broker . For example in one embodiment the comparator compares a ticket received by the port process with the client s connection request to the ticket provided via the connection broker s authorization of the request. If the comparator determines the received connection request is the expected authorized connection identified by the connection broker the port process establishes the connection. The port process remains executing with the port listener disabled until receiving another signal from the connection broker .

Although generally discussed as the connection management system using a single ticket of a ticket service in some embodiments for identifying authenticated and or authorized connections a multiple ticket system or multiple ticket techniques may also be used. For example the ticket service may generate a first ticket for the client and a second ticket for the port process. Upon the port process providing both the first ticket and the second ticket to the ticket service is the connection authorized to be established by the port process . In another example the ticket service may generate multiple tickets for each of the hops between a client and a server such as a connection between the client and an appliance and the connection between the appliance and the server . In yet another example the port process may provide connection meta information received from the client to obtain a ticket from the ticket service . If this ticket and a ticket from the client match then the port process establishes the requested connection.

Referring now to another embodiment of the connection management system is depicted. In this embodiment the first process of the port process and the second process of the connection broker may be deployed on the same device. In brief overview system includes a connection broker and a port process on the device of a client A or server A to which the client may request a connection. The comparator may be deployed as part of the port process or the connection broker . The connection broker may use a ticket service on the same device or otherwise accessible on another device via a network. The connection broker authorizes and identifies connections for which the port process should enable the listener to listen for. The connection broker and the port process may communicate via IPC signal designed and constructed for interprocess communications between processes on the same device. In other embodiments the connection broker and the port process or any portions thereof are designed and constructed to embody the same process or processes.

In overview of the operations of the embodiment of the system of a client may request a connection to the device of client A or server A. For example the client agent may transmit a connection request to this device and or to the connect broker . The connection broker receives the connection request from the client . The connection broker performs authentication and or authorization of the request. If the request is authenticated and authorized the connection broker generates connection meta information . The connection broker may forward this connection meta information to the client . The client agent may use this connection meta information to transmit a connection request to the port of the port process . The connection broker also communicates a signal to the port process such as via receiver . In some cases the connection broker provides the port process with the connection meta information forwarded to client and expected in the incoming connection request from the client .

In response to the signal from the connection broker the port process enables the listener to listen on the port for an incoming connection request. The listener may listen only for a predetermined time period for an incoming request. Upon receipt of the incoming connection request from the client the port process disables the listener for listening for further connection requests. The port process may determine if the received connection request is the same as the connection authorized and identified by the connection broker . A comparator of the port process or a comparator of the connection broker may used to compare the received connection meta information to the expected connection meta information. If the received connection is as expected the port process establishes the connection to the client . Otherwise the port process may drop or otherwise not establish the connection to the client .

Referring now to another example embodiment of the connection management system is depicted. This example is directed towards an embodiment of a system including a Citrix Presentation Server farm. In the depicted environment of a Citrix Presentation Server system may be deployed with the Citrix Desktop Broker manufactured by Citrix Systems Inc to centrally deploy and manage desktop environments in a data center. For example a desktop environment such as Windows XP workstations referred to as hosted desktops may be hosted in the data center and published using Citrix Presentation Server or Desktop Server. A Desktop Broker provides the management interface between the clients and the hosted desktops. The environment of with the Desktop Broker provide a virtual work environment for users who need or desired access to a hosted desktop environment that provides a user experience similar to having a dedicated physical workstation on their desktops. Users can connect using thin terminals or computer running a Web browser and an ICA client and access these hosted desktops just as they would a published application.

In brief overview of the system of a client includes a Presentation Server client such as an ICA client a Citrix Presentation server farm and one or more hosted desktops on one or more servers . The Citrix Presentation Server farm may also include one or more Web Interface services as well as the Citrix Password Manager both manufactured by Citrix Systems Inc. The system also includes a Desktop Broker for providing session management and an interface to the hosted desktops and Citrix Presentation server farm. The Desktop Broker may be configured or administrated via a console application on a computing device or client A.

The Desktop Broker may provide access and interface services to one or more clients accessing the Citrix Presentation Server farm and hosted desktops . The Desktop Broker may include a database scheme database service and a session manager. The database service comprises a management component managing database transactions and providing connection details for hosted desktops to the Session Manager in the system. The database services uses the information in the database to provide the functionality of machine brokering and session management. The database schema creates and initializes database tables required by the Database Service. The Session Manager comprises a component used to launch a hosted desktop connection through Presentation Server. The session manager interfaces with the database service to select a hosted desktop. The session manager may also exchange information with the database service about a current state of a hosted desktop connection. A Desktop Broker console may provide a user interface to the database. System administrators may use the console to create update or delete entries for hosted desktops in the database. The Desktop Broker Console may provide an interface to check status of hosted desktop connections and take appropriate actions if required.

Although the environment or architecture depicted in may generally be described as a Citrix Presentation Server environment and or a Citrix Desktop Server environment the environment or architecture of may include any of the server and desktop virtualization technologies of Xensource Inc. of Palo Alto Calif. acquired by Citrix Systems Inc. In some embodiments the environment of may use a product embodiment of Citrix Systems Inc. incorporating Xensource technologies which may be referred to as Xen Desktop.

In operation of an embodiment of system a brief overview of steps to establish a connection to a hosted desktop through the Desktop Broker will be described. A user on client opens a Web browser to access the Web Interface logon page and enters his or her user credentials. In other embodiments the user may logon through a Program Neighborhood or a Program Neighborhood Agent interface manufactured by Citrix Systems Inc. If authentication is successful the system may present a list of hosted desktops to which the authenticated user has access. For example the session manager of the Desktop Broker may authenticate the user. The user may select a hosted desktop to which to connect. For example the user may click a user interface element representing an available hosted desktop in a web page of the browser. In response to the user s selection the client agent transmits a connection request to the Desktop Broker.

In response to receiving a connection request the Desktop Broker transmits an ICA file to the client . The client agent uses the ICA file to establish an ICA session to Presentation Server. A session manager is launched within the user s ICA session on a Presentation Server. The session manager contacts the database service and requests connection details to the specified hosted desktop. The database service returns connection details for the specified hosted desktop to the session manager. The session manager launches an RDP client and passes the RDP client the connection details for the hosted desktop. The RDP client connects to the hosted desktop specified and starts an RDP session. The session manager informs the database service that the user has successfully logged on to the hosted desktop and a session is in progress.

When a user logs out from the hosted desktop session the hosted desktop is released and made available. In response to the user logging off from the hosted desktop the system logs off the user from RDP session. The session manager informs the database service about the logoff event and the hosted desktop is released. The database service updates the status of the hosted desktop as idle available. The session manager terminates the ICA session.

The systems and methods of the selective listening and connection meta information techniques described above in conjunction with may be used in the example embodiment of . In this embodiment any server of the Desktop Broker or Citrix Presentation server farm may include one or more connection brokers . Any of the servers hosting a hosted desktop may include one or more port processes . In this scenario the Desktop Broker handles the brokering of connections and authentication of clients. When the Desktop Broker determines that a received request for an ICA connection is authenticated authorized and may be provided via a given hosted desktop the connection manager communicates the signal to enable the port process on the server providing the hosted desktop. In this manner ports of the hosted desktop are selectively listened for expected and authorized connection requests identified by a second process e.g. the connection broker . This reduces the attack surface of ports of the servers .

Referring now to an embodiment of steps of a method for selectively listening and establishing connections via the connection management system is depicted. In brief overview of method at step a port process is established on a first device for receiving incoming connections requests via a port. The port process is disabled from listening on the port. At step the port process receives a signal such as a from a second process e.g. the connection broker . The signal indicates a request of a second device to connect to the first device is expected. At step the port process is enabled to listen for an incoming connection request in response to receiving the signal. At step the port process determines if a connection request is received within a predetermined time. If the timeout period expires at step the port process stops listening for incoming requests. If a connection request is received within the predetermined time period at step the connection information of the received connection request is compared to the connection information of the authorized connection request of the second device. If at step the connection information does not match or otherwise identify the authorized connection the port process may drop the connection request or otherwise not establish the requested connection at step . If at step the connection information identifies the authorized connection the port process at step may establish the connection in response to the request. At step the port process may disable listening on the port after receiving the expected connection request.

In further details at step the port process may be established at any time prior to during or in response to the client s connection request. In one embodiment the port process is established by an administrator upon the deployment or configuration of a server. In some embodiments the port process is established and running as a service upon installation of the port process . In another embodiment the connection broker initiates the execution of the port process upon receipt of a connection request. In one case the port process service is running but by default the port listener is disabled idle or inactive. In another case the connection broker sends a signal to the port process to disable the port listener . In other cases the port listener is configured to be disabled or otherwise not listening for connection requests on a port at a predetermined schedule or time based on any type and form of temporal configuration. In some embodiments an administrator configures or directs the port process to disable port listening until a signal is received.

At step the port process may enable port listening upon receipt of any type and form of signal . The receiver of the port process may receive or otherwise obtain the signal . In one embodiment the port process receives the signal from a connection broker . In some embodiments the received signal indicates an incoming connection requested is expected to be received by the port process . In one embodiment the signal indicates a time period for which to expect the incoming connection request. In another embodiment the signal indicates the port for which to expect the incoming request. In other embodiments the connection broker communicates one or more signals to the port process . The connection broker may also communicate via a signal any connection meta information . In another embodiment the connection broker may communicate via the signal a ticket. In some embodiments the signal indicates the expected incoming connection request is authorized or allowed. The signal may indicate that only a connection request from a predetermined client or source is authorized.

At step in response to the signal the port process may enable the listener to listen on a port. The listener may listen on a port for any type and form of transport layer connection request such as a TCP or UDP connection request. In other embodiments the listener may listen on a port for any type and form of application layer or session connection request. In some embodiments the port process enables the listener to listen for incoming connection requests. In other embodiments the port process enables the listener to listen on a predetermined or specified port. In another embodiment the port process enables the listener to listen for a predetermined time period. In one embodiment the port process enables the listener to listen on a port until a connection request is received. In some embodiments the port process may enable the listener or multiple listeners to listen on a plurality of ports. In other embodiments one or more signals may trigger a plurality of port processes to enable listening on one or more ports.

At step the port process listens on the port for the incoming expected connection request until the connection is received and or a predetermined time period expires. In one embodiment the client transmits a connection request to the port within the predetermined time period. In some embodiments although the connection request from a client is expected the client may not transmit the connection request. In other embodiments although the client transmits the connection request to the port there may be a delay in delivery of the request. In these embodiments the time to deliver the request may be beyond the timeout period of the listener. In yet another embodiment the port process receives a communication on the port other than a connection request or other than an expected communication. In some embodiments the listener receives network communications other than the expected connection request during this time period. The listener and or port process may either consume or drop these communications. In other embodiments the listener does not receive any network communication on the port during the predetermined time period.

In one embodiment the listener receives an unexpected connection request drops the request and waits for another connection request until the predetermined time period expires. In another embodiment the port process and or listener may receive a signal from another process such as the connection broker to inform the port process to stop listening immediately. In one case the port process may drop any connections or connection requests in response to this signal. In another case the port process maintains established connections in response to the signal but immediately stops listening for any new connection requests.

If a connection request is not received within the predetermined time period at step the port process may disable the listener from continuing to listen on the port. In some embodiments the port process disables the listener indefinitely. In other embodiments the port process disables the listener until another signal is received. In one embodiment the port process disables the listener for a predetermined time period. In yet another embodiment the port process disables the listener until an administrator configures set or attends to the port process .

If a connection request is received by the listener such as within the predetermined time period at step the port process compares connection information of the received connection request with connection information of the identified and authorized connection request. In some embodiments the port process performs this comparison prior to accepting the connection request. In other embodiments the port process performs this comparison after accepting the connection or otherwise establishing the requested connection. In one embodiment the port process receives from the requesting device connection meta information such as a ticket . In other embodiments the port process receives expected connection meta information from a connection broker . In another embodiment the port process uses as connection meta information of the connection request any available information from the network packet of the request such as the IP address of the client. The port process may use interface with or communicate to a comparator to compare a first set of connection information of the received connection request to a second set of connection information of the expected connection request. For example the comparator may compare a first ticket generated via the connection broker with a second ticket received by the connection request from the client . In some cases the comparator may include or be a ticket service to verify or validate a ticket or connection meta information of the received connection request.

At step the port process determines whether or not the received incoming connection request is the expected and or authorized connection request. In some embodiments the port process determines whether or not the connection request corresponds to an identified and authorized connection request of the connection broker . In one embodiment the port process determines at least a portion of the received connection meta information of the connection request matches a portion of the connection meta information of the expected connection request. In other embodiments the port process only determines the received connection request is the expected or authorized connection request if the connection meta information matches exactly.

If at step in response to the comparison of step the connection information is determined to not identify the expected or authorized connection request the port process at step may drop the request or otherwise not establish the connection. In another embodiment if the port process accepted and established the connection the port process may at step drop the established connection in response to the determination. In some embodiments the port process communicates an error reply to the requestor. In one embodiment the port process communicates any type and form of alert alarm or event to indicate a receipt of an unexpected or unauthorized connection request. In other embodiments the port process may establish the connection for the unexpected request if the request matches or is allowed in accordance with any policies of a policy engine. In another embodiment the port process may establish the connection and request authentication credentials or certificates from the requesting client. The process may establish the connection and request authorization from the connection broker . In these cases if the connection is not authorized the port process may break teardown or de establish the connection. Upon dropping the connection request or discontinuing the connection the port process may disable the port listening service in accordance with step .

If at step in response to the comparison of step the connection information is determined to identify the expected or authorized connection request the port process may establish the connection at step . For example the port process may make this determination prior to accepting the connection request. In another embodiment if the port process accepted and established the connection the port process may at step continue to maintain the established connection. In some embodiments the port process may establish and or maintain the connection for a predetermined time period such as in accordance with policy or the authorization provided by a connection broker . In other embodiments the port process may establish and or maintain the connection until the client requests to terminate the connection. In one embodiment the port process may establish and or maintain the connection until receiving a signal from the connection broker . In another embodiment the port process may establish and or maintain the connection until the client is detected to be idle over the connection for a predetermined time period.

Upon establishing the connection at step the port process may disable the port listening service at step . The port process may disable the listener from listening on any other ports other than the port for the established connection or a port enabled responsive to the signal . The listener may continue to listen for network communications via the established connection. In other cases another process or portion of the port process takes over from the listener communication handling for the established connection.

In view of the structure functions and operations of the systems and methods described herein the connection management system of the present solution reduces the attack surface of the server by selectively opening a server port for listening when a client has been authenticated and or authorized and directed to connect to the server. At other times the first process of the server does not listen for connections. By selectively listening for connections the server reduces the opportunity for hackers to attack the server process and improves the security of the server. By using connection meta information to identify authorized connections the connection management system further reduces the attack server by only allowing authorized end points to connect via selectively opened ports.

