---

title: Multi-session secure tunnel
abstract: A method of communicating data over a network is provided. A secure tunnel may be implemented through the network between two computers. Performance limitations of the secure tunnel with a single session can be alleviated by establishing multiple sessions for the tunnel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782772&OS=08782772&RS=08782772
owner: Microsoft Corporation
number: 08782772
owner_city: Redmond
owner_country: US
publication_date: 20070928
---
In recent years both the mobility of users of computing devices and the number of locations where users can receive network access have increased significantly. Reliable and secure networks are desirable for many enterprises e.g. business government agencies etc. .

Thus it is desirable to enable a remote user working outside an enterprise network to connect to the network in a secure fashion often via a public network e.g. the Internet .

Among many techniques developed to transmit traffic over a public network virtual private network VPN technology is widely used to provide a secure tunnel between remote users and an enterprise network by enabling exchange of encrypted data over any public network such as for example the Internet or other wide area networks. VPN technology typically encompasses protocols such as for example Point to Point Tunneling Protocol PPTP and Layer Two Tunneling Protocol with Internet Protocol security L2TP IPSec .

Applicants have appreciated that performance of a secure tunnel may be limited by performance of the underlying connection e.g. a TCP connection for SSTP . For example the bandwidth that the TCP connection can utilize may be less than an available bandwidth which may impact performance of the secure tunnel. To improve network utilization in one embodiment multiple secure sessions for a single secure tunnel between end points e.g. a client and a server may be established. This alleviates the problem associated with underutilizing capabilities of the connection. The overall throughput achieved by a secure tunnel over a connection e.g. TCP connection may be increased by establishing multiple sessions over the tunnel. After establishing a secure tunnel with a first session a technique may be used to securely associate additional sessions established for the same secure tunnel. The multiple sessions over the SSTP tunnel may be transparent to applications and protocols transmitting data over the tunnel.

Data sent between computers in an encrypted form over a network using existing VPN protocols may encounter difficulties in for example traversing network address translation NAT routers proxy server and firewalls located between the computers. VPN protocols often require special set up in these routers proxies and firewalls.

Recently developed Secure Socket Tunneling Protocol SSTP is a secure tunneling protocol over hypertext transport protocol secure HTTPS connection that may support tunneling for any application or protocol. SSTP may allow any network traffic on top of it to be NAT and firewall friendly since HTTPS can traverse virtually all firewalls proxies e.g. an internet server provider ISP proxy and is NAT friendly. An example of a network traffic that can be carried over SSTP is a point to point protocol PPP traffic. Using PPP which may provide client authentication provides a mechanism to use SSTP as a SSTP tunnel.

A SSTP tunnel may be established over a secure channel e.g. HTTPS channel on top of a network connection such as a TCP connection.

Embodiments of the present invention are directed to establishing multiple sessions for a secure tunnel through a network between two computers. In some embodiments of the invention the secure tunnel is based on the recently developed SSTP and is a SSTP tunnel. However the invention is not limited in this respect as multiple sessions may be used to improve performance of other types of tunnels.

As mentioned above the inventors have appreciated that performance limitations of a network connection over which a secure tunnel is established may affect performance of the secure tunnel. Examples of network performance characteristics associated with a TCP connection may be bandwidth utilization packet loss and latency.

The inventors have further appreciated that drawbacks associated with network performance limitations of a secure tunnel e.g. a SSTP tunnel with a single session can be alleviated by establishing multiple sessions in parallel for the tunnel. Multiple sessions enable improved performance for the connection as information may travel over the multiple sessions simultaneously as a connection may be provided with multiple sessions in a manner that is transparent to any applications utilizing the connection. When network characteristics indicate that a secure tunnel with a single session underutilizes network capabilities one or more additional sessions may be established.

In one embodiment described in detail below the tunnel provided with multiple sessions is a SSTP tunnel. However it should be appreciated that the invention is not limited in this respect and that multiple sessions can also be provided for other types of tunnels.

In one embodiment of the invention a SSTP tunnel with a single SSTP session may be established between computers for example a client and a server. To establish the tunnel a client may connect to a server e.g. using HTTPS . The server may be a VPN server or other server that serves as a gateway to an enterprise network. After the client connects to the server using HTTPS or other protocol a higher level protocol e.g. PPP may then negotiate and initiate as described in more detail below.

In one embodiment of the invention server is a SSTP server and client is a SSTP client meaning that each is capable of forming a connection using SSTP. Client and server may comprise one or more computing devices that include software or components allowing creating a SSTP channel between client and server . Therefore both client and server may include components implemented in software hardware or combination thereof that provide functionality enabling establishing a secure tunnel between the client and the server.

Server may act as a gateway for a single computing device or multiple computing devices. In the example illustrated computers that operate behind server may belong for example to an enterprise network. Client when located outside the enterprise network may access applications on computers via server .

It should be appreciated that any of the computers described above and any of their components can be implemented in any of numerous ways. For example the functional components or operations described herein may be implemented using software hardware or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

As shown in SSTP tunnel may be created through network . SSTP tunnel is a secure communication channel over which data may be securely e.g. via encryption transmitted over network . In some embodiments of the invention SSTP tunnel is a VPN tunnel that utilizes the SSTP protocol. However it should be appreciated that the invention is not limited in this respect and that other protocols may be used to create a tunnel. Furthermore the SSTP protocol may serve as a firewall traversal mechanism for any suitable network connection.

A connection utilizing the SSTP protocol is referred to herein as a SSTP connection. An SSTP connection can be implemented for example as shown in the examples which follow and as described in U.S. patent application Ser. No. 11 561 947 entitled SECURE TUNNEL OVER HTTPS CONNECTION filed on Nov. 21 2006 which is incorporated herein by reference. Some changes have been made to reflect updates to the SSTP protocol.

At the server side a server network interface may include an HTTPS module coupled to the network and may also include a communication API . Communication API may attach to one or more server hosting applications e.g. . In one embodiment one of the server applications may include an authentication server . The authentication server may be used to authenticate client credentials during session startup and may also include support for secure socket layer SSL key exchange as part of establishing the HTTPS session. Traffic between the second computer and various application servers e.g. and may be routed using IP IPv6 routing protocols or other routing protocols.

In one embodiment an application on the client such as for example a web browser application may start up and connect with the network via for example an Internet Service Provider ISP . A connection may be established to the server network interface from the client network interface to establish a SSTP tunnel which is discussed in more detail below. After establishing the SSTP tunnel the server network interface may forward data traffic to one or more of the server applications and using an agreed to protocol for example PPP. In one exemplary embodiment for example in a corporate environment the authentication server may be used to establish the identity of a user at the first computer . Once the user has been authenticated the user may be granted access to one or more corporate applications such as e mail database access corporate bulletin boards etc.

Secure session establishment involves establishing a TCP connection between the client and server followed by a standard SSL handshake including Diffie Hellman key exchange. These establish a HTTPS session.

Once the HTTPS session is established a SSTP driver SSTPDRV may activate a state machine that manages the SSTP protocol. A PPP session negotiation may then be made over the SSTP connection and the PPP session is in place the channel is ready for tunneling application traffic through the network via the PPP protocol.

After the initial session setup and security negotiation are complete an application may send data to a socket interface such as for example a Winsock interface. The socket interface may pass the data down the protocol stack to a TCP IP interface . The TCP IP interface may then determine that the packet is destined for the SSTP tunnel and route the data to the appropriate protocol layer which in one embodiment is a PPP module . The SSTP protocol may exist at the same level as other secure protocols such as for example PPTP or L2TP . The PPP module performs PPP framing and encapsulation and passes the data to a dedicated SSTP module . The SSTP module may handle interactions between the kernel and user modes perform specialized buffering support SSTP command set and perform other suitable functions. The processed data may then be sent to the HTTPS module for encryption using SSL and sent back to the TCP IP interface . The TCP IP interface may recognize this traffic as standard HTTPS traffic and may route it to the network . HTTPS traffic is widely used for such applications as for example Internet commerce and is usually not blocked by ISPs or firewalls. When used with a web proxy the HTTPS traffic is forwarded to an appropriate port such as for example a standard HTTPS port .

Data over the secure tunnel using the SSTP protocol may include control traffic and data traffic. An exemplary command set for control and data traffic and their corresponding packet format follows.

As the names imply the control packet may be some channel specific control message and the data packet carries the data from the higher layer.

The SSTP protocol has a primary header which will be common across both the control and the data message.

The Length field is the length of the SSTP packet excluding the SSTP HEADER. It cannot exceed 4095 bytes. The SSTP protocol should not accept transmission requests from higher layers in our case PPP exceeding this limit as otherwise SSTP protocol will have to handle fragmentation.

The SSTP control message as discussed above will be present after the SSTP HEADER provided the PacketType is SSTP PACKET TYPE CONTROL. The control message will consist of a ControlMessageType and a number of attribute length value fields which form the complete control message. The control message types are defined as follows 

The SSTP ATTRIBUTE SESSION COOKIE is an optional attribute which when sent in the SSTP MSG CALL CONNECT REQUEST may act as a differentiator for the server to categorize this request to be a new session to an already existing SSTP connection as against a new SSTP connection itself. This optional attribute may be a nonce received with an earlier connection establishment from the server.

The SSTP ATTRIBUTE CRYPTO BINDING REQ attribute may be sent by the server to the client if it chooses to validate the authenticity of the client based on the authentication data from the higher layer for example PPP . This may comprise the nonce which may be the session cookie for multi session establishment and the hash protocol to be used for computing the crypto binding.

The SSTP ATTRIBUTE CRYPTO BINDING is an attribute sent by the client to the server once the higher layer authentication is complete which may use the hash algorithm as specified by the server and use the higher layer authentication data to compute the crypto binding value.

The SSTP ATTRIBUTE COMPLETION STATUS attribute is used to indicate the completion status of a request. This can occur more than once in a control message. The value is of 8 bytes size with the following structure 

In a negative acknowledgement NAK message this attribute will provide more information on why a specific attribute is being rejected. For example a server may response with AttribId SSTP ATTRIBUTE ENCAPSULATED PROTOCOL ID and Status being ERROR NOT SUPPORTED to indicate that transporting the specific protocol over SSTP is not supported by the server.

In the above event the original attribute has some specific value to which the server is not adhering this attribute will have some value specific to the attribute being rejected starting with AttribValue. For example if the client is negotiating for SSTP ATTRIBUTE ENCAPSULATED PROTOCOL ID with values A B and C if the server is not accepting B and C it may send 2 COMPLETION STATUS attribute with the AttribValue holding a USHORT of the protocol ID not being accepted. If the attribute value that is being rejected exceeds 64 bytes the value size will be truncated to 64 bytes in the NAK message.

The SSTP ATTRIBUTE ENCAPSULATED PROTOCOL ID attribute specifies the protocol id that will be transmitted over the SSTP encapsulation. In a given message there can be multiples of this attribute for all the various protocol IDs to be supported.

When a client tries to establish a SSTP session with the server the SSTP MSG CALL CONNECT REQUEST attribute will be the first message that gets sent out. This has the following attributes 

A client can resend this message with different values for the various attributes or a different set of attributes based on the outcome of the earlier request. There may be a predefined number of renegotiation of parameters after which the connection will be aborted.

SSTP MSG CALL CONNECT ACK may be sent in response to a connect request and it will have the CRYPTO BINDING REQ. Otherwise this message will not have any attributes SSTP ATTRIBUTE CRYPTO BINDING REQ.

The SSTP MSG CALL CONNECT NAK attribute may be sent in response to a connect request and it will have the list of attributes that are not accepted by the server. In response to a NAK the client MUST send out a new CONNECT REQUEST with all the attributes and their values that it wants. It cannot provide only the adjusted values. Unless the server is ACKing it will not store the attribute values passed by the client.

The SSTP MSG CALL CONNECTED attribute may be sent by the client to complete the handshake with the server in response to SSTP MSG CALL CONNECT ACK. This may have the SSTP ATTRIBUTE CRYPTO BINDING computed after the higher layer authentication is done.

When a client wants to add more sessions to an existing SSTP session it may do so by passing the SSTP ATTRIBUTE PRIMARY SESSION COOKIE which may be a nonce established in the earlier session establishment in SSTP MSG CALL CONNECT REQUEST. This may enable the server to identify the appropriate authentication data that should be used to validate the crypto binding. The server will provide the SSTP ATTRIBUTE CALL CONNECT ACK with the crypto binding request with a different Nonce value which the client has to use to recomputed the crypto binding.

SSTP SG CALL ECHO RESPONSE is a keep alive message sent in response to the echo request and it doesn t have any attributes associated. If the response has not been received from the remote site for 2 iterations and there is no data traffic flowing the connection will be aborted.

The SSTP MSG CALL DISCONNECT attribute may be sent by either the client server to initiate disconnect. All the data packets received from the server after a disconnect request has been sent will be dropped. This can optionally have a SSTP ATTRIBUTE COMPLETION STATUS. After the disconnect request has been sent to the remote site the local site should wait for a disconnect timeout or until the disconnect ACK is received. There will not be any retransmission done.

The SSTP MSG CALL DISCONNECT ACK attribute may be sent by either the client or server after receiving the SSTP MSG CALL DISCONNECT from the remote site. This may not have any attributes.

The SSTP MSG CALL ABORT attribute may be sent whenever there is a failure in the basic SSTP negotiation. It could be a failure to converge on the connect request parameters or it could be due to a failure to match the Fast Reconnect cookie to a connection context. This may have the SSTP ATTRIBUTE COMPLETION STATUS to indicate the reason for the failure.

When the ControlMessage bit is OFF the payload will represent the protocol data negotiated. As discussed above in one embodiment the payload of one protocol may be supported. However in another embodiment the SSTP channel protocol may be used to route packets of heterogeneous protocols.

User mode modules support all user applications and are restricted from direct access to hardware. Kernel mode modules maintain control over all hardware resources and are the only modules to have direct access to hardware such as a network interface. In this illustrative figure the user mode modules are an application socket interface a remote access connection manager and PPP engine RASMAN a SSTP service SSTPSVC and a HTTP WinHTTP module .

Kernel mode modules include a network driver interface specification NDIS that is the definition of application to hardware network protocols and HTTP HTTPS system files . The NDIS includes a TCP IP module a wide area network WAN framing module a NDIS wide area network module and a SSTP driver SSTPDRV . The dashed lines in indicate trans mode connections while solid lines indicate connections within a mode.

In operation after the HTTPS session is successfully established e.g. a TCP connection and the SSL handshake are performed the SSTPSVC at a first computer e.g. first computer of may setup a SSTP session context with the remote site for example second computer of . That is after the SSL handshake is done the SSTPSVC may trigger contextual setup activity within the HTTPS module. After this is done the SSTPDRV may then start a SSTP finite state machine over the HTTPS session. During this phase only SSTPDRV SSTPSVC and and HTTPS modules are interacting. Once this setup is complete a binding will be created between the NDISWAN and the SSTP session. The remote access connection manager RASMAN may be notified of the SSTP session by the NDISWAN and may initiate the PPP negotiation over the SSTP connection. The PPP finite state machine may be implemented in the RASMAN within a loaded PPP module . The PPP control packet will be passed directly from RASMAN to the NDISWAN . The NDISWAN will pass it to SSTPDRV . The SSTP driver will hand over the packet to SSTPSVC and the SSTPSVC will pass it on to HTTPS module . Typically the HTTPS module passes the data to the TCP IP module for routing over the network. There will be an outstanding SSTP POST request with just the initial header sent to the remote server. The server will immediately reply back with a PUT response. The PUT request continuation as entity body will form the client to server data traffic and the response entity body will be the server to client data traffic. After the headers are exchanged the SSTP protocol is available for use. After the PPP negotiation is complete the channel may be ready for tunneling application traffic.

When the channeling tunnel is ready data traffic may be carried over the link. The kernel mode TCP IP module may accept traffic in a form of a data packet from the application and socket interface in the user mode. The TCP IP module identifies that the packet is to be routed through the SSTP tunnel and hands it over to the WAN framing module . The WAN framing module may map the connection SSTP to a correct interface and pass it to the NDISWAN module . This is roughly the equivalent to PPP module of . The NDISWAN module is responsible for PPP framing and compression. Any encryption that might be done at a PPP module at this layer is turned off because it will be SSL encrypted. From this point on the sequence of operations will be the same as the control traffic above that is to the RASMAN SSTPDRV SSTPSVC and HTTPS module . Once the SSTP PPP encapsulated data bytes reach the HTTPS module the HTTPS module will send them over the TCP connection default port after doing SSL encryption. So the packet again comes to TCP IP module from the user mode HTTPS module but the routing will determine that this traffic may go over the Ethernet interface not shown instead of to the WAN framing module as with the original application data.

The description above describes how a secure tunnel e.g. a SSTP tunnel with a single link e.g. a single SSTP session may be established. Using the SSTP protocol data traffic e.g. PPP traffic which is datagram oriented may be encapsulated over stream oriented SSL session. Therefore the PPP traffic may traverse NATs and firewalls. SSL may enable data encryption and PPP may enable client authentication.

As described above Applicants have appreciated that network capabilities may sometimes be underutilized when a secure tunnel is used to transmit data between a client and a server such that benefits can be achieved by employing multiple sessions for a secure tunnel. In some embodiments the performance of the network can be evaluated e.g. by evaluating one or more network characteristics to evaluate the desirability of forming multiple links for a single secure tunnel.

In some embodiments of the invention the network characteristics that may be monitored and or evaluates to determine whether additional sessions or links may be desired may comprise network latency and or packet loss rate. However it should be appreciated that the invention is not limited in this respect as any other suitable network characteristics may be used to make a decision regarding the desirability of establishing multiple sessions for a secure tunnel.

The bandwidth under utilization may depend on the Network latency and packet loss rate. The available bandwidth is typically negotiated between a client computer and an ISP and can be measured in any suitable way. Some client computers e.g. SSTP client or include components that provide functionality of measuring network latency between the client and a server. For example SSTP module shown in and or the TCP IP protocol stack of the client computer may be used to measure latency using known techniques. However the embodiment wherein latency is evaluated to determine the desirability of establishing multiple links is not limited to using these techniques for measuring latency as any suitable technique may be employed.

The SSTP tunnel may be established in any suitable way. For example as described above the client may connect to the server via a TCP connection followed by a SSL handshake which establishes a HTTPS session. A state machine that manages the SSTP protocol may then by activated by a SSTP driver e.g. SSTPDRV to establish a SSTP connection. This may be followed by negotiating a PPP session over the SSTP connection which renders the SSTP tunnel ready for tunneling application traffic via the PPP protocol. It should be appreciated that any suitable application traffic using any suitable protocol may be communicated over the SSTP connection.

To determine whether it is desirable to add additional links for the established SSTP tunnel performance parameters of the TCP connection may be measured as shown in block . Available bandwidth may be higher than bandwidth that a TCP connection may utilize which may affect performance of the SSTP tunnel established over the TCP connection. As mentioned above any suitable parameters may be measured. For example such performance measure parameters as for example network connection latency e.g. the time required for a byte to travel from one end of the connection to another and data loss rate may be determined by a SSTP layer e.g. SSTP module or within the TCP IP stack e.g. by TCP IP module . In some embodiments the additional links may also be established based on configuration settings present in the system.

In one embodiment of the invention network latency of data traffic between the client and the server higher than 100 milliseconds and or data loss greater than 10 may indicate that the TCP connection is saturated at a throughput of about 2 Mbps despite the fact that available bandwidth may be higher. Thus such conditions may indicate that the performance of the connection may benefit from forming additional links. It should be appreciated that the invention is not limited in this respect as other thresholds for latency and or data loss may be used and other network performance measure parameters may be evaluated to determine that performance of the SSTP tunnel could be improved via one or more additional links.

Based on the measurements of the network performance in decision block it may be determined whether the capabilities of the network connection are underutilized. If so the process proceeds to block where the client may send a request to the server to establish another session over the existing SSTP tunnel. Otherwise if the measured network characteristics do not indicate that the network is underutilized the process may return to block where network performance may continue to be monitored.

In accordance with one embodiment it is desirable to employ some techniques for associating multiple links established for a single tunnel so that the multiple links can be used in parallel for the tunnel as opposed to being treated as forming separate tunnels. This can be done in any suitable way as the invention is not limited in this respect.

In one embodiment upon sending the request to the server to establish an additional session over the SSTP tunnel in block the client authenticates with the server to associate the additional session with the SSTP tunnel as shown in block . This can be done in any suitable way. In one embodiment a crypto binding mechanism may be provided by the SSTP protocol whereby a higher layer protocol e.g. PPP may provide the client authentication which is described in detail below. The process may then proceed to block where the additional session over the SSTP tunnel may be established. The client may optionally return to block to continue monitoring network performance to determine whether more sessions should be established over the SSTP tunnel.

In one embodiment the use of multiple SSTP sessions in a SSTP tunnel may be transparent to applications communicating via the tunnel. Data may be distributed among the multiple sessions using any suitable technique including a round robin mechanism or any other. Furthermore data may be sent based on characteristics of the applications and protocols utilizing the tunnel. In some embodiments of the invention data is distinguished along the multiple sessions.

As described above in one embodiment additional sessions established for a secure tunnel are associated with the tunnel. In one embodiment an authentication mechanism based on the Fast Reconnect of the SSTP protocol may be used to perform the authentication of multiple sessions within a secure tunnel such as a SSTP tunnel although other techniques are possible. The Fast Reconnect may demonstrate that a new SSTP session belongs to the same client that negotiated a higher protocol layer e.g. a PPP layer . As described above during the SSL handshake or negotiation performed as part of a HTTPS session establishment the SSTP client may authenticate the SSTP server. The SSTP server may optionally authenticate the SSTP client. When the client is not authenticated with the SSTP server there is a risk of an attacker implementing a man in the middle attack whereby the attacker may establish a HTTPS connection to the SSTP server and forward data packets e.g. PPP packets that are received from the SSTP client for communications other than SSTP communications e.g. wireless communications . To prevent man in the middle attacks the authentication of the SSTP client with the SSTP server and the authentication of the SSTP server with the SSTP client may be cryptographically bound. The SSTP protocol may implement such cryptographic binding by requiring the client send as a SSTP message a value derived from authentication parameters negotiated during an authentication provided by a higher layer protocol e.g. PPP authentication over the HTTPS connection. However the invention is not limited in this respect as other authentication credentials may be used as part of the SSTP message. For example in one embodiment a cryptographic nonce may be substituted.

The SSTP client may be authenticated by the SSTP server during the higher layer protocol authentication. Using the SSTP message the SSTP client can prove that it was authenticated with the SSTP server and the higher layer protocol authentication was for SSTP communications. Because the client has already been authenticated to the SSTP server during SSL negotiation as part of HTTPS connection establishment the client can also confirm from the SSTP server either that there is no man in the middle attack or that the entity between the client and server is an entity that the SSTP server may trust. This process which is referred to herein as crypto binding may be used to protect the SSTP connection against man in the middle attacks.

The crypto binding mechanism may be used to establish additional sessions over the SSTP tunnel which is schematically shown in . As illustrated in a server e.g. a SSTP server sends a connection identification by way of example only as a nonce to a client e.g. a SSTP client during establishment of a secure tunnel e.g. a SSTP tunnel with a single session e.g. a SSTP session . To establish an additional session over the secure tunnel the client may send to the server a Call Connect Request that may comprise the nonce that was previously provided by the server to the client during establishment of the secure tunnel as shown in . The server may then authenticate the additional session using the nonce and send a Call Connect Acknowledgment to the client along with a nonce for authentication of subsequent sessions as shown in . In essence the server may validate that the client that is requesting additional session is the same client that has previously established the secure tunnel with the server. Finally the client may send the server a Call Connected message along with the crypto binding to establish the identity of the client as claimed with the nonce that it sent initially and an additional session is established over the secure tunnel as shown in . Any higher layer data traffic may now be transmitted over the session or the session . It should be appreciated that the particular messages described above as being sent between the client and server are shown by way of example only and any other suitable messages and attributes may be used.

The methods and systems described herein can be implemented on any suitable computer system including a single computer devices or a collection of distributed devices coupled in any suitable way.

Device may include at least some form of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media. For example device may also include storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile media removable and non removable media of any type for storing information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage all are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device . Device may also contain network communications module s that allow the device to communicate with other devices via one or more communication media. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Network communication module s may be a component that is capable of providing an interface between device and the one or more communication media and may be one or more of a wired network card a wireless network card a modem an infrared transceiver an acoustic transceiver and or any other suitable type of network communication module.

In one embodiment the methods and systems described herein may be implemented via software code that is stored on one or more computer readable media and includes instructions that when executed e.g. on processor implement parts or all of the techniques described herein.

Device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be appreciated that the techniques described herein are not limited to executing on any particular system or group of systems. For example embodiments may run on one device or on a combination of devices. Also it should be appreciated that the techniques described herein are not limited to any particular architecture network or communication protocol.

The techniques described herein are not limited in their application to the details of construction and the arrangement of components set forth in the following description or illustrated in the drawings. The techniques described herein are capable of other embodiments and of being practiced or of being carried out in various ways. Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

