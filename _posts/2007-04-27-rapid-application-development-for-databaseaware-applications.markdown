---

title: Rapid application development for database-aware applications
abstract: Embodiments of the invention provide application development tools that allow developers to rapidly build database-aware applications and database unit tests. Embodiments of the invention support multiple scenarios for database-aware application development, including beginning from a database table and automatically creating application code to access the table, beginning from an existing database query, beginning from existing application code that accesses a database, and hybrids or variations of these approaches.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392880&OS=08392880&RS=08392880
owner: International Business Machines Corporation
number: 08392880
owner_city: Armonk
owner_country: US
publication_date: 20070427
---
Embodiments of the invention are related to tools used to develop application software. More specifically embodiments of the invention provide an intelligent integrated development environment IDE tool used for rapid application development of database aware applications.

Developing software applications is a complex task and IDE tools are available to assist computer programmers with the development process. Currently IDE tools are available to assist programmers developing applications in a variety of programming languages e.g. Java .net C C C etc. . These tools are typically configured with features such as auto indenting syntax highlighting type checking and a variety of other features that assist the development process. An IDE tool usually includes a text editor that visually displays errors as source code is typed allowing a developer to correct errors before proceeding with the next line to code. Typically IDE tools are optimized for different programming languages and errors are identified based on the programming language being used by the developer often determined a suffix of a project file e.g. .cpp for a c program or .java for a Java program .

Although very useful these IDE tools have a variety of limitations. For example IDE tools provide little support for database statements embedded within the source code of an application. The database statements may retrieve data from or update insert data into the database. In the program source code database statements are usually specified as text strings in a database query language such as SQL. The following source code fragment illustrates an embedded SQL query using the Java programming language 

Database aware software applications are typically built using an application programming interface API that provides a means to use native query languages e.g. SQL used to access relational data sources using API calls included within program source code. For example the well known JDBC Java Database Connectivity API is a specification for connecting programs written in the Java programming language to a variety of commercially available databases.

The JDBC API allows developers to embed database statements as text strings that are passed to a program that manages the database. Although effective this approach may require substantial development time as the developer is required to write all of the necessary source code to create a connection to a particular database to pass the text of a database query to the database to receive query results and to store the results in an object of the application program none of which is likely to be part of the core functions of an application. That is the application program typically retrieves information from the database to perform some other logic or processing. For example in the code fragment listed above only the final step of process query results is likely to be related to the intended function of the application. The rest is simply overhead the developer must incur for the database aware application to access an external database. Similarly the developer must write all of the necessary source code to test each element of the application that accesses an external data source i.e. each database statement embedded within the source code of the application . Thus the developer spends significant time performing tasks that while necessary are unrelated to writing the source code that performs the intended functions of an application being developed.

Moreover the total development experience for a quality application grows exponentially difficult as complexity of the database accesses increase. Further as the IDE environment does not provide database connectivity or programming assistance for the database statements embedded within the source code of an application program developers are forced to juggle between various tools spending substantial time to even get a database aware application up and running before writing the core of the application resulting in added cost to the application development process.

Accordingly there remains a need for an IDE tool that provides rapid application development support for database aware applications.

Embodiments of the invention provide an intelligent integrated development environment IDE tool for database aware application development. For example embodiments of the invention may be used to generate a software component configured to access a specified database using an appropriate API. The generated component may include a collection of database queries and the appropriate API calls to create retrieve update and delete records from a given database. Once the component is generated the developer may invoke methods provided by the component to perform database operations without having to write the component from scratch. By doing so the developer may focus on the key task of application development instead of writing the incidental but necessary code used to access the database. Additionally the IDE tool may be configured to generate unit tests used to evaluate the functioning of the generated component.

One embodiment of the invention includes a method for generating source code for a database aware software application. The method generally includes receiving from a user interacting with an IDE tool a selection of a database element and generating at least one database statements to access the database element. The method also includes encapsulating the at least one database statements within source code of a programming language in which the database aware software application is being written storing the source code within a project file associated with the database aware software application and displaying the source code in an editing pane of the IDE tool.

Another embodiment of the invention includes a computer program product comprising a computer useable storage medium having a computer readable program where the computer readable program when executed on a computer causes the computer to perform an operation. The operation may generally include receiving from a user interacting with an integrated development environment IDE tool a selection of a database element and generating at least one database statements to access the database element. The operation may also include encapsulating the at least one database statements within source code of a programming language in which the database aware software application is being written. The operation may also include storing the source code within a project file associated with the database aware software application and displaying the source code in an editing pane of the IDE tool.

Another embodiment of the invention includes a system having a processor and a memory containing an IDE tool configured to generate source code for a database aware software application. The operation may generally include receiving from a user interacting with an integrated development environment IDE tool a selection of a database element and generating at least one database statements to access the database element. The operation may also include encapsulating the at least one database statements within source code of a programming language wherein the user is writing the database aware software application in the programming language storing the source code within a project file associated with the database aware software application and displaying the source code in an editing pane of the IDE tool.

Embodiments of the invention provide application development tools that allow developers to rapidly build database aware applications and database unit tests. Embodiments of the invention support multiple scenarios for database aware application development including beginning from a database table and automatically creating application code to access the table beginning from an existing database query beginning from existing application code that accesses a database and hybrids or variations of these approaches.

Advantageously embodiments of the invention provide automatic code generation query generation for multiple languages and unit test automation leaving the developer to spend more time focused on designing and writing code to perform the intended functions of a database aware application. Further the developer may make frequent use of unit test programs executed during application development providing seamless integration of database connectivity with the regular development process. Thus embodiments of the invention may significantly reduce application development and testing overhead related cost.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive on which information is permanently stored ii writable storage media e.g. writable DVDs RW CDs and hard disk drives on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer such as through a computer or telephone network including wireless communications networks. The latter embodiment specifically includes transmitting information to from the Internet and other networks. Such communications media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Broadly computer readable storage media and communications media may be referred to herein as computer readable media.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

Additionally an embodiment of the invention is described herein relative to an IDE tool used to develop a database aware software application using the Java programming language that includes embedded SQL statements. One of ordinary skill in the art will readily recognize however that embodiments of the invention may be adapted for use with a wide variety of programming languages used to develop database aware applications. Similarly embodiments of the invention may be adapted for use with other database query languages.

As shown computer system includes a processor or processors a storage device a networking device and a memory all connected by a bus . CPU is a programmable logic device that executes user applications e.g. an IDE tool . Computer system may be connected to a display device and at least one input devices . Typically user input devices include a mouse pointing device and a keyboard and display device is a CRT monitor or LCD display. The processing activity and hardware resources on computer system may be managed by an operating system not shown . Well known examples of operating systems include the Windows operating system distributions of the Linux operating system and IBM s i5 OS operating system among others. Linux is a trademark of Linus Torvalds in the U.S. other countries or both . Network device may connect computer system to any kind of data communications network including both wired and wireless networks.

Storage device stores application programs and data for use by computer system . Typical storage devices include hard disk drives flash memory devices optical media network and virtual storage devices and the like. As shown storage device contains a database and a development project . Database may store a collection of data records organized according to a data model . For example data model may provide a relational schema of tables columns and keys for organizing data records stored in database and accessed using SQL database statements. Development project represents a collection of information used to build a software application. For example development project may include source code files scripts etc. along with resources such as fonts images build instructions and project documentation etc.

As shown memory stores a number of software applications including an IDE tool a query parser and a query tool . Also memory includes a project file . Query parser may be a software application configured to evaluate a database statement for both syntactic and semantic correctness. And query tool may be a software application configured to execute a valid database statement e.g. an SQL query . In one embodiment IDE tool may be configured to pass database statements to query tool for execution.

IDE tool is a software application used to develop other software applications. Typically IDE tool combines an editor a compiler and other useful tools in the same software package. In one embodiment IDE tool is configured to generate elements of source code for a database aware software application. For example in one embodiment IDE tool may generate the appropriate source code to connect to a database associated with development project along with objects that encapsulate database statements used to create new records and to retrieve update and delete existing records from database . Further IDE tool may generate all of the necessary source code allowing the developer to invoke these operations from within application source code e.g. a collection of Java methods exposed through an interface provided by a Java bean object .

Additionally IDE tool may be configured to generate and execute unit tests to test the functionality of the database aware application as it is being developed. Thus unlike conventional development methodologies where the database statements are only tested when the application is built and executed embodiments of the present invention allow database testing to become an integrated part of the database software development process.

In another embodiment IDE tool may also be configured to generate database aware application code around an existing query. Building an application for a known often highly customized and complex database query is a common requirement. The query itself can be a combination of various languages e.g. SQL xquery java host variables . Writing a database aware application around such a query requires the developer to have full knowledge of each language and the metadata and or data model associated with the syntax of each database language e.g. SQL xquery java and the parser technologies. IDE tool hides this complexity from the developer by generating an application around such an existing query.

Project file represents a file included in development project that is being edited by a developer using IDE tool e.g. a source code file of a database aware software application. IDE tool may display the text of the source code to the developer on display device and provide an interface that allows the user to edit project file . In one embodiment database aware application source code generated by IDE tool may be stored in project file .

Once the developer specifies the properties of a desired database connection then at step IDE tool may establish a connection with the database specified at step . Additionally IDE tool may associate the parameters of the database connection with development project . IDE tool provides ease of use so that information needed for executing such a test program such as a connection URL user name and or password does not need to be provided manually by the developer. Thus the developer may save the development project and resume it at a later time without also having to recreate the database connection for a given project.

At step IDE tool may obtain a data model e.g. data model for the database associated with the database project. For example a data model for a relational database includes a collection of tables columns names column data types keys i.e. table to table relationships etc. Additionally in one embodiment the IDE tool need not maintain an active connection to a database. Instead IDE tool may cache the data model obtained at step and update it either periodically or as specified by the developer. Thus a developer may work offline or disconnected when building the database aware application. This may be useful where the database aware application being developed is associated with a live or production database and maintaining an open connection would be disruptive of the production use of the database.

At step once the data model for a given database is obtained IDE tool may be configured to display elements of the data model as part of the development project. For example IDE tool may present a tree like hierarchy beginning from a database name which when expanded lists each table present in the data model. In turn each table may be expanded to show each of the columns present in a given table. Thus the database connection may be used to integrate components of database structure as part of a given development project.

Further as described in greater detail below IDE tool may be configured to generate application source code to access data records in the database. Returning to method of at step the IDE tool may receive a selection of a database element. In response IDE tool may generate application code to connect with and access the selected database element. For example IDE tool may generate a set of database statements encapsulated within API calls to access records from a relational table. illustrates a screenshot of an exemplary IDE tool configured to generate source code for a database aware application according to one embodiment of the invention. Illustratively screenshot shows a tree hierarchy that includes elements of a database associated with a development project. Specifically a database named SSURANGE includes a number of tables. Tree hierarchy includes a database table named MYDEPARTMENT. Further information related to the columns constraints dependencies indexes and triggers is available for database table in tree hierarchy .

In this example screenshot shows the interface of IDE tool being used to select a database table and have IDE tool generate application source code used to access the selected table. Specifically a user has right clicked on table and in response IDE tool has displayed menu . By selecting menu item a user may cause IDE tool to display a dialog box like dialog box . In this example dialog box allows a developer to specify a name for a project file to be created along with other information related to the application source code to be generated. Additionally in one embodiment a user may specify additional options or parameters for the application code to be generated. For example illustrates a screenshot of an exemplary IDE tool configured allow a developer to specify a variety of options for generating source code for a database aware application. Illustratively this example is based on an IDE tool configured to generate a Java bean object that accesses a relational database table. Of course embodiments of the invention may be adapted for use with other programming languages and types of database.

As shown a developer has used a radio button to specify whether the fields of the Java bean to be generated are public or protected and has used checkboxes to specify which SQL queries IDE tool should generate and encapsulate within the Java bean to be generated. In this case the developer has selected a global generate all SQL statements option. Thus queries are created to create retrieve update and delete records from the database. Further queries for each of these operations are created at the table parameter and record level of the underlying database.

The example shown in illustrate a developer selecting a single database table. However when more than one table is selected IDE tool may be configured to determine relationships that may exist and propose join statements used to combine information from or store information in multiple database tables. IDE tool may use the SQL model metadata i.e. data model of for this process. In one embodiment default database queries and methods are provided as suggestions and the developer may chose to generate one of all of the statements and integrated query editing tools allowing productive customization of these default queries.

In one embodiment IDE tool may allow developer customizations to improve code readability and or compliance to coding standards where applicable by providing developers with the ability to specify object names a label used within application source code from schema names a label used within a relational database . A mapping may be generated to link two related labels. For example illustrates a screenshot of an exemplary IDE tool configured to allow a developer to specify mappings between elements of a database and program variables defined within the source code of a database aware application according to one embodiment of the invention. As shown screenshot includes a table listing mapping between a column in a database table and an object filed name within a Java bean object. For example the column named ADMRDEPT maps to the bean field name of admrdept change. In one embodiment IDE tool may use the Java programming language construct of an annotation to manage these links.

Returning to the method of at step once the developer has specified all of the desired parameters and options IDE tool may be configured to generate application source code to access the elements of the database specified at steps and . For example IDE tool may generate source code to create a database connection generate host variables mapping to columns and fields of the database and methods that pass queries to the database over the database connection. In one embodiment IDE tool may be configured to generate source code based on a particular API e.g. the JDBC API which allows an application written in the Java programming language to establish a connection with a database and to transmit and receive query results from the database.

Optionally at step IDE tool may also generate unit test code that the developer may use to evaluate the application code generated at step . That is developers can chose to generate sample programs and unit tests that exercise all or some parts of the code generated at step . Thus developers do not have to write a single line of code to effectively test portions of a database aware application and can instead test database access by an application with one click. The IDE tool may generate unit tests to test each of the create retrieve update and delete methods generated by the IDE tool . In one embodiment the sample unit test program achieves this by executing first test query to retrieve all rows of table from the database. A second test query is then executed to retrieve first row in order to test a retrieve by parameter object query. The unit test then updates the row with sample test values deletes it and inserts it back into the database which tests the application source code generated to perform the update delete and create operations respectively in the application. Thus the status of the underlying database remains intact at the end of a successful test execution. Further in one embodiment a rollback is called at the end in case of failure.

In one embodiment IDE tool provides ease of use so that information needed to execute such a test program e.g. connection URL user name password need not be provided manually by the user. IDE tool may use this information from the connection associated with the project to automatically execute the unit test program. Thus the developer is provided with a one click mechanism to run the sample program. Further the unit test program may be integrated with a project save mechanism such that when the unit test is regenerated or manually changed the save action compiles and runs it. IDE tool may also provide execution time and other statistical information related to program and or database query performance.

As stated building a database aware application for a known highly customized and complex query is a common requirement. Accordingly in one embodiment IDE tool may be configured to use an existing database query and generate application source code around such an existing query.

As described above the developer may have associated a database with a given development project. If not at step the IDE tool may create a connection with the database referenced by the query received at step . For example illustrates a screenshot from an exemplary IDE tool configured to generate source code for a database aware application according to one embodiment of the invention. As shown screenshot includes an editing pane of IDE tool displaying a portion of source code from a database aware application. In this example the source code included a text string representing a database query. Specifically the SQL query select from SSURANGE.MYDEPARTMENT. This query retrieves all records from a MYDEPARTMENT table of a database named SSURANGE. Also as shown the user has selected a Database Assist item from a menu provided by IDE tool . Illustratively the user has selected to create a Java bean around query represented by text string . Accordingly at step of method IDE tool may determine whether a connection with the SSURANGE database has been established as part of a currently active development project. If not then at step IDE tool may establish a connection with this database.

At step the IDE tool may generate database access code for the database elements referenced in the query selection received at step . As described above this may include generating application source code and database queries to create retrieve update and delete records from an underlying database. At step the code generated at step may be added to the currently active development project. For example as shown in menu item is selected and in response IDE tool may generate a Java bean encapsulating both query as well as other queries e.g. a create update and delete query of the database element referenced in query i.e. the MYDEPARTMENT table of the SSURANGE database .

Advantageously as described herein embodiments of the invention provide an integrated development environment IDE tool used for rapid application development of database aware applications. Currently to create database aware applications developers are typically forced to write all of the database access layer code from scratch. That is developers have to write application source code to create a connection to a given database compose individual queries and encapsulate the queries within API calls for a given programming language. Further because IDE tools lack database integration developers have to switch around using multiple independent tools. Embodiments of the invention address this by integrating database connectivity within an IDE. Thus a developer may select an existing database element e.g. a table and the IDE tool may generate all of the application source code API calls and database queries needed for a functioning database aware application. Alternatively a developer may generate application source code from an existing database query either part of application source code or otherwise. Therefore development cycle time may be significantly reduced as the developer. In addition to these scenarios one of skill in the art will readily recognize that the rapid application development tool described herein may be tailored to accommodate a variety of other scenarios. Thus embodiments of the invention provide developers with the ability to easily generate source code for a database aware application and to easily unit test scenarios.

Still further by integrating database functionality within an integrated development environment embodiments of the invention may be used to test database connectivity and functionality for a database aware application using the same IDE interface used to create the software application. Thus rather than having to switch between tools when developing a database aware application the development may rely on the single database aware IDE.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

